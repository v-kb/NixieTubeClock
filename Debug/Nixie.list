
Nixie.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b0c  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08003bcc  08003bcc  00013bcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c68  08003c68  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08003c68  08003c68  00013c68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c70  08003c70  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c70  08003c70  00013c70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c74  08003c74  00013c74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003c78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001120  20000010  08003c88  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001130  08003c88  00021130  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f187  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023b9  00000000  00000000  0002f1bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de0  00000000  00000000  00031578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ce8  00000000  00000000  00032358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011ec7  00000000  00000000  00033040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000128fa  00000000  00000000  00044f07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006eb7c  00000000  00000000  00057801  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c637d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003110  00000000  00000000  000c63d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003bb4 	.word	0x08003bb4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08003bb4 	.word	0x08003bb4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4647      	mov	r7, r8
 8000266:	b580      	push	{r7, lr}
 8000268:	0007      	movs	r7, r0
 800026a:	4699      	mov	r9, r3
 800026c:	0c3b      	lsrs	r3, r7, #16
 800026e:	469c      	mov	ip, r3
 8000270:	0413      	lsls	r3, r2, #16
 8000272:	0c1b      	lsrs	r3, r3, #16
 8000274:	001d      	movs	r5, r3
 8000276:	000e      	movs	r6, r1
 8000278:	4661      	mov	r1, ip
 800027a:	0400      	lsls	r0, r0, #16
 800027c:	0c14      	lsrs	r4, r2, #16
 800027e:	0c00      	lsrs	r0, r0, #16
 8000280:	4345      	muls	r5, r0
 8000282:	434b      	muls	r3, r1
 8000284:	4360      	muls	r0, r4
 8000286:	4361      	muls	r1, r4
 8000288:	18c0      	adds	r0, r0, r3
 800028a:	0c2c      	lsrs	r4, r5, #16
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4372      	muls	r2, r6
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	4463      	add	r3, ip
 80002a6:	042d      	lsls	r5, r5, #16
 80002a8:	0c2d      	lsrs	r5, r5, #16
 80002aa:	18c9      	adds	r1, r1, r3
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	1889      	adds	r1, r1, r2
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	469b      	mov	fp, r3
 80002f2:	d433      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f4:	465a      	mov	r2, fp
 80002f6:	4653      	mov	r3, sl
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83a      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e078      	b.n	8000400 <__udivmoddi4+0x144>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e075      	b.n	8000406 <__udivmoddi4+0x14a>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e028      	b.n	8000386 <__udivmoddi4+0xca>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	2320      	movs	r3, #32
 8000360:	1a9b      	subs	r3, r3, r2
 8000362:	4652      	mov	r2, sl
 8000364:	40da      	lsrs	r2, r3
 8000366:	4641      	mov	r1, r8
 8000368:	0013      	movs	r3, r2
 800036a:	464a      	mov	r2, r9
 800036c:	408a      	lsls	r2, r1
 800036e:	0017      	movs	r7, r2
 8000370:	4642      	mov	r2, r8
 8000372:	431f      	orrs	r7, r3
 8000374:	4653      	mov	r3, sl
 8000376:	4093      	lsls	r3, r2
 8000378:	001e      	movs	r6, r3
 800037a:	42af      	cmp	r7, r5
 800037c:	d9c4      	bls.n	8000308 <__udivmoddi4+0x4c>
 800037e:	2200      	movs	r2, #0
 8000380:	2300      	movs	r3, #0
 8000382:	9200      	str	r2, [sp, #0]
 8000384:	9301      	str	r3, [sp, #4]
 8000386:	4643      	mov	r3, r8
 8000388:	2b00      	cmp	r3, #0
 800038a:	d0d9      	beq.n	8000340 <__udivmoddi4+0x84>
 800038c:	07fb      	lsls	r3, r7, #31
 800038e:	0872      	lsrs	r2, r6, #1
 8000390:	431a      	orrs	r2, r3
 8000392:	4646      	mov	r6, r8
 8000394:	087b      	lsrs	r3, r7, #1
 8000396:	e00e      	b.n	80003b6 <__udivmoddi4+0xfa>
 8000398:	42ab      	cmp	r3, r5
 800039a:	d101      	bne.n	80003a0 <__udivmoddi4+0xe4>
 800039c:	42a2      	cmp	r2, r4
 800039e:	d80c      	bhi.n	80003ba <__udivmoddi4+0xfe>
 80003a0:	1aa4      	subs	r4, r4, r2
 80003a2:	419d      	sbcs	r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	1924      	adds	r4, r4, r4
 80003a8:	416d      	adcs	r5, r5
 80003aa:	2100      	movs	r1, #0
 80003ac:	3e01      	subs	r6, #1
 80003ae:	1824      	adds	r4, r4, r0
 80003b0:	414d      	adcs	r5, r1
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	d006      	beq.n	80003c4 <__udivmoddi4+0x108>
 80003b6:	42ab      	cmp	r3, r5
 80003b8:	d9ee      	bls.n	8000398 <__udivmoddi4+0xdc>
 80003ba:	3e01      	subs	r6, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2e00      	cmp	r6, #0
 80003c2:	d1f8      	bne.n	80003b6 <__udivmoddi4+0xfa>
 80003c4:	9800      	ldr	r0, [sp, #0]
 80003c6:	9901      	ldr	r1, [sp, #4]
 80003c8:	465b      	mov	r3, fp
 80003ca:	1900      	adds	r0, r0, r4
 80003cc:	4169      	adcs	r1, r5
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	db24      	blt.n	800041c <__udivmoddi4+0x160>
 80003d2:	002b      	movs	r3, r5
 80003d4:	465a      	mov	r2, fp
 80003d6:	4644      	mov	r4, r8
 80003d8:	40d3      	lsrs	r3, r2
 80003da:	002a      	movs	r2, r5
 80003dc:	40e2      	lsrs	r2, r4
 80003de:	001c      	movs	r4, r3
 80003e0:	465b      	mov	r3, fp
 80003e2:	0015      	movs	r5, r2
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db2a      	blt.n	800043e <__udivmoddi4+0x182>
 80003e8:	0026      	movs	r6, r4
 80003ea:	409e      	lsls	r6, r3
 80003ec:	0033      	movs	r3, r6
 80003ee:	0026      	movs	r6, r4
 80003f0:	4647      	mov	r7, r8
 80003f2:	40be      	lsls	r6, r7
 80003f4:	0032      	movs	r2, r6
 80003f6:	1a80      	subs	r0, r0, r2
 80003f8:	4199      	sbcs	r1, r3
 80003fa:	9000      	str	r0, [sp, #0]
 80003fc:	9101      	str	r1, [sp, #4]
 80003fe:	e79f      	b.n	8000340 <__udivmoddi4+0x84>
 8000400:	42a3      	cmp	r3, r4
 8000402:	d8bc      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000404:	e783      	b.n	800030e <__udivmoddi4+0x52>
 8000406:	4642      	mov	r2, r8
 8000408:	2320      	movs	r3, #32
 800040a:	2100      	movs	r1, #0
 800040c:	1a9b      	subs	r3, r3, r2
 800040e:	2200      	movs	r2, #0
 8000410:	9100      	str	r1, [sp, #0]
 8000412:	9201      	str	r2, [sp, #4]
 8000414:	2201      	movs	r2, #1
 8000416:	40da      	lsrs	r2, r3
 8000418:	9201      	str	r2, [sp, #4]
 800041a:	e786      	b.n	800032a <__udivmoddi4+0x6e>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	1a9b      	subs	r3, r3, r2
 8000422:	002a      	movs	r2, r5
 8000424:	4646      	mov	r6, r8
 8000426:	409a      	lsls	r2, r3
 8000428:	0023      	movs	r3, r4
 800042a:	40f3      	lsrs	r3, r6
 800042c:	4644      	mov	r4, r8
 800042e:	4313      	orrs	r3, r2
 8000430:	002a      	movs	r2, r5
 8000432:	40e2      	lsrs	r2, r4
 8000434:	001c      	movs	r4, r3
 8000436:	465b      	mov	r3, fp
 8000438:	0015      	movs	r5, r2
 800043a:	2b00      	cmp	r3, #0
 800043c:	dad4      	bge.n	80003e8 <__udivmoddi4+0x12c>
 800043e:	4642      	mov	r2, r8
 8000440:	002f      	movs	r7, r5
 8000442:	2320      	movs	r3, #32
 8000444:	0026      	movs	r6, r4
 8000446:	4097      	lsls	r7, r2
 8000448:	1a9b      	subs	r3, r3, r2
 800044a:	40de      	lsrs	r6, r3
 800044c:	003b      	movs	r3, r7
 800044e:	4333      	orrs	r3, r6
 8000450:	e7cd      	b.n	80003ee <__udivmoddi4+0x132>
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b084      	sub	sp, #16
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	60f8      	str	r0, [r7, #12]
 80004b0:	60b9      	str	r1, [r7, #8]
 80004b2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004b4:	68fb      	ldr	r3, [r7, #12]
 80004b6:	4a06      	ldr	r2, [pc, #24]	; (80004d0 <vApplicationGetIdleTaskMemory+0x28>)
 80004b8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004ba:	68bb      	ldr	r3, [r7, #8]
 80004bc:	4a05      	ldr	r2, [pc, #20]	; (80004d4 <vApplicationGetIdleTaskMemory+0x2c>)
 80004be:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	2280      	movs	r2, #128	; 0x80
 80004c4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	46bd      	mov	sp, r7
 80004ca:	b004      	add	sp, #16
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	46c0      	nop			; (mov r8, r8)
 80004d0:	2000002c 	.word	0x2000002c
 80004d4:	20000080 	.word	0x20000080

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b590      	push	{r4, r7, lr}
 80004da:	b089      	sub	sp, #36	; 0x24
 80004dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004de:	f000 fb09 	bl	8000af4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e2:	f000 f81f 	bl	8000524 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e6:	f000 f935 	bl	8000754 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004ea:	f000 f893 	bl	8000614 <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 80004ee:	f000 f8d1 	bl	8000694 <MX_LPUART1_UART_Init>
  MX_USART2_UART_Init();
 80004f2:	f000 f8ff 	bl	80006f4 <MX_USART2_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80004f6:	1d3b      	adds	r3, r7, #4
 80004f8:	4a08      	ldr	r2, [pc, #32]	; (800051c <main+0x44>)
 80004fa:	ca13      	ldmia	r2!, {r0, r1, r4}
 80004fc:	c313      	stmia	r3!, {r0, r1, r4}
 80004fe:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000500:	c313      	stmia	r3!, {r0, r1, r4}
 8000502:	6812      	ldr	r2, [r2, #0]
 8000504:	601a      	str	r2, [r3, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000506:	1d3b      	adds	r3, r7, #4
 8000508:	2100      	movs	r1, #0
 800050a:	0018      	movs	r0, r3
 800050c:	f002 fa85 	bl	8002a1a <osThreadCreate>
 8000510:	0002      	movs	r2, r0
 8000512:	4b03      	ldr	r3, [pc, #12]	; (8000520 <main+0x48>)
 8000514:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000516:	f002 fa78 	bl	8002a0a <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800051a:	e7fe      	b.n	800051a <main+0x42>
 800051c:	08003bd8 	.word	0x08003bd8
 8000520:	200003e4 	.word	0x200003e4

08000524 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000524:	b590      	push	{r4, r7, lr}
 8000526:	b099      	sub	sp, #100	; 0x64
 8000528:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052a:	242c      	movs	r4, #44	; 0x2c
 800052c:	193b      	adds	r3, r7, r4
 800052e:	0018      	movs	r0, r3
 8000530:	2334      	movs	r3, #52	; 0x34
 8000532:	001a      	movs	r2, r3
 8000534:	2100      	movs	r1, #0
 8000536:	f003 fb35 	bl	8003ba4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800053a:	2318      	movs	r3, #24
 800053c:	18fb      	adds	r3, r7, r3
 800053e:	0018      	movs	r0, r3
 8000540:	2314      	movs	r3, #20
 8000542:	001a      	movs	r2, r3
 8000544:	2100      	movs	r1, #0
 8000546:	f003 fb2d 	bl	8003ba4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800054a:	003b      	movs	r3, r7
 800054c:	0018      	movs	r0, r3
 800054e:	2318      	movs	r3, #24
 8000550:	001a      	movs	r2, r3
 8000552:	2100      	movs	r1, #0
 8000554:	f003 fb26 	bl	8003ba4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000558:	4b2c      	ldr	r3, [pc, #176]	; (800060c <SystemClock_Config+0xe8>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	4a2c      	ldr	r2, [pc, #176]	; (8000610 <SystemClock_Config+0xec>)
 800055e:	401a      	ands	r2, r3
 8000560:	4b2a      	ldr	r3, [pc, #168]	; (800060c <SystemClock_Config+0xe8>)
 8000562:	2180      	movs	r1, #128	; 0x80
 8000564:	0109      	lsls	r1, r1, #4
 8000566:	430a      	orrs	r2, r1
 8000568:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800056a:	0021      	movs	r1, r4
 800056c:	187b      	adds	r3, r7, r1
 800056e:	2202      	movs	r2, #2
 8000570:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000572:	187b      	adds	r3, r7, r1
 8000574:	2201      	movs	r2, #1
 8000576:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000578:	187b      	adds	r3, r7, r1
 800057a:	2210      	movs	r2, #16
 800057c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800057e:	187b      	adds	r3, r7, r1
 8000580:	2202      	movs	r2, #2
 8000582:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000584:	187b      	adds	r3, r7, r1
 8000586:	2200      	movs	r2, #0
 8000588:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 800058a:	187b      	adds	r3, r7, r1
 800058c:	2280      	movs	r2, #128	; 0x80
 800058e:	02d2      	lsls	r2, r2, #11
 8000590:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000592:	187b      	adds	r3, r7, r1
 8000594:	2280      	movs	r2, #128	; 0x80
 8000596:	03d2      	lsls	r2, r2, #15
 8000598:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059a:	187b      	adds	r3, r7, r1
 800059c:	0018      	movs	r0, r3
 800059e:	f000 fe87 	bl	80012b0 <HAL_RCC_OscConfig>
 80005a2:	1e03      	subs	r3, r0, #0
 80005a4:	d001      	beq.n	80005aa <SystemClock_Config+0x86>
  {
    Error_Handler();
 80005a6:	f000 f985 	bl	80008b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005aa:	2118      	movs	r1, #24
 80005ac:	187b      	adds	r3, r7, r1
 80005ae:	220f      	movs	r2, #15
 80005b0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b2:	187b      	adds	r3, r7, r1
 80005b4:	2203      	movs	r2, #3
 80005b6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b8:	187b      	adds	r3, r7, r1
 80005ba:	2200      	movs	r2, #0
 80005bc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005be:	187b      	adds	r3, r7, r1
 80005c0:	2200      	movs	r2, #0
 80005c2:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c4:	187b      	adds	r3, r7, r1
 80005c6:	2200      	movs	r2, #0
 80005c8:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005ca:	187b      	adds	r3, r7, r1
 80005cc:	2101      	movs	r1, #1
 80005ce:	0018      	movs	r0, r3
 80005d0:	f001 f9ea 	bl	80019a8 <HAL_RCC_ClockConfig>
 80005d4:	1e03      	subs	r3, r0, #0
 80005d6:	d001      	beq.n	80005dc <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80005d8:	f000 f96c 	bl	80008b4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_LPUART1
 80005dc:	003b      	movs	r3, r7
 80005de:	220e      	movs	r2, #14
 80005e0:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80005e2:	003b      	movs	r3, r7
 80005e4:	2200      	movs	r2, #0
 80005e6:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80005e8:	003b      	movs	r3, r7
 80005ea:	2200      	movs	r2, #0
 80005ec:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80005ee:	003b      	movs	r3, r7
 80005f0:	2200      	movs	r2, #0
 80005f2:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005f4:	003b      	movs	r3, r7
 80005f6:	0018      	movs	r0, r3
 80005f8:	f001 fbfa 	bl	8001df0 <HAL_RCCEx_PeriphCLKConfig>
 80005fc:	1e03      	subs	r3, r0, #0
 80005fe:	d001      	beq.n	8000604 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8000600:	f000 f958 	bl	80008b4 <Error_Handler>
  }
}
 8000604:	46c0      	nop			; (mov r8, r8)
 8000606:	46bd      	mov	sp, r7
 8000608:	b019      	add	sp, #100	; 0x64
 800060a:	bd90      	pop	{r4, r7, pc}
 800060c:	40007000 	.word	0x40007000
 8000610:	ffffe7ff 	.word	0xffffe7ff

08000614 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000618:	4b1b      	ldr	r3, [pc, #108]	; (8000688 <MX_I2C1_Init+0x74>)
 800061a:	4a1c      	ldr	r2, [pc, #112]	; (800068c <MX_I2C1_Init+0x78>)
 800061c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 800061e:	4b1a      	ldr	r3, [pc, #104]	; (8000688 <MX_I2C1_Init+0x74>)
 8000620:	4a1b      	ldr	r2, [pc, #108]	; (8000690 <MX_I2C1_Init+0x7c>)
 8000622:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000624:	4b18      	ldr	r3, [pc, #96]	; (8000688 <MX_I2C1_Init+0x74>)
 8000626:	2200      	movs	r2, #0
 8000628:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800062a:	4b17      	ldr	r3, [pc, #92]	; (8000688 <MX_I2C1_Init+0x74>)
 800062c:	2201      	movs	r2, #1
 800062e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000630:	4b15      	ldr	r3, [pc, #84]	; (8000688 <MX_I2C1_Init+0x74>)
 8000632:	2200      	movs	r2, #0
 8000634:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000636:	4b14      	ldr	r3, [pc, #80]	; (8000688 <MX_I2C1_Init+0x74>)
 8000638:	2200      	movs	r2, #0
 800063a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800063c:	4b12      	ldr	r3, [pc, #72]	; (8000688 <MX_I2C1_Init+0x74>)
 800063e:	2200      	movs	r2, #0
 8000640:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000642:	4b11      	ldr	r3, [pc, #68]	; (8000688 <MX_I2C1_Init+0x74>)
 8000644:	2200      	movs	r2, #0
 8000646:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000648:	4b0f      	ldr	r3, [pc, #60]	; (8000688 <MX_I2C1_Init+0x74>)
 800064a:	2200      	movs	r2, #0
 800064c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800064e:	4b0e      	ldr	r3, [pc, #56]	; (8000688 <MX_I2C1_Init+0x74>)
 8000650:	0018      	movs	r0, r3
 8000652:	f000 fcff 	bl	8001054 <HAL_I2C_Init>
 8000656:	1e03      	subs	r3, r0, #0
 8000658:	d001      	beq.n	800065e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800065a:	f000 f92b 	bl	80008b4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800065e:	4b0a      	ldr	r3, [pc, #40]	; (8000688 <MX_I2C1_Init+0x74>)
 8000660:	2100      	movs	r1, #0
 8000662:	0018      	movs	r0, r3
 8000664:	f000 fd8c 	bl	8001180 <HAL_I2CEx_ConfigAnalogFilter>
 8000668:	1e03      	subs	r3, r0, #0
 800066a:	d001      	beq.n	8000670 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800066c:	f000 f922 	bl	80008b4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000670:	4b05      	ldr	r3, [pc, #20]	; (8000688 <MX_I2C1_Init+0x74>)
 8000672:	2100      	movs	r1, #0
 8000674:	0018      	movs	r0, r3
 8000676:	f000 fdcf 	bl	8001218 <HAL_I2CEx_ConfigDigitalFilter>
 800067a:	1e03      	subs	r3, r0, #0
 800067c:	d001      	beq.n	8000682 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800067e:	f000 f919 	bl	80008b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000682:	46c0      	nop			; (mov r8, r8)
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	20000280 	.word	0x20000280
 800068c:	40005400 	.word	0x40005400
 8000690:	00707cbb 	.word	0x00707cbb

08000694 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000698:	4b13      	ldr	r3, [pc, #76]	; (80006e8 <MX_LPUART1_UART_Init+0x54>)
 800069a:	4a14      	ldr	r2, [pc, #80]	; (80006ec <MX_LPUART1_UART_Init+0x58>)
 800069c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 800069e:	4b12      	ldr	r3, [pc, #72]	; (80006e8 <MX_LPUART1_UART_Init+0x54>)
 80006a0:	4a13      	ldr	r2, [pc, #76]	; (80006f0 <MX_LPUART1_UART_Init+0x5c>)
 80006a2:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 80006a4:	4b10      	ldr	r3, [pc, #64]	; (80006e8 <MX_LPUART1_UART_Init+0x54>)
 80006a6:	2280      	movs	r2, #128	; 0x80
 80006a8:	0552      	lsls	r2, r2, #21
 80006aa:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80006ac:	4b0e      	ldr	r3, [pc, #56]	; (80006e8 <MX_LPUART1_UART_Init+0x54>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80006b2:	4b0d      	ldr	r3, [pc, #52]	; (80006e8 <MX_LPUART1_UART_Init+0x54>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80006b8:	4b0b      	ldr	r3, [pc, #44]	; (80006e8 <MX_LPUART1_UART_Init+0x54>)
 80006ba:	220c      	movs	r2, #12
 80006bc:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006be:	4b0a      	ldr	r3, [pc, #40]	; (80006e8 <MX_LPUART1_UART_Init+0x54>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006c4:	4b08      	ldr	r3, [pc, #32]	; (80006e8 <MX_LPUART1_UART_Init+0x54>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006ca:	4b07      	ldr	r3, [pc, #28]	; (80006e8 <MX_LPUART1_UART_Init+0x54>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80006d0:	4b05      	ldr	r3, [pc, #20]	; (80006e8 <MX_LPUART1_UART_Init+0x54>)
 80006d2:	0018      	movs	r0, r3
 80006d4:	f001 fcb8 	bl	8002048 <HAL_UART_Init>
 80006d8:	1e03      	subs	r3, r0, #0
 80006da:	d001      	beq.n	80006e0 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80006dc:	f000 f8ea 	bl	80008b4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80006e0:	46c0      	nop			; (mov r8, r8)
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	46c0      	nop			; (mov r8, r8)
 80006e8:	200002d4 	.word	0x200002d4
 80006ec:	40004800 	.word	0x40004800
 80006f0:	00033324 	.word	0x00033324

080006f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006f8:	4b14      	ldr	r3, [pc, #80]	; (800074c <MX_USART2_UART_Init+0x58>)
 80006fa:	4a15      	ldr	r2, [pc, #84]	; (8000750 <MX_USART2_UART_Init+0x5c>)
 80006fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006fe:	4b13      	ldr	r3, [pc, #76]	; (800074c <MX_USART2_UART_Init+0x58>)
 8000700:	22e1      	movs	r2, #225	; 0xe1
 8000702:	0252      	lsls	r2, r2, #9
 8000704:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000706:	4b11      	ldr	r3, [pc, #68]	; (800074c <MX_USART2_UART_Init+0x58>)
 8000708:	2200      	movs	r2, #0
 800070a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800070c:	4b0f      	ldr	r3, [pc, #60]	; (800074c <MX_USART2_UART_Init+0x58>)
 800070e:	2200      	movs	r2, #0
 8000710:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000712:	4b0e      	ldr	r3, [pc, #56]	; (800074c <MX_USART2_UART_Init+0x58>)
 8000714:	2200      	movs	r2, #0
 8000716:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000718:	4b0c      	ldr	r3, [pc, #48]	; (800074c <MX_USART2_UART_Init+0x58>)
 800071a:	220c      	movs	r2, #12
 800071c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800071e:	4b0b      	ldr	r3, [pc, #44]	; (800074c <MX_USART2_UART_Init+0x58>)
 8000720:	2200      	movs	r2, #0
 8000722:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000724:	4b09      	ldr	r3, [pc, #36]	; (800074c <MX_USART2_UART_Init+0x58>)
 8000726:	2200      	movs	r2, #0
 8000728:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800072a:	4b08      	ldr	r3, [pc, #32]	; (800074c <MX_USART2_UART_Init+0x58>)
 800072c:	2200      	movs	r2, #0
 800072e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000730:	4b06      	ldr	r3, [pc, #24]	; (800074c <MX_USART2_UART_Init+0x58>)
 8000732:	2200      	movs	r2, #0
 8000734:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000736:	4b05      	ldr	r3, [pc, #20]	; (800074c <MX_USART2_UART_Init+0x58>)
 8000738:	0018      	movs	r0, r3
 800073a:	f001 fc85 	bl	8002048 <HAL_UART_Init>
 800073e:	1e03      	subs	r3, r0, #0
 8000740:	d001      	beq.n	8000746 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000742:	f000 f8b7 	bl	80008b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000746:	46c0      	nop			; (mov r8, r8)
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	2000035c 	.word	0x2000035c
 8000750:	40004400 	.word	0x40004400

08000754 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000754:	b590      	push	{r4, r7, lr}
 8000756:	b089      	sub	sp, #36	; 0x24
 8000758:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075a:	240c      	movs	r4, #12
 800075c:	193b      	adds	r3, r7, r4
 800075e:	0018      	movs	r0, r3
 8000760:	2314      	movs	r3, #20
 8000762:	001a      	movs	r2, r3
 8000764:	2100      	movs	r1, #0
 8000766:	f003 fa1d 	bl	8003ba4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800076a:	4b4a      	ldr	r3, [pc, #296]	; (8000894 <MX_GPIO_Init+0x140>)
 800076c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800076e:	4b49      	ldr	r3, [pc, #292]	; (8000894 <MX_GPIO_Init+0x140>)
 8000770:	2104      	movs	r1, #4
 8000772:	430a      	orrs	r2, r1
 8000774:	62da      	str	r2, [r3, #44]	; 0x2c
 8000776:	4b47      	ldr	r3, [pc, #284]	; (8000894 <MX_GPIO_Init+0x140>)
 8000778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800077a:	2204      	movs	r2, #4
 800077c:	4013      	ands	r3, r2
 800077e:	60bb      	str	r3, [r7, #8]
 8000780:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000782:	4b44      	ldr	r3, [pc, #272]	; (8000894 <MX_GPIO_Init+0x140>)
 8000784:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000786:	4b43      	ldr	r3, [pc, #268]	; (8000894 <MX_GPIO_Init+0x140>)
 8000788:	2101      	movs	r1, #1
 800078a:	430a      	orrs	r2, r1
 800078c:	62da      	str	r2, [r3, #44]	; 0x2c
 800078e:	4b41      	ldr	r3, [pc, #260]	; (8000894 <MX_GPIO_Init+0x140>)
 8000790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000792:	2201      	movs	r2, #1
 8000794:	4013      	ands	r3, r2
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800079a:	4b3e      	ldr	r3, [pc, #248]	; (8000894 <MX_GPIO_Init+0x140>)
 800079c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800079e:	4b3d      	ldr	r3, [pc, #244]	; (8000894 <MX_GPIO_Init+0x140>)
 80007a0:	2102      	movs	r1, #2
 80007a2:	430a      	orrs	r2, r1
 80007a4:	62da      	str	r2, [r3, #44]	; 0x2c
 80007a6:	4b3b      	ldr	r3, [pc, #236]	; (8000894 <MX_GPIO_Init+0x140>)
 80007a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007aa:	2202      	movs	r2, #2
 80007ac:	4013      	ands	r3, r2
 80007ae:	603b      	str	r3, [r7, #0]
 80007b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DIMM_LED_1_Pin|DIMM_LED_2_Pin, GPIO_PIN_RESET);
 80007b2:	23c0      	movs	r3, #192	; 0xc0
 80007b4:	021b      	lsls	r3, r3, #8
 80007b6:	4838      	ldr	r0, [pc, #224]	; (8000898 <MX_GPIO_Init+0x144>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	0019      	movs	r1, r3
 80007bc:	f000 fc2c 	bl	8001018 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TXS_OE_Pin|SHDN_170V_3V3_Pin|INS_EN_3V3_Pin|DIN_3V3_Pin
 80007c0:	23a0      	movs	r3, #160	; 0xa0
 80007c2:	05db      	lsls	r3, r3, #23
 80007c4:	2200      	movs	r2, #0
 80007c6:	21f2      	movs	r1, #242	; 0xf2
 80007c8:	0018      	movs	r0, r3
 80007ca:	f000 fc25 	bl	8001018 <HAL_GPIO_WritePin>
                          |OE_3V3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RCK_3V3_Pin|SCK_3V3_Pin, GPIO_PIN_RESET);
 80007ce:	4b33      	ldr	r3, [pc, #204]	; (800089c <MX_GPIO_Init+0x148>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	2103      	movs	r1, #3
 80007d4:	0018      	movs	r0, r3
 80007d6:	f000 fc1f 	bl	8001018 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIMM_LED_1_Pin DIMM_LED_2_Pin */
  GPIO_InitStruct.Pin = DIMM_LED_1_Pin|DIMM_LED_2_Pin;
 80007da:	193b      	adds	r3, r7, r4
 80007dc:	22c0      	movs	r2, #192	; 0xc0
 80007de:	0212      	lsls	r2, r2, #8
 80007e0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e2:	193b      	adds	r3, r7, r4
 80007e4:	2201      	movs	r2, #1
 80007e6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e8:	193b      	adds	r3, r7, r4
 80007ea:	2200      	movs	r2, #0
 80007ec:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ee:	193b      	adds	r3, r7, r4
 80007f0:	2200      	movs	r2, #0
 80007f2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007f4:	193b      	adds	r3, r7, r4
 80007f6:	4a28      	ldr	r2, [pc, #160]	; (8000898 <MX_GPIO_Init+0x144>)
 80007f8:	0019      	movs	r1, r3
 80007fa:	0010      	movs	r0, r2
 80007fc:	f000 fa9e 	bl	8000d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_4_Pin INT_SQW_Pin INT_OPT_Pin JDY_STAT_Pin
                           JDY_PWRC_Pin */
  GPIO_InitStruct.Pin = BTN_4_Pin|INT_SQW_Pin|INT_OPT_Pin|JDY_STAT_Pin
 8000800:	193b      	adds	r3, r7, r4
 8000802:	4a27      	ldr	r2, [pc, #156]	; (80008a0 <MX_GPIO_Init+0x14c>)
 8000804:	601a      	str	r2, [r3, #0]
                          |JDY_PWRC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000806:	193b      	adds	r3, r7, r4
 8000808:	2200      	movs	r2, #0
 800080a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080c:	193b      	adds	r3, r7, r4
 800080e:	2200      	movs	r2, #0
 8000810:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000812:	193a      	adds	r2, r7, r4
 8000814:	23a0      	movs	r3, #160	; 0xa0
 8000816:	05db      	lsls	r3, r3, #23
 8000818:	0011      	movs	r1, r2
 800081a:	0018      	movs	r0, r3
 800081c:	f000 fa8e 	bl	8000d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : TXS_OE_Pin SHDN_170V_3V3_Pin INS_EN_3V3_Pin DIN_3V3_Pin
                           OE_3V3_Pin */
  GPIO_InitStruct.Pin = TXS_OE_Pin|SHDN_170V_3V3_Pin|INS_EN_3V3_Pin|DIN_3V3_Pin
 8000820:	193b      	adds	r3, r7, r4
 8000822:	22f2      	movs	r2, #242	; 0xf2
 8000824:	601a      	str	r2, [r3, #0]
                          |OE_3V3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000826:	193b      	adds	r3, r7, r4
 8000828:	2201      	movs	r2, #1
 800082a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082c:	193b      	adds	r3, r7, r4
 800082e:	2200      	movs	r2, #0
 8000830:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000832:	193b      	adds	r3, r7, r4
 8000834:	2200      	movs	r2, #0
 8000836:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000838:	193a      	adds	r2, r7, r4
 800083a:	23a0      	movs	r3, #160	; 0xa0
 800083c:	05db      	lsls	r3, r3, #23
 800083e:	0011      	movs	r1, r2
 8000840:	0018      	movs	r0, r3
 8000842:	f000 fa7b 	bl	8000d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : RCK_3V3_Pin SCK_3V3_Pin */
  GPIO_InitStruct.Pin = RCK_3V3_Pin|SCK_3V3_Pin;
 8000846:	193b      	adds	r3, r7, r4
 8000848:	2203      	movs	r2, #3
 800084a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084c:	193b      	adds	r3, r7, r4
 800084e:	2201      	movs	r2, #1
 8000850:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	193b      	adds	r3, r7, r4
 8000854:	2200      	movs	r2, #0
 8000856:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000858:	193b      	adds	r3, r7, r4
 800085a:	2200      	movs	r2, #0
 800085c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800085e:	193b      	adds	r3, r7, r4
 8000860:	4a0e      	ldr	r2, [pc, #56]	; (800089c <MX_GPIO_Init+0x148>)
 8000862:	0019      	movs	r1, r3
 8000864:	0010      	movs	r0, r2
 8000866:	f000 fa69 	bl	8000d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_3_Pin BTN_2_Pin BTN_1_Pin */
  GPIO_InitStruct.Pin = BTN_3_Pin|BTN_2_Pin|BTN_1_Pin;
 800086a:	0021      	movs	r1, r4
 800086c:	187b      	adds	r3, r7, r1
 800086e:	2238      	movs	r2, #56	; 0x38
 8000870:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000872:	187b      	adds	r3, r7, r1
 8000874:	2200      	movs	r2, #0
 8000876:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	187b      	adds	r3, r7, r1
 800087a:	2200      	movs	r2, #0
 800087c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800087e:	187b      	adds	r3, r7, r1
 8000880:	4a06      	ldr	r2, [pc, #24]	; (800089c <MX_GPIO_Init+0x148>)
 8000882:	0019      	movs	r1, r3
 8000884:	0010      	movs	r0, r2
 8000886:	f000 fa59 	bl	8000d3c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800088a:	46c0      	nop			; (mov r8, r8)
 800088c:	46bd      	mov	sp, r7
 800088e:	b009      	add	sp, #36	; 0x24
 8000890:	bd90      	pop	{r4, r7, pc}
 8000892:	46c0      	nop			; (mov r8, r8)
 8000894:	40021000 	.word	0x40021000
 8000898:	50000800 	.word	0x50000800
 800089c:	50000400 	.word	0x50000400
 80008a0:	00009901 	.word	0x00009901

080008a4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80008ac:	2001      	movs	r0, #1
 80008ae:	f002 f901 	bl	8002ab4 <osDelay>
 80008b2:	e7fb      	b.n	80008ac <StartDefaultTask+0x8>

080008b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008b8:	b672      	cpsid	i
}
 80008ba:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008bc:	e7fe      	b.n	80008bc <Error_Handler+0x8>
	...

080008c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008c4:	4b0b      	ldr	r3, [pc, #44]	; (80008f4 <HAL_MspInit+0x34>)
 80008c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008c8:	4b0a      	ldr	r3, [pc, #40]	; (80008f4 <HAL_MspInit+0x34>)
 80008ca:	2101      	movs	r1, #1
 80008cc:	430a      	orrs	r2, r1
 80008ce:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d0:	4b08      	ldr	r3, [pc, #32]	; (80008f4 <HAL_MspInit+0x34>)
 80008d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80008d4:	4b07      	ldr	r3, [pc, #28]	; (80008f4 <HAL_MspInit+0x34>)
 80008d6:	2180      	movs	r1, #128	; 0x80
 80008d8:	0549      	lsls	r1, r1, #21
 80008da:	430a      	orrs	r2, r1
 80008dc:	639a      	str	r2, [r3, #56]	; 0x38

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 80008de:	2302      	movs	r3, #2
 80008e0:	425b      	negs	r3, r3
 80008e2:	2200      	movs	r2, #0
 80008e4:	2103      	movs	r1, #3
 80008e6:	0018      	movs	r0, r3
 80008e8:	f000 fa06 	bl	8000cf8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ec:	46c0      	nop			; (mov r8, r8)
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	46c0      	nop			; (mov r8, r8)
 80008f4:	40021000 	.word	0x40021000

080008f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80008f8:	b590      	push	{r4, r7, lr}
 80008fa:	b089      	sub	sp, #36	; 0x24
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000900:	240c      	movs	r4, #12
 8000902:	193b      	adds	r3, r7, r4
 8000904:	0018      	movs	r0, r3
 8000906:	2314      	movs	r3, #20
 8000908:	001a      	movs	r2, r3
 800090a:	2100      	movs	r1, #0
 800090c:	f003 f94a 	bl	8003ba4 <memset>
  if(hi2c->Instance==I2C1)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a18      	ldr	r2, [pc, #96]	; (8000978 <HAL_I2C_MspInit+0x80>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d12a      	bne.n	8000970 <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800091a:	4b18      	ldr	r3, [pc, #96]	; (800097c <HAL_I2C_MspInit+0x84>)
 800091c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800091e:	4b17      	ldr	r3, [pc, #92]	; (800097c <HAL_I2C_MspInit+0x84>)
 8000920:	2101      	movs	r1, #1
 8000922:	430a      	orrs	r2, r1
 8000924:	62da      	str	r2, [r3, #44]	; 0x2c
 8000926:	4b15      	ldr	r3, [pc, #84]	; (800097c <HAL_I2C_MspInit+0x84>)
 8000928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800092a:	2201      	movs	r2, #1
 800092c:	4013      	ands	r3, r2
 800092e:	60bb      	str	r3, [r7, #8]
 8000930:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000932:	193b      	adds	r3, r7, r4
 8000934:	22c0      	movs	r2, #192	; 0xc0
 8000936:	00d2      	lsls	r2, r2, #3
 8000938:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800093a:	0021      	movs	r1, r4
 800093c:	187b      	adds	r3, r7, r1
 800093e:	2212      	movs	r2, #18
 8000940:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	187b      	adds	r3, r7, r1
 8000944:	2200      	movs	r2, #0
 8000946:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000948:	187b      	adds	r3, r7, r1
 800094a:	2203      	movs	r2, #3
 800094c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800094e:	187b      	adds	r3, r7, r1
 8000950:	2201      	movs	r2, #1
 8000952:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000954:	187a      	adds	r2, r7, r1
 8000956:	23a0      	movs	r3, #160	; 0xa0
 8000958:	05db      	lsls	r3, r3, #23
 800095a:	0011      	movs	r1, r2
 800095c:	0018      	movs	r0, r3
 800095e:	f000 f9ed 	bl	8000d3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000962:	4b06      	ldr	r3, [pc, #24]	; (800097c <HAL_I2C_MspInit+0x84>)
 8000964:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000966:	4b05      	ldr	r3, [pc, #20]	; (800097c <HAL_I2C_MspInit+0x84>)
 8000968:	2180      	movs	r1, #128	; 0x80
 800096a:	0389      	lsls	r1, r1, #14
 800096c:	430a      	orrs	r2, r1
 800096e:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000970:	46c0      	nop			; (mov r8, r8)
 8000972:	46bd      	mov	sp, r7
 8000974:	b009      	add	sp, #36	; 0x24
 8000976:	bd90      	pop	{r4, r7, pc}
 8000978:	40005400 	.word	0x40005400
 800097c:	40021000 	.word	0x40021000

08000980 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000980:	b590      	push	{r4, r7, lr}
 8000982:	b08b      	sub	sp, #44	; 0x2c
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000988:	2414      	movs	r4, #20
 800098a:	193b      	adds	r3, r7, r4
 800098c:	0018      	movs	r0, r3
 800098e:	2314      	movs	r3, #20
 8000990:	001a      	movs	r2, r3
 8000992:	2100      	movs	r1, #0
 8000994:	f003 f906 	bl	8003ba4 <memset>
  if(huart->Instance==LPUART1)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a2f      	ldr	r2, [pc, #188]	; (8000a5c <HAL_UART_MspInit+0xdc>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d12a      	bne.n	80009f8 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80009a2:	4b2f      	ldr	r3, [pc, #188]	; (8000a60 <HAL_UART_MspInit+0xe0>)
 80009a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80009a6:	4b2e      	ldr	r3, [pc, #184]	; (8000a60 <HAL_UART_MspInit+0xe0>)
 80009a8:	2180      	movs	r1, #128	; 0x80
 80009aa:	02c9      	lsls	r1, r1, #11
 80009ac:	430a      	orrs	r2, r1
 80009ae:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b0:	4b2b      	ldr	r3, [pc, #172]	; (8000a60 <HAL_UART_MspInit+0xe0>)
 80009b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009b4:	4b2a      	ldr	r3, [pc, #168]	; (8000a60 <HAL_UART_MspInit+0xe0>)
 80009b6:	2101      	movs	r1, #1
 80009b8:	430a      	orrs	r2, r1
 80009ba:	62da      	str	r2, [r3, #44]	; 0x2c
 80009bc:	4b28      	ldr	r3, [pc, #160]	; (8000a60 <HAL_UART_MspInit+0xe0>)
 80009be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009c0:	2201      	movs	r2, #1
 80009c2:	4013      	ands	r3, r2
 80009c4:	613b      	str	r3, [r7, #16]
 80009c6:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009c8:	0021      	movs	r1, r4
 80009ca:	187b      	adds	r3, r7, r1
 80009cc:	220c      	movs	r2, #12
 80009ce:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d0:	187b      	adds	r3, r7, r1
 80009d2:	2202      	movs	r2, #2
 80009d4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	187b      	adds	r3, r7, r1
 80009d8:	2200      	movs	r2, #0
 80009da:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009dc:	187b      	adds	r3, r7, r1
 80009de:	2203      	movs	r2, #3
 80009e0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 80009e2:	187b      	adds	r3, r7, r1
 80009e4:	2206      	movs	r2, #6
 80009e6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e8:	187a      	adds	r2, r7, r1
 80009ea:	23a0      	movs	r3, #160	; 0xa0
 80009ec:	05db      	lsls	r3, r3, #23
 80009ee:	0011      	movs	r1, r2
 80009f0:	0018      	movs	r0, r3
 80009f2:	f000 f9a3 	bl	8000d3c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009f6:	e02d      	b.n	8000a54 <HAL_UART_MspInit+0xd4>
  else if(huart->Instance==USART2)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a19      	ldr	r2, [pc, #100]	; (8000a64 <HAL_UART_MspInit+0xe4>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d128      	bne.n	8000a54 <HAL_UART_MspInit+0xd4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a02:	4b17      	ldr	r3, [pc, #92]	; (8000a60 <HAL_UART_MspInit+0xe0>)
 8000a04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000a06:	4b16      	ldr	r3, [pc, #88]	; (8000a60 <HAL_UART_MspInit+0xe0>)
 8000a08:	2180      	movs	r1, #128	; 0x80
 8000a0a:	0289      	lsls	r1, r1, #10
 8000a0c:	430a      	orrs	r2, r1
 8000a0e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a10:	4b13      	ldr	r3, [pc, #76]	; (8000a60 <HAL_UART_MspInit+0xe0>)
 8000a12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a14:	4b12      	ldr	r3, [pc, #72]	; (8000a60 <HAL_UART_MspInit+0xe0>)
 8000a16:	2102      	movs	r1, #2
 8000a18:	430a      	orrs	r2, r1
 8000a1a:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a1c:	4b10      	ldr	r3, [pc, #64]	; (8000a60 <HAL_UART_MspInit+0xe0>)
 8000a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a20:	2202      	movs	r2, #2
 8000a22:	4013      	ands	r3, r2
 8000a24:	60fb      	str	r3, [r7, #12]
 8000a26:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a28:	2114      	movs	r1, #20
 8000a2a:	187b      	adds	r3, r7, r1
 8000a2c:	22c0      	movs	r2, #192	; 0xc0
 8000a2e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a30:	187b      	adds	r3, r7, r1
 8000a32:	2202      	movs	r2, #2
 8000a34:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	187b      	adds	r3, r7, r1
 8000a38:	2200      	movs	r2, #0
 8000a3a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a3c:	187b      	adds	r3, r7, r1
 8000a3e:	2203      	movs	r2, #3
 8000a40:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART2;
 8000a42:	187b      	adds	r3, r7, r1
 8000a44:	2200      	movs	r2, #0
 8000a46:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a48:	187b      	adds	r3, r7, r1
 8000a4a:	4a07      	ldr	r2, [pc, #28]	; (8000a68 <HAL_UART_MspInit+0xe8>)
 8000a4c:	0019      	movs	r1, r3
 8000a4e:	0010      	movs	r0, r2
 8000a50:	f000 f974 	bl	8000d3c <HAL_GPIO_Init>
}
 8000a54:	46c0      	nop			; (mov r8, r8)
 8000a56:	46bd      	mov	sp, r7
 8000a58:	b00b      	add	sp, #44	; 0x2c
 8000a5a:	bd90      	pop	{r4, r7, pc}
 8000a5c:	40004800 	.word	0x40004800
 8000a60:	40021000 	.word	0x40021000
 8000a64:	40004400 	.word	0x40004400
 8000a68:	50000400 	.word	0x50000400

08000a6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a70:	e7fe      	b.n	8000a70 <NMI_Handler+0x4>

08000a72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a72:	b580      	push	{r7, lr}
 8000a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a76:	e7fe      	b.n	8000a76 <HardFault_Handler+0x4>

08000a78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a7c:	f000 f88e 	bl	8000b9c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000a80:	f002 fd22 	bl	80034c8 <xTaskGetSchedulerState>
 8000a84:	0003      	movs	r3, r0
 8000a86:	2b01      	cmp	r3, #1
 8000a88:	d001      	beq.n	8000a8e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000a8a:	f002 fe85 	bl	8003798 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a8e:	46c0      	nop			; (mov r8, r8)
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}

08000a94 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a98:	46c0      	nop			; (mov r8, r8)
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
	...

08000aa0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000aa0:	480d      	ldr	r0, [pc, #52]	; (8000ad8 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000aa2:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000aa4:	f7ff fff6 	bl	8000a94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000aa8:	480c      	ldr	r0, [pc, #48]	; (8000adc <LoopForever+0x6>)
  ldr r1, =_edata
 8000aaa:	490d      	ldr	r1, [pc, #52]	; (8000ae0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000aac:	4a0d      	ldr	r2, [pc, #52]	; (8000ae4 <LoopForever+0xe>)
  movs r3, #0
 8000aae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ab0:	e002      	b.n	8000ab8 <LoopCopyDataInit>

08000ab2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ab2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ab4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ab6:	3304      	adds	r3, #4

08000ab8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ab8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000abc:	d3f9      	bcc.n	8000ab2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000abe:	4a0a      	ldr	r2, [pc, #40]	; (8000ae8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ac0:	4c0a      	ldr	r4, [pc, #40]	; (8000aec <LoopForever+0x16>)
  movs r3, #0
 8000ac2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ac4:	e001      	b.n	8000aca <LoopFillZerobss>

08000ac6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ac6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ac8:	3204      	adds	r2, #4

08000aca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000acc:	d3fb      	bcc.n	8000ac6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ace:	f003 f845 	bl	8003b5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ad2:	f7ff fd01 	bl	80004d8 <main>

08000ad6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ad6:	e7fe      	b.n	8000ad6 <LoopForever>
   ldr   r0, =_estack
 8000ad8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000adc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ae0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000ae4:	08003c78 	.word	0x08003c78
  ldr r2, =_sbss
 8000ae8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000aec:	20001130 	.word	0x20001130

08000af0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000af0:	e7fe      	b.n	8000af0 <ADC1_COMP_IRQHandler>
	...

08000af4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000afa:	1dfb      	adds	r3, r7, #7
 8000afc:	2200      	movs	r2, #0
 8000afe:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000b00:	4b0b      	ldr	r3, [pc, #44]	; (8000b30 <HAL_Init+0x3c>)
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	4b0a      	ldr	r3, [pc, #40]	; (8000b30 <HAL_Init+0x3c>)
 8000b06:	2140      	movs	r1, #64	; 0x40
 8000b08:	430a      	orrs	r2, r1
 8000b0a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b0c:	2003      	movs	r0, #3
 8000b0e:	f000 f811 	bl	8000b34 <HAL_InitTick>
 8000b12:	1e03      	subs	r3, r0, #0
 8000b14:	d003      	beq.n	8000b1e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000b16:	1dfb      	adds	r3, r7, #7
 8000b18:	2201      	movs	r2, #1
 8000b1a:	701a      	strb	r2, [r3, #0]
 8000b1c:	e001      	b.n	8000b22 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b1e:	f7ff fecf 	bl	80008c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b22:	1dfb      	adds	r3, r7, #7
 8000b24:	781b      	ldrb	r3, [r3, #0]
}
 8000b26:	0018      	movs	r0, r3
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	b002      	add	sp, #8
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	46c0      	nop			; (mov r8, r8)
 8000b30:	40022000 	.word	0x40022000

08000b34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b34:	b590      	push	{r4, r7, lr}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b3c:	4b14      	ldr	r3, [pc, #80]	; (8000b90 <HAL_InitTick+0x5c>)
 8000b3e:	681c      	ldr	r4, [r3, #0]
 8000b40:	4b14      	ldr	r3, [pc, #80]	; (8000b94 <HAL_InitTick+0x60>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	0019      	movs	r1, r3
 8000b46:	23fa      	movs	r3, #250	; 0xfa
 8000b48:	0098      	lsls	r0, r3, #2
 8000b4a:	f7ff fadd 	bl	8000108 <__udivsi3>
 8000b4e:	0003      	movs	r3, r0
 8000b50:	0019      	movs	r1, r3
 8000b52:	0020      	movs	r0, r4
 8000b54:	f7ff fad8 	bl	8000108 <__udivsi3>
 8000b58:	0003      	movs	r3, r0
 8000b5a:	0018      	movs	r0, r3
 8000b5c:	f000 f8e1 	bl	8000d22 <HAL_SYSTICK_Config>
 8000b60:	1e03      	subs	r3, r0, #0
 8000b62:	d001      	beq.n	8000b68 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000b64:	2301      	movs	r3, #1
 8000b66:	e00f      	b.n	8000b88 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	2b03      	cmp	r3, #3
 8000b6c:	d80b      	bhi.n	8000b86 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b6e:	6879      	ldr	r1, [r7, #4]
 8000b70:	2301      	movs	r3, #1
 8000b72:	425b      	negs	r3, r3
 8000b74:	2200      	movs	r2, #0
 8000b76:	0018      	movs	r0, r3
 8000b78:	f000 f8be 	bl	8000cf8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b7c:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <HAL_InitTick+0x64>)
 8000b7e:	687a      	ldr	r2, [r7, #4]
 8000b80:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b82:	2300      	movs	r3, #0
 8000b84:	e000      	b.n	8000b88 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000b86:	2301      	movs	r3, #1
}
 8000b88:	0018      	movs	r0, r3
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	b003      	add	sp, #12
 8000b8e:	bd90      	pop	{r4, r7, pc}
 8000b90:	20000000 	.word	0x20000000
 8000b94:	20000008 	.word	0x20000008
 8000b98:	20000004 	.word	0x20000004

08000b9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ba0:	4b05      	ldr	r3, [pc, #20]	; (8000bb8 <HAL_IncTick+0x1c>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	001a      	movs	r2, r3
 8000ba6:	4b05      	ldr	r3, [pc, #20]	; (8000bbc <HAL_IncTick+0x20>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	18d2      	adds	r2, r2, r3
 8000bac:	4b03      	ldr	r3, [pc, #12]	; (8000bbc <HAL_IncTick+0x20>)
 8000bae:	601a      	str	r2, [r3, #0]
}
 8000bb0:	46c0      	nop			; (mov r8, r8)
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	46c0      	nop			; (mov r8, r8)
 8000bb8:	20000008 	.word	0x20000008
 8000bbc:	200003e8 	.word	0x200003e8

08000bc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000bc4:	4b02      	ldr	r3, [pc, #8]	; (8000bd0 <HAL_GetTick+0x10>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
}
 8000bc8:	0018      	movs	r0, r3
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	46c0      	nop			; (mov r8, r8)
 8000bd0:	200003e8 	.word	0x200003e8

08000bd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bd4:	b590      	push	{r4, r7, lr}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	0002      	movs	r2, r0
 8000bdc:	6039      	str	r1, [r7, #0]
 8000bde:	1dfb      	adds	r3, r7, #7
 8000be0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000be2:	1dfb      	adds	r3, r7, #7
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	2b7f      	cmp	r3, #127	; 0x7f
 8000be8:	d828      	bhi.n	8000c3c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bea:	4a2f      	ldr	r2, [pc, #188]	; (8000ca8 <__NVIC_SetPriority+0xd4>)
 8000bec:	1dfb      	adds	r3, r7, #7
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	b25b      	sxtb	r3, r3
 8000bf2:	089b      	lsrs	r3, r3, #2
 8000bf4:	33c0      	adds	r3, #192	; 0xc0
 8000bf6:	009b      	lsls	r3, r3, #2
 8000bf8:	589b      	ldr	r3, [r3, r2]
 8000bfa:	1dfa      	adds	r2, r7, #7
 8000bfc:	7812      	ldrb	r2, [r2, #0]
 8000bfe:	0011      	movs	r1, r2
 8000c00:	2203      	movs	r2, #3
 8000c02:	400a      	ands	r2, r1
 8000c04:	00d2      	lsls	r2, r2, #3
 8000c06:	21ff      	movs	r1, #255	; 0xff
 8000c08:	4091      	lsls	r1, r2
 8000c0a:	000a      	movs	r2, r1
 8000c0c:	43d2      	mvns	r2, r2
 8000c0e:	401a      	ands	r2, r3
 8000c10:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	019b      	lsls	r3, r3, #6
 8000c16:	22ff      	movs	r2, #255	; 0xff
 8000c18:	401a      	ands	r2, r3
 8000c1a:	1dfb      	adds	r3, r7, #7
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	0018      	movs	r0, r3
 8000c20:	2303      	movs	r3, #3
 8000c22:	4003      	ands	r3, r0
 8000c24:	00db      	lsls	r3, r3, #3
 8000c26:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c28:	481f      	ldr	r0, [pc, #124]	; (8000ca8 <__NVIC_SetPriority+0xd4>)
 8000c2a:	1dfb      	adds	r3, r7, #7
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	b25b      	sxtb	r3, r3
 8000c30:	089b      	lsrs	r3, r3, #2
 8000c32:	430a      	orrs	r2, r1
 8000c34:	33c0      	adds	r3, #192	; 0xc0
 8000c36:	009b      	lsls	r3, r3, #2
 8000c38:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000c3a:	e031      	b.n	8000ca0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c3c:	4a1b      	ldr	r2, [pc, #108]	; (8000cac <__NVIC_SetPriority+0xd8>)
 8000c3e:	1dfb      	adds	r3, r7, #7
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	0019      	movs	r1, r3
 8000c44:	230f      	movs	r3, #15
 8000c46:	400b      	ands	r3, r1
 8000c48:	3b08      	subs	r3, #8
 8000c4a:	089b      	lsrs	r3, r3, #2
 8000c4c:	3306      	adds	r3, #6
 8000c4e:	009b      	lsls	r3, r3, #2
 8000c50:	18d3      	adds	r3, r2, r3
 8000c52:	3304      	adds	r3, #4
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	1dfa      	adds	r2, r7, #7
 8000c58:	7812      	ldrb	r2, [r2, #0]
 8000c5a:	0011      	movs	r1, r2
 8000c5c:	2203      	movs	r2, #3
 8000c5e:	400a      	ands	r2, r1
 8000c60:	00d2      	lsls	r2, r2, #3
 8000c62:	21ff      	movs	r1, #255	; 0xff
 8000c64:	4091      	lsls	r1, r2
 8000c66:	000a      	movs	r2, r1
 8000c68:	43d2      	mvns	r2, r2
 8000c6a:	401a      	ands	r2, r3
 8000c6c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	019b      	lsls	r3, r3, #6
 8000c72:	22ff      	movs	r2, #255	; 0xff
 8000c74:	401a      	ands	r2, r3
 8000c76:	1dfb      	adds	r3, r7, #7
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	0018      	movs	r0, r3
 8000c7c:	2303      	movs	r3, #3
 8000c7e:	4003      	ands	r3, r0
 8000c80:	00db      	lsls	r3, r3, #3
 8000c82:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c84:	4809      	ldr	r0, [pc, #36]	; (8000cac <__NVIC_SetPriority+0xd8>)
 8000c86:	1dfb      	adds	r3, r7, #7
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	001c      	movs	r4, r3
 8000c8c:	230f      	movs	r3, #15
 8000c8e:	4023      	ands	r3, r4
 8000c90:	3b08      	subs	r3, #8
 8000c92:	089b      	lsrs	r3, r3, #2
 8000c94:	430a      	orrs	r2, r1
 8000c96:	3306      	adds	r3, #6
 8000c98:	009b      	lsls	r3, r3, #2
 8000c9a:	18c3      	adds	r3, r0, r3
 8000c9c:	3304      	adds	r3, #4
 8000c9e:	601a      	str	r2, [r3, #0]
}
 8000ca0:	46c0      	nop			; (mov r8, r8)
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	b003      	add	sp, #12
 8000ca6:	bd90      	pop	{r4, r7, pc}
 8000ca8:	e000e100 	.word	0xe000e100
 8000cac:	e000ed00 	.word	0xe000ed00

08000cb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	1e5a      	subs	r2, r3, #1
 8000cbc:	2380      	movs	r3, #128	; 0x80
 8000cbe:	045b      	lsls	r3, r3, #17
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	d301      	bcc.n	8000cc8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	e010      	b.n	8000cea <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cc8:	4b0a      	ldr	r3, [pc, #40]	; (8000cf4 <SysTick_Config+0x44>)
 8000cca:	687a      	ldr	r2, [r7, #4]
 8000ccc:	3a01      	subs	r2, #1
 8000cce:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	425b      	negs	r3, r3
 8000cd4:	2103      	movs	r1, #3
 8000cd6:	0018      	movs	r0, r3
 8000cd8:	f7ff ff7c 	bl	8000bd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cdc:	4b05      	ldr	r3, [pc, #20]	; (8000cf4 <SysTick_Config+0x44>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ce2:	4b04      	ldr	r3, [pc, #16]	; (8000cf4 <SysTick_Config+0x44>)
 8000ce4:	2207      	movs	r2, #7
 8000ce6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ce8:	2300      	movs	r3, #0
}
 8000cea:	0018      	movs	r0, r3
 8000cec:	46bd      	mov	sp, r7
 8000cee:	b002      	add	sp, #8
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	46c0      	nop			; (mov r8, r8)
 8000cf4:	e000e010 	.word	0xe000e010

08000cf8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	60b9      	str	r1, [r7, #8]
 8000d00:	607a      	str	r2, [r7, #4]
 8000d02:	210f      	movs	r1, #15
 8000d04:	187b      	adds	r3, r7, r1
 8000d06:	1c02      	adds	r2, r0, #0
 8000d08:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000d0a:	68ba      	ldr	r2, [r7, #8]
 8000d0c:	187b      	adds	r3, r7, r1
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	b25b      	sxtb	r3, r3
 8000d12:	0011      	movs	r1, r2
 8000d14:	0018      	movs	r0, r3
 8000d16:	f7ff ff5d 	bl	8000bd4 <__NVIC_SetPriority>
}
 8000d1a:	46c0      	nop			; (mov r8, r8)
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	b004      	add	sp, #16
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b082      	sub	sp, #8
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	0018      	movs	r0, r3
 8000d2e:	f7ff ffbf 	bl	8000cb0 <SysTick_Config>
 8000d32:	0003      	movs	r3, r0
}
 8000d34:	0018      	movs	r0, r3
 8000d36:	46bd      	mov	sp, r7
 8000d38:	b002      	add	sp, #8
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b086      	sub	sp, #24
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
 8000d44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000d46:	2300      	movs	r3, #0
 8000d48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000d52:	e149      	b.n	8000fe8 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2101      	movs	r1, #1
 8000d5a:	697a      	ldr	r2, [r7, #20]
 8000d5c:	4091      	lsls	r1, r2
 8000d5e:	000a      	movs	r2, r1
 8000d60:	4013      	ands	r3, r2
 8000d62:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d100      	bne.n	8000d6c <HAL_GPIO_Init+0x30>
 8000d6a:	e13a      	b.n	8000fe2 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	2203      	movs	r2, #3
 8000d72:	4013      	ands	r3, r2
 8000d74:	2b01      	cmp	r3, #1
 8000d76:	d005      	beq.n	8000d84 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	2203      	movs	r2, #3
 8000d7e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d80:	2b02      	cmp	r3, #2
 8000d82:	d130      	bne.n	8000de6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	689b      	ldr	r3, [r3, #8]
 8000d88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	005b      	lsls	r3, r3, #1
 8000d8e:	2203      	movs	r2, #3
 8000d90:	409a      	lsls	r2, r3
 8000d92:	0013      	movs	r3, r2
 8000d94:	43da      	mvns	r2, r3
 8000d96:	693b      	ldr	r3, [r7, #16]
 8000d98:	4013      	ands	r3, r2
 8000d9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	68da      	ldr	r2, [r3, #12]
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	005b      	lsls	r3, r3, #1
 8000da4:	409a      	lsls	r2, r3
 8000da6:	0013      	movs	r3, r2
 8000da8:	693a      	ldr	r2, [r7, #16]
 8000daa:	4313      	orrs	r3, r2
 8000dac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	693a      	ldr	r2, [r7, #16]
 8000db2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dba:	2201      	movs	r2, #1
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	409a      	lsls	r2, r3
 8000dc0:	0013      	movs	r3, r2
 8000dc2:	43da      	mvns	r2, r3
 8000dc4:	693b      	ldr	r3, [r7, #16]
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	091b      	lsrs	r3, r3, #4
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	401a      	ands	r2, r3
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	409a      	lsls	r2, r3
 8000dd8:	0013      	movs	r3, r2
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	2203      	movs	r2, #3
 8000dec:	4013      	ands	r3, r2
 8000dee:	2b03      	cmp	r3, #3
 8000df0:	d017      	beq.n	8000e22 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	68db      	ldr	r3, [r3, #12]
 8000df6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	2203      	movs	r2, #3
 8000dfe:	409a      	lsls	r2, r3
 8000e00:	0013      	movs	r3, r2
 8000e02:	43da      	mvns	r2, r3
 8000e04:	693b      	ldr	r3, [r7, #16]
 8000e06:	4013      	ands	r3, r2
 8000e08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	689a      	ldr	r2, [r3, #8]
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	409a      	lsls	r2, r3
 8000e14:	0013      	movs	r3, r2
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	2203      	movs	r2, #3
 8000e28:	4013      	ands	r3, r2
 8000e2a:	2b02      	cmp	r3, #2
 8000e2c:	d123      	bne.n	8000e76 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	08da      	lsrs	r2, r3, #3
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	3208      	adds	r2, #8
 8000e36:	0092      	lsls	r2, r2, #2
 8000e38:	58d3      	ldr	r3, [r2, r3]
 8000e3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	2207      	movs	r2, #7
 8000e40:	4013      	ands	r3, r2
 8000e42:	009b      	lsls	r3, r3, #2
 8000e44:	220f      	movs	r2, #15
 8000e46:	409a      	lsls	r2, r3
 8000e48:	0013      	movs	r3, r2
 8000e4a:	43da      	mvns	r2, r3
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	4013      	ands	r3, r2
 8000e50:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	691a      	ldr	r2, [r3, #16]
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	2107      	movs	r1, #7
 8000e5a:	400b      	ands	r3, r1
 8000e5c:	009b      	lsls	r3, r3, #2
 8000e5e:	409a      	lsls	r2, r3
 8000e60:	0013      	movs	r3, r2
 8000e62:	693a      	ldr	r2, [r7, #16]
 8000e64:	4313      	orrs	r3, r2
 8000e66:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	08da      	lsrs	r2, r3, #3
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	3208      	adds	r2, #8
 8000e70:	0092      	lsls	r2, r2, #2
 8000e72:	6939      	ldr	r1, [r7, #16]
 8000e74:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	005b      	lsls	r3, r3, #1
 8000e80:	2203      	movs	r2, #3
 8000e82:	409a      	lsls	r2, r3
 8000e84:	0013      	movs	r3, r2
 8000e86:	43da      	mvns	r2, r3
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	2203      	movs	r2, #3
 8000e94:	401a      	ands	r2, r3
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	005b      	lsls	r3, r3, #1
 8000e9a:	409a      	lsls	r2, r3
 8000e9c:	0013      	movs	r3, r2
 8000e9e:	693a      	ldr	r2, [r7, #16]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685a      	ldr	r2, [r3, #4]
 8000eae:	23c0      	movs	r3, #192	; 0xc0
 8000eb0:	029b      	lsls	r3, r3, #10
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	d100      	bne.n	8000eb8 <HAL_GPIO_Init+0x17c>
 8000eb6:	e094      	b.n	8000fe2 <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eb8:	4b51      	ldr	r3, [pc, #324]	; (8001000 <HAL_GPIO_Init+0x2c4>)
 8000eba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ebc:	4b50      	ldr	r3, [pc, #320]	; (8001000 <HAL_GPIO_Init+0x2c4>)
 8000ebe:	2101      	movs	r1, #1
 8000ec0:	430a      	orrs	r2, r1
 8000ec2:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ec4:	4a4f      	ldr	r2, [pc, #316]	; (8001004 <HAL_GPIO_Init+0x2c8>)
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	089b      	lsrs	r3, r3, #2
 8000eca:	3302      	adds	r3, #2
 8000ecc:	009b      	lsls	r3, r3, #2
 8000ece:	589b      	ldr	r3, [r3, r2]
 8000ed0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	2203      	movs	r2, #3
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	220f      	movs	r2, #15
 8000edc:	409a      	lsls	r2, r3
 8000ede:	0013      	movs	r3, r2
 8000ee0:	43da      	mvns	r2, r3
 8000ee2:	693b      	ldr	r3, [r7, #16]
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000ee8:	687a      	ldr	r2, [r7, #4]
 8000eea:	23a0      	movs	r3, #160	; 0xa0
 8000eec:	05db      	lsls	r3, r3, #23
 8000eee:	429a      	cmp	r2, r3
 8000ef0:	d013      	beq.n	8000f1a <HAL_GPIO_Init+0x1de>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4a44      	ldr	r2, [pc, #272]	; (8001008 <HAL_GPIO_Init+0x2cc>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d00d      	beq.n	8000f16 <HAL_GPIO_Init+0x1da>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4a43      	ldr	r2, [pc, #268]	; (800100c <HAL_GPIO_Init+0x2d0>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d007      	beq.n	8000f12 <HAL_GPIO_Init+0x1d6>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4a42      	ldr	r2, [pc, #264]	; (8001010 <HAL_GPIO_Init+0x2d4>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d101      	bne.n	8000f0e <HAL_GPIO_Init+0x1d2>
 8000f0a:	2305      	movs	r3, #5
 8000f0c:	e006      	b.n	8000f1c <HAL_GPIO_Init+0x1e0>
 8000f0e:	2306      	movs	r3, #6
 8000f10:	e004      	b.n	8000f1c <HAL_GPIO_Init+0x1e0>
 8000f12:	2302      	movs	r3, #2
 8000f14:	e002      	b.n	8000f1c <HAL_GPIO_Init+0x1e0>
 8000f16:	2301      	movs	r3, #1
 8000f18:	e000      	b.n	8000f1c <HAL_GPIO_Init+0x1e0>
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	697a      	ldr	r2, [r7, #20]
 8000f1e:	2103      	movs	r1, #3
 8000f20:	400a      	ands	r2, r1
 8000f22:	0092      	lsls	r2, r2, #2
 8000f24:	4093      	lsls	r3, r2
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f2c:	4935      	ldr	r1, [pc, #212]	; (8001004 <HAL_GPIO_Init+0x2c8>)
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	089b      	lsrs	r3, r3, #2
 8000f32:	3302      	adds	r3, #2
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f3a:	4b36      	ldr	r3, [pc, #216]	; (8001014 <HAL_GPIO_Init+0x2d8>)
 8000f3c:	689b      	ldr	r3, [r3, #8]
 8000f3e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	43da      	mvns	r2, r3
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	4013      	ands	r3, r2
 8000f48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685a      	ldr	r2, [r3, #4]
 8000f4e:	2380      	movs	r3, #128	; 0x80
 8000f50:	035b      	lsls	r3, r3, #13
 8000f52:	4013      	ands	r3, r2
 8000f54:	d003      	beq.n	8000f5e <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f5e:	4b2d      	ldr	r3, [pc, #180]	; (8001014 <HAL_GPIO_Init+0x2d8>)
 8000f60:	693a      	ldr	r2, [r7, #16]
 8000f62:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000f64:	4b2b      	ldr	r3, [pc, #172]	; (8001014 <HAL_GPIO_Init+0x2d8>)
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	43da      	mvns	r2, r3
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	4013      	ands	r3, r2
 8000f72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685a      	ldr	r2, [r3, #4]
 8000f78:	2380      	movs	r3, #128	; 0x80
 8000f7a:	039b      	lsls	r3, r3, #14
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	d003      	beq.n	8000f88 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 8000f80:	693a      	ldr	r2, [r7, #16]
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f88:	4b22      	ldr	r3, [pc, #136]	; (8001014 <HAL_GPIO_Init+0x2d8>)
 8000f8a:	693a      	ldr	r2, [r7, #16]
 8000f8c:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8000f8e:	4b21      	ldr	r3, [pc, #132]	; (8001014 <HAL_GPIO_Init+0x2d8>)
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	43da      	mvns	r2, r3
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685a      	ldr	r2, [r3, #4]
 8000fa2:	2380      	movs	r3, #128	; 0x80
 8000fa4:	029b      	lsls	r3, r3, #10
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	d003      	beq.n	8000fb2 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000fb2:	4b18      	ldr	r3, [pc, #96]	; (8001014 <HAL_GPIO_Init+0x2d8>)
 8000fb4:	693a      	ldr	r2, [r7, #16]
 8000fb6:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fb8:	4b16      	ldr	r3, [pc, #88]	; (8001014 <HAL_GPIO_Init+0x2d8>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	43da      	mvns	r2, r3
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685a      	ldr	r2, [r3, #4]
 8000fcc:	2380      	movs	r3, #128	; 0x80
 8000fce:	025b      	lsls	r3, r3, #9
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	d003      	beq.n	8000fdc <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8000fd4:	693a      	ldr	r2, [r7, #16]
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000fdc:	4b0d      	ldr	r3, [pc, #52]	; (8001014 <HAL_GPIO_Init+0x2d8>)
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	40da      	lsrs	r2, r3
 8000ff0:	1e13      	subs	r3, r2, #0
 8000ff2:	d000      	beq.n	8000ff6 <HAL_GPIO_Init+0x2ba>
 8000ff4:	e6ae      	b.n	8000d54 <HAL_GPIO_Init+0x18>
  }
}
 8000ff6:	46c0      	nop			; (mov r8, r8)
 8000ff8:	46c0      	nop			; (mov r8, r8)
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	b006      	add	sp, #24
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	40021000 	.word	0x40021000
 8001004:	40010000 	.word	0x40010000
 8001008:	50000400 	.word	0x50000400
 800100c:	50000800 	.word	0x50000800
 8001010:	50001c00 	.word	0x50001c00
 8001014:	40010400 	.word	0x40010400

08001018 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	0008      	movs	r0, r1
 8001022:	0011      	movs	r1, r2
 8001024:	1cbb      	adds	r3, r7, #2
 8001026:	1c02      	adds	r2, r0, #0
 8001028:	801a      	strh	r2, [r3, #0]
 800102a:	1c7b      	adds	r3, r7, #1
 800102c:	1c0a      	adds	r2, r1, #0
 800102e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001030:	1c7b      	adds	r3, r7, #1
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d004      	beq.n	8001042 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001038:	1cbb      	adds	r3, r7, #2
 800103a:	881a      	ldrh	r2, [r3, #0]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001040:	e003      	b.n	800104a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001042:	1cbb      	adds	r3, r7, #2
 8001044:	881a      	ldrh	r2, [r3, #0]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	629a      	str	r2, [r3, #40]	; 0x28
}
 800104a:	46c0      	nop			; (mov r8, r8)
 800104c:	46bd      	mov	sp, r7
 800104e:	b002      	add	sp, #8
 8001050:	bd80      	pop	{r7, pc}
	...

08001054 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d101      	bne.n	8001066 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001062:	2301      	movs	r3, #1
 8001064:	e082      	b.n	800116c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2241      	movs	r2, #65	; 0x41
 800106a:	5c9b      	ldrb	r3, [r3, r2]
 800106c:	b2db      	uxtb	r3, r3
 800106e:	2b00      	cmp	r3, #0
 8001070:	d107      	bne.n	8001082 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2240      	movs	r2, #64	; 0x40
 8001076:	2100      	movs	r1, #0
 8001078:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	0018      	movs	r0, r3
 800107e:	f7ff fc3b 	bl	80008f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2241      	movs	r2, #65	; 0x41
 8001086:	2124      	movs	r1, #36	; 0x24
 8001088:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2101      	movs	r1, #1
 8001096:	438a      	bics	r2, r1
 8001098:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	685a      	ldr	r2, [r3, #4]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4934      	ldr	r1, [pc, #208]	; (8001174 <HAL_I2C_Init+0x120>)
 80010a4:	400a      	ands	r2, r1
 80010a6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	689a      	ldr	r2, [r3, #8]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4931      	ldr	r1, [pc, #196]	; (8001178 <HAL_I2C_Init+0x124>)
 80010b4:	400a      	ands	r2, r1
 80010b6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d108      	bne.n	80010d2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	689a      	ldr	r2, [r3, #8]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2180      	movs	r1, #128	; 0x80
 80010ca:	0209      	lsls	r1, r1, #8
 80010cc:	430a      	orrs	r2, r1
 80010ce:	609a      	str	r2, [r3, #8]
 80010d0:	e007      	b.n	80010e2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	689a      	ldr	r2, [r3, #8]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	2184      	movs	r1, #132	; 0x84
 80010dc:	0209      	lsls	r1, r1, #8
 80010de:	430a      	orrs	r2, r1
 80010e0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	68db      	ldr	r3, [r3, #12]
 80010e6:	2b02      	cmp	r3, #2
 80010e8:	d104      	bne.n	80010f4 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	2280      	movs	r2, #128	; 0x80
 80010f0:	0112      	lsls	r2, r2, #4
 80010f2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	685a      	ldr	r2, [r3, #4]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	491f      	ldr	r1, [pc, #124]	; (800117c <HAL_I2C_Init+0x128>)
 8001100:	430a      	orrs	r2, r1
 8001102:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	68da      	ldr	r2, [r3, #12]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	491a      	ldr	r1, [pc, #104]	; (8001178 <HAL_I2C_Init+0x124>)
 8001110:	400a      	ands	r2, r1
 8001112:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	691a      	ldr	r2, [r3, #16]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	695b      	ldr	r3, [r3, #20]
 800111c:	431a      	orrs	r2, r3
 800111e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	699b      	ldr	r3, [r3, #24]
 8001124:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	430a      	orrs	r2, r1
 800112c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	69d9      	ldr	r1, [r3, #28]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6a1a      	ldr	r2, [r3, #32]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	430a      	orrs	r2, r1
 800113c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2101      	movs	r1, #1
 800114a:	430a      	orrs	r2, r1
 800114c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2200      	movs	r2, #0
 8001152:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2241      	movs	r2, #65	; 0x41
 8001158:	2120      	movs	r1, #32
 800115a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2200      	movs	r2, #0
 8001160:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2242      	movs	r2, #66	; 0x42
 8001166:	2100      	movs	r1, #0
 8001168:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800116a:	2300      	movs	r3, #0
}
 800116c:	0018      	movs	r0, r3
 800116e:	46bd      	mov	sp, r7
 8001170:	b002      	add	sp, #8
 8001172:	bd80      	pop	{r7, pc}
 8001174:	f0ffffff 	.word	0xf0ffffff
 8001178:	ffff7fff 	.word	0xffff7fff
 800117c:	02008000 	.word	0x02008000

08001180 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2241      	movs	r2, #65	; 0x41
 800118e:	5c9b      	ldrb	r3, [r3, r2]
 8001190:	b2db      	uxtb	r3, r3
 8001192:	2b20      	cmp	r3, #32
 8001194:	d138      	bne.n	8001208 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2240      	movs	r2, #64	; 0x40
 800119a:	5c9b      	ldrb	r3, [r3, r2]
 800119c:	2b01      	cmp	r3, #1
 800119e:	d101      	bne.n	80011a4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80011a0:	2302      	movs	r3, #2
 80011a2:	e032      	b.n	800120a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2240      	movs	r2, #64	; 0x40
 80011a8:	2101      	movs	r1, #1
 80011aa:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2241      	movs	r2, #65	; 0x41
 80011b0:	2124      	movs	r1, #36	; 0x24
 80011b2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	2101      	movs	r1, #1
 80011c0:	438a      	bics	r2, r1
 80011c2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4911      	ldr	r1, [pc, #68]	; (8001214 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80011d0:	400a      	ands	r2, r1
 80011d2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	6819      	ldr	r1, [r3, #0]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	683a      	ldr	r2, [r7, #0]
 80011e0:	430a      	orrs	r2, r1
 80011e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	2101      	movs	r1, #1
 80011f0:	430a      	orrs	r2, r1
 80011f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2241      	movs	r2, #65	; 0x41
 80011f8:	2120      	movs	r1, #32
 80011fa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2240      	movs	r2, #64	; 0x40
 8001200:	2100      	movs	r1, #0
 8001202:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001204:	2300      	movs	r3, #0
 8001206:	e000      	b.n	800120a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001208:	2302      	movs	r3, #2
  }
}
 800120a:	0018      	movs	r0, r3
 800120c:	46bd      	mov	sp, r7
 800120e:	b002      	add	sp, #8
 8001210:	bd80      	pop	{r7, pc}
 8001212:	46c0      	nop			; (mov r8, r8)
 8001214:	ffffefff 	.word	0xffffefff

08001218 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2241      	movs	r2, #65	; 0x41
 8001226:	5c9b      	ldrb	r3, [r3, r2]
 8001228:	b2db      	uxtb	r3, r3
 800122a:	2b20      	cmp	r3, #32
 800122c:	d139      	bne.n	80012a2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2240      	movs	r2, #64	; 0x40
 8001232:	5c9b      	ldrb	r3, [r3, r2]
 8001234:	2b01      	cmp	r3, #1
 8001236:	d101      	bne.n	800123c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001238:	2302      	movs	r3, #2
 800123a:	e033      	b.n	80012a4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2240      	movs	r2, #64	; 0x40
 8001240:	2101      	movs	r1, #1
 8001242:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2241      	movs	r2, #65	; 0x41
 8001248:	2124      	movs	r1, #36	; 0x24
 800124a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	2101      	movs	r1, #1
 8001258:	438a      	bics	r2, r1
 800125a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	4a11      	ldr	r2, [pc, #68]	; (80012ac <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001268:	4013      	ands	r3, r2
 800126a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	021b      	lsls	r3, r3, #8
 8001270:	68fa      	ldr	r2, [r7, #12]
 8001272:	4313      	orrs	r3, r2
 8001274:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	68fa      	ldr	r2, [r7, #12]
 800127c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	2101      	movs	r1, #1
 800128a:	430a      	orrs	r2, r1
 800128c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2241      	movs	r2, #65	; 0x41
 8001292:	2120      	movs	r1, #32
 8001294:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2240      	movs	r2, #64	; 0x40
 800129a:	2100      	movs	r1, #0
 800129c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800129e:	2300      	movs	r3, #0
 80012a0:	e000      	b.n	80012a4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80012a2:	2302      	movs	r3, #2
  }
}
 80012a4:	0018      	movs	r0, r3
 80012a6:	46bd      	mov	sp, r7
 80012a8:	b004      	add	sp, #16
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	fffff0ff 	.word	0xfffff0ff

080012b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012b0:	b5b0      	push	{r4, r5, r7, lr}
 80012b2:	b08a      	sub	sp, #40	; 0x28
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d102      	bne.n	80012c4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	f000 fb6c 	bl	800199c <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012c4:	4bc8      	ldr	r3, [pc, #800]	; (80015e8 <HAL_RCC_OscConfig+0x338>)
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	220c      	movs	r2, #12
 80012ca:	4013      	ands	r3, r2
 80012cc:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012ce:	4bc6      	ldr	r3, [pc, #792]	; (80015e8 <HAL_RCC_OscConfig+0x338>)
 80012d0:	68da      	ldr	r2, [r3, #12]
 80012d2:	2380      	movs	r3, #128	; 0x80
 80012d4:	025b      	lsls	r3, r3, #9
 80012d6:	4013      	ands	r3, r2
 80012d8:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	2201      	movs	r2, #1
 80012e0:	4013      	ands	r3, r2
 80012e2:	d100      	bne.n	80012e6 <HAL_RCC_OscConfig+0x36>
 80012e4:	e07d      	b.n	80013e2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	2b08      	cmp	r3, #8
 80012ea:	d007      	beq.n	80012fc <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	2b0c      	cmp	r3, #12
 80012f0:	d112      	bne.n	8001318 <HAL_RCC_OscConfig+0x68>
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	2380      	movs	r3, #128	; 0x80
 80012f6:	025b      	lsls	r3, r3, #9
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d10d      	bne.n	8001318 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012fc:	4bba      	ldr	r3, [pc, #744]	; (80015e8 <HAL_RCC_OscConfig+0x338>)
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	2380      	movs	r3, #128	; 0x80
 8001302:	029b      	lsls	r3, r3, #10
 8001304:	4013      	ands	r3, r2
 8001306:	d100      	bne.n	800130a <HAL_RCC_OscConfig+0x5a>
 8001308:	e06a      	b.n	80013e0 <HAL_RCC_OscConfig+0x130>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d166      	bne.n	80013e0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	f000 fb42 	bl	800199c <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	685a      	ldr	r2, [r3, #4]
 800131c:	2380      	movs	r3, #128	; 0x80
 800131e:	025b      	lsls	r3, r3, #9
 8001320:	429a      	cmp	r2, r3
 8001322:	d107      	bne.n	8001334 <HAL_RCC_OscConfig+0x84>
 8001324:	4bb0      	ldr	r3, [pc, #704]	; (80015e8 <HAL_RCC_OscConfig+0x338>)
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	4baf      	ldr	r3, [pc, #700]	; (80015e8 <HAL_RCC_OscConfig+0x338>)
 800132a:	2180      	movs	r1, #128	; 0x80
 800132c:	0249      	lsls	r1, r1, #9
 800132e:	430a      	orrs	r2, r1
 8001330:	601a      	str	r2, [r3, #0]
 8001332:	e027      	b.n	8001384 <HAL_RCC_OscConfig+0xd4>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	685a      	ldr	r2, [r3, #4]
 8001338:	23a0      	movs	r3, #160	; 0xa0
 800133a:	02db      	lsls	r3, r3, #11
 800133c:	429a      	cmp	r2, r3
 800133e:	d10e      	bne.n	800135e <HAL_RCC_OscConfig+0xae>
 8001340:	4ba9      	ldr	r3, [pc, #676]	; (80015e8 <HAL_RCC_OscConfig+0x338>)
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	4ba8      	ldr	r3, [pc, #672]	; (80015e8 <HAL_RCC_OscConfig+0x338>)
 8001346:	2180      	movs	r1, #128	; 0x80
 8001348:	02c9      	lsls	r1, r1, #11
 800134a:	430a      	orrs	r2, r1
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	4ba6      	ldr	r3, [pc, #664]	; (80015e8 <HAL_RCC_OscConfig+0x338>)
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	4ba5      	ldr	r3, [pc, #660]	; (80015e8 <HAL_RCC_OscConfig+0x338>)
 8001354:	2180      	movs	r1, #128	; 0x80
 8001356:	0249      	lsls	r1, r1, #9
 8001358:	430a      	orrs	r2, r1
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	e012      	b.n	8001384 <HAL_RCC_OscConfig+0xd4>
 800135e:	4ba2      	ldr	r3, [pc, #648]	; (80015e8 <HAL_RCC_OscConfig+0x338>)
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	4ba1      	ldr	r3, [pc, #644]	; (80015e8 <HAL_RCC_OscConfig+0x338>)
 8001364:	49a1      	ldr	r1, [pc, #644]	; (80015ec <HAL_RCC_OscConfig+0x33c>)
 8001366:	400a      	ands	r2, r1
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	4b9f      	ldr	r3, [pc, #636]	; (80015e8 <HAL_RCC_OscConfig+0x338>)
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	2380      	movs	r3, #128	; 0x80
 8001370:	025b      	lsls	r3, r3, #9
 8001372:	4013      	ands	r3, r2
 8001374:	60fb      	str	r3, [r7, #12]
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	4b9b      	ldr	r3, [pc, #620]	; (80015e8 <HAL_RCC_OscConfig+0x338>)
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	4b9a      	ldr	r3, [pc, #616]	; (80015e8 <HAL_RCC_OscConfig+0x338>)
 800137e:	499c      	ldr	r1, [pc, #624]	; (80015f0 <HAL_RCC_OscConfig+0x340>)
 8001380:	400a      	ands	r2, r1
 8001382:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d014      	beq.n	80013b6 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800138c:	f7ff fc18 	bl	8000bc0 <HAL_GetTick>
 8001390:	0003      	movs	r3, r0
 8001392:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001394:	e008      	b.n	80013a8 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001396:	f7ff fc13 	bl	8000bc0 <HAL_GetTick>
 800139a:	0002      	movs	r2, r0
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	2b64      	cmp	r3, #100	; 0x64
 80013a2:	d901      	bls.n	80013a8 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80013a4:	2303      	movs	r3, #3
 80013a6:	e2f9      	b.n	800199c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80013a8:	4b8f      	ldr	r3, [pc, #572]	; (80015e8 <HAL_RCC_OscConfig+0x338>)
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	2380      	movs	r3, #128	; 0x80
 80013ae:	029b      	lsls	r3, r3, #10
 80013b0:	4013      	ands	r3, r2
 80013b2:	d0f0      	beq.n	8001396 <HAL_RCC_OscConfig+0xe6>
 80013b4:	e015      	b.n	80013e2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b6:	f7ff fc03 	bl	8000bc0 <HAL_GetTick>
 80013ba:	0003      	movs	r3, r0
 80013bc:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80013be:	e008      	b.n	80013d2 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013c0:	f7ff fbfe 	bl	8000bc0 <HAL_GetTick>
 80013c4:	0002      	movs	r2, r0
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	2b64      	cmp	r3, #100	; 0x64
 80013cc:	d901      	bls.n	80013d2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80013ce:	2303      	movs	r3, #3
 80013d0:	e2e4      	b.n	800199c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80013d2:	4b85      	ldr	r3, [pc, #532]	; (80015e8 <HAL_RCC_OscConfig+0x338>)
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	2380      	movs	r3, #128	; 0x80
 80013d8:	029b      	lsls	r3, r3, #10
 80013da:	4013      	ands	r3, r2
 80013dc:	d1f0      	bne.n	80013c0 <HAL_RCC_OscConfig+0x110>
 80013de:	e000      	b.n	80013e2 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013e0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	2202      	movs	r2, #2
 80013e8:	4013      	ands	r3, r2
 80013ea:	d100      	bne.n	80013ee <HAL_RCC_OscConfig+0x13e>
 80013ec:	e099      	b.n	8001522 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	68db      	ldr	r3, [r3, #12]
 80013f2:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80013f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f6:	2220      	movs	r2, #32
 80013f8:	4013      	ands	r3, r2
 80013fa:	d009      	beq.n	8001410 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80013fc:	4b7a      	ldr	r3, [pc, #488]	; (80015e8 <HAL_RCC_OscConfig+0x338>)
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	4b79      	ldr	r3, [pc, #484]	; (80015e8 <HAL_RCC_OscConfig+0x338>)
 8001402:	2120      	movs	r1, #32
 8001404:	430a      	orrs	r2, r1
 8001406:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140a:	2220      	movs	r2, #32
 800140c:	4393      	bics	r3, r2
 800140e:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	2b04      	cmp	r3, #4
 8001414:	d005      	beq.n	8001422 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	2b0c      	cmp	r3, #12
 800141a:	d13e      	bne.n	800149a <HAL_RCC_OscConfig+0x1ea>
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d13b      	bne.n	800149a <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001422:	4b71      	ldr	r3, [pc, #452]	; (80015e8 <HAL_RCC_OscConfig+0x338>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	2204      	movs	r2, #4
 8001428:	4013      	ands	r3, r2
 800142a:	d004      	beq.n	8001436 <HAL_RCC_OscConfig+0x186>
 800142c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142e:	2b00      	cmp	r3, #0
 8001430:	d101      	bne.n	8001436 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e2b2      	b.n	800199c <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001436:	4b6c      	ldr	r3, [pc, #432]	; (80015e8 <HAL_RCC_OscConfig+0x338>)
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	4a6e      	ldr	r2, [pc, #440]	; (80015f4 <HAL_RCC_OscConfig+0x344>)
 800143c:	4013      	ands	r3, r2
 800143e:	0019      	movs	r1, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	691b      	ldr	r3, [r3, #16]
 8001444:	021a      	lsls	r2, r3, #8
 8001446:	4b68      	ldr	r3, [pc, #416]	; (80015e8 <HAL_RCC_OscConfig+0x338>)
 8001448:	430a      	orrs	r2, r1
 800144a:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800144c:	4b66      	ldr	r3, [pc, #408]	; (80015e8 <HAL_RCC_OscConfig+0x338>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2209      	movs	r2, #9
 8001452:	4393      	bics	r3, r2
 8001454:	0019      	movs	r1, r3
 8001456:	4b64      	ldr	r3, [pc, #400]	; (80015e8 <HAL_RCC_OscConfig+0x338>)
 8001458:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800145a:	430a      	orrs	r2, r1
 800145c:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800145e:	f000 fbeb 	bl	8001c38 <HAL_RCC_GetSysClockFreq>
 8001462:	0001      	movs	r1, r0
 8001464:	4b60      	ldr	r3, [pc, #384]	; (80015e8 <HAL_RCC_OscConfig+0x338>)
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	091b      	lsrs	r3, r3, #4
 800146a:	220f      	movs	r2, #15
 800146c:	4013      	ands	r3, r2
 800146e:	4a62      	ldr	r2, [pc, #392]	; (80015f8 <HAL_RCC_OscConfig+0x348>)
 8001470:	5cd3      	ldrb	r3, [r2, r3]
 8001472:	000a      	movs	r2, r1
 8001474:	40da      	lsrs	r2, r3
 8001476:	4b61      	ldr	r3, [pc, #388]	; (80015fc <HAL_RCC_OscConfig+0x34c>)
 8001478:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800147a:	4b61      	ldr	r3, [pc, #388]	; (8001600 <HAL_RCC_OscConfig+0x350>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	2513      	movs	r5, #19
 8001480:	197c      	adds	r4, r7, r5
 8001482:	0018      	movs	r0, r3
 8001484:	f7ff fb56 	bl	8000b34 <HAL_InitTick>
 8001488:	0003      	movs	r3, r0
 800148a:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800148c:	197b      	adds	r3, r7, r5
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d046      	beq.n	8001522 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8001494:	197b      	adds	r3, r7, r5
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	e280      	b.n	800199c <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800149a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149c:	2b00      	cmp	r3, #0
 800149e:	d027      	beq.n	80014f0 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80014a0:	4b51      	ldr	r3, [pc, #324]	; (80015e8 <HAL_RCC_OscConfig+0x338>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2209      	movs	r2, #9
 80014a6:	4393      	bics	r3, r2
 80014a8:	0019      	movs	r1, r3
 80014aa:	4b4f      	ldr	r3, [pc, #316]	; (80015e8 <HAL_RCC_OscConfig+0x338>)
 80014ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014ae:	430a      	orrs	r2, r1
 80014b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b2:	f7ff fb85 	bl	8000bc0 <HAL_GetTick>
 80014b6:	0003      	movs	r3, r0
 80014b8:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80014ba:	e008      	b.n	80014ce <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014bc:	f7ff fb80 	bl	8000bc0 <HAL_GetTick>
 80014c0:	0002      	movs	r2, r0
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d901      	bls.n	80014ce <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e266      	b.n	800199c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80014ce:	4b46      	ldr	r3, [pc, #280]	; (80015e8 <HAL_RCC_OscConfig+0x338>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	2204      	movs	r2, #4
 80014d4:	4013      	ands	r3, r2
 80014d6:	d0f1      	beq.n	80014bc <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014d8:	4b43      	ldr	r3, [pc, #268]	; (80015e8 <HAL_RCC_OscConfig+0x338>)
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	4a45      	ldr	r2, [pc, #276]	; (80015f4 <HAL_RCC_OscConfig+0x344>)
 80014de:	4013      	ands	r3, r2
 80014e0:	0019      	movs	r1, r3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	691b      	ldr	r3, [r3, #16]
 80014e6:	021a      	lsls	r2, r3, #8
 80014e8:	4b3f      	ldr	r3, [pc, #252]	; (80015e8 <HAL_RCC_OscConfig+0x338>)
 80014ea:	430a      	orrs	r2, r1
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	e018      	b.n	8001522 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014f0:	4b3d      	ldr	r3, [pc, #244]	; (80015e8 <HAL_RCC_OscConfig+0x338>)
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	4b3c      	ldr	r3, [pc, #240]	; (80015e8 <HAL_RCC_OscConfig+0x338>)
 80014f6:	2101      	movs	r1, #1
 80014f8:	438a      	bics	r2, r1
 80014fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014fc:	f7ff fb60 	bl	8000bc0 <HAL_GetTick>
 8001500:	0003      	movs	r3, r0
 8001502:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001504:	e008      	b.n	8001518 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001506:	f7ff fb5b 	bl	8000bc0 <HAL_GetTick>
 800150a:	0002      	movs	r2, r0
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d901      	bls.n	8001518 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001514:	2303      	movs	r3, #3
 8001516:	e241      	b.n	800199c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001518:	4b33      	ldr	r3, [pc, #204]	; (80015e8 <HAL_RCC_OscConfig+0x338>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	2204      	movs	r2, #4
 800151e:	4013      	ands	r3, r2
 8001520:	d1f1      	bne.n	8001506 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	2210      	movs	r2, #16
 8001528:	4013      	ands	r3, r2
 800152a:	d100      	bne.n	800152e <HAL_RCC_OscConfig+0x27e>
 800152c:	e0a1      	b.n	8001672 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d140      	bne.n	80015b6 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001534:	4b2c      	ldr	r3, [pc, #176]	; (80015e8 <HAL_RCC_OscConfig+0x338>)
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	2380      	movs	r3, #128	; 0x80
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	4013      	ands	r3, r2
 800153e:	d005      	beq.n	800154c <HAL_RCC_OscConfig+0x29c>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	699b      	ldr	r3, [r3, #24]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d101      	bne.n	800154c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001548:	2301      	movs	r3, #1
 800154a:	e227      	b.n	800199c <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800154c:	4b26      	ldr	r3, [pc, #152]	; (80015e8 <HAL_RCC_OscConfig+0x338>)
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	4a2c      	ldr	r2, [pc, #176]	; (8001604 <HAL_RCC_OscConfig+0x354>)
 8001552:	4013      	ands	r3, r2
 8001554:	0019      	movs	r1, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6a1a      	ldr	r2, [r3, #32]
 800155a:	4b23      	ldr	r3, [pc, #140]	; (80015e8 <HAL_RCC_OscConfig+0x338>)
 800155c:	430a      	orrs	r2, r1
 800155e:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001560:	4b21      	ldr	r3, [pc, #132]	; (80015e8 <HAL_RCC_OscConfig+0x338>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	021b      	lsls	r3, r3, #8
 8001566:	0a19      	lsrs	r1, r3, #8
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	69db      	ldr	r3, [r3, #28]
 800156c:	061a      	lsls	r2, r3, #24
 800156e:	4b1e      	ldr	r3, [pc, #120]	; (80015e8 <HAL_RCC_OscConfig+0x338>)
 8001570:	430a      	orrs	r2, r1
 8001572:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6a1b      	ldr	r3, [r3, #32]
 8001578:	0b5b      	lsrs	r3, r3, #13
 800157a:	3301      	adds	r3, #1
 800157c:	2280      	movs	r2, #128	; 0x80
 800157e:	0212      	lsls	r2, r2, #8
 8001580:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001582:	4b19      	ldr	r3, [pc, #100]	; (80015e8 <HAL_RCC_OscConfig+0x338>)
 8001584:	68db      	ldr	r3, [r3, #12]
 8001586:	091b      	lsrs	r3, r3, #4
 8001588:	210f      	movs	r1, #15
 800158a:	400b      	ands	r3, r1
 800158c:	491a      	ldr	r1, [pc, #104]	; (80015f8 <HAL_RCC_OscConfig+0x348>)
 800158e:	5ccb      	ldrb	r3, [r1, r3]
 8001590:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001592:	4b1a      	ldr	r3, [pc, #104]	; (80015fc <HAL_RCC_OscConfig+0x34c>)
 8001594:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001596:	4b1a      	ldr	r3, [pc, #104]	; (8001600 <HAL_RCC_OscConfig+0x350>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2513      	movs	r5, #19
 800159c:	197c      	adds	r4, r7, r5
 800159e:	0018      	movs	r0, r3
 80015a0:	f7ff fac8 	bl	8000b34 <HAL_InitTick>
 80015a4:	0003      	movs	r3, r0
 80015a6:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80015a8:	197b      	adds	r3, r7, r5
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d060      	beq.n	8001672 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 80015b0:	197b      	adds	r3, r7, r5
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	e1f2      	b.n	800199c <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	699b      	ldr	r3, [r3, #24]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d03f      	beq.n	800163e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80015be:	4b0a      	ldr	r3, [pc, #40]	; (80015e8 <HAL_RCC_OscConfig+0x338>)
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	4b09      	ldr	r3, [pc, #36]	; (80015e8 <HAL_RCC_OscConfig+0x338>)
 80015c4:	2180      	movs	r1, #128	; 0x80
 80015c6:	0049      	lsls	r1, r1, #1
 80015c8:	430a      	orrs	r2, r1
 80015ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015cc:	f7ff faf8 	bl	8000bc0 <HAL_GetTick>
 80015d0:	0003      	movs	r3, r0
 80015d2:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80015d4:	e018      	b.n	8001608 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015d6:	f7ff faf3 	bl	8000bc0 <HAL_GetTick>
 80015da:	0002      	movs	r2, r0
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d911      	bls.n	8001608 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 80015e4:	2303      	movs	r3, #3
 80015e6:	e1d9      	b.n	800199c <HAL_RCC_OscConfig+0x6ec>
 80015e8:	40021000 	.word	0x40021000
 80015ec:	fffeffff 	.word	0xfffeffff
 80015f0:	fffbffff 	.word	0xfffbffff
 80015f4:	ffffe0ff 	.word	0xffffe0ff
 80015f8:	08003bfc 	.word	0x08003bfc
 80015fc:	20000000 	.word	0x20000000
 8001600:	20000004 	.word	0x20000004
 8001604:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001608:	4bc9      	ldr	r3, [pc, #804]	; (8001930 <HAL_RCC_OscConfig+0x680>)
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	2380      	movs	r3, #128	; 0x80
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	4013      	ands	r3, r2
 8001612:	d0e0      	beq.n	80015d6 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001614:	4bc6      	ldr	r3, [pc, #792]	; (8001930 <HAL_RCC_OscConfig+0x680>)
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	4ac6      	ldr	r2, [pc, #792]	; (8001934 <HAL_RCC_OscConfig+0x684>)
 800161a:	4013      	ands	r3, r2
 800161c:	0019      	movs	r1, r3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6a1a      	ldr	r2, [r3, #32]
 8001622:	4bc3      	ldr	r3, [pc, #780]	; (8001930 <HAL_RCC_OscConfig+0x680>)
 8001624:	430a      	orrs	r2, r1
 8001626:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001628:	4bc1      	ldr	r3, [pc, #772]	; (8001930 <HAL_RCC_OscConfig+0x680>)
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	021b      	lsls	r3, r3, #8
 800162e:	0a19      	lsrs	r1, r3, #8
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	69db      	ldr	r3, [r3, #28]
 8001634:	061a      	lsls	r2, r3, #24
 8001636:	4bbe      	ldr	r3, [pc, #760]	; (8001930 <HAL_RCC_OscConfig+0x680>)
 8001638:	430a      	orrs	r2, r1
 800163a:	605a      	str	r2, [r3, #4]
 800163c:	e019      	b.n	8001672 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800163e:	4bbc      	ldr	r3, [pc, #752]	; (8001930 <HAL_RCC_OscConfig+0x680>)
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	4bbb      	ldr	r3, [pc, #748]	; (8001930 <HAL_RCC_OscConfig+0x680>)
 8001644:	49bc      	ldr	r1, [pc, #752]	; (8001938 <HAL_RCC_OscConfig+0x688>)
 8001646:	400a      	ands	r2, r1
 8001648:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800164a:	f7ff fab9 	bl	8000bc0 <HAL_GetTick>
 800164e:	0003      	movs	r3, r0
 8001650:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001652:	e008      	b.n	8001666 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001654:	f7ff fab4 	bl	8000bc0 <HAL_GetTick>
 8001658:	0002      	movs	r2, r0
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	2b02      	cmp	r3, #2
 8001660:	d901      	bls.n	8001666 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e19a      	b.n	800199c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001666:	4bb2      	ldr	r3, [pc, #712]	; (8001930 <HAL_RCC_OscConfig+0x680>)
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	2380      	movs	r3, #128	; 0x80
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	4013      	ands	r3, r2
 8001670:	d1f0      	bne.n	8001654 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	2208      	movs	r2, #8
 8001678:	4013      	ands	r3, r2
 800167a:	d036      	beq.n	80016ea <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	695b      	ldr	r3, [r3, #20]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d019      	beq.n	80016b8 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001684:	4baa      	ldr	r3, [pc, #680]	; (8001930 <HAL_RCC_OscConfig+0x680>)
 8001686:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001688:	4ba9      	ldr	r3, [pc, #676]	; (8001930 <HAL_RCC_OscConfig+0x680>)
 800168a:	2101      	movs	r1, #1
 800168c:	430a      	orrs	r2, r1
 800168e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001690:	f7ff fa96 	bl	8000bc0 <HAL_GetTick>
 8001694:	0003      	movs	r3, r0
 8001696:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001698:	e008      	b.n	80016ac <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800169a:	f7ff fa91 	bl	8000bc0 <HAL_GetTick>
 800169e:	0002      	movs	r2, r0
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d901      	bls.n	80016ac <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 80016a8:	2303      	movs	r3, #3
 80016aa:	e177      	b.n	800199c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80016ac:	4ba0      	ldr	r3, [pc, #640]	; (8001930 <HAL_RCC_OscConfig+0x680>)
 80016ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016b0:	2202      	movs	r2, #2
 80016b2:	4013      	ands	r3, r2
 80016b4:	d0f1      	beq.n	800169a <HAL_RCC_OscConfig+0x3ea>
 80016b6:	e018      	b.n	80016ea <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016b8:	4b9d      	ldr	r3, [pc, #628]	; (8001930 <HAL_RCC_OscConfig+0x680>)
 80016ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016bc:	4b9c      	ldr	r3, [pc, #624]	; (8001930 <HAL_RCC_OscConfig+0x680>)
 80016be:	2101      	movs	r1, #1
 80016c0:	438a      	bics	r2, r1
 80016c2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016c4:	f7ff fa7c 	bl	8000bc0 <HAL_GetTick>
 80016c8:	0003      	movs	r3, r0
 80016ca:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80016cc:	e008      	b.n	80016e0 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016ce:	f7ff fa77 	bl	8000bc0 <HAL_GetTick>
 80016d2:	0002      	movs	r2, r0
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d901      	bls.n	80016e0 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 80016dc:	2303      	movs	r3, #3
 80016de:	e15d      	b.n	800199c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80016e0:	4b93      	ldr	r3, [pc, #588]	; (8001930 <HAL_RCC_OscConfig+0x680>)
 80016e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016e4:	2202      	movs	r2, #2
 80016e6:	4013      	ands	r3, r2
 80016e8:	d1f1      	bne.n	80016ce <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	2204      	movs	r2, #4
 80016f0:	4013      	ands	r3, r2
 80016f2:	d100      	bne.n	80016f6 <HAL_RCC_OscConfig+0x446>
 80016f4:	e0ae      	b.n	8001854 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016f6:	2023      	movs	r0, #35	; 0x23
 80016f8:	183b      	adds	r3, r7, r0
 80016fa:	2200      	movs	r2, #0
 80016fc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016fe:	4b8c      	ldr	r3, [pc, #560]	; (8001930 <HAL_RCC_OscConfig+0x680>)
 8001700:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001702:	2380      	movs	r3, #128	; 0x80
 8001704:	055b      	lsls	r3, r3, #21
 8001706:	4013      	ands	r3, r2
 8001708:	d109      	bne.n	800171e <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800170a:	4b89      	ldr	r3, [pc, #548]	; (8001930 <HAL_RCC_OscConfig+0x680>)
 800170c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800170e:	4b88      	ldr	r3, [pc, #544]	; (8001930 <HAL_RCC_OscConfig+0x680>)
 8001710:	2180      	movs	r1, #128	; 0x80
 8001712:	0549      	lsls	r1, r1, #21
 8001714:	430a      	orrs	r2, r1
 8001716:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001718:	183b      	adds	r3, r7, r0
 800171a:	2201      	movs	r2, #1
 800171c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800171e:	4b87      	ldr	r3, [pc, #540]	; (800193c <HAL_RCC_OscConfig+0x68c>)
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	2380      	movs	r3, #128	; 0x80
 8001724:	005b      	lsls	r3, r3, #1
 8001726:	4013      	ands	r3, r2
 8001728:	d11a      	bne.n	8001760 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800172a:	4b84      	ldr	r3, [pc, #528]	; (800193c <HAL_RCC_OscConfig+0x68c>)
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	4b83      	ldr	r3, [pc, #524]	; (800193c <HAL_RCC_OscConfig+0x68c>)
 8001730:	2180      	movs	r1, #128	; 0x80
 8001732:	0049      	lsls	r1, r1, #1
 8001734:	430a      	orrs	r2, r1
 8001736:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001738:	f7ff fa42 	bl	8000bc0 <HAL_GetTick>
 800173c:	0003      	movs	r3, r0
 800173e:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001740:	e008      	b.n	8001754 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001742:	f7ff fa3d 	bl	8000bc0 <HAL_GetTick>
 8001746:	0002      	movs	r2, r0
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	2b64      	cmp	r3, #100	; 0x64
 800174e:	d901      	bls.n	8001754 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8001750:	2303      	movs	r3, #3
 8001752:	e123      	b.n	800199c <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001754:	4b79      	ldr	r3, [pc, #484]	; (800193c <HAL_RCC_OscConfig+0x68c>)
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	2380      	movs	r3, #128	; 0x80
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	4013      	ands	r3, r2
 800175e:	d0f0      	beq.n	8001742 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	689a      	ldr	r2, [r3, #8]
 8001764:	2380      	movs	r3, #128	; 0x80
 8001766:	005b      	lsls	r3, r3, #1
 8001768:	429a      	cmp	r2, r3
 800176a:	d107      	bne.n	800177c <HAL_RCC_OscConfig+0x4cc>
 800176c:	4b70      	ldr	r3, [pc, #448]	; (8001930 <HAL_RCC_OscConfig+0x680>)
 800176e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001770:	4b6f      	ldr	r3, [pc, #444]	; (8001930 <HAL_RCC_OscConfig+0x680>)
 8001772:	2180      	movs	r1, #128	; 0x80
 8001774:	0049      	lsls	r1, r1, #1
 8001776:	430a      	orrs	r2, r1
 8001778:	651a      	str	r2, [r3, #80]	; 0x50
 800177a:	e031      	b.n	80017e0 <HAL_RCC_OscConfig+0x530>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d10c      	bne.n	800179e <HAL_RCC_OscConfig+0x4ee>
 8001784:	4b6a      	ldr	r3, [pc, #424]	; (8001930 <HAL_RCC_OscConfig+0x680>)
 8001786:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001788:	4b69      	ldr	r3, [pc, #420]	; (8001930 <HAL_RCC_OscConfig+0x680>)
 800178a:	496b      	ldr	r1, [pc, #428]	; (8001938 <HAL_RCC_OscConfig+0x688>)
 800178c:	400a      	ands	r2, r1
 800178e:	651a      	str	r2, [r3, #80]	; 0x50
 8001790:	4b67      	ldr	r3, [pc, #412]	; (8001930 <HAL_RCC_OscConfig+0x680>)
 8001792:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001794:	4b66      	ldr	r3, [pc, #408]	; (8001930 <HAL_RCC_OscConfig+0x680>)
 8001796:	496a      	ldr	r1, [pc, #424]	; (8001940 <HAL_RCC_OscConfig+0x690>)
 8001798:	400a      	ands	r2, r1
 800179a:	651a      	str	r2, [r3, #80]	; 0x50
 800179c:	e020      	b.n	80017e0 <HAL_RCC_OscConfig+0x530>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	689a      	ldr	r2, [r3, #8]
 80017a2:	23a0      	movs	r3, #160	; 0xa0
 80017a4:	00db      	lsls	r3, r3, #3
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d10e      	bne.n	80017c8 <HAL_RCC_OscConfig+0x518>
 80017aa:	4b61      	ldr	r3, [pc, #388]	; (8001930 <HAL_RCC_OscConfig+0x680>)
 80017ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017ae:	4b60      	ldr	r3, [pc, #384]	; (8001930 <HAL_RCC_OscConfig+0x680>)
 80017b0:	2180      	movs	r1, #128	; 0x80
 80017b2:	00c9      	lsls	r1, r1, #3
 80017b4:	430a      	orrs	r2, r1
 80017b6:	651a      	str	r2, [r3, #80]	; 0x50
 80017b8:	4b5d      	ldr	r3, [pc, #372]	; (8001930 <HAL_RCC_OscConfig+0x680>)
 80017ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017bc:	4b5c      	ldr	r3, [pc, #368]	; (8001930 <HAL_RCC_OscConfig+0x680>)
 80017be:	2180      	movs	r1, #128	; 0x80
 80017c0:	0049      	lsls	r1, r1, #1
 80017c2:	430a      	orrs	r2, r1
 80017c4:	651a      	str	r2, [r3, #80]	; 0x50
 80017c6:	e00b      	b.n	80017e0 <HAL_RCC_OscConfig+0x530>
 80017c8:	4b59      	ldr	r3, [pc, #356]	; (8001930 <HAL_RCC_OscConfig+0x680>)
 80017ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017cc:	4b58      	ldr	r3, [pc, #352]	; (8001930 <HAL_RCC_OscConfig+0x680>)
 80017ce:	495a      	ldr	r1, [pc, #360]	; (8001938 <HAL_RCC_OscConfig+0x688>)
 80017d0:	400a      	ands	r2, r1
 80017d2:	651a      	str	r2, [r3, #80]	; 0x50
 80017d4:	4b56      	ldr	r3, [pc, #344]	; (8001930 <HAL_RCC_OscConfig+0x680>)
 80017d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017d8:	4b55      	ldr	r3, [pc, #340]	; (8001930 <HAL_RCC_OscConfig+0x680>)
 80017da:	4959      	ldr	r1, [pc, #356]	; (8001940 <HAL_RCC_OscConfig+0x690>)
 80017dc:	400a      	ands	r2, r1
 80017de:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d015      	beq.n	8001814 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017e8:	f7ff f9ea 	bl	8000bc0 <HAL_GetTick>
 80017ec:	0003      	movs	r3, r0
 80017ee:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80017f0:	e009      	b.n	8001806 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017f2:	f7ff f9e5 	bl	8000bc0 <HAL_GetTick>
 80017f6:	0002      	movs	r2, r0
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	4a51      	ldr	r2, [pc, #324]	; (8001944 <HAL_RCC_OscConfig+0x694>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d901      	bls.n	8001806 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e0ca      	b.n	800199c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001806:	4b4a      	ldr	r3, [pc, #296]	; (8001930 <HAL_RCC_OscConfig+0x680>)
 8001808:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800180a:	2380      	movs	r3, #128	; 0x80
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	4013      	ands	r3, r2
 8001810:	d0ef      	beq.n	80017f2 <HAL_RCC_OscConfig+0x542>
 8001812:	e014      	b.n	800183e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001814:	f7ff f9d4 	bl	8000bc0 <HAL_GetTick>
 8001818:	0003      	movs	r3, r0
 800181a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800181c:	e009      	b.n	8001832 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800181e:	f7ff f9cf 	bl	8000bc0 <HAL_GetTick>
 8001822:	0002      	movs	r2, r0
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	1ad3      	subs	r3, r2, r3
 8001828:	4a46      	ldr	r2, [pc, #280]	; (8001944 <HAL_RCC_OscConfig+0x694>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d901      	bls.n	8001832 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e0b4      	b.n	800199c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001832:	4b3f      	ldr	r3, [pc, #252]	; (8001930 <HAL_RCC_OscConfig+0x680>)
 8001834:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001836:	2380      	movs	r3, #128	; 0x80
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	4013      	ands	r3, r2
 800183c:	d1ef      	bne.n	800181e <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800183e:	2323      	movs	r3, #35	; 0x23
 8001840:	18fb      	adds	r3, r7, r3
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	2b01      	cmp	r3, #1
 8001846:	d105      	bne.n	8001854 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001848:	4b39      	ldr	r3, [pc, #228]	; (8001930 <HAL_RCC_OscConfig+0x680>)
 800184a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800184c:	4b38      	ldr	r3, [pc, #224]	; (8001930 <HAL_RCC_OscConfig+0x680>)
 800184e:	493e      	ldr	r1, [pc, #248]	; (8001948 <HAL_RCC_OscConfig+0x698>)
 8001850:	400a      	ands	r2, r1
 8001852:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001858:	2b00      	cmp	r3, #0
 800185a:	d100      	bne.n	800185e <HAL_RCC_OscConfig+0x5ae>
 800185c:	e09d      	b.n	800199a <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	2b0c      	cmp	r3, #12
 8001862:	d100      	bne.n	8001866 <HAL_RCC_OscConfig+0x5b6>
 8001864:	e076      	b.n	8001954 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800186a:	2b02      	cmp	r3, #2
 800186c:	d145      	bne.n	80018fa <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800186e:	4b30      	ldr	r3, [pc, #192]	; (8001930 <HAL_RCC_OscConfig+0x680>)
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	4b2f      	ldr	r3, [pc, #188]	; (8001930 <HAL_RCC_OscConfig+0x680>)
 8001874:	4935      	ldr	r1, [pc, #212]	; (800194c <HAL_RCC_OscConfig+0x69c>)
 8001876:	400a      	ands	r2, r1
 8001878:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800187a:	f7ff f9a1 	bl	8000bc0 <HAL_GetTick>
 800187e:	0003      	movs	r3, r0
 8001880:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001882:	e008      	b.n	8001896 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001884:	f7ff f99c 	bl	8000bc0 <HAL_GetTick>
 8001888:	0002      	movs	r2, r0
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	2b02      	cmp	r3, #2
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e082      	b.n	800199c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001896:	4b26      	ldr	r3, [pc, #152]	; (8001930 <HAL_RCC_OscConfig+0x680>)
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	2380      	movs	r3, #128	; 0x80
 800189c:	049b      	lsls	r3, r3, #18
 800189e:	4013      	ands	r3, r2
 80018a0:	d1f0      	bne.n	8001884 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018a2:	4b23      	ldr	r3, [pc, #140]	; (8001930 <HAL_RCC_OscConfig+0x680>)
 80018a4:	68db      	ldr	r3, [r3, #12]
 80018a6:	4a2a      	ldr	r2, [pc, #168]	; (8001950 <HAL_RCC_OscConfig+0x6a0>)
 80018a8:	4013      	ands	r3, r2
 80018aa:	0019      	movs	r1, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b4:	431a      	orrs	r2, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	431a      	orrs	r2, r3
 80018bc:	4b1c      	ldr	r3, [pc, #112]	; (8001930 <HAL_RCC_OscConfig+0x680>)
 80018be:	430a      	orrs	r2, r1
 80018c0:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018c2:	4b1b      	ldr	r3, [pc, #108]	; (8001930 <HAL_RCC_OscConfig+0x680>)
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	4b1a      	ldr	r3, [pc, #104]	; (8001930 <HAL_RCC_OscConfig+0x680>)
 80018c8:	2180      	movs	r1, #128	; 0x80
 80018ca:	0449      	lsls	r1, r1, #17
 80018cc:	430a      	orrs	r2, r1
 80018ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d0:	f7ff f976 	bl	8000bc0 <HAL_GetTick>
 80018d4:	0003      	movs	r3, r0
 80018d6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80018d8:	e008      	b.n	80018ec <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018da:	f7ff f971 	bl	8000bc0 <HAL_GetTick>
 80018de:	0002      	movs	r2, r0
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	2b02      	cmp	r3, #2
 80018e6:	d901      	bls.n	80018ec <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80018e8:	2303      	movs	r3, #3
 80018ea:	e057      	b.n	800199c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80018ec:	4b10      	ldr	r3, [pc, #64]	; (8001930 <HAL_RCC_OscConfig+0x680>)
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	2380      	movs	r3, #128	; 0x80
 80018f2:	049b      	lsls	r3, r3, #18
 80018f4:	4013      	ands	r3, r2
 80018f6:	d0f0      	beq.n	80018da <HAL_RCC_OscConfig+0x62a>
 80018f8:	e04f      	b.n	800199a <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018fa:	4b0d      	ldr	r3, [pc, #52]	; (8001930 <HAL_RCC_OscConfig+0x680>)
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	4b0c      	ldr	r3, [pc, #48]	; (8001930 <HAL_RCC_OscConfig+0x680>)
 8001900:	4912      	ldr	r1, [pc, #72]	; (800194c <HAL_RCC_OscConfig+0x69c>)
 8001902:	400a      	ands	r2, r1
 8001904:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001906:	f7ff f95b 	bl	8000bc0 <HAL_GetTick>
 800190a:	0003      	movs	r3, r0
 800190c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800190e:	e008      	b.n	8001922 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001910:	f7ff f956 	bl	8000bc0 <HAL_GetTick>
 8001914:	0002      	movs	r2, r0
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	2b02      	cmp	r3, #2
 800191c:	d901      	bls.n	8001922 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e03c      	b.n	800199c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001922:	4b03      	ldr	r3, [pc, #12]	; (8001930 <HAL_RCC_OscConfig+0x680>)
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	2380      	movs	r3, #128	; 0x80
 8001928:	049b      	lsls	r3, r3, #18
 800192a:	4013      	ands	r3, r2
 800192c:	d1f0      	bne.n	8001910 <HAL_RCC_OscConfig+0x660>
 800192e:	e034      	b.n	800199a <HAL_RCC_OscConfig+0x6ea>
 8001930:	40021000 	.word	0x40021000
 8001934:	ffff1fff 	.word	0xffff1fff
 8001938:	fffffeff 	.word	0xfffffeff
 800193c:	40007000 	.word	0x40007000
 8001940:	fffffbff 	.word	0xfffffbff
 8001944:	00001388 	.word	0x00001388
 8001948:	efffffff 	.word	0xefffffff
 800194c:	feffffff 	.word	0xfeffffff
 8001950:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001958:	2b01      	cmp	r3, #1
 800195a:	d101      	bne.n	8001960 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e01d      	b.n	800199c <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001960:	4b10      	ldr	r3, [pc, #64]	; (80019a4 <HAL_RCC_OscConfig+0x6f4>)
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001966:	69ba      	ldr	r2, [r7, #24]
 8001968:	2380      	movs	r3, #128	; 0x80
 800196a:	025b      	lsls	r3, r3, #9
 800196c:	401a      	ands	r2, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001972:	429a      	cmp	r2, r3
 8001974:	d10f      	bne.n	8001996 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001976:	69ba      	ldr	r2, [r7, #24]
 8001978:	23f0      	movs	r3, #240	; 0xf0
 800197a:	039b      	lsls	r3, r3, #14
 800197c:	401a      	ands	r2, r3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001982:	429a      	cmp	r2, r3
 8001984:	d107      	bne.n	8001996 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001986:	69ba      	ldr	r2, [r7, #24]
 8001988:	23c0      	movs	r3, #192	; 0xc0
 800198a:	041b      	lsls	r3, r3, #16
 800198c:	401a      	ands	r2, r3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001992:	429a      	cmp	r2, r3
 8001994:	d001      	beq.n	800199a <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e000      	b.n	800199c <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 800199a:	2300      	movs	r3, #0
}
 800199c:	0018      	movs	r0, r3
 800199e:	46bd      	mov	sp, r7
 80019a0:	b00a      	add	sp, #40	; 0x28
 80019a2:	bdb0      	pop	{r4, r5, r7, pc}
 80019a4:	40021000 	.word	0x40021000

080019a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019a8:	b5b0      	push	{r4, r5, r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d101      	bne.n	80019bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e128      	b.n	8001c0e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019bc:	4b96      	ldr	r3, [pc, #600]	; (8001c18 <HAL_RCC_ClockConfig+0x270>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2201      	movs	r2, #1
 80019c2:	4013      	ands	r3, r2
 80019c4:	683a      	ldr	r2, [r7, #0]
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d91e      	bls.n	8001a08 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ca:	4b93      	ldr	r3, [pc, #588]	; (8001c18 <HAL_RCC_ClockConfig+0x270>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2201      	movs	r2, #1
 80019d0:	4393      	bics	r3, r2
 80019d2:	0019      	movs	r1, r3
 80019d4:	4b90      	ldr	r3, [pc, #576]	; (8001c18 <HAL_RCC_ClockConfig+0x270>)
 80019d6:	683a      	ldr	r2, [r7, #0]
 80019d8:	430a      	orrs	r2, r1
 80019da:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80019dc:	f7ff f8f0 	bl	8000bc0 <HAL_GetTick>
 80019e0:	0003      	movs	r3, r0
 80019e2:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019e4:	e009      	b.n	80019fa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019e6:	f7ff f8eb 	bl	8000bc0 <HAL_GetTick>
 80019ea:	0002      	movs	r2, r0
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	4a8a      	ldr	r2, [pc, #552]	; (8001c1c <HAL_RCC_ClockConfig+0x274>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d901      	bls.n	80019fa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e109      	b.n	8001c0e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019fa:	4b87      	ldr	r3, [pc, #540]	; (8001c18 <HAL_RCC_ClockConfig+0x270>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	2201      	movs	r2, #1
 8001a00:	4013      	ands	r3, r2
 8001a02:	683a      	ldr	r2, [r7, #0]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d1ee      	bne.n	80019e6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2202      	movs	r2, #2
 8001a0e:	4013      	ands	r3, r2
 8001a10:	d009      	beq.n	8001a26 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a12:	4b83      	ldr	r3, [pc, #524]	; (8001c20 <HAL_RCC_ClockConfig+0x278>)
 8001a14:	68db      	ldr	r3, [r3, #12]
 8001a16:	22f0      	movs	r2, #240	; 0xf0
 8001a18:	4393      	bics	r3, r2
 8001a1a:	0019      	movs	r1, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	689a      	ldr	r2, [r3, #8]
 8001a20:	4b7f      	ldr	r3, [pc, #508]	; (8001c20 <HAL_RCC_ClockConfig+0x278>)
 8001a22:	430a      	orrs	r2, r1
 8001a24:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	d100      	bne.n	8001a32 <HAL_RCC_ClockConfig+0x8a>
 8001a30:	e089      	b.n	8001b46 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d107      	bne.n	8001a4a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a3a:	4b79      	ldr	r3, [pc, #484]	; (8001c20 <HAL_RCC_ClockConfig+0x278>)
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	2380      	movs	r3, #128	; 0x80
 8001a40:	029b      	lsls	r3, r3, #10
 8001a42:	4013      	ands	r3, r2
 8001a44:	d120      	bne.n	8001a88 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e0e1      	b.n	8001c0e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	2b03      	cmp	r3, #3
 8001a50:	d107      	bne.n	8001a62 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001a52:	4b73      	ldr	r3, [pc, #460]	; (8001c20 <HAL_RCC_ClockConfig+0x278>)
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	2380      	movs	r3, #128	; 0x80
 8001a58:	049b      	lsls	r3, r3, #18
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	d114      	bne.n	8001a88 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e0d5      	b.n	8001c0e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d106      	bne.n	8001a78 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a6a:	4b6d      	ldr	r3, [pc, #436]	; (8001c20 <HAL_RCC_ClockConfig+0x278>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2204      	movs	r2, #4
 8001a70:	4013      	ands	r3, r2
 8001a72:	d109      	bne.n	8001a88 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e0ca      	b.n	8001c0e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001a78:	4b69      	ldr	r3, [pc, #420]	; (8001c20 <HAL_RCC_ClockConfig+0x278>)
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	2380      	movs	r3, #128	; 0x80
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	4013      	ands	r3, r2
 8001a82:	d101      	bne.n	8001a88 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e0c2      	b.n	8001c0e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a88:	4b65      	ldr	r3, [pc, #404]	; (8001c20 <HAL_RCC_ClockConfig+0x278>)
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	2203      	movs	r2, #3
 8001a8e:	4393      	bics	r3, r2
 8001a90:	0019      	movs	r1, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685a      	ldr	r2, [r3, #4]
 8001a96:	4b62      	ldr	r3, [pc, #392]	; (8001c20 <HAL_RCC_ClockConfig+0x278>)
 8001a98:	430a      	orrs	r2, r1
 8001a9a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a9c:	f7ff f890 	bl	8000bc0 <HAL_GetTick>
 8001aa0:	0003      	movs	r3, r0
 8001aa2:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d111      	bne.n	8001ad0 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001aac:	e009      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aae:	f7ff f887 	bl	8000bc0 <HAL_GetTick>
 8001ab2:	0002      	movs	r2, r0
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	4a58      	ldr	r2, [pc, #352]	; (8001c1c <HAL_RCC_ClockConfig+0x274>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e0a5      	b.n	8001c0e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ac2:	4b57      	ldr	r3, [pc, #348]	; (8001c20 <HAL_RCC_ClockConfig+0x278>)
 8001ac4:	68db      	ldr	r3, [r3, #12]
 8001ac6:	220c      	movs	r2, #12
 8001ac8:	4013      	ands	r3, r2
 8001aca:	2b08      	cmp	r3, #8
 8001acc:	d1ef      	bne.n	8001aae <HAL_RCC_ClockConfig+0x106>
 8001ace:	e03a      	b.n	8001b46 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	2b03      	cmp	r3, #3
 8001ad6:	d111      	bne.n	8001afc <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ad8:	e009      	b.n	8001aee <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ada:	f7ff f871 	bl	8000bc0 <HAL_GetTick>
 8001ade:	0002      	movs	r2, r0
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	4a4d      	ldr	r2, [pc, #308]	; (8001c1c <HAL_RCC_ClockConfig+0x274>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e08f      	b.n	8001c0e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001aee:	4b4c      	ldr	r3, [pc, #304]	; (8001c20 <HAL_RCC_ClockConfig+0x278>)
 8001af0:	68db      	ldr	r3, [r3, #12]
 8001af2:	220c      	movs	r2, #12
 8001af4:	4013      	ands	r3, r2
 8001af6:	2b0c      	cmp	r3, #12
 8001af8:	d1ef      	bne.n	8001ada <HAL_RCC_ClockConfig+0x132>
 8001afa:	e024      	b.n	8001b46 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d11b      	bne.n	8001b3c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b04:	e009      	b.n	8001b1a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b06:	f7ff f85b 	bl	8000bc0 <HAL_GetTick>
 8001b0a:	0002      	movs	r2, r0
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	4a42      	ldr	r2, [pc, #264]	; (8001c1c <HAL_RCC_ClockConfig+0x274>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e079      	b.n	8001c0e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b1a:	4b41      	ldr	r3, [pc, #260]	; (8001c20 <HAL_RCC_ClockConfig+0x278>)
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	220c      	movs	r2, #12
 8001b20:	4013      	ands	r3, r2
 8001b22:	2b04      	cmp	r3, #4
 8001b24:	d1ef      	bne.n	8001b06 <HAL_RCC_ClockConfig+0x15e>
 8001b26:	e00e      	b.n	8001b46 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b28:	f7ff f84a 	bl	8000bc0 <HAL_GetTick>
 8001b2c:	0002      	movs	r2, r0
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	4a3a      	ldr	r2, [pc, #232]	; (8001c1c <HAL_RCC_ClockConfig+0x274>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d901      	bls.n	8001b3c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e068      	b.n	8001c0e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001b3c:	4b38      	ldr	r3, [pc, #224]	; (8001c20 <HAL_RCC_ClockConfig+0x278>)
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	220c      	movs	r2, #12
 8001b42:	4013      	ands	r3, r2
 8001b44:	d1f0      	bne.n	8001b28 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b46:	4b34      	ldr	r3, [pc, #208]	; (8001c18 <HAL_RCC_ClockConfig+0x270>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	683a      	ldr	r2, [r7, #0]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d21e      	bcs.n	8001b92 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b54:	4b30      	ldr	r3, [pc, #192]	; (8001c18 <HAL_RCC_ClockConfig+0x270>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2201      	movs	r2, #1
 8001b5a:	4393      	bics	r3, r2
 8001b5c:	0019      	movs	r1, r3
 8001b5e:	4b2e      	ldr	r3, [pc, #184]	; (8001c18 <HAL_RCC_ClockConfig+0x270>)
 8001b60:	683a      	ldr	r2, [r7, #0]
 8001b62:	430a      	orrs	r2, r1
 8001b64:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b66:	f7ff f82b 	bl	8000bc0 <HAL_GetTick>
 8001b6a:	0003      	movs	r3, r0
 8001b6c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b6e:	e009      	b.n	8001b84 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b70:	f7ff f826 	bl	8000bc0 <HAL_GetTick>
 8001b74:	0002      	movs	r2, r0
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	4a28      	ldr	r2, [pc, #160]	; (8001c1c <HAL_RCC_ClockConfig+0x274>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d901      	bls.n	8001b84 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e044      	b.n	8001c0e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b84:	4b24      	ldr	r3, [pc, #144]	; (8001c18 <HAL_RCC_ClockConfig+0x270>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2201      	movs	r2, #1
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	683a      	ldr	r2, [r7, #0]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d1ee      	bne.n	8001b70 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	2204      	movs	r2, #4
 8001b98:	4013      	ands	r3, r2
 8001b9a:	d009      	beq.n	8001bb0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b9c:	4b20      	ldr	r3, [pc, #128]	; (8001c20 <HAL_RCC_ClockConfig+0x278>)
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	4a20      	ldr	r2, [pc, #128]	; (8001c24 <HAL_RCC_ClockConfig+0x27c>)
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	0019      	movs	r1, r3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	68da      	ldr	r2, [r3, #12]
 8001baa:	4b1d      	ldr	r3, [pc, #116]	; (8001c20 <HAL_RCC_ClockConfig+0x278>)
 8001bac:	430a      	orrs	r2, r1
 8001bae:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2208      	movs	r2, #8
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	d00a      	beq.n	8001bd0 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001bba:	4b19      	ldr	r3, [pc, #100]	; (8001c20 <HAL_RCC_ClockConfig+0x278>)
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	4a1a      	ldr	r2, [pc, #104]	; (8001c28 <HAL_RCC_ClockConfig+0x280>)
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	0019      	movs	r1, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	691b      	ldr	r3, [r3, #16]
 8001bc8:	00da      	lsls	r2, r3, #3
 8001bca:	4b15      	ldr	r3, [pc, #84]	; (8001c20 <HAL_RCC_ClockConfig+0x278>)
 8001bcc:	430a      	orrs	r2, r1
 8001bce:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001bd0:	f000 f832 	bl	8001c38 <HAL_RCC_GetSysClockFreq>
 8001bd4:	0001      	movs	r1, r0
 8001bd6:	4b12      	ldr	r3, [pc, #72]	; (8001c20 <HAL_RCC_ClockConfig+0x278>)
 8001bd8:	68db      	ldr	r3, [r3, #12]
 8001bda:	091b      	lsrs	r3, r3, #4
 8001bdc:	220f      	movs	r2, #15
 8001bde:	4013      	ands	r3, r2
 8001be0:	4a12      	ldr	r2, [pc, #72]	; (8001c2c <HAL_RCC_ClockConfig+0x284>)
 8001be2:	5cd3      	ldrb	r3, [r2, r3]
 8001be4:	000a      	movs	r2, r1
 8001be6:	40da      	lsrs	r2, r3
 8001be8:	4b11      	ldr	r3, [pc, #68]	; (8001c30 <HAL_RCC_ClockConfig+0x288>)
 8001bea:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001bec:	4b11      	ldr	r3, [pc, #68]	; (8001c34 <HAL_RCC_ClockConfig+0x28c>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	250b      	movs	r5, #11
 8001bf2:	197c      	adds	r4, r7, r5
 8001bf4:	0018      	movs	r0, r3
 8001bf6:	f7fe ff9d 	bl	8000b34 <HAL_InitTick>
 8001bfa:	0003      	movs	r3, r0
 8001bfc:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001bfe:	197b      	adds	r3, r7, r5
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d002      	beq.n	8001c0c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001c06:	197b      	adds	r3, r7, r5
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	e000      	b.n	8001c0e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	0018      	movs	r0, r3
 8001c10:	46bd      	mov	sp, r7
 8001c12:	b004      	add	sp, #16
 8001c14:	bdb0      	pop	{r4, r5, r7, pc}
 8001c16:	46c0      	nop			; (mov r8, r8)
 8001c18:	40022000 	.word	0x40022000
 8001c1c:	00001388 	.word	0x00001388
 8001c20:	40021000 	.word	0x40021000
 8001c24:	fffff8ff 	.word	0xfffff8ff
 8001c28:	ffffc7ff 	.word	0xffffc7ff
 8001c2c:	08003bfc 	.word	0x08003bfc
 8001c30:	20000000 	.word	0x20000000
 8001c34:	20000004 	.word	0x20000004

08001c38 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c38:	b5b0      	push	{r4, r5, r7, lr}
 8001c3a:	b08e      	sub	sp, #56	; 0x38
 8001c3c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001c3e:	4b4c      	ldr	r3, [pc, #304]	; (8001d70 <HAL_RCC_GetSysClockFreq+0x138>)
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c46:	230c      	movs	r3, #12
 8001c48:	4013      	ands	r3, r2
 8001c4a:	2b0c      	cmp	r3, #12
 8001c4c:	d014      	beq.n	8001c78 <HAL_RCC_GetSysClockFreq+0x40>
 8001c4e:	d900      	bls.n	8001c52 <HAL_RCC_GetSysClockFreq+0x1a>
 8001c50:	e07b      	b.n	8001d4a <HAL_RCC_GetSysClockFreq+0x112>
 8001c52:	2b04      	cmp	r3, #4
 8001c54:	d002      	beq.n	8001c5c <HAL_RCC_GetSysClockFreq+0x24>
 8001c56:	2b08      	cmp	r3, #8
 8001c58:	d00b      	beq.n	8001c72 <HAL_RCC_GetSysClockFreq+0x3a>
 8001c5a:	e076      	b.n	8001d4a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001c5c:	4b44      	ldr	r3, [pc, #272]	; (8001d70 <HAL_RCC_GetSysClockFreq+0x138>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	2210      	movs	r2, #16
 8001c62:	4013      	ands	r3, r2
 8001c64:	d002      	beq.n	8001c6c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001c66:	4b43      	ldr	r3, [pc, #268]	; (8001d74 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001c68:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001c6a:	e07c      	b.n	8001d66 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001c6c:	4b42      	ldr	r3, [pc, #264]	; (8001d78 <HAL_RCC_GetSysClockFreq+0x140>)
 8001c6e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c70:	e079      	b.n	8001d66 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c72:	4b42      	ldr	r3, [pc, #264]	; (8001d7c <HAL_RCC_GetSysClockFreq+0x144>)
 8001c74:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c76:	e076      	b.n	8001d66 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c7a:	0c9a      	lsrs	r2, r3, #18
 8001c7c:	230f      	movs	r3, #15
 8001c7e:	401a      	ands	r2, r3
 8001c80:	4b3f      	ldr	r3, [pc, #252]	; (8001d80 <HAL_RCC_GetSysClockFreq+0x148>)
 8001c82:	5c9b      	ldrb	r3, [r3, r2]
 8001c84:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c88:	0d9a      	lsrs	r2, r3, #22
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	3301      	adds	r3, #1
 8001c90:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c92:	4b37      	ldr	r3, [pc, #220]	; (8001d70 <HAL_RCC_GetSysClockFreq+0x138>)
 8001c94:	68da      	ldr	r2, [r3, #12]
 8001c96:	2380      	movs	r3, #128	; 0x80
 8001c98:	025b      	lsls	r3, r3, #9
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	d01a      	beq.n	8001cd4 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ca0:	61bb      	str	r3, [r7, #24]
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	61fb      	str	r3, [r7, #28]
 8001ca6:	4a35      	ldr	r2, [pc, #212]	; (8001d7c <HAL_RCC_GetSysClockFreq+0x144>)
 8001ca8:	2300      	movs	r3, #0
 8001caa:	69b8      	ldr	r0, [r7, #24]
 8001cac:	69f9      	ldr	r1, [r7, #28]
 8001cae:	f7fe fad7 	bl	8000260 <__aeabi_lmul>
 8001cb2:	0002      	movs	r2, r0
 8001cb4:	000b      	movs	r3, r1
 8001cb6:	0010      	movs	r0, r2
 8001cb8:	0019      	movs	r1, r3
 8001cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbc:	613b      	str	r3, [r7, #16]
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	617b      	str	r3, [r7, #20]
 8001cc2:	693a      	ldr	r2, [r7, #16]
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	f7fe faab 	bl	8000220 <__aeabi_uldivmod>
 8001cca:	0002      	movs	r2, r0
 8001ccc:	000b      	movs	r3, r1
 8001cce:	0013      	movs	r3, r2
 8001cd0:	637b      	str	r3, [r7, #52]	; 0x34
 8001cd2:	e037      	b.n	8001d44 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001cd4:	4b26      	ldr	r3, [pc, #152]	; (8001d70 <HAL_RCC_GetSysClockFreq+0x138>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	2210      	movs	r2, #16
 8001cda:	4013      	ands	r3, r2
 8001cdc:	d01a      	beq.n	8001d14 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ce0:	60bb      	str	r3, [r7, #8]
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	60fb      	str	r3, [r7, #12]
 8001ce6:	4a23      	ldr	r2, [pc, #140]	; (8001d74 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001ce8:	2300      	movs	r3, #0
 8001cea:	68b8      	ldr	r0, [r7, #8]
 8001cec:	68f9      	ldr	r1, [r7, #12]
 8001cee:	f7fe fab7 	bl	8000260 <__aeabi_lmul>
 8001cf2:	0002      	movs	r2, r0
 8001cf4:	000b      	movs	r3, r1
 8001cf6:	0010      	movs	r0, r2
 8001cf8:	0019      	movs	r1, r3
 8001cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfc:	603b      	str	r3, [r7, #0]
 8001cfe:	2300      	movs	r3, #0
 8001d00:	607b      	str	r3, [r7, #4]
 8001d02:	683a      	ldr	r2, [r7, #0]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f7fe fa8b 	bl	8000220 <__aeabi_uldivmod>
 8001d0a:	0002      	movs	r2, r0
 8001d0c:	000b      	movs	r3, r1
 8001d0e:	0013      	movs	r3, r2
 8001d10:	637b      	str	r3, [r7, #52]	; 0x34
 8001d12:	e017      	b.n	8001d44 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d16:	0018      	movs	r0, r3
 8001d18:	2300      	movs	r3, #0
 8001d1a:	0019      	movs	r1, r3
 8001d1c:	4a16      	ldr	r2, [pc, #88]	; (8001d78 <HAL_RCC_GetSysClockFreq+0x140>)
 8001d1e:	2300      	movs	r3, #0
 8001d20:	f7fe fa9e 	bl	8000260 <__aeabi_lmul>
 8001d24:	0002      	movs	r2, r0
 8001d26:	000b      	movs	r3, r1
 8001d28:	0010      	movs	r0, r2
 8001d2a:	0019      	movs	r1, r3
 8001d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2e:	001c      	movs	r4, r3
 8001d30:	2300      	movs	r3, #0
 8001d32:	001d      	movs	r5, r3
 8001d34:	0022      	movs	r2, r4
 8001d36:	002b      	movs	r3, r5
 8001d38:	f7fe fa72 	bl	8000220 <__aeabi_uldivmod>
 8001d3c:	0002      	movs	r2, r0
 8001d3e:	000b      	movs	r3, r1
 8001d40:	0013      	movs	r3, r2
 8001d42:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001d44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d46:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d48:	e00d      	b.n	8001d66 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001d4a:	4b09      	ldr	r3, [pc, #36]	; (8001d70 <HAL_RCC_GetSysClockFreq+0x138>)
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	0b5b      	lsrs	r3, r3, #13
 8001d50:	2207      	movs	r2, #7
 8001d52:	4013      	ands	r3, r2
 8001d54:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001d56:	6a3b      	ldr	r3, [r7, #32]
 8001d58:	3301      	adds	r3, #1
 8001d5a:	2280      	movs	r2, #128	; 0x80
 8001d5c:	0212      	lsls	r2, r2, #8
 8001d5e:	409a      	lsls	r2, r3
 8001d60:	0013      	movs	r3, r2
 8001d62:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d64:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001d68:	0018      	movs	r0, r3
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	b00e      	add	sp, #56	; 0x38
 8001d6e:	bdb0      	pop	{r4, r5, r7, pc}
 8001d70:	40021000 	.word	0x40021000
 8001d74:	003d0900 	.word	0x003d0900
 8001d78:	00f42400 	.word	0x00f42400
 8001d7c:	007a1200 	.word	0x007a1200
 8001d80:	08003c14 	.word	0x08003c14

08001d84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d88:	4b02      	ldr	r3, [pc, #8]	; (8001d94 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
}
 8001d8c:	0018      	movs	r0, r3
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	46c0      	nop			; (mov r8, r8)
 8001d94:	20000000 	.word	0x20000000

08001d98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d9c:	f7ff fff2 	bl	8001d84 <HAL_RCC_GetHCLKFreq>
 8001da0:	0001      	movs	r1, r0
 8001da2:	4b06      	ldr	r3, [pc, #24]	; (8001dbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001da4:	68db      	ldr	r3, [r3, #12]
 8001da6:	0a1b      	lsrs	r3, r3, #8
 8001da8:	2207      	movs	r2, #7
 8001daa:	4013      	ands	r3, r2
 8001dac:	4a04      	ldr	r2, [pc, #16]	; (8001dc0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001dae:	5cd3      	ldrb	r3, [r2, r3]
 8001db0:	40d9      	lsrs	r1, r3
 8001db2:	000b      	movs	r3, r1
}
 8001db4:	0018      	movs	r0, r3
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	46c0      	nop			; (mov r8, r8)
 8001dbc:	40021000 	.word	0x40021000
 8001dc0:	08003c0c 	.word	0x08003c0c

08001dc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001dc8:	f7ff ffdc 	bl	8001d84 <HAL_RCC_GetHCLKFreq>
 8001dcc:	0001      	movs	r1, r0
 8001dce:	4b06      	ldr	r3, [pc, #24]	; (8001de8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	0adb      	lsrs	r3, r3, #11
 8001dd4:	2207      	movs	r2, #7
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	4a04      	ldr	r2, [pc, #16]	; (8001dec <HAL_RCC_GetPCLK2Freq+0x28>)
 8001dda:	5cd3      	ldrb	r3, [r2, r3]
 8001ddc:	40d9      	lsrs	r1, r3
 8001dde:	000b      	movs	r3, r1
}
 8001de0:	0018      	movs	r0, r3
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	46c0      	nop			; (mov r8, r8)
 8001de8:	40021000 	.word	0x40021000
 8001dec:	08003c0c 	.word	0x08003c0c

08001df0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b086      	sub	sp, #24
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001df8:	2017      	movs	r0, #23
 8001dfa:	183b      	adds	r3, r7, r0
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2220      	movs	r2, #32
 8001e06:	4013      	ands	r3, r2
 8001e08:	d100      	bne.n	8001e0c <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8001e0a:	e0c7      	b.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e0c:	4b84      	ldr	r3, [pc, #528]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001e0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e10:	2380      	movs	r3, #128	; 0x80
 8001e12:	055b      	lsls	r3, r3, #21
 8001e14:	4013      	ands	r3, r2
 8001e16:	d109      	bne.n	8001e2c <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e18:	4b81      	ldr	r3, [pc, #516]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001e1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e1c:	4b80      	ldr	r3, [pc, #512]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001e1e:	2180      	movs	r1, #128	; 0x80
 8001e20:	0549      	lsls	r1, r1, #21
 8001e22:	430a      	orrs	r2, r1
 8001e24:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001e26:	183b      	adds	r3, r7, r0
 8001e28:	2201      	movs	r2, #1
 8001e2a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e2c:	4b7d      	ldr	r3, [pc, #500]	; (8002024 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	2380      	movs	r3, #128	; 0x80
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	4013      	ands	r3, r2
 8001e36:	d11a      	bne.n	8001e6e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e38:	4b7a      	ldr	r3, [pc, #488]	; (8002024 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	4b79      	ldr	r3, [pc, #484]	; (8002024 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001e3e:	2180      	movs	r1, #128	; 0x80
 8001e40:	0049      	lsls	r1, r1, #1
 8001e42:	430a      	orrs	r2, r1
 8001e44:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e46:	f7fe febb 	bl	8000bc0 <HAL_GetTick>
 8001e4a:	0003      	movs	r3, r0
 8001e4c:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e4e:	e008      	b.n	8001e62 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e50:	f7fe feb6 	bl	8000bc0 <HAL_GetTick>
 8001e54:	0002      	movs	r2, r0
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2b64      	cmp	r3, #100	; 0x64
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e0d9      	b.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e62:	4b70      	ldr	r3, [pc, #448]	; (8002024 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	2380      	movs	r3, #128	; 0x80
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	d0f0      	beq.n	8001e50 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001e6e:	4b6c      	ldr	r3, [pc, #432]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	23c0      	movs	r3, #192	; 0xc0
 8001e74:	039b      	lsls	r3, r3, #14
 8001e76:	4013      	ands	r3, r2
 8001e78:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	685a      	ldr	r2, [r3, #4]
 8001e7e:	23c0      	movs	r3, #192	; 0xc0
 8001e80:	039b      	lsls	r3, r3, #14
 8001e82:	4013      	ands	r3, r2
 8001e84:	68fa      	ldr	r2, [r7, #12]
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d013      	beq.n	8001eb2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685a      	ldr	r2, [r3, #4]
 8001e8e:	23c0      	movs	r3, #192	; 0xc0
 8001e90:	029b      	lsls	r3, r3, #10
 8001e92:	401a      	ands	r2, r3
 8001e94:	23c0      	movs	r3, #192	; 0xc0
 8001e96:	029b      	lsls	r3, r3, #10
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d10a      	bne.n	8001eb2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001e9c:	4b60      	ldr	r3, [pc, #384]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	2380      	movs	r3, #128	; 0x80
 8001ea2:	029b      	lsls	r3, r3, #10
 8001ea4:	401a      	ands	r2, r3
 8001ea6:	2380      	movs	r3, #128	; 0x80
 8001ea8:	029b      	lsls	r3, r3, #10
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d101      	bne.n	8001eb2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e0b1      	b.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001eb2:	4b5b      	ldr	r3, [pc, #364]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001eb4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001eb6:	23c0      	movs	r3, #192	; 0xc0
 8001eb8:	029b      	lsls	r3, r3, #10
 8001eba:	4013      	ands	r3, r2
 8001ebc:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d03b      	beq.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685a      	ldr	r2, [r3, #4]
 8001ec8:	23c0      	movs	r3, #192	; 0xc0
 8001eca:	029b      	lsls	r3, r3, #10
 8001ecc:	4013      	ands	r3, r2
 8001ece:	68fa      	ldr	r2, [r7, #12]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d033      	beq.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2220      	movs	r2, #32
 8001eda:	4013      	ands	r3, r2
 8001edc:	d02e      	beq.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001ede:	4b50      	ldr	r3, [pc, #320]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001ee0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ee2:	4a51      	ldr	r2, [pc, #324]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ee8:	4b4d      	ldr	r3, [pc, #308]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001eea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001eec:	4b4c      	ldr	r3, [pc, #304]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001eee:	2180      	movs	r1, #128	; 0x80
 8001ef0:	0309      	lsls	r1, r1, #12
 8001ef2:	430a      	orrs	r2, r1
 8001ef4:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ef6:	4b4a      	ldr	r3, [pc, #296]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001ef8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001efa:	4b49      	ldr	r3, [pc, #292]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001efc:	494b      	ldr	r1, [pc, #300]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8001efe:	400a      	ands	r2, r1
 8001f00:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001f02:	4b47      	ldr	r3, [pc, #284]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001f04:	68fa      	ldr	r2, [r7, #12]
 8001f06:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001f08:	68fa      	ldr	r2, [r7, #12]
 8001f0a:	2380      	movs	r3, #128	; 0x80
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	4013      	ands	r3, r2
 8001f10:	d014      	beq.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f12:	f7fe fe55 	bl	8000bc0 <HAL_GetTick>
 8001f16:	0003      	movs	r3, r0
 8001f18:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f1a:	e009      	b.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f1c:	f7fe fe50 	bl	8000bc0 <HAL_GetTick>
 8001f20:	0002      	movs	r2, r0
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	4a42      	ldr	r2, [pc, #264]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d901      	bls.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e072      	b.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f30:	4b3b      	ldr	r3, [pc, #236]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001f32:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f34:	2380      	movs	r3, #128	; 0x80
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	4013      	ands	r3, r2
 8001f3a:	d0ef      	beq.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2220      	movs	r2, #32
 8001f42:	4013      	ands	r3, r2
 8001f44:	d01f      	beq.n	8001f86 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685a      	ldr	r2, [r3, #4]
 8001f4a:	23c0      	movs	r3, #192	; 0xc0
 8001f4c:	029b      	lsls	r3, r3, #10
 8001f4e:	401a      	ands	r2, r3
 8001f50:	23c0      	movs	r3, #192	; 0xc0
 8001f52:	029b      	lsls	r3, r3, #10
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d10c      	bne.n	8001f72 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8001f58:	4b31      	ldr	r3, [pc, #196]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a35      	ldr	r2, [pc, #212]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001f5e:	4013      	ands	r3, r2
 8001f60:	0019      	movs	r1, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685a      	ldr	r2, [r3, #4]
 8001f66:	23c0      	movs	r3, #192	; 0xc0
 8001f68:	039b      	lsls	r3, r3, #14
 8001f6a:	401a      	ands	r2, r3
 8001f6c:	4b2c      	ldr	r3, [pc, #176]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001f6e:	430a      	orrs	r2, r1
 8001f70:	601a      	str	r2, [r3, #0]
 8001f72:	4b2b      	ldr	r3, [pc, #172]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001f74:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685a      	ldr	r2, [r3, #4]
 8001f7a:	23c0      	movs	r3, #192	; 0xc0
 8001f7c:	029b      	lsls	r3, r3, #10
 8001f7e:	401a      	ands	r2, r3
 8001f80:	4b27      	ldr	r3, [pc, #156]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001f82:	430a      	orrs	r2, r1
 8001f84:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f86:	2317      	movs	r3, #23
 8001f88:	18fb      	adds	r3, r7, r3
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d105      	bne.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f90:	4b23      	ldr	r3, [pc, #140]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001f92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f94:	4b22      	ldr	r3, [pc, #136]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001f96:	4928      	ldr	r1, [pc, #160]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001f98:	400a      	ands	r2, r1
 8001f9a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2202      	movs	r2, #2
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	d009      	beq.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001fa6:	4b1e      	ldr	r3, [pc, #120]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001faa:	220c      	movs	r2, #12
 8001fac:	4393      	bics	r3, r2
 8001fae:	0019      	movs	r1, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	689a      	ldr	r2, [r3, #8]
 8001fb4:	4b1a      	ldr	r3, [pc, #104]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	2204      	movs	r2, #4
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	d009      	beq.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001fc4:	4b16      	ldr	r3, [pc, #88]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001fc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fc8:	4a1c      	ldr	r2, [pc, #112]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001fca:	4013      	ands	r3, r2
 8001fcc:	0019      	movs	r1, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	68da      	ldr	r2, [r3, #12]
 8001fd2:	4b13      	ldr	r3, [pc, #76]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001fd4:	430a      	orrs	r2, r1
 8001fd6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	2208      	movs	r2, #8
 8001fde:	4013      	ands	r3, r2
 8001fe0:	d009      	beq.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001fe2:	4b0f      	ldr	r3, [pc, #60]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fe6:	4a16      	ldr	r2, [pc, #88]	; (8002040 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001fe8:	4013      	ands	r3, r2
 8001fea:	0019      	movs	r1, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	691a      	ldr	r2, [r3, #16]
 8001ff0:	4b0b      	ldr	r3, [pc, #44]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001ff2:	430a      	orrs	r2, r1
 8001ff4:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	2280      	movs	r2, #128	; 0x80
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	d009      	beq.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002000:	4b07      	ldr	r3, [pc, #28]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002002:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002004:	4a0f      	ldr	r2, [pc, #60]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002006:	4013      	ands	r3, r2
 8002008:	0019      	movs	r1, r3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	695a      	ldr	r2, [r3, #20]
 800200e:	4b04      	ldr	r3, [pc, #16]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002010:	430a      	orrs	r2, r1
 8002012:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002014:	2300      	movs	r3, #0
}
 8002016:	0018      	movs	r0, r3
 8002018:	46bd      	mov	sp, r7
 800201a:	b006      	add	sp, #24
 800201c:	bd80      	pop	{r7, pc}
 800201e:	46c0      	nop			; (mov r8, r8)
 8002020:	40021000 	.word	0x40021000
 8002024:	40007000 	.word	0x40007000
 8002028:	fffcffff 	.word	0xfffcffff
 800202c:	fff7ffff 	.word	0xfff7ffff
 8002030:	00001388 	.word	0x00001388
 8002034:	ffcfffff 	.word	0xffcfffff
 8002038:	efffffff 	.word	0xefffffff
 800203c:	fffff3ff 	.word	0xfffff3ff
 8002040:	ffffcfff 	.word	0xffffcfff
 8002044:	fff3ffff 	.word	0xfff3ffff

08002048 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d101      	bne.n	800205a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e044      	b.n	80020e4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800205e:	2b00      	cmp	r3, #0
 8002060:	d107      	bne.n	8002072 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2278      	movs	r2, #120	; 0x78
 8002066:	2100      	movs	r1, #0
 8002068:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	0018      	movs	r0, r3
 800206e:	f7fe fc87 	bl	8000980 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2224      	movs	r2, #36	; 0x24
 8002076:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	2101      	movs	r1, #1
 8002084:	438a      	bics	r2, r1
 8002086:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	0018      	movs	r0, r3
 800208c:	f000 f830 	bl	80020f0 <UART_SetConfig>
 8002090:	0003      	movs	r3, r0
 8002092:	2b01      	cmp	r3, #1
 8002094:	d101      	bne.n	800209a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e024      	b.n	80020e4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d003      	beq.n	80020aa <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	0018      	movs	r0, r3
 80020a6:	f000 fa6d 	bl	8002584 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	685a      	ldr	r2, [r3, #4]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	490d      	ldr	r1, [pc, #52]	; (80020ec <HAL_UART_Init+0xa4>)
 80020b6:	400a      	ands	r2, r1
 80020b8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	689a      	ldr	r2, [r3, #8]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	212a      	movs	r1, #42	; 0x2a
 80020c6:	438a      	bics	r2, r1
 80020c8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2101      	movs	r1, #1
 80020d6:	430a      	orrs	r2, r1
 80020d8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	0018      	movs	r0, r3
 80020de:	f000 fb05 	bl	80026ec <UART_CheckIdleState>
 80020e2:	0003      	movs	r3, r0
}
 80020e4:	0018      	movs	r0, r3
 80020e6:	46bd      	mov	sp, r7
 80020e8:	b002      	add	sp, #8
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	ffffb7ff 	.word	0xffffb7ff

080020f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80020f0:	b5b0      	push	{r4, r5, r7, lr}
 80020f2:	b08e      	sub	sp, #56	; 0x38
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80020f8:	231a      	movs	r3, #26
 80020fa:	2218      	movs	r2, #24
 80020fc:	189b      	adds	r3, r3, r2
 80020fe:	19db      	adds	r3, r3, r7
 8002100:	2200      	movs	r2, #0
 8002102:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	689a      	ldr	r2, [r3, #8]
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	691b      	ldr	r3, [r3, #16]
 800210c:	431a      	orrs	r2, r3
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	695b      	ldr	r3, [r3, #20]
 8002112:	431a      	orrs	r2, r3
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	69db      	ldr	r3, [r3, #28]
 8002118:	4313      	orrs	r3, r2
 800211a:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4ab4      	ldr	r2, [pc, #720]	; (80023f4 <UART_SetConfig+0x304>)
 8002124:	4013      	ands	r3, r2
 8002126:	0019      	movs	r1, r3
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800212e:	430a      	orrs	r2, r1
 8002130:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	4aaf      	ldr	r2, [pc, #700]	; (80023f8 <UART_SetConfig+0x308>)
 800213a:	4013      	ands	r3, r2
 800213c:	0019      	movs	r1, r3
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	68da      	ldr	r2, [r3, #12]
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	430a      	orrs	r2, r1
 8002148:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	699b      	ldr	r3, [r3, #24]
 800214e:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4aa9      	ldr	r2, [pc, #676]	; (80023fc <UART_SetConfig+0x30c>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d004      	beq.n	8002164 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	6a1b      	ldr	r3, [r3, #32]
 800215e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002160:	4313      	orrs	r3, r2
 8002162:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	4aa5      	ldr	r2, [pc, #660]	; (8002400 <UART_SetConfig+0x310>)
 800216c:	4013      	ands	r3, r2
 800216e:	0019      	movs	r1, r3
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002176:	430a      	orrs	r2, r1
 8002178:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4aa1      	ldr	r2, [pc, #644]	; (8002404 <UART_SetConfig+0x314>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d131      	bne.n	80021e8 <UART_SetConfig+0xf8>
 8002184:	4ba0      	ldr	r3, [pc, #640]	; (8002408 <UART_SetConfig+0x318>)
 8002186:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002188:	220c      	movs	r2, #12
 800218a:	4013      	ands	r3, r2
 800218c:	2b0c      	cmp	r3, #12
 800218e:	d01d      	beq.n	80021cc <UART_SetConfig+0xdc>
 8002190:	d823      	bhi.n	80021da <UART_SetConfig+0xea>
 8002192:	2b08      	cmp	r3, #8
 8002194:	d00c      	beq.n	80021b0 <UART_SetConfig+0xc0>
 8002196:	d820      	bhi.n	80021da <UART_SetConfig+0xea>
 8002198:	2b00      	cmp	r3, #0
 800219a:	d002      	beq.n	80021a2 <UART_SetConfig+0xb2>
 800219c:	2b04      	cmp	r3, #4
 800219e:	d00e      	beq.n	80021be <UART_SetConfig+0xce>
 80021a0:	e01b      	b.n	80021da <UART_SetConfig+0xea>
 80021a2:	231b      	movs	r3, #27
 80021a4:	2218      	movs	r2, #24
 80021a6:	189b      	adds	r3, r3, r2
 80021a8:	19db      	adds	r3, r3, r7
 80021aa:	2200      	movs	r2, #0
 80021ac:	701a      	strb	r2, [r3, #0]
 80021ae:	e065      	b.n	800227c <UART_SetConfig+0x18c>
 80021b0:	231b      	movs	r3, #27
 80021b2:	2218      	movs	r2, #24
 80021b4:	189b      	adds	r3, r3, r2
 80021b6:	19db      	adds	r3, r3, r7
 80021b8:	2202      	movs	r2, #2
 80021ba:	701a      	strb	r2, [r3, #0]
 80021bc:	e05e      	b.n	800227c <UART_SetConfig+0x18c>
 80021be:	231b      	movs	r3, #27
 80021c0:	2218      	movs	r2, #24
 80021c2:	189b      	adds	r3, r3, r2
 80021c4:	19db      	adds	r3, r3, r7
 80021c6:	2204      	movs	r2, #4
 80021c8:	701a      	strb	r2, [r3, #0]
 80021ca:	e057      	b.n	800227c <UART_SetConfig+0x18c>
 80021cc:	231b      	movs	r3, #27
 80021ce:	2218      	movs	r2, #24
 80021d0:	189b      	adds	r3, r3, r2
 80021d2:	19db      	adds	r3, r3, r7
 80021d4:	2208      	movs	r2, #8
 80021d6:	701a      	strb	r2, [r3, #0]
 80021d8:	e050      	b.n	800227c <UART_SetConfig+0x18c>
 80021da:	231b      	movs	r3, #27
 80021dc:	2218      	movs	r2, #24
 80021de:	189b      	adds	r3, r3, r2
 80021e0:	19db      	adds	r3, r3, r7
 80021e2:	2210      	movs	r2, #16
 80021e4:	701a      	strb	r2, [r3, #0]
 80021e6:	e049      	b.n	800227c <UART_SetConfig+0x18c>
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a83      	ldr	r2, [pc, #524]	; (80023fc <UART_SetConfig+0x30c>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d13e      	bne.n	8002270 <UART_SetConfig+0x180>
 80021f2:	4b85      	ldr	r3, [pc, #532]	; (8002408 <UART_SetConfig+0x318>)
 80021f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80021f6:	23c0      	movs	r3, #192	; 0xc0
 80021f8:	011b      	lsls	r3, r3, #4
 80021fa:	4013      	ands	r3, r2
 80021fc:	22c0      	movs	r2, #192	; 0xc0
 80021fe:	0112      	lsls	r2, r2, #4
 8002200:	4293      	cmp	r3, r2
 8002202:	d027      	beq.n	8002254 <UART_SetConfig+0x164>
 8002204:	22c0      	movs	r2, #192	; 0xc0
 8002206:	0112      	lsls	r2, r2, #4
 8002208:	4293      	cmp	r3, r2
 800220a:	d82a      	bhi.n	8002262 <UART_SetConfig+0x172>
 800220c:	2280      	movs	r2, #128	; 0x80
 800220e:	0112      	lsls	r2, r2, #4
 8002210:	4293      	cmp	r3, r2
 8002212:	d011      	beq.n	8002238 <UART_SetConfig+0x148>
 8002214:	2280      	movs	r2, #128	; 0x80
 8002216:	0112      	lsls	r2, r2, #4
 8002218:	4293      	cmp	r3, r2
 800221a:	d822      	bhi.n	8002262 <UART_SetConfig+0x172>
 800221c:	2b00      	cmp	r3, #0
 800221e:	d004      	beq.n	800222a <UART_SetConfig+0x13a>
 8002220:	2280      	movs	r2, #128	; 0x80
 8002222:	00d2      	lsls	r2, r2, #3
 8002224:	4293      	cmp	r3, r2
 8002226:	d00e      	beq.n	8002246 <UART_SetConfig+0x156>
 8002228:	e01b      	b.n	8002262 <UART_SetConfig+0x172>
 800222a:	231b      	movs	r3, #27
 800222c:	2218      	movs	r2, #24
 800222e:	189b      	adds	r3, r3, r2
 8002230:	19db      	adds	r3, r3, r7
 8002232:	2200      	movs	r2, #0
 8002234:	701a      	strb	r2, [r3, #0]
 8002236:	e021      	b.n	800227c <UART_SetConfig+0x18c>
 8002238:	231b      	movs	r3, #27
 800223a:	2218      	movs	r2, #24
 800223c:	189b      	adds	r3, r3, r2
 800223e:	19db      	adds	r3, r3, r7
 8002240:	2202      	movs	r2, #2
 8002242:	701a      	strb	r2, [r3, #0]
 8002244:	e01a      	b.n	800227c <UART_SetConfig+0x18c>
 8002246:	231b      	movs	r3, #27
 8002248:	2218      	movs	r2, #24
 800224a:	189b      	adds	r3, r3, r2
 800224c:	19db      	adds	r3, r3, r7
 800224e:	2204      	movs	r2, #4
 8002250:	701a      	strb	r2, [r3, #0]
 8002252:	e013      	b.n	800227c <UART_SetConfig+0x18c>
 8002254:	231b      	movs	r3, #27
 8002256:	2218      	movs	r2, #24
 8002258:	189b      	adds	r3, r3, r2
 800225a:	19db      	adds	r3, r3, r7
 800225c:	2208      	movs	r2, #8
 800225e:	701a      	strb	r2, [r3, #0]
 8002260:	e00c      	b.n	800227c <UART_SetConfig+0x18c>
 8002262:	231b      	movs	r3, #27
 8002264:	2218      	movs	r2, #24
 8002266:	189b      	adds	r3, r3, r2
 8002268:	19db      	adds	r3, r3, r7
 800226a:	2210      	movs	r2, #16
 800226c:	701a      	strb	r2, [r3, #0]
 800226e:	e005      	b.n	800227c <UART_SetConfig+0x18c>
 8002270:	231b      	movs	r3, #27
 8002272:	2218      	movs	r2, #24
 8002274:	189b      	adds	r3, r3, r2
 8002276:	19db      	adds	r3, r3, r7
 8002278:	2210      	movs	r2, #16
 800227a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a5e      	ldr	r2, [pc, #376]	; (80023fc <UART_SetConfig+0x30c>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d000      	beq.n	8002288 <UART_SetConfig+0x198>
 8002286:	e084      	b.n	8002392 <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002288:	231b      	movs	r3, #27
 800228a:	2218      	movs	r2, #24
 800228c:	189b      	adds	r3, r3, r2
 800228e:	19db      	adds	r3, r3, r7
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	2b08      	cmp	r3, #8
 8002294:	d01d      	beq.n	80022d2 <UART_SetConfig+0x1e2>
 8002296:	dc20      	bgt.n	80022da <UART_SetConfig+0x1ea>
 8002298:	2b04      	cmp	r3, #4
 800229a:	d015      	beq.n	80022c8 <UART_SetConfig+0x1d8>
 800229c:	dc1d      	bgt.n	80022da <UART_SetConfig+0x1ea>
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d002      	beq.n	80022a8 <UART_SetConfig+0x1b8>
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d005      	beq.n	80022b2 <UART_SetConfig+0x1c2>
 80022a6:	e018      	b.n	80022da <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80022a8:	f7ff fd76 	bl	8001d98 <HAL_RCC_GetPCLK1Freq>
 80022ac:	0003      	movs	r3, r0
 80022ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80022b0:	e01c      	b.n	80022ec <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80022b2:	4b55      	ldr	r3, [pc, #340]	; (8002408 <UART_SetConfig+0x318>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	2210      	movs	r2, #16
 80022b8:	4013      	ands	r3, r2
 80022ba:	d002      	beq.n	80022c2 <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80022bc:	4b53      	ldr	r3, [pc, #332]	; (800240c <UART_SetConfig+0x31c>)
 80022be:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80022c0:	e014      	b.n	80022ec <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 80022c2:	4b53      	ldr	r3, [pc, #332]	; (8002410 <UART_SetConfig+0x320>)
 80022c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80022c6:	e011      	b.n	80022ec <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80022c8:	f7ff fcb6 	bl	8001c38 <HAL_RCC_GetSysClockFreq>
 80022cc:	0003      	movs	r3, r0
 80022ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80022d0:	e00c      	b.n	80022ec <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80022d2:	2380      	movs	r3, #128	; 0x80
 80022d4:	021b      	lsls	r3, r3, #8
 80022d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80022d8:	e008      	b.n	80022ec <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 80022da:	2300      	movs	r3, #0
 80022dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80022de:	231a      	movs	r3, #26
 80022e0:	2218      	movs	r2, #24
 80022e2:	189b      	adds	r3, r3, r2
 80022e4:	19db      	adds	r3, r3, r7
 80022e6:	2201      	movs	r2, #1
 80022e8:	701a      	strb	r2, [r3, #0]
        break;
 80022ea:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80022ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d100      	bne.n	80022f4 <UART_SetConfig+0x204>
 80022f2:	e12f      	b.n	8002554 <UART_SetConfig+0x464>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	685a      	ldr	r2, [r3, #4]
 80022f8:	0013      	movs	r3, r2
 80022fa:	005b      	lsls	r3, r3, #1
 80022fc:	189b      	adds	r3, r3, r2
 80022fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002300:	429a      	cmp	r2, r3
 8002302:	d305      	bcc.n	8002310 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800230a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800230c:	429a      	cmp	r2, r3
 800230e:	d906      	bls.n	800231e <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 8002310:	231a      	movs	r3, #26
 8002312:	2218      	movs	r2, #24
 8002314:	189b      	adds	r3, r3, r2
 8002316:	19db      	adds	r3, r3, r7
 8002318:	2201      	movs	r2, #1
 800231a:	701a      	strb	r2, [r3, #0]
 800231c:	e11a      	b.n	8002554 <UART_SetConfig+0x464>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800231e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002320:	613b      	str	r3, [r7, #16]
 8002322:	2300      	movs	r3, #0
 8002324:	617b      	str	r3, [r7, #20]
 8002326:	6939      	ldr	r1, [r7, #16]
 8002328:	697a      	ldr	r2, [r7, #20]
 800232a:	000b      	movs	r3, r1
 800232c:	0e1b      	lsrs	r3, r3, #24
 800232e:	0010      	movs	r0, r2
 8002330:	0205      	lsls	r5, r0, #8
 8002332:	431d      	orrs	r5, r3
 8002334:	000b      	movs	r3, r1
 8002336:	021c      	lsls	r4, r3, #8
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	085b      	lsrs	r3, r3, #1
 800233e:	60bb      	str	r3, [r7, #8]
 8002340:	2300      	movs	r3, #0
 8002342:	60fb      	str	r3, [r7, #12]
 8002344:	68b8      	ldr	r0, [r7, #8]
 8002346:	68f9      	ldr	r1, [r7, #12]
 8002348:	1900      	adds	r0, r0, r4
 800234a:	4169      	adcs	r1, r5
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	603b      	str	r3, [r7, #0]
 8002352:	2300      	movs	r3, #0
 8002354:	607b      	str	r3, [r7, #4]
 8002356:	683a      	ldr	r2, [r7, #0]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f7fd ff61 	bl	8000220 <__aeabi_uldivmod>
 800235e:	0002      	movs	r2, r0
 8002360:	000b      	movs	r3, r1
 8002362:	0013      	movs	r3, r2
 8002364:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002366:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002368:	23c0      	movs	r3, #192	; 0xc0
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	429a      	cmp	r2, r3
 800236e:	d309      	bcc.n	8002384 <UART_SetConfig+0x294>
 8002370:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002372:	2380      	movs	r3, #128	; 0x80
 8002374:	035b      	lsls	r3, r3, #13
 8002376:	429a      	cmp	r2, r3
 8002378:	d204      	bcs.n	8002384 <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002380:	60da      	str	r2, [r3, #12]
 8002382:	e0e7      	b.n	8002554 <UART_SetConfig+0x464>
        }
        else
        {
          ret = HAL_ERROR;
 8002384:	231a      	movs	r3, #26
 8002386:	2218      	movs	r2, #24
 8002388:	189b      	adds	r3, r3, r2
 800238a:	19db      	adds	r3, r3, r7
 800238c:	2201      	movs	r2, #1
 800238e:	701a      	strb	r2, [r3, #0]
 8002390:	e0e0      	b.n	8002554 <UART_SetConfig+0x464>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	69da      	ldr	r2, [r3, #28]
 8002396:	2380      	movs	r3, #128	; 0x80
 8002398:	021b      	lsls	r3, r3, #8
 800239a:	429a      	cmp	r2, r3
 800239c:	d000      	beq.n	80023a0 <UART_SetConfig+0x2b0>
 800239e:	e082      	b.n	80024a6 <UART_SetConfig+0x3b6>
  {
    switch (clocksource)
 80023a0:	231b      	movs	r3, #27
 80023a2:	2218      	movs	r2, #24
 80023a4:	189b      	adds	r3, r3, r2
 80023a6:	19db      	adds	r3, r3, r7
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	2b08      	cmp	r3, #8
 80023ac:	d834      	bhi.n	8002418 <UART_SetConfig+0x328>
 80023ae:	009a      	lsls	r2, r3, #2
 80023b0:	4b18      	ldr	r3, [pc, #96]	; (8002414 <UART_SetConfig+0x324>)
 80023b2:	18d3      	adds	r3, r2, r3
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80023b8:	f7ff fcee 	bl	8001d98 <HAL_RCC_GetPCLK1Freq>
 80023bc:	0003      	movs	r3, r0
 80023be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80023c0:	e033      	b.n	800242a <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80023c2:	f7ff fcff 	bl	8001dc4 <HAL_RCC_GetPCLK2Freq>
 80023c6:	0003      	movs	r3, r0
 80023c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80023ca:	e02e      	b.n	800242a <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80023cc:	4b0e      	ldr	r3, [pc, #56]	; (8002408 <UART_SetConfig+0x318>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2210      	movs	r2, #16
 80023d2:	4013      	ands	r3, r2
 80023d4:	d002      	beq.n	80023dc <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80023d6:	4b0d      	ldr	r3, [pc, #52]	; (800240c <UART_SetConfig+0x31c>)
 80023d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80023da:	e026      	b.n	800242a <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 80023dc:	4b0c      	ldr	r3, [pc, #48]	; (8002410 <UART_SetConfig+0x320>)
 80023de:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80023e0:	e023      	b.n	800242a <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80023e2:	f7ff fc29 	bl	8001c38 <HAL_RCC_GetSysClockFreq>
 80023e6:	0003      	movs	r3, r0
 80023e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80023ea:	e01e      	b.n	800242a <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80023ec:	2380      	movs	r3, #128	; 0x80
 80023ee:	021b      	lsls	r3, r3, #8
 80023f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80023f2:	e01a      	b.n	800242a <UART_SetConfig+0x33a>
 80023f4:	efff69f3 	.word	0xefff69f3
 80023f8:	ffffcfff 	.word	0xffffcfff
 80023fc:	40004800 	.word	0x40004800
 8002400:	fffff4ff 	.word	0xfffff4ff
 8002404:	40004400 	.word	0x40004400
 8002408:	40021000 	.word	0x40021000
 800240c:	003d0900 	.word	0x003d0900
 8002410:	00f42400 	.word	0x00f42400
 8002414:	08003c20 	.word	0x08003c20
      default:
        pclk = 0U;
 8002418:	2300      	movs	r3, #0
 800241a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800241c:	231a      	movs	r3, #26
 800241e:	2218      	movs	r2, #24
 8002420:	189b      	adds	r3, r3, r2
 8002422:	19db      	adds	r3, r3, r7
 8002424:	2201      	movs	r2, #1
 8002426:	701a      	strb	r2, [r3, #0]
        break;
 8002428:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800242a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800242c:	2b00      	cmp	r3, #0
 800242e:	d100      	bne.n	8002432 <UART_SetConfig+0x342>
 8002430:	e090      	b.n	8002554 <UART_SetConfig+0x464>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002434:	005a      	lsls	r2, r3, #1
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	085b      	lsrs	r3, r3, #1
 800243c:	18d2      	adds	r2, r2, r3
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	0019      	movs	r1, r3
 8002444:	0010      	movs	r0, r2
 8002446:	f7fd fe5f 	bl	8000108 <__udivsi3>
 800244a:	0003      	movs	r3, r0
 800244c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800244e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002450:	2b0f      	cmp	r3, #15
 8002452:	d921      	bls.n	8002498 <UART_SetConfig+0x3a8>
 8002454:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002456:	2380      	movs	r3, #128	; 0x80
 8002458:	025b      	lsls	r3, r3, #9
 800245a:	429a      	cmp	r2, r3
 800245c:	d21c      	bcs.n	8002498 <UART_SetConfig+0x3a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800245e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002460:	b29a      	uxth	r2, r3
 8002462:	200e      	movs	r0, #14
 8002464:	2418      	movs	r4, #24
 8002466:	1903      	adds	r3, r0, r4
 8002468:	19db      	adds	r3, r3, r7
 800246a:	210f      	movs	r1, #15
 800246c:	438a      	bics	r2, r1
 800246e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002472:	085b      	lsrs	r3, r3, #1
 8002474:	b29b      	uxth	r3, r3
 8002476:	2207      	movs	r2, #7
 8002478:	4013      	ands	r3, r2
 800247a:	b299      	uxth	r1, r3
 800247c:	1903      	adds	r3, r0, r4
 800247e:	19db      	adds	r3, r3, r7
 8002480:	1902      	adds	r2, r0, r4
 8002482:	19d2      	adds	r2, r2, r7
 8002484:	8812      	ldrh	r2, [r2, #0]
 8002486:	430a      	orrs	r2, r1
 8002488:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	1902      	adds	r2, r0, r4
 8002490:	19d2      	adds	r2, r2, r7
 8002492:	8812      	ldrh	r2, [r2, #0]
 8002494:	60da      	str	r2, [r3, #12]
 8002496:	e05d      	b.n	8002554 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8002498:	231a      	movs	r3, #26
 800249a:	2218      	movs	r2, #24
 800249c:	189b      	adds	r3, r3, r2
 800249e:	19db      	adds	r3, r3, r7
 80024a0:	2201      	movs	r2, #1
 80024a2:	701a      	strb	r2, [r3, #0]
 80024a4:	e056      	b.n	8002554 <UART_SetConfig+0x464>
      }
    }
  }
  else
  {
    switch (clocksource)
 80024a6:	231b      	movs	r3, #27
 80024a8:	2218      	movs	r2, #24
 80024aa:	189b      	adds	r3, r3, r2
 80024ac:	19db      	adds	r3, r3, r7
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	2b08      	cmp	r3, #8
 80024b2:	d822      	bhi.n	80024fa <UART_SetConfig+0x40a>
 80024b4:	009a      	lsls	r2, r3, #2
 80024b6:	4b2f      	ldr	r3, [pc, #188]	; (8002574 <UART_SetConfig+0x484>)
 80024b8:	18d3      	adds	r3, r2, r3
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80024be:	f7ff fc6b 	bl	8001d98 <HAL_RCC_GetPCLK1Freq>
 80024c2:	0003      	movs	r3, r0
 80024c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80024c6:	e021      	b.n	800250c <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80024c8:	f7ff fc7c 	bl	8001dc4 <HAL_RCC_GetPCLK2Freq>
 80024cc:	0003      	movs	r3, r0
 80024ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80024d0:	e01c      	b.n	800250c <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80024d2:	4b29      	ldr	r3, [pc, #164]	; (8002578 <UART_SetConfig+0x488>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2210      	movs	r2, #16
 80024d8:	4013      	ands	r3, r2
 80024da:	d002      	beq.n	80024e2 <UART_SetConfig+0x3f2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80024dc:	4b27      	ldr	r3, [pc, #156]	; (800257c <UART_SetConfig+0x48c>)
 80024de:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80024e0:	e014      	b.n	800250c <UART_SetConfig+0x41c>
          pclk = (uint32_t) HSI_VALUE;
 80024e2:	4b27      	ldr	r3, [pc, #156]	; (8002580 <UART_SetConfig+0x490>)
 80024e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80024e6:	e011      	b.n	800250c <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80024e8:	f7ff fba6 	bl	8001c38 <HAL_RCC_GetSysClockFreq>
 80024ec:	0003      	movs	r3, r0
 80024ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80024f0:	e00c      	b.n	800250c <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80024f2:	2380      	movs	r3, #128	; 0x80
 80024f4:	021b      	lsls	r3, r3, #8
 80024f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80024f8:	e008      	b.n	800250c <UART_SetConfig+0x41c>
      default:
        pclk = 0U;
 80024fa:	2300      	movs	r3, #0
 80024fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80024fe:	231a      	movs	r3, #26
 8002500:	2218      	movs	r2, #24
 8002502:	189b      	adds	r3, r3, r2
 8002504:	19db      	adds	r3, r3, r7
 8002506:	2201      	movs	r2, #1
 8002508:	701a      	strb	r2, [r3, #0]
        break;
 800250a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800250c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800250e:	2b00      	cmp	r3, #0
 8002510:	d020      	beq.n	8002554 <UART_SetConfig+0x464>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	085a      	lsrs	r2, r3, #1
 8002518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800251a:	18d2      	adds	r2, r2, r3
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	0019      	movs	r1, r3
 8002522:	0010      	movs	r0, r2
 8002524:	f7fd fdf0 	bl	8000108 <__udivsi3>
 8002528:	0003      	movs	r3, r0
 800252a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800252c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800252e:	2b0f      	cmp	r3, #15
 8002530:	d90a      	bls.n	8002548 <UART_SetConfig+0x458>
 8002532:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002534:	2380      	movs	r3, #128	; 0x80
 8002536:	025b      	lsls	r3, r3, #9
 8002538:	429a      	cmp	r2, r3
 800253a:	d205      	bcs.n	8002548 <UART_SetConfig+0x458>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800253c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800253e:	b29a      	uxth	r2, r3
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	60da      	str	r2, [r3, #12]
 8002546:	e005      	b.n	8002554 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8002548:	231a      	movs	r3, #26
 800254a:	2218      	movs	r2, #24
 800254c:	189b      	adds	r3, r3, r2
 800254e:	19db      	adds	r3, r3, r7
 8002550:	2201      	movs	r2, #1
 8002552:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	2200      	movs	r2, #0
 8002558:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	2200      	movs	r2, #0
 800255e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002560:	231a      	movs	r3, #26
 8002562:	2218      	movs	r2, #24
 8002564:	189b      	adds	r3, r3, r2
 8002566:	19db      	adds	r3, r3, r7
 8002568:	781b      	ldrb	r3, [r3, #0]
}
 800256a:	0018      	movs	r0, r3
 800256c:	46bd      	mov	sp, r7
 800256e:	b00e      	add	sp, #56	; 0x38
 8002570:	bdb0      	pop	{r4, r5, r7, pc}
 8002572:	46c0      	nop			; (mov r8, r8)
 8002574:	08003c44 	.word	0x08003c44
 8002578:	40021000 	.word	0x40021000
 800257c:	003d0900 	.word	0x003d0900
 8002580:	00f42400 	.word	0x00f42400

08002584 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002590:	2201      	movs	r2, #1
 8002592:	4013      	ands	r3, r2
 8002594:	d00b      	beq.n	80025ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	4a4a      	ldr	r2, [pc, #296]	; (80026c8 <UART_AdvFeatureConfig+0x144>)
 800259e:	4013      	ands	r3, r2
 80025a0:	0019      	movs	r1, r3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	430a      	orrs	r2, r1
 80025ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b2:	2202      	movs	r2, #2
 80025b4:	4013      	ands	r3, r2
 80025b6:	d00b      	beq.n	80025d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	4a43      	ldr	r2, [pc, #268]	; (80026cc <UART_AdvFeatureConfig+0x148>)
 80025c0:	4013      	ands	r3, r2
 80025c2:	0019      	movs	r1, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	430a      	orrs	r2, r1
 80025ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d4:	2204      	movs	r2, #4
 80025d6:	4013      	ands	r3, r2
 80025d8:	d00b      	beq.n	80025f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	4a3b      	ldr	r2, [pc, #236]	; (80026d0 <UART_AdvFeatureConfig+0x14c>)
 80025e2:	4013      	ands	r3, r2
 80025e4:	0019      	movs	r1, r3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	430a      	orrs	r2, r1
 80025f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f6:	2208      	movs	r2, #8
 80025f8:	4013      	ands	r3, r2
 80025fa:	d00b      	beq.n	8002614 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	4a34      	ldr	r2, [pc, #208]	; (80026d4 <UART_AdvFeatureConfig+0x150>)
 8002604:	4013      	ands	r3, r2
 8002606:	0019      	movs	r1, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	430a      	orrs	r2, r1
 8002612:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002618:	2210      	movs	r2, #16
 800261a:	4013      	ands	r3, r2
 800261c:	d00b      	beq.n	8002636 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	4a2c      	ldr	r2, [pc, #176]	; (80026d8 <UART_AdvFeatureConfig+0x154>)
 8002626:	4013      	ands	r3, r2
 8002628:	0019      	movs	r1, r3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	430a      	orrs	r2, r1
 8002634:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263a:	2220      	movs	r2, #32
 800263c:	4013      	ands	r3, r2
 800263e:	d00b      	beq.n	8002658 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	4a25      	ldr	r2, [pc, #148]	; (80026dc <UART_AdvFeatureConfig+0x158>)
 8002648:	4013      	ands	r3, r2
 800264a:	0019      	movs	r1, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	430a      	orrs	r2, r1
 8002656:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265c:	2240      	movs	r2, #64	; 0x40
 800265e:	4013      	ands	r3, r2
 8002660:	d01d      	beq.n	800269e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	4a1d      	ldr	r2, [pc, #116]	; (80026e0 <UART_AdvFeatureConfig+0x15c>)
 800266a:	4013      	ands	r3, r2
 800266c:	0019      	movs	r1, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	430a      	orrs	r2, r1
 8002678:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800267e:	2380      	movs	r3, #128	; 0x80
 8002680:	035b      	lsls	r3, r3, #13
 8002682:	429a      	cmp	r2, r3
 8002684:	d10b      	bne.n	800269e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	4a15      	ldr	r2, [pc, #84]	; (80026e4 <UART_AdvFeatureConfig+0x160>)
 800268e:	4013      	ands	r3, r2
 8002690:	0019      	movs	r1, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	430a      	orrs	r2, r1
 800269c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a2:	2280      	movs	r2, #128	; 0x80
 80026a4:	4013      	ands	r3, r2
 80026a6:	d00b      	beq.n	80026c0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	4a0e      	ldr	r2, [pc, #56]	; (80026e8 <UART_AdvFeatureConfig+0x164>)
 80026b0:	4013      	ands	r3, r2
 80026b2:	0019      	movs	r1, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	430a      	orrs	r2, r1
 80026be:	605a      	str	r2, [r3, #4]
  }
}
 80026c0:	46c0      	nop			; (mov r8, r8)
 80026c2:	46bd      	mov	sp, r7
 80026c4:	b002      	add	sp, #8
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	fffdffff 	.word	0xfffdffff
 80026cc:	fffeffff 	.word	0xfffeffff
 80026d0:	fffbffff 	.word	0xfffbffff
 80026d4:	ffff7fff 	.word	0xffff7fff
 80026d8:	ffffefff 	.word	0xffffefff
 80026dc:	ffffdfff 	.word	0xffffdfff
 80026e0:	ffefffff 	.word	0xffefffff
 80026e4:	ff9fffff 	.word	0xff9fffff
 80026e8:	fff7ffff 	.word	0xfff7ffff

080026ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b092      	sub	sp, #72	; 0x48
 80026f0:	af02      	add	r7, sp, #8
 80026f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2284      	movs	r2, #132	; 0x84
 80026f8:	2100      	movs	r1, #0
 80026fa:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80026fc:	f7fe fa60 	bl	8000bc0 <HAL_GetTick>
 8002700:	0003      	movs	r3, r0
 8002702:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2208      	movs	r2, #8
 800270c:	4013      	ands	r3, r2
 800270e:	2b08      	cmp	r3, #8
 8002710:	d12c      	bne.n	800276c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002712:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002714:	2280      	movs	r2, #128	; 0x80
 8002716:	0391      	lsls	r1, r2, #14
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	4a46      	ldr	r2, [pc, #280]	; (8002834 <UART_CheckIdleState+0x148>)
 800271c:	9200      	str	r2, [sp, #0]
 800271e:	2200      	movs	r2, #0
 8002720:	f000 f88c 	bl	800283c <UART_WaitOnFlagUntilTimeout>
 8002724:	1e03      	subs	r3, r0, #0
 8002726:	d021      	beq.n	800276c <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002728:	f3ef 8310 	mrs	r3, PRIMASK
 800272c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800272e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002730:	63bb      	str	r3, [r7, #56]	; 0x38
 8002732:	2301      	movs	r3, #1
 8002734:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002738:	f383 8810 	msr	PRIMASK, r3
}
 800273c:	46c0      	nop			; (mov r8, r8)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2180      	movs	r1, #128	; 0x80
 800274a:	438a      	bics	r2, r1
 800274c:	601a      	str	r2, [r3, #0]
 800274e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002750:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002754:	f383 8810 	msr	PRIMASK, r3
}
 8002758:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2220      	movs	r2, #32
 800275e:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2278      	movs	r2, #120	; 0x78
 8002764:	2100      	movs	r1, #0
 8002766:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002768:	2303      	movs	r3, #3
 800276a:	e05f      	b.n	800282c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2204      	movs	r2, #4
 8002774:	4013      	ands	r3, r2
 8002776:	2b04      	cmp	r3, #4
 8002778:	d146      	bne.n	8002808 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800277a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800277c:	2280      	movs	r2, #128	; 0x80
 800277e:	03d1      	lsls	r1, r2, #15
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	4a2c      	ldr	r2, [pc, #176]	; (8002834 <UART_CheckIdleState+0x148>)
 8002784:	9200      	str	r2, [sp, #0]
 8002786:	2200      	movs	r2, #0
 8002788:	f000 f858 	bl	800283c <UART_WaitOnFlagUntilTimeout>
 800278c:	1e03      	subs	r3, r0, #0
 800278e:	d03b      	beq.n	8002808 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002790:	f3ef 8310 	mrs	r3, PRIMASK
 8002794:	60fb      	str	r3, [r7, #12]
  return(result);
 8002796:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002798:	637b      	str	r3, [r7, #52]	; 0x34
 800279a:	2301      	movs	r3, #1
 800279c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	f383 8810 	msr	PRIMASK, r3
}
 80027a4:	46c0      	nop			; (mov r8, r8)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4921      	ldr	r1, [pc, #132]	; (8002838 <UART_CheckIdleState+0x14c>)
 80027b2:	400a      	ands	r2, r1
 80027b4:	601a      	str	r2, [r3, #0]
 80027b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027b8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	f383 8810 	msr	PRIMASK, r3
}
 80027c0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027c2:	f3ef 8310 	mrs	r3, PRIMASK
 80027c6:	61bb      	str	r3, [r7, #24]
  return(result);
 80027c8:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027ca:	633b      	str	r3, [r7, #48]	; 0x30
 80027cc:	2301      	movs	r3, #1
 80027ce:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	f383 8810 	msr	PRIMASK, r3
}
 80027d6:	46c0      	nop			; (mov r8, r8)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	689a      	ldr	r2, [r3, #8]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	2101      	movs	r1, #1
 80027e4:	438a      	bics	r2, r1
 80027e6:	609a      	str	r2, [r3, #8]
 80027e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ea:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027ec:	6a3b      	ldr	r3, [r7, #32]
 80027ee:	f383 8810 	msr	PRIMASK, r3
}
 80027f2:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2280      	movs	r2, #128	; 0x80
 80027f8:	2120      	movs	r1, #32
 80027fa:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2278      	movs	r2, #120	; 0x78
 8002800:	2100      	movs	r1, #0
 8002802:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	e011      	b.n	800282c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2220      	movs	r2, #32
 800280c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2280      	movs	r2, #128	; 0x80
 8002812:	2120      	movs	r1, #32
 8002814:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2200      	movs	r2, #0
 800281a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2200      	movs	r2, #0
 8002820:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2278      	movs	r2, #120	; 0x78
 8002826:	2100      	movs	r1, #0
 8002828:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800282a:	2300      	movs	r3, #0
}
 800282c:	0018      	movs	r0, r3
 800282e:	46bd      	mov	sp, r7
 8002830:	b010      	add	sp, #64	; 0x40
 8002832:	bd80      	pop	{r7, pc}
 8002834:	01ffffff 	.word	0x01ffffff
 8002838:	fffffedf 	.word	0xfffffedf

0800283c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	60b9      	str	r1, [r7, #8]
 8002846:	603b      	str	r3, [r7, #0]
 8002848:	1dfb      	adds	r3, r7, #7
 800284a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800284c:	e04b      	b.n	80028e6 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800284e:	69bb      	ldr	r3, [r7, #24]
 8002850:	3301      	adds	r3, #1
 8002852:	d048      	beq.n	80028e6 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002854:	f7fe f9b4 	bl	8000bc0 <HAL_GetTick>
 8002858:	0002      	movs	r2, r0
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	69ba      	ldr	r2, [r7, #24]
 8002860:	429a      	cmp	r2, r3
 8002862:	d302      	bcc.n	800286a <UART_WaitOnFlagUntilTimeout+0x2e>
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d101      	bne.n	800286e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e04b      	b.n	8002906 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2204      	movs	r2, #4
 8002876:	4013      	ands	r3, r2
 8002878:	d035      	beq.n	80028e6 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	69db      	ldr	r3, [r3, #28]
 8002880:	2208      	movs	r2, #8
 8002882:	4013      	ands	r3, r2
 8002884:	2b08      	cmp	r3, #8
 8002886:	d111      	bne.n	80028ac <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2208      	movs	r2, #8
 800288e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	0018      	movs	r0, r3
 8002894:	f000 f83c 	bl	8002910 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2284      	movs	r2, #132	; 0x84
 800289c:	2108      	movs	r1, #8
 800289e:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2278      	movs	r2, #120	; 0x78
 80028a4:	2100      	movs	r1, #0
 80028a6:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e02c      	b.n	8002906 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	69da      	ldr	r2, [r3, #28]
 80028b2:	2380      	movs	r3, #128	; 0x80
 80028b4:	011b      	lsls	r3, r3, #4
 80028b6:	401a      	ands	r2, r3
 80028b8:	2380      	movs	r3, #128	; 0x80
 80028ba:	011b      	lsls	r3, r3, #4
 80028bc:	429a      	cmp	r2, r3
 80028be:	d112      	bne.n	80028e6 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2280      	movs	r2, #128	; 0x80
 80028c6:	0112      	lsls	r2, r2, #4
 80028c8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	0018      	movs	r0, r3
 80028ce:	f000 f81f 	bl	8002910 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2284      	movs	r2, #132	; 0x84
 80028d6:	2120      	movs	r1, #32
 80028d8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2278      	movs	r2, #120	; 0x78
 80028de:	2100      	movs	r1, #0
 80028e0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e00f      	b.n	8002906 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	69db      	ldr	r3, [r3, #28]
 80028ec:	68ba      	ldr	r2, [r7, #8]
 80028ee:	4013      	ands	r3, r2
 80028f0:	68ba      	ldr	r2, [r7, #8]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	425a      	negs	r2, r3
 80028f6:	4153      	adcs	r3, r2
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	001a      	movs	r2, r3
 80028fc:	1dfb      	adds	r3, r7, #7
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	429a      	cmp	r2, r3
 8002902:	d0a4      	beq.n	800284e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002904:	2300      	movs	r3, #0
}
 8002906:	0018      	movs	r0, r3
 8002908:	46bd      	mov	sp, r7
 800290a:	b004      	add	sp, #16
 800290c:	bd80      	pop	{r7, pc}
	...

08002910 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b08e      	sub	sp, #56	; 0x38
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002918:	f3ef 8310 	mrs	r3, PRIMASK
 800291c:	617b      	str	r3, [r7, #20]
  return(result);
 800291e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002920:	637b      	str	r3, [r7, #52]	; 0x34
 8002922:	2301      	movs	r3, #1
 8002924:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	f383 8810 	msr	PRIMASK, r3
}
 800292c:	46c0      	nop			; (mov r8, r8)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4926      	ldr	r1, [pc, #152]	; (80029d4 <UART_EndRxTransfer+0xc4>)
 800293a:	400a      	ands	r2, r1
 800293c:	601a      	str	r2, [r3, #0]
 800293e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002940:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	f383 8810 	msr	PRIMASK, r3
}
 8002948:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800294a:	f3ef 8310 	mrs	r3, PRIMASK
 800294e:	623b      	str	r3, [r7, #32]
  return(result);
 8002950:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002952:	633b      	str	r3, [r7, #48]	; 0x30
 8002954:	2301      	movs	r3, #1
 8002956:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295a:	f383 8810 	msr	PRIMASK, r3
}
 800295e:	46c0      	nop			; (mov r8, r8)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	689a      	ldr	r2, [r3, #8]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2101      	movs	r1, #1
 800296c:	438a      	bics	r2, r1
 800296e:	609a      	str	r2, [r3, #8]
 8002970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002972:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002976:	f383 8810 	msr	PRIMASK, r3
}
 800297a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002980:	2b01      	cmp	r3, #1
 8002982:	d118      	bne.n	80029b6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002984:	f3ef 8310 	mrs	r3, PRIMASK
 8002988:	60bb      	str	r3, [r7, #8]
  return(result);
 800298a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800298c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800298e:	2301      	movs	r3, #1
 8002990:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	f383 8810 	msr	PRIMASK, r3
}
 8002998:	46c0      	nop			; (mov r8, r8)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2110      	movs	r1, #16
 80029a6:	438a      	bics	r2, r1
 80029a8:	601a      	str	r2, [r3, #0]
 80029aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	f383 8810 	msr	PRIMASK, r3
}
 80029b4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2280      	movs	r2, #128	; 0x80
 80029ba:	2120      	movs	r1, #32
 80029bc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	669a      	str	r2, [r3, #104]	; 0x68
}
 80029ca:	46c0      	nop			; (mov r8, r8)
 80029cc:	46bd      	mov	sp, r7
 80029ce:	b00e      	add	sp, #56	; 0x38
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	46c0      	nop			; (mov r8, r8)
 80029d4:	fffffedf 	.word	0xfffffedf

080029d8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	0002      	movs	r2, r0
 80029e0:	1dbb      	adds	r3, r7, #6
 80029e2:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80029e4:	2300      	movs	r3, #0
 80029e6:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80029e8:	1dbb      	adds	r3, r7, #6
 80029ea:	2200      	movs	r2, #0
 80029ec:	5e9b      	ldrsh	r3, [r3, r2]
 80029ee:	2b84      	cmp	r3, #132	; 0x84
 80029f0:	d006      	beq.n	8002a00 <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 80029f2:	1dbb      	adds	r3, r7, #6
 80029f4:	2200      	movs	r2, #0
 80029f6:	5e9a      	ldrsh	r2, [r3, r2]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	18d3      	adds	r3, r2, r3
 80029fc:	3303      	adds	r3, #3
 80029fe:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002a00:	68fb      	ldr	r3, [r7, #12]
}
 8002a02:	0018      	movs	r0, r3
 8002a04:	46bd      	mov	sp, r7
 8002a06:	b004      	add	sp, #16
 8002a08:	bd80      	pop	{r7, pc}

08002a0a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002a0a:	b580      	push	{r7, lr}
 8002a0c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002a0e:	f000 faab 	bl	8002f68 <vTaskStartScheduler>
  
  return osOK;
 8002a12:	2300      	movs	r3, #0
}
 8002a14:	0018      	movs	r0, r3
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}

08002a1a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002a1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a1c:	b089      	sub	sp, #36	; 0x24
 8002a1e:	af04      	add	r7, sp, #16
 8002a20:	6078      	str	r0, [r7, #4]
 8002a22:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	695b      	ldr	r3, [r3, #20]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d020      	beq.n	8002a6e <osThreadCreate+0x54>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	699b      	ldr	r3, [r3, #24]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d01c      	beq.n	8002a6e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	685c      	ldr	r4, [r3, #4]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681d      	ldr	r5, [r3, #0]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	691e      	ldr	r6, [r3, #16]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2208      	movs	r2, #8
 8002a44:	5e9b      	ldrsh	r3, [r3, r2]
 8002a46:	0018      	movs	r0, r3
 8002a48:	f7ff ffc6 	bl	80029d8 <makeFreeRtosPriority>
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	695a      	ldr	r2, [r3, #20]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	699b      	ldr	r3, [r3, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002a54:	6839      	ldr	r1, [r7, #0]
 8002a56:	9302      	str	r3, [sp, #8]
 8002a58:	9201      	str	r2, [sp, #4]
 8002a5a:	9000      	str	r0, [sp, #0]
 8002a5c:	000b      	movs	r3, r1
 8002a5e:	0032      	movs	r2, r6
 8002a60:	0029      	movs	r1, r5
 8002a62:	0020      	movs	r0, r4
 8002a64:	f000 f8e3 	bl	8002c2e <xTaskCreateStatic>
 8002a68:	0003      	movs	r3, r0
 8002a6a:	60fb      	str	r3, [r7, #12]
 8002a6c:	e01d      	b.n	8002aaa <osThreadCreate+0x90>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685c      	ldr	r4, [r3, #4]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002a7a:	b29e      	uxth	r6, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2208      	movs	r2, #8
 8002a80:	5e9b      	ldrsh	r3, [r3, r2]
 8002a82:	0018      	movs	r0, r3
 8002a84:	f7ff ffa8 	bl	80029d8 <makeFreeRtosPriority>
 8002a88:	0001      	movs	r1, r0
 8002a8a:	683a      	ldr	r2, [r7, #0]
 8002a8c:	230c      	movs	r3, #12
 8002a8e:	18fb      	adds	r3, r7, r3
 8002a90:	9301      	str	r3, [sp, #4]
 8002a92:	9100      	str	r1, [sp, #0]
 8002a94:	0013      	movs	r3, r2
 8002a96:	0032      	movs	r2, r6
 8002a98:	0029      	movs	r1, r5
 8002a9a:	0020      	movs	r0, r4
 8002a9c:	f000 f90b 	bl	8002cb6 <xTaskCreate>
 8002aa0:	0003      	movs	r3, r0
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d001      	beq.n	8002aaa <osThreadCreate+0x90>
              &handle) != pdPASS)  {
      return NULL;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	e000      	b.n	8002aac <osThreadCreate+0x92>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
}
 8002aac:	0018      	movs	r0, r3
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	b005      	add	sp, #20
 8002ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ab4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <osDelay+0x16>
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	e000      	b.n	8002acc <osDelay+0x18>
 8002aca:	2301      	movs	r3, #1
 8002acc:	0018      	movs	r0, r3
 8002ace:	f000 fa25 	bl	8002f1c <vTaskDelay>
  
  return osOK;
 8002ad2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002ad4:	0018      	movs	r0, r3
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	b004      	add	sp, #16
 8002ada:	bd80      	pop	{r7, pc}

08002adc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	3308      	adds	r3, #8
 8002ae8:	001a      	movs	r2, r3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2201      	movs	r2, #1
 8002af2:	4252      	negs	r2, r2
 8002af4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	3308      	adds	r3, #8
 8002afa:	001a      	movs	r2, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	3308      	adds	r3, #8
 8002b04:	001a      	movs	r2, r3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002b10:	46c0      	nop			; (mov r8, r8)
 8002b12:	46bd      	mov	sp, r7
 8002b14:	b002      	add	sp, #8
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002b26:	46c0      	nop			; (mov r8, r8)
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	b002      	add	sp, #8
 8002b2c:	bd80      	pop	{r7, pc}

08002b2e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002b2e:	b580      	push	{r7, lr}
 8002b30:	b084      	sub	sp, #16
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	6078      	str	r0, [r7, #4]
 8002b36:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	68fa      	ldr	r2, [r7, #12]
 8002b42:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	689a      	ldr	r2, [r3, #8]
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	683a      	ldr	r2, [r7, #0]
 8002b52:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	683a      	ldr	r2, [r7, #0]
 8002b58:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	1c5a      	adds	r2, r3, #1
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	601a      	str	r2, [r3, #0]
}
 8002b6a:	46c0      	nop			; (mov r8, r8)
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	b004      	add	sp, #16
 8002b70:	bd80      	pop	{r7, pc}

08002b72 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002b72:	b580      	push	{r7, lr}
 8002b74:	b084      	sub	sp, #16
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
 8002b7a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	3301      	adds	r3, #1
 8002b86:	d103      	bne.n	8002b90 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	691b      	ldr	r3, [r3, #16]
 8002b8c:	60fb      	str	r3, [r7, #12]
 8002b8e:	e00c      	b.n	8002baa <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	3308      	adds	r3, #8
 8002b94:	60fb      	str	r3, [r7, #12]
 8002b96:	e002      	b.n	8002b9e <vListInsert+0x2c>
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	60fb      	str	r3, [r7, #12]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	68ba      	ldr	r2, [r7, #8]
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d2f6      	bcs.n	8002b98 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	685a      	ldr	r2, [r3, #4]
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	683a      	ldr	r2, [r7, #0]
 8002bb8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	68fa      	ldr	r2, [r7, #12]
 8002bbe:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	683a      	ldr	r2, [r7, #0]
 8002bc4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	1c5a      	adds	r2, r3, #1
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	601a      	str	r2, [r3, #0]
}
 8002bd6:	46c0      	nop			; (mov r8, r8)
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	b004      	add	sp, #16
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b084      	sub	sp, #16
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	6892      	ldr	r2, [r2, #8]
 8002bf4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	6852      	ldr	r2, [r2, #4]
 8002bfe:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d103      	bne.n	8002c12 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	689a      	ldr	r2, [r3, #8]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	1e5a      	subs	r2, r3, #1
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
}
 8002c26:	0018      	movs	r0, r3
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	b004      	add	sp, #16
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002c2e:	b590      	push	{r4, r7, lr}
 8002c30:	b08d      	sub	sp, #52	; 0x34
 8002c32:	af04      	add	r7, sp, #16
 8002c34:	60f8      	str	r0, [r7, #12]
 8002c36:	60b9      	str	r1, [r7, #8]
 8002c38:	607a      	str	r2, [r7, #4]
 8002c3a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002c3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d101      	bne.n	8002c46 <xTaskCreateStatic+0x18>
 8002c42:	b672      	cpsid	i
 8002c44:	e7fe      	b.n	8002c44 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8002c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d101      	bne.n	8002c50 <xTaskCreateStatic+0x22>
 8002c4c:	b672      	cpsid	i
 8002c4e:	e7fe      	b.n	8002c4e <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002c50:	2354      	movs	r3, #84	; 0x54
 8002c52:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	2b54      	cmp	r3, #84	; 0x54
 8002c58:	d001      	beq.n	8002c5e <xTaskCreateStatic+0x30>
 8002c5a:	b672      	cpsid	i
 8002c5c:	e7fe      	b.n	8002c5c <xTaskCreateStatic+0x2e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002c5e:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d020      	beq.n	8002ca8 <xTaskCreateStatic+0x7a>
 8002c66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d01d      	beq.n	8002ca8 <xTaskCreateStatic+0x7a>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c6e:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c74:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	2251      	movs	r2, #81	; 0x51
 8002c7a:	2102      	movs	r1, #2
 8002c7c:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002c7e:	683c      	ldr	r4, [r7, #0]
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	68b9      	ldr	r1, [r7, #8]
 8002c84:	68f8      	ldr	r0, [r7, #12]
 8002c86:	2300      	movs	r3, #0
 8002c88:	9303      	str	r3, [sp, #12]
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	9302      	str	r3, [sp, #8]
 8002c8e:	2318      	movs	r3, #24
 8002c90:	18fb      	adds	r3, r7, r3
 8002c92:	9301      	str	r3, [sp, #4]
 8002c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c96:	9300      	str	r3, [sp, #0]
 8002c98:	0023      	movs	r3, r4
 8002c9a:	f000 f859 	bl	8002d50 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	0018      	movs	r0, r3
 8002ca2:	f000 f8d7 	bl	8002e54 <prvAddNewTaskToReadyList>
 8002ca6:	e001      	b.n	8002cac <xTaskCreateStatic+0x7e>
		}
		else
		{
			xReturn = NULL;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002cac:	69bb      	ldr	r3, [r7, #24]
	}
 8002cae:	0018      	movs	r0, r3
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	b009      	add	sp, #36	; 0x24
 8002cb4:	bd90      	pop	{r4, r7, pc}

08002cb6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002cb6:	b590      	push	{r4, r7, lr}
 8002cb8:	b08d      	sub	sp, #52	; 0x34
 8002cba:	af04      	add	r7, sp, #16
 8002cbc:	60f8      	str	r0, [r7, #12]
 8002cbe:	60b9      	str	r1, [r7, #8]
 8002cc0:	603b      	str	r3, [r7, #0]
 8002cc2:	1dbb      	adds	r3, r7, #6
 8002cc4:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002cc6:	1dbb      	adds	r3, r7, #6
 8002cc8:	881b      	ldrh	r3, [r3, #0]
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	0018      	movs	r0, r3
 8002cce:	f000 fd9f 	bl	8003810 <pvPortMalloc>
 8002cd2:	0003      	movs	r3, r0
 8002cd4:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d010      	beq.n	8002cfe <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002cdc:	2054      	movs	r0, #84	; 0x54
 8002cde:	f000 fd97 	bl	8003810 <pvPortMalloc>
 8002ce2:	0003      	movs	r3, r0
 8002ce4:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d003      	beq.n	8002cf4 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	697a      	ldr	r2, [r7, #20]
 8002cf0:	631a      	str	r2, [r3, #48]	; 0x30
 8002cf2:	e006      	b.n	8002d02 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	0018      	movs	r0, r3
 8002cf8:	f000 fe30 	bl	800395c <vPortFree>
 8002cfc:	e001      	b.n	8002d02 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d01a      	beq.n	8002d3e <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	2251      	movs	r2, #81	; 0x51
 8002d0c:	2100      	movs	r1, #0
 8002d0e:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002d10:	1dbb      	adds	r3, r7, #6
 8002d12:	881a      	ldrh	r2, [r3, #0]
 8002d14:	683c      	ldr	r4, [r7, #0]
 8002d16:	68b9      	ldr	r1, [r7, #8]
 8002d18:	68f8      	ldr	r0, [r7, #12]
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	9303      	str	r3, [sp, #12]
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	9302      	str	r3, [sp, #8]
 8002d22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d24:	9301      	str	r3, [sp, #4]
 8002d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d28:	9300      	str	r3, [sp, #0]
 8002d2a:	0023      	movs	r3, r4
 8002d2c:	f000 f810 	bl	8002d50 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	0018      	movs	r0, r3
 8002d34:	f000 f88e 	bl	8002e54 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	61bb      	str	r3, [r7, #24]
 8002d3c:	e002      	b.n	8002d44 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	425b      	negs	r3, r3
 8002d42:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002d44:	69bb      	ldr	r3, [r7, #24]
	}
 8002d46:	0018      	movs	r0, r3
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	b009      	add	sp, #36	; 0x24
 8002d4c:	bd90      	pop	{r4, r7, pc}
	...

08002d50 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b086      	sub	sp, #24
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	607a      	str	r2, [r7, #4]
 8002d5c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	493a      	ldr	r1, [pc, #232]	; (8002e50 <prvInitialiseNewTask+0x100>)
 8002d66:	468c      	mov	ip, r1
 8002d68:	4463      	add	r3, ip
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	18d3      	adds	r3, r2, r3
 8002d6e:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	2207      	movs	r2, #7
 8002d74:	4393      	bics	r3, r2
 8002d76:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	2207      	movs	r2, #7
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	d001      	beq.n	8002d84 <prvInitialiseNewTask+0x34>
 8002d80:	b672      	cpsid	i
 8002d82:	e7fe      	b.n	8002d82 <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d020      	beq.n	8002dcc <prvInitialiseNewTask+0x7c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	617b      	str	r3, [r7, #20]
 8002d8e:	e013      	b.n	8002db8 <prvInitialiseNewTask+0x68>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002d90:	68ba      	ldr	r2, [r7, #8]
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	18d3      	adds	r3, r2, r3
 8002d96:	7818      	ldrb	r0, [r3, #0]
 8002d98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d9a:	2134      	movs	r1, #52	; 0x34
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	18d3      	adds	r3, r2, r3
 8002da0:	185b      	adds	r3, r3, r1
 8002da2:	1c02      	adds	r2, r0, #0
 8002da4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002da6:	68ba      	ldr	r2, [r7, #8]
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	18d3      	adds	r3, r2, r3
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d006      	beq.n	8002dc0 <prvInitialiseNewTask+0x70>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	3301      	adds	r3, #1
 8002db6:	617b      	str	r3, [r7, #20]
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	2b0f      	cmp	r3, #15
 8002dbc:	d9e8      	bls.n	8002d90 <prvInitialiseNewTask+0x40>
 8002dbe:	e000      	b.n	8002dc2 <prvInitialiseNewTask+0x72>
			{
				break;
 8002dc0:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dc4:	2243      	movs	r2, #67	; 0x43
 8002dc6:	2100      	movs	r1, #0
 8002dc8:	5499      	strb	r1, [r3, r2]
 8002dca:	e003      	b.n	8002dd4 <prvInitialiseNewTask+0x84>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dce:	2234      	movs	r2, #52	; 0x34
 8002dd0:	2100      	movs	r1, #0
 8002dd2:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002dd4:	6a3b      	ldr	r3, [r7, #32]
 8002dd6:	2b06      	cmp	r3, #6
 8002dd8:	d901      	bls.n	8002dde <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002dda:	2306      	movs	r3, #6
 8002ddc:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002de0:	6a3a      	ldr	r2, [r7, #32]
 8002de2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002de6:	6a3a      	ldr	r2, [r7, #32]
 8002de8:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dec:	2200      	movs	r2, #0
 8002dee:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002df2:	3304      	adds	r3, #4
 8002df4:	0018      	movs	r0, r3
 8002df6:	f7ff fe8f 	bl	8002b18 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dfc:	3318      	adds	r3, #24
 8002dfe:	0018      	movs	r0, r3
 8002e00:	f7ff fe8a 	bl	8002b18 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e08:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e0a:	6a3b      	ldr	r3, [r7, #32]
 8002e0c:	2207      	movs	r2, #7
 8002e0e:	1ad2      	subs	r2, r2, r3
 8002e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e12:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e18:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e22:	2250      	movs	r2, #80	; 0x50
 8002e24:	2100      	movs	r1, #0
 8002e26:	5499      	strb	r1, [r3, r2]
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002e28:	683a      	ldr	r2, [r7, #0]
 8002e2a:	68f9      	ldr	r1, [r7, #12]
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	0018      	movs	r0, r3
 8002e30:	f000 fbba 	bl	80035a8 <pxPortInitialiseStack>
 8002e34:	0002      	movs	r2, r0
 8002e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e38:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d002      	beq.n	8002e46 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002e46:	46c0      	nop			; (mov r8, r8)
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	b006      	add	sp, #24
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	46c0      	nop			; (mov r8, r8)
 8002e50:	3fffffff 	.word	0x3fffffff

08002e54 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002e5c:	f000 fc40 	bl	80036e0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002e60:	4b28      	ldr	r3, [pc, #160]	; (8002f04 <prvAddNewTaskToReadyList+0xb0>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	1c5a      	adds	r2, r3, #1
 8002e66:	4b27      	ldr	r3, [pc, #156]	; (8002f04 <prvAddNewTaskToReadyList+0xb0>)
 8002e68:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8002e6a:	4b27      	ldr	r3, [pc, #156]	; (8002f08 <prvAddNewTaskToReadyList+0xb4>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d109      	bne.n	8002e86 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002e72:	4b25      	ldr	r3, [pc, #148]	; (8002f08 <prvAddNewTaskToReadyList+0xb4>)
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002e78:	4b22      	ldr	r3, [pc, #136]	; (8002f04 <prvAddNewTaskToReadyList+0xb0>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d110      	bne.n	8002ea2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002e80:	f000 fa6a 	bl	8003358 <prvInitialiseTaskLists>
 8002e84:	e00d      	b.n	8002ea2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002e86:	4b21      	ldr	r3, [pc, #132]	; (8002f0c <prvAddNewTaskToReadyList+0xb8>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d109      	bne.n	8002ea2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002e8e:	4b1e      	ldr	r3, [pc, #120]	; (8002f08 <prvAddNewTaskToReadyList+0xb4>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d802      	bhi.n	8002ea2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002e9c:	4b1a      	ldr	r3, [pc, #104]	; (8002f08 <prvAddNewTaskToReadyList+0xb4>)
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002ea2:	4b1b      	ldr	r3, [pc, #108]	; (8002f10 <prvAddNewTaskToReadyList+0xbc>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	1c5a      	adds	r2, r3, #1
 8002ea8:	4b19      	ldr	r3, [pc, #100]	; (8002f10 <prvAddNewTaskToReadyList+0xbc>)
 8002eaa:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eb0:	4b18      	ldr	r3, [pc, #96]	; (8002f14 <prvAddNewTaskToReadyList+0xc0>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d903      	bls.n	8002ec0 <prvAddNewTaskToReadyList+0x6c>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ebc:	4b15      	ldr	r3, [pc, #84]	; (8002f14 <prvAddNewTaskToReadyList+0xc0>)
 8002ebe:	601a      	str	r2, [r3, #0]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ec4:	0013      	movs	r3, r2
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	189b      	adds	r3, r3, r2
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	4a12      	ldr	r2, [pc, #72]	; (8002f18 <prvAddNewTaskToReadyList+0xc4>)
 8002ece:	189a      	adds	r2, r3, r2
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	3304      	adds	r3, #4
 8002ed4:	0019      	movs	r1, r3
 8002ed6:	0010      	movs	r0, r2
 8002ed8:	f7ff fe29 	bl	8002b2e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002edc:	f000 fc12 	bl	8003704 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002ee0:	4b0a      	ldr	r3, [pc, #40]	; (8002f0c <prvAddNewTaskToReadyList+0xb8>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d008      	beq.n	8002efa <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002ee8:	4b07      	ldr	r3, [pc, #28]	; (8002f08 <prvAddNewTaskToReadyList+0xb4>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d201      	bcs.n	8002efa <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002ef6:	f000 fbe3 	bl	80036c0 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002efa:	46c0      	nop			; (mov r8, r8)
 8002efc:	46bd      	mov	sp, r7
 8002efe:	b002      	add	sp, #8
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	46c0      	nop			; (mov r8, r8)
 8002f04:	200004ec 	.word	0x200004ec
 8002f08:	200003ec 	.word	0x200003ec
 8002f0c:	200004f8 	.word	0x200004f8
 8002f10:	20000508 	.word	0x20000508
 8002f14:	200004f4 	.word	0x200004f4
 8002f18:	200003f0 	.word	0x200003f0

08002f1c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002f24:	2300      	movs	r3, #0
 8002f26:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d010      	beq.n	8002f50 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002f2e:	4b0d      	ldr	r3, [pc, #52]	; (8002f64 <vTaskDelay+0x48>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d001      	beq.n	8002f3a <vTaskDelay+0x1e>
 8002f36:	b672      	cpsid	i
 8002f38:	e7fe      	b.n	8002f38 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8002f3a:	f000 f863 	bl	8003004 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2100      	movs	r1, #0
 8002f42:	0018      	movs	r0, r3
 8002f44:	f000 fadc 	bl	8003500 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002f48:	f000 f868 	bl	800301c <xTaskResumeAll>
 8002f4c:	0003      	movs	r3, r0
 8002f4e:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d101      	bne.n	8002f5a <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 8002f56:	f000 fbb3 	bl	80036c0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002f5a:	46c0      	nop			; (mov r8, r8)
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	b004      	add	sp, #16
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	46c0      	nop			; (mov r8, r8)
 8002f64:	20000514 	.word	0x20000514

08002f68 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002f68:	b590      	push	{r4, r7, lr}
 8002f6a:	b089      	sub	sp, #36	; 0x24
 8002f6c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002f72:	2300      	movs	r3, #0
 8002f74:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002f76:	003a      	movs	r2, r7
 8002f78:	1d39      	adds	r1, r7, #4
 8002f7a:	2308      	movs	r3, #8
 8002f7c:	18fb      	adds	r3, r7, r3
 8002f7e:	0018      	movs	r0, r3
 8002f80:	f7fd fa92 	bl	80004a8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002f84:	683c      	ldr	r4, [r7, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	68ba      	ldr	r2, [r7, #8]
 8002f8a:	4918      	ldr	r1, [pc, #96]	; (8002fec <vTaskStartScheduler+0x84>)
 8002f8c:	4818      	ldr	r0, [pc, #96]	; (8002ff0 <vTaskStartScheduler+0x88>)
 8002f8e:	9202      	str	r2, [sp, #8]
 8002f90:	9301      	str	r3, [sp, #4]
 8002f92:	2300      	movs	r3, #0
 8002f94:	9300      	str	r3, [sp, #0]
 8002f96:	2300      	movs	r3, #0
 8002f98:	0022      	movs	r2, r4
 8002f9a:	f7ff fe48 	bl	8002c2e <xTaskCreateStatic>
 8002f9e:	0002      	movs	r2, r0
 8002fa0:	4b14      	ldr	r3, [pc, #80]	; (8002ff4 <vTaskStartScheduler+0x8c>)
 8002fa2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002fa4:	4b13      	ldr	r3, [pc, #76]	; (8002ff4 <vTaskStartScheduler+0x8c>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d002      	beq.n	8002fb2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002fac:	2301      	movs	r3, #1
 8002fae:	60fb      	str	r3, [r7, #12]
 8002fb0:	e001      	b.n	8002fb6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d10d      	bne.n	8002fd8 <vTaskStartScheduler+0x70>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8002fbc:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002fbe:	4b0e      	ldr	r3, [pc, #56]	; (8002ff8 <vTaskStartScheduler+0x90>)
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	4252      	negs	r2, r2
 8002fc4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002fc6:	4b0d      	ldr	r3, [pc, #52]	; (8002ffc <vTaskStartScheduler+0x94>)
 8002fc8:	2201      	movs	r2, #1
 8002fca:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002fcc:	4b0c      	ldr	r3, [pc, #48]	; (8003000 <vTaskStartScheduler+0x98>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002fd2:	f000 fb51 	bl	8003678 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002fd6:	e004      	b.n	8002fe2 <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	3301      	adds	r3, #1
 8002fdc:	d101      	bne.n	8002fe2 <vTaskStartScheduler+0x7a>
 8002fde:	b672      	cpsid	i
 8002fe0:	e7fe      	b.n	8002fe0 <vTaskStartScheduler+0x78>
}
 8002fe2:	46c0      	nop			; (mov r8, r8)
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	b005      	add	sp, #20
 8002fe8:	bd90      	pop	{r4, r7, pc}
 8002fea:	46c0      	nop			; (mov r8, r8)
 8002fec:	08003bf4 	.word	0x08003bf4
 8002ff0:	08003339 	.word	0x08003339
 8002ff4:	20000510 	.word	0x20000510
 8002ff8:	2000050c 	.word	0x2000050c
 8002ffc:	200004f8 	.word	0x200004f8
 8003000:	200004f0 	.word	0x200004f0

08003004 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003004:	b580      	push	{r7, lr}
 8003006:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003008:	4b03      	ldr	r3, [pc, #12]	; (8003018 <vTaskSuspendAll+0x14>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	1c5a      	adds	r2, r3, #1
 800300e:	4b02      	ldr	r3, [pc, #8]	; (8003018 <vTaskSuspendAll+0x14>)
 8003010:	601a      	str	r2, [r3, #0]
	portMEMORY_BARRIER();
}
 8003012:	46c0      	nop			; (mov r8, r8)
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	20000514 	.word	0x20000514

0800301c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003022:	2300      	movs	r3, #0
 8003024:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003026:	2300      	movs	r3, #0
 8003028:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800302a:	4b3a      	ldr	r3, [pc, #232]	; (8003114 <xTaskResumeAll+0xf8>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d101      	bne.n	8003036 <xTaskResumeAll+0x1a>
 8003032:	b672      	cpsid	i
 8003034:	e7fe      	b.n	8003034 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003036:	f000 fb53 	bl	80036e0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800303a:	4b36      	ldr	r3, [pc, #216]	; (8003114 <xTaskResumeAll+0xf8>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	1e5a      	subs	r2, r3, #1
 8003040:	4b34      	ldr	r3, [pc, #208]	; (8003114 <xTaskResumeAll+0xf8>)
 8003042:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003044:	4b33      	ldr	r3, [pc, #204]	; (8003114 <xTaskResumeAll+0xf8>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d15b      	bne.n	8003104 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800304c:	4b32      	ldr	r3, [pc, #200]	; (8003118 <xTaskResumeAll+0xfc>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d057      	beq.n	8003104 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003054:	e02f      	b.n	80030b6 <xTaskResumeAll+0x9a>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003056:	4b31      	ldr	r3, [pc, #196]	; (800311c <xTaskResumeAll+0x100>)
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	3318      	adds	r3, #24
 8003062:	0018      	movs	r0, r3
 8003064:	f7ff fdbb 	bl	8002bde <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	3304      	adds	r3, #4
 800306c:	0018      	movs	r0, r3
 800306e:	f7ff fdb6 	bl	8002bde <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003076:	4b2a      	ldr	r3, [pc, #168]	; (8003120 <xTaskResumeAll+0x104>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	429a      	cmp	r2, r3
 800307c:	d903      	bls.n	8003086 <xTaskResumeAll+0x6a>
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003082:	4b27      	ldr	r3, [pc, #156]	; (8003120 <xTaskResumeAll+0x104>)
 8003084:	601a      	str	r2, [r3, #0]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800308a:	0013      	movs	r3, r2
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	189b      	adds	r3, r3, r2
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	4a24      	ldr	r2, [pc, #144]	; (8003124 <xTaskResumeAll+0x108>)
 8003094:	189a      	adds	r2, r3, r2
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	3304      	adds	r3, #4
 800309a:	0019      	movs	r1, r3
 800309c:	0010      	movs	r0, r2
 800309e:	f7ff fd46 	bl	8002b2e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030a6:	4b20      	ldr	r3, [pc, #128]	; (8003128 <xTaskResumeAll+0x10c>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d302      	bcc.n	80030b6 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 80030b0:	4b1e      	ldr	r3, [pc, #120]	; (800312c <xTaskResumeAll+0x110>)
 80030b2:	2201      	movs	r2, #1
 80030b4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80030b6:	4b19      	ldr	r3, [pc, #100]	; (800311c <xTaskResumeAll+0x100>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d1cb      	bne.n	8003056 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d001      	beq.n	80030c8 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80030c4:	f000 f9e2 	bl	800348c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80030c8:	4b19      	ldr	r3, [pc, #100]	; (8003130 <xTaskResumeAll+0x114>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d00f      	beq.n	80030f4 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80030d4:	f000 f82e 	bl	8003134 <xTaskIncrementTick>
 80030d8:	1e03      	subs	r3, r0, #0
 80030da:	d002      	beq.n	80030e2 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 80030dc:	4b13      	ldr	r3, [pc, #76]	; (800312c <xTaskResumeAll+0x110>)
 80030de:	2201      	movs	r2, #1
 80030e0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	3b01      	subs	r3, #1
 80030e6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d1f2      	bne.n	80030d4 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 80030ee:	4b10      	ldr	r3, [pc, #64]	; (8003130 <xTaskResumeAll+0x114>)
 80030f0:	2200      	movs	r2, #0
 80030f2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80030f4:	4b0d      	ldr	r3, [pc, #52]	; (800312c <xTaskResumeAll+0x110>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d003      	beq.n	8003104 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80030fc:	2301      	movs	r3, #1
 80030fe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003100:	f000 fade 	bl	80036c0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003104:	f000 fafe 	bl	8003704 <vPortExitCritical>

	return xAlreadyYielded;
 8003108:	68bb      	ldr	r3, [r7, #8]
}
 800310a:	0018      	movs	r0, r3
 800310c:	46bd      	mov	sp, r7
 800310e:	b004      	add	sp, #16
 8003110:	bd80      	pop	{r7, pc}
 8003112:	46c0      	nop			; (mov r8, r8)
 8003114:	20000514 	.word	0x20000514
 8003118:	200004ec 	.word	0x200004ec
 800311c:	200004ac 	.word	0x200004ac
 8003120:	200004f4 	.word	0x200004f4
 8003124:	200003f0 	.word	0x200003f0
 8003128:	200003ec 	.word	0x200003ec
 800312c:	20000500 	.word	0x20000500
 8003130:	200004fc 	.word	0x200004fc

08003134 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b086      	sub	sp, #24
 8003138:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800313a:	2300      	movs	r3, #0
 800313c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800313e:	4b4a      	ldr	r3, [pc, #296]	; (8003268 <xTaskIncrementTick+0x134>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d000      	beq.n	8003148 <xTaskIncrementTick+0x14>
 8003146:	e07e      	b.n	8003246 <xTaskIncrementTick+0x112>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003148:	4b48      	ldr	r3, [pc, #288]	; (800326c <xTaskIncrementTick+0x138>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	3301      	adds	r3, #1
 800314e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003150:	4b46      	ldr	r3, [pc, #280]	; (800326c <xTaskIncrementTick+0x138>)
 8003152:	693a      	ldr	r2, [r7, #16]
 8003154:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d117      	bne.n	800318c <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 800315c:	4b44      	ldr	r3, [pc, #272]	; (8003270 <xTaskIncrementTick+0x13c>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d001      	beq.n	800316a <xTaskIncrementTick+0x36>
 8003166:	b672      	cpsid	i
 8003168:	e7fe      	b.n	8003168 <xTaskIncrementTick+0x34>
 800316a:	4b41      	ldr	r3, [pc, #260]	; (8003270 <xTaskIncrementTick+0x13c>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	60fb      	str	r3, [r7, #12]
 8003170:	4b40      	ldr	r3, [pc, #256]	; (8003274 <xTaskIncrementTick+0x140>)
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	4b3e      	ldr	r3, [pc, #248]	; (8003270 <xTaskIncrementTick+0x13c>)
 8003176:	601a      	str	r2, [r3, #0]
 8003178:	4b3e      	ldr	r3, [pc, #248]	; (8003274 <xTaskIncrementTick+0x140>)
 800317a:	68fa      	ldr	r2, [r7, #12]
 800317c:	601a      	str	r2, [r3, #0]
 800317e:	4b3e      	ldr	r3, [pc, #248]	; (8003278 <xTaskIncrementTick+0x144>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	1c5a      	adds	r2, r3, #1
 8003184:	4b3c      	ldr	r3, [pc, #240]	; (8003278 <xTaskIncrementTick+0x144>)
 8003186:	601a      	str	r2, [r3, #0]
 8003188:	f000 f980 	bl	800348c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800318c:	4b3b      	ldr	r3, [pc, #236]	; (800327c <xTaskIncrementTick+0x148>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	429a      	cmp	r2, r3
 8003194:	d349      	bcc.n	800322a <xTaskIncrementTick+0xf6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003196:	4b36      	ldr	r3, [pc, #216]	; (8003270 <xTaskIncrementTick+0x13c>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d104      	bne.n	80031aa <xTaskIncrementTick+0x76>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031a0:	4b36      	ldr	r3, [pc, #216]	; (800327c <xTaskIncrementTick+0x148>)
 80031a2:	2201      	movs	r2, #1
 80031a4:	4252      	negs	r2, r2
 80031a6:	601a      	str	r2, [r3, #0]
					break;
 80031a8:	e03f      	b.n	800322a <xTaskIncrementTick+0xf6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031aa:	4b31      	ldr	r3, [pc, #196]	; (8003270 <xTaskIncrementTick+0x13c>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	68db      	ldr	r3, [r3, #12]
 80031b2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80031ba:	693a      	ldr	r2, [r7, #16]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	429a      	cmp	r2, r3
 80031c0:	d203      	bcs.n	80031ca <xTaskIncrementTick+0x96>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80031c2:	4b2e      	ldr	r3, [pc, #184]	; (800327c <xTaskIncrementTick+0x148>)
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80031c8:	e02f      	b.n	800322a <xTaskIncrementTick+0xf6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	3304      	adds	r3, #4
 80031ce:	0018      	movs	r0, r3
 80031d0:	f7ff fd05 	bl	8002bde <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d004      	beq.n	80031e6 <xTaskIncrementTick+0xb2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	3318      	adds	r3, #24
 80031e0:	0018      	movs	r0, r3
 80031e2:	f7ff fcfc 	bl	8002bde <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031ea:	4b25      	ldr	r3, [pc, #148]	; (8003280 <xTaskIncrementTick+0x14c>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d903      	bls.n	80031fa <xTaskIncrementTick+0xc6>
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031f6:	4b22      	ldr	r3, [pc, #136]	; (8003280 <xTaskIncrementTick+0x14c>)
 80031f8:	601a      	str	r2, [r3, #0]
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031fe:	0013      	movs	r3, r2
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	189b      	adds	r3, r3, r2
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	4a1f      	ldr	r2, [pc, #124]	; (8003284 <xTaskIncrementTick+0x150>)
 8003208:	189a      	adds	r2, r3, r2
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	3304      	adds	r3, #4
 800320e:	0019      	movs	r1, r3
 8003210:	0010      	movs	r0, r2
 8003212:	f7ff fc8c 	bl	8002b2e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800321a:	4b1b      	ldr	r3, [pc, #108]	; (8003288 <xTaskIncrementTick+0x154>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003220:	429a      	cmp	r2, r3
 8003222:	d3b8      	bcc.n	8003196 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8003224:	2301      	movs	r3, #1
 8003226:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003228:	e7b5      	b.n	8003196 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800322a:	4b17      	ldr	r3, [pc, #92]	; (8003288 <xTaskIncrementTick+0x154>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003230:	4914      	ldr	r1, [pc, #80]	; (8003284 <xTaskIncrementTick+0x150>)
 8003232:	0013      	movs	r3, r2
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	189b      	adds	r3, r3, r2
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	585b      	ldr	r3, [r3, r1]
 800323c:	2b01      	cmp	r3, #1
 800323e:	d907      	bls.n	8003250 <xTaskIncrementTick+0x11c>
			{
				xSwitchRequired = pdTRUE;
 8003240:	2301      	movs	r3, #1
 8003242:	617b      	str	r3, [r7, #20]
 8003244:	e004      	b.n	8003250 <xTaskIncrementTick+0x11c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003246:	4b11      	ldr	r3, [pc, #68]	; (800328c <xTaskIncrementTick+0x158>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	1c5a      	adds	r2, r3, #1
 800324c:	4b0f      	ldr	r3, [pc, #60]	; (800328c <xTaskIncrementTick+0x158>)
 800324e:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003250:	4b0f      	ldr	r3, [pc, #60]	; (8003290 <xTaskIncrementTick+0x15c>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d001      	beq.n	800325c <xTaskIncrementTick+0x128>
		{
			xSwitchRequired = pdTRUE;
 8003258:	2301      	movs	r3, #1
 800325a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800325c:	697b      	ldr	r3, [r7, #20]
}
 800325e:	0018      	movs	r0, r3
 8003260:	46bd      	mov	sp, r7
 8003262:	b006      	add	sp, #24
 8003264:	bd80      	pop	{r7, pc}
 8003266:	46c0      	nop			; (mov r8, r8)
 8003268:	20000514 	.word	0x20000514
 800326c:	200004f0 	.word	0x200004f0
 8003270:	200004a4 	.word	0x200004a4
 8003274:	200004a8 	.word	0x200004a8
 8003278:	20000504 	.word	0x20000504
 800327c:	2000050c 	.word	0x2000050c
 8003280:	200004f4 	.word	0x200004f4
 8003284:	200003f0 	.word	0x200003f0
 8003288:	200003ec 	.word	0x200003ec
 800328c:	200004fc 	.word	0x200004fc
 8003290:	20000500 	.word	0x20000500

08003294 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800329a:	4b22      	ldr	r3, [pc, #136]	; (8003324 <vTaskSwitchContext+0x90>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d003      	beq.n	80032aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80032a2:	4b21      	ldr	r3, [pc, #132]	; (8003328 <vTaskSwitchContext+0x94>)
 80032a4:	2201      	movs	r2, #1
 80032a6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80032a8:	e037      	b.n	800331a <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 80032aa:	4b1f      	ldr	r3, [pc, #124]	; (8003328 <vTaskSwitchContext+0x94>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032b0:	4b1e      	ldr	r3, [pc, #120]	; (800332c <vTaskSwitchContext+0x98>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	607b      	str	r3, [r7, #4]
 80032b6:	e007      	b.n	80032c8 <vTaskSwitchContext+0x34>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d101      	bne.n	80032c2 <vTaskSwitchContext+0x2e>
 80032be:	b672      	cpsid	i
 80032c0:	e7fe      	b.n	80032c0 <vTaskSwitchContext+0x2c>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	3b01      	subs	r3, #1
 80032c6:	607b      	str	r3, [r7, #4]
 80032c8:	4919      	ldr	r1, [pc, #100]	; (8003330 <vTaskSwitchContext+0x9c>)
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	0013      	movs	r3, r2
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	189b      	adds	r3, r3, r2
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	585b      	ldr	r3, [r3, r1]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d0ee      	beq.n	80032b8 <vTaskSwitchContext+0x24>
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	0013      	movs	r3, r2
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	189b      	adds	r3, r3, r2
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	4a12      	ldr	r2, [pc, #72]	; (8003330 <vTaskSwitchContext+0x9c>)
 80032e6:	189b      	adds	r3, r3, r2
 80032e8:	603b      	str	r3, [r7, #0]
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	685a      	ldr	r2, [r3, #4]
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	605a      	str	r2, [r3, #4]
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	685a      	ldr	r2, [r3, #4]
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	3308      	adds	r3, #8
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d104      	bne.n	800330a <vTaskSwitchContext+0x76>
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	685a      	ldr	r2, [r3, #4]
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	605a      	str	r2, [r3, #4]
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	68da      	ldr	r2, [r3, #12]
 8003310:	4b08      	ldr	r3, [pc, #32]	; (8003334 <vTaskSwitchContext+0xa0>)
 8003312:	601a      	str	r2, [r3, #0]
 8003314:	4b05      	ldr	r3, [pc, #20]	; (800332c <vTaskSwitchContext+0x98>)
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	601a      	str	r2, [r3, #0]
}
 800331a:	46c0      	nop			; (mov r8, r8)
 800331c:	46bd      	mov	sp, r7
 800331e:	b002      	add	sp, #8
 8003320:	bd80      	pop	{r7, pc}
 8003322:	46c0      	nop			; (mov r8, r8)
 8003324:	20000514 	.word	0x20000514
 8003328:	20000500 	.word	0x20000500
 800332c:	200004f4 	.word	0x200004f4
 8003330:	200003f0 	.word	0x200003f0
 8003334:	200003ec 	.word	0x200003ec

08003338 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003340:	f000 f84e 	bl	80033e0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003344:	4b03      	ldr	r3, [pc, #12]	; (8003354 <prvIdleTask+0x1c>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2b01      	cmp	r3, #1
 800334a:	d9f9      	bls.n	8003340 <prvIdleTask+0x8>
			{
				taskYIELD();
 800334c:	f000 f9b8 	bl	80036c0 <vPortYield>
		prvCheckTasksWaitingTermination();
 8003350:	e7f6      	b.n	8003340 <prvIdleTask+0x8>
 8003352:	46c0      	nop			; (mov r8, r8)
 8003354:	200003f0 	.word	0x200003f0

08003358 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800335e:	2300      	movs	r3, #0
 8003360:	607b      	str	r3, [r7, #4]
 8003362:	e00c      	b.n	800337e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	0013      	movs	r3, r2
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	189b      	adds	r3, r3, r2
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	4a14      	ldr	r2, [pc, #80]	; (80033c0 <prvInitialiseTaskLists+0x68>)
 8003370:	189b      	adds	r3, r3, r2
 8003372:	0018      	movs	r0, r3
 8003374:	f7ff fbb2 	bl	8002adc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	3301      	adds	r3, #1
 800337c:	607b      	str	r3, [r7, #4]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2b06      	cmp	r3, #6
 8003382:	d9ef      	bls.n	8003364 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003384:	4b0f      	ldr	r3, [pc, #60]	; (80033c4 <prvInitialiseTaskLists+0x6c>)
 8003386:	0018      	movs	r0, r3
 8003388:	f7ff fba8 	bl	8002adc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800338c:	4b0e      	ldr	r3, [pc, #56]	; (80033c8 <prvInitialiseTaskLists+0x70>)
 800338e:	0018      	movs	r0, r3
 8003390:	f7ff fba4 	bl	8002adc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003394:	4b0d      	ldr	r3, [pc, #52]	; (80033cc <prvInitialiseTaskLists+0x74>)
 8003396:	0018      	movs	r0, r3
 8003398:	f7ff fba0 	bl	8002adc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800339c:	4b0c      	ldr	r3, [pc, #48]	; (80033d0 <prvInitialiseTaskLists+0x78>)
 800339e:	0018      	movs	r0, r3
 80033a0:	f7ff fb9c 	bl	8002adc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80033a4:	4b0b      	ldr	r3, [pc, #44]	; (80033d4 <prvInitialiseTaskLists+0x7c>)
 80033a6:	0018      	movs	r0, r3
 80033a8:	f7ff fb98 	bl	8002adc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80033ac:	4b0a      	ldr	r3, [pc, #40]	; (80033d8 <prvInitialiseTaskLists+0x80>)
 80033ae:	4a05      	ldr	r2, [pc, #20]	; (80033c4 <prvInitialiseTaskLists+0x6c>)
 80033b0:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80033b2:	4b0a      	ldr	r3, [pc, #40]	; (80033dc <prvInitialiseTaskLists+0x84>)
 80033b4:	4a04      	ldr	r2, [pc, #16]	; (80033c8 <prvInitialiseTaskLists+0x70>)
 80033b6:	601a      	str	r2, [r3, #0]
}
 80033b8:	46c0      	nop			; (mov r8, r8)
 80033ba:	46bd      	mov	sp, r7
 80033bc:	b002      	add	sp, #8
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	200003f0 	.word	0x200003f0
 80033c4:	2000047c 	.word	0x2000047c
 80033c8:	20000490 	.word	0x20000490
 80033cc:	200004ac 	.word	0x200004ac
 80033d0:	200004c0 	.word	0x200004c0
 80033d4:	200004d8 	.word	0x200004d8
 80033d8:	200004a4 	.word	0x200004a4
 80033dc:	200004a8 	.word	0x200004a8

080033e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80033e6:	e01a      	b.n	800341e <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 80033e8:	f000 f97a 	bl	80036e0 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033ec:	4b10      	ldr	r3, [pc, #64]	; (8003430 <prvCheckTasksWaitingTermination+0x50>)
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	3304      	adds	r3, #4
 80033f8:	0018      	movs	r0, r3
 80033fa:	f7ff fbf0 	bl	8002bde <uxListRemove>
				--uxCurrentNumberOfTasks;
 80033fe:	4b0d      	ldr	r3, [pc, #52]	; (8003434 <prvCheckTasksWaitingTermination+0x54>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	1e5a      	subs	r2, r3, #1
 8003404:	4b0b      	ldr	r3, [pc, #44]	; (8003434 <prvCheckTasksWaitingTermination+0x54>)
 8003406:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003408:	4b0b      	ldr	r3, [pc, #44]	; (8003438 <prvCheckTasksWaitingTermination+0x58>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	1e5a      	subs	r2, r3, #1
 800340e:	4b0a      	ldr	r3, [pc, #40]	; (8003438 <prvCheckTasksWaitingTermination+0x58>)
 8003410:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8003412:	f000 f977 	bl	8003704 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	0018      	movs	r0, r3
 800341a:	f000 f80f 	bl	800343c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800341e:	4b06      	ldr	r3, [pc, #24]	; (8003438 <prvCheckTasksWaitingTermination+0x58>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d1e0      	bne.n	80033e8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003426:	46c0      	nop			; (mov r8, r8)
 8003428:	46c0      	nop			; (mov r8, r8)
 800342a:	46bd      	mov	sp, r7
 800342c:	b002      	add	sp, #8
 800342e:	bd80      	pop	{r7, pc}
 8003430:	200004c0 	.word	0x200004c0
 8003434:	200004ec 	.word	0x200004ec
 8003438:	200004d4 	.word	0x200004d4

0800343c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2251      	movs	r2, #81	; 0x51
 8003448:	5c9b      	ldrb	r3, [r3, r2]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d109      	bne.n	8003462 <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003452:	0018      	movs	r0, r3
 8003454:	f000 fa82 	bl	800395c <vPortFree>
				vPortFree( pxTCB );
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	0018      	movs	r0, r3
 800345c:	f000 fa7e 	bl	800395c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003460:	e010      	b.n	8003484 <prvDeleteTCB+0x48>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2251      	movs	r2, #81	; 0x51
 8003466:	5c9b      	ldrb	r3, [r3, r2]
 8003468:	2b01      	cmp	r3, #1
 800346a:	d104      	bne.n	8003476 <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	0018      	movs	r0, r3
 8003470:	f000 fa74 	bl	800395c <vPortFree>
	}
 8003474:	e006      	b.n	8003484 <prvDeleteTCB+0x48>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2251      	movs	r2, #81	; 0x51
 800347a:	5c9b      	ldrb	r3, [r3, r2]
 800347c:	2b02      	cmp	r3, #2
 800347e:	d001      	beq.n	8003484 <prvDeleteTCB+0x48>
 8003480:	b672      	cpsid	i
 8003482:	e7fe      	b.n	8003482 <prvDeleteTCB+0x46>
	}
 8003484:	46c0      	nop			; (mov r8, r8)
 8003486:	46bd      	mov	sp, r7
 8003488:	b002      	add	sp, #8
 800348a:	bd80      	pop	{r7, pc}

0800348c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003492:	4b0b      	ldr	r3, [pc, #44]	; (80034c0 <prvResetNextTaskUnblockTime+0x34>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d104      	bne.n	80034a6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800349c:	4b09      	ldr	r3, [pc, #36]	; (80034c4 <prvResetNextTaskUnblockTime+0x38>)
 800349e:	2201      	movs	r2, #1
 80034a0:	4252      	negs	r2, r2
 80034a2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80034a4:	e008      	b.n	80034b8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034a6:	4b06      	ldr	r3, [pc, #24]	; (80034c0 <prvResetNextTaskUnblockTime+0x34>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	685a      	ldr	r2, [r3, #4]
 80034b4:	4b03      	ldr	r3, [pc, #12]	; (80034c4 <prvResetNextTaskUnblockTime+0x38>)
 80034b6:	601a      	str	r2, [r3, #0]
}
 80034b8:	46c0      	nop			; (mov r8, r8)
 80034ba:	46bd      	mov	sp, r7
 80034bc:	b002      	add	sp, #8
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	200004a4 	.word	0x200004a4
 80034c4:	2000050c 	.word	0x2000050c

080034c8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80034ce:	4b0a      	ldr	r3, [pc, #40]	; (80034f8 <xTaskGetSchedulerState+0x30>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d102      	bne.n	80034dc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80034d6:	2301      	movs	r3, #1
 80034d8:	607b      	str	r3, [r7, #4]
 80034da:	e008      	b.n	80034ee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034dc:	4b07      	ldr	r3, [pc, #28]	; (80034fc <xTaskGetSchedulerState+0x34>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d102      	bne.n	80034ea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80034e4:	2302      	movs	r3, #2
 80034e6:	607b      	str	r3, [r7, #4]
 80034e8:	e001      	b.n	80034ee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80034ea:	2300      	movs	r3, #0
 80034ec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80034ee:	687b      	ldr	r3, [r7, #4]
	}
 80034f0:	0018      	movs	r0, r3
 80034f2:	46bd      	mov	sp, r7
 80034f4:	b002      	add	sp, #8
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	200004f8 	.word	0x200004f8
 80034fc:	20000514 	.word	0x20000514

08003500 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800350a:	4b21      	ldr	r3, [pc, #132]	; (8003590 <prvAddCurrentTaskToDelayedList+0x90>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003510:	4b20      	ldr	r3, [pc, #128]	; (8003594 <prvAddCurrentTaskToDelayedList+0x94>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	3304      	adds	r3, #4
 8003516:	0018      	movs	r0, r3
 8003518:	f7ff fb61 	bl	8002bde <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	3301      	adds	r3, #1
 8003520:	d10b      	bne.n	800353a <prvAddCurrentTaskToDelayedList+0x3a>
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d008      	beq.n	800353a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003528:	4b1a      	ldr	r3, [pc, #104]	; (8003594 <prvAddCurrentTaskToDelayedList+0x94>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	1d1a      	adds	r2, r3, #4
 800352e:	4b1a      	ldr	r3, [pc, #104]	; (8003598 <prvAddCurrentTaskToDelayedList+0x98>)
 8003530:	0011      	movs	r1, r2
 8003532:	0018      	movs	r0, r3
 8003534:	f7ff fafb 	bl	8002b2e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003538:	e026      	b.n	8003588 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800353a:	68fa      	ldr	r2, [r7, #12]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	18d3      	adds	r3, r2, r3
 8003540:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003542:	4b14      	ldr	r3, [pc, #80]	; (8003594 <prvAddCurrentTaskToDelayedList+0x94>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	68ba      	ldr	r2, [r7, #8]
 8003548:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800354a:	68ba      	ldr	r2, [r7, #8]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	429a      	cmp	r2, r3
 8003550:	d209      	bcs.n	8003566 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003552:	4b12      	ldr	r3, [pc, #72]	; (800359c <prvAddCurrentTaskToDelayedList+0x9c>)
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	4b0f      	ldr	r3, [pc, #60]	; (8003594 <prvAddCurrentTaskToDelayedList+0x94>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	3304      	adds	r3, #4
 800355c:	0019      	movs	r1, r3
 800355e:	0010      	movs	r0, r2
 8003560:	f7ff fb07 	bl	8002b72 <vListInsert>
}
 8003564:	e010      	b.n	8003588 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003566:	4b0e      	ldr	r3, [pc, #56]	; (80035a0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	4b0a      	ldr	r3, [pc, #40]	; (8003594 <prvAddCurrentTaskToDelayedList+0x94>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	3304      	adds	r3, #4
 8003570:	0019      	movs	r1, r3
 8003572:	0010      	movs	r0, r2
 8003574:	f7ff fafd 	bl	8002b72 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003578:	4b0a      	ldr	r3, [pc, #40]	; (80035a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	68ba      	ldr	r2, [r7, #8]
 800357e:	429a      	cmp	r2, r3
 8003580:	d202      	bcs.n	8003588 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003582:	4b08      	ldr	r3, [pc, #32]	; (80035a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003584:	68ba      	ldr	r2, [r7, #8]
 8003586:	601a      	str	r2, [r3, #0]
}
 8003588:	46c0      	nop			; (mov r8, r8)
 800358a:	46bd      	mov	sp, r7
 800358c:	b004      	add	sp, #16
 800358e:	bd80      	pop	{r7, pc}
 8003590:	200004f0 	.word	0x200004f0
 8003594:	200003ec 	.word	0x200003ec
 8003598:	200004d8 	.word	0x200004d8
 800359c:	200004a8 	.word	0x200004a8
 80035a0:	200004a4 	.word	0x200004a4
 80035a4:	2000050c 	.word	0x2000050c

080035a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	60b9      	str	r1, [r7, #8]
 80035b2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	3b04      	subs	r3, #4
 80035b8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2280      	movs	r2, #128	; 0x80
 80035be:	0452      	lsls	r2, r2, #17
 80035c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	3b04      	subs	r3, #4
 80035c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 80035c8:	68ba      	ldr	r2, [r7, #8]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	3b04      	subs	r3, #4
 80035d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80035d4:	4a08      	ldr	r2, [pc, #32]	; (80035f8 <pxPortInitialiseStack+0x50>)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	3b14      	subs	r3, #20
 80035de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	3b20      	subs	r3, #32
 80035ea:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80035ec:	68fb      	ldr	r3, [r7, #12]
}
 80035ee:	0018      	movs	r0, r3
 80035f0:	46bd      	mov	sp, r7
 80035f2:	b004      	add	sp, #16
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	46c0      	nop			; (mov r8, r8)
 80035f8:	080035fd 	.word	0x080035fd

080035fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003602:	2300      	movs	r3, #0
 8003604:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003606:	4b08      	ldr	r3, [pc, #32]	; (8003628 <prvTaskExitError+0x2c>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	3301      	adds	r3, #1
 800360c:	d001      	beq.n	8003612 <prvTaskExitError+0x16>
 800360e:	b672      	cpsid	i
 8003610:	e7fe      	b.n	8003610 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8003612:	b672      	cpsid	i
	while( ulDummy == 0 )
 8003614:	46c0      	nop			; (mov r8, r8)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d0fc      	beq.n	8003616 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800361c:	46c0      	nop			; (mov r8, r8)
 800361e:	46c0      	nop			; (mov r8, r8)
 8003620:	46bd      	mov	sp, r7
 8003622:	b002      	add	sp, #8
 8003624:	bd80      	pop	{r7, pc}
 8003626:	46c0      	nop			; (mov r8, r8)
 8003628:	2000000c 	.word	0x2000000c

0800362c <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 800362c:	b580      	push	{r7, lr}
 800362e:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8003630:	46c0      	nop			; (mov r8, r8)
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
	...

08003640 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8003640:	4a0b      	ldr	r2, [pc, #44]	; (8003670 <pxCurrentTCBConst2>)
 8003642:	6813      	ldr	r3, [r2, #0]
 8003644:	6818      	ldr	r0, [r3, #0]
 8003646:	3020      	adds	r0, #32
 8003648:	f380 8809 	msr	PSP, r0
 800364c:	2002      	movs	r0, #2
 800364e:	f380 8814 	msr	CONTROL, r0
 8003652:	f3bf 8f6f 	isb	sy
 8003656:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8003658:	46ae      	mov	lr, r5
 800365a:	bc08      	pop	{r3}
 800365c:	bc04      	pop	{r2}
 800365e:	b662      	cpsie	i
 8003660:	4718      	bx	r3
 8003662:	46c0      	nop			; (mov r8, r8)
 8003664:	46c0      	nop			; (mov r8, r8)
 8003666:	46c0      	nop			; (mov r8, r8)
 8003668:	46c0      	nop			; (mov r8, r8)
 800366a:	46c0      	nop			; (mov r8, r8)
 800366c:	46c0      	nop			; (mov r8, r8)
 800366e:	46c0      	nop			; (mov r8, r8)

08003670 <pxCurrentTCBConst2>:
 8003670:	200003ec 	.word	0x200003ec
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8003674:	46c0      	nop			; (mov r8, r8)
 8003676:	46c0      	nop			; (mov r8, r8)

08003678 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003678:	b580      	push	{r7, lr}
 800367a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800367c:	4b0e      	ldr	r3, [pc, #56]	; (80036b8 <xPortStartScheduler+0x40>)
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	4b0d      	ldr	r3, [pc, #52]	; (80036b8 <xPortStartScheduler+0x40>)
 8003682:	21ff      	movs	r1, #255	; 0xff
 8003684:	0409      	lsls	r1, r1, #16
 8003686:	430a      	orrs	r2, r1
 8003688:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800368a:	4b0b      	ldr	r3, [pc, #44]	; (80036b8 <xPortStartScheduler+0x40>)
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	4b0a      	ldr	r3, [pc, #40]	; (80036b8 <xPortStartScheduler+0x40>)
 8003690:	21ff      	movs	r1, #255	; 0xff
 8003692:	0609      	lsls	r1, r1, #24
 8003694:	430a      	orrs	r2, r1
 8003696:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8003698:	f000 f898 	bl	80037cc <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800369c:	4b07      	ldr	r3, [pc, #28]	; (80036bc <xPortStartScheduler+0x44>)
 800369e:	2200      	movs	r2, #0
 80036a0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 80036a2:	f7ff ffcd 	bl	8003640 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80036a6:	f7ff fdf5 	bl	8003294 <vTaskSwitchContext>
	prvTaskExitError();
 80036aa:	f7ff ffa7 	bl	80035fc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80036ae:	2300      	movs	r3, #0
}
 80036b0:	0018      	movs	r0, r3
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	46c0      	nop			; (mov r8, r8)
 80036b8:	e000ed20 	.word	0xe000ed20
 80036bc:	2000000c 	.word	0x2000000c

080036c0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 80036c4:	4b05      	ldr	r3, [pc, #20]	; (80036dc <vPortYield+0x1c>)
 80036c6:	2280      	movs	r2, #128	; 0x80
 80036c8:	0552      	lsls	r2, r2, #21
 80036ca:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 80036cc:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80036d0:	f3bf 8f6f 	isb	sy
}
 80036d4:	46c0      	nop			; (mov r8, r8)
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	46c0      	nop			; (mov r8, r8)
 80036dc:	e000ed04 	.word	0xe000ed04

080036e0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 80036e4:	b672      	cpsid	i
    uxCriticalNesting++;
 80036e6:	4b06      	ldr	r3, [pc, #24]	; (8003700 <vPortEnterCritical+0x20>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	1c5a      	adds	r2, r3, #1
 80036ec:	4b04      	ldr	r3, [pc, #16]	; (8003700 <vPortEnterCritical+0x20>)
 80036ee:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 80036f0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80036f4:	f3bf 8f6f 	isb	sy
}
 80036f8:	46c0      	nop			; (mov r8, r8)
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	46c0      	nop			; (mov r8, r8)
 8003700:	2000000c 	.word	0x2000000c

08003704 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003704:	b580      	push	{r7, lr}
 8003706:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003708:	4b09      	ldr	r3, [pc, #36]	; (8003730 <vPortExitCritical+0x2c>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d101      	bne.n	8003714 <vPortExitCritical+0x10>
 8003710:	b672      	cpsid	i
 8003712:	e7fe      	b.n	8003712 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8003714:	4b06      	ldr	r3, [pc, #24]	; (8003730 <vPortExitCritical+0x2c>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	1e5a      	subs	r2, r3, #1
 800371a:	4b05      	ldr	r3, [pc, #20]	; (8003730 <vPortExitCritical+0x2c>)
 800371c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 800371e:	4b04      	ldr	r3, [pc, #16]	; (8003730 <vPortExitCritical+0x2c>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d100      	bne.n	8003728 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8003726:	b662      	cpsie	i
    }
}
 8003728:	46c0      	nop			; (mov r8, r8)
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	46c0      	nop			; (mov r8, r8)
 8003730:	2000000c 	.word	0x2000000c

08003734 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8003734:	f3ef 8010 	mrs	r0, PRIMASK
 8003738:	b672      	cpsid	i
 800373a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 800373c:	46c0      	nop			; (mov r8, r8)
 800373e:	0018      	movs	r0, r3

08003740 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8003740:	f380 8810 	msr	PRIMASK, r0
 8003744:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8003746:	46c0      	nop			; (mov r8, r8)
	...

08003750 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003750:	f3ef 8009 	mrs	r0, PSP
 8003754:	4b0e      	ldr	r3, [pc, #56]	; (8003790 <pxCurrentTCBConst>)
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	3820      	subs	r0, #32
 800375a:	6010      	str	r0, [r2, #0]
 800375c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800375e:	4644      	mov	r4, r8
 8003760:	464d      	mov	r5, r9
 8003762:	4656      	mov	r6, sl
 8003764:	465f      	mov	r7, fp
 8003766:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8003768:	b508      	push	{r3, lr}
 800376a:	b672      	cpsid	i
 800376c:	f7ff fd92 	bl	8003294 <vTaskSwitchContext>
 8003770:	b662      	cpsie	i
 8003772:	bc0c      	pop	{r2, r3}
 8003774:	6811      	ldr	r1, [r2, #0]
 8003776:	6808      	ldr	r0, [r1, #0]
 8003778:	3010      	adds	r0, #16
 800377a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800377c:	46a0      	mov	r8, r4
 800377e:	46a9      	mov	r9, r5
 8003780:	46b2      	mov	sl, r6
 8003782:	46bb      	mov	fp, r7
 8003784:	f380 8809 	msr	PSP, r0
 8003788:	3820      	subs	r0, #32
 800378a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800378c:	4718      	bx	r3
 800378e:	46c0      	nop			; (mov r8, r8)

08003790 <pxCurrentTCBConst>:
 8003790:	200003ec 	.word	0x200003ec
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8003794:	46c0      	nop			; (mov r8, r8)
 8003796:	46c0      	nop			; (mov r8, r8)

08003798 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800379e:	f7ff ffc9 	bl	8003734 <ulSetInterruptMaskFromISR>
 80037a2:	0003      	movs	r3, r0
 80037a4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80037a6:	f7ff fcc5 	bl	8003134 <xTaskIncrementTick>
 80037aa:	1e03      	subs	r3, r0, #0
 80037ac:	d003      	beq.n	80037b6 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 80037ae:	4b06      	ldr	r3, [pc, #24]	; (80037c8 <xPortSysTickHandler+0x30>)
 80037b0:	2280      	movs	r2, #128	; 0x80
 80037b2:	0552      	lsls	r2, r2, #21
 80037b4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	0018      	movs	r0, r3
 80037ba:	f7ff ffc1 	bl	8003740 <vClearInterruptMaskFromISR>
}
 80037be:	46c0      	nop			; (mov r8, r8)
 80037c0:	46bd      	mov	sp, r7
 80037c2:	b002      	add	sp, #8
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	46c0      	nop			; (mov r8, r8)
 80037c8:	e000ed04 	.word	0xe000ed04

080037cc <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 80037d0:	4b0b      	ldr	r3, [pc, #44]	; (8003800 <prvSetupTimerInterrupt+0x34>)
 80037d2:	2200      	movs	r2, #0
 80037d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 80037d6:	4b0b      	ldr	r3, [pc, #44]	; (8003804 <prvSetupTimerInterrupt+0x38>)
 80037d8:	2200      	movs	r2, #0
 80037da:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80037dc:	4b0a      	ldr	r3, [pc, #40]	; (8003808 <prvSetupTimerInterrupt+0x3c>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	22fa      	movs	r2, #250	; 0xfa
 80037e2:	0091      	lsls	r1, r2, #2
 80037e4:	0018      	movs	r0, r3
 80037e6:	f7fc fc8f 	bl	8000108 <__udivsi3>
 80037ea:	0003      	movs	r3, r0
 80037ec:	001a      	movs	r2, r3
 80037ee:	4b07      	ldr	r3, [pc, #28]	; (800380c <prvSetupTimerInterrupt+0x40>)
 80037f0:	3a01      	subs	r2, #1
 80037f2:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 80037f4:	4b02      	ldr	r3, [pc, #8]	; (8003800 <prvSetupTimerInterrupt+0x34>)
 80037f6:	2207      	movs	r2, #7
 80037f8:	601a      	str	r2, [r3, #0]
}
 80037fa:	46c0      	nop			; (mov r8, r8)
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	e000e010 	.word	0xe000e010
 8003804:	e000e018 	.word	0xe000e018
 8003808:	20000000 	.word	0x20000000
 800380c:	e000e014 	.word	0xe000e014

08003810 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b086      	sub	sp, #24
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003818:	2300      	movs	r3, #0
 800381a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800381c:	f7ff fbf2 	bl	8003004 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003820:	4b49      	ldr	r3, [pc, #292]	; (8003948 <pvPortMalloc+0x138>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d101      	bne.n	800382c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003828:	f000 f8e0 	bl	80039ec <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800382c:	4b47      	ldr	r3, [pc, #284]	; (800394c <pvPortMalloc+0x13c>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	4013      	ands	r3, r2
 8003834:	d000      	beq.n	8003838 <pvPortMalloc+0x28>
 8003836:	e079      	b.n	800392c <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d012      	beq.n	8003864 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 800383e:	2208      	movs	r2, #8
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	189b      	adds	r3, r3, r2
 8003844:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2207      	movs	r2, #7
 800384a:	4013      	ands	r3, r2
 800384c:	d00a      	beq.n	8003864 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2207      	movs	r2, #7
 8003852:	4393      	bics	r3, r2
 8003854:	3308      	adds	r3, #8
 8003856:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2207      	movs	r2, #7
 800385c:	4013      	ands	r3, r2
 800385e:	d001      	beq.n	8003864 <pvPortMalloc+0x54>
 8003860:	b672      	cpsid	i
 8003862:	e7fe      	b.n	8003862 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d060      	beq.n	800392c <pvPortMalloc+0x11c>
 800386a:	4b39      	ldr	r3, [pc, #228]	; (8003950 <pvPortMalloc+0x140>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	429a      	cmp	r2, r3
 8003872:	d85b      	bhi.n	800392c <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003874:	4b37      	ldr	r3, [pc, #220]	; (8003954 <pvPortMalloc+0x144>)
 8003876:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8003878:	4b36      	ldr	r3, [pc, #216]	; (8003954 <pvPortMalloc+0x144>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800387e:	e004      	b.n	800388a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	429a      	cmp	r2, r3
 8003892:	d903      	bls.n	800389c <pvPortMalloc+0x8c>
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d1f1      	bne.n	8003880 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800389c:	4b2a      	ldr	r3, [pc, #168]	; (8003948 <pvPortMalloc+0x138>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	697a      	ldr	r2, [r7, #20]
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d042      	beq.n	800392c <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	2208      	movs	r2, #8
 80038ac:	189b      	adds	r3, r3, r2
 80038ae:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	685a      	ldr	r2, [r3, #4]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	1ad2      	subs	r2, r2, r3
 80038c0:	2308      	movs	r3, #8
 80038c2:	005b      	lsls	r3, r3, #1
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d916      	bls.n	80038f6 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80038c8:	697a      	ldr	r2, [r7, #20]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	18d3      	adds	r3, r2, r3
 80038ce:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	2207      	movs	r2, #7
 80038d4:	4013      	ands	r3, r2
 80038d6:	d001      	beq.n	80038dc <pvPortMalloc+0xcc>
 80038d8:	b672      	cpsid	i
 80038da:	e7fe      	b.n	80038da <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	685a      	ldr	r2, [r3, #4]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	1ad2      	subs	r2, r2, r3
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	0018      	movs	r0, r3
 80038f2:	f000 f8db 	bl	8003aac <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80038f6:	4b16      	ldr	r3, [pc, #88]	; (8003950 <pvPortMalloc+0x140>)
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	1ad2      	subs	r2, r2, r3
 8003900:	4b13      	ldr	r3, [pc, #76]	; (8003950 <pvPortMalloc+0x140>)
 8003902:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003904:	4b12      	ldr	r3, [pc, #72]	; (8003950 <pvPortMalloc+0x140>)
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	4b13      	ldr	r3, [pc, #76]	; (8003958 <pvPortMalloc+0x148>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	429a      	cmp	r2, r3
 800390e:	d203      	bcs.n	8003918 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003910:	4b0f      	ldr	r3, [pc, #60]	; (8003950 <pvPortMalloc+0x140>)
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	4b10      	ldr	r3, [pc, #64]	; (8003958 <pvPortMalloc+0x148>)
 8003916:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	685a      	ldr	r2, [r3, #4]
 800391c:	4b0b      	ldr	r3, [pc, #44]	; (800394c <pvPortMalloc+0x13c>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	431a      	orrs	r2, r3
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	2200      	movs	r2, #0
 800392a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800392c:	f7ff fb76 	bl	800301c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2207      	movs	r2, #7
 8003934:	4013      	ands	r3, r2
 8003936:	d001      	beq.n	800393c <pvPortMalloc+0x12c>
 8003938:	b672      	cpsid	i
 800393a:	e7fe      	b.n	800393a <pvPortMalloc+0x12a>
	return pvReturn;
 800393c:	68fb      	ldr	r3, [r7, #12]
}
 800393e:	0018      	movs	r0, r3
 8003940:	46bd      	mov	sp, r7
 8003942:	b006      	add	sp, #24
 8003944:	bd80      	pop	{r7, pc}
 8003946:	46c0      	nop			; (mov r8, r8)
 8003948:	20001120 	.word	0x20001120
 800394c:	2000112c 	.word	0x2000112c
 8003950:	20001124 	.word	0x20001124
 8003954:	20001118 	.word	0x20001118
 8003958:	20001128 	.word	0x20001128

0800395c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d035      	beq.n	80039da <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800396e:	2308      	movs	r3, #8
 8003970:	425b      	negs	r3, r3
 8003972:	68fa      	ldr	r2, [r7, #12]
 8003974:	18d3      	adds	r3, r2, r3
 8003976:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	685a      	ldr	r2, [r3, #4]
 8003980:	4b18      	ldr	r3, [pc, #96]	; (80039e4 <vPortFree+0x88>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4013      	ands	r3, r2
 8003986:	d101      	bne.n	800398c <vPortFree+0x30>
 8003988:	b672      	cpsid	i
 800398a:	e7fe      	b.n	800398a <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d001      	beq.n	8003998 <vPortFree+0x3c>
 8003994:	b672      	cpsid	i
 8003996:	e7fe      	b.n	8003996 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	685a      	ldr	r2, [r3, #4]
 800399c:	4b11      	ldr	r3, [pc, #68]	; (80039e4 <vPortFree+0x88>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4013      	ands	r3, r2
 80039a2:	d01a      	beq.n	80039da <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d116      	bne.n	80039da <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	685a      	ldr	r2, [r3, #4]
 80039b0:	4b0c      	ldr	r3, [pc, #48]	; (80039e4 <vPortFree+0x88>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	43db      	mvns	r3, r3
 80039b6:	401a      	ands	r2, r3
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80039bc:	f7ff fb22 	bl	8003004 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	685a      	ldr	r2, [r3, #4]
 80039c4:	4b08      	ldr	r3, [pc, #32]	; (80039e8 <vPortFree+0x8c>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	18d2      	adds	r2, r2, r3
 80039ca:	4b07      	ldr	r3, [pc, #28]	; (80039e8 <vPortFree+0x8c>)
 80039cc:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	0018      	movs	r0, r3
 80039d2:	f000 f86b 	bl	8003aac <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80039d6:	f7ff fb21 	bl	800301c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80039da:	46c0      	nop			; (mov r8, r8)
 80039dc:	46bd      	mov	sp, r7
 80039de:	b004      	add	sp, #16
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	46c0      	nop			; (mov r8, r8)
 80039e4:	2000112c 	.word	0x2000112c
 80039e8:	20001124 	.word	0x20001124

080039ec <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80039f2:	23c0      	movs	r3, #192	; 0xc0
 80039f4:	011b      	lsls	r3, r3, #4
 80039f6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80039f8:	4b26      	ldr	r3, [pc, #152]	; (8003a94 <prvHeapInit+0xa8>)
 80039fa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2207      	movs	r2, #7
 8003a00:	4013      	ands	r3, r2
 8003a02:	d00c      	beq.n	8003a1e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	3307      	adds	r3, #7
 8003a08:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2207      	movs	r2, #7
 8003a0e:	4393      	bics	r3, r2
 8003a10:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003a12:	68ba      	ldr	r2, [r7, #8]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	1ad2      	subs	r2, r2, r3
 8003a18:	4b1e      	ldr	r3, [pc, #120]	; (8003a94 <prvHeapInit+0xa8>)
 8003a1a:	18d3      	adds	r3, r2, r3
 8003a1c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003a22:	4b1d      	ldr	r3, [pc, #116]	; (8003a98 <prvHeapInit+0xac>)
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003a28:	4b1b      	ldr	r3, [pc, #108]	; (8003a98 <prvHeapInit+0xac>)
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	68ba      	ldr	r2, [r7, #8]
 8003a32:	18d3      	adds	r3, r2, r3
 8003a34:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003a36:	2208      	movs	r2, #8
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	1a9b      	subs	r3, r3, r2
 8003a3c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2207      	movs	r2, #7
 8003a42:	4393      	bics	r3, r2
 8003a44:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003a46:	68fa      	ldr	r2, [r7, #12]
 8003a48:	4b14      	ldr	r3, [pc, #80]	; (8003a9c <prvHeapInit+0xb0>)
 8003a4a:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8003a4c:	4b13      	ldr	r3, [pc, #76]	; (8003a9c <prvHeapInit+0xb0>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	2200      	movs	r2, #0
 8003a52:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003a54:	4b11      	ldr	r3, [pc, #68]	; (8003a9c <prvHeapInit+0xb0>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	68fa      	ldr	r2, [r7, #12]
 8003a64:	1ad2      	subs	r2, r2, r3
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003a6a:	4b0c      	ldr	r3, [pc, #48]	; (8003a9c <prvHeapInit+0xb0>)
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	685a      	ldr	r2, [r3, #4]
 8003a76:	4b0a      	ldr	r3, [pc, #40]	; (8003aa0 <prvHeapInit+0xb4>)
 8003a78:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	685a      	ldr	r2, [r3, #4]
 8003a7e:	4b09      	ldr	r3, [pc, #36]	; (8003aa4 <prvHeapInit+0xb8>)
 8003a80:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003a82:	4b09      	ldr	r3, [pc, #36]	; (8003aa8 <prvHeapInit+0xbc>)
 8003a84:	2280      	movs	r2, #128	; 0x80
 8003a86:	0612      	lsls	r2, r2, #24
 8003a88:	601a      	str	r2, [r3, #0]
}
 8003a8a:	46c0      	nop			; (mov r8, r8)
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	b004      	add	sp, #16
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	46c0      	nop			; (mov r8, r8)
 8003a94:	20000518 	.word	0x20000518
 8003a98:	20001118 	.word	0x20001118
 8003a9c:	20001120 	.word	0x20001120
 8003aa0:	20001128 	.word	0x20001128
 8003aa4:	20001124 	.word	0x20001124
 8003aa8:	2000112c 	.word	0x2000112c

08003aac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b084      	sub	sp, #16
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003ab4:	4b27      	ldr	r3, [pc, #156]	; (8003b54 <prvInsertBlockIntoFreeList+0xa8>)
 8003ab6:	60fb      	str	r3, [r7, #12]
 8003ab8:	e002      	b.n	8003ac0 <prvInsertBlockIntoFreeList+0x14>
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	60fb      	str	r3, [r7, #12]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d8f7      	bhi.n	8003aba <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	68ba      	ldr	r2, [r7, #8]
 8003ad4:	18d3      	adds	r3, r2, r3
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d108      	bne.n	8003aee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	685a      	ldr	r2, [r3, #4]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	18d2      	adds	r2, r2, r3
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	68ba      	ldr	r2, [r7, #8]
 8003af8:	18d2      	adds	r2, r2, r3
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d118      	bne.n	8003b34 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	4b14      	ldr	r3, [pc, #80]	; (8003b58 <prvInsertBlockIntoFreeList+0xac>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d00d      	beq.n	8003b2a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	685a      	ldr	r2, [r3, #4]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	18d2      	adds	r2, r2, r3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	601a      	str	r2, [r3, #0]
 8003b28:	e008      	b.n	8003b3c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003b2a:	4b0b      	ldr	r3, [pc, #44]	; (8003b58 <prvInsertBlockIntoFreeList+0xac>)
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	601a      	str	r2, [r3, #0]
 8003b32:	e003      	b.n	8003b3c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003b3c:	68fa      	ldr	r2, [r7, #12]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d002      	beq.n	8003b4a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b4a:	46c0      	nop			; (mov r8, r8)
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	b004      	add	sp, #16
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	46c0      	nop			; (mov r8, r8)
 8003b54:	20001118 	.word	0x20001118
 8003b58:	20001120 	.word	0x20001120

08003b5c <__libc_init_array>:
 8003b5c:	b570      	push	{r4, r5, r6, lr}
 8003b5e:	2600      	movs	r6, #0
 8003b60:	4d0c      	ldr	r5, [pc, #48]	; (8003b94 <__libc_init_array+0x38>)
 8003b62:	4c0d      	ldr	r4, [pc, #52]	; (8003b98 <__libc_init_array+0x3c>)
 8003b64:	1b64      	subs	r4, r4, r5
 8003b66:	10a4      	asrs	r4, r4, #2
 8003b68:	42a6      	cmp	r6, r4
 8003b6a:	d109      	bne.n	8003b80 <__libc_init_array+0x24>
 8003b6c:	2600      	movs	r6, #0
 8003b6e:	f000 f821 	bl	8003bb4 <_init>
 8003b72:	4d0a      	ldr	r5, [pc, #40]	; (8003b9c <__libc_init_array+0x40>)
 8003b74:	4c0a      	ldr	r4, [pc, #40]	; (8003ba0 <__libc_init_array+0x44>)
 8003b76:	1b64      	subs	r4, r4, r5
 8003b78:	10a4      	asrs	r4, r4, #2
 8003b7a:	42a6      	cmp	r6, r4
 8003b7c:	d105      	bne.n	8003b8a <__libc_init_array+0x2e>
 8003b7e:	bd70      	pop	{r4, r5, r6, pc}
 8003b80:	00b3      	lsls	r3, r6, #2
 8003b82:	58eb      	ldr	r3, [r5, r3]
 8003b84:	4798      	blx	r3
 8003b86:	3601      	adds	r6, #1
 8003b88:	e7ee      	b.n	8003b68 <__libc_init_array+0xc>
 8003b8a:	00b3      	lsls	r3, r6, #2
 8003b8c:	58eb      	ldr	r3, [r5, r3]
 8003b8e:	4798      	blx	r3
 8003b90:	3601      	adds	r6, #1
 8003b92:	e7f2      	b.n	8003b7a <__libc_init_array+0x1e>
 8003b94:	08003c70 	.word	0x08003c70
 8003b98:	08003c70 	.word	0x08003c70
 8003b9c:	08003c70 	.word	0x08003c70
 8003ba0:	08003c74 	.word	0x08003c74

08003ba4 <memset>:
 8003ba4:	0003      	movs	r3, r0
 8003ba6:	1882      	adds	r2, r0, r2
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d100      	bne.n	8003bae <memset+0xa>
 8003bac:	4770      	bx	lr
 8003bae:	7019      	strb	r1, [r3, #0]
 8003bb0:	3301      	adds	r3, #1
 8003bb2:	e7f9      	b.n	8003ba8 <memset+0x4>

08003bb4 <_init>:
 8003bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bb6:	46c0      	nop			; (mov r8, r8)
 8003bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bba:	bc08      	pop	{r3}
 8003bbc:	469e      	mov	lr, r3
 8003bbe:	4770      	bx	lr

08003bc0 <_fini>:
 8003bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bc2:	46c0      	nop			; (mov r8, r8)
 8003bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bc6:	bc08      	pop	{r3}
 8003bc8:	469e      	mov	lr, r3
 8003bca:	4770      	bx	lr
