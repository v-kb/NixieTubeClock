
NixieTubeClock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b94  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08002c54  08002c54  00003c54  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c98  08002c98  00004084  2**0
                  CONTENTS
  4 .ARM          00000008  08002c98  08002c98  00003c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002ca0  08002ca0  00004084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ca0  08002ca0  00003ca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ca4  08002ca4  00003ca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08002ca8  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000850  20000084  08002d2c  00004084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008d4  08002d2c  000048d4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00004084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d6f7  00000000  00000000  000040ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004806  00000000  00000000  000217a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000aeda  00000000  00000000  00025fa9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001290  00000000  00000000  00030e88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000014ef  00000000  00000000  00032118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015446  00000000  00000000  00033607  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020aa7  00000000  00000000  00048a4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007741e  00000000  00000000  000694f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000e0912  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000032dc  00000000  00000000  000e0958  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005c  00000000  00000000  000e3c34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000084 	.word	0x20000084
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002c3c 	.word	0x08002c3c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000088 	.word	0x20000088
 8000104:	08002c3c 	.word	0x08002c3c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	@ (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	@ (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			@ (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			@ (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1824      	adds	r4, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	42a3      	cmp	r3, r4
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	@ 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c23      	lsrs	r3, r4, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0424      	lsls	r4, r4, #16
 80002ae:	1960      	adds	r0, r4, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			@ (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8d8 	bl	8000490 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8d3 	bl	8000490 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	d434      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f2:	469b      	mov	fp, r3
 80002f4:	4653      	mov	r3, sl
 80002f6:	465a      	mov	r2, fp
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83b      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e079      	b.n	8000402 <__udivmoddi4+0x146>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e076      	b.n	8000408 <__udivmoddi4+0x14c>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e029      	b.n	8000388 <__udivmoddi4+0xcc>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	469b      	mov	fp, r3
 8000360:	2320      	movs	r3, #32
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	40da      	lsrs	r2, r3
 8000368:	4641      	mov	r1, r8
 800036a:	0013      	movs	r3, r2
 800036c:	464a      	mov	r2, r9
 800036e:	408a      	lsls	r2, r1
 8000370:	0017      	movs	r7, r2
 8000372:	4642      	mov	r2, r8
 8000374:	431f      	orrs	r7, r3
 8000376:	4653      	mov	r3, sl
 8000378:	4093      	lsls	r3, r2
 800037a:	001e      	movs	r6, r3
 800037c:	42af      	cmp	r7, r5
 800037e:	d9c3      	bls.n	8000308 <__udivmoddi4+0x4c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	4643      	mov	r3, r8
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0d8      	beq.n	8000340 <__udivmoddi4+0x84>
 800038e:	07fb      	lsls	r3, r7, #31
 8000390:	0872      	lsrs	r2, r6, #1
 8000392:	431a      	orrs	r2, r3
 8000394:	4646      	mov	r6, r8
 8000396:	087b      	lsrs	r3, r7, #1
 8000398:	e00e      	b.n	80003b8 <__udivmoddi4+0xfc>
 800039a:	42ab      	cmp	r3, r5
 800039c:	d101      	bne.n	80003a2 <__udivmoddi4+0xe6>
 800039e:	42a2      	cmp	r2, r4
 80003a0:	d80c      	bhi.n	80003bc <__udivmoddi4+0x100>
 80003a2:	1aa4      	subs	r4, r4, r2
 80003a4:	419d      	sbcs	r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	1924      	adds	r4, r4, r4
 80003aa:	416d      	adcs	r5, r5
 80003ac:	2100      	movs	r1, #0
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1824      	adds	r4, r4, r0
 80003b2:	414d      	adcs	r5, r1
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d006      	beq.n	80003c6 <__udivmoddi4+0x10a>
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d9ee      	bls.n	800039a <__udivmoddi4+0xde>
 80003bc:	3e01      	subs	r6, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d1f8      	bne.n	80003b8 <__udivmoddi4+0xfc>
 80003c6:	9800      	ldr	r0, [sp, #0]
 80003c8:	9901      	ldr	r1, [sp, #4]
 80003ca:	465b      	mov	r3, fp
 80003cc:	1900      	adds	r0, r0, r4
 80003ce:	4169      	adcs	r1, r5
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	db24      	blt.n	800041e <__udivmoddi4+0x162>
 80003d4:	002b      	movs	r3, r5
 80003d6:	465a      	mov	r2, fp
 80003d8:	4644      	mov	r4, r8
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	40e2      	lsrs	r2, r4
 80003e0:	001c      	movs	r4, r3
 80003e2:	465b      	mov	r3, fp
 80003e4:	0015      	movs	r5, r2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db2a      	blt.n	8000440 <__udivmoddi4+0x184>
 80003ea:	0026      	movs	r6, r4
 80003ec:	409e      	lsls	r6, r3
 80003ee:	0033      	movs	r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	4647      	mov	r7, r8
 80003f4:	40be      	lsls	r6, r7
 80003f6:	0032      	movs	r2, r6
 80003f8:	1a80      	subs	r0, r0, r2
 80003fa:	4199      	sbcs	r1, r3
 80003fc:	9000      	str	r0, [sp, #0]
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	e79e      	b.n	8000340 <__udivmoddi4+0x84>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d8bc      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000406:	e782      	b.n	800030e <__udivmoddi4+0x52>
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	2100      	movs	r1, #0
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	9100      	str	r1, [sp, #0]
 8000414:	9201      	str	r2, [sp, #4]
 8000416:	2201      	movs	r2, #1
 8000418:	40da      	lsrs	r2, r3
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	e785      	b.n	800032a <__udivmoddi4+0x6e>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	4646      	mov	r6, r8
 8000428:	409a      	lsls	r2, r3
 800042a:	0023      	movs	r3, r4
 800042c:	40f3      	lsrs	r3, r6
 800042e:	4644      	mov	r4, r8
 8000430:	4313      	orrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	dad4      	bge.n	80003ea <__udivmoddi4+0x12e>
 8000440:	4642      	mov	r2, r8
 8000442:	002f      	movs	r7, r5
 8000444:	2320      	movs	r3, #32
 8000446:	0026      	movs	r6, r4
 8000448:	4097      	lsls	r7, r2
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	40de      	lsrs	r6, r3
 800044e:	003b      	movs	r3, r7
 8000450:	4333      	orrs	r3, r6
 8000452:	e7cd      	b.n	80003f0 <__udivmoddi4+0x134>

08000454 <__clzsi2>:
 8000454:	211c      	movs	r1, #28
 8000456:	2301      	movs	r3, #1
 8000458:	041b      	lsls	r3, r3, #16
 800045a:	4298      	cmp	r0, r3
 800045c:	d301      	bcc.n	8000462 <__clzsi2+0xe>
 800045e:	0c00      	lsrs	r0, r0, #16
 8000460:	3910      	subs	r1, #16
 8000462:	0a1b      	lsrs	r3, r3, #8
 8000464:	4298      	cmp	r0, r3
 8000466:	d301      	bcc.n	800046c <__clzsi2+0x18>
 8000468:	0a00      	lsrs	r0, r0, #8
 800046a:	3908      	subs	r1, #8
 800046c:	091b      	lsrs	r3, r3, #4
 800046e:	4298      	cmp	r0, r3
 8000470:	d301      	bcc.n	8000476 <__clzsi2+0x22>
 8000472:	0900      	lsrs	r0, r0, #4
 8000474:	3904      	subs	r1, #4
 8000476:	a202      	add	r2, pc, #8	@ (adr r2, 8000480 <__clzsi2+0x2c>)
 8000478:	5c10      	ldrb	r0, [r2, r0]
 800047a:	1840      	adds	r0, r0, r1
 800047c:	4770      	bx	lr
 800047e:	46c0      	nop			@ (mov r8, r8)
 8000480:	02020304 	.word	0x02020304
 8000484:	01010101 	.word	0x01010101
	...

08000490 <__clzdi2>:
 8000490:	b510      	push	{r4, lr}
 8000492:	2900      	cmp	r1, #0
 8000494:	d103      	bne.n	800049e <__clzdi2+0xe>
 8000496:	f7ff ffdd 	bl	8000454 <__clzsi2>
 800049a:	3020      	adds	r0, #32
 800049c:	e002      	b.n	80004a4 <__clzdi2+0x14>
 800049e:	0008      	movs	r0, r1
 80004a0:	f7ff ffd8 	bl	8000454 <__clzsi2>
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <btns_init>:


/*
 * @brief	Set defaults, add timer handle and start it
 */
HAL_StatusTypeDef btns_init(Buttons_HandleTypeDef *hbtns, Button_InitTypeDef user_buttons[], uint8_t num_of_buttons, TIM_HandleTypeDef *htim, State_TypeDef default_state) {
 80004a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80004aa:	001e      	movs	r6, r3
 80004ac:	ab08      	add	r3, sp, #32
 80004ae:	781b      	ldrb	r3, [r3, #0]
 80004b0:	0004      	movs	r4, r0
 80004b2:	9301      	str	r3, [sp, #4]
	assert_param(hbtns 			== NULL);
	assert_param(user_buttons 	== NULL);
	assert_param(htim 			== NULL);

	if(num_of_buttons > MAX_NUMBER_OF_BUTTONS)
		return HAL_ERROR;
 80004b4:	2001      	movs	r0, #1
	if(num_of_buttons > MAX_NUMBER_OF_BUTTONS)
 80004b6:	2a03      	cmp	r2, #3
 80004b8:	d82d      	bhi.n	8000516 <btns_init+0x6e>

	hbtns->num_of_buttons	= num_of_buttons;
 80004ba:	0023      	movs	r3, r4
 80004bc:	3360      	adds	r3, #96	@ 0x60
 80004be:	701a      	strb	r2, [r3, #0]

	/*
	 * Register button parameters and fill additional fields
	 */
	for(int id = 0; id < num_of_buttons; ++id) {
		hbtns->list[id].mask			= 1 << id;					// Create unique bitmask
 80004c0:	2301      	movs	r3, #1
 80004c2:	0025      	movs	r5, r4
	for(int id = 0; id < num_of_buttons; ++id) {
 80004c4:	2000      	movs	r0, #0
		hbtns->list[id].mask			= 1 << id;					// Create unique bitmask
 80004c6:	469c      	mov	ip, r3
	hbtns->htim 			= htim;										// Set dedicated to buttons timer
 80004c8:	66a6      	str	r6, [r4, #104]	@ 0x68
	for(int id = 0; id < num_of_buttons; ++id) {
 80004ca:	3514      	adds	r5, #20
 80004cc:	4282      	cmp	r2, r0
 80004ce:	dc23      	bgt.n	8000518 <btns_init+0x70>
	hbtns->pressed_btns_mask	= 0; 			// Reset buttons mask
 80004d0:	0023      	movs	r3, r4
 80004d2:	2500      	movs	r5, #0
	btns_state_set(hbtns, default_state);

	/*
	 * Set max count for long presses, e.g. 1000ms/50ms = 20
	 */
	hold_1s_cnt 	= 1000/hbtns->htim->Init.Period;
 80004d4:	20fa      	movs	r0, #250	@ 0xfa
	hbtns->state_current		= new_state;
 80004d6:	9a01      	ldr	r2, [sp, #4]
	hbtns->pressed_btns_mask	= 0; 			// Reset buttons mask
 80004d8:	3362      	adds	r3, #98	@ 0x62
	hbtns->state_current		= new_state;
 80004da:	709a      	strb	r2, [r3, #2]
	hbtns->state_previous		= new_state;
 80004dc:	70da      	strb	r2, [r3, #3]
	hbtns->hold_s		= 0;
 80004de:	711d      	strb	r5, [r3, #4]
	hold_1s_cnt 	= 1000/hbtns->htim->Init.Period;
 80004e0:	68f1      	ldr	r1, [r6, #12]
	hbtns->pressed_btns_mask	= 0; 			// Reset buttons mask
 80004e2:	801d      	strh	r5, [r3, #0]
	hold_1s_cnt 	= 1000/hbtns->htim->Init.Period;
 80004e4:	0080      	lsls	r0, r0, #2
 80004e6:	f7ff fe0f 	bl	8000108 <__udivsi3>
 80004ea:	4f14      	ldr	r7, [pc, #80]	@ (800053c <btns_init+0x94>)
 80004ec:	7038      	strb	r0, [r7, #0]
	HAL_TIM_StateTypeDef timer_status = HAL_TIM_Base_GetState(hbtns->htim);
 80004ee:	0030      	movs	r0, r6
 80004f0:	f001 ffb7 	bl	8002462 <HAL_TIM_Base_GetState>
	if (timer_status == HAL_TIM_STATE_READY) {
 80004f4:	2801      	cmp	r0, #1
 80004f6:	d10e      	bne.n	8000516 <btns_init+0x6e>
		FIX_TIMER_TRIGGER(hbtns->htim);
 80004f8:	2202      	movs	r2, #2
 80004fa:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 80004fc:	4252      	negs	r2, r2
 80004fe:	6803      	ldr	r3, [r0, #0]
 8000500:	611a      	str	r2, [r3, #16]
		timer_status += HAL_TIM_Base_Start_IT(hbtns->htim);
 8000502:	f001 fd57 	bl	8001fb4 <HAL_TIM_Base_Start_IT>
		timer_status += HAL_TIM_OC_Start_IT(hbtns->htim, TIM_CHANNEL_1);
 8000506:	0029      	movs	r1, r5
		timer_status += HAL_TIM_Base_Start_IT(hbtns->htim);
 8000508:	0006      	movs	r6, r0
		timer_status += HAL_TIM_OC_Start_IT(hbtns->htim, TIM_CHANNEL_1);
 800050a:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 800050c:	f001 fd7c 	bl	8002008 <HAL_TIM_OC_Start_IT>
 8000510:	1830      	adds	r0, r6, r0
 8000512:	3001      	adds	r0, #1
 8000514:	b2c0      	uxtb	r0, r0

	/*
	 * Start the timer
	 */
	return btns_timer_start(hbtns);
}
 8000516:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		hbtns->list[id].mask			= 1 << id;					// Create unique bitmask
 8000518:	4663      	mov	r3, ip
 800051a:	4083      	lsls	r3, r0
 800051c:	802b      	strh	r3, [r5, #0]
		hbtns->list[id].port 			= user_buttons[id].port;
 800051e:	680b      	ldr	r3, [r1, #0]
	for(int id = 0; id < num_of_buttons; ++id) {
 8000520:	3001      	adds	r0, #1
		hbtns->list[id].port 			= user_buttons[id].port;
 8000522:	606b      	str	r3, [r5, #4]
		hbtns->list[id].pin 			= user_buttons[id].pin;
 8000524:	888b      	ldrh	r3, [r1, #4]
 8000526:	812b      	strh	r3, [r5, #8]
		hbtns->list[id].state_active 	= user_buttons[id].state_active;
 8000528:	798b      	ldrb	r3, [r1, #6]
 800052a:	3108      	adds	r1, #8
 800052c:	72ab      	strb	r3, [r5, #10]
		hbtns->list[id].state 			= user_buttons[id].state_active == GPIO_PIN_SET ? GPIO_PIN_RESET : GPIO_PIN_SET; // By default lvl_en is opposite of active
 800052e:	3b01      	subs	r3, #1
 8000530:	1e5f      	subs	r7, r3, #1
 8000532:	41bb      	sbcs	r3, r7
 8000534:	72eb      	strb	r3, [r5, #11]
	for(int id = 0; id < num_of_buttons; ++id) {
 8000536:	3520      	adds	r5, #32
 8000538:	e7c8      	b.n	80004cc <btns_init+0x24>
 800053a:	46c0      	nop			@ (mov r8, r8)
 800053c:	200000ac 	.word	0x200000ac

08000540 <btns_check>:
void btns_check(Buttons_HandleTypeDef *hbtns) {
 8000540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	hbtns->state_current = RELEASED;
 8000542:	0007      	movs	r7, r0
 8000544:	2500      	movs	r5, #0
 8000546:	0006      	movs	r6, r0
void btns_check(Buttons_HandleTypeDef *hbtns) {
 8000548:	0004      	movs	r4, r0
	hbtns->state_current = RELEASED;
 800054a:	3764      	adds	r7, #100	@ 0x64
 800054c:	703d      	strb	r5, [r7, #0]
	for(int i = 0; i < hbtns->num_of_buttons; ++i) {
 800054e:	3614      	adds	r6, #20
 8000550:	0023      	movs	r3, r4
 8000552:	3360      	adds	r3, #96	@ 0x60
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	429d      	cmp	r5, r3
 8000558:	db11      	blt.n	800057e <btns_check+0x3e>
	if (hbtns->state_current != hbtns->state_previous) {
 800055a:	0022      	movs	r2, r4
 800055c:	3265      	adds	r2, #101	@ 0x65
 800055e:	783b      	ldrb	r3, [r7, #0]
 8000560:	7812      	ldrb	r2, [r2, #0]
 8000562:	4293      	cmp	r3, r2
 8000564:	d027      	beq.n	80005b6 <btns_check+0x76>
		if (hbtns->state_current == PRESSED) {
 8000566:	0025      	movs	r5, r4
 8000568:	3466      	adds	r4, #102	@ 0x66
 800056a:	3562      	adds	r5, #98	@ 0x62
 800056c:	2b01      	cmp	r3, #1
 800056e:	d118      	bne.n	80005a2 <btns_check+0x62>
	hbtns->state_current		= new_state;
 8000570:	2202      	movs	r2, #2
	hbtns->pressed_btns_mask	= 0; 			// Reset buttons mask
 8000572:	2300      	movs	r3, #0
	hbtns->state_current		= new_state;
 8000574:	32ff      	adds	r2, #255	@ 0xff
	hbtns->pressed_btns_mask	= 0; 			// Reset buttons mask
 8000576:	802b      	strh	r3, [r5, #0]
	hbtns->state_current		= new_state;
 8000578:	803a      	strh	r2, [r7, #0]
	hbtns->hold_s		= 0;
 800057a:	7023      	strb	r3, [r4, #0]
}
 800057c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		gpio_state = HAL_GPIO_ReadPin(hbtns->list[i].port, hbtns->list[i].pin);
 800057e:	8931      	ldrh	r1, [r6, #8]
 8000580:	6870      	ldr	r0, [r6, #4]
 8000582:	f001 f857 	bl	8001634 <HAL_GPIO_ReadPin>
		if(gpio_state == hbtns->list[i].state_active) {
 8000586:	7ab3      	ldrb	r3, [r6, #10]
 8000588:	4283      	cmp	r3, r0
 800058a:	d107      	bne.n	800059c <btns_check+0x5c>
			hbtns->pressed_btns_mask |= hbtns->list[i].mask;
 800058c:	0022      	movs	r2, r4
 800058e:	3262      	adds	r2, #98	@ 0x62
 8000590:	8813      	ldrh	r3, [r2, #0]
 8000592:	8831      	ldrh	r1, [r6, #0]
 8000594:	430b      	orrs	r3, r1
 8000596:	8013      	strh	r3, [r2, #0]
			hbtns->state_current = PRESSED;
 8000598:	2301      	movs	r3, #1
 800059a:	703b      	strb	r3, [r7, #0]
	for(int i = 0; i < hbtns->num_of_buttons; ++i) {
 800059c:	3501      	adds	r5, #1
 800059e:	3620      	adds	r6, #32
 80005a0:	e7d6      	b.n	8000550 <btns_check+0x10>
			if (hbtns->hold_s < 2) {
 80005a2:	7821      	ldrb	r1, [r4, #0]
 80005a4:	2901      	cmp	r1, #1
 80005a6:	d802      	bhi.n	80005ae <btns_check+0x6e>
				btns_callback(hbtns->pressed_btns_mask, hbtns->hold_s);
 80005a8:	8828      	ldrh	r0, [r5, #0]
 80005aa:	f000 f821 	bl	80005f0 <btns_callback>
	hbtns->pressed_btns_mask	= 0; 			// Reset buttons mask
 80005ae:	2300      	movs	r3, #0
 80005b0:	802b      	strh	r3, [r5, #0]
	hbtns->state_current		= new_state;
 80005b2:	803b      	strh	r3, [r7, #0]
 80005b4:	e7e1      	b.n	800057a <btns_check+0x3a>
		if(hbtns->state_previous == PRESSED) {
 80005b6:	2b01      	cmp	r3, #1
 80005b8:	d1e0      	bne.n	800057c <btns_check+0x3c>
			if(++cnt > hold_1s_cnt) {
 80005ba:	4a0b      	ldr	r2, [pc, #44]	@ (80005e8 <btns_check+0xa8>)
 80005bc:	490b      	ldr	r1, [pc, #44]	@ (80005ec <btns_check+0xac>)
 80005be:	7813      	ldrb	r3, [r2, #0]
 80005c0:	7809      	ldrb	r1, [r1, #0]
 80005c2:	3301      	adds	r3, #1
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	7013      	strb	r3, [r2, #0]
 80005c8:	4299      	cmp	r1, r3
 80005ca:	d2d7      	bcs.n	800057c <btns_check+0x3c>
				cnt = 0;
 80005cc:	2300      	movs	r3, #0
 80005ce:	7013      	strb	r3, [r2, #0]
				++hbtns->hold_s;
 80005d0:	0023      	movs	r3, r4
 80005d2:	3366      	adds	r3, #102	@ 0x66
 80005d4:	7819      	ldrb	r1, [r3, #0]
				btns_callback(hbtns->pressed_btns_mask, hbtns->hold_s);
 80005d6:	3462      	adds	r4, #98	@ 0x62
				++hbtns->hold_s;
 80005d8:	3101      	adds	r1, #1
 80005da:	b2c9      	uxtb	r1, r1
 80005dc:	7019      	strb	r1, [r3, #0]
				btns_callback(hbtns->pressed_btns_mask, hbtns->hold_s);
 80005de:	8820      	ldrh	r0, [r4, #0]
 80005e0:	f000 f806 	bl	80005f0 <btns_callback>
}
 80005e4:	e7ca      	b.n	800057c <btns_check+0x3c>
 80005e6:	46c0      	nop			@ (mov r8, r8)
 80005e8:	200000a0 	.word	0x200000a0
 80005ec:	200000ac 	.word	0x200000ac

080005f0 <btns_callback>:

extern uint8_t duty_cycles[4];


void btns_callback(uint16_t mask, PressType_TypeDef press_type) {
	shared_mask 		= mask;
 80005f0:	4b02      	ldr	r3, [pc, #8]	@ (80005fc <btns_callback+0xc>)
 80005f2:	6018      	str	r0, [r3, #0]
	shared_press_type 	= press_type;
 80005f4:	4b02      	ldr	r3, [pc, #8]	@ (8000600 <btns_callback+0x10>)
 80005f6:	6019      	str	r1, [r3, #0]
}
 80005f8:	4770      	bx	lr
 80005fa:	46c0      	nop			@ (mov r8, r8)
 80005fc:	200000a8 	.word	0x200000a8
 8000600:	200000a4 	.word	0x200000a4

08000604 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
	static uint32_t count_50_ms = 0;
	if(htim == &htim2) {
 8000604:	4b10      	ldr	r3, [pc, #64]	@ (8000648 <HAL_TIM_PeriodElapsedCallback+0x44>)
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000606:	b510      	push	{r4, lr}
 8000608:	0004      	movs	r4, r0
	if(htim == &htim2) {
 800060a:	4298      	cmp	r0, r3
 800060c:	d107      	bne.n	800061e <HAL_TIM_PeriodElapsedCallback+0x1a>
		bitmask_set(); // restore values
 800060e:	f000 fa87 	bl	8000b20 <bitmask_set>
		if(!flag_upd_tubes)
 8000612:	4b0e      	ldr	r3, [pc, #56]	@ (800064c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000614:	781a      	ldrb	r2, [r3, #0]
 8000616:	2a00      	cmp	r2, #0
 8000618:	d101      	bne.n	800061e <HAL_TIM_PeriodElapsedCallback+0x1a>
			flag_upd_tubes = 1;
 800061a:	3201      	adds	r2, #1
 800061c:	701a      	strb	r2, [r3, #0]
	}

	if(htim == &htim21) {
 800061e:	4b0c      	ldr	r3, [pc, #48]	@ (8000650 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000620:	429c      	cmp	r4, r3
 8000622:	d10f      	bne.n	8000644 <HAL_TIM_PeriodElapsedCallback+0x40>
		++count_50_ms;
 8000624:	4a0b      	ldr	r2, [pc, #44]	@ (8000654 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000626:	6813      	ldr	r3, [r2, #0]
 8000628:	3301      	adds	r3, #1
 800062a:	6013      	str	r3, [r2, #0]
		if (count_50_ms >= 20) {
 800062c:	2b13      	cmp	r3, #19
 800062e:	d906      	bls.n	800063e <HAL_TIM_PeriodElapsedCallback+0x3a>
			flag_upd_time = 1;
 8000630:	2101      	movs	r1, #1
 8000632:	4b09      	ldr	r3, [pc, #36]	@ (8000658 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000634:	7019      	strb	r1, [r3, #0]
			flag_upd_dots = 1;
 8000636:	4b09      	ldr	r3, [pc, #36]	@ (800065c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000638:	7019      	strb	r1, [r3, #0]
			count_50_ms = 0;
 800063a:	2300      	movs	r3, #0
 800063c:	6013      	str	r3, [r2, #0]
		}
		if (count_50_ms % 1000 == 0) {
		}
		btns_check(&hbtns);
 800063e:	4808      	ldr	r0, [pc, #32]	@ (8000660 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000640:	f7ff ff7e 	bl	8000540 <btns_check>
	}
}
 8000644:	bd10      	pop	{r4, pc}
 8000646:	46c0      	nop			@ (mov r8, r8)
 8000648:	20000280 	.word	0x20000280
 800064c:	200008a7 	.word	0x200008a7
 8000650:	20000240 	.word	0x20000240
 8000654:	200000b0 	.word	0x200000b0
 8000658:	200008a6 	.word	0x200008a6
 800065c:	200008a5 	.word	0x200008a5
 8000660:	200000b4 	.word	0x200000b4

08000664 <HAL_TIM_PWM_PulseFinishedCallback>:

/*
 * After duty cycle elapsed we set data for shift registers to zero
 */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
	if(htim == &htim2) {
 8000664:	4b04      	ldr	r3, [pc, #16]	@ (8000678 <HAL_TIM_PWM_PulseFinishedCallback+0x14>)
 8000666:	4283      	cmp	r3, r0
 8000668:	d105      	bne.n	8000676 <HAL_TIM_PWM_PulseFinishedCallback+0x12>
//			case HAL_TIM_ACTIVE_CHANNEL_2: clock_data.bitmask.tube[1] = 0; break;
//			case HAL_TIM_ACTIVE_CHANNEL_3: clock_data.bitmask.tube[2] = 0; break;
//			case HAL_TIM_ACTIVE_CHANNEL_4: clock_data.bitmask.tube[3] = 0; break;
//			default: break;
//		}
		if(!flag_upd_tubes)
 800066a:	4b04      	ldr	r3, [pc, #16]	@ (800067c <HAL_TIM_PWM_PulseFinishedCallback+0x18>)
 800066c:	781a      	ldrb	r2, [r3, #0]
 800066e:	2a00      	cmp	r2, #0
 8000670:	d101      	bne.n	8000676 <HAL_TIM_PWM_PulseFinishedCallback+0x12>
			flag_upd_tubes = 1;
 8000672:	3201      	adds	r2, #1
 8000674:	701a      	strb	r2, [r3, #0]
	}
}
 8000676:	4770      	bx	lr
 8000678:	20000280 	.word	0x20000280
 800067c:	200008a7 	.word	0x200008a7

08000680 <SystemClock_Config>:
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000680:	2201      	movs	r2, #1
 8000682:	4930      	ldr	r1, [pc, #192]	@ (8000744 <SystemClock_Config+0xc4>)
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000684:	b570      	push	{r4, r5, r6, lr}
 8000686:	680b      	ldr	r3, [r1, #0]
 8000688:	4393      	bics	r3, r2
 800068a:	4313      	orrs	r3, r2
 800068c:	600b      	str	r3, [r1, #0]
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800068e:	680b      	ldr	r3, [r1, #0]
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_1)
 8000690:	4213      	tst	r3, r2
 8000692:	d0fc      	beq.n	800068e <SystemClock_Config+0xe>
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8000694:	4b2c      	ldr	r3, [pc, #176]	@ (8000748 <SystemClock_Config+0xc8>)
 8000696:	4a2d      	ldr	r2, [pc, #180]	@ (800074c <SystemClock_Config+0xcc>)
 8000698:	6819      	ldr	r1, [r3, #0]
 800069a:	4011      	ands	r1, r2
 800069c:	2280      	movs	r2, #128	@ 0x80
 800069e:	0112      	lsls	r2, r2, #4
 80006a0:	430a      	orrs	r2, r1
 80006a2:	601a      	str	r2, [r3, #0]
  * @rmtoll CSR   VOSF       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
  return (READ_BIT(PWR->CSR, LL_PWR_CSR_VOS) == (LL_PWR_CSR_VOS));
 80006a4:	2210      	movs	r2, #16
 80006a6:	6859      	ldr	r1, [r3, #4]
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
  while (LL_PWR_IsActiveFlag_VOS() == 0)
 80006a8:	4211      	tst	r1, r2
 80006aa:	d0fc      	beq.n	80006a6 <SystemClock_Config+0x26>
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80006ac:	2301      	movs	r3, #1
 80006ae:	4c28      	ldr	r4, [pc, #160]	@ (8000750 <SystemClock_Config+0xd0>)
 80006b0:	6822      	ldr	r2, [r4, #0]
 80006b2:	4313      	orrs	r3, r2
 80006b4:	6023      	str	r3, [r4, #0]
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 80006b6:	2304      	movs	r3, #4
 80006b8:	6822      	ldr	r2, [r4, #0]
 80006ba:	421a      	tst	r2, r3
 80006bc:	d0fc      	beq.n	80006b8 <SystemClock_Config+0x38>
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80006be:	6862      	ldr	r2, [r4, #4]
 80006c0:	4b24      	ldr	r3, [pc, #144]	@ (8000754 <SystemClock_Config+0xd4>)
 80006c2:	401a      	ands	r2, r3
 80006c4:	2380      	movs	r3, #128	@ 0x80
 80006c6:	015b      	lsls	r3, r3, #5
 80006c8:	4313      	orrs	r3, r2
 80006ca:	6063      	str	r3, [r4, #4]
  *         @arg @ref LL_RCC_PLL_DIV_4
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul, uint32_t PLLDiv)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL | RCC_CFGR_PLLDIV, Source | PLLMul | PLLDiv);
 80006cc:	68e2      	ldr	r2, [r4, #12]
 80006ce:	4b22      	ldr	r3, [pc, #136]	@ (8000758 <SystemClock_Config+0xd8>)
 80006d0:	401a      	ands	r2, r3
 80006d2:	2388      	movs	r3, #136	@ 0x88
 80006d4:	03db      	lsls	r3, r3, #15
 80006d6:	4313      	orrs	r3, r2
 80006d8:	60e3      	str	r3, [r4, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80006da:	2380      	movs	r3, #128	@ 0x80
 80006dc:	6822      	ldr	r2, [r4, #0]
 80006de:	045b      	lsls	r3, r3, #17
 80006e0:	4313      	orrs	r3, r2
 80006e2:	6023      	str	r3, [r4, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 80006e4:	2380      	movs	r3, #128	@ 0x80
 80006e6:	049b      	lsls	r3, r3, #18
 80006e8:	6822      	ldr	r2, [r4, #0]
 80006ea:	421a      	tst	r2, r3
 80006ec:	d0fc      	beq.n	80006e8 <SystemClock_Config+0x68>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80006ee:	22f0      	movs	r2, #240	@ 0xf0
 80006f0:	68e3      	ldr	r3, [r4, #12]
 80006f2:	4393      	bics	r3, r2
 80006f4:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80006f6:	68e3      	ldr	r3, [r4, #12]
 80006f8:	4a18      	ldr	r2, [pc, #96]	@ (800075c <SystemClock_Config+0xdc>)
 80006fa:	4013      	ands	r3, r2
 80006fc:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80006fe:	68e3      	ldr	r3, [r4, #12]
 8000700:	4a17      	ldr	r2, [pc, #92]	@ (8000760 <SystemClock_Config+0xe0>)
 8000702:	4013      	ands	r3, r2
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000704:	2203      	movs	r2, #3
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000706:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000708:	68e3      	ldr	r3, [r4, #12]
 800070a:	4313      	orrs	r3, r2
 800070c:	60e3      	str	r3, [r4, #12]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800070e:	230c      	movs	r3, #12
 8000710:	68e5      	ldr	r5, [r4, #12]
 8000712:	401d      	ands	r5, r3
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000714:	2d0c      	cmp	r5, #12
 8000716:	d1fb      	bne.n	8000710 <SystemClock_Config+0x90>
  {

  }
  LL_SetSystemCoreClock(32000000);
 8000718:	4812      	ldr	r0, [pc, #72]	@ (8000764 <SystemClock_Config+0xe4>)
 800071a:	f002 f921 	bl	8002960 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 800071e:	2003      	movs	r0, #3
 8000720:	f000 fcbc 	bl	800109c <HAL_InitTick>
 8000724:	2800      	cmp	r0, #0
 8000726:	d001      	beq.n	800072c <SystemClock_Config+0xac>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000728:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800072a:	e7fe      	b.n	800072a <SystemClock_Config+0xaa>
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 800072c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800072e:	4a0e      	ldr	r2, [pc, #56]	@ (8000768 <SystemClock_Config+0xe8>)
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8000730:	43ab      	bics	r3, r5
 8000732:	64e3      	str	r3, [r4, #76]	@ 0x4c
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8000734:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8000736:	4013      	ands	r3, r2
 8000738:	64e3      	str	r3, [r4, #76]	@ 0x4c
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4U) & 0x000FF000U), ((I2CxSource << 4U) & 0x000FF000U));
 800073a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800073c:	4a0b      	ldr	r2, [pc, #44]	@ (800076c <SystemClock_Config+0xec>)
 800073e:	4013      	ands	r3, r2
 8000740:	64e3      	str	r3, [r4, #76]	@ 0x4c
}
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	40022000 	.word	0x40022000
 8000748:	40007000 	.word	0x40007000
 800074c:	ffffe7ff 	.word	0xffffe7ff
 8000750:	40021000 	.word	0x40021000
 8000754:	ffffe0ff 	.word	0xffffe0ff
 8000758:	ff02ffff 	.word	0xff02ffff
 800075c:	fffff8ff 	.word	0xfffff8ff
 8000760:	ffffc7ff 	.word	0xffffc7ff
 8000764:	01e84800 	.word	0x01e84800
 8000768:	fffff3ff 	.word	0xfffff3ff
 800076c:	ffffcfff 	.word	0xffffcfff

08000770 <main>:
{
 8000770:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000772:	b093      	sub	sp, #76	@ 0x4c
  HAL_Init();
 8000774:	f000 fcb6 	bl	80010e4 <HAL_Init>
  SystemClock_Config();
 8000778:	f7ff ff82 	bl	8000680 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077c:	2214      	movs	r2, #20
 800077e:	2100      	movs	r1, #0
 8000780:	a80d      	add	r0, sp, #52	@ 0x34
 8000782:	f002 fa2f 	bl	8002be4 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000786:	2204      	movs	r2, #4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000788:	2501      	movs	r5, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078a:	2702      	movs	r7, #2
  HAL_GPIO_WritePin(GPIOC, DIMM_LED_1_Pin|DIMM_LED_2_Pin, GPIO_PIN_RESET);
 800078c:	24c0      	movs	r4, #192	@ 0xc0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800078e:	4ecb      	ldr	r6, [pc, #812]	@ (8000abc <main+0x34c>)
  HAL_GPIO_WritePin(GPIOC, DIMM_LED_1_Pin|DIMM_LED_2_Pin, GPIO_PIN_RESET);
 8000790:	0224      	lsls	r4, r4, #8
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000792:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
  HAL_GPIO_WritePin(GPIOC, DIMM_LED_1_Pin|DIMM_LED_2_Pin, GPIO_PIN_RESET);
 8000794:	0021      	movs	r1, r4
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000796:	4313      	orrs	r3, r2
 8000798:	62f3      	str	r3, [r6, #44]	@ 0x2c
 800079a:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
  HAL_GPIO_WritePin(GPIOC, DIMM_LED_1_Pin|DIMM_LED_2_Pin, GPIO_PIN_RESET);
 800079c:	48c8      	ldr	r0, [pc, #800]	@ (8000ac0 <main+0x350>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800079e:	4013      	ands	r3, r2
 80007a0:	9304      	str	r3, [sp, #16]
 80007a2:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a4:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
  HAL_GPIO_WritePin(GPIOC, DIMM_LED_1_Pin|DIMM_LED_2_Pin, GPIO_PIN_RESET);
 80007a6:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a8:	432b      	orrs	r3, r5
 80007aa:	62f3      	str	r3, [r6, #44]	@ 0x2c
 80007ac:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
 80007ae:	402b      	ands	r3, r5
 80007b0:	9305      	str	r3, [sp, #20]
 80007b2:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b4:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
 80007b6:	433b      	orrs	r3, r7
 80007b8:	62f3      	str	r3, [r6, #44]	@ 0x2c
 80007ba:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
 80007bc:	403b      	ands	r3, r7
 80007be:	9306      	str	r3, [sp, #24]
 80007c0:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOC, DIMM_LED_1_Pin|DIMM_LED_2_Pin, GPIO_PIN_RESET);
 80007c2:	f000 ff3d 	bl	8001640 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TXS_OE_GPIO_Port, TXS_OE_Pin, GPIO_PIN_SET);
 80007c6:	20a0      	movs	r0, #160	@ 0xa0
 80007c8:	002a      	movs	r2, r5
 80007ca:	0039      	movs	r1, r7
 80007cc:	05c0      	lsls	r0, r0, #23
 80007ce:	f000 ff37 	bl	8001640 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SHDN_170V_3V3_Pin|INS_EN_3V3_Pin|DIN_3V3_Pin|OE_3V3_Pin, GPIO_PIN_RESET);
 80007d2:	20a0      	movs	r0, #160	@ 0xa0
 80007d4:	2200      	movs	r2, #0
 80007d6:	21f0      	movs	r1, #240	@ 0xf0
 80007d8:	05c0      	lsls	r0, r0, #23
 80007da:	f000 ff31 	bl	8001640 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, RCK_3V3_Pin|SCK_3V3_Pin, GPIO_PIN_RESET);
 80007de:	2200      	movs	r2, #0
 80007e0:	2103      	movs	r1, #3
 80007e2:	48b8      	ldr	r0, [pc, #736]	@ (8000ac4 <main+0x354>)
 80007e4:	f000 ff2c 	bl	8001640 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = DIMM_LED_1_Pin|DIMM_LED_2_Pin;
 80007e8:	940d      	str	r4, [sp, #52]	@ 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	2400      	movs	r4, #0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007ec:	48b4      	ldr	r0, [pc, #720]	@ (8000ac0 <main+0x350>)
 80007ee:	a90d      	add	r1, sp, #52	@ 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f0:	950e      	str	r5, [sp, #56]	@ 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	940f      	str	r4, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f4:	9410      	str	r4, [sp, #64]	@ 0x40
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007f6:	f000 fe69 	bl	80014cc <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007fa:	20a0      	movs	r0, #160	@ 0xa0
  GPIO_InitStruct.Pin = BTN_4_Pin|INT_SQW_Pin|INT_OPT_Pin|JDY_STAT_Pin
 80007fc:	4bb2      	ldr	r3, [pc, #712]	@ (8000ac8 <main+0x358>)
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007fe:	a90d      	add	r1, sp, #52	@ 0x34
 8000800:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = BTN_4_Pin|INT_SQW_Pin|INT_OPT_Pin|JDY_STAT_Pin
 8000802:	930d      	str	r3, [sp, #52]	@ 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000804:	940e      	str	r4, [sp, #56]	@ 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000806:	940f      	str	r4, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000808:	f000 fe60 	bl	80014cc <HAL_GPIO_Init>
  HAL_GPIO_Init(TXS_OE_GPIO_Port, &GPIO_InitStruct);
 800080c:	20a0      	movs	r0, #160	@ 0xa0
 800080e:	a90d      	add	r1, sp, #52	@ 0x34
 8000810:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = TXS_OE_Pin;
 8000812:	970d      	str	r7, [sp, #52]	@ 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000814:	950e      	str	r5, [sp, #56]	@ 0x38
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000816:	950f      	str	r5, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000818:	9410      	str	r4, [sp, #64]	@ 0x40
  HAL_GPIO_Init(TXS_OE_GPIO_Port, &GPIO_InitStruct);
 800081a:	f000 fe57 	bl	80014cc <HAL_GPIO_Init>
  HAL_GPIO_Init(SHDN_170V_3V3_GPIO_Port, &GPIO_InitStruct);
 800081e:	20a0      	movs	r0, #160	@ 0xa0
  GPIO_InitStruct.Pin = SHDN_170V_3V3_Pin;
 8000820:	2310      	movs	r3, #16
  HAL_GPIO_Init(SHDN_170V_3V3_GPIO_Port, &GPIO_InitStruct);
 8000822:	a90d      	add	r1, sp, #52	@ 0x34
 8000824:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = SHDN_170V_3V3_Pin;
 8000826:	930d      	str	r3, [sp, #52]	@ 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000828:	950e      	str	r5, [sp, #56]	@ 0x38
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800082a:	970f      	str	r7, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082c:	9410      	str	r4, [sp, #64]	@ 0x40
  HAL_GPIO_Init(SHDN_170V_3V3_GPIO_Port, &GPIO_InitStruct);
 800082e:	f000 fe4d 	bl	80014cc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = INS_EN_3V3_Pin|DIN_3V3_Pin|OE_3V3_Pin;
 8000832:	23e0      	movs	r3, #224	@ 0xe0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000834:	20a0      	movs	r0, #160	@ 0xa0
  GPIO_InitStruct.Pin = INS_EN_3V3_Pin|DIN_3V3_Pin|OE_3V3_Pin;
 8000836:	930d      	str	r3, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000838:	a90d      	add	r1, sp, #52	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800083a:	3bdd      	subs	r3, #221	@ 0xdd
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800083c:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800083e:	9310      	str	r3, [sp, #64]	@ 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000840:	950e      	str	r5, [sp, #56]	@ 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	940f      	str	r4, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000844:	f000 fe42 	bl	80014cc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RCK_3V3_Pin|SCK_3V3_Pin;
 8000848:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800084a:	489e      	ldr	r0, [pc, #632]	@ (8000ac4 <main+0x354>)
 800084c:	a90d      	add	r1, sp, #52	@ 0x34
  GPIO_InitStruct.Pin = RCK_3V3_Pin|SCK_3V3_Pin;
 800084e:	930d      	str	r3, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000850:	9310      	str	r3, [sp, #64]	@ 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000852:	950e      	str	r5, [sp, #56]	@ 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	940f      	str	r4, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000856:	f000 fe39 	bl	80014cc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BTN_3_Pin|BTN_2_Pin|BTN_1_Pin;
 800085a:	2338      	movs	r3, #56	@ 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800085c:	4899      	ldr	r0, [pc, #612]	@ (8000ac4 <main+0x354>)
 800085e:	a90d      	add	r1, sp, #52	@ 0x34
  GPIO_InitStruct.Pin = BTN_3_Pin|BTN_2_Pin|BTN_1_Pin;
 8000860:	930d      	str	r3, [sp, #52]	@ 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000862:	940e      	str	r4, [sp, #56]	@ 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	940f      	str	r4, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000866:	f000 fe31 	bl	80014cc <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800086a:	6b33      	ldr	r3, [r6, #48]	@ 0x30
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 800086c:	0022      	movs	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 800086e:	432b      	orrs	r3, r5
 8000870:	6333      	str	r3, [r6, #48]	@ 0x30
 8000872:	6b33      	ldr	r3, [r6, #48]	@ 0x30
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8000874:	0039      	movs	r1, r7
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000876:	402b      	ands	r3, r5
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8000878:	2009      	movs	r0, #9
  __HAL_RCC_DMA1_CLK_ENABLE();
 800087a:	9303      	str	r3, [sp, #12]
 800087c:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 800087e:	f000 fc57 	bl	8001130 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000882:	2009      	movs	r0, #9
 8000884:	f000 fc7e 	bl	8001184 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 2, 0);
 8000888:	0022      	movs	r2, r4
 800088a:	0039      	movs	r1, r7
 800088c:	200a      	movs	r0, #10
 800088e:	f000 fc4f 	bl	8001130 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000892:	200a      	movs	r0, #10
 8000894:	f000 fc76 	bl	8001184 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 2, 0);
 8000898:	0039      	movs	r1, r7
 800089a:	0022      	movs	r2, r4
 800089c:	200b      	movs	r0, #11
 800089e:	f000 fc47 	bl	8001130 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 80008a2:	200b      	movs	r0, #11
 80008a4:	f000 fc6e 	bl	8001184 <HAL_NVIC_EnableIRQ>
  hi2c1.Instance = I2C1;
 80008a8:	4e88      	ldr	r6, [pc, #544]	@ (8000acc <main+0x35c>)
 80008aa:	4b89      	ldr	r3, [pc, #548]	@ (8000ad0 <main+0x360>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008ac:	0030      	movs	r0, r6
  hi2c1.Instance = I2C1;
 80008ae:	6033      	str	r3, [r6, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80008b0:	4b88      	ldr	r3, [pc, #544]	@ (8000ad4 <main+0x364>)
  hi2c1.Init.OwnAddress1 = 0;
 80008b2:	60b4      	str	r4, [r6, #8]
  hi2c1.Init.Timing = 0x00707CBB;
 80008b4:	6073      	str	r3, [r6, #4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008b6:	60f5      	str	r5, [r6, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008b8:	6134      	str	r4, [r6, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008ba:	6174      	str	r4, [r6, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008bc:	61b4      	str	r4, [r6, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008be:	61f4      	str	r4, [r6, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008c0:	6234      	str	r4, [r6, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008c2:	f001 f83b 	bl	800193c <HAL_I2C_Init>
 80008c6:	0001      	movs	r1, r0
 80008c8:	42a0      	cmp	r0, r4
 80008ca:	d001      	beq.n	80008d0 <main+0x160>
 80008cc:	b672      	cpsid	i
	while (1)
 80008ce:	e7fe      	b.n	80008ce <main+0x15e>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008d0:	0030      	movs	r0, r6
 80008d2:	f001 fa3b 	bl	8001d4c <HAL_I2CEx_ConfigAnalogFilter>
 80008d6:	1e01      	subs	r1, r0, #0
 80008d8:	d001      	beq.n	80008de <main+0x16e>
 80008da:	b672      	cpsid	i
	while (1)
 80008dc:	e7fe      	b.n	80008dc <main+0x16c>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008de:	0030      	movs	r0, r6
 80008e0:	f001 fa5a 	bl	8001d98 <HAL_I2CEx_ConfigDigitalFilter>
 80008e4:	1e03      	subs	r3, r0, #0
 80008e6:	d001      	beq.n	80008ec <main+0x17c>
 80008e8:	b672      	cpsid	i
	while (1)
 80008ea:	e7fe      	b.n	80008ea <main+0x17a>
  hlpuart1.Instance = LPUART1;
 80008ec:	487a      	ldr	r0, [pc, #488]	@ (8000ad8 <main+0x368>)
 80008ee:	4a7b      	ldr	r2, [pc, #492]	@ (8000adc <main+0x36c>)
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80008f0:	240c      	movs	r4, #12
  hlpuart1.Instance = LPUART1;
 80008f2:	6002      	str	r2, [r0, #0]
  hlpuart1.Init.BaudRate = 209700;
 80008f4:	4a7a      	ldr	r2, [pc, #488]	@ (8000ae0 <main+0x370>)
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80008f6:	60c3      	str	r3, [r0, #12]
  hlpuart1.Init.BaudRate = 209700;
 80008f8:	6042      	str	r2, [r0, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 80008fa:	2280      	movs	r2, #128	@ 0x80
 80008fc:	0552      	lsls	r2, r2, #21
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80008fe:	6103      	str	r3, [r0, #16]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000900:	6183      	str	r3, [r0, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000902:	6203      	str	r3, [r0, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000904:	6243      	str	r3, [r0, #36]	@ 0x24
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8000906:	6082      	str	r2, [r0, #8]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000908:	6144      	str	r4, [r0, #20]
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800090a:	f001 fff7 	bl	80028fc <HAL_UART_Init>
 800090e:	1e03      	subs	r3, r0, #0
 8000910:	d001      	beq.n	8000916 <main+0x1a6>
 8000912:	b672      	cpsid	i
	while (1)
 8000914:	e7fe      	b.n	8000914 <main+0x1a4>
  huart2.Instance = USART2;
 8000916:	4873      	ldr	r0, [pc, #460]	@ (8000ae4 <main+0x374>)
 8000918:	4a73      	ldr	r2, [pc, #460]	@ (8000ae8 <main+0x378>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800091a:	6083      	str	r3, [r0, #8]
  huart2.Instance = USART2;
 800091c:	6002      	str	r2, [r0, #0]
  huart2.Init.BaudRate = 115200;
 800091e:	22e1      	movs	r2, #225	@ 0xe1
 8000920:	0252      	lsls	r2, r2, #9
 8000922:	6042      	str	r2, [r0, #4]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000924:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000926:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000928:	6144      	str	r4, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800092a:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800092c:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800092e:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000930:	6243      	str	r3, [r0, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000932:	f001 ffe3 	bl	80028fc <HAL_UART_Init>
 8000936:	1e05      	subs	r5, r0, #0
 8000938:	d001      	beq.n	800093e <main+0x1ce>
 800093a:	b672      	cpsid	i
	while (1)
 800093c:	e7fe      	b.n	800093c <main+0x1cc>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800093e:	0001      	movs	r1, r0
 8000940:	2210      	movs	r2, #16
 8000942:	a80d      	add	r0, sp, #52	@ 0x34
 8000944:	f002 f94e 	bl	8002be4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000948:	2208      	movs	r2, #8
 800094a:	0029      	movs	r1, r5
 800094c:	a809      	add	r0, sp, #36	@ 0x24
 800094e:	f002 f949 	bl	8002be4 <memset>
  htim21.Instance = TIM21;
 8000952:	4c66      	ldr	r4, [pc, #408]	@ (8000aec <main+0x37c>)
 8000954:	4b66      	ldr	r3, [pc, #408]	@ (8000af0 <main+0x380>)
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 8000956:	0020      	movs	r0, r4
  htim21.Instance = TIM21;
 8000958:	6023      	str	r3, [r4, #0]
  htim21.Init.Prescaler = 32000-1;
 800095a:	4b66      	ldr	r3, [pc, #408]	@ (8000af4 <main+0x384>)
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 800095c:	60a5      	str	r5, [r4, #8]
  htim21.Init.Prescaler = 32000-1;
 800095e:	6063      	str	r3, [r4, #4]
  htim21.Init.Period = 50-1;
 8000960:	2331      	movs	r3, #49	@ 0x31
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000962:	6125      	str	r5, [r4, #16]
  htim21.Init.Period = 50-1;
 8000964:	60e3      	str	r3, [r4, #12]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000966:	6165      	str	r5, [r4, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 8000968:	f001 faff 	bl	8001f6a <HAL_TIM_Base_Init>
 800096c:	2800      	cmp	r0, #0
 800096e:	d001      	beq.n	8000974 <main+0x204>
 8000970:	b672      	cpsid	i
	while (1)
 8000972:	e7fe      	b.n	8000972 <main+0x202>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000974:	2580      	movs	r5, #128	@ 0x80
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 8000976:	0020      	movs	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000978:	016d      	lsls	r5, r5, #5
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 800097a:	a90d      	add	r1, sp, #52	@ 0x34
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800097c:	950d      	str	r5, [sp, #52]	@ 0x34
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 800097e:	f001 fc43 	bl	8002208 <HAL_TIM_ConfigClockSource>
 8000982:	2800      	cmp	r0, #0
 8000984:	d001      	beq.n	800098a <main+0x21a>
 8000986:	b672      	cpsid	i
	while (1)
 8000988:	e7fe      	b.n	8000988 <main+0x218>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800098a:	9009      	str	r0, [sp, #36]	@ 0x24
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800098c:	900a      	str	r0, [sp, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 800098e:	a909      	add	r1, sp, #36	@ 0x24
 8000990:	0020      	movs	r0, r4
 8000992:	f001 fd6b 	bl	800246c <HAL_TIMEx_MasterConfigSynchronization>
 8000996:	1e04      	subs	r4, r0, #0
 8000998:	d001      	beq.n	800099e <main+0x22e>
 800099a:	b672      	cpsid	i
	while (1)
 800099c:	e7fe      	b.n	800099c <main+0x22c>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800099e:	0001      	movs	r1, r0
 80009a0:	2210      	movs	r2, #16
 80009a2:	a809      	add	r0, sp, #36	@ 0x24
 80009a4:	f002 f91e 	bl	8002be4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009a8:	2208      	movs	r2, #8
 80009aa:	0021      	movs	r1, r4
 80009ac:	a807      	add	r0, sp, #28
 80009ae:	f002 f919 	bl	8002be4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009b2:	2210      	movs	r2, #16
 80009b4:	0021      	movs	r1, r4
 80009b6:	a80d      	add	r0, sp, #52	@ 0x34
 80009b8:	f002 f914 	bl	8002be4 <memset>
  htim2.Instance = TIM2;
 80009bc:	2380      	movs	r3, #128	@ 0x80
 80009be:	4f4e      	ldr	r7, [pc, #312]	@ (8000af8 <main+0x388>)
 80009c0:	05db      	lsls	r3, r3, #23
 80009c2:	603b      	str	r3, [r7, #0]
  htim2.Init.Prescaler = 3200-1;
 80009c4:	4b4d      	ldr	r3, [pc, #308]	@ (8000afc <main+0x38c>)
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009c6:	0038      	movs	r0, r7
  htim2.Init.Prescaler = 3200-1;
 80009c8:	607b      	str	r3, [r7, #4]
  htim2.Init.Period = 100-1;
 80009ca:	2363      	movs	r3, #99	@ 0x63
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009cc:	60bc      	str	r4, [r7, #8]
  htim2.Init.Period = 100-1;
 80009ce:	60fb      	str	r3, [r7, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009d0:	613c      	str	r4, [r7, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009d2:	617c      	str	r4, [r7, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009d4:	f001 fac9 	bl	8001f6a <HAL_TIM_Base_Init>
 80009d8:	2800      	cmp	r0, #0
 80009da:	d001      	beq.n	80009e0 <main+0x270>
 80009dc:	b672      	cpsid	i
	while (1)
 80009de:	e7fe      	b.n	80009de <main+0x26e>
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009e0:	0038      	movs	r0, r7
 80009e2:	a909      	add	r1, sp, #36	@ 0x24
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009e4:	9509      	str	r5, [sp, #36]	@ 0x24
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009e6:	f001 fc0f 	bl	8002208 <HAL_TIM_ConfigClockSource>
 80009ea:	2800      	cmp	r0, #0
 80009ec:	d001      	beq.n	80009f2 <main+0x282>
 80009ee:	b672      	cpsid	i
	while (1)
 80009f0:	e7fe      	b.n	80009f0 <main+0x280>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80009f2:	0038      	movs	r0, r7
 80009f4:	f001 fb55 	bl	80020a2 <HAL_TIM_PWM_Init>
 80009f8:	2800      	cmp	r0, #0
 80009fa:	d001      	beq.n	8000a00 <main+0x290>
 80009fc:	b672      	cpsid	i
	while (1)
 80009fe:	e7fe      	b.n	80009fe <main+0x28e>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a00:	9007      	str	r0, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a02:	9008      	str	r0, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a04:	a907      	add	r1, sp, #28
 8000a06:	0038      	movs	r0, r7
 8000a08:	f001 fd30 	bl	800246c <HAL_TIMEx_MasterConfigSynchronization>
 8000a0c:	1e02      	subs	r2, r0, #0
 8000a0e:	d001      	beq.n	8000a14 <main+0x2a4>
 8000a10:	b672      	cpsid	i
	while (1)
 8000a12:	e7fe      	b.n	8000a12 <main+0x2a2>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a14:	2360      	movs	r3, #96	@ 0x60
  sConfigOC.Pulse = 0;
 8000a16:	900e      	str	r0, [sp, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a18:	900f      	str	r0, [sp, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a1a:	9010      	str	r0, [sp, #64]	@ 0x40
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a1c:	a90d      	add	r1, sp, #52	@ 0x34
 8000a1e:	0038      	movs	r0, r7
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a20:	930d      	str	r3, [sp, #52]	@ 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a22:	f001 fb63 	bl	80020ec <HAL_TIM_PWM_ConfigChannel>
 8000a26:	2800      	cmp	r0, #0
 8000a28:	d001      	beq.n	8000a2e <main+0x2be>
 8000a2a:	b672      	cpsid	i
	while (1)
 8000a2c:	e7fe      	b.n	8000a2c <main+0x2bc>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a2e:	2204      	movs	r2, #4
 8000a30:	0038      	movs	r0, r7
 8000a32:	a90d      	add	r1, sp, #52	@ 0x34
 8000a34:	f001 fb5a 	bl	80020ec <HAL_TIM_PWM_ConfigChannel>
 8000a38:	2800      	cmp	r0, #0
 8000a3a:	d001      	beq.n	8000a40 <main+0x2d0>
 8000a3c:	b672      	cpsid	i
	while (1)
 8000a3e:	e7fe      	b.n	8000a3e <main+0x2ce>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a40:	2208      	movs	r2, #8
 8000a42:	0038      	movs	r0, r7
 8000a44:	a90d      	add	r1, sp, #52	@ 0x34
 8000a46:	f001 fb51 	bl	80020ec <HAL_TIM_PWM_ConfigChannel>
 8000a4a:	2800      	cmp	r0, #0
 8000a4c:	d001      	beq.n	8000a52 <main+0x2e2>
 8000a4e:	b672      	cpsid	i
	while (1)
 8000a50:	e7fe      	b.n	8000a50 <main+0x2e0>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a52:	220c      	movs	r2, #12
 8000a54:	0038      	movs	r0, r7
 8000a56:	a90d      	add	r1, sp, #52	@ 0x34
 8000a58:	f001 fb48 	bl	80020ec <HAL_TIM_PWM_ConfigChannel>
 8000a5c:	2800      	cmp	r0, #0
 8000a5e:	d001      	beq.n	8000a64 <main+0x2f4>
 8000a60:	b672      	cpsid	i
	while (1)
 8000a62:	e7fe      	b.n	8000a62 <main+0x2f2>
	settings_init(s_ptr, 3);
 8000a64:	2103      	movs	r1, #3
 8000a66:	4826      	ldr	r0, [pc, #152]	@ (8000b00 <main+0x390>)
 8000a68:	f002 f840 	bl	8002aec <settings_init>
	IN12_init();
 8000a6c:	f000 f859 	bl	8000b22 <IN12_init>
	DS3231_Init(&hi2c1);
 8000a70:	0030      	movs	r0, r6
 8000a72:	f000 fac5 	bl	8001000 <DS3231_Init>
	btns_init(&hbtns, btns_list, 3, &htim21, PRESSED);
 8000a76:	2201      	movs	r2, #1
 8000a78:	4b1c      	ldr	r3, [pc, #112]	@ (8000aec <main+0x37c>)
 8000a7a:	4922      	ldr	r1, [pc, #136]	@ (8000b04 <main+0x394>)
 8000a7c:	9200      	str	r2, [sp, #0]
 8000a7e:	4822      	ldr	r0, [pc, #136]	@ (8000b08 <main+0x398>)
 8000a80:	3202      	adds	r2, #2
 8000a82:	f7ff fd11 	bl	80004a8 <btns_init>
	Tmp75_Init(&hi2c1);
 8000a86:	0030      	movs	r0, r6
 8000a88:	f000 f9f4 	bl	8000e74 <Tmp75_Init>
	opt3001_init();
 8000a8c:	f000 f86a 	bl	8000b64 <opt3001_init>
		if(logic[current_item][shared_mask][shared_press_type] != NULL) {
 8000a90:	4b1e      	ldr	r3, [pc, #120]	@ (8000b0c <main+0x39c>)
 8000a92:	4d1f      	ldr	r5, [pc, #124]	@ (8000b10 <main+0x3a0>)
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	6829      	ldr	r1, [r5, #0]
 8000a98:	4c1e      	ldr	r4, [pc, #120]	@ (8000b14 <main+0x3a4>)
 8000a9a:	00db      	lsls	r3, r3, #3
 8000a9c:	185b      	adds	r3, r3, r1
 8000a9e:	6821      	ldr	r1, [r4, #0]
 8000aa0:	005b      	lsls	r3, r3, #1
 8000aa2:	4a1d      	ldr	r2, [pc, #116]	@ (8000b18 <main+0x3a8>)
 8000aa4:	185b      	adds	r3, r3, r1
 8000aa6:	009b      	lsls	r3, r3, #2
 8000aa8:	589b      	ldr	r3, [r3, r2]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d100      	bne.n	8000ab0 <main+0x340>
 8000aae:	e7fe      	b.n	8000aae <main+0x33e>
			(*logic[current_item][shared_mask][shared_press_type])();
 8000ab0:	4798      	blx	r3
			shared_mask = 0;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	602b      	str	r3, [r5, #0]
			shared_press_type = 0;
 8000ab6:	6023      	str	r3, [r4, #0]
 8000ab8:	e7ea      	b.n	8000a90 <main+0x320>
 8000aba:	46c0      	nop			@ (mov r8, r8)
 8000abc:	40021000 	.word	0x40021000
 8000ac0:	50000800 	.word	0x50000800
 8000ac4:	50000400 	.word	0x50000400
 8000ac8:	00009901 	.word	0x00009901
 8000acc:	200003d0 	.word	0x200003d0
 8000ad0:	40005400 	.word	0x40005400
 8000ad4:	00707cbb 	.word	0x00707cbb
 8000ad8:	20000348 	.word	0x20000348
 8000adc:	40004800 	.word	0x40004800
 8000ae0:	00033324 	.word	0x00033324
 8000ae4:	200002c0 	.word	0x200002c0
 8000ae8:	40004400 	.word	0x40004400
 8000aec:	20000240 	.word	0x20000240
 8000af0:	40010800 	.word	0x40010800
 8000af4:	00007cff 	.word	0x00007cff
 8000af8:	20000280 	.word	0x20000280
 8000afc:	00000c7f 	.word	0x00000c7f
 8000b00:	20000000 	.word	0x20000000
 8000b04:	20000060 	.word	0x20000060
 8000b08:	200000b4 	.word	0x200000b4
 8000b0c:	200008a4 	.word	0x200008a4
 8000b10:	200000a8 	.word	0x200000a8
 8000b14:	200000a4 	.word	0x200000a4
 8000b18:	20000424 	.word	0x20000424

08000b1c <Error_Handler>:
 8000b1c:	b672      	cpsid	i
	while (1)
 8000b1e:	e7fe      	b.n	8000b1e <Error_Handler+0x2>

08000b20 <bitmask_set>:
	shift_reg_pulse_rclk(PULSE_DURATION_MS);

	OUTPUT_ENABLE();
}

void bitmask_set(void) {
 8000b20:	4770      	bx	lr

08000b22 <IN12_init>:
//	rtc_date.Month 		= DS3231_GetMonth();
//	rtc_date.Date 		= DS3231_GetDate();
//	rtc_date.WeekDay 	= DS3231_GetDayOfWeek();
}

void IN12_init(void) {
 8000b22:	b510      	push	{r4, lr}
	if(DS3231_IsOscillatorStopped()) {
 8000b24:	f000 fa80 	bl	8001028 <DS3231_IsOscillatorStopped>
 8000b28:	2800      	cmp	r0, #0
 8000b2a:	d007      	beq.n	8000b3c <IN12_init+0x1a>
		// todo: go to the "time set mode" automaticaly
		DS3231_SetFullTime(12, 34, 56);
 8000b2c:	200c      	movs	r0, #12
 8000b2e:	2238      	movs	r2, #56	@ 0x38
 8000b30:	2122      	movs	r1, #34	@ 0x22
 8000b32:	f000 faa7 	bl	8001084 <DS3231_SetFullTime>
		DS3231_EnableOscillator(DS3231_ENABLED);
 8000b36:	2001      	movs	r0, #1
 8000b38:	f000 fa1b 	bl	8000f72 <DS3231_EnableOscillator>
	}

	time_update();
	date_update();
}
 8000b3c:	bd10      	pop	{r4, pc}
	...

08000b40 <opt3001_writedata>:

static uint8_t device_addr= OPT3001_ADDR1;
static uint16_t config_data= 0xCE10;        //The sensor works in continuous operation mode by default.


void opt3001_writedata(uint8_t device_addr, uint8_t register_addr, uint16_t data){
 8000b40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000b42:	0013      	movs	r3, r2

	 uint8_t buffer[3];
	 buffer[0] = register_addr;
 8000b44:	aa03      	add	r2, sp, #12
 8000b46:	7011      	strb	r1, [r2, #0]
	 buffer[1] = (data)>>8;
	 buffer[2] = (data)& 0x00FF;
 8000b48:	7093      	strb	r3, [r2, #2]
	 buffer[1] = (data)>>8;
 8000b4a:	0a19      	lsrs	r1, r3, #8
	 HAL_I2C_Master_Transmit(&hi2c1, device_addr<<1, buffer, 3, 50);
 8000b4c:	2332      	movs	r3, #50	@ 0x32
	 buffer[1] = (data)>>8;
 8000b4e:	7051      	strb	r1, [r2, #1]
	 HAL_I2C_Master_Transmit(&hi2c1, device_addr<<1, buffer, 3, 50);
 8000b50:	0041      	lsls	r1, r0, #1
 8000b52:	9300      	str	r3, [sp, #0]
 8000b54:	4802      	ldr	r0, [pc, #8]	@ (8000b60 <opt3001_writedata+0x20>)
 8000b56:	3b2f      	subs	r3, #47	@ 0x2f
 8000b58:	f000 ff46 	bl	80019e8 <HAL_I2C_Master_Transmit>
 }
 8000b5c:	b005      	add	sp, #20
 8000b5e:	bd00      	pop	{pc}
 8000b60:	200003d0 	.word	0x200003d0

08000b64 <opt3001_init>:
	return received_data;
}

uint8_t opt3001_init(){

	if (HAL_I2C_IsDeviceReady(&hi2c1, device_addr<<1, 1, 20000) != HAL_OK){
 8000b64:	4b08      	ldr	r3, [pc, #32]	@ (8000b88 <opt3001_init+0x24>)
 8000b66:	2201      	movs	r2, #1
 8000b68:	2188      	movs	r1, #136	@ 0x88
uint8_t opt3001_init(){
 8000b6a:	b510      	push	{r4, lr}
	if (HAL_I2C_IsDeviceReady(&hi2c1, device_addr<<1, 1, 20000) != HAL_OK){
 8000b6c:	4807      	ldr	r0, [pc, #28]	@ (8000b8c <opt3001_init+0x28>)
 8000b6e:	f001 f855 	bl	8001c1c <HAL_I2C_IsDeviceReady>
		/* Return false */
		return 0;
 8000b72:	2300      	movs	r3, #0
	if (HAL_I2C_IsDeviceReady(&hi2c1, device_addr<<1, 1, 20000) != HAL_OK){
 8000b74:	4298      	cmp	r0, r3
 8000b76:	d105      	bne.n	8000b84 <opt3001_init+0x20>
	}

	opt3001_writedata(device_addr, OPT3001_ConfigReg, config_data);
 8000b78:	2101      	movs	r1, #1
 8000b7a:	2044      	movs	r0, #68	@ 0x44
 8000b7c:	4a04      	ldr	r2, [pc, #16]	@ (8000b90 <opt3001_init+0x2c>)
 8000b7e:	f7ff ffdf 	bl	8000b40 <opt3001_writedata>
	return 1;
 8000b82:	2301      	movs	r3, #1
}
 8000b84:	0018      	movs	r0, r3
 8000b86:	bd10      	pop	{r4, pc}
 8000b88:	00004e20 	.word	0x00004e20
 8000b8c:	200003d0 	.word	0x200003d0
 8000b90:	0000ce10 	.word	0x0000ce10

08000b94 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b94:	2201      	movs	r2, #1
 8000b96:	4b05      	ldr	r3, [pc, #20]	@ (8000bac <HAL_MspInit+0x18>)
 8000b98:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000b9a:	430a      	orrs	r2, r1
 8000b9c:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b9e:	2280      	movs	r2, #128	@ 0x80
 8000ba0:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8000ba2:	0552      	lsls	r2, r2, #21
 8000ba4:	430a      	orrs	r2, r1
 8000ba6:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ba8:	4770      	bx	lr
 8000baa:	46c0      	nop			@ (mov r8, r8)
 8000bac:	40021000 	.word	0x40021000

08000bb0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bb0:	b510      	push	{r4, lr}
 8000bb2:	0004      	movs	r4, r0
 8000bb4:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb6:	2214      	movs	r2, #20
 8000bb8:	2100      	movs	r1, #0
 8000bba:	a801      	add	r0, sp, #4
 8000bbc:	f002 f812 	bl	8002be4 <memset>
  if(hi2c->Instance==I2C1)
 8000bc0:	4b10      	ldr	r3, [pc, #64]	@ (8000c04 <HAL_I2C_MspInit+0x54>)
 8000bc2:	6822      	ldr	r2, [r4, #0]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	d11a      	bne.n	8000bfe <HAL_I2C_MspInit+0x4e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc8:	2301      	movs	r3, #1
 8000bca:	4c0f      	ldr	r4, [pc, #60]	@ (8000c08 <HAL_I2C_MspInit+0x58>)
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bcc:	20a0      	movs	r0, #160	@ 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bce:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd0:	a901      	add	r1, sp, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd2:	431a      	orrs	r2, r3
 8000bd4:	62e2      	str	r2, [r4, #44]	@ 0x2c
 8000bd6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd8:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bda:	401a      	ands	r2, r3
 8000bdc:	9200      	str	r2, [sp, #0]
 8000bde:	9a00      	ldr	r2, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000be0:	22c0      	movs	r2, #192	@ 0xc0
 8000be2:	00d2      	lsls	r2, r2, #3
 8000be4:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000be6:	2212      	movs	r2, #18
 8000be8:	9202      	str	r2, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bea:	3a0f      	subs	r2, #15
 8000bec:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000bee:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf0:	f000 fc6c 	bl	80014cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bf4:	2380      	movs	r3, #128	@ 0x80
 8000bf6:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8000bf8:	039b      	lsls	r3, r3, #14
 8000bfa:	4313      	orrs	r3, r2
 8000bfc:	63a3      	str	r3, [r4, #56]	@ 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000bfe:	b006      	add	sp, #24
 8000c00:	bd10      	pop	{r4, pc}
 8000c02:	46c0      	nop			@ (mov r8, r8)
 8000c04:	40005400 	.word	0x40005400
 8000c08:	40021000 	.word	0x40021000

08000c0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c0c:	b510      	push	{r4, lr}
 8000c0e:	0004      	movs	r4, r0
 8000c10:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c12:	2214      	movs	r2, #20
 8000c14:	2100      	movs	r1, #0
 8000c16:	a803      	add	r0, sp, #12
 8000c18:	f001 ffe4 	bl	8002be4 <memset>
  if(huart->Instance==LPUART1)
 8000c1c:	6823      	ldr	r3, [r4, #0]
 8000c1e:	4a1c      	ldr	r2, [pc, #112]	@ (8000c90 <HAL_UART_MspInit+0x84>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d11c      	bne.n	8000c5e <HAL_UART_MspInit+0x52>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000c24:	2280      	movs	r2, #128	@ 0x80
 8000c26:	4b1b      	ldr	r3, [pc, #108]	@ (8000c94 <HAL_UART_MspInit+0x88>)
 8000c28:	02d2      	lsls	r2, r2, #11
 8000c2a:	6b99      	ldr	r1, [r3, #56]	@ 0x38
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2c:	20a0      	movs	r0, #160	@ 0xa0
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000c2e:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c30:	2101      	movs	r1, #1
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000c32:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c36:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c38:	430a      	orrs	r2, r1
 8000c3a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c3e:	400b      	ands	r3, r1
 8000c40:	9301      	str	r3, [sp, #4]
 8000c42:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c44:	230c      	movs	r3, #12
 8000c46:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c48:	3b0a      	subs	r3, #10
 8000c4a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c4c:	185b      	adds	r3, r3, r1
 8000c4e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8000c50:	3303      	adds	r3, #3
 8000c52:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c54:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF0_USART2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c56:	f000 fc39 	bl	80014cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c5a:	b008      	add	sp, #32
 8000c5c:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART2)
 8000c5e:	4a0e      	ldr	r2, [pc, #56]	@ (8000c98 <HAL_UART_MspInit+0x8c>)
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d1fa      	bne.n	8000c5a <HAL_UART_MspInit+0x4e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c64:	2280      	movs	r2, #128	@ 0x80
 8000c66:	4b0b      	ldr	r3, [pc, #44]	@ (8000c94 <HAL_UART_MspInit+0x88>)
 8000c68:	0292      	lsls	r2, r2, #10
 8000c6a:	6b99      	ldr	r1, [r3, #56]	@ 0x38
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c6c:	480b      	ldr	r0, [pc, #44]	@ (8000c9c <HAL_UART_MspInit+0x90>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c6e:	430a      	orrs	r2, r1
 8000c70:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c72:	2202      	movs	r2, #2
 8000c74:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000c76:	4311      	orrs	r1, r2
 8000c78:	62d9      	str	r1, [r3, #44]	@ 0x2c
 8000c7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c7c:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c7e:	4013      	ands	r3, r2
 8000c80:	9302      	str	r3, [sp, #8]
 8000c82:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c84:	23c0      	movs	r3, #192	@ 0xc0
 8000c86:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c88:	3bbd      	subs	r3, #189	@ 0xbd
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8a:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8c:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c8e:	e7e2      	b.n	8000c56 <HAL_UART_MspInit+0x4a>
 8000c90:	40004800 	.word	0x40004800
 8000c94:	40021000 	.word	0x40021000
 8000c98:	40004400 	.word	0x40004400
 8000c9c:	50000400 	.word	0x50000400

08000ca0 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 8000ca0:	2280      	movs	r2, #128	@ 0x80
 8000ca2:	6803      	ldr	r3, [r0, #0]
{
 8000ca4:	b570      	push	{r4, r5, r6, lr}
  if(htim_base->Instance==TIM2)
 8000ca6:	05d2      	lsls	r2, r2, #23
{
 8000ca8:	0005      	movs	r5, r0
  if(htim_base->Instance==TIM2)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d000      	beq.n	8000cb0 <HAL_TIM_Base_MspInit+0x10>
 8000cae:	e075      	b.n	8000d9c <HAL_TIM_Base_MspInit+0xfc>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	4a42      	ldr	r2, [pc, #264]	@ (8000dbc <HAL_TIM_Base_MspInit+0x11c>)

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 8000cb4:	4c42      	ldr	r4, [pc, #264]	@ (8000dc0 <HAL_TIM_Base_MspInit+0x120>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cb6:	6b91      	ldr	r1, [r2, #56]	@ 0x38
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_DISABLE;
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8000cb8:	0020      	movs	r0, r4
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cba:	430b      	orrs	r3, r1
 8000cbc:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 8000cbe:	4b41      	ldr	r3, [pc, #260]	@ (8000dc4 <HAL_TIM_Base_MspInit+0x124>)
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000cc0:	2280      	movs	r2, #128	@ 0x80
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 8000cc2:	6023      	str	r3, [r4, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_8;
 8000cc4:	2308      	movs	r3, #8
 8000cc6:	6063      	str	r3, [r4, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000cc8:	18db      	adds	r3, r3, r3
 8000cca:	60a3      	str	r3, [r4, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ccc:	2300      	movs	r3, #0
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000cce:	0052      	lsls	r2, r2, #1
 8000cd0:	6162      	str	r2, [r4, #20]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8000cd2:	3ae0      	subs	r2, #224	@ 0xe0
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cd4:	60e3      	str	r3, [r4, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_DISABLE;
 8000cd6:	6123      	str	r3, [r4, #16]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cd8:	61a3      	str	r3, [r4, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8000cda:	61e2      	str	r2, [r4, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000cdc:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8000cde:	f000 fa77 	bl	80011d0 <HAL_DMA_Init>
 8000ce2:	2800      	cmp	r0, #0
 8000ce4:	d001      	beq.n	8000cea <HAL_TIM_Base_MspInit+0x4a>
    {
      Error_Handler();
 8000ce6:	f7ff ff19 	bl	8000b1c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8000cea:	622c      	str	r4, [r5, #32]

    /* TIM2_CH2 Init */
    hdma_tim2_ch2.Instance = DMA1_Channel3;
 8000cec:	4b36      	ldr	r3, [pc, #216]	@ (8000dc8 <HAL_TIM_Base_MspInit+0x128>)
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8000cee:	62a5      	str	r5, [r4, #40]	@ 0x28
    hdma_tim2_ch2.Instance = DMA1_Channel3;
 8000cf0:	4c36      	ldr	r4, [pc, #216]	@ (8000dcc <HAL_TIM_Base_MspInit+0x12c>)
    hdma_tim2_ch2.Init.Request = DMA_REQUEST_8;
    hdma_tim2_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_tim2_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_tim2_ch2.Init.MemInc = DMA_MINC_DISABLE;
    hdma_tim2_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000cf2:	2280      	movs	r2, #128	@ 0x80
    hdma_tim2_ch2.Instance = DMA1_Channel3;
 8000cf4:	6023      	str	r3, [r4, #0]
    hdma_tim2_ch2.Init.Request = DMA_REQUEST_8;
 8000cf6:	2308      	movs	r3, #8
 8000cf8:	6063      	str	r3, [r4, #4]
    hdma_tim2_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000cfa:	18db      	adds	r3, r3, r3
 8000cfc:	60a3      	str	r3, [r4, #8]
    hdma_tim2_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cfe:	2300      	movs	r3, #0
    hdma_tim2_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d00:	0052      	lsls	r2, r2, #1
 8000d02:	6162      	str	r2, [r4, #20]
    hdma_tim2_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_tim2_ch2.Init.Mode = DMA_CIRCULAR;
    hdma_tim2_ch2.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_tim2_ch2) != HAL_OK)
 8000d04:	0020      	movs	r0, r4
    hdma_tim2_ch2.Init.Mode = DMA_CIRCULAR;
 8000d06:	3ae0      	subs	r2, #224	@ 0xe0
    hdma_tim2_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d08:	60e3      	str	r3, [r4, #12]
    hdma_tim2_ch2.Init.MemInc = DMA_MINC_DISABLE;
 8000d0a:	6123      	str	r3, [r4, #16]
    hdma_tim2_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d0c:	61a3      	str	r3, [r4, #24]
    hdma_tim2_ch2.Init.Mode = DMA_CIRCULAR;
 8000d0e:	61e2      	str	r2, [r4, #28]
    hdma_tim2_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8000d10:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch2) != HAL_OK)
 8000d12:	f000 fa5d 	bl	80011d0 <HAL_DMA_Init>
 8000d16:	2800      	cmp	r0, #0
 8000d18:	d001      	beq.n	8000d1e <HAL_TIM_Base_MspInit+0x7e>
    {
      Error_Handler();
 8000d1a:	f7ff feff 	bl	8000b1c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2);

    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Channel1;
 8000d1e:	4b2c      	ldr	r3, [pc, #176]	@ (8000dd0 <HAL_TIM_Base_MspInit+0x130>)
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2);
 8000d20:	626c      	str	r4, [r5, #36]	@ 0x24
 8000d22:	62a5      	str	r5, [r4, #40]	@ 0x28
    hdma_tim2_ch3.Instance = DMA1_Channel1;
 8000d24:	4c2b      	ldr	r4, [pc, #172]	@ (8000dd4 <HAL_TIM_Base_MspInit+0x134>)
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_8;
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_DISABLE;
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d26:	2280      	movs	r2, #128	@ 0x80
    hdma_tim2_ch3.Instance = DMA1_Channel1;
 8000d28:	6023      	str	r3, [r4, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_8;
 8000d2a:	2308      	movs	r3, #8
 8000d2c:	6063      	str	r3, [r4, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d2e:	18db      	adds	r3, r3, r3
 8000d30:	60a3      	str	r3, [r4, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d32:	2300      	movs	r3, #0
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d34:	0052      	lsls	r2, r2, #1
 8000d36:	6162      	str	r2, [r4, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_tim2_ch3.Init.Mode = DMA_CIRCULAR;
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 8000d38:	0020      	movs	r0, r4
    hdma_tim2_ch3.Init.Mode = DMA_CIRCULAR;
 8000d3a:	3ae0      	subs	r2, #224	@ 0xe0
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d3c:	60e3      	str	r3, [r4, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_DISABLE;
 8000d3e:	6123      	str	r3, [r4, #16]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d40:	61a3      	str	r3, [r4, #24]
    hdma_tim2_ch3.Init.Mode = DMA_CIRCULAR;
 8000d42:	61e2      	str	r2, [r4, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8000d44:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 8000d46:	f000 fa43 	bl	80011d0 <HAL_DMA_Init>
 8000d4a:	2800      	cmp	r0, #0
 8000d4c:	d001      	beq.n	8000d52 <HAL_TIM_Base_MspInit+0xb2>
    {
      Error_Handler();
 8000d4e:	f7ff fee5 	bl	8000b1c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);

    /* TIM2_CH4 Init */
    hdma_tim2_ch4.Instance = DMA1_Channel4;
 8000d52:	4b21      	ldr	r3, [pc, #132]	@ (8000dd8 <HAL_TIM_Base_MspInit+0x138>)
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 8000d54:	62ac      	str	r4, [r5, #40]	@ 0x28
 8000d56:	62a5      	str	r5, [r4, #40]	@ 0x28
    hdma_tim2_ch4.Instance = DMA1_Channel4;
 8000d58:	4c20      	ldr	r4, [pc, #128]	@ (8000ddc <HAL_TIM_Base_MspInit+0x13c>)
    hdma_tim2_ch4.Init.Request = DMA_REQUEST_8;
    hdma_tim2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_tim2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_tim2_ch4.Init.MemInc = DMA_MINC_DISABLE;
    hdma_tim2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d5a:	2280      	movs	r2, #128	@ 0x80
    hdma_tim2_ch4.Instance = DMA1_Channel4;
 8000d5c:	6023      	str	r3, [r4, #0]
    hdma_tim2_ch4.Init.Request = DMA_REQUEST_8;
 8000d5e:	2308      	movs	r3, #8
 8000d60:	6063      	str	r3, [r4, #4]
    hdma_tim2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d62:	18db      	adds	r3, r3, r3
 8000d64:	60a3      	str	r3, [r4, #8]
    hdma_tim2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d66:	2300      	movs	r3, #0
    hdma_tim2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d68:	0052      	lsls	r2, r2, #1
 8000d6a:	6162      	str	r2, [r4, #20]
    hdma_tim2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_tim2_ch4.Init.Mode = DMA_CIRCULAR;
    hdma_tim2_ch4.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_tim2_ch4) != HAL_OK)
 8000d6c:	0020      	movs	r0, r4
    hdma_tim2_ch4.Init.Mode = DMA_CIRCULAR;
 8000d6e:	3ae0      	subs	r2, #224	@ 0xe0
    hdma_tim2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d70:	60e3      	str	r3, [r4, #12]
    hdma_tim2_ch4.Init.MemInc = DMA_MINC_DISABLE;
 8000d72:	6123      	str	r3, [r4, #16]
    hdma_tim2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d74:	61a3      	str	r3, [r4, #24]
    hdma_tim2_ch4.Init.Mode = DMA_CIRCULAR;
 8000d76:	61e2      	str	r2, [r4, #28]
    hdma_tim2_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8000d78:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch4) != HAL_OK)
 8000d7a:	f000 fa29 	bl	80011d0 <HAL_DMA_Init>
 8000d7e:	2800      	cmp	r0, #0
 8000d80:	d001      	beq.n	8000d86 <HAL_TIM_Base_MspInit+0xe6>
    {
      Error_Handler();
 8000d82:	f7ff fecb 	bl	8000b1c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch4);

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8000d86:	200f      	movs	r0, #15
 8000d88:	2200      	movs	r2, #0
 8000d8a:	2101      	movs	r1, #1
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch4);
 8000d8c:	62ec      	str	r4, [r5, #44]	@ 0x2c
 8000d8e:	62a5      	str	r5, [r4, #40]	@ 0x28
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8000d90:	f000 f9ce 	bl	8001130 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d94:	200f      	movs	r0, #15
  /* USER CODE END TIM21_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM21_CLK_ENABLE();
    /* TIM21 interrupt Init */
    HAL_NVIC_SetPriority(TIM21_IRQn, 3, 0);
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
 8000d96:	f000 f9f5 	bl	8001184 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM21_MspInit 1 */

  /* USER CODE END TIM21_MspInit 1 */
  }

}
 8000d9a:	bd70      	pop	{r4, r5, r6, pc}
  else if(htim_base->Instance==TIM21)
 8000d9c:	4a10      	ldr	r2, [pc, #64]	@ (8000de0 <HAL_TIM_Base_MspInit+0x140>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d1fb      	bne.n	8000d9a <HAL_TIM_Base_MspInit+0xfa>
    __HAL_RCC_TIM21_CLK_ENABLE();
 8000da2:	2304      	movs	r3, #4
 8000da4:	4a05      	ldr	r2, [pc, #20]	@ (8000dbc <HAL_TIM_Base_MspInit+0x11c>)
    HAL_NVIC_SetPriority(TIM21_IRQn, 3, 0);
 8000da6:	2014      	movs	r0, #20
    __HAL_RCC_TIM21_CLK_ENABLE();
 8000da8:	6b51      	ldr	r1, [r2, #52]	@ 0x34
 8000daa:	430b      	orrs	r3, r1
 8000dac:	6353      	str	r3, [r2, #52]	@ 0x34
    HAL_NVIC_SetPriority(TIM21_IRQn, 3, 0);
 8000dae:	2103      	movs	r1, #3
 8000db0:	2200      	movs	r2, #0
 8000db2:	f000 f9bd 	bl	8001130 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
 8000db6:	2014      	movs	r0, #20
 8000db8:	e7ed      	b.n	8000d96 <HAL_TIM_Base_MspInit+0xf6>
 8000dba:	46c0      	nop			@ (mov r8, r8)
 8000dbc:	40021000 	.word	0x40021000
 8000dc0:	200001f8 	.word	0x200001f8
 8000dc4:	40020058 	.word	0x40020058
 8000dc8:	40020030 	.word	0x40020030
 8000dcc:	200001b0 	.word	0x200001b0
 8000dd0:	40020008 	.word	0x40020008
 8000dd4:	20000168 	.word	0x20000168
 8000dd8:	40020044 	.word	0x40020044
 8000ddc:	20000120 	.word	0x20000120
 8000de0:	40010800 	.word	0x40010800

08000de4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000de4:	e7fe      	b.n	8000de4 <NMI_Handler>

08000de6 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000de6:	e7fe      	b.n	8000de6 <HardFault_Handler>

08000de8 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000de8:	4770      	bx	lr

08000dea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8000dea:	4770      	bx	lr

08000dec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dec:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dee:	f000 f98d 	bl	800110c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000df2:	bd10      	pop	{r4, pc}

08000df4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000df4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 8000df6:	4802      	ldr	r0, [pc, #8]	@ (8000e00 <DMA1_Channel1_IRQHandler+0xc>)
 8000df8:	f000 fa2e 	bl	8001258 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000dfc:	bd10      	pop	{r4, pc}
 8000dfe:	46c0      	nop			@ (mov r8, r8)
 8000e00:	20000168 	.word	0x20000168

08000e04 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000e04:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2);
 8000e06:	4802      	ldr	r0, [pc, #8]	@ (8000e10 <DMA1_Channel2_3_IRQHandler+0xc>)
 8000e08:	f000 fa26 	bl	8001258 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000e0c:	bd10      	pop	{r4, pc}
 8000e0e:	46c0      	nop			@ (mov r8, r8)
 8000e10:	200001b0 	.word	0x200001b0

08000e14 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8000e14:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch4);
 8000e16:	4803      	ldr	r0, [pc, #12]	@ (8000e24 <DMA1_Channel4_5_6_7_IRQHandler+0x10>)
 8000e18:	f000 fa1e 	bl	8001258 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8000e1c:	4802      	ldr	r0, [pc, #8]	@ (8000e28 <DMA1_Channel4_5_6_7_IRQHandler+0x14>)
 8000e1e:	f000 fa1b 	bl	8001258 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8000e22:	bd10      	pop	{r4, pc}
 8000e24:	20000120 	.word	0x20000120
 8000e28:	200001f8 	.word	0x200001f8

08000e2c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e2c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e2e:	4802      	ldr	r0, [pc, #8]	@ (8000e38 <TIM2_IRQHandler+0xc>)
 8000e30:	f001 fa8f 	bl	8002352 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e34:	bd10      	pop	{r4, pc}
 8000e36:	46c0      	nop			@ (mov r8, r8)
 8000e38:	20000280 	.word	0x20000280

08000e3c <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 8000e3c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM21_IRQn 0 */

  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
 8000e3e:	4802      	ldr	r0, [pc, #8]	@ (8000e48 <TIM21_IRQHandler+0xc>)
 8000e40:	f001 fa87 	bl	8002352 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 8000e44:	bd10      	pop	{r4, pc}
 8000e46:	46c0      	nop			@ (mov r8, r8)
 8000e48:	20000240 	.word	0x20000240

08000e4c <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e4c:	4770      	bx	lr
	...

08000e50 <Write_Register>:
	Write_Register(0x01, 0x2000);


}

void Write_Register(uint8_t register_pointer, uint16_t register_value) {
 8000e50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t data[3];
	data[0] = register_pointer;     // TMP75_ADDR
	data[1] = register_value >> 8;    // MSB byte of 16bit data
 8000e52:	0a0b      	lsrs	r3, r1, #8
	data[0] = register_pointer;     // TMP75_ADDR
 8000e54:	aa03      	add	r2, sp, #12
	data[1] = register_value >> 8;    // MSB byte of 16bit data
 8000e56:	7053      	strb	r3, [r2, #1]
	data[2] = register_value;       // LSB byte of 16bit data

	HAL_I2C_Master_Transmit(i2c, TMP75_ADDR, data, 3, 100);
 8000e58:	2364      	movs	r3, #100	@ 0x64
	data[0] = register_pointer;     // TMP75_ADDR
 8000e5a:	7010      	strb	r0, [r2, #0]
	HAL_I2C_Master_Transmit(i2c, TMP75_ADDR, data, 3, 100);
 8000e5c:	4804      	ldr	r0, [pc, #16]	@ (8000e70 <Write_Register+0x20>)
	data[2] = register_value;       // LSB byte of 16bit data
 8000e5e:	7091      	strb	r1, [r2, #2]
	HAL_I2C_Master_Transmit(i2c, TMP75_ADDR, data, 3, 100);
 8000e60:	9300      	str	r3, [sp, #0]
 8000e62:	2190      	movs	r1, #144	@ 0x90
 8000e64:	3b61      	subs	r3, #97	@ 0x61
 8000e66:	6800      	ldr	r0, [r0, #0]
 8000e68:	f000 fdbe 	bl	80019e8 <HAL_I2C_Master_Transmit>

}
 8000e6c:	b005      	add	sp, #20
 8000e6e:	bd00      	pop	{pc}
 8000e70:	200008a8 	.word	0x200008a8

08000e74 <Tmp75_Init>:
void Tmp75_Init(I2C_HandleTypeDef* handle) {
 8000e74:	b513      	push	{r0, r1, r4, lr}
 8000e76:	4c0a      	ldr	r4, [pc, #40]	@ (8000ea0 <Tmp75_Init+0x2c>)
	if(handle != NULL) i2c = handle;
 8000e78:	2800      	cmp	r0, #0
 8000e7a:	d000      	beq.n	8000e7e <Tmp75_Init+0xa>
 8000e7c:	6020      	str	r0, [r4, #0]
	volatile HAL_StatusTypeDef stat = HAL_I2C_IsDeviceReady(i2c, TMP75_ADDR, 3, 100);
 8000e7e:	2364      	movs	r3, #100	@ 0x64
 8000e80:	2203      	movs	r2, #3
 8000e82:	2190      	movs	r1, #144	@ 0x90
 8000e84:	6820      	ldr	r0, [r4, #0]
 8000e86:	f000 fec9 	bl	8001c1c <HAL_I2C_IsDeviceReady>
 8000e8a:	466b      	mov	r3, sp
	Write_Register(0x01, 0x2000);
 8000e8c:	2180      	movs	r1, #128	@ 0x80
	stat = 0;
 8000e8e:	2200      	movs	r2, #0
	volatile HAL_StatusTypeDef stat = HAL_I2C_IsDeviceReady(i2c, TMP75_ADDR, 3, 100);
 8000e90:	71d8      	strb	r0, [r3, #7]
	Write_Register(0x01, 0x2000);
 8000e92:	0189      	lsls	r1, r1, #6
 8000e94:	2001      	movs	r0, #1
	stat = 0;
 8000e96:	71da      	strb	r2, [r3, #7]
	Write_Register(0x01, 0x2000);
 8000e98:	f7ff ffda 	bl	8000e50 <Write_Register>
}
 8000e9c:	bd13      	pop	{r0, r1, r4, pc}
 8000e9e:	46c0      	nop			@ (mov r8, r8)
 8000ea0:	200008a8 	.word	0x200008a8

08000ea4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000ea4:	480d      	ldr	r0, [pc, #52]	@ (8000edc <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000ea6:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ea8:	f7ff ffd0 	bl	8000e4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000eac:	480c      	ldr	r0, [pc, #48]	@ (8000ee0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000eae:	490d      	ldr	r1, [pc, #52]	@ (8000ee4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000eb0:	4a0d      	ldr	r2, [pc, #52]	@ (8000ee8 <LoopForever+0xe>)
  movs r3, #0
 8000eb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eb4:	e002      	b.n	8000ebc <LoopCopyDataInit>

08000eb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eba:	3304      	adds	r3, #4

08000ebc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ebc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ebe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ec0:	d3f9      	bcc.n	8000eb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ec2:	4a0a      	ldr	r2, [pc, #40]	@ (8000eec <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ec4:	4c0a      	ldr	r4, [pc, #40]	@ (8000ef0 <LoopForever+0x16>)
  movs r3, #0
 8000ec6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ec8:	e001      	b.n	8000ece <LoopFillZerobss>

08000eca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ecc:	3204      	adds	r2, #4

08000ece <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ece:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ed0:	d3fb      	bcc.n	8000eca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ed2:	f001 fe8f 	bl	8002bf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ed6:	f7ff fc4b 	bl	8000770 <main>

08000eda <LoopForever>:

LoopForever:
    b LoopForever
 8000eda:	e7fe      	b.n	8000eda <LoopForever>
   ldr   r0, =_estack
 8000edc:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000ee0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ee4:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8000ee8:	08002ca8 	.word	0x08002ca8
  ldr r2, =_sbss
 8000eec:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8000ef0:	200008d4 	.word	0x200008d4

08000ef4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ef4:	e7fe      	b.n	8000ef4 <ADC1_COMP_IRQHandler>
	...

08000ef8 <DS3231_SetRegByte>:
/**
 * @brief Set the byte in the designated DS3231 register to value.
 * @param regAddr Register address to write.
 * @param val Value to set, 0 to 255.
 */
void DS3231_SetRegByte(uint8_t regAddr, uint8_t val) {
 8000ef8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t bytes[2] = { regAddr, val };
 8000efa:	466b      	mov	r3, sp
 8000efc:	7318      	strb	r0, [r3, #12]
 8000efe:	7359      	strb	r1, [r3, #13]
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, bytes, 2, DS3231_TIMEOUT);
 8000f00:	2301      	movs	r3, #1
 8000f02:	4805      	ldr	r0, [pc, #20]	@ (8000f18 <DS3231_SetRegByte+0x20>)
 8000f04:	425b      	negs	r3, r3
 8000f06:	9300      	str	r3, [sp, #0]
 8000f08:	21d0      	movs	r1, #208	@ 0xd0
 8000f0a:	3303      	adds	r3, #3
 8000f0c:	aa03      	add	r2, sp, #12
 8000f0e:	6800      	ldr	r0, [r0, #0]
 8000f10:	f000 fd6a 	bl	80019e8 <HAL_I2C_Master_Transmit>
}
 8000f14:	b005      	add	sp, #20
 8000f16:	bd00      	pop	{pc}
 8000f18:	200008ac 	.word	0x200008ac

08000f1c <DS3231_GetRegByte>:
/**
 * @brief Gets the byte in the designated DS3231 register.
 * @param regAddr Register address to read.
 * @return Value stored in the register, 0 to 255.
 */
uint8_t DS3231_GetRegByte(uint8_t regAddr) {
 8000f1c:	b570      	push	{r4, r5, r6, lr}
 8000f1e:	220f      	movs	r2, #15
	uint8_t val;
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &regAddr, 1, DS3231_TIMEOUT);
 8000f20:	2601      	movs	r6, #1
	HAL_I2C_Master_Receive(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &val, 1, DS3231_TIMEOUT);
 8000f22:	2517      	movs	r5, #23
uint8_t DS3231_GetRegByte(uint8_t regAddr) {
 8000f24:	b086      	sub	sp, #24
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &regAddr, 1, DS3231_TIMEOUT);
 8000f26:	4c0a      	ldr	r4, [pc, #40]	@ (8000f50 <DS3231_GetRegByte+0x34>)
uint8_t DS3231_GetRegByte(uint8_t regAddr) {
 8000f28:	446a      	add	r2, sp
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &regAddr, 1, DS3231_TIMEOUT);
 8000f2a:	4276      	negs	r6, r6
uint8_t DS3231_GetRegByte(uint8_t regAddr) {
 8000f2c:	7010      	strb	r0, [r2, #0]
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &regAddr, 1, DS3231_TIMEOUT);
 8000f2e:	9600      	str	r6, [sp, #0]
 8000f30:	2301      	movs	r3, #1
 8000f32:	21d0      	movs	r1, #208	@ 0xd0
 8000f34:	6820      	ldr	r0, [r4, #0]
 8000f36:	f000 fd57 	bl	80019e8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &val, 1, DS3231_TIMEOUT);
 8000f3a:	446d      	add	r5, sp
 8000f3c:	9600      	str	r6, [sp, #0]
 8000f3e:	2301      	movs	r3, #1
 8000f40:	002a      	movs	r2, r5
 8000f42:	21d0      	movs	r1, #208	@ 0xd0
 8000f44:	6820      	ldr	r0, [r4, #0]
 8000f46:	f000 fddb 	bl	8001b00 <HAL_I2C_Master_Receive>
	return val;
 8000f4a:	7828      	ldrb	r0, [r5, #0]
}
 8000f4c:	b006      	add	sp, #24
 8000f4e:	bd70      	pop	{r4, r5, r6, pc}
 8000f50:	200008ac 	.word	0x200008ac

08000f54 <DS3231_SetInterruptMode>:

/**
 * @brief Set the interrupt mode to either alarm interrupt or square wave interrupt.
 * @param mode Interrupt mode to set, DS3231_ALARM_INTERRUPT or DS3231_SQUARE_WAVE_INTERRUPT.
 */
void DS3231_SetInterruptMode(DS3231_InterruptMode mode){
 8000f54:	b510      	push	{r4, lr}
 8000f56:	0004      	movs	r4, r0
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8000f58:	200e      	movs	r0, #14
 8000f5a:	f7ff ffdf 	bl	8000f1c <DS3231_GetRegByte>
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfb) | ((mode & 0x01) << DS3231_INTCN));
 8000f5e:	2304      	movs	r3, #4
 8000f60:	00a4      	lsls	r4, r4, #2
 8000f62:	4398      	bics	r0, r3
 8000f64:	401c      	ands	r4, r3
 8000f66:	4304      	orrs	r4, r0
 8000f68:	b2e1      	uxtb	r1, r4
 8000f6a:	200e      	movs	r0, #14
 8000f6c:	f7ff ffc4 	bl	8000ef8 <DS3231_SetRegByte>
}
 8000f70:	bd10      	pop	{r4, pc}

08000f72 <DS3231_EnableOscillator>:

/**
 * @brief Enables clock oscillator.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableOscillator(DS3231_State enable){
 8000f72:	b510      	push	{r4, lr}
 8000f74:	0004      	movs	r4, r0
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8000f76:	200e      	movs	r0, #14
 8000f78:	f7ff ffd0 	bl	8000f1c <DS3231_GetRegByte>
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0x7f) | ((!enable & 0x01) << DS3231_EOSC));
 8000f7c:	4263      	negs	r3, r4
 8000f7e:	415c      	adcs	r4, r3
 8000f80:	237f      	movs	r3, #127	@ 0x7f
 8000f82:	01e1      	lsls	r1, r4, #7
 8000f84:	4018      	ands	r0, r3
 8000f86:	4301      	orrs	r1, r0
 8000f88:	200e      	movs	r0, #14
 8000f8a:	f7ff ffb5 	bl	8000ef8 <DS3231_SetRegByte>
}
 8000f8e:	bd10      	pop	{r4, pc}

08000f90 <DS3231_EnableAlarm2>:

/**
 * @brief Enables alarm 2.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableAlarm2(DS3231_State enable){
 8000f90:	b510      	push	{r4, lr}
 8000f92:	0004      	movs	r4, r0
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8000f94:	200e      	movs	r0, #14
 8000f96:	f7ff ffc1 	bl	8000f1c <DS3231_GetRegByte>
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfd) | ((enable & 0x01) << DS3231_A2IE));
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	0064      	lsls	r4, r4, #1
 8000f9e:	4398      	bics	r0, r3
 8000fa0:	401c      	ands	r4, r3
 8000fa2:	4304      	orrs	r4, r0
 8000fa4:	b2e1      	uxtb	r1, r4
 8000fa6:	200e      	movs	r0, #14
 8000fa8:	f7ff ffa6 	bl	8000ef8 <DS3231_SetRegByte>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 8000fac:	2001      	movs	r0, #1
 8000fae:	f7ff ffd1 	bl	8000f54 <DS3231_SetInterruptMode>
}
 8000fb2:	bd10      	pop	{r4, pc}

08000fb4 <DS3231_ClearAlarm2Flag>:

/**
 * @brief Clears alarm 2 matched flag. Matched flags must be cleared before the next match or the next interrupt will be masked.
 */
void DS3231_ClearAlarm2Flag(){
 8000fb4:	b510      	push	{r4, lr}
	uint8_t status = DS3231_GetRegByte(DS3231_REG_STATUS) & 0xfd;
 8000fb6:	200f      	movs	r0, #15
 8000fb8:	f7ff ffb0 	bl	8000f1c <DS3231_GetRegByte>
 8000fbc:	21fd      	movs	r1, #253	@ 0xfd
	DS3231_SetRegByte(DS3231_REG_STATUS, status & ~(0x01 << DS3231_A2F));
 8000fbe:	4001      	ands	r1, r0
 8000fc0:	200f      	movs	r0, #15
 8000fc2:	f7ff ff99 	bl	8000ef8 <DS3231_SetRegByte>
}
 8000fc6:	bd10      	pop	{r4, pc}

08000fc8 <DS3231_EnableAlarm1>:

/**
 * @brief Enables alarm 1.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableAlarm1(DS3231_State enable){
 8000fc8:	b570      	push	{r4, r5, r6, lr}
 8000fca:	0005      	movs	r5, r0
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8000fcc:	200e      	movs	r0, #14
 8000fce:	f7ff ffa5 	bl	8000f1c <DS3231_GetRegByte>
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfe) | ((enable & 0x01) << DS3231_A1IE));
 8000fd2:	2401      	movs	r4, #1
 8000fd4:	0001      	movs	r1, r0
 8000fd6:	4025      	ands	r5, r4
 8000fd8:	43a1      	bics	r1, r4
 8000fda:	4329      	orrs	r1, r5
 8000fdc:	b2c9      	uxtb	r1, r1
 8000fde:	200e      	movs	r0, #14
 8000fe0:	f7ff ff8a 	bl	8000ef8 <DS3231_SetRegByte>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 8000fe4:	0020      	movs	r0, r4
 8000fe6:	f7ff ffb5 	bl	8000f54 <DS3231_SetInterruptMode>
}
 8000fea:	bd70      	pop	{r4, r5, r6, pc}

08000fec <DS3231_ClearAlarm1Flag>:

/**
 * @brief Clears alarm 1 matched flag. Matched flags must be cleared before the next match or the next interrupt will be masked.
 */
void DS3231_ClearAlarm1Flag(){
 8000fec:	b510      	push	{r4, lr}
	uint8_t status = DS3231_GetRegByte(DS3231_REG_STATUS) & 0xfe;
 8000fee:	200f      	movs	r0, #15
 8000ff0:	f7ff ff94 	bl	8000f1c <DS3231_GetRegByte>
 8000ff4:	21fe      	movs	r1, #254	@ 0xfe
	DS3231_SetRegByte(DS3231_REG_STATUS, status & ~(0x01 << DS3231_A1F));
 8000ff6:	4001      	ands	r1, r0
 8000ff8:	200f      	movs	r0, #15
 8000ffa:	f7ff ff7d 	bl	8000ef8 <DS3231_SetRegByte>
}
 8000ffe:	bd10      	pop	{r4, pc}

08001000 <DS3231_Init>:
void DS3231_Init(I2C_HandleTypeDef *hi2c) {
 8001000:	b510      	push	{r4, lr}
	_ds3231_ui2c = hi2c;
 8001002:	4b08      	ldr	r3, [pc, #32]	@ (8001024 <DS3231_Init+0x24>)
 8001004:	6018      	str	r0, [r3, #0]
	DS3231_EnableAlarm1(DS3231_DISABLED);
 8001006:	2000      	movs	r0, #0
 8001008:	f7ff ffde 	bl	8000fc8 <DS3231_EnableAlarm1>
	DS3231_EnableAlarm2(DS3231_DISABLED);
 800100c:	2000      	movs	r0, #0
 800100e:	f7ff ffbf 	bl	8000f90 <DS3231_EnableAlarm2>
	DS3231_ClearAlarm1Flag();
 8001012:	f7ff ffeb 	bl	8000fec <DS3231_ClearAlarm1Flag>
	DS3231_ClearAlarm2Flag();
 8001016:	f7ff ffcd 	bl	8000fb4 <DS3231_ClearAlarm2Flag>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 800101a:	2001      	movs	r0, #1
 800101c:	f7ff ff9a 	bl	8000f54 <DS3231_SetInterruptMode>
}
 8001020:	bd10      	pop	{r4, pc}
 8001022:	46c0      	nop			@ (mov r8, r8)
 8001024:	200008ac 	.word	0x200008ac

08001028 <DS3231_IsOscillatorStopped>:

/**
 * @brief Check whether the clock oscillator is stopped.
 * @return Oscillator stopped flag (OSF) bit, 0 or 1.
 */
uint8_t DS3231_IsOscillatorStopped(){
 8001028:	b510      	push	{r4, lr}
	return (DS3231_GetRegByte(DS3231_REG_STATUS) >> DS3231_OSF) & 0x01;
 800102a:	200f      	movs	r0, #15
 800102c:	f7ff ff76 	bl	8000f1c <DS3231_GetRegByte>
 8001030:	09c0      	lsrs	r0, r0, #7
 8001032:	b2c0      	uxtb	r0, r0
}
 8001034:	bd10      	pop	{r4, pc}

08001036 <DS3231_EncodeBCD>:
/**
 * @brief Encodes a decimal number to binaty-coded decimal for storage in registers.
 * @param dec Decimal number to encode.
 * @return Encoded binary-coded decimal value.
 */
uint8_t DS3231_EncodeBCD(uint8_t dec) {
 8001036:	b570      	push	{r4, r5, r6, lr}
	return (dec % 10 + ((dec / 10) << 4));
 8001038:	210a      	movs	r1, #10
uint8_t DS3231_EncodeBCD(uint8_t dec) {
 800103a:	0005      	movs	r5, r0
	return (dec % 10 + ((dec / 10) << 4));
 800103c:	f7ff f864 	bl	8000108 <__udivsi3>
 8001040:	210a      	movs	r1, #10
 8001042:	0104      	lsls	r4, r0, #4
 8001044:	0028      	movs	r0, r5
 8001046:	f7ff f8e5 	bl	8000214 <__aeabi_uidivmod>
 800104a:	1860      	adds	r0, r4, r1
 800104c:	b2c0      	uxtb	r0, r0
}
 800104e:	bd70      	pop	{r4, r5, r6, pc}

08001050 <DS3231_SetHour>:
	DS3231_SetRegByte(DS3231_REG_HOUR, DS3231_EncodeBCD(hour_24mode & 0x3f));
 8001050:	233f      	movs	r3, #63	@ 0x3f
void DS3231_SetHour(uint8_t hour_24mode) {
 8001052:	b510      	push	{r4, lr}
	DS3231_SetRegByte(DS3231_REG_HOUR, DS3231_EncodeBCD(hour_24mode & 0x3f));
 8001054:	4018      	ands	r0, r3
 8001056:	f7ff ffee 	bl	8001036 <DS3231_EncodeBCD>
 800105a:	0001      	movs	r1, r0
 800105c:	2002      	movs	r0, #2
 800105e:	f7ff ff4b 	bl	8000ef8 <DS3231_SetRegByte>
}
 8001062:	bd10      	pop	{r4, pc}

08001064 <DS3231_SetMinute>:
void DS3231_SetMinute(uint8_t minute) {
 8001064:	b510      	push	{r4, lr}
	DS3231_SetRegByte(DS3231_REG_MINUTE, DS3231_EncodeBCD(minute));
 8001066:	f7ff ffe6 	bl	8001036 <DS3231_EncodeBCD>
 800106a:	0001      	movs	r1, r0
 800106c:	2001      	movs	r0, #1
 800106e:	f7ff ff43 	bl	8000ef8 <DS3231_SetRegByte>
}
 8001072:	bd10      	pop	{r4, pc}

08001074 <DS3231_SetSecond>:
void DS3231_SetSecond(uint8_t second) {
 8001074:	b510      	push	{r4, lr}
	DS3231_SetRegByte(DS3231_REG_SECOND, DS3231_EncodeBCD(second));
 8001076:	f7ff ffde 	bl	8001036 <DS3231_EncodeBCD>
 800107a:	0001      	movs	r1, r0
 800107c:	2000      	movs	r0, #0
 800107e:	f7ff ff3b 	bl	8000ef8 <DS3231_SetRegByte>
}
 8001082:	bd10      	pop	{r4, pc}

08001084 <DS3231_SetFullTime>:
void DS3231_SetFullTime(uint8_t  hour_24mode, uint8_t minute, uint8_t second){
 8001084:	b570      	push	{r4, r5, r6, lr}
 8001086:	000d      	movs	r5, r1
 8001088:	0014      	movs	r4, r2
	DS3231_SetHour(hour_24mode);
 800108a:	f7ff ffe1 	bl	8001050 <DS3231_SetHour>
	DS3231_SetMinute(minute);
 800108e:	0028      	movs	r0, r5
 8001090:	f7ff ffe8 	bl	8001064 <DS3231_SetMinute>
	DS3231_SetSecond(second);
 8001094:	0020      	movs	r0, r4
 8001096:	f7ff ffed 	bl	8001074 <DS3231_SetSecond>
}
 800109a:	bd70      	pop	{r4, r5, r6, pc}

0800109c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800109c:	b570      	push	{r4, r5, r6, lr}
 800109e:	0005      	movs	r5, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010a0:	20fa      	movs	r0, #250	@ 0xfa
 80010a2:	4b0d      	ldr	r3, [pc, #52]	@ (80010d8 <HAL_InitTick+0x3c>)
 80010a4:	0080      	lsls	r0, r0, #2
 80010a6:	7819      	ldrb	r1, [r3, #0]
 80010a8:	f7ff f82e 	bl	8000108 <__udivsi3>
 80010ac:	4c0b      	ldr	r4, [pc, #44]	@ (80010dc <HAL_InitTick+0x40>)
 80010ae:	0001      	movs	r1, r0
 80010b0:	6820      	ldr	r0, [r4, #0]
 80010b2:	f7ff f829 	bl	8000108 <__udivsi3>
 80010b6:	f000 f871 	bl	800119c <HAL_SYSTICK_Config>
 80010ba:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 80010bc:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010be:	2c00      	cmp	r4, #0
 80010c0:	d109      	bne.n	80010d6 <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010c2:	2d03      	cmp	r5, #3
 80010c4:	d807      	bhi.n	80010d6 <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010c6:	3802      	subs	r0, #2
 80010c8:	0022      	movs	r2, r4
 80010ca:	0029      	movs	r1, r5
 80010cc:	f000 f830 	bl	8001130 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010d0:	0020      	movs	r0, r4
 80010d2:	4b03      	ldr	r3, [pc, #12]	@ (80010e0 <HAL_InitTick+0x44>)
 80010d4:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80010d6:	bd70      	pop	{r4, r5, r6, pc}
 80010d8:	2000007c 	.word	0x2000007c
 80010dc:	20000078 	.word	0x20000078
 80010e0:	20000080 	.word	0x20000080

080010e4 <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80010e4:	2340      	movs	r3, #64	@ 0x40
 80010e6:	4a08      	ldr	r2, [pc, #32]	@ (8001108 <HAL_Init+0x24>)
{
 80010e8:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80010ea:	6811      	ldr	r1, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010ec:	2003      	movs	r0, #3
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80010ee:	430b      	orrs	r3, r1
 80010f0:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010f2:	f7ff ffd3 	bl	800109c <HAL_InitTick>
 80010f6:	1e04      	subs	r4, r0, #0
 80010f8:	d103      	bne.n	8001102 <HAL_Init+0x1e>
    HAL_MspInit();
 80010fa:	f7ff fd4b 	bl	8000b94 <HAL_MspInit>
}
 80010fe:	0020      	movs	r0, r4
 8001100:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8001102:	2401      	movs	r4, #1
 8001104:	e7fb      	b.n	80010fe <HAL_Init+0x1a>
 8001106:	46c0      	nop			@ (mov r8, r8)
 8001108:	40022000 	.word	0x40022000

0800110c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800110c:	4a03      	ldr	r2, [pc, #12]	@ (800111c <HAL_IncTick+0x10>)
 800110e:	4b04      	ldr	r3, [pc, #16]	@ (8001120 <HAL_IncTick+0x14>)
 8001110:	6811      	ldr	r1, [r2, #0]
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	185b      	adds	r3, r3, r1
 8001116:	6013      	str	r3, [r2, #0]
}
 8001118:	4770      	bx	lr
 800111a:	46c0      	nop			@ (mov r8, r8)
 800111c:	200008b0 	.word	0x200008b0
 8001120:	2000007c 	.word	0x2000007c

08001124 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001124:	4b01      	ldr	r3, [pc, #4]	@ (800112c <HAL_GetTick+0x8>)
 8001126:	6818      	ldr	r0, [r3, #0]
}
 8001128:	4770      	bx	lr
 800112a:	46c0      	nop			@ (mov r8, r8)
 800112c:	200008b0 	.word	0x200008b0

08001130 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001130:	b510      	push	{r4, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001132:	24ff      	movs	r4, #255	@ 0xff
 8001134:	2203      	movs	r2, #3
 8001136:	000b      	movs	r3, r1
 8001138:	0021      	movs	r1, r4
 800113a:	4002      	ands	r2, r0
 800113c:	00d2      	lsls	r2, r2, #3
 800113e:	4091      	lsls	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001140:	019b      	lsls	r3, r3, #6
 8001142:	4023      	ands	r3, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001144:	43c9      	mvns	r1, r1
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001146:	4093      	lsls	r3, r2
  if ((int32_t)(IRQn) >= 0)
 8001148:	2800      	cmp	r0, #0
 800114a:	db0a      	blt.n	8001162 <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800114c:	24c0      	movs	r4, #192	@ 0xc0
 800114e:	4a0b      	ldr	r2, [pc, #44]	@ (800117c <HAL_NVIC_SetPriority+0x4c>)
 8001150:	0880      	lsrs	r0, r0, #2
 8001152:	0080      	lsls	r0, r0, #2
 8001154:	1880      	adds	r0, r0, r2
 8001156:	00a4      	lsls	r4, r4, #2
 8001158:	5902      	ldr	r2, [r0, r4]
 800115a:	400a      	ands	r2, r1
 800115c:	4313      	orrs	r3, r2
 800115e:	5103      	str	r3, [r0, r4]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8001160:	bd10      	pop	{r4, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001162:	220f      	movs	r2, #15
 8001164:	4010      	ands	r0, r2
 8001166:	3808      	subs	r0, #8
 8001168:	4a05      	ldr	r2, [pc, #20]	@ (8001180 <HAL_NVIC_SetPriority+0x50>)
 800116a:	0880      	lsrs	r0, r0, #2
 800116c:	0080      	lsls	r0, r0, #2
 800116e:	1880      	adds	r0, r0, r2
 8001170:	69c2      	ldr	r2, [r0, #28]
 8001172:	4011      	ands	r1, r2
 8001174:	4319      	orrs	r1, r3
 8001176:	61c1      	str	r1, [r0, #28]
 8001178:	e7f2      	b.n	8001160 <HAL_NVIC_SetPriority+0x30>
 800117a:	46c0      	nop			@ (mov r8, r8)
 800117c:	e000e100 	.word	0xe000e100
 8001180:	e000ed00 	.word	0xe000ed00

08001184 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001184:	2800      	cmp	r0, #0
 8001186:	db05      	blt.n	8001194 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001188:	231f      	movs	r3, #31
 800118a:	4018      	ands	r0, r3
 800118c:	3b1e      	subs	r3, #30
 800118e:	4083      	lsls	r3, r0
 8001190:	4a01      	ldr	r2, [pc, #4]	@ (8001198 <HAL_NVIC_EnableIRQ+0x14>)
 8001192:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001194:	4770      	bx	lr
 8001196:	46c0      	nop			@ (mov r8, r8)
 8001198:	e000e100 	.word	0xe000e100

0800119c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800119c:	2280      	movs	r2, #128	@ 0x80
 800119e:	1e43      	subs	r3, r0, #1
 80011a0:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 80011a2:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d20d      	bcs.n	80011c4 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011a8:	21c0      	movs	r1, #192	@ 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011aa:	4a07      	ldr	r2, [pc, #28]	@ (80011c8 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011ac:	4807      	ldr	r0, [pc, #28]	@ (80011cc <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011ae:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011b0:	6a03      	ldr	r3, [r0, #32]
 80011b2:	0609      	lsls	r1, r1, #24
 80011b4:	021b      	lsls	r3, r3, #8
 80011b6:	0a1b      	lsrs	r3, r3, #8
 80011b8:	430b      	orrs	r3, r1
 80011ba:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011bc:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011be:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011c0:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011c2:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80011c4:	4770      	bx	lr
 80011c6:	46c0      	nop			@ (mov r8, r8)
 80011c8:	e000e010 	.word	0xe000e010
 80011cc:	e000ed00 	.word	0xe000ed00

080011d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80011d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011d2:	0004      	movs	r4, r0
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 80011d4:	2001      	movs	r0, #1
  if(hdma == NULL)
 80011d6:	2c00      	cmp	r4, #0
 80011d8:	d035      	beq.n	8001246 <HAL_DMA_Init+0x76>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80011da:	6825      	ldr	r5, [r4, #0]
 80011dc:	4b1a      	ldr	r3, [pc, #104]	@ (8001248 <HAL_DMA_Init+0x78>)
 80011de:	2114      	movs	r1, #20
 80011e0:	18e8      	adds	r0, r5, r3
 80011e2:	f7fe ff91 	bl	8000108 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 80011e6:	4b19      	ldr	r3, [pc, #100]	@ (800124c <HAL_DMA_Init+0x7c>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80011e8:	0080      	lsls	r0, r0, #2
  hdma->DmaBaseAddress = DMA1;
 80011ea:	6423      	str	r3, [r4, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80011ec:	2302      	movs	r3, #2
 80011ee:	1da2      	adds	r2, r4, #6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80011f0:	6460      	str	r0, [r4, #68]	@ 0x44
  hdma->State = HAL_DMA_STATE_BUSY;
 80011f2:	77d3      	strb	r3, [r2, #31]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80011f4:	682e      	ldr	r6, [r5, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80011f6:	4b16      	ldr	r3, [pc, #88]	@ (8001250 <HAL_DMA_Init+0x80>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80011f8:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80011fa:	401e      	ands	r6, r3
  tmp |=  hdma->Init.Direction        |
 80011fc:	68e3      	ldr	r3, [r4, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011fe:	6927      	ldr	r7, [r4, #16]
  tmp |=  hdma->Init.Direction        |
 8001200:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001202:	433b      	orrs	r3, r7
 8001204:	6967      	ldr	r7, [r4, #20]
 8001206:	433b      	orrs	r3, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001208:	69a7      	ldr	r7, [r4, #24]
 800120a:	433b      	orrs	r3, r7
 800120c:	69e7      	ldr	r7, [r4, #28]
 800120e:	433b      	orrs	r3, r7
          hdma->Init.Mode                | hdma->Init.Priority;
 8001210:	6a27      	ldr	r7, [r4, #32]
 8001212:	433b      	orrs	r3, r7
  tmp |=  hdma->Init.Direction        |
 8001214:	4333      	orrs	r3, r6

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001216:	602b      	str	r3, [r5, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001218:	2380      	movs	r3, #128	@ 0x80
 800121a:	01db      	lsls	r3, r3, #7
 800121c:	4299      	cmp	r1, r3
 800121e:	d00c      	beq.n	800123a <HAL_DMA_Init+0x6a>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001220:	251c      	movs	r5, #28
 8001222:	4028      	ands	r0, r5
 8001224:	3d0d      	subs	r5, #13
 8001226:	4085      	lsls	r5, r0
 8001228:	490a      	ldr	r1, [pc, #40]	@ (8001254 <HAL_DMA_Init+0x84>)
 800122a:	680b      	ldr	r3, [r1, #0]
 800122c:	43ab      	bics	r3, r5
 800122e:	600b      	str	r3, [r1, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001230:	6863      	ldr	r3, [r4, #4]
 8001232:	680d      	ldr	r5, [r1, #0]
 8001234:	4083      	lsls	r3, r0
 8001236:	432b      	orrs	r3, r5
 8001238:	600b      	str	r3, [r1, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800123a:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800123c:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800123e:	63e0      	str	r0, [r4, #60]	@ 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001240:	3405      	adds	r4, #5
  hdma->State  = HAL_DMA_STATE_READY;
 8001242:	77d3      	strb	r3, [r2, #31]
  hdma->Lock = HAL_UNLOCKED;
 8001244:	77e0      	strb	r0, [r4, #31]

  return HAL_OK;
}
 8001246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001248:	bffdfff8 	.word	0xbffdfff8
 800124c:	40020000 	.word	0x40020000
 8001250:	ffff800f 	.word	0xffff800f
 8001254:	400200a8 	.word	0x400200a8

08001258 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
  uint32_t source_it = hdma->Instance->CCR;

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800125a:	261c      	movs	r6, #28
 800125c:	2704      	movs	r7, #4
 800125e:	6c42      	ldr	r2, [r0, #68]	@ 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001260:	6c01      	ldr	r1, [r0, #64]	@ 0x40
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001262:	4032      	ands	r2, r6
 8001264:	003e      	movs	r6, r7
 8001266:	4096      	lsls	r6, r2
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001268:	680d      	ldr	r5, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800126a:	6803      	ldr	r3, [r0, #0]
 800126c:	681c      	ldr	r4, [r3, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800126e:	4235      	tst	r5, r6
 8001270:	d00d      	beq.n	800128e <HAL_DMA_IRQHandler+0x36>
 8001272:	423c      	tst	r4, r7
 8001274:	d00b      	beq.n	800128e <HAL_DMA_IRQHandler+0x36>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	0692      	lsls	r2, r2, #26
 800127a:	d402      	bmi.n	8001282 <HAL_DMA_IRQHandler+0x2a>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	43ba      	bics	r2, r7
 8001280:	601a      	str	r2, [r3, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8001282:	6b03      	ldr	r3, [r0, #48]	@ 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8001284:	604e      	str	r6, [r1, #4]
     if(hdma->XferHalfCpltCallback != NULL)
 8001286:	2b00      	cmp	r3, #0
 8001288:	d019      	beq.n	80012be <HAL_DMA_IRQHandler+0x66>
    __HAL_UNLOCK(hdma);

    if (hdma->XferErrorCallback != NULL)
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800128a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800128c:	e017      	b.n	80012be <HAL_DMA_IRQHandler+0x66>
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800128e:	2702      	movs	r7, #2
 8001290:	003e      	movs	r6, r7
 8001292:	4096      	lsls	r6, r2
 8001294:	4235      	tst	r5, r6
 8001296:	d013      	beq.n	80012c0 <HAL_DMA_IRQHandler+0x68>
 8001298:	423c      	tst	r4, r7
 800129a:	d011      	beq.n	80012c0 <HAL_DMA_IRQHandler+0x68>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	0692      	lsls	r2, r2, #26
 80012a0:	d406      	bmi.n	80012b0 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80012a2:	240a      	movs	r4, #10
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	43a2      	bics	r2, r4
 80012a8:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80012aa:	2201      	movs	r2, #1
 80012ac:	1d83      	adds	r3, r0, #6
 80012ae:	77da      	strb	r2, [r3, #31]
    __HAL_UNLOCK(hdma);
 80012b0:	2200      	movs	r2, #0
 80012b2:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80012b4:	604e      	str	r6, [r1, #4]
    __HAL_UNLOCK(hdma);
 80012b6:	77da      	strb	r2, [r3, #31]
    if(hdma->XferCpltCallback != NULL)
 80012b8:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    if (hdma->XferErrorCallback != NULL)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d1e5      	bne.n	800128a <HAL_DMA_IRQHandler+0x32>
}
 80012be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 80012c0:	2608      	movs	r6, #8
 80012c2:	0037      	movs	r7, r6
 80012c4:	4097      	lsls	r7, r2
 80012c6:	423d      	tst	r5, r7
 80012c8:	d0f9      	beq.n	80012be <HAL_DMA_IRQHandler+0x66>
 80012ca:	4234      	tst	r4, r6
 80012cc:	d0f7      	beq.n	80012be <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012ce:	250e      	movs	r5, #14
 80012d0:	681c      	ldr	r4, [r3, #0]
 80012d2:	43ac      	bics	r4, r5
 80012d4:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80012d6:	2301      	movs	r3, #1
 80012d8:	001c      	movs	r4, r3
 80012da:	4094      	lsls	r4, r2
    hdma->State = HAL_DMA_STATE_READY;
 80012dc:	1d82      	adds	r2, r0, #6
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80012de:	604c      	str	r4, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80012e0:	63c3      	str	r3, [r0, #60]	@ 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 80012e2:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma);
 80012e4:	2200      	movs	r2, #0
 80012e6:	1d43      	adds	r3, r0, #5
 80012e8:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 80012ea:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80012ec:	e7e5      	b.n	80012ba <HAL_DMA_IRQHandler+0x62>
	...

080012f0 <FLASH_SetErrorCode>:
  */
static void FLASH_SetErrorCode(void)
{
  uint32_t flags = 0;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80012f0:	4a28      	ldr	r2, [pc, #160]	@ (8001394 <FLASH_SetErrorCode+0xa4>)
 80012f2:	2180      	movs	r1, #128	@ 0x80
 80012f4:	6990      	ldr	r0, [r2, #24]
 80012f6:	0049      	lsls	r1, r1, #1
 80012f8:	0003      	movs	r3, r0
{
 80012fa:	b530      	push	{r4, r5, lr}
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80012fc:	400b      	ands	r3, r1
 80012fe:	4208      	tst	r0, r1
 8001300:	d005      	beq.n	800130e <FLASH_SetErrorCode+0x1e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001302:	2302      	movs	r3, #2
 8001304:	4824      	ldr	r0, [pc, #144]	@ (8001398 <FLASH_SetErrorCode+0xa8>)
 8001306:	6944      	ldr	r4, [r0, #20]
 8001308:	4323      	orrs	r3, r4
 800130a:	6143      	str	r3, [r0, #20]
    flags |= FLASH_FLAG_WRPERR;
 800130c:	000b      	movs	r3, r1
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 800130e:	2080      	movs	r0, #128	@ 0x80
 8001310:	6991      	ldr	r1, [r2, #24]
 8001312:	0080      	lsls	r0, r0, #2
 8001314:	4201      	tst	r1, r0
 8001316:	d005      	beq.n	8001324 <FLASH_SetErrorCode+0x34>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001318:	2101      	movs	r1, #1
 800131a:	4c1f      	ldr	r4, [pc, #124]	@ (8001398 <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_PGAERR;
 800131c:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800131e:	6965      	ldr	r5, [r4, #20]
 8001320:	4329      	orrs	r1, r5
 8001322:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 8001324:	2080      	movs	r0, #128	@ 0x80
 8001326:	6991      	ldr	r1, [r2, #24]
 8001328:	00c0      	lsls	r0, r0, #3
 800132a:	4201      	tst	r1, r0
 800132c:	d005      	beq.n	800133a <FLASH_SetErrorCode+0x4a>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 800132e:	2108      	movs	r1, #8
 8001330:	4c19      	ldr	r4, [pc, #100]	@ (8001398 <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_SIZERR;
 8001332:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 8001334:	6965      	ldr	r5, [r4, #20]
 8001336:	4329      	orrs	r1, r5
 8001338:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800133a:	2080      	movs	r0, #128	@ 0x80
 800133c:	6991      	ldr	r1, [r2, #24]
 800133e:	0100      	lsls	r0, r0, #4
 8001340:	4201      	tst	r1, r0
 8001342:	d005      	beq.n	8001350 <FLASH_SetErrorCode+0x60>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8001344:	2104      	movs	r1, #4
 8001346:	4c14      	ldr	r4, [pc, #80]	@ (8001398 <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_OPTVERR;
 8001348:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800134a:	6965      	ldr	r5, [r4, #20]
 800134c:	4329      	orrs	r1, r5
 800134e:	6161      	str	r1, [r4, #20]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 8001350:	2080      	movs	r0, #128	@ 0x80
 8001352:	6991      	ldr	r1, [r2, #24]
 8001354:	0180      	lsls	r0, r0, #6
 8001356:	4201      	tst	r1, r0
 8001358:	d005      	beq.n	8001366 <FLASH_SetErrorCode+0x76>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800135a:	2110      	movs	r1, #16
 800135c:	4c0e      	ldr	r4, [pc, #56]	@ (8001398 <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_RDERR;
 800135e:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8001360:	6965      	ldr	r5, [r4, #20]
 8001362:	4329      	orrs	r1, r5
 8001364:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 8001366:	6991      	ldr	r1, [r2, #24]
 8001368:	0389      	lsls	r1, r1, #14
 800136a:	d505      	bpl.n	8001378 <FLASH_SetErrorCode+0x88>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 800136c:	2020      	movs	r0, #32
 800136e:	4c0a      	ldr	r4, [pc, #40]	@ (8001398 <FLASH_SetErrorCode+0xa8>)
    flags |= HAL_FLASH_ERROR_FWWERR;
 8001370:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 8001372:	6961      	ldr	r1, [r4, #20]
 8001374:	4301      	orrs	r1, r0
 8001376:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 8001378:	2080      	movs	r0, #128	@ 0x80
 800137a:	6991      	ldr	r1, [r2, #24]
 800137c:	0240      	lsls	r0, r0, #9
 800137e:	4201      	tst	r1, r0
 8001380:	d005      	beq.n	800138e <FLASH_SetErrorCode+0x9e>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 8001382:	2140      	movs	r1, #64	@ 0x40
 8001384:	4c04      	ldr	r4, [pc, #16]	@ (8001398 <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_NOTZEROERR;
 8001386:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 8001388:	6965      	ldr	r5, [r4, #20]
 800138a:	4329      	orrs	r1, r5
 800138c:	6161      	str	r1, [r4, #20]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800138e:	6193      	str	r3, [r2, #24]
}  
 8001390:	bd30      	pop	{r4, r5, pc}
 8001392:	46c0      	nop			@ (mov r8, r8)
 8001394:	40022000 	.word	0x40022000
 8001398:	200008b4 	.word	0x200008b4

0800139c <FLASH_WaitForLastOperation>:
{
 800139c:	b570      	push	{r4, r5, r6, lr}
 800139e:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80013a0:	f7ff fec0 	bl	8001124 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80013a4:	2601      	movs	r6, #1
  uint32_t tickstart = HAL_GetTick();
 80013a6:	0005      	movs	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80013a8:	4b18      	ldr	r3, [pc, #96]	@ (800140c <FLASH_WaitForLastOperation+0x70>)
 80013aa:	699a      	ldr	r2, [r3, #24]
 80013ac:	4232      	tst	r2, r6
 80013ae:	d121      	bne.n	80013f4 <FLASH_WaitForLastOperation+0x58>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80013b0:	2202      	movs	r2, #2
 80013b2:	6999      	ldr	r1, [r3, #24]
 80013b4:	4211      	tst	r1, r2
 80013b6:	d000      	beq.n	80013ba <FLASH_WaitForLastOperation+0x1e>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80013b8:	619a      	str	r2, [r3, #24]
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 80013ba:	699a      	ldr	r2, [r3, #24]
 80013bc:	05d2      	lsls	r2, r2, #23
 80013be:	d415      	bmi.n	80013ec <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 80013c0:	699a      	ldr	r2, [r3, #24]
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 80013c2:	0592      	lsls	r2, r2, #22
 80013c4:	d412      	bmi.n	80013ec <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 80013c6:	699a      	ldr	r2, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 80013c8:	0552      	lsls	r2, r2, #21
 80013ca:	d40f      	bmi.n	80013ec <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 80013cc:	699a      	ldr	r2, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 80013ce:	0512      	lsls	r2, r2, #20
 80013d0:	d40c      	bmi.n	80013ec <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 80013d2:	699a      	ldr	r2, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 80013d4:	0492      	lsls	r2, r2, #18
 80013d6:	d409      	bmi.n	80013ec <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 80013d8:	6999      	ldr	r1, [r3, #24]
 80013da:	2280      	movs	r2, #128	@ 0x80
 80013dc:	0008      	movs	r0, r1
 80013de:	0292      	lsls	r2, r2, #10
 80013e0:	4010      	ands	r0, r2
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 80013e2:	4211      	tst	r1, r2
 80013e4:	d102      	bne.n	80013ec <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 80013e6:	699b      	ldr	r3, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 80013e8:	03db      	lsls	r3, r3, #15
 80013ea:	d508      	bpl.n	80013fe <FLASH_WaitForLastOperation+0x62>
    FLASH_SetErrorCode();
 80013ec:	f7ff ff80 	bl	80012f0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80013f0:	2001      	movs	r0, #1
 80013f2:	e004      	b.n	80013fe <FLASH_WaitForLastOperation+0x62>
    if (Timeout != HAL_MAX_DELAY)
 80013f4:	1c62      	adds	r2, r4, #1
 80013f6:	d0d8      	beq.n	80013aa <FLASH_WaitForLastOperation+0xe>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80013f8:	2c00      	cmp	r4, #0
 80013fa:	d101      	bne.n	8001400 <FLASH_WaitForLastOperation+0x64>
        return HAL_TIMEOUT;
 80013fc:	2003      	movs	r0, #3
}
 80013fe:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001400:	f7ff fe90 	bl	8001124 <HAL_GetTick>
 8001404:	1b40      	subs	r0, r0, r5
 8001406:	42a0      	cmp	r0, r4
 8001408:	d9ce      	bls.n	80013a8 <FLASH_WaitForLastOperation+0xc>
 800140a:	e7f7      	b.n	80013fc <FLASH_WaitForLastOperation+0x60>
 800140c:	40022000 	.word	0x40022000

08001410 <HAL_FLASHEx_DATAEEPROM_Unlock>:
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 8001410:	2201      	movs	r2, #1
 8001412:	4b08      	ldr	r3, [pc, #32]	@ (8001434 <HAL_FLASHEx_DATAEEPROM_Unlock+0x24>)
    {
      return HAL_ERROR;
    }
  }

  return HAL_OK;  
 8001414:	2000      	movs	r0, #0
  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 8001416:	6859      	ldr	r1, [r3, #4]
 8001418:	4211      	tst	r1, r2
 800141a:	d00a      	beq.n	8001432 <HAL_FLASHEx_DATAEEPROM_Unlock+0x22>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800141c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8001420:	b672      	cpsid	i
    FLASH->PEKEYR = FLASH_PEKEY1;
 8001422:	4805      	ldr	r0, [pc, #20]	@ (8001438 <HAL_FLASHEx_DATAEEPROM_Unlock+0x28>)
 8001424:	60d8      	str	r0, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 8001426:	4805      	ldr	r0, [pc, #20]	@ (800143c <HAL_FLASHEx_DATAEEPROM_Unlock+0x2c>)
 8001428:	60d8      	str	r0, [r3, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800142a:	f381 8810 	msr	PRIMASK, r1
    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800142e:	6858      	ldr	r0, [r3, #4]
 8001430:	4010      	ands	r0, r2
}
 8001432:	4770      	bx	lr
 8001434:	40022000 	.word	0x40022000
 8001438:	89abcdef 	.word	0x89abcdef
 800143c:	02030405 	.word	0x02030405

08001440 <HAL_FLASHEx_DATAEEPROM_Lock>:
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 8001440:	2301      	movs	r3, #1
 8001442:	4a03      	ldr	r2, [pc, #12]	@ (8001450 <HAL_FLASHEx_DATAEEPROM_Lock+0x10>)
  
  return HAL_OK;
}
 8001444:	2000      	movs	r0, #0
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 8001446:	6851      	ldr	r1, [r2, #4]
 8001448:	430b      	orrs	r3, r1
 800144a:	6053      	str	r3, [r2, #4]
}
 800144c:	4770      	bx	lr
 800144e:	46c0      	nop			@ (mov r8, r8)
 8001450:	40022000 	.word	0x40022000

08001454 <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect 
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t Address)
{
 8001454:	b510      	push	{r4, lr}
 8001456:	0004      	movs	r4, r0
  
  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001458:	4805      	ldr	r0, [pc, #20]	@ (8001470 <HAL_FLASHEx_DATAEEPROM_Erase+0x1c>)
 800145a:	f7ff ff9f 	bl	800139c <FLASH_WaitForLastOperation>
  
  if(status == HAL_OK)
 800145e:	2800      	cmp	r0, #0
 8001460:	d105      	bne.n	800146e <HAL_FLASHEx_DATAEEPROM_Erase+0x1a>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001462:	4b04      	ldr	r3, [pc, #16]	@ (8001474 <HAL_FLASHEx_DATAEEPROM_Erase+0x20>)
 8001464:	6158      	str	r0, [r3, #20]

      /* Write 00000000h to valid address in the data memory */
      *(__IO uint32_t *) Address = 0x00000000U;
 8001466:	6020      	str	r0, [r4, #0]

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001468:	4801      	ldr	r0, [pc, #4]	@ (8001470 <HAL_FLASHEx_DATAEEPROM_Erase+0x1c>)
 800146a:	f7ff ff97 	bl	800139c <FLASH_WaitForLastOperation>
  }
   
  /* Return the erase status */
  return status;
}  
 800146e:	bd10      	pop	{r4, pc}
 8001470:	0000c350 	.word	0x0000c350
 8001474:	200008b4 	.word	0x200008b4

08001478 <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 8001478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef status = HAL_ERROR;
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800147a:	4f12      	ldr	r7, [pc, #72]	@ (80014c4 <HAL_FLASHEx_DATAEEPROM_Program+0x4c>)
{
 800147c:	0006      	movs	r6, r0
  __HAL_LOCK(&pFlash);
 800147e:	7c3b      	ldrb	r3, [r7, #16]
{
 8001480:	000d      	movs	r5, r1
 8001482:	0014      	movs	r4, r2
  __HAL_LOCK(&pFlash);
 8001484:	2002      	movs	r0, #2
 8001486:	2b01      	cmp	r3, #1
 8001488:	d00f      	beq.n	80014aa <HAL_FLASHEx_DATAEEPROM_Program+0x32>
 800148a:	2301      	movs	r3, #1
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800148c:	480e      	ldr	r0, [pc, #56]	@ (80014c8 <HAL_FLASHEx_DATAEEPROM_Program+0x50>)
  __HAL_LOCK(&pFlash);
 800148e:	743b      	strb	r3, [r7, #16]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001490:	f7ff ff84 	bl	800139c <FLASH_WaitForLastOperation>
  
  if(status == HAL_OK)
 8001494:	2800      	cmp	r0, #0
 8001496:	d106      	bne.n	80014a6 <HAL_FLASHEx_DATAEEPROM_Program+0x2e>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001498:	6178      	str	r0, [r7, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 800149a:	2e02      	cmp	r6, #2
 800149c:	d106      	bne.n	80014ac <HAL_FLASHEx_DATAEEPROM_Program+0x34>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 800149e:	602c      	str	r4, [r5, #0]
    }

    if (status == HAL_OK)
    {
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80014a0:	4809      	ldr	r0, [pc, #36]	@ (80014c8 <HAL_FLASHEx_DATAEEPROM_Program+0x50>)
 80014a2:	f7ff ff7b 	bl	800139c <FLASH_WaitForLastOperation>
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80014a6:	2300      	movs	r3, #0
 80014a8:	743b      	strb	r3, [r7, #16]

  return status;
}
 80014aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 80014ac:	2e01      	cmp	r6, #1
 80014ae:	d102      	bne.n	80014b6 <HAL_FLASHEx_DATAEEPROM_Program+0x3e>
      *(__IO uint16_t *)Address = (uint16_t) Data;
 80014b0:	b2a4      	uxth	r4, r4
 80014b2:	802c      	strh	r4, [r5, #0]
 80014b4:	e7f4      	b.n	80014a0 <HAL_FLASHEx_DATAEEPROM_Program+0x28>
      status = HAL_ERROR;
 80014b6:	2001      	movs	r0, #1
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 80014b8:	2e00      	cmp	r6, #0
 80014ba:	d1f4      	bne.n	80014a6 <HAL_FLASHEx_DATAEEPROM_Program+0x2e>
      *(__IO uint8_t *)Address = (uint8_t) Data;
 80014bc:	b2e4      	uxtb	r4, r4
 80014be:	702c      	strb	r4, [r5, #0]
 80014c0:	e7ee      	b.n	80014a0 <HAL_FLASHEx_DATAEEPROM_Program+0x28>
 80014c2:	46c0      	nop			@ (mov r8, r8)
 80014c4:	200008b4 	.word	0x200008b4
 80014c8:	0000c350 	.word	0x0000c350

080014cc <HAL_GPIO_Init>:
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00U;
 80014cc:	2300      	movs	r3, #0
{
 80014ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014d0:	b085      	sub	sp, #20
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80014d2:	680a      	ldr	r2, [r1, #0]
 80014d4:	0014      	movs	r4, r2
 80014d6:	40dc      	lsrs	r4, r3
 80014d8:	d101      	bne.n	80014de <HAL_GPIO_Init+0x12>
        EXTI->IMR = temp;
      }
    }
    position++;
  }
}
 80014da:	b005      	add	sp, #20
 80014dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80014de:	2501      	movs	r5, #1
 80014e0:	0014      	movs	r4, r2
 80014e2:	409d      	lsls	r5, r3
 80014e4:	402c      	ands	r4, r5
 80014e6:	9400      	str	r4, [sp, #0]
    if (iocurrent)
 80014e8:	422a      	tst	r2, r5
 80014ea:	d100      	bne.n	80014ee <HAL_GPIO_Init+0x22>
 80014ec:	e094      	b.n	8001618 <HAL_GPIO_Init+0x14c>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80014ee:	684a      	ldr	r2, [r1, #4]
 80014f0:	005f      	lsls	r7, r3, #1
 80014f2:	4694      	mov	ip, r2
 80014f4:	2203      	movs	r2, #3
 80014f6:	4664      	mov	r4, ip
 80014f8:	4022      	ands	r2, r4
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80014fa:	2403      	movs	r4, #3
 80014fc:	40bc      	lsls	r4, r7
 80014fe:	43e4      	mvns	r4, r4
 8001500:	9401      	str	r4, [sp, #4]
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001502:	1e54      	subs	r4, r2, #1
 8001504:	2c01      	cmp	r4, #1
 8001506:	d82e      	bhi.n	8001566 <HAL_GPIO_Init+0x9a>
        temp = GPIOx->OSPEEDR;
 8001508:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800150a:	9c01      	ldr	r4, [sp, #4]
 800150c:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 800150e:	68cc      	ldr	r4, [r1, #12]
 8001510:	40bc      	lsls	r4, r7
 8001512:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8001514:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8001516:	6844      	ldr	r4, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001518:	2601      	movs	r6, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800151a:	43ac      	bics	r4, r5
 800151c:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800151e:	4664      	mov	r4, ip
 8001520:	0924      	lsrs	r4, r4, #4
 8001522:	4034      	ands	r4, r6
 8001524:	409c      	lsls	r4, r3
 8001526:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8001528:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 800152a:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800152c:	9c01      	ldr	r4, [sp, #4]
 800152e:	4025      	ands	r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001530:	688c      	ldr	r4, [r1, #8]
 8001532:	40bc      	lsls	r4, r7
 8001534:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 8001536:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001538:	2a02      	cmp	r2, #2
 800153a:	d116      	bne.n	800156a <HAL_GPIO_Init+0x9e>
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800153c:	2507      	movs	r5, #7
 800153e:	260f      	movs	r6, #15
 8001540:	401d      	ands	r5, r3
 8001542:	00ad      	lsls	r5, r5, #2
 8001544:	40ae      	lsls	r6, r5
        temp = GPIOx->AFR[position >> 3U];
 8001546:	08dc      	lsrs	r4, r3, #3
 8001548:	00a4      	lsls	r4, r4, #2
 800154a:	1904      	adds	r4, r0, r4
 800154c:	9402      	str	r4, [sp, #8]
 800154e:	6a24      	ldr	r4, [r4, #32]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001550:	9603      	str	r6, [sp, #12]
 8001552:	0026      	movs	r6, r4
 8001554:	9c03      	ldr	r4, [sp, #12]
 8001556:	43a6      	bics	r6, r4
 8001558:	0034      	movs	r4, r6
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800155a:	690e      	ldr	r6, [r1, #16]
 800155c:	40ae      	lsls	r6, r5
 800155e:	4326      	orrs	r6, r4
        GPIOx->AFR[position >> 3U] = temp;
 8001560:	9c02      	ldr	r4, [sp, #8]
 8001562:	6226      	str	r6, [r4, #32]
 8001564:	e001      	b.n	800156a <HAL_GPIO_Init+0x9e>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001566:	2a03      	cmp	r2, #3
 8001568:	d1df      	bne.n	800152a <HAL_GPIO_Init+0x5e>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800156a:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 800156c:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800156e:	9d01      	ldr	r5, [sp, #4]
 8001570:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001572:	432a      	orrs	r2, r5
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001574:	24c0      	movs	r4, #192	@ 0xc0
      GPIOx->MODER = temp;
 8001576:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001578:	4662      	mov	r2, ip
 800157a:	02a4      	lsls	r4, r4, #10
 800157c:	4222      	tst	r2, r4
 800157e:	d04b      	beq.n	8001618 <HAL_GPIO_Init+0x14c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001580:	2501      	movs	r5, #1
 8001582:	4c26      	ldr	r4, [pc, #152]	@ (800161c <HAL_GPIO_Init+0x150>)
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001584:	27a0      	movs	r7, #160	@ 0xa0
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001586:	6b62      	ldr	r2, [r4, #52]	@ 0x34
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001588:	05ff      	lsls	r7, r7, #23
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800158a:	432a      	orrs	r2, r5
 800158c:	6362      	str	r2, [r4, #52]	@ 0x34
        temp = SYSCFG->EXTICR[position >> 2U];
 800158e:	4a24      	ldr	r2, [pc, #144]	@ (8001620 <HAL_GPIO_Init+0x154>)
 8001590:	089c      	lsrs	r4, r3, #2
 8001592:	00a4      	lsls	r4, r4, #2
 8001594:	18a4      	adds	r4, r4, r2
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001596:	220f      	movs	r2, #15
 8001598:	3502      	adds	r5, #2
 800159a:	401d      	ands	r5, r3
 800159c:	00ad      	lsls	r5, r5, #2
 800159e:	40aa      	lsls	r2, r5
        temp = SYSCFG->EXTICR[position >> 2U];
 80015a0:	68a6      	ldr	r6, [r4, #8]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80015a2:	4396      	bics	r6, r2
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80015a4:	2200      	movs	r2, #0
 80015a6:	42b8      	cmp	r0, r7
 80015a8:	d00c      	beq.n	80015c4 <HAL_GPIO_Init+0xf8>
 80015aa:	4f1e      	ldr	r7, [pc, #120]	@ (8001624 <HAL_GPIO_Init+0x158>)
 80015ac:	3201      	adds	r2, #1
 80015ae:	42b8      	cmp	r0, r7
 80015b0:	d008      	beq.n	80015c4 <HAL_GPIO_Init+0xf8>
 80015b2:	4f1d      	ldr	r7, [pc, #116]	@ (8001628 <HAL_GPIO_Init+0x15c>)
 80015b4:	3201      	adds	r2, #1
 80015b6:	42b8      	cmp	r0, r7
 80015b8:	d004      	beq.n	80015c4 <HAL_GPIO_Init+0xf8>
 80015ba:	4a1c      	ldr	r2, [pc, #112]	@ (800162c <HAL_GPIO_Init+0x160>)
 80015bc:	1882      	adds	r2, r0, r2
 80015be:	1e57      	subs	r7, r2, #1
 80015c0:	41ba      	sbcs	r2, r7
 80015c2:	3205      	adds	r2, #5
 80015c4:	40aa      	lsls	r2, r5
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015c6:	4667      	mov	r7, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80015c8:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015ca:	60a2      	str	r2, [r4, #8]
        temp = EXTI->RTSR;
 80015cc:	4a18      	ldr	r2, [pc, #96]	@ (8001630 <HAL_GPIO_Init+0x164>)
        temp &= ~((uint32_t)iocurrent);
 80015ce:	9c00      	ldr	r4, [sp, #0]
        temp = EXTI->RTSR;
 80015d0:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 80015d2:	9d00      	ldr	r5, [sp, #0]
        temp &= ~((uint32_t)iocurrent);
 80015d4:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 80015d6:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015d8:	02ff      	lsls	r7, r7, #11
 80015da:	d401      	bmi.n	80015e0 <HAL_GPIO_Init+0x114>
        temp &= ~((uint32_t)iocurrent);
 80015dc:	0035      	movs	r5, r6
 80015de:	4025      	ands	r5, r4
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015e0:	4667      	mov	r7, ip
        EXTI->RTSR = temp;
 80015e2:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 80015e4:	68d6      	ldr	r6, [r2, #12]
          temp |= iocurrent;
 80015e6:	9d00      	ldr	r5, [sp, #0]
 80015e8:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015ea:	02bf      	lsls	r7, r7, #10
 80015ec:	d401      	bmi.n	80015f2 <HAL_GPIO_Init+0x126>
        temp &= ~((uint32_t)iocurrent);
 80015ee:	0035      	movs	r5, r6
 80015f0:	4025      	ands	r5, r4
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015f2:	4667      	mov	r7, ip
        EXTI->FTSR = temp;
 80015f4:	60d5      	str	r5, [r2, #12]
        temp = EXTI->EMR;
 80015f6:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 80015f8:	9d00      	ldr	r5, [sp, #0]
 80015fa:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015fc:	03bf      	lsls	r7, r7, #14
 80015fe:	d401      	bmi.n	8001604 <HAL_GPIO_Init+0x138>
        temp &= ~((uint32_t)iocurrent);
 8001600:	0035      	movs	r5, r6
 8001602:	4025      	ands	r5, r4
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001604:	4667      	mov	r7, ip
        EXTI->EMR = temp;
 8001606:	6055      	str	r5, [r2, #4]
        temp = EXTI->IMR;
 8001608:	6815      	ldr	r5, [r2, #0]
          temp |= iocurrent;
 800160a:	9e00      	ldr	r6, [sp, #0]
 800160c:	432e      	orrs	r6, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800160e:	03ff      	lsls	r7, r7, #15
 8001610:	d401      	bmi.n	8001616 <HAL_GPIO_Init+0x14a>
        temp &= ~((uint32_t)iocurrent);
 8001612:	4025      	ands	r5, r4
 8001614:	002e      	movs	r6, r5
        EXTI->IMR = temp;
 8001616:	6016      	str	r6, [r2, #0]
    position++;
 8001618:	3301      	adds	r3, #1
 800161a:	e75a      	b.n	80014d2 <HAL_GPIO_Init+0x6>
 800161c:	40021000 	.word	0x40021000
 8001620:	40010000 	.word	0x40010000
 8001624:	50000400 	.word	0x50000400
 8001628:	50000800 	.word	0x50000800
 800162c:	afffe400 	.word	0xafffe400
 8001630:	40010400 	.word	0x40010400

08001634 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001634:	6900      	ldr	r0, [r0, #16]
 8001636:	4008      	ands	r0, r1
 8001638:	1e43      	subs	r3, r0, #1
 800163a:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 800163c:	b2c0      	uxtb	r0, r0
}
 800163e:	4770      	bx	lr

08001640 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001640:	2a00      	cmp	r2, #0
 8001642:	d001      	beq.n	8001648 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001644:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001646:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 8001648:	6281      	str	r1, [r0, #40]	@ 0x28
}
 800164a:	e7fc      	b.n	8001646 <HAL_GPIO_WritePin+0x6>

0800164c <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800164c:	6803      	ldr	r3, [r0, #0]
 800164e:	699a      	ldr	r2, [r3, #24]
 8001650:	0792      	lsls	r2, r2, #30
 8001652:	d501      	bpl.n	8001658 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001654:	2200      	movs	r2, #0
 8001656:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001658:	2201      	movs	r2, #1
 800165a:	6999      	ldr	r1, [r3, #24]
 800165c:	4211      	tst	r1, r2
 800165e:	d102      	bne.n	8001666 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001660:	6999      	ldr	r1, [r3, #24]
 8001662:	430a      	orrs	r2, r1
 8001664:	619a      	str	r2, [r3, #24]
  }
}
 8001666:	4770      	bx	lr

08001668 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001668:	b530      	push	{r4, r5, lr}
 800166a:	9c03      	ldr	r4, [sp, #12]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800166c:	6800      	ldr	r0, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800166e:	4323      	orrs	r3, r4
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001670:	0412      	lsls	r2, r2, #16
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001672:	0589      	lsls	r1, r1, #22
 8001674:	431a      	orrs	r2, r3
 8001676:	0d89      	lsrs	r1, r1, #22
  MODIFY_REG(hi2c->Instance->CR2, \
 8001678:	4b05      	ldr	r3, [pc, #20]	@ (8001690 <I2C_TransferConfig+0x28>)
 800167a:	6845      	ldr	r5, [r0, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800167c:	430a      	orrs	r2, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 800167e:	0d64      	lsrs	r4, r4, #21
 8001680:	4323      	orrs	r3, r4
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001682:	0052      	lsls	r2, r2, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 8001684:	439d      	bics	r5, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001686:	0852      	lsrs	r2, r2, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 8001688:	432a      	orrs	r2, r5
 800168a:	6042      	str	r2, [r0, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800168c:	bd30      	pop	{r4, r5, pc}
 800168e:	46c0      	nop			@ (mov r8, r8)
 8001690:	03ff63ff 	.word	0x03ff63ff

08001694 <I2C_IsErrorOccurred>:
{
 8001694:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001696:	0015      	movs	r5, r2
  uint32_t itflag   = hi2c->Instance->ISR;
 8001698:	6802      	ldr	r2, [r0, #0]
{
 800169a:	000e      	movs	r6, r1
  uint32_t itflag   = hi2c->Instance->ISR;
 800169c:	6991      	ldr	r1, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800169e:	2310      	movs	r3, #16
 80016a0:	000f      	movs	r7, r1
{
 80016a2:	0004      	movs	r4, r0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80016a4:	401f      	ands	r7, r3
  HAL_StatusTypeDef status = HAL_OK;
 80016a6:	2000      	movs	r0, #0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80016a8:	4219      	tst	r1, r3
 80016aa:	d00d      	beq.n	80016c8 <I2C_IsErrorOccurred+0x34>
  HAL_StatusTypeDef status = HAL_OK;
 80016ac:	0007      	movs	r7, r0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80016ae:	61d3      	str	r3, [r2, #28]
  uint32_t error_code = 0;
 80016b0:	9001      	str	r0, [sp, #4]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80016b2:	6823      	ldr	r3, [r4, #0]
 80016b4:	2120      	movs	r1, #32
 80016b6:	699a      	ldr	r2, [r3, #24]
 80016b8:	420a      	tst	r2, r1
 80016ba:	d15f      	bne.n	800177c <I2C_IsErrorOccurred+0xe8>
 80016bc:	2f00      	cmp	r7, #0
 80016be:	d031      	beq.n	8001724 <I2C_IsErrorOccurred+0x90>
    error_code |= HAL_I2C_ERROR_AF;
 80016c0:	2704      	movs	r7, #4
    status = HAL_ERROR;
 80016c2:	2001      	movs	r0, #1
    error_code |= HAL_I2C_ERROR_AF;
 80016c4:	9b01      	ldr	r3, [sp, #4]
 80016c6:	431f      	orrs	r7, r3
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80016c8:	2280      	movs	r2, #128	@ 0x80
  itflag = hi2c->Instance->ISR;
 80016ca:	6825      	ldr	r5, [r4, #0]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80016cc:	0052      	lsls	r2, r2, #1
  itflag = hi2c->Instance->ISR;
 80016ce:	69ab      	ldr	r3, [r5, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80016d0:	4213      	tst	r3, r2
 80016d2:	d002      	beq.n	80016da <I2C_IsErrorOccurred+0x46>
    error_code |= HAL_I2C_ERROR_BERR;
 80016d4:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80016d6:	61ea      	str	r2, [r5, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 80016d8:	4307      	orrs	r7, r0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80016da:	2280      	movs	r2, #128	@ 0x80
 80016dc:	00d2      	lsls	r2, r2, #3
 80016de:	4213      	tst	r3, r2
 80016e0:	d003      	beq.n	80016ea <I2C_IsErrorOccurred+0x56>
    error_code |= HAL_I2C_ERROR_OVR;
 80016e2:	2108      	movs	r1, #8
    status = HAL_ERROR;
 80016e4:	2001      	movs	r0, #1
    error_code |= HAL_I2C_ERROR_OVR;
 80016e6:	430f      	orrs	r7, r1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80016e8:	61ea      	str	r2, [r5, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80016ea:	2280      	movs	r2, #128	@ 0x80
 80016ec:	0092      	lsls	r2, r2, #2
 80016ee:	4213      	tst	r3, r2
 80016f0:	d049      	beq.n	8001786 <I2C_IsErrorOccurred+0xf2>
    error_code |= HAL_I2C_ERROR_ARLO;
 80016f2:	2302      	movs	r3, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80016f4:	61ea      	str	r2, [r5, #28]
    error_code |= HAL_I2C_ERROR_ARLO;
 80016f6:	431f      	orrs	r7, r3
    I2C_Flush_TXDR(hi2c);
 80016f8:	0020      	movs	r0, r4
 80016fa:	f7ff ffa7 	bl	800164c <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80016fe:	686b      	ldr	r3, [r5, #4]
 8001700:	4a22      	ldr	r2, [pc, #136]	@ (800178c <I2C_IsErrorOccurred+0xf8>)
    __HAL_UNLOCK(hi2c);
 8001702:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 8001704:	4013      	ands	r3, r2
 8001706:	606b      	str	r3, [r5, #4]
    hi2c->ErrorCode |= error_code;
 8001708:	6c63      	ldr	r3, [r4, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800170a:	2220      	movs	r2, #32
    hi2c->ErrorCode |= error_code;
 800170c:	433b      	orrs	r3, r7
 800170e:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001710:	0023      	movs	r3, r4
 8001712:	3341      	adds	r3, #65	@ 0x41
 8001714:	701a      	strb	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001716:	0022      	movs	r2, r4
 8001718:	2300      	movs	r3, #0
 800171a:	3242      	adds	r2, #66	@ 0x42
    __HAL_UNLOCK(hi2c);
 800171c:	3440      	adds	r4, #64	@ 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800171e:	7013      	strb	r3, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8001720:	7023      	strb	r3, [r4, #0]
 8001722:	e032      	b.n	800178a <I2C_IsErrorOccurred+0xf6>
      if (Timeout != HAL_MAX_DELAY)
 8001724:	1c72      	adds	r2, r6, #1
 8001726:	d0c5      	beq.n	80016b4 <I2C_IsErrorOccurred+0x20>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001728:	f7ff fcfc 	bl	8001124 <HAL_GetTick>
 800172c:	1b40      	subs	r0, r0, r5
 800172e:	42b0      	cmp	r0, r6
 8001730:	d801      	bhi.n	8001736 <I2C_IsErrorOccurred+0xa2>
 8001732:	2e00      	cmp	r6, #0
 8001734:	d1bd      	bne.n	80016b2 <I2C_IsErrorOccurred+0x1e>
          tmp2 = hi2c->Mode;
 8001736:	0022      	movs	r2, r4
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001738:	6823      	ldr	r3, [r4, #0]
          tmp2 = hi2c->Mode;
 800173a:	3242      	adds	r2, #66	@ 0x42
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800173c:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 800173e:	7811      	ldrb	r1, [r2, #0]
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001740:	699a      	ldr	r2, [r3, #24]
          tmp2 = hi2c->Mode;
 8001742:	b2c9      	uxtb	r1, r1
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001744:	0412      	lsls	r2, r2, #16
 8001746:	d50b      	bpl.n	8001760 <I2C_IsErrorOccurred+0xcc>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001748:	2280      	movs	r2, #128	@ 0x80
 800174a:	01d2      	lsls	r2, r2, #7
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800174c:	4210      	tst	r0, r2
 800174e:	d107      	bne.n	8001760 <I2C_IsErrorOccurred+0xcc>
              (tmp1 != I2C_CR2_STOP) && \
 8001750:	2920      	cmp	r1, #32
 8001752:	d005      	beq.n	8001760 <I2C_IsErrorOccurred+0xcc>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001754:	6859      	ldr	r1, [r3, #4]
 8001756:	430a      	orrs	r2, r1
 8001758:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 800175a:	f7ff fce3 	bl	8001124 <HAL_GetTick>
 800175e:	0005      	movs	r5, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001760:	2220      	movs	r2, #32
 8001762:	6823      	ldr	r3, [r4, #0]
 8001764:	699b      	ldr	r3, [r3, #24]
 8001766:	4213      	tst	r3, r2
 8001768:	d1a3      	bne.n	80016b2 <I2C_IsErrorOccurred+0x1e>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800176a:	f7ff fcdb 	bl	8001124 <HAL_GetTick>
 800176e:	1b40      	subs	r0, r0, r5
 8001770:	2819      	cmp	r0, #25
 8001772:	d9f5      	bls.n	8001760 <I2C_IsErrorOccurred+0xcc>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001774:	2320      	movs	r3, #32
              status = HAL_ERROR;
 8001776:	2701      	movs	r7, #1
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001778:	9301      	str	r3, [sp, #4]
 800177a:	e79a      	b.n	80016b2 <I2C_IsErrorOccurred+0x1e>
    if (status == HAL_OK)
 800177c:	2f00      	cmp	r7, #0
 800177e:	d19f      	bne.n	80016c0 <I2C_IsErrorOccurred+0x2c>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001780:	2220      	movs	r2, #32
 8001782:	61da      	str	r2, [r3, #28]
 8001784:	e79c      	b.n	80016c0 <I2C_IsErrorOccurred+0x2c>
  if (status != HAL_OK)
 8001786:	2800      	cmp	r0, #0
 8001788:	d1b6      	bne.n	80016f8 <I2C_IsErrorOccurred+0x64>
}
 800178a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800178c:	fe00e800 	.word	0xfe00e800

08001790 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8001790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001792:	0004      	movs	r4, r0
 8001794:	000d      	movs	r5, r1
 8001796:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001798:	2702      	movs	r7, #2
 800179a:	6823      	ldr	r3, [r4, #0]
 800179c:	699b      	ldr	r3, [r3, #24]
 800179e:	423b      	tst	r3, r7
 80017a0:	d001      	beq.n	80017a6 <I2C_WaitOnTXISFlagUntilTimeout+0x16>
  return HAL_OK;
 80017a2:	2000      	movs	r0, #0
 80017a4:	e021      	b.n	80017ea <I2C_WaitOnTXISFlagUntilTimeout+0x5a>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80017a6:	0032      	movs	r2, r6
 80017a8:	0029      	movs	r1, r5
 80017aa:	0020      	movs	r0, r4
 80017ac:	f7ff ff72 	bl	8001694 <I2C_IsErrorOccurred>
 80017b0:	2800      	cmp	r0, #0
 80017b2:	d119      	bne.n	80017e8 <I2C_WaitOnTXISFlagUntilTimeout+0x58>
    if (Timeout != HAL_MAX_DELAY)
 80017b4:	1c6b      	adds	r3, r5, #1
 80017b6:	d0f0      	beq.n	800179a <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017b8:	f7ff fcb4 	bl	8001124 <HAL_GetTick>
 80017bc:	1b80      	subs	r0, r0, r6
 80017be:	42a8      	cmp	r0, r5
 80017c0:	d801      	bhi.n	80017c6 <I2C_WaitOnTXISFlagUntilTimeout+0x36>
 80017c2:	2d00      	cmp	r5, #0
 80017c4:	d1e9      	bne.n	800179a <I2C_WaitOnTXISFlagUntilTimeout+0xa>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80017c6:	6823      	ldr	r3, [r4, #0]
 80017c8:	6999      	ldr	r1, [r3, #24]
 80017ca:	2302      	movs	r3, #2
 80017cc:	000a      	movs	r2, r1
 80017ce:	401a      	ands	r2, r3
 80017d0:	4219      	tst	r1, r3
 80017d2:	d1e2      	bne.n	800179a <I2C_WaitOnTXISFlagUntilTimeout+0xa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80017d4:	2120      	movs	r1, #32
 80017d6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80017d8:	430b      	orrs	r3, r1
 80017da:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80017dc:	0023      	movs	r3, r4
          __HAL_UNLOCK(hi2c);
 80017de:	3440      	adds	r4, #64	@ 0x40
          hi2c->State = HAL_I2C_STATE_READY;
 80017e0:	3341      	adds	r3, #65	@ 0x41
 80017e2:	7019      	strb	r1, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80017e4:	705a      	strb	r2, [r3, #1]
          __HAL_UNLOCK(hi2c);
 80017e6:	7022      	strb	r2, [r4, #0]
      return HAL_ERROR;
 80017e8:	2001      	movs	r0, #1
}
 80017ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080017ec <I2C_WaitOnFlagUntilTimeout>:
{
 80017ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017ee:	0004      	movs	r4, r0
 80017f0:	000d      	movs	r5, r1
 80017f2:	0017      	movs	r7, r2
 80017f4:	001e      	movs	r6, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80017f6:	6822      	ldr	r2, [r4, #0]
 80017f8:	6993      	ldr	r3, [r2, #24]
 80017fa:	402b      	ands	r3, r5
 80017fc:	1b5b      	subs	r3, r3, r5
 80017fe:	4259      	negs	r1, r3
 8001800:	414b      	adcs	r3, r1
 8001802:	42bb      	cmp	r3, r7
 8001804:	d001      	beq.n	800180a <I2C_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 8001806:	2000      	movs	r0, #0
 8001808:	e01f      	b.n	800184a <I2C_WaitOnFlagUntilTimeout+0x5e>
    if (Timeout != HAL_MAX_DELAY)
 800180a:	1c73      	adds	r3, r6, #1
 800180c:	d0f4      	beq.n	80017f8 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800180e:	f7ff fc89 	bl	8001124 <HAL_GetTick>
 8001812:	9b06      	ldr	r3, [sp, #24]
 8001814:	1ac0      	subs	r0, r0, r3
 8001816:	42b0      	cmp	r0, r6
 8001818:	d801      	bhi.n	800181e <I2C_WaitOnFlagUntilTimeout+0x32>
 800181a:	2e00      	cmp	r6, #0
 800181c:	d1eb      	bne.n	80017f6 <I2C_WaitOnFlagUntilTimeout+0xa>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800181e:	6823      	ldr	r3, [r4, #0]
 8001820:	699b      	ldr	r3, [r3, #24]
 8001822:	402b      	ands	r3, r5
 8001824:	1b5b      	subs	r3, r3, r5
 8001826:	425a      	negs	r2, r3
 8001828:	4153      	adcs	r3, r2
 800182a:	42bb      	cmp	r3, r7
 800182c:	d1e3      	bne.n	80017f6 <I2C_WaitOnFlagUntilTimeout+0xa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800182e:	2220      	movs	r2, #32
 8001830:	6c63      	ldr	r3, [r4, #68]	@ 0x44
          return HAL_ERROR;
 8001832:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001834:	4313      	orrs	r3, r2
 8001836:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001838:	0023      	movs	r3, r4
 800183a:	3341      	adds	r3, #65	@ 0x41
 800183c:	701a      	strb	r2, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800183e:	0022      	movs	r2, r4
 8001840:	2300      	movs	r3, #0
 8001842:	3242      	adds	r2, #66	@ 0x42
          __HAL_UNLOCK(hi2c);
 8001844:	3440      	adds	r4, #64	@ 0x40
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001846:	7013      	strb	r3, [r2, #0]
          __HAL_UNLOCK(hi2c);
 8001848:	7023      	strb	r3, [r4, #0]
}
 800184a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800184c <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800184c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800184e:	0004      	movs	r4, r0
 8001850:	000e      	movs	r6, r1
 8001852:	0017      	movs	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001854:	2520      	movs	r5, #32
 8001856:	6823      	ldr	r3, [r4, #0]
 8001858:	699b      	ldr	r3, [r3, #24]
 800185a:	422b      	tst	r3, r5
 800185c:	d001      	beq.n	8001862 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 800185e:	2000      	movs	r0, #0
 8001860:	e01d      	b.n	800189e <I2C_WaitOnSTOPFlagUntilTimeout+0x52>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001862:	003a      	movs	r2, r7
 8001864:	0031      	movs	r1, r6
 8001866:	0020      	movs	r0, r4
 8001868:	f7ff ff14 	bl	8001694 <I2C_IsErrorOccurred>
 800186c:	2800      	cmp	r0, #0
 800186e:	d115      	bne.n	800189c <I2C_WaitOnSTOPFlagUntilTimeout+0x50>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001870:	f7ff fc58 	bl	8001124 <HAL_GetTick>
 8001874:	1bc0      	subs	r0, r0, r7
 8001876:	42b0      	cmp	r0, r6
 8001878:	d801      	bhi.n	800187e <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
 800187a:	2e00      	cmp	r6, #0
 800187c:	d1eb      	bne.n	8001856 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800187e:	6823      	ldr	r3, [r4, #0]
 8001880:	699b      	ldr	r3, [r3, #24]
 8001882:	001a      	movs	r2, r3
 8001884:	402a      	ands	r2, r5
 8001886:	422b      	tst	r3, r5
 8001888:	d1e5      	bne.n	8001856 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800188a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800188c:	432b      	orrs	r3, r5
 800188e:	6463      	str	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001890:	0023      	movs	r3, r4
        __HAL_UNLOCK(hi2c);
 8001892:	3440      	adds	r4, #64	@ 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 8001894:	3341      	adds	r3, #65	@ 0x41
 8001896:	701d      	strb	r5, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001898:	705a      	strb	r2, [r3, #1]
        __HAL_UNLOCK(hi2c);
 800189a:	7022      	strb	r2, [r4, #0]
      return HAL_ERROR;
 800189c:	2001      	movs	r0, #1
}
 800189e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080018a0 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 80018a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018a2:	0004      	movs	r4, r0
 80018a4:	000d      	movs	r5, r1
 80018a6:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80018a8:	2704      	movs	r7, #4
 80018aa:	6823      	ldr	r3, [r4, #0]
 80018ac:	699b      	ldr	r3, [r3, #24]
 80018ae:	423b      	tst	r3, r7
 80018b0:	d111      	bne.n	80018d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x36>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80018b2:	0032      	movs	r2, r6
 80018b4:	0029      	movs	r1, r5
 80018b6:	0020      	movs	r0, r4
 80018b8:	f7ff feec 	bl	8001694 <I2C_IsErrorOccurred>
 80018bc:	2800      	cmp	r0, #0
 80018be:	d123      	bne.n	8001908 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80018c0:	2120      	movs	r1, #32
 80018c2:	6823      	ldr	r3, [r4, #0]
 80018c4:	699a      	ldr	r2, [r3, #24]
 80018c6:	420a      	tst	r2, r1
 80018c8:	d022      	beq.n	8001910 <I2C_WaitOnRXNEFlagUntilTimeout+0x70>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80018ca:	699a      	ldr	r2, [r3, #24]
 80018cc:	423a      	tst	r2, r7
 80018ce:	d004      	beq.n	80018da <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
 80018d0:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 80018d2:	2a00      	cmp	r2, #0
 80018d4:	d001      	beq.n	80018da <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
        return HAL_OK;
 80018d6:	2000      	movs	r0, #0
}
 80018d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80018da:	6999      	ldr	r1, [r3, #24]
 80018dc:	2210      	movs	r2, #16
 80018de:	0008      	movs	r0, r1
 80018e0:	4010      	ands	r0, r2
 80018e2:	4211      	tst	r1, r2
 80018e4:	d012      	beq.n	800190c <I2C_WaitOnRXNEFlagUntilTimeout+0x6c>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80018e6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80018e8:	3a0c      	subs	r2, #12
 80018ea:	6462      	str	r2, [r4, #68]	@ 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80018ec:	2120      	movs	r1, #32
 80018ee:	61d9      	str	r1, [r3, #28]
        I2C_RESET_CR2(hi2c);
 80018f0:	685a      	ldr	r2, [r3, #4]
 80018f2:	4811      	ldr	r0, [pc, #68]	@ (8001938 <I2C_WaitOnRXNEFlagUntilTimeout+0x98>)
 80018f4:	4002      	ands	r2, r0
 80018f6:	605a      	str	r2, [r3, #4]
        hi2c->State = HAL_I2C_STATE_READY;
 80018f8:	0023      	movs	r3, r4
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80018fa:	2200      	movs	r2, #0
        hi2c->State = HAL_I2C_STATE_READY;
 80018fc:	3341      	adds	r3, #65	@ 0x41
 80018fe:	7019      	strb	r1, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001900:	705a      	strb	r2, [r3, #1]
        __HAL_UNLOCK(hi2c);
 8001902:	2300      	movs	r3, #0
 8001904:	3440      	adds	r4, #64	@ 0x40
 8001906:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 8001908:	2001      	movs	r0, #1
 800190a:	e7e5      	b.n	80018d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800190c:	6460      	str	r0, [r4, #68]	@ 0x44
 800190e:	e7ed      	b.n	80018ec <I2C_WaitOnRXNEFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001910:	f7ff fc08 	bl	8001124 <HAL_GetTick>
 8001914:	1b80      	subs	r0, r0, r6
 8001916:	42a8      	cmp	r0, r5
 8001918:	d801      	bhi.n	800191e <I2C_WaitOnRXNEFlagUntilTimeout+0x7e>
 800191a:	2d00      	cmp	r5, #0
 800191c:	d1c5      	bne.n	80018aa <I2C_WaitOnRXNEFlagUntilTimeout+0xa>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800191e:	6823      	ldr	r3, [r4, #0]
 8001920:	699b      	ldr	r3, [r3, #24]
 8001922:	423b      	tst	r3, r7
 8001924:	d1c1      	bne.n	80018aa <I2C_WaitOnRXNEFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001926:	2220      	movs	r2, #32
 8001928:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800192a:	4313      	orrs	r3, r2
 800192c:	6463      	str	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800192e:	0023      	movs	r3, r4
 8001930:	3341      	adds	r3, #65	@ 0x41
 8001932:	701a      	strb	r2, [r3, #0]
        return HAL_ERROR;
 8001934:	e7e5      	b.n	8001902 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8001936:	46c0      	nop			@ (mov r8, r8)
 8001938:	fe00e800 	.word	0xfe00e800

0800193c <HAL_I2C_Init>:
{
 800193c:	b570      	push	{r4, r5, r6, lr}
 800193e:	0004      	movs	r4, r0
    return HAL_ERROR;
 8001940:	2001      	movs	r0, #1
  if (hi2c == NULL)
 8001942:	2c00      	cmp	r4, #0
 8001944:	d03f      	beq.n	80019c6 <HAL_I2C_Init+0x8a>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001946:	0025      	movs	r5, r4
 8001948:	3541      	adds	r5, #65	@ 0x41
 800194a:	782b      	ldrb	r3, [r5, #0]
 800194c:	b2da      	uxtb	r2, r3
 800194e:	2b00      	cmp	r3, #0
 8001950:	d105      	bne.n	800195e <HAL_I2C_Init+0x22>
    hi2c->Lock = HAL_UNLOCKED;
 8001952:	0023      	movs	r3, r4
 8001954:	3340      	adds	r3, #64	@ 0x40
    HAL_I2C_MspInit(hi2c);
 8001956:	0020      	movs	r0, r4
    hi2c->Lock = HAL_UNLOCKED;
 8001958:	701a      	strb	r2, [r3, #0]
    HAL_I2C_MspInit(hi2c);
 800195a:	f7ff f929 	bl	8000bb0 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800195e:	2324      	movs	r3, #36	@ 0x24
  __HAL_I2C_DISABLE(hi2c);
 8001960:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001962:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 8001964:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001966:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8001968:	681a      	ldr	r2, [r3, #0]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800196a:	68a6      	ldr	r6, [r4, #8]
  __HAL_I2C_DISABLE(hi2c);
 800196c:	438a      	bics	r2, r1
 800196e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001970:	491a      	ldr	r1, [pc, #104]	@ (80019dc <HAL_I2C_Init+0xa0>)
 8001972:	6862      	ldr	r2, [r4, #4]
 8001974:	400a      	ands	r2, r1
 8001976:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001978:	689a      	ldr	r2, [r3, #8]
 800197a:	4919      	ldr	r1, [pc, #100]	@ (80019e0 <HAL_I2C_Init+0xa4>)
 800197c:	400a      	ands	r2, r1
 800197e:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001980:	2801      	cmp	r0, #1
 8001982:	d121      	bne.n	80019c8 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001984:	2280      	movs	r2, #128	@ 0x80
 8001986:	0212      	lsls	r2, r2, #8
 8001988:	4332      	orrs	r2, r6
 800198a:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800198c:	6858      	ldr	r0, [r3, #4]
 800198e:	4a15      	ldr	r2, [pc, #84]	@ (80019e4 <HAL_I2C_Init+0xa8>)
 8001990:	4302      	orrs	r2, r0
 8001992:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001994:	68da      	ldr	r2, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001996:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001998:	400a      	ands	r2, r1
 800199a:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800199c:	6961      	ldr	r1, [r4, #20]
 800199e:	6922      	ldr	r2, [r4, #16]
 80019a0:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 80019a2:	69a1      	ldr	r1, [r4, #24]
 80019a4:	0209      	lsls	r1, r1, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80019a6:	430a      	orrs	r2, r1
 80019a8:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80019aa:	6a21      	ldr	r1, [r4, #32]
 80019ac:	69e2      	ldr	r2, [r4, #28]
 80019ae:	430a      	orrs	r2, r1
 80019b0:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80019b2:	2201      	movs	r2, #1
 80019b4:	6819      	ldr	r1, [r3, #0]
 80019b6:	430a      	orrs	r2, r1
 80019b8:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80019ba:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019bc:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80019be:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 80019c0:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019c2:	3442      	adds	r4, #66	@ 0x42
 80019c4:	7020      	strb	r0, [r4, #0]
}
 80019c6:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80019c8:	2284      	movs	r2, #132	@ 0x84
 80019ca:	0212      	lsls	r2, r2, #8
 80019cc:	4332      	orrs	r2, r6
 80019ce:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80019d0:	2802      	cmp	r0, #2
 80019d2:	d1db      	bne.n	800198c <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80019d4:	2280      	movs	r2, #128	@ 0x80
 80019d6:	0112      	lsls	r2, r2, #4
 80019d8:	605a      	str	r2, [r3, #4]
 80019da:	e7d7      	b.n	800198c <HAL_I2C_Init+0x50>
 80019dc:	f0ffffff 	.word	0xf0ffffff
 80019e0:	ffff7fff 	.word	0xffff7fff
 80019e4:	02008000 	.word	0x02008000

080019e8 <HAL_I2C_Master_Transmit>:
{
 80019e8:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 80019ea:	0006      	movs	r6, r0
{
 80019ec:	b085      	sub	sp, #20
 80019ee:	9202      	str	r2, [sp, #8]
 80019f0:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80019f2:	3641      	adds	r6, #65	@ 0x41
 80019f4:	7833      	ldrb	r3, [r6, #0]
{
 80019f6:	0004      	movs	r4, r0
 80019f8:	000f      	movs	r7, r1
    __HAL_LOCK(hi2c);
 80019fa:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80019fc:	2b20      	cmp	r3, #32
 80019fe:	d114      	bne.n	8001a2a <HAL_I2C_Master_Transmit+0x42>
    __HAL_LOCK(hi2c);
 8001a00:	0023      	movs	r3, r4
 8001a02:	3340      	adds	r3, #64	@ 0x40
 8001a04:	781a      	ldrb	r2, [r3, #0]
 8001a06:	2a01      	cmp	r2, #1
 8001a08:	d00f      	beq.n	8001a2a <HAL_I2C_Master_Transmit+0x42>
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8001a0e:	f7ff fb89 	bl	8001124 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001a12:	2180      	movs	r1, #128	@ 0x80
    tickstart = HAL_GetTick();
 8001a14:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001a16:	9000      	str	r0, [sp, #0]
 8001a18:	2319      	movs	r3, #25
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	0020      	movs	r0, r4
 8001a1e:	0209      	lsls	r1, r1, #8
 8001a20:	f7ff fee4 	bl	80017ec <I2C_WaitOnFlagUntilTimeout>
 8001a24:	2800      	cmp	r0, #0
 8001a26:	d002      	beq.n	8001a2e <HAL_I2C_Master_Transmit+0x46>
      return HAL_ERROR;
 8001a28:	2001      	movs	r0, #1
}
 8001a2a:	b005      	add	sp, #20
 8001a2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001a2e:	2321      	movs	r3, #33	@ 0x21
 8001a30:	7033      	strb	r3, [r6, #0]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001a32:	0026      	movs	r6, r4
 8001a34:	3b11      	subs	r3, #17
 8001a36:	3642      	adds	r6, #66	@ 0x42
 8001a38:	7033      	strb	r3, [r6, #0]
    hi2c->pBuffPtr  = pData;
 8001a3a:	9b02      	ldr	r3, [sp, #8]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a3c:	6460      	str	r0, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
 8001a3e:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001a40:	9b03      	ldr	r3, [sp, #12]
    hi2c->XferISR   = NULL;
 8001a42:	6360      	str	r0, [r4, #52]	@ 0x34
    hi2c->XferCount = Size;
 8001a44:	8563      	strh	r3, [r4, #42]	@ 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a46:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8001a48:	4b2b      	ldr	r3, [pc, #172]	@ (8001af8 <HAL_I2C_Master_Transmit+0x110>)
 8001a4a:	2aff      	cmp	r2, #255	@ 0xff
 8001a4c:	d920      	bls.n	8001a90 <HAL_I2C_Master_Transmit+0xa8>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a4e:	22ff      	movs	r2, #255	@ 0xff
 8001a50:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001a52:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001a54:	2380      	movs	r3, #128	@ 0x80
 8001a56:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001a58:	0039      	movs	r1, r7
 8001a5a:	0020      	movs	r0, r4
 8001a5c:	f7ff fe04 	bl	8001668 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001a60:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a62:	002a      	movs	r2, r5
 8001a64:	0020      	movs	r0, r4
 8001a66:	990a      	ldr	r1, [sp, #40]	@ 0x28
    while (hi2c->XferCount > 0U)
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d119      	bne.n	8001aa0 <HAL_I2C_Master_Transmit+0xb8>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a6c:	f7ff feee 	bl	800184c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001a70:	2800      	cmp	r0, #0
 8001a72:	d1d9      	bne.n	8001a28 <HAL_I2C_Master_Transmit+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a74:	2120      	movs	r1, #32
 8001a76:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8001a78:	4d20      	ldr	r5, [pc, #128]	@ (8001afc <HAL_I2C_Master_Transmit+0x114>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a7a:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8001a7c:	685a      	ldr	r2, [r3, #4]
 8001a7e:	402a      	ands	r2, r5
 8001a80:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001a82:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 8001a84:	3440      	adds	r4, #64	@ 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8001a86:	3341      	adds	r3, #65	@ 0x41
 8001a88:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001a8a:	7030      	strb	r0, [r6, #0]
    __HAL_UNLOCK(hi2c);
 8001a8c:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8001a8e:	e7cc      	b.n	8001a2a <HAL_I2C_Master_Transmit+0x42>
      hi2c->XferSize = hi2c->XferCount;
 8001a90:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8001a92:	b292      	uxth	r2, r2
 8001a94:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001a96:	b2d2      	uxtb	r2, r2
 8001a98:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001a9a:	2380      	movs	r3, #128	@ 0x80
 8001a9c:	049b      	lsls	r3, r3, #18
 8001a9e:	e7db      	b.n	8001a58 <HAL_I2C_Master_Transmit+0x70>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001aa0:	f7ff fe76 	bl	8001790 <I2C_WaitOnTXISFlagUntilTimeout>
 8001aa4:	2800      	cmp	r0, #0
 8001aa6:	d1bf      	bne.n	8001a28 <HAL_I2C_Master_Transmit+0x40>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001aa8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001aaa:	6822      	ldr	r2, [r4, #0]
 8001aac:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 8001aae:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001ab0:	6291      	str	r1, [r2, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8001ab2:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8001ab4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8001ab6:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8001ab8:	3b01      	subs	r3, #1
 8001aba:	b29b      	uxth	r3, r3
 8001abc:	8563      	strh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8001abe:	3a01      	subs	r2, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001ac0:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8001ac2:	b292      	uxth	r2, r2
 8001ac4:	8522      	strh	r2, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d0ca      	beq.n	8001a60 <HAL_I2C_Master_Transmit+0x78>
 8001aca:	2a00      	cmp	r2, #0
 8001acc:	d1c8      	bne.n	8001a60 <HAL_I2C_Master_Transmit+0x78>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001ace:	2180      	movs	r1, #128	@ 0x80
 8001ad0:	0020      	movs	r0, r4
 8001ad2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8001ad4:	9500      	str	r5, [sp, #0]
 8001ad6:	f7ff fe89 	bl	80017ec <I2C_WaitOnFlagUntilTimeout>
 8001ada:	2800      	cmp	r0, #0
 8001adc:	d1a4      	bne.n	8001a28 <HAL_I2C_Master_Transmit+0x40>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ade:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001ae0:	2bff      	cmp	r3, #255	@ 0xff
 8001ae2:	d903      	bls.n	8001aec <HAL_I2C_Master_Transmit+0x104>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ae4:	22ff      	movs	r2, #255	@ 0xff
 8001ae6:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001ae8:	9000      	str	r0, [sp, #0]
 8001aea:	e7b3      	b.n	8001a54 <HAL_I2C_Master_Transmit+0x6c>
          hi2c->XferSize = hi2c->XferCount;
 8001aec:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8001aee:	b292      	uxth	r2, r2
 8001af0:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001af2:	b2d2      	uxtb	r2, r2
 8001af4:	9000      	str	r0, [sp, #0]
 8001af6:	e7d0      	b.n	8001a9a <HAL_I2C_Master_Transmit+0xb2>
 8001af8:	80002000 	.word	0x80002000
 8001afc:	fe00e800 	.word	0xfe00e800

08001b00 <HAL_I2C_Master_Receive>:
{
 8001b00:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b02:	0006      	movs	r6, r0
{
 8001b04:	b085      	sub	sp, #20
 8001b06:	9202      	str	r2, [sp, #8]
 8001b08:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b0a:	3641      	adds	r6, #65	@ 0x41
 8001b0c:	7833      	ldrb	r3, [r6, #0]
{
 8001b0e:	0004      	movs	r4, r0
 8001b10:	000f      	movs	r7, r1
    __HAL_LOCK(hi2c);
 8001b12:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b14:	2b20      	cmp	r3, #32
 8001b16:	d114      	bne.n	8001b42 <HAL_I2C_Master_Receive+0x42>
    __HAL_LOCK(hi2c);
 8001b18:	0023      	movs	r3, r4
 8001b1a:	3340      	adds	r3, #64	@ 0x40
 8001b1c:	781a      	ldrb	r2, [r3, #0]
 8001b1e:	2a01      	cmp	r2, #1
 8001b20:	d00f      	beq.n	8001b42 <HAL_I2C_Master_Receive+0x42>
 8001b22:	2201      	movs	r2, #1
 8001b24:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8001b26:	f7ff fafd 	bl	8001124 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001b2a:	2180      	movs	r1, #128	@ 0x80
    tickstart = HAL_GetTick();
 8001b2c:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001b2e:	9000      	str	r0, [sp, #0]
 8001b30:	2319      	movs	r3, #25
 8001b32:	2201      	movs	r2, #1
 8001b34:	0020      	movs	r0, r4
 8001b36:	0209      	lsls	r1, r1, #8
 8001b38:	f7ff fe58 	bl	80017ec <I2C_WaitOnFlagUntilTimeout>
 8001b3c:	2800      	cmp	r0, #0
 8001b3e:	d002      	beq.n	8001b46 <HAL_I2C_Master_Receive+0x46>
      return HAL_ERROR;
 8001b40:	2001      	movs	r0, #1
}
 8001b42:	b005      	add	sp, #20
 8001b44:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001b46:	2322      	movs	r3, #34	@ 0x22
 8001b48:	7033      	strb	r3, [r6, #0]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001b4a:	0026      	movs	r6, r4
 8001b4c:	3b12      	subs	r3, #18
 8001b4e:	3642      	adds	r6, #66	@ 0x42
 8001b50:	7033      	strb	r3, [r6, #0]
    hi2c->pBuffPtr  = pData;
 8001b52:	9b02      	ldr	r3, [sp, #8]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b54:	6460      	str	r0, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
 8001b56:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001b58:	9b03      	ldr	r3, [sp, #12]
    hi2c->XferISR   = NULL;
 8001b5a:	6360      	str	r0, [r4, #52]	@ 0x34
    hi2c->XferCount = Size;
 8001b5c:	8563      	strh	r3, [r4, #42]	@ 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b5e:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8001b60:	4b2c      	ldr	r3, [pc, #176]	@ (8001c14 <HAL_I2C_Master_Receive+0x114>)
 8001b62:	2aff      	cmp	r2, #255	@ 0xff
 8001b64:	d920      	bls.n	8001ba8 <HAL_I2C_Master_Receive+0xa8>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b66:	22ff      	movs	r2, #255	@ 0xff
 8001b68:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001b6a:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001b6c:	2380      	movs	r3, #128	@ 0x80
 8001b6e:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001b70:	0039      	movs	r1, r7
 8001b72:	0020      	movs	r0, r4
 8001b74:	f7ff fd78 	bl	8001668 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001b78:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b7a:	002a      	movs	r2, r5
 8001b7c:	0020      	movs	r0, r4
 8001b7e:	990a      	ldr	r1, [sp, #40]	@ 0x28
    while (hi2c->XferCount > 0U)
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d119      	bne.n	8001bb8 <HAL_I2C_Master_Receive+0xb8>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b84:	f7ff fe62 	bl	800184c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001b88:	2800      	cmp	r0, #0
 8001b8a:	d1d9      	bne.n	8001b40 <HAL_I2C_Master_Receive+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b8c:	2120      	movs	r1, #32
 8001b8e:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8001b90:	4d21      	ldr	r5, [pc, #132]	@ (8001c18 <HAL_I2C_Master_Receive+0x118>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b92:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8001b94:	685a      	ldr	r2, [r3, #4]
 8001b96:	402a      	ands	r2, r5
 8001b98:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001b9a:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 8001b9c:	3440      	adds	r4, #64	@ 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8001b9e:	3341      	adds	r3, #65	@ 0x41
 8001ba0:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001ba2:	7030      	strb	r0, [r6, #0]
    __HAL_UNLOCK(hi2c);
 8001ba4:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8001ba6:	e7cc      	b.n	8001b42 <HAL_I2C_Master_Receive+0x42>
      hi2c->XferSize = hi2c->XferCount;
 8001ba8:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8001baa:	b292      	uxth	r2, r2
 8001bac:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001bae:	b2d2      	uxtb	r2, r2
 8001bb0:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001bb2:	2380      	movs	r3, #128	@ 0x80
 8001bb4:	049b      	lsls	r3, r3, #18
 8001bb6:	e7db      	b.n	8001b70 <HAL_I2C_Master_Receive+0x70>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bb8:	f7ff fe72 	bl	80018a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001bbc:	2800      	cmp	r0, #0
 8001bbe:	d1bf      	bne.n	8001b40 <HAL_I2C_Master_Receive+0x40>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001bc0:	6823      	ldr	r3, [r4, #0]
 8001bc2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001bc4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001bc6:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8001bc8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 8001bca:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8001bcc:	3301      	adds	r3, #1
 8001bce:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8001bd0:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8001bd2:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8001bd4:	3b01      	subs	r3, #1
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001bda:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8001bdc:	b292      	uxth	r2, r2
 8001bde:	8522      	strh	r2, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d0c9      	beq.n	8001b78 <HAL_I2C_Master_Receive+0x78>
 8001be4:	2a00      	cmp	r2, #0
 8001be6:	d1c7      	bne.n	8001b78 <HAL_I2C_Master_Receive+0x78>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001be8:	2180      	movs	r1, #128	@ 0x80
 8001bea:	0020      	movs	r0, r4
 8001bec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8001bee:	9500      	str	r5, [sp, #0]
 8001bf0:	f7ff fdfc 	bl	80017ec <I2C_WaitOnFlagUntilTimeout>
 8001bf4:	2800      	cmp	r0, #0
 8001bf6:	d1a3      	bne.n	8001b40 <HAL_I2C_Master_Receive+0x40>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001bf8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001bfa:	2bff      	cmp	r3, #255	@ 0xff
 8001bfc:	d903      	bls.n	8001c06 <HAL_I2C_Master_Receive+0x106>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001bfe:	22ff      	movs	r2, #255	@ 0xff
 8001c00:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001c02:	9000      	str	r0, [sp, #0]
 8001c04:	e7b2      	b.n	8001b6c <HAL_I2C_Master_Receive+0x6c>
          hi2c->XferSize = hi2c->XferCount;
 8001c06:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8001c08:	b292      	uxth	r2, r2
 8001c0a:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001c0c:	b2d2      	uxtb	r2, r2
 8001c0e:	9000      	str	r0, [sp, #0]
 8001c10:	e7cf      	b.n	8001bb2 <HAL_I2C_Master_Receive+0xb2>
 8001c12:	46c0      	nop			@ (mov r8, r8)
 8001c14:	80002400 	.word	0x80002400
 8001c18:	fe00e800 	.word	0xfe00e800

08001c1c <HAL_I2C_IsDeviceReady>:
{
 8001c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c1e:	001d      	movs	r5, r3
  __IO uint32_t I2C_Trials = 0UL;
 8001c20:	2300      	movs	r3, #0
{
 8001c22:	b089      	sub	sp, #36	@ 0x24
  __IO uint32_t I2C_Trials = 0UL;
 8001c24:	9307      	str	r3, [sp, #28]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c26:	0003      	movs	r3, r0
 8001c28:	3341      	adds	r3, #65	@ 0x41
{
 8001c2a:	9205      	str	r2, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c2c:	9303      	str	r3, [sp, #12]
 8001c2e:	781b      	ldrb	r3, [r3, #0]
{
 8001c30:	0004      	movs	r4, r0
      return HAL_BUSY;
 8001c32:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c34:	2b20      	cmp	r3, #32
 8001c36:	d158      	bne.n	8001cea <HAL_I2C_IsDeviceReady+0xce>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001c38:	6823      	ldr	r3, [r4, #0]
 8001c3a:	699e      	ldr	r6, [r3, #24]
 8001c3c:	2380      	movs	r3, #128	@ 0x80
 8001c3e:	0032      	movs	r2, r6
 8001c40:	021b      	lsls	r3, r3, #8
 8001c42:	401a      	ands	r2, r3
 8001c44:	421e      	tst	r6, r3
 8001c46:	d150      	bne.n	8001cea <HAL_I2C_IsDeviceReady+0xce>
    __HAL_LOCK(hi2c);
 8001c48:	0023      	movs	r3, r4
 8001c4a:	3340      	adds	r3, #64	@ 0x40
 8001c4c:	781e      	ldrb	r6, [r3, #0]
 8001c4e:	2e01      	cmp	r6, #1
 8001c50:	d04b      	beq.n	8001cea <HAL_I2C_IsDeviceReady+0xce>
 8001c52:	2601      	movs	r6, #1
 8001c54:	701e      	strb	r6, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c56:	2324      	movs	r3, #36	@ 0x24
 8001c58:	9803      	ldr	r0, [sp, #12]
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001c5a:	0589      	lsls	r1, r1, #22
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c5c:	7003      	strb	r3, [r0, #0]
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001c5e:	0d8b      	lsrs	r3, r1, #22
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c60:	6462      	str	r2, [r4, #68]	@ 0x44
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001c62:	9304      	str	r3, [sp, #16]
 8001c64:	68e3      	ldr	r3, [r4, #12]
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d129      	bne.n	8001cbe <HAL_I2C_IsDeviceReady+0xa2>
 8001c6a:	4b36      	ldr	r3, [pc, #216]	@ (8001d44 <HAL_I2C_IsDeviceReady+0x128>)
 8001c6c:	9a04      	ldr	r2, [sp, #16]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	6822      	ldr	r2, [r4, #0]
 8001c72:	6053      	str	r3, [r2, #4]
      tickstart = HAL_GetTick();
 8001c74:	f7ff fa56 	bl	8001124 <HAL_GetTick>
 8001c78:	9002      	str	r0, [sp, #8]
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c7a:	6822      	ldr	r2, [r4, #0]
 8001c7c:	6993      	ldr	r3, [r2, #24]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001c7e:	6992      	ldr	r2, [r2, #24]
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c80:	095b      	lsrs	r3, r3, #5
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001c82:	0912      	lsrs	r2, r2, #4
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c84:	4033      	ands	r3, r6
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001c86:	4032      	ands	r2, r6
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	d01a      	beq.n	8001cc2 <HAL_I2C_IsDeviceReady+0xa6>
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001c8c:	6823      	ldr	r3, [r4, #0]
 8001c8e:	2710      	movs	r7, #16
 8001c90:	699b      	ldr	r3, [r3, #24]
 8001c92:	001a      	movs	r2, r3
 8001c94:	403a      	ands	r2, r7
 8001c96:	423b      	tst	r3, r7
 8001c98:	d129      	bne.n	8001cee <HAL_I2C_IsDeviceReady+0xd2>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001c9a:	9b02      	ldr	r3, [sp, #8]
 8001c9c:	2120      	movs	r1, #32
 8001c9e:	9300      	str	r3, [sp, #0]
 8001ca0:	0020      	movs	r0, r4
 8001ca2:	002b      	movs	r3, r5
 8001ca4:	f7ff fda2 	bl	80017ec <I2C_WaitOnFlagUntilTimeout>
 8001ca8:	2800      	cmp	r0, #0
 8001caa:	d11d      	bne.n	8001ce8 <HAL_I2C_IsDeviceReady+0xcc>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001cac:	2320      	movs	r3, #32
 8001cae:	6822      	ldr	r2, [r4, #0]
 8001cb0:	61d3      	str	r3, [r2, #28]
        hi2c->State = HAL_I2C_STATE_READY;
 8001cb2:	0022      	movs	r2, r4
        __HAL_UNLOCK(hi2c);
 8001cb4:	3440      	adds	r4, #64	@ 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 8001cb6:	3241      	adds	r2, #65	@ 0x41
 8001cb8:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 8001cba:	7020      	strb	r0, [r4, #0]
        return HAL_OK;
 8001cbc:	e015      	b.n	8001cea <HAL_I2C_IsDeviceReady+0xce>
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001cbe:	4b22      	ldr	r3, [pc, #136]	@ (8001d48 <HAL_I2C_IsDeviceReady+0x12c>)
 8001cc0:	e7d4      	b.n	8001c6c <HAL_I2C_IsDeviceReady+0x50>
        if (Timeout != HAL_MAX_DELAY)
 8001cc2:	1c6b      	adds	r3, r5, #1
 8001cc4:	d0d9      	beq.n	8001c7a <HAL_I2C_IsDeviceReady+0x5e>
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001cc6:	f7ff fa2d 	bl	8001124 <HAL_GetTick>
 8001cca:	9b02      	ldr	r3, [sp, #8]
 8001ccc:	1ac0      	subs	r0, r0, r3
 8001cce:	42a8      	cmp	r0, r5
 8001cd0:	d801      	bhi.n	8001cd6 <HAL_I2C_IsDeviceReady+0xba>
 8001cd2:	2d00      	cmp	r5, #0
 8001cd4:	d1d1      	bne.n	8001c7a <HAL_I2C_IsDeviceReady+0x5e>
            hi2c->State = HAL_I2C_STATE_READY;
 8001cd6:	2320      	movs	r3, #32
 8001cd8:	9a03      	ldr	r2, [sp, #12]
            __HAL_UNLOCK(hi2c);
 8001cda:	3440      	adds	r4, #64	@ 0x40
            hi2c->State = HAL_I2C_STATE_READY;
 8001cdc:	7013      	strb	r3, [r2, #0]
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001cde:	6862      	ldr	r2, [r4, #4]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	6063      	str	r3, [r4, #4]
            __HAL_UNLOCK(hi2c);
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	7023      	strb	r3, [r4, #0]
            return HAL_ERROR;
 8001ce8:	2001      	movs	r0, #1
}
 8001cea:	b009      	add	sp, #36	@ 0x24
 8001cec:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001cee:	9b02      	ldr	r3, [sp, #8]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	9300      	str	r3, [sp, #0]
 8001cf4:	2120      	movs	r1, #32
 8001cf6:	002b      	movs	r3, r5
 8001cf8:	0020      	movs	r0, r4
 8001cfa:	f7ff fd77 	bl	80017ec <I2C_WaitOnFlagUntilTimeout>
 8001cfe:	1e02      	subs	r2, r0, #0
 8001d00:	d1f2      	bne.n	8001ce8 <HAL_I2C_IsDeviceReady+0xcc>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d02:	6823      	ldr	r3, [r4, #0]
      if (I2C_Trials == Trials)
 8001d04:	9805      	ldr	r0, [sp, #20]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d06:	61df      	str	r7, [r3, #28]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d08:	2720      	movs	r7, #32
 8001d0a:	61df      	str	r7, [r3, #28]
      if (I2C_Trials == Trials)
 8001d0c:	9907      	ldr	r1, [sp, #28]
 8001d0e:	4281      	cmp	r1, r0
 8001d10:	d10f      	bne.n	8001d32 <HAL_I2C_IsDeviceReady+0x116>
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001d12:	2180      	movs	r1, #128	@ 0x80
 8001d14:	6858      	ldr	r0, [r3, #4]
 8001d16:	01c9      	lsls	r1, r1, #7
 8001d18:	4301      	orrs	r1, r0
 8001d1a:	6059      	str	r1, [r3, #4]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001d1c:	9b02      	ldr	r3, [sp, #8]
 8001d1e:	0039      	movs	r1, r7
 8001d20:	9300      	str	r3, [sp, #0]
 8001d22:	0020      	movs	r0, r4
 8001d24:	002b      	movs	r3, r5
 8001d26:	f7ff fd61 	bl	80017ec <I2C_WaitOnFlagUntilTimeout>
 8001d2a:	2800      	cmp	r0, #0
 8001d2c:	d1dc      	bne.n	8001ce8 <HAL_I2C_IsDeviceReady+0xcc>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d2e:	6823      	ldr	r3, [r4, #0]
 8001d30:	61df      	str	r7, [r3, #28]
      I2C_Trials++;
 8001d32:	9b07      	ldr	r3, [sp, #28]
    } while (I2C_Trials < Trials);
 8001d34:	9a05      	ldr	r2, [sp, #20]
      I2C_Trials++;
 8001d36:	3301      	adds	r3, #1
 8001d38:	9307      	str	r3, [sp, #28]
    } while (I2C_Trials < Trials);
 8001d3a:	9b07      	ldr	r3, [sp, #28]
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d200      	bcs.n	8001d42 <HAL_I2C_IsDeviceReady+0x126>
 8001d40:	e790      	b.n	8001c64 <HAL_I2C_IsDeviceReady+0x48>
 8001d42:	e7c8      	b.n	8001cd6 <HAL_I2C_IsDeviceReady+0xba>
 8001d44:	02002000 	.word	0x02002000
 8001d48:	02002800 	.word	0x02002800

08001d4c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d4e:	0004      	movs	r4, r0
 8001d50:	3441      	adds	r4, #65	@ 0x41
 8001d52:	7822      	ldrb	r2, [r4, #0]
{
 8001d54:	0003      	movs	r3, r0
 8001d56:	000f      	movs	r7, r1
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d58:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d5a:	b2d6      	uxtb	r6, r2
 8001d5c:	2a20      	cmp	r2, #32
 8001d5e:	d118      	bne.n	8001d92 <HAL_I2CEx_ConfigAnalogFilter+0x46>
    __HAL_LOCK(hi2c);
 8001d60:	001d      	movs	r5, r3
 8001d62:	3540      	adds	r5, #64	@ 0x40
 8001d64:	782a      	ldrb	r2, [r5, #0]
 8001d66:	2a01      	cmp	r2, #1
 8001d68:	d013      	beq.n	8001d92 <HAL_I2CEx_ConfigAnalogFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d6a:	2224      	movs	r2, #36	@ 0x24
 8001d6c:	7022      	strb	r2, [r4, #0]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	3a23      	subs	r2, #35	@ 0x23
 8001d72:	6819      	ldr	r1, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001d74:	4807      	ldr	r0, [pc, #28]	@ (8001d94 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
    __HAL_I2C_DISABLE(hi2c);
 8001d76:	4391      	bics	r1, r2
 8001d78:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001d7a:	6819      	ldr	r1, [r3, #0]
 8001d7c:	4001      	ands	r1, r0
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d7e:	2000      	movs	r0, #0
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001d80:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8001d82:	6819      	ldr	r1, [r3, #0]
 8001d84:	4339      	orrs	r1, r7
 8001d86:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8001d88:	6819      	ldr	r1, [r3, #0]
 8001d8a:	430a      	orrs	r2, r1
 8001d8c:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001d8e:	7026      	strb	r6, [r4, #0]
    __HAL_UNLOCK(hi2c);
 8001d90:	7028      	strb	r0, [r5, #0]
  }
  else
  {
    return HAL_BUSY;
  }
}
 8001d92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d94:	ffffefff 	.word	0xffffefff

08001d98 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d98:	0002      	movs	r2, r0
{
 8001d9a:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d9c:	3241      	adds	r2, #65	@ 0x41
 8001d9e:	7814      	ldrb	r4, [r2, #0]
{
 8001da0:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001da2:	b2e5      	uxtb	r5, r4
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001da4:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001da6:	2c20      	cmp	r4, #32
 8001da8:	d117      	bne.n	8001dda <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 8001daa:	001c      	movs	r4, r3
 8001dac:	3440      	adds	r4, #64	@ 0x40
 8001dae:	7826      	ldrb	r6, [r4, #0]
 8001db0:	2e01      	cmp	r6, #1
 8001db2:	d012      	beq.n	8001dda <HAL_I2CEx_ConfigDigitalFilter+0x42>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001db4:	3022      	adds	r0, #34	@ 0x22
 8001db6:	7010      	strb	r0, [r2, #0]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	3823      	subs	r0, #35	@ 0x23
 8001dbc:	681e      	ldr	r6, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001dbe:	4f07      	ldr	r7, [pc, #28]	@ (8001ddc <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    __HAL_I2C_DISABLE(hi2c);
 8001dc0:	4386      	bics	r6, r0
 8001dc2:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 8001dc4:	681e      	ldr	r6, [r3, #0]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001dc6:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 8001dc8:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 8001dca:	4331      	orrs	r1, r6

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001dcc:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001dce:	6819      	ldr	r1, [r3, #0]
 8001dd0:	4308      	orrs	r0, r1
 8001dd2:	6018      	str	r0, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dd4:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001dd6:	7015      	strb	r5, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8001dd8:	7020      	strb	r0, [r4, #0]
  }
  else
  {
    return HAL_BUSY;
  }
}
 8001dda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ddc:	fffff0ff 	.word	0xfffff0ff

08001de0 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001de0:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8001de2:	4b1e      	ldr	r3, [pc, #120]	@ (8001e5c <HAL_RCC_GetSysClockFreq+0x7c>)
{
 8001de4:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 8001de6:	68dc      	ldr	r4, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 8001de8:	4022      	ands	r2, r4
 8001dea:	2a08      	cmp	r2, #8
 8001dec:	d034      	beq.n	8001e58 <HAL_RCC_GetSysClockFreq+0x78>
 8001dee:	2a0c      	cmp	r2, #12
 8001df0:	d00c      	beq.n	8001e0c <HAL_RCC_GetSysClockFreq+0x2c>
 8001df2:	2a04      	cmp	r2, #4
 8001df4:	d128      	bne.n	8001e48 <HAL_RCC_GetSysClockFreq+0x68>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001df6:	6818      	ldr	r0, [r3, #0]
 8001df8:	2310      	movs	r3, #16
 8001dfa:	4018      	ands	r0, r3
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001dfc:	4243      	negs	r3, r0
 8001dfe:	4158      	adcs	r0, r3
 8001e00:	4b17      	ldr	r3, [pc, #92]	@ (8001e60 <HAL_RCC_GetSysClockFreq+0x80>)
 8001e02:	4240      	negs	r0, r0
 8001e04:	4018      	ands	r0, r3
 8001e06:	4b17      	ldr	r3, [pc, #92]	@ (8001e64 <HAL_RCC_GetSysClockFreq+0x84>)
 8001e08:	18c0      	adds	r0, r0, r3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 8001e0a:	bd70      	pop	{r4, r5, r6, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001e0c:	02a2      	lsls	r2, r4, #10
 8001e0e:	4816      	ldr	r0, [pc, #88]	@ (8001e68 <HAL_RCC_GetSysClockFreq+0x88>)
 8001e10:	0f12      	lsrs	r2, r2, #28
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001e12:	5c80      	ldrb	r0, [r0, r2]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e14:	2280      	movs	r2, #128	@ 0x80
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001e16:	0224      	lsls	r4, r4, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e18:	68d9      	ldr	r1, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001e1a:	0fa4      	lsrs	r4, r4, #30
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e1c:	0252      	lsls	r2, r2, #9
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001e1e:	3401      	adds	r4, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e20:	4211      	tst	r1, r2
 8001e22:	d009      	beq.n	8001e38 <HAL_RCC_GetSysClockFreq+0x58>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001e24:	4a11      	ldr	r2, [pc, #68]	@ (8001e6c <HAL_RCC_GetSysClockFreq+0x8c>)
 8001e26:	2300      	movs	r3, #0
 8001e28:	2100      	movs	r1, #0
 8001e2a:	f7fe fa19 	bl	8000260 <__aeabi_lmul>
 8001e2e:	0022      	movs	r2, r4
 8001e30:	2300      	movs	r3, #0
 8001e32:	f7fe f9f5 	bl	8000220 <__aeabi_uldivmod>
 8001e36:	e7e8      	b.n	8001e0a <HAL_RCC_GetSysClockFreq+0x2a>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	2310      	movs	r3, #16
 8001e3c:	421a      	tst	r2, r3
 8001e3e:	d001      	beq.n	8001e44 <HAL_RCC_GetSysClockFreq+0x64>
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001e40:	4a08      	ldr	r2, [pc, #32]	@ (8001e64 <HAL_RCC_GetSysClockFreq+0x84>)
 8001e42:	e7f0      	b.n	8001e26 <HAL_RCC_GetSysClockFreq+0x46>
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001e44:	4a0a      	ldr	r2, [pc, #40]	@ (8001e70 <HAL_RCC_GetSysClockFreq+0x90>)
 8001e46:	e7ee      	b.n	8001e26 <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001e48:	2080      	movs	r0, #128	@ 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001e4a:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001e4c:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001e4e:	041b      	lsls	r3, r3, #16
 8001e50:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001e52:	3301      	adds	r3, #1
 8001e54:	4098      	lsls	r0, r3
      break;
 8001e56:	e7d8      	b.n	8001e0a <HAL_RCC_GetSysClockFreq+0x2a>
  switch (tmpreg & RCC_CFGR_SWS)
 8001e58:	4804      	ldr	r0, [pc, #16]	@ (8001e6c <HAL_RCC_GetSysClockFreq+0x8c>)
 8001e5a:	e7d6      	b.n	8001e0a <HAL_RCC_GetSysClockFreq+0x2a>
 8001e5c:	40021000 	.word	0x40021000
 8001e60:	00b71b00 	.word	0x00b71b00
 8001e64:	003d0900 	.word	0x003d0900
 8001e68:	08002c87 	.word	0x08002c87
 8001e6c:	007a1200 	.word	0x007a1200
 8001e70:	00f42400 	.word	0x00f42400

08001e74 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e74:	4b04      	ldr	r3, [pc, #16]	@ (8001e88 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8001e76:	4a05      	ldr	r2, [pc, #20]	@ (8001e8c <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	4905      	ldr	r1, [pc, #20]	@ (8001e90 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001e7c:	055b      	lsls	r3, r3, #21
 8001e7e:	0f5b      	lsrs	r3, r3, #29
 8001e80:	5ccb      	ldrb	r3, [r1, r3]
 8001e82:	6810      	ldr	r0, [r2, #0]
 8001e84:	40d8      	lsrs	r0, r3
}
 8001e86:	4770      	bx	lr
 8001e88:	40021000 	.word	0x40021000
 8001e8c:	20000078 	.word	0x20000078
 8001e90:	08002c90 	.word	0x08002c90

08001e94 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e94:	2280      	movs	r2, #128	@ 0x80
{
 8001e96:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 8001e98:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e9a:	05d2      	lsls	r2, r2, #23
 8001e9c:	4290      	cmp	r0, r2
 8001e9e:	d005      	beq.n	8001eac <TIM_Base_SetConfig+0x18>
 8001ea0:	4c10      	ldr	r4, [pc, #64]	@ (8001ee4 <TIM_Base_SetConfig+0x50>)
 8001ea2:	42a0      	cmp	r0, r4
 8001ea4:	d002      	beq.n	8001eac <TIM_Base_SetConfig+0x18>
 8001ea6:	4c10      	ldr	r4, [pc, #64]	@ (8001ee8 <TIM_Base_SetConfig+0x54>)
 8001ea8:	42a0      	cmp	r0, r4
 8001eaa:	d10f      	bne.n	8001ecc <TIM_Base_SetConfig+0x38>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001eac:	2470      	movs	r4, #112	@ 0x70
 8001eae:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 8001eb0:	684c      	ldr	r4, [r1, #4]
 8001eb2:	4323      	orrs	r3, r4
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001eb4:	4290      	cmp	r0, r2
 8001eb6:	d005      	beq.n	8001ec4 <TIM_Base_SetConfig+0x30>
 8001eb8:	4a0a      	ldr	r2, [pc, #40]	@ (8001ee4 <TIM_Base_SetConfig+0x50>)
 8001eba:	4290      	cmp	r0, r2
 8001ebc:	d002      	beq.n	8001ec4 <TIM_Base_SetConfig+0x30>
 8001ebe:	4a0a      	ldr	r2, [pc, #40]	@ (8001ee8 <TIM_Base_SetConfig+0x54>)
 8001ec0:	4290      	cmp	r0, r2
 8001ec2:	d103      	bne.n	8001ecc <TIM_Base_SetConfig+0x38>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ec4:	4a09      	ldr	r2, [pc, #36]	@ (8001eec <TIM_Base_SetConfig+0x58>)
 8001ec6:	401a      	ands	r2, r3
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ec8:	68cb      	ldr	r3, [r1, #12]
 8001eca:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ecc:	2280      	movs	r2, #128	@ 0x80
 8001ece:	4393      	bics	r3, r2
 8001ed0:	690a      	ldr	r2, [r1, #16]
 8001ed2:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8001ed4:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ed6:	688b      	ldr	r3, [r1, #8]
 8001ed8:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001eda:	680b      	ldr	r3, [r1, #0]
 8001edc:	6283      	str	r3, [r0, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	6143      	str	r3, [r0, #20]
}
 8001ee2:	bd10      	pop	{r4, pc}
 8001ee4:	40010800 	.word	0x40010800
 8001ee8:	40011400 	.word	0x40011400
 8001eec:	fffffcff 	.word	0xfffffcff

08001ef0 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001ef0:	2201      	movs	r2, #1
{
 8001ef2:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001ef4:	2573      	movs	r5, #115	@ 0x73
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001ef6:	6a03      	ldr	r3, [r0, #32]
 8001ef8:	4393      	bics	r3, r2
 8001efa:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001efc:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8001efe:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8001f00:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001f02:	43aa      	bics	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001f04:	680d      	ldr	r5, [r1, #0]
 8001f06:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001f08:	2502      	movs	r5, #2
 8001f0a:	43ab      	bics	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001f0c:	688d      	ldr	r5, [r1, #8]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f0e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001f10:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001f12:	684a      	ldr	r2, [r1, #4]
  tmpccer |= OC_Config->OCPolarity;
 8001f14:	432b      	orrs	r3, r5
  TIMx->CCR1 = OC_Config->Pulse;
 8001f16:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f18:	6203      	str	r3, [r0, #32]
}
 8001f1a:	bd30      	pop	{r4, r5, pc}

08001f1c <TIM_OC2_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f1c:	2210      	movs	r2, #16
 8001f1e:	6a03      	ldr	r3, [r0, #32]
{
 8001f20:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f22:	4393      	bics	r3, r2
 8001f24:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f26:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001f28:	4a08      	ldr	r2, [pc, #32]	@ (8001f4c <TIM_OC2_SetConfig+0x30>)
  tmpcr2 =  TIMx->CR2;
 8001f2a:	6845      	ldr	r5, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8001f2c:	6983      	ldr	r3, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001f2e:	4013      	ands	r3, r2

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001f30:	680a      	ldr	r2, [r1, #0]
 8001f32:	0212      	lsls	r2, r2, #8
 8001f34:	431a      	orrs	r2, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001f36:	2320      	movs	r3, #32
 8001f38:	439c      	bics	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001f3a:	688b      	ldr	r3, [r1, #8]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f3c:	6045      	str	r5, [r0, #4]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001f3e:	011b      	lsls	r3, r3, #4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001f40:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001f42:	684a      	ldr	r2, [r1, #4]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001f44:	4323      	orrs	r3, r4
  TIMx->CCR2 = OC_Config->Pulse;
 8001f46:	6382      	str	r2, [r0, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f48:	6203      	str	r3, [r0, #32]
}
 8001f4a:	bd30      	pop	{r4, r5, pc}
 8001f4c:	ffff8cff 	.word	0xffff8cff

08001f50 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001f50:	231f      	movs	r3, #31
{
 8001f52:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001f54:	2401      	movs	r4, #1
 8001f56:	4019      	ands	r1, r3
 8001f58:	408c      	lsls	r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001f5a:	408a      	lsls	r2, r1
  TIMx->CCER &= ~tmp;
 8001f5c:	6a03      	ldr	r3, [r0, #32]
 8001f5e:	43a3      	bics	r3, r4
 8001f60:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001f62:	6a03      	ldr	r3, [r0, #32]
 8001f64:	431a      	orrs	r2, r3
 8001f66:	6202      	str	r2, [r0, #32]
}
 8001f68:	bd10      	pop	{r4, pc}

08001f6a <HAL_TIM_Base_Init>:
{
 8001f6a:	b570      	push	{r4, r5, r6, lr}
 8001f6c:	0004      	movs	r4, r0
    return HAL_ERROR;
 8001f6e:	2001      	movs	r0, #1
  if (htim == NULL)
 8001f70:	2c00      	cmp	r4, #0
 8001f72:	d01d      	beq.n	8001fb0 <HAL_TIM_Base_Init+0x46>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001f74:	0025      	movs	r5, r4
 8001f76:	3539      	adds	r5, #57	@ 0x39
 8001f78:	782b      	ldrb	r3, [r5, #0]
 8001f7a:	b2da      	uxtb	r2, r3
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d105      	bne.n	8001f8c <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8001f80:	0023      	movs	r3, r4
 8001f82:	3338      	adds	r3, #56	@ 0x38
    HAL_TIM_Base_MspInit(htim);
 8001f84:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 8001f86:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_MspInit(htim);
 8001f88:	f7fe fe8a 	bl	8000ca0 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f90:	6820      	ldr	r0, [r4, #0]
 8001f92:	1d21      	adds	r1, r4, #4
 8001f94:	f7ff ff7e 	bl	8001e94 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f98:	0022      	movs	r2, r4
 8001f9a:	2301      	movs	r3, #1
  return HAL_OK;
 8001f9c:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f9e:	323e      	adds	r2, #62	@ 0x3e
 8001fa0:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fa2:	343d      	adds	r4, #61	@ 0x3d
 8001fa4:	3a04      	subs	r2, #4
 8001fa6:	7013      	strb	r3, [r2, #0]
 8001fa8:	7053      	strb	r3, [r2, #1]
 8001faa:	7093      	strb	r3, [r2, #2]
 8001fac:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 8001fae:	702b      	strb	r3, [r5, #0]
}
 8001fb0:	bd70      	pop	{r4, r5, r6, pc}
	...

08001fb4 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8001fb4:	0001      	movs	r1, r0
{
 8001fb6:	0003      	movs	r3, r0
    return HAL_ERROR;
 8001fb8:	2001      	movs	r0, #1
{
 8001fba:	b510      	push	{r4, lr}
  if (htim->State != HAL_TIM_STATE_READY)
 8001fbc:	3139      	adds	r1, #57	@ 0x39
 8001fbe:	780c      	ldrb	r4, [r1, #0]
 8001fc0:	b2e2      	uxtb	r2, r4
 8001fc2:	4284      	cmp	r4, r0
 8001fc4:	d119      	bne.n	8001ffa <HAL_TIM_Base_Start_IT+0x46>
  htim->State = HAL_TIM_STATE_BUSY;
 8001fc6:	1800      	adds	r0, r0, r0
 8001fc8:	7008      	strb	r0, [r1, #0]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	68d9      	ldr	r1, [r3, #12]
 8001fce:	4311      	orrs	r1, r2
 8001fd0:	60d9      	str	r1, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fd2:	2180      	movs	r1, #128	@ 0x80
 8001fd4:	05c9      	lsls	r1, r1, #23
 8001fd6:	428b      	cmp	r3, r1
 8001fd8:	d005      	beq.n	8001fe6 <HAL_TIM_Base_Start_IT+0x32>
 8001fda:	4909      	ldr	r1, [pc, #36]	@ (8002000 <HAL_TIM_Base_Start_IT+0x4c>)
 8001fdc:	428b      	cmp	r3, r1
 8001fde:	d002      	beq.n	8001fe6 <HAL_TIM_Base_Start_IT+0x32>
 8001fe0:	4908      	ldr	r1, [pc, #32]	@ (8002004 <HAL_TIM_Base_Start_IT+0x50>)
 8001fe2:	428b      	cmp	r3, r1
 8001fe4:	d10a      	bne.n	8001ffc <HAL_TIM_Base_Start_IT+0x48>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fe6:	2107      	movs	r1, #7
 8001fe8:	689a      	ldr	r2, [r3, #8]
 8001fea:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fec:	2a06      	cmp	r2, #6
 8001fee:	d003      	beq.n	8001ff8 <HAL_TIM_Base_Start_IT+0x44>
      __HAL_TIM_ENABLE(htim);
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	6819      	ldr	r1, [r3, #0]
 8001ff4:	430a      	orrs	r2, r1
 8001ff6:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8001ff8:	2000      	movs	r0, #0
}
 8001ffa:	bd10      	pop	{r4, pc}
    __HAL_TIM_ENABLE(htim);
 8001ffc:	6819      	ldr	r1, [r3, #0]
 8001ffe:	e7f9      	b.n	8001ff4 <HAL_TIM_Base_Start_IT+0x40>
 8002000:	40010800 	.word	0x40010800
 8002004:	40011400 	.word	0x40011400

08002008 <HAL_TIM_OC_Start_IT>:
{
 8002008:	b510      	push	{r4, lr}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800200a:	2900      	cmp	r1, #0
 800200c:	d106      	bne.n	800201c <HAL_TIM_OC_Start_IT+0x14>
 800200e:	0002      	movs	r2, r0
 8002010:	323a      	adds	r2, #58	@ 0x3a
 8002012:	7813      	ldrb	r3, [r2, #0]
 8002014:	2b01      	cmp	r3, #1
 8002016:	d034      	beq.n	8002082 <HAL_TIM_OC_Start_IT+0x7a>
{
 8002018:	2001      	movs	r0, #1
 800201a:	e021      	b.n	8002060 <HAL_TIM_OC_Start_IT+0x58>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800201c:	0003      	movs	r3, r0
 800201e:	2904      	cmp	r1, #4
 8002020:	d11f      	bne.n	8002062 <HAL_TIM_OC_Start_IT+0x5a>
 8002022:	333b      	adds	r3, #59	@ 0x3b
 8002024:	781a      	ldrb	r2, [r3, #0]
 8002026:	2a01      	cmp	r2, #1
 8002028:	d1f6      	bne.n	8002018 <HAL_TIM_OC_Start_IT+0x10>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800202a:	2202      	movs	r2, #2
 800202c:	701a      	strb	r2, [r3, #0]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800202e:	6802      	ldr	r2, [r0, #0]
 8002030:	68d3      	ldr	r3, [r2, #12]
 8002032:	430b      	orrs	r3, r1
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002034:	6804      	ldr	r4, [r0, #0]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002036:	60d3      	str	r3, [r2, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002038:	0020      	movs	r0, r4
 800203a:	2201      	movs	r2, #1
 800203c:	f7ff ff88 	bl	8001f50 <TIM_CCxChannelCmd>
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002040:	2380      	movs	r3, #128	@ 0x80
 8002042:	05db      	lsls	r3, r3, #23
 8002044:	429c      	cmp	r4, r3
 8002046:	d005      	beq.n	8002054 <HAL_TIM_OC_Start_IT+0x4c>
 8002048:	4b13      	ldr	r3, [pc, #76]	@ (8002098 <HAL_TIM_OC_Start_IT+0x90>)
 800204a:	429c      	cmp	r4, r3
 800204c:	d002      	beq.n	8002054 <HAL_TIM_OC_Start_IT+0x4c>
 800204e:	4b13      	ldr	r3, [pc, #76]	@ (800209c <HAL_TIM_OC_Start_IT+0x94>)
 8002050:	429c      	cmp	r4, r3
 8002052:	d11c      	bne.n	800208e <HAL_TIM_OC_Start_IT+0x86>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002054:	2207      	movs	r2, #7
 8002056:	68a3      	ldr	r3, [r4, #8]
 8002058:	4013      	ands	r3, r2
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800205a:	2b06      	cmp	r3, #6
 800205c:	d117      	bne.n	800208e <HAL_TIM_OC_Start_IT+0x86>
{
 800205e:	2000      	movs	r0, #0
}
 8002060:	bd10      	pop	{r4, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002062:	2908      	cmp	r1, #8
 8002064:	d101      	bne.n	800206a <HAL_TIM_OC_Start_IT+0x62>
 8002066:	333c      	adds	r3, #60	@ 0x3c
 8002068:	e7dc      	b.n	8002024 <HAL_TIM_OC_Start_IT+0x1c>
 800206a:	333d      	adds	r3, #61	@ 0x3d
 800206c:	781a      	ldrb	r2, [r3, #0]
 800206e:	2a01      	cmp	r2, #1
 8002070:	d1d2      	bne.n	8002018 <HAL_TIM_OC_Start_IT+0x10>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002072:	2202      	movs	r2, #2
 8002074:	701a      	strb	r2, [r3, #0]
  switch (Channel)
 8002076:	290c      	cmp	r1, #12
 8002078:	d1ce      	bne.n	8002018 <HAL_TIM_OC_Start_IT+0x10>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800207a:	6802      	ldr	r2, [r0, #0]
 800207c:	2310      	movs	r3, #16
 800207e:	68d4      	ldr	r4, [r2, #12]
 8002080:	e003      	b.n	800208a <HAL_TIM_OC_Start_IT+0x82>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002082:	2302      	movs	r3, #2
 8002084:	7013      	strb	r3, [r2, #0]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002086:	6802      	ldr	r2, [r0, #0]
 8002088:	68d4      	ldr	r4, [r2, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800208a:	4323      	orrs	r3, r4
 800208c:	e7d2      	b.n	8002034 <HAL_TIM_OC_Start_IT+0x2c>
      __HAL_TIM_ENABLE(htim);
 800208e:	2301      	movs	r3, #1
 8002090:	6822      	ldr	r2, [r4, #0]
 8002092:	4313      	orrs	r3, r2
 8002094:	6023      	str	r3, [r4, #0]
 8002096:	e7e2      	b.n	800205e <HAL_TIM_OC_Start_IT+0x56>
 8002098:	40010800 	.word	0x40010800
 800209c:	40011400 	.word	0x40011400

080020a0 <HAL_TIM_PWM_MspInit>:
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
 80020a0:	4770      	bx	lr

080020a2 <HAL_TIM_PWM_Init>:
{
 80020a2:	b570      	push	{r4, r5, r6, lr}
 80020a4:	0004      	movs	r4, r0
    return HAL_ERROR;
 80020a6:	2001      	movs	r0, #1
  if (htim == NULL)
 80020a8:	2c00      	cmp	r4, #0
 80020aa:	d01d      	beq.n	80020e8 <HAL_TIM_PWM_Init+0x46>
  if (htim->State == HAL_TIM_STATE_RESET)
 80020ac:	0025      	movs	r5, r4
 80020ae:	3539      	adds	r5, #57	@ 0x39
 80020b0:	782b      	ldrb	r3, [r5, #0]
 80020b2:	b2da      	uxtb	r2, r3
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d105      	bne.n	80020c4 <HAL_TIM_PWM_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 80020b8:	0023      	movs	r3, r4
 80020ba:	3338      	adds	r3, #56	@ 0x38
    HAL_TIM_PWM_MspInit(htim);
 80020bc:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 80020be:	701a      	strb	r2, [r3, #0]
    HAL_TIM_PWM_MspInit(htim);
 80020c0:	f7ff ffee 	bl	80020a0 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80020c4:	2302      	movs	r3, #2
 80020c6:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020c8:	6820      	ldr	r0, [r4, #0]
 80020ca:	1d21      	adds	r1, r4, #4
 80020cc:	f7ff fee2 	bl	8001e94 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020d0:	0022      	movs	r2, r4
 80020d2:	2301      	movs	r3, #1
  return HAL_OK;
 80020d4:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020d6:	323e      	adds	r2, #62	@ 0x3e
 80020d8:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020da:	343d      	adds	r4, #61	@ 0x3d
 80020dc:	3a04      	subs	r2, #4
 80020de:	7013      	strb	r3, [r2, #0]
 80020e0:	7053      	strb	r3, [r2, #1]
 80020e2:	7093      	strb	r3, [r2, #2]
 80020e4:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 80020e6:	702b      	strb	r3, [r5, #0]
}
 80020e8:	bd70      	pop	{r4, r5, r6, pc}
	...

080020ec <HAL_TIM_PWM_ConfigChannel>:
{
 80020ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 80020ee:	0005      	movs	r5, r0
 80020f0:	3538      	adds	r5, #56	@ 0x38
{
 80020f2:	000c      	movs	r4, r1
  __HAL_LOCK(htim);
 80020f4:	7829      	ldrb	r1, [r5, #0]
{
 80020f6:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 80020f8:	2002      	movs	r0, #2
 80020fa:	2901      	cmp	r1, #1
 80020fc:	d00a      	beq.n	8002114 <HAL_TIM_PWM_ConfigChannel+0x28>
 80020fe:	3801      	subs	r0, #1
 8002100:	7028      	strb	r0, [r5, #0]
  switch (Channel)
 8002102:	2a08      	cmp	r2, #8
 8002104:	d052      	beq.n	80021ac <HAL_TIM_PWM_ConfigChannel+0xc0>
 8002106:	d806      	bhi.n	8002116 <HAL_TIM_PWM_ConfigChannel+0x2a>
 8002108:	2a00      	cmp	r2, #0
 800210a:	d02a      	beq.n	8002162 <HAL_TIM_PWM_ConfigChannel+0x76>
 800210c:	2a04      	cmp	r2, #4
 800210e:	d03b      	beq.n	8002188 <HAL_TIM_PWM_ConfigChannel+0x9c>
  __HAL_UNLOCK(htim);
 8002110:	2300      	movs	r3, #0
 8002112:	702b      	strb	r3, [r5, #0]
}
 8002114:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (Channel)
 8002116:	2a0c      	cmp	r2, #12
 8002118:	d1fa      	bne.n	8002110 <HAL_TIM_PWM_ConfigChannel+0x24>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800211a:	681b      	ldr	r3, [r3, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800211c:	4934      	ldr	r1, [pc, #208]	@ (80021f0 <HAL_TIM_PWM_ConfigChannel+0x104>)
 800211e:	6a1a      	ldr	r2, [r3, #32]
 8002120:	400a      	ands	r2, r1
 8002122:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8002124:	6a18      	ldr	r0, [r3, #32]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002126:	4933      	ldr	r1, [pc, #204]	@ (80021f4 <HAL_TIM_PWM_ConfigChannel+0x108>)
  tmpcr2 =  TIMx->CR2;
 8002128:	685e      	ldr	r6, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 800212a:	69da      	ldr	r2, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800212c:	400a      	ands	r2, r1
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800212e:	6821      	ldr	r1, [r4, #0]
 8002130:	0209      	lsls	r1, r1, #8
 8002132:	4311      	orrs	r1, r2
  tmpccer &= ~TIM_CCER_CC4P;
 8002134:	4a30      	ldr	r2, [pc, #192]	@ (80021f8 <HAL_TIM_PWM_ConfigChannel+0x10c>)
 8002136:	4010      	ands	r0, r2
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002138:	68a2      	ldr	r2, [r4, #8]
  TIMx->CR2 = tmpcr2;
 800213a:	605e      	str	r6, [r3, #4]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800213c:	0312      	lsls	r2, r2, #12
  TIMx->CCMR2 = tmpccmrx;
 800213e:	61d9      	str	r1, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8002140:	6861      	ldr	r1, [r4, #4]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002142:	4302      	orrs	r2, r0
  TIMx->CCR4 = OC_Config->Pulse;
 8002144:	6419      	str	r1, [r3, #64]	@ 0x40
  TIMx->CCER = tmpccer;
 8002146:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002148:	2280      	movs	r2, #128	@ 0x80
 800214a:	69d9      	ldr	r1, [r3, #28]
 800214c:	0112      	lsls	r2, r2, #4
 800214e:	430a      	orrs	r2, r1
 8002150:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002152:	69da      	ldr	r2, [r3, #28]
 8002154:	4929      	ldr	r1, [pc, #164]	@ (80021fc <HAL_TIM_PWM_ConfigChannel+0x110>)
 8002156:	400a      	ands	r2, r1
 8002158:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800215a:	68e2      	ldr	r2, [r4, #12]
 800215c:	69d9      	ldr	r1, [r3, #28]
 800215e:	0212      	lsls	r2, r2, #8
 8002160:	e043      	b.n	80021ea <HAL_TIM_PWM_ConfigChannel+0xfe>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002162:	681e      	ldr	r6, [r3, #0]
 8002164:	0021      	movs	r1, r4
 8002166:	0030      	movs	r0, r6
 8002168:	f7ff fec2 	bl	8001ef0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800216c:	2308      	movs	r3, #8
 800216e:	69b2      	ldr	r2, [r6, #24]
 8002170:	4313      	orrs	r3, r2
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002172:	2204      	movs	r2, #4
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002174:	61b3      	str	r3, [r6, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002176:	69b3      	ldr	r3, [r6, #24]
 8002178:	4393      	bics	r3, r2
 800217a:	61b3      	str	r3, [r6, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800217c:	69b3      	ldr	r3, [r6, #24]
 800217e:	68e2      	ldr	r2, [r4, #12]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002180:	4313      	orrs	r3, r2
 8002182:	61b3      	str	r3, [r6, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8002184:	2000      	movs	r0, #0
 8002186:	e7c3      	b.n	8002110 <HAL_TIM_PWM_ConfigChannel+0x24>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002188:	681e      	ldr	r6, [r3, #0]
 800218a:	0021      	movs	r1, r4
 800218c:	0030      	movs	r0, r6
 800218e:	f7ff fec5 	bl	8001f1c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002192:	2380      	movs	r3, #128	@ 0x80
 8002194:	69b2      	ldr	r2, [r6, #24]
 8002196:	011b      	lsls	r3, r3, #4
 8002198:	4313      	orrs	r3, r2
 800219a:	61b3      	str	r3, [r6, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800219c:	69b3      	ldr	r3, [r6, #24]
 800219e:	4a17      	ldr	r2, [pc, #92]	@ (80021fc <HAL_TIM_PWM_ConfigChannel+0x110>)
 80021a0:	4013      	ands	r3, r2
 80021a2:	61b3      	str	r3, [r6, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80021a4:	68e3      	ldr	r3, [r4, #12]
 80021a6:	69b2      	ldr	r2, [r6, #24]
 80021a8:	021b      	lsls	r3, r3, #8
 80021aa:	e7e9      	b.n	8002180 <HAL_TIM_PWM_ConfigChannel+0x94>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80021ac:	681b      	ldr	r3, [r3, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80021ae:	4814      	ldr	r0, [pc, #80]	@ (8002200 <HAL_TIM_PWM_ConfigChannel+0x114>)
 80021b0:	6a19      	ldr	r1, [r3, #32]
 80021b2:	4001      	ands	r1, r0
 80021b4:	6219      	str	r1, [r3, #32]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80021b6:	2173      	movs	r1, #115	@ 0x73
  tmpccer = TIMx->CCER;
 80021b8:	6a1f      	ldr	r7, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80021ba:	685e      	ldr	r6, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 80021bc:	69d8      	ldr	r0, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80021be:	4388      	bics	r0, r1
  tmpccmrx |= OC_Config->OCMode;
 80021c0:	6821      	ldr	r1, [r4, #0]
 80021c2:	4308      	orrs	r0, r1
  tmpccer &= ~TIM_CCER_CC3P;
 80021c4:	490f      	ldr	r1, [pc, #60]	@ (8002204 <HAL_TIM_PWM_ConfigChannel+0x118>)
 80021c6:	400f      	ands	r7, r1
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80021c8:	68a1      	ldr	r1, [r4, #8]
  TIMx->CR2 = tmpcr2;
 80021ca:	605e      	str	r6, [r3, #4]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80021cc:	0209      	lsls	r1, r1, #8
  TIMx->CCMR2 = tmpccmrx;
 80021ce:	61d8      	str	r0, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 80021d0:	6860      	ldr	r0, [r4, #4]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80021d2:	4339      	orrs	r1, r7
  TIMx->CCR3 = OC_Config->Pulse;
 80021d4:	63d8      	str	r0, [r3, #60]	@ 0x3c
  TIMx->CCER = tmpccer;
 80021d6:	6219      	str	r1, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80021d8:	69d9      	ldr	r1, [r3, #28]
 80021da:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80021dc:	2104      	movs	r1, #4
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80021de:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80021e0:	69da      	ldr	r2, [r3, #28]
 80021e2:	438a      	bics	r2, r1
 80021e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80021e6:	69da      	ldr	r2, [r3, #28]
 80021e8:	68e1      	ldr	r1, [r4, #12]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80021ea:	430a      	orrs	r2, r1
 80021ec:	61da      	str	r2, [r3, #28]
      break;
 80021ee:	e7c9      	b.n	8002184 <HAL_TIM_PWM_ConfigChannel+0x98>
 80021f0:	ffffefff 	.word	0xffffefff
 80021f4:	ffff8cff 	.word	0xffff8cff
 80021f8:	ffffdfff 	.word	0xffffdfff
 80021fc:	fffffbff 	.word	0xfffffbff
 8002200:	fffffeff 	.word	0xfffffeff
 8002204:	fffffdff 	.word	0xfffffdff

08002208 <HAL_TIM_ConfigClockSource>:
{
 8002208:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 800220a:	0004      	movs	r4, r0
 800220c:	2202      	movs	r2, #2
 800220e:	3438      	adds	r4, #56	@ 0x38
 8002210:	7825      	ldrb	r5, [r4, #0]
{
 8002212:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8002214:	0010      	movs	r0, r2
 8002216:	2d01      	cmp	r5, #1
 8002218:	d01c      	beq.n	8002254 <HAL_TIM_ConfigClockSource+0x4c>
  htim->State = HAL_TIM_STATE_BUSY;
 800221a:	001d      	movs	r5, r3
  __HAL_LOCK(htim);
 800221c:	3801      	subs	r0, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800221e:	3539      	adds	r5, #57	@ 0x39
  __HAL_LOCK(htim);
 8002220:	7020      	strb	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002222:	702a      	strb	r2, [r5, #0]
  tmpsmcr = htim->Instance->SMCR;
 8002224:	681b      	ldr	r3, [r3, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002226:	4e46      	ldr	r6, [pc, #280]	@ (8002340 <HAL_TIM_ConfigClockSource+0x138>)
  tmpsmcr = htim->Instance->SMCR;
 8002228:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800222a:	4032      	ands	r2, r6
  htim->Instance->SMCR = tmpsmcr;
 800222c:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 800222e:	680a      	ldr	r2, [r1, #0]
 8002230:	2a60      	cmp	r2, #96	@ 0x60
 8002232:	d059      	beq.n	80022e8 <HAL_TIM_ConfigClockSource+0xe0>
 8002234:	d82e      	bhi.n	8002294 <HAL_TIM_ConfigClockSource+0x8c>
 8002236:	2a40      	cmp	r2, #64	@ 0x40
 8002238:	d100      	bne.n	800223c <HAL_TIM_ConfigClockSource+0x34>
 800223a:	e06c      	b.n	8002316 <HAL_TIM_ConfigClockSource+0x10e>
 800223c:	d813      	bhi.n	8002266 <HAL_TIM_ConfigClockSource+0x5e>
 800223e:	2a20      	cmp	r2, #32
 8002240:	d00b      	beq.n	800225a <HAL_TIM_ConfigClockSource+0x52>
 8002242:	d808      	bhi.n	8002256 <HAL_TIM_ConfigClockSource+0x4e>
 8002244:	2110      	movs	r1, #16
 8002246:	0016      	movs	r6, r2
 8002248:	438e      	bics	r6, r1
 800224a:	d006      	beq.n	800225a <HAL_TIM_ConfigClockSource+0x52>
  htim->State = HAL_TIM_STATE_READY;
 800224c:	2301      	movs	r3, #1
 800224e:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 8002250:	2300      	movs	r3, #0
 8002252:	7023      	strb	r3, [r4, #0]
}
 8002254:	bdf0      	pop	{r4, r5, r6, r7, pc}
  switch (sClockSourceConfig->ClockSource)
 8002256:	2a30      	cmp	r2, #48	@ 0x30
 8002258:	d1f8      	bne.n	800224c <HAL_TIM_ConfigClockSource+0x44>
  tmpsmcr &= ~TIM_SMCR_TS;
 800225a:	2070      	movs	r0, #112	@ 0x70
  tmpsmcr = TIMx->SMCR;
 800225c:	6899      	ldr	r1, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800225e:	4381      	bics	r1, r0
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002260:	430a      	orrs	r2, r1
 8002262:	2107      	movs	r1, #7
 8002264:	e02d      	b.n	80022c2 <HAL_TIM_ConfigClockSource+0xba>
  switch (sClockSourceConfig->ClockSource)
 8002266:	2a50      	cmp	r2, #80	@ 0x50
 8002268:	d1f0      	bne.n	800224c <HAL_TIM_ConfigClockSource+0x44>
                               sClockSourceConfig->ClockPolarity,
 800226a:	684e      	ldr	r6, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 800226c:	68ca      	ldr	r2, [r1, #12]
  tmpccer = TIMx->CCER;
 800226e:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002270:	6a1f      	ldr	r7, [r3, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002272:	0112      	lsls	r2, r2, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002274:	4387      	bics	r7, r0
 8002276:	621f      	str	r7, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002278:	27f0      	movs	r7, #240	@ 0xf0
  tmpccmr1 = TIMx->CCMR1;
 800227a:	6998      	ldr	r0, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800227c:	43b8      	bics	r0, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800227e:	4302      	orrs	r2, r0
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002280:	200a      	movs	r0, #10
  TIMx->CCMR1 = tmpccmr1;
 8002282:	619a      	str	r2, [r3, #24]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002284:	2270      	movs	r2, #112	@ 0x70
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002286:	4381      	bics	r1, r0
  tmpccer |= TIM_ICPolarity;
 8002288:	4331      	orrs	r1, r6
  TIMx->CCER = tmpccer;
 800228a:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 800228c:	6899      	ldr	r1, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800228e:	4391      	bics	r1, r2
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002290:	3a19      	subs	r2, #25
 8002292:	e016      	b.n	80022c2 <HAL_TIM_ConfigClockSource+0xba>
  switch (sClockSourceConfig->ClockSource)
 8002294:	2680      	movs	r6, #128	@ 0x80
 8002296:	0176      	lsls	r6, r6, #5
 8002298:	42b2      	cmp	r2, r6
 800229a:	d014      	beq.n	80022c6 <HAL_TIM_ConfigClockSource+0xbe>
 800229c:	2680      	movs	r6, #128	@ 0x80
 800229e:	01b6      	lsls	r6, r6, #6
 80022a0:	42b2      	cmp	r2, r6
 80022a2:	d012      	beq.n	80022ca <HAL_TIM_ConfigClockSource+0xc2>
 80022a4:	2a70      	cmp	r2, #112	@ 0x70
 80022a6:	d1d1      	bne.n	800224c <HAL_TIM_ConfigClockSource+0x44>
  tmpsmcr = TIMx->SMCR;
 80022a8:	6898      	ldr	r0, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022aa:	4a26      	ldr	r2, [pc, #152]	@ (8002344 <HAL_TIM_ConfigClockSource+0x13c>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80022ac:	684e      	ldr	r6, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022ae:	4010      	ands	r0, r2
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80022b0:	688a      	ldr	r2, [r1, #8]
 80022b2:	68c9      	ldr	r1, [r1, #12]
 80022b4:	4332      	orrs	r2, r6
 80022b6:	0209      	lsls	r1, r1, #8
 80022b8:	430a      	orrs	r2, r1
 80022ba:	4302      	orrs	r2, r0
  TIMx->SMCR = tmpsmcr;
 80022bc:	609a      	str	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80022be:	2277      	movs	r2, #119	@ 0x77
      tmpsmcr = htim->Instance->SMCR;
 80022c0:	6899      	ldr	r1, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80022c2:	430a      	orrs	r2, r1
      htim->Instance->SMCR = tmpsmcr;
 80022c4:	609a      	str	r2, [r3, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80022c6:	2000      	movs	r0, #0
 80022c8:	e7c0      	b.n	800224c <HAL_TIM_ConfigClockSource+0x44>
  tmpsmcr = TIMx->SMCR;
 80022ca:	6898      	ldr	r0, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022cc:	4a1d      	ldr	r2, [pc, #116]	@ (8002344 <HAL_TIM_ConfigClockSource+0x13c>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80022ce:	684e      	ldr	r6, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022d0:	4010      	ands	r0, r2
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80022d2:	688a      	ldr	r2, [r1, #8]
 80022d4:	68c9      	ldr	r1, [r1, #12]
 80022d6:	4332      	orrs	r2, r6
 80022d8:	0209      	lsls	r1, r1, #8
 80022da:	430a      	orrs	r2, r1
 80022dc:	4302      	orrs	r2, r0
  TIMx->SMCR = tmpsmcr;
 80022de:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80022e0:	2280      	movs	r2, #128	@ 0x80
 80022e2:	6899      	ldr	r1, [r3, #8]
 80022e4:	01d2      	lsls	r2, r2, #7
 80022e6:	e7ec      	b.n	80022c2 <HAL_TIM_ConfigClockSource+0xba>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80022e8:	2610      	movs	r6, #16
 80022ea:	6a18      	ldr	r0, [r3, #32]
                               sClockSourceConfig->ClockPolarity,
 80022ec:	684a      	ldr	r2, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80022ee:	43b0      	bics	r0, r6
                               sClockSourceConfig->ClockFilter);
 80022f0:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80022f2:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80022f4:	699e      	ldr	r6, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80022f6:	4f14      	ldr	r7, [pc, #80]	@ (8002348 <HAL_TIM_ConfigClockSource+0x140>)
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80022f8:	0309      	lsls	r1, r1, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80022fa:	403e      	ands	r6, r7
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80022fc:	4331      	orrs	r1, r6
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80022fe:	26a0      	movs	r6, #160	@ 0xa0
  tmpccer = TIMx->CCER;
 8002300:	6a18      	ldr	r0, [r3, #32]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002302:	0112      	lsls	r2, r2, #4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002304:	43b0      	bics	r0, r6
  tmpccer |= (TIM_ICPolarity << 4U);
 8002306:	4302      	orrs	r2, r0
  TIMx->CCMR1 = tmpccmr1 ;
 8002308:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800230a:	621a      	str	r2, [r3, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 800230c:	2270      	movs	r2, #112	@ 0x70
  tmpsmcr = TIMx->SMCR;
 800230e:	6899      	ldr	r1, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002310:	4391      	bics	r1, r2
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002312:	3a09      	subs	r2, #9
 8002314:	e7d5      	b.n	80022c2 <HAL_TIM_ConfigClockSource+0xba>
                               sClockSourceConfig->ClockPolarity,
 8002316:	684e      	ldr	r6, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8002318:	68ca      	ldr	r2, [r1, #12]
  tmpccer = TIMx->CCER;
 800231a:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800231c:	6a1f      	ldr	r7, [r3, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800231e:	0112      	lsls	r2, r2, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002320:	4387      	bics	r7, r0
 8002322:	621f      	str	r7, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002324:	27f0      	movs	r7, #240	@ 0xf0
  tmpccmr1 = TIMx->CCMR1;
 8002326:	6998      	ldr	r0, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002328:	43b8      	bics	r0, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800232a:	4302      	orrs	r2, r0
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800232c:	200a      	movs	r0, #10
  TIMx->CCMR1 = tmpccmr1;
 800232e:	619a      	str	r2, [r3, #24]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002330:	2270      	movs	r2, #112	@ 0x70
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002332:	4381      	bics	r1, r0
  tmpccer |= TIM_ICPolarity;
 8002334:	4331      	orrs	r1, r6
  TIMx->CCER = tmpccer;
 8002336:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8002338:	6899      	ldr	r1, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800233a:	4391      	bics	r1, r2
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800233c:	3a29      	subs	r2, #41	@ 0x29
 800233e:	e7c0      	b.n	80022c2 <HAL_TIM_ConfigClockSource+0xba>
 8002340:	ffff0088 	.word	0xffff0088
 8002344:	ffff00ff 	.word	0xffff00ff
 8002348:	ffff0fff 	.word	0xffff0fff

0800234c <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 800234c:	4770      	bx	lr

0800234e <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 800234e:	4770      	bx	lr

08002350 <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 8002350:	4770      	bx	lr

08002352 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002352:	2202      	movs	r2, #2
 8002354:	6803      	ldr	r3, [r0, #0]
{
 8002356:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002358:	6919      	ldr	r1, [r3, #16]
{
 800235a:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800235c:	4211      	tst	r1, r2
 800235e:	d00d      	beq.n	800237c <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002360:	68d9      	ldr	r1, [r3, #12]
 8002362:	4211      	tst	r1, r2
 8002364:	d00a      	beq.n	800237c <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002366:	3a05      	subs	r2, #5
 8002368:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800236a:	3204      	adds	r2, #4
 800236c:	7602      	strb	r2, [r0, #24]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	079b      	lsls	r3, r3, #30
 8002372:	d05e      	beq.n	8002432 <HAL_TIM_IRQHandler+0xe0>
          HAL_TIM_IC_CaptureCallback(htim);
 8002374:	f7ff ffeb 	bl	800234e <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002378:	2300      	movs	r3, #0
 800237a:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800237c:	2204      	movs	r2, #4
 800237e:	6823      	ldr	r3, [r4, #0]
 8002380:	6919      	ldr	r1, [r3, #16]
 8002382:	4211      	tst	r1, r2
 8002384:	d010      	beq.n	80023a8 <HAL_TIM_IRQHandler+0x56>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002386:	68d9      	ldr	r1, [r3, #12]
 8002388:	4211      	tst	r1, r2
 800238a:	d00d      	beq.n	80023a8 <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800238c:	3a09      	subs	r2, #9
 800238e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002390:	3207      	adds	r2, #7
 8002392:	7622      	strb	r2, [r4, #24]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002394:	699a      	ldr	r2, [r3, #24]
 8002396:	23c0      	movs	r3, #192	@ 0xc0
 8002398:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 800239a:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800239c:	421a      	tst	r2, r3
 800239e:	d04e      	beq.n	800243e <HAL_TIM_IRQHandler+0xec>
        HAL_TIM_IC_CaptureCallback(htim);
 80023a0:	f7ff ffd5 	bl	800234e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023a4:	2300      	movs	r3, #0
 80023a6:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80023a8:	2208      	movs	r2, #8
 80023aa:	6823      	ldr	r3, [r4, #0]
 80023ac:	6919      	ldr	r1, [r3, #16]
 80023ae:	4211      	tst	r1, r2
 80023b0:	d00e      	beq.n	80023d0 <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80023b2:	68d9      	ldr	r1, [r3, #12]
 80023b4:	4211      	tst	r1, r2
 80023b6:	d00b      	beq.n	80023d0 <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80023b8:	3a11      	subs	r2, #17
 80023ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023bc:	320d      	adds	r2, #13
 80023be:	7622      	strb	r2, [r4, #24]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023c0:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80023c2:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023c4:	079b      	lsls	r3, r3, #30
 80023c6:	d040      	beq.n	800244a <HAL_TIM_IRQHandler+0xf8>
        HAL_TIM_IC_CaptureCallback(htim);
 80023c8:	f7ff ffc1 	bl	800234e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023cc:	2300      	movs	r3, #0
 80023ce:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80023d0:	2210      	movs	r2, #16
 80023d2:	6823      	ldr	r3, [r4, #0]
 80023d4:	6919      	ldr	r1, [r3, #16]
 80023d6:	4211      	tst	r1, r2
 80023d8:	d010      	beq.n	80023fc <HAL_TIM_IRQHandler+0xaa>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80023da:	68d9      	ldr	r1, [r3, #12]
 80023dc:	4211      	tst	r1, r2
 80023de:	d00d      	beq.n	80023fc <HAL_TIM_IRQHandler+0xaa>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80023e0:	3a21      	subs	r2, #33	@ 0x21
 80023e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023e4:	3219      	adds	r2, #25
 80023e6:	7622      	strb	r2, [r4, #24]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023e8:	69da      	ldr	r2, [r3, #28]
 80023ea:	23c0      	movs	r3, #192	@ 0xc0
 80023ec:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 80023ee:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023f0:	421a      	tst	r2, r3
 80023f2:	d030      	beq.n	8002456 <HAL_TIM_IRQHandler+0x104>
        HAL_TIM_IC_CaptureCallback(htim);
 80023f4:	f7ff ffab 	bl	800234e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023f8:	2300      	movs	r3, #0
 80023fa:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80023fc:	2201      	movs	r2, #1
 80023fe:	6823      	ldr	r3, [r4, #0]
 8002400:	6919      	ldr	r1, [r3, #16]
 8002402:	4211      	tst	r1, r2
 8002404:	d007      	beq.n	8002416 <HAL_TIM_IRQHandler+0xc4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002406:	68d9      	ldr	r1, [r3, #12]
 8002408:	4211      	tst	r1, r2
 800240a:	d004      	beq.n	8002416 <HAL_TIM_IRQHandler+0xc4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800240c:	3a03      	subs	r2, #3
      HAL_TIM_PeriodElapsedCallback(htim);
 800240e:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002410:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002412:	f7fe f8f7 	bl	8000604 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002416:	2240      	movs	r2, #64	@ 0x40
 8002418:	6823      	ldr	r3, [r4, #0]
 800241a:	6919      	ldr	r1, [r3, #16]
 800241c:	4211      	tst	r1, r2
 800241e:	d007      	beq.n	8002430 <HAL_TIM_IRQHandler+0xde>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002420:	68d9      	ldr	r1, [r3, #12]
 8002422:	4211      	tst	r1, r2
 8002424:	d004      	beq.n	8002430 <HAL_TIM_IRQHandler+0xde>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002426:	3a81      	subs	r2, #129	@ 0x81
      HAL_TIM_TriggerCallback(htim);
 8002428:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800242a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800242c:	f7ff ff90 	bl	8002350 <HAL_TIM_TriggerCallback>
}
 8002430:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002432:	f7ff ff8b 	bl	800234c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002436:	0020      	movs	r0, r4
 8002438:	f7fe f914 	bl	8000664 <HAL_TIM_PWM_PulseFinishedCallback>
 800243c:	e79c      	b.n	8002378 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800243e:	f7ff ff85 	bl	800234c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002442:	0020      	movs	r0, r4
 8002444:	f7fe f90e 	bl	8000664 <HAL_TIM_PWM_PulseFinishedCallback>
 8002448:	e7ac      	b.n	80023a4 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800244a:	f7ff ff7f 	bl	800234c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800244e:	0020      	movs	r0, r4
 8002450:	f7fe f908 	bl	8000664 <HAL_TIM_PWM_PulseFinishedCallback>
 8002454:	e7ba      	b.n	80023cc <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002456:	f7ff ff79 	bl	800234c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800245a:	0020      	movs	r0, r4
 800245c:	f7fe f902 	bl	8000664 <HAL_TIM_PWM_PulseFinishedCallback>
 8002460:	e7ca      	b.n	80023f8 <HAL_TIM_IRQHandler+0xa6>

08002462 <HAL_TIM_Base_GetState>:
  return htim->State;
 8002462:	3039      	adds	r0, #57	@ 0x39
 8002464:	7800      	ldrb	r0, [r0, #0]
 8002466:	b2c0      	uxtb	r0, r0
}
 8002468:	4770      	bx	lr
	...

0800246c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800246c:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800246e:	0004      	movs	r4, r0
 8002470:	2202      	movs	r2, #2
 8002472:	3438      	adds	r4, #56	@ 0x38
 8002474:	7825      	ldrb	r5, [r4, #0]
{
 8002476:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8002478:	0010      	movs	r0, r2
 800247a:	2d01      	cmp	r5, #1
 800247c:	d01d      	beq.n	80024ba <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800247e:	001d      	movs	r5, r3

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002480:	2670      	movs	r6, #112	@ 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 8002482:	3539      	adds	r5, #57	@ 0x39
 8002484:	702a      	strb	r2, [r5, #0]
  tmpcr2 = htim->Instance->CR2;
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 800248a:	689a      	ldr	r2, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 800248c:	43b0      	bics	r0, r6
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800248e:	680e      	ldr	r6, [r1, #0]
 8002490:	4330      	orrs	r0, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002492:	6058      	str	r0, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002494:	2080      	movs	r0, #128	@ 0x80
 8002496:	05c0      	lsls	r0, r0, #23
 8002498:	4283      	cmp	r3, r0
 800249a:	d005      	beq.n	80024a8 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 800249c:	4807      	ldr	r0, [pc, #28]	@ (80024bc <HAL_TIMEx_MasterConfigSynchronization+0x50>)
 800249e:	4283      	cmp	r3, r0
 80024a0:	d002      	beq.n	80024a8 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 80024a2:	4807      	ldr	r0, [pc, #28]	@ (80024c0 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
 80024a4:	4283      	cmp	r3, r0
 80024a6:	d104      	bne.n	80024b2 <HAL_TIMEx_MasterConfigSynchronization+0x46>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80024a8:	2080      	movs	r0, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80024aa:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80024ac:	4382      	bics	r2, r0
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80024ae:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80024b0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80024b2:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 80024b4:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80024b6:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 80024b8:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 80024ba:	bd70      	pop	{r4, r5, r6, pc}
 80024bc:	40010800 	.word	0x40010800
 80024c0:	40011400 	.word	0x40011400

080024c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80024c4:	b530      	push	{r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024c6:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024ca:	2201      	movs	r2, #1
 80024cc:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80024d0:	6801      	ldr	r1, [r0, #0]
 80024d2:	4d12      	ldr	r5, [pc, #72]	@ (800251c <UART_EndRxTransfer+0x58>)
 80024d4:	680b      	ldr	r3, [r1, #0]
 80024d6:	402b      	ands	r3, r5
 80024d8:	600b      	str	r3, [r1, #0]
 80024da:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024de:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024e2:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024e6:	6801      	ldr	r1, [r0, #0]
 80024e8:	688b      	ldr	r3, [r1, #8]
 80024ea:	4393      	bics	r3, r2
 80024ec:	608b      	str	r3, [r1, #8]
 80024ee:	f384 8810 	msr	PRIMASK, r4

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80024f2:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d10a      	bne.n	800250e <UART_EndRxTransfer+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024f8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024fc:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002500:	2410      	movs	r4, #16
 8002502:	6802      	ldr	r2, [r0, #0]
 8002504:	6813      	ldr	r3, [r2, #0]
 8002506:	43a3      	bics	r3, r4
 8002508:	6013      	str	r3, [r2, #0]
 800250a:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800250e:	2220      	movs	r2, #32
 8002510:	1d03      	adds	r3, r0, #4
 8002512:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002514:	2300      	movs	r3, #0
 8002516:	6603      	str	r3, [r0, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002518:	6683      	str	r3, [r0, #104]	@ 0x68
}
 800251a:	bd30      	pop	{r4, r5, pc}
 800251c:	fffffedf 	.word	0xfffffedf

08002520 <UART_SetConfig>:
{
 8002520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002522:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002524:	6925      	ldr	r5, [r4, #16]
 8002526:	68a1      	ldr	r1, [r4, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 8002528:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800252a:	4329      	orrs	r1, r5
 800252c:	6965      	ldr	r5, [r4, #20]
 800252e:	69c3      	ldr	r3, [r0, #28]
 8002530:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002532:	6810      	ldr	r0, [r2, #0]
 8002534:	4d60      	ldr	r5, [pc, #384]	@ (80026b8 <UART_SetConfig+0x198>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002536:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002538:	4028      	ands	r0, r5
 800253a:	4301      	orrs	r1, r0
 800253c:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800253e:	6851      	ldr	r1, [r2, #4]
 8002540:	485e      	ldr	r0, [pc, #376]	@ (80026bc <UART_SetConfig+0x19c>)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002542:	4d5f      	ldr	r5, [pc, #380]	@ (80026c0 <UART_SetConfig+0x1a0>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002544:	4001      	ands	r1, r0
 8002546:	68e0      	ldr	r0, [r4, #12]
 8002548:	4301      	orrs	r1, r0
 800254a:	6051      	str	r1, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800254c:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800254e:	42aa      	cmp	r2, r5
 8002550:	d001      	beq.n	8002556 <UART_SetConfig+0x36>
    tmpreg |= huart->Init.OneBitSampling;
 8002552:	6a21      	ldr	r1, [r4, #32]
 8002554:	4308      	orrs	r0, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002556:	6891      	ldr	r1, [r2, #8]
 8002558:	4e5a      	ldr	r6, [pc, #360]	@ (80026c4 <UART_SetConfig+0x1a4>)
 800255a:	4031      	ands	r1, r6
 800255c:	4301      	orrs	r1, r0
 800255e:	6091      	str	r1, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002560:	4959      	ldr	r1, [pc, #356]	@ (80026c8 <UART_SetConfig+0x1a8>)
 8002562:	428a      	cmp	r2, r1
 8002564:	d116      	bne.n	8002594 <UART_SetConfig+0x74>
 8002566:	200c      	movs	r0, #12
 8002568:	4958      	ldr	r1, [pc, #352]	@ (80026cc <UART_SetConfig+0x1ac>)
 800256a:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 800256c:	4002      	ands	r2, r0
 800256e:	2a08      	cmp	r2, #8
 8002570:	d100      	bne.n	8002574 <UART_SetConfig+0x54>
 8002572:	e08a      	b.n	800268a <UART_SetConfig+0x16a>
 8002574:	d807      	bhi.n	8002586 <UART_SetConfig+0x66>
 8002576:	2a00      	cmp	r2, #0
 8002578:	d100      	bne.n	800257c <UART_SetConfig+0x5c>
 800257a:	e07d      	b.n	8002678 <UART_SetConfig+0x158>
 800257c:	2a04      	cmp	r2, #4
 800257e:	d100      	bne.n	8002582 <UART_SetConfig+0x62>
 8002580:	e073      	b.n	800266a <UART_SetConfig+0x14a>
          pclk = (uint32_t) HSI_VALUE;
 8002582:	2001      	movs	r0, #1
 8002584:	e047      	b.n	8002616 <UART_SetConfig+0xf6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002586:	2a0c      	cmp	r2, #12
 8002588:	d1fb      	bne.n	8002582 <UART_SetConfig+0x62>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800258a:	2080      	movs	r0, #128	@ 0x80
 800258c:	0200      	lsls	r0, r0, #8
 800258e:	4283      	cmp	r3, r0
 8002590:	d049      	beq.n	8002626 <UART_SetConfig+0x106>
 8002592:	e088      	b.n	80026a6 <UART_SetConfig+0x186>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002594:	42aa      	cmp	r2, r5
 8002596:	d1f4      	bne.n	8002582 <UART_SetConfig+0x62>
 8002598:	21c0      	movs	r1, #192	@ 0xc0
 800259a:	2080      	movs	r0, #128	@ 0x80
 800259c:	4a4b      	ldr	r2, [pc, #300]	@ (80026cc <UART_SetConfig+0x1ac>)
 800259e:	0109      	lsls	r1, r1, #4
 80025a0:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 80025a2:	0100      	lsls	r0, r0, #4
 80025a4:	400b      	ands	r3, r1
 80025a6:	4283      	cmp	r3, r0
 80025a8:	d00e      	beq.n	80025c8 <UART_SetConfig+0xa8>
 80025aa:	d808      	bhi.n	80025be <UART_SetConfig+0x9e>
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d02d      	beq.n	800260c <UART_SetConfig+0xec>
 80025b0:	2280      	movs	r2, #128	@ 0x80
 80025b2:	00d2      	lsls	r2, r2, #3
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d1e4      	bne.n	8002582 <UART_SetConfig+0x62>
        pclk = HAL_RCC_GetSysClockFreq();
 80025b8:	f7ff fc12 	bl	8001de0 <HAL_RCC_GetSysClockFreq>
        break;
 80025bc:	e028      	b.n	8002610 <UART_SetConfig+0xf0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80025be:	428b      	cmp	r3, r1
 80025c0:	d1df      	bne.n	8002582 <UART_SetConfig+0x62>
 80025c2:	2080      	movs	r0, #128	@ 0x80
 80025c4:	0200      	lsls	r0, r0, #8
 80025c6:	e006      	b.n	80025d6 <UART_SetConfig+0xb6>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80025c8:	6810      	ldr	r0, [r2, #0]
          pclk = (uint32_t) HSI_VALUE;
 80025ca:	4b41      	ldr	r3, [pc, #260]	@ (80026d0 <UART_SetConfig+0x1b0>)
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80025cc:	06c0      	lsls	r0, r0, #27
          pclk = (uint32_t) HSI_VALUE;
 80025ce:	17c0      	asrs	r0, r0, #31
 80025d0:	4018      	ands	r0, r3
 80025d2:	4b40      	ldr	r3, [pc, #256]	@ (80026d4 <UART_SetConfig+0x1b4>)
 80025d4:	18c0      	adds	r0, r0, r3
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80025d6:	2303      	movs	r3, #3
 80025d8:	6862      	ldr	r2, [r4, #4]
 80025da:	4353      	muls	r3, r2
 80025dc:	4283      	cmp	r3, r0
 80025de:	d8d0      	bhi.n	8002582 <UART_SetConfig+0x62>
          (pclk > (4096U * huart->Init.BaudRate)))
 80025e0:	0313      	lsls	r3, r2, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80025e2:	4283      	cmp	r3, r0
 80025e4:	d3cd      	bcc.n	8002582 <UART_SetConfig+0x62>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80025e6:	2100      	movs	r1, #0
 80025e8:	0e07      	lsrs	r7, r0, #24
 80025ea:	0206      	lsls	r6, r0, #8
 80025ec:	0850      	lsrs	r0, r2, #1
 80025ee:	1836      	adds	r6, r6, r0
 80025f0:	414f      	adcs	r7, r1
 80025f2:	000b      	movs	r3, r1
 80025f4:	0030      	movs	r0, r6
 80025f6:	0039      	movs	r1, r7
 80025f8:	f7fd fe12 	bl	8000220 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80025fc:	4b36      	ldr	r3, [pc, #216]	@ (80026d8 <UART_SetConfig+0x1b8>)
 80025fe:	18c2      	adds	r2, r0, r3
 8002600:	4b36      	ldr	r3, [pc, #216]	@ (80026dc <UART_SetConfig+0x1bc>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002602:	429a      	cmp	r2, r3
 8002604:	d8bd      	bhi.n	8002582 <UART_SetConfig+0x62>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002606:	6823      	ldr	r3, [r4, #0]
 8002608:	60d8      	str	r0, [r3, #12]
 800260a:	e003      	b.n	8002614 <UART_SetConfig+0xf4>
        pclk = HAL_RCC_GetPCLK1Freq();
 800260c:	f7ff fc32 	bl	8001e74 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002610:	2800      	cmp	r0, #0
 8002612:	d1e0      	bne.n	80025d6 <UART_SetConfig+0xb6>
          pclk = (uint32_t) HSI_VALUE;
 8002614:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 8002616:	2300      	movs	r3, #0
 8002618:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 800261a:	66e3      	str	r3, [r4, #108]	@ 0x6c
}
 800261c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pclk = HAL_RCC_GetPCLK1Freq();
 800261e:	f7ff fc29 	bl	8001e74 <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 8002622:	1e03      	subs	r3, r0, #0
    if (pclk != 0U)
 8002624:	d0f6      	beq.n	8002614 <UART_SetConfig+0xf4>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002626:	6861      	ldr	r1, [r4, #4]
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	0848      	lsrs	r0, r1, #1
 800262c:	1818      	adds	r0, r3, r0
 800262e:	f7fd fd6b 	bl	8000108 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002632:	0002      	movs	r2, r0
 8002634:	4b2a      	ldr	r3, [pc, #168]	@ (80026e0 <UART_SetConfig+0x1c0>)
 8002636:	3a10      	subs	r2, #16
 8002638:	429a      	cmp	r2, r3
 800263a:	d8a2      	bhi.n	8002582 <UART_SetConfig+0x62>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800263c:	230f      	movs	r3, #15
 800263e:	0002      	movs	r2, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002640:	0700      	lsls	r0, r0, #28
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002642:	439a      	bics	r2, r3
 8002644:	b293      	uxth	r3, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002646:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 8002648:	6822      	ldr	r2, [r4, #0]
 800264a:	4303      	orrs	r3, r0
 800264c:	60d3      	str	r3, [r2, #12]
 800264e:	e7e1      	b.n	8002614 <UART_SetConfig+0xf4>
        pclk = HAL_RCC_GetSysClockFreq();
 8002650:	f7ff fbc6 	bl	8001de0 <HAL_RCC_GetSysClockFreq>
 8002654:	e7e5      	b.n	8002622 <UART_SetConfig+0x102>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002656:	680b      	ldr	r3, [r1, #0]
 8002658:	4013      	ands	r3, r2
          pclk = (uint32_t) HSI_VALUE;
 800265a:	1e5a      	subs	r2, r3, #1
 800265c:	4193      	sbcs	r3, r2
 800265e:	4a1c      	ldr	r2, [pc, #112]	@ (80026d0 <UART_SetConfig+0x1b0>)
 8002660:	425b      	negs	r3, r3
 8002662:	4013      	ands	r3, r2
 8002664:	4a1b      	ldr	r2, [pc, #108]	@ (80026d4 <UART_SetConfig+0x1b4>)
 8002666:	189b      	adds	r3, r3, r2
 8002668:	e7dd      	b.n	8002626 <UART_SetConfig+0x106>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800266a:	2280      	movs	r2, #128	@ 0x80
 800266c:	0212      	lsls	r2, r2, #8
 800266e:	4293      	cmp	r3, r2
 8002670:	d0ee      	beq.n	8002650 <UART_SetConfig+0x130>
        pclk = HAL_RCC_GetSysClockFreq();
 8002672:	f7ff fbb5 	bl	8001de0 <HAL_RCC_GetSysClockFreq>
        break;
 8002676:	e005      	b.n	8002684 <UART_SetConfig+0x164>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002678:	2280      	movs	r2, #128	@ 0x80
 800267a:	0212      	lsls	r2, r2, #8
 800267c:	4293      	cmp	r3, r2
 800267e:	d0ce      	beq.n	800261e <UART_SetConfig+0xfe>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002680:	f7ff fbf8 	bl	8001e74 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002684:	2800      	cmp	r0, #0
 8002686:	d0c5      	beq.n	8002614 <UART_SetConfig+0xf4>
 8002688:	e00d      	b.n	80026a6 <UART_SetConfig+0x186>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800268a:	2080      	movs	r0, #128	@ 0x80
 800268c:	2210      	movs	r2, #16
 800268e:	0200      	lsls	r0, r0, #8
 8002690:	4283      	cmp	r3, r0
 8002692:	d0e0      	beq.n	8002656 <UART_SetConfig+0x136>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002694:	6808      	ldr	r0, [r1, #0]
 8002696:	4010      	ands	r0, r2
          pclk = (uint32_t) HSI_VALUE;
 8002698:	1e43      	subs	r3, r0, #1
 800269a:	4198      	sbcs	r0, r3
 800269c:	4b0c      	ldr	r3, [pc, #48]	@ (80026d0 <UART_SetConfig+0x1b0>)
 800269e:	4240      	negs	r0, r0
 80026a0:	4018      	ands	r0, r3
 80026a2:	4b0c      	ldr	r3, [pc, #48]	@ (80026d4 <UART_SetConfig+0x1b4>)
 80026a4:	18c0      	adds	r0, r0, r3
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80026a6:	6861      	ldr	r1, [r4, #4]
 80026a8:	084b      	lsrs	r3, r1, #1
 80026aa:	1818      	adds	r0, r3, r0
 80026ac:	f7fd fd2c 	bl	8000108 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80026b0:	0002      	movs	r2, r0
 80026b2:	4b0b      	ldr	r3, [pc, #44]	@ (80026e0 <UART_SetConfig+0x1c0>)
 80026b4:	3a10      	subs	r2, #16
 80026b6:	e7a4      	b.n	8002602 <UART_SetConfig+0xe2>
 80026b8:	efff69f3 	.word	0xefff69f3
 80026bc:	ffffcfff 	.word	0xffffcfff
 80026c0:	40004800 	.word	0x40004800
 80026c4:	fffff4ff 	.word	0xfffff4ff
 80026c8:	40004400 	.word	0x40004400
 80026cc:	40021000 	.word	0x40021000
 80026d0:	ff48e500 	.word	0xff48e500
 80026d4:	00f42400 	.word	0x00f42400
 80026d8:	fffffd00 	.word	0xfffffd00
 80026dc:	000ffcff 	.word	0x000ffcff
 80026e0:	0000ffef 	.word	0x0000ffef

080026e4 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80026e4:	6a43      	ldr	r3, [r0, #36]	@ 0x24
{
 80026e6:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80026e8:	07da      	lsls	r2, r3, #31
 80026ea:	d506      	bpl.n	80026fa <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80026ec:	6801      	ldr	r1, [r0, #0]
 80026ee:	4c28      	ldr	r4, [pc, #160]	@ (8002790 <UART_AdvFeatureConfig+0xac>)
 80026f0:	684a      	ldr	r2, [r1, #4]
 80026f2:	4022      	ands	r2, r4
 80026f4:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 80026f6:	4322      	orrs	r2, r4
 80026f8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80026fa:	079a      	lsls	r2, r3, #30
 80026fc:	d506      	bpl.n	800270c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80026fe:	6801      	ldr	r1, [r0, #0]
 8002700:	4c24      	ldr	r4, [pc, #144]	@ (8002794 <UART_AdvFeatureConfig+0xb0>)
 8002702:	684a      	ldr	r2, [r1, #4]
 8002704:	4022      	ands	r2, r4
 8002706:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8002708:	4322      	orrs	r2, r4
 800270a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800270c:	075a      	lsls	r2, r3, #29
 800270e:	d506      	bpl.n	800271e <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002710:	6801      	ldr	r1, [r0, #0]
 8002712:	4c21      	ldr	r4, [pc, #132]	@ (8002798 <UART_AdvFeatureConfig+0xb4>)
 8002714:	684a      	ldr	r2, [r1, #4]
 8002716:	4022      	ands	r2, r4
 8002718:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 800271a:	4322      	orrs	r2, r4
 800271c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800271e:	071a      	lsls	r2, r3, #28
 8002720:	d506      	bpl.n	8002730 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002722:	6801      	ldr	r1, [r0, #0]
 8002724:	4c1d      	ldr	r4, [pc, #116]	@ (800279c <UART_AdvFeatureConfig+0xb8>)
 8002726:	684a      	ldr	r2, [r1, #4]
 8002728:	4022      	ands	r2, r4
 800272a:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 800272c:	4322      	orrs	r2, r4
 800272e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002730:	06da      	lsls	r2, r3, #27
 8002732:	d506      	bpl.n	8002742 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002734:	6801      	ldr	r1, [r0, #0]
 8002736:	4c1a      	ldr	r4, [pc, #104]	@ (80027a0 <UART_AdvFeatureConfig+0xbc>)
 8002738:	688a      	ldr	r2, [r1, #8]
 800273a:	4022      	ands	r2, r4
 800273c:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 800273e:	4322      	orrs	r2, r4
 8002740:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002742:	069a      	lsls	r2, r3, #26
 8002744:	d506      	bpl.n	8002754 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002746:	6801      	ldr	r1, [r0, #0]
 8002748:	4c16      	ldr	r4, [pc, #88]	@ (80027a4 <UART_AdvFeatureConfig+0xc0>)
 800274a:	688a      	ldr	r2, [r1, #8]
 800274c:	4022      	ands	r2, r4
 800274e:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8002750:	4322      	orrs	r2, r4
 8002752:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002754:	065a      	lsls	r2, r3, #25
 8002756:	d510      	bpl.n	800277a <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002758:	6801      	ldr	r1, [r0, #0]
 800275a:	4d13      	ldr	r5, [pc, #76]	@ (80027a8 <UART_AdvFeatureConfig+0xc4>)
 800275c:	684a      	ldr	r2, [r1, #4]
 800275e:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8002760:	402a      	ands	r2, r5
 8002762:	4322      	orrs	r2, r4
 8002764:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002766:	2280      	movs	r2, #128	@ 0x80
 8002768:	0352      	lsls	r2, r2, #13
 800276a:	4294      	cmp	r4, r2
 800276c:	d105      	bne.n	800277a <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800276e:	684a      	ldr	r2, [r1, #4]
 8002770:	4c0e      	ldr	r4, [pc, #56]	@ (80027ac <UART_AdvFeatureConfig+0xc8>)
 8002772:	4022      	ands	r2, r4
 8002774:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8002776:	4322      	orrs	r2, r4
 8002778:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800277a:	061b      	lsls	r3, r3, #24
 800277c:	d506      	bpl.n	800278c <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800277e:	6802      	ldr	r2, [r0, #0]
 8002780:	490b      	ldr	r1, [pc, #44]	@ (80027b0 <UART_AdvFeatureConfig+0xcc>)
 8002782:	6853      	ldr	r3, [r2, #4]
 8002784:	400b      	ands	r3, r1
 8002786:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8002788:	430b      	orrs	r3, r1
 800278a:	6053      	str	r3, [r2, #4]
}
 800278c:	bd30      	pop	{r4, r5, pc}
 800278e:	46c0      	nop			@ (mov r8, r8)
 8002790:	fffdffff 	.word	0xfffdffff
 8002794:	fffeffff 	.word	0xfffeffff
 8002798:	fffbffff 	.word	0xfffbffff
 800279c:	ffff7fff 	.word	0xffff7fff
 80027a0:	ffffefff 	.word	0xffffefff
 80027a4:	ffffdfff 	.word	0xffffdfff
 80027a8:	ffefffff 	.word	0xffefffff
 80027ac:	ff9fffff 	.word	0xff9fffff
 80027b0:	fff7ffff 	.word	0xfff7ffff

080027b4 <UART_WaitOnFlagUntilTimeout>:
{
 80027b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80027b6:	0004      	movs	r4, r0
 80027b8:	000d      	movs	r5, r1
 80027ba:	0017      	movs	r7, r2
 80027bc:	9300      	str	r3, [sp, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027be:	6822      	ldr	r2, [r4, #0]
 80027c0:	69d3      	ldr	r3, [r2, #28]
 80027c2:	402b      	ands	r3, r5
 80027c4:	1b5b      	subs	r3, r3, r5
 80027c6:	4259      	negs	r1, r3
 80027c8:	414b      	adcs	r3, r1
 80027ca:	42bb      	cmp	r3, r7
 80027cc:	d001      	beq.n	80027d2 <UART_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 80027ce:	2000      	movs	r0, #0
 80027d0:	e020      	b.n	8002814 <UART_WaitOnFlagUntilTimeout+0x60>
    if (Timeout != HAL_MAX_DELAY)
 80027d2:	9b08      	ldr	r3, [sp, #32]
 80027d4:	3301      	adds	r3, #1
 80027d6:	d0f3      	beq.n	80027c0 <UART_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027d8:	f7fe fca4 	bl	8001124 <HAL_GetTick>
 80027dc:	9b00      	ldr	r3, [sp, #0]
 80027de:	1ac0      	subs	r0, r0, r3
 80027e0:	9b08      	ldr	r3, [sp, #32]
 80027e2:	4298      	cmp	r0, r3
 80027e4:	d827      	bhi.n	8002836 <UART_WaitOnFlagUntilTimeout+0x82>
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d025      	beq.n	8002836 <UART_WaitOnFlagUntilTimeout+0x82>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80027ea:	6823      	ldr	r3, [r4, #0]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	0752      	lsls	r2, r2, #29
 80027f0:	d5e5      	bpl.n	80027be <UART_WaitOnFlagUntilTimeout+0xa>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80027f2:	69da      	ldr	r2, [r3, #28]
 80027f4:	2608      	movs	r6, #8
 80027f6:	0011      	movs	r1, r2
 80027f8:	4031      	ands	r1, r6
 80027fa:	9101      	str	r1, [sp, #4]
 80027fc:	4232      	tst	r2, r6
 80027fe:	d00a      	beq.n	8002816 <UART_WaitOnFlagUntilTimeout+0x62>
           UART_EndRxTransfer(huart);
 8002800:	0020      	movs	r0, r4
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002802:	621e      	str	r6, [r3, #32]
           UART_EndRxTransfer(huart);
 8002804:	f7ff fe5e 	bl	80024c4 <UART_EndRxTransfer>
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002808:	19a3      	adds	r3, r4, r6
 800280a:	67de      	str	r6, [r3, #124]	@ 0x7c
           __HAL_UNLOCK(huart);
 800280c:	2300      	movs	r3, #0
           return HAL_ERROR;
 800280e:	2001      	movs	r0, #1
           __HAL_UNLOCK(huart);
 8002810:	3478      	adds	r4, #120	@ 0x78
 8002812:	7023      	strb	r3, [r4, #0]
}
 8002814:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002816:	2280      	movs	r2, #128	@ 0x80
 8002818:	69d9      	ldr	r1, [r3, #28]
 800281a:	0112      	lsls	r2, r2, #4
 800281c:	4211      	tst	r1, r2
 800281e:	d0ce      	beq.n	80027be <UART_WaitOnFlagUntilTimeout+0xa>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002820:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 8002822:	0020      	movs	r0, r4
 8002824:	f7ff fe4e 	bl	80024c4 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002828:	0023      	movs	r3, r4
 800282a:	2220      	movs	r2, #32
 800282c:	3308      	adds	r3, #8
 800282e:	67da      	str	r2, [r3, #124]	@ 0x7c
          __HAL_UNLOCK(huart);
 8002830:	9b01      	ldr	r3, [sp, #4]
 8002832:	3478      	adds	r4, #120	@ 0x78
 8002834:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 8002836:	2003      	movs	r0, #3
 8002838:	e7ec      	b.n	8002814 <UART_WaitOnFlagUntilTimeout+0x60>
	...

0800283c <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800283c:	0003      	movs	r3, r0
{
 800283e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002840:	2500      	movs	r5, #0
{
 8002842:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002844:	3308      	adds	r3, #8
 8002846:	67dd      	str	r5, [r3, #124]	@ 0x7c
  tickstart = HAL_GetTick();
 8002848:	f7fe fc6c 	bl	8001124 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800284c:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800284e:	0006      	movs	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	071b      	lsls	r3, r3, #28
 8002854:	d51d      	bpl.n	8002892 <UART_CheckIdleState+0x56>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002856:	2180      	movs	r1, #128	@ 0x80
 8002858:	4b26      	ldr	r3, [pc, #152]	@ (80028f4 <UART_CheckIdleState+0xb8>)
 800285a:	002a      	movs	r2, r5
 800285c:	9300      	str	r3, [sp, #0]
 800285e:	0389      	lsls	r1, r1, #14
 8002860:	0003      	movs	r3, r0
 8002862:	0020      	movs	r0, r4
 8002864:	f7ff ffa6 	bl	80027b4 <UART_WaitOnFlagUntilTimeout>
 8002868:	42a8      	cmp	r0, r5
 800286a:	d012      	beq.n	8002892 <UART_CheckIdleState+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800286c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002870:	2301      	movs	r3, #1
 8002872:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002876:	2080      	movs	r0, #128	@ 0x80
 8002878:	6822      	ldr	r2, [r4, #0]
 800287a:	6813      	ldr	r3, [r2, #0]
 800287c:	4383      	bics	r3, r0
 800287e:	6013      	str	r3, [r2, #0]
 8002880:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 8002884:	2320      	movs	r3, #32
 8002886:	67e3      	str	r3, [r4, #124]	@ 0x7c
      return HAL_TIMEOUT;
 8002888:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 800288a:	2300      	movs	r3, #0
 800288c:	3478      	adds	r4, #120	@ 0x78
 800288e:	7023      	strb	r3, [r4, #0]
}
 8002890:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002892:	0025      	movs	r5, r4
 8002894:	cd08      	ldmia	r5!, {r3}
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	075b      	lsls	r3, r3, #29
 800289a:	d523      	bpl.n	80028e4 <UART_CheckIdleState+0xa8>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800289c:	2180      	movs	r1, #128	@ 0x80
 800289e:	4b15      	ldr	r3, [pc, #84]	@ (80028f4 <UART_CheckIdleState+0xb8>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	9300      	str	r3, [sp, #0]
 80028a4:	0020      	movs	r0, r4
 80028a6:	0033      	movs	r3, r6
 80028a8:	03c9      	lsls	r1, r1, #15
 80028aa:	f7ff ff83 	bl	80027b4 <UART_WaitOnFlagUntilTimeout>
 80028ae:	2800      	cmp	r0, #0
 80028b0:	d018      	beq.n	80028e4 <UART_CheckIdleState+0xa8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028b2:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028b6:	2201      	movs	r2, #1
 80028b8:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028bc:	6821      	ldr	r1, [r4, #0]
 80028be:	4e0e      	ldr	r6, [pc, #56]	@ (80028f8 <UART_CheckIdleState+0xbc>)
 80028c0:	680b      	ldr	r3, [r1, #0]
 80028c2:	4033      	ands	r3, r6
 80028c4:	600b      	str	r3, [r1, #0]
 80028c6:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028ca:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028ce:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028d2:	6821      	ldr	r1, [r4, #0]
 80028d4:	688b      	ldr	r3, [r1, #8]
 80028d6:	4393      	bics	r3, r2
 80028d8:	608b      	str	r3, [r1, #8]
 80028da:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 80028de:	2320      	movs	r3, #32
 80028e0:	67eb      	str	r3, [r5, #124]	@ 0x7c
      return HAL_TIMEOUT;
 80028e2:	e7d1      	b.n	8002888 <UART_CheckIdleState+0x4c>
  huart->gState = HAL_UART_STATE_READY;
 80028e4:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028e6:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80028e8:	67e3      	str	r3, [r4, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80028ea:	67eb      	str	r3, [r5, #124]	@ 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028ec:	6620      	str	r0, [r4, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80028ee:	6660      	str	r0, [r4, #100]	@ 0x64
  return HAL_OK;
 80028f0:	e7cb      	b.n	800288a <UART_CheckIdleState+0x4e>
 80028f2:	46c0      	nop			@ (mov r8, r8)
 80028f4:	01ffffff 	.word	0x01ffffff
 80028f8:	fffffedf 	.word	0xfffffedf

080028fc <HAL_UART_Init>:
{
 80028fc:	b510      	push	{r4, lr}
 80028fe:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8002900:	d101      	bne.n	8002906 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8002902:	2001      	movs	r0, #1
}
 8002904:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 8002906:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 8002908:	2b00      	cmp	r3, #0
 800290a:	d104      	bne.n	8002916 <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 800290c:	0002      	movs	r2, r0
 800290e:	3278      	adds	r2, #120	@ 0x78
 8002910:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8002912:	f7fe f97b 	bl	8000c0c <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8002916:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 8002918:	2101      	movs	r1, #1
 800291a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800291c:	67e3      	str	r3, [r4, #124]	@ 0x7c
  __HAL_UART_DISABLE(huart);
 800291e:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002920:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8002922:	438b      	bics	r3, r1
 8002924:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002926:	f7ff fdfb 	bl	8002520 <UART_SetConfig>
 800292a:	2801      	cmp	r0, #1
 800292c:	d0e9      	beq.n	8002902 <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800292e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002930:	2b00      	cmp	r3, #0
 8002932:	d002      	beq.n	800293a <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 8002934:	0020      	movs	r0, r4
 8002936:	f7ff fed5 	bl	80026e4 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800293a:	6823      	ldr	r3, [r4, #0]
 800293c:	4907      	ldr	r1, [pc, #28]	@ (800295c <HAL_UART_Init+0x60>)
 800293e:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8002940:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002942:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002944:	212a      	movs	r1, #42	@ 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002946:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002948:	689a      	ldr	r2, [r3, #8]
 800294a:	438a      	bics	r2, r1
 800294c:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800294e:	2201      	movs	r2, #1
 8002950:	6819      	ldr	r1, [r3, #0]
 8002952:	430a      	orrs	r2, r1
 8002954:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8002956:	f7ff ff71 	bl	800283c <UART_CheckIdleState>
 800295a:	e7d3      	b.n	8002904 <HAL_UART_Init+0x8>
 800295c:	ffffb7ff 	.word	0xffffb7ff

08002960 <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002960:	4b01      	ldr	r3, [pc, #4]	@ (8002968 <LL_SetSystemCoreClock+0x8>)
 8002962:	6018      	str	r0, [r3, #0]
}
 8002964:	4770      	bx	lr
 8002966:	46c0      	nop			@ (mov r8, r8)
 8002968:	20000078 	.word	0x20000078

0800296c <flash_read>:
  * @param  size: is the number of 32bit words to be written.
  * @note   This function todo: MIGHT BE for various uCs.
  */
static void flash_read(int* dest, uint32_t src, uint32_t size) {
#ifdef STM32L031xx
	for (int i = 0; i < size; ++i)
 800296c:	0092      	lsls	r2, r2, #2
 800296e:	1852      	adds	r2, r2, r1
		dest[i] = *( (volatile int*)(src + 4*i) );
 8002970:	1a40      	subs	r0, r0, r1
	for (int i = 0; i < size; ++i)
 8002972:	4291      	cmp	r1, r2
 8002974:	d100      	bne.n	8002978 <flash_read+0xc>
#elif defined(STM32G0B1xx)
	for (int i = 0; i < size; ++i)
		dest[i] = (int)(*(volatile uint64_t *)(src + 8*i)); // Go to next 8 bytes (doubleword)
#else
#endif
}
 8002976:	4770      	bx	lr
		dest[i] = *( (volatile int*)(src + 4*i) );
 8002978:	680b      	ldr	r3, [r1, #0]
 800297a:	5043      	str	r3, [r0, r1]
	for (int i = 0; i < size; ++i)
 800297c:	3104      	adds	r1, #4
 800297e:	e7f8      	b.n	8002972 <flash_read+0x6>

08002980 <flash_check_is_empty>:
  * @retval	return 1 if falsh NOT empty, 0 if empty
  * @note   This function todo: MIGHT BE for various uCs.
  */
static int flash_check_is_empty(void) {
#ifdef STM32L031xx
	int temp_buf[EEPROM_SIZE/4] = {0};
 8002980:	2280      	movs	r2, #128	@ 0x80
static int flash_check_is_empty(void) {
 8002982:	b580      	push	{r7, lr}
 8002984:	4f0f      	ldr	r7, [pc, #60]	@ (80029c4 <flash_check_is_empty+0x44>)
	int temp_buf[EEPROM_SIZE/4] = {0};
 8002986:	2100      	movs	r1, #0
static int flash_check_is_empty(void) {
 8002988:	44bd      	add	sp, r7
	int temp_buf[EEPROM_SIZE/4] = {0};
 800298a:	00d2      	lsls	r2, r2, #3
 800298c:	4668      	mov	r0, sp
 800298e:	f000 f929 	bl	8002be4 <memset>

	flash_read(temp_buf, USER_DATA_BASEADDR, EEPROM_SIZE/4);
 8002992:	2280      	movs	r2, #128	@ 0x80
 8002994:	4668      	mov	r0, sp
 8002996:	0052      	lsls	r2, r2, #1
 8002998:	490b      	ldr	r1, [pc, #44]	@ (80029c8 <flash_check_is_empty+0x48>)
 800299a:	f7ff ffe7 	bl	800296c <flash_read>

	for (int i = 0; i < EEPROM_SIZE/4; ++i)
 800299e:	2280      	movs	r2, #128	@ 0x80
 80029a0:	2300      	movs	r3, #0
 80029a2:	0052      	lsls	r2, r2, #1
		if (temp_buf[i] != 0) return 0;	// Break on the first non-zero value
 80029a4:	4668      	mov	r0, sp
 80029a6:	0099      	lsls	r1, r3, #2
 80029a8:	5841      	ldr	r1, [r0, r1]
 80029aa:	2900      	cmp	r1, #0
 80029ac:	d107      	bne.n	80029be <flash_check_is_empty+0x3e>
	for (int i = 0; i < EEPROM_SIZE/4; ++i)
 80029ae:	3301      	adds	r3, #1
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d1f7      	bne.n	80029a4 <flash_check_is_empty+0x24>
		if (temp_buf[i] != 0) return 0;	// Break on the first non-zero value
#else
#endif


	return 1;
 80029b4:	2001      	movs	r0, #1
}
 80029b6:	2380      	movs	r3, #128	@ 0x80
 80029b8:	00db      	lsls	r3, r3, #3
 80029ba:	449d      	add	sp, r3
 80029bc:	bd80      	pop	{r7, pc}
		if (temp_buf[i] != 0) return 0;	// Break on the first non-zero value
 80029be:	2000      	movs	r0, #0
 80029c0:	e7f9      	b.n	80029b6 <flash_check_is_empty+0x36>
 80029c2:	46c0      	nop			@ (mov r8, r8)
 80029c4:	fffffc00 	.word	0xfffffc00
 80029c8:	08080000 	.word	0x08080000

080029cc <flash_write>:
static int flash_write(uint32_t dest, int* src, uint32_t size) {
 80029cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80029ce:	0006      	movs	r6, r0
 80029d0:	000f      	movs	r7, r1
 80029d2:	0014      	movs	r4, r2
	status = HAL_FLASHEx_DATAEEPROM_Unlock();
 80029d4:	f7fe fd1c 	bl	8001410 <HAL_FLASHEx_DATAEEPROM_Unlock>
	if (status != HAL_OK) return status;
 80029d8:	2800      	cmp	r0, #0
 80029da:	d119      	bne.n	8002a10 <flash_write+0x44>
 80029dc:	00a4      	lsls	r4, r4, #2
 80029de:	19a3      	adds	r3, r4, r6
 80029e0:	0034      	movs	r4, r6
 80029e2:	9301      	str	r3, [sp, #4]
	for (int i = 0; i < size; ++i) {
 80029e4:	9b01      	ldr	r3, [sp, #4]
 80029e6:	42a3      	cmp	r3, r4
 80029e8:	d101      	bne.n	80029ee <flash_write+0x22>
 80029ea:	2500      	movs	r5, #0
 80029ec:	e00d      	b.n	8002a0a <flash_write+0x3e>
		status += HAL_FLASHEx_DATAEEPROM_Erase(dest + 4*i);
 80029ee:	0020      	movs	r0, r4
 80029f0:	f7fe fd30 	bl	8001454 <HAL_FLASHEx_DATAEEPROM_Erase>
		status += HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_WORD, dest + 4*i, src[i]);
 80029f4:	1bbb      	subs	r3, r7, r6
		status += HAL_FLASHEx_DATAEEPROM_Erase(dest + 4*i);
 80029f6:	0005      	movs	r5, r0
		status += HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_WORD, dest + 4*i, src[i]);
 80029f8:	0021      	movs	r1, r4
 80029fa:	591a      	ldr	r2, [r3, r4]
 80029fc:	2002      	movs	r0, #2
 80029fe:	f7fe fd3b 	bl	8001478 <HAL_FLASHEx_DATAEEPROM_Program>
 8002a02:	182d      	adds	r5, r5, r0
		if (status != HAL_OK) break;
 8002a04:	3404      	adds	r4, #4
 8002a06:	2d00      	cmp	r5, #0
 8002a08:	d0ec      	beq.n	80029e4 <flash_write+0x18>
	status += HAL_FLASHEx_DATAEEPROM_Lock();
 8002a0a:	f7fe fd19 	bl	8001440 <HAL_FLASHEx_DATAEEPROM_Lock>
 8002a0e:	1940      	adds	r0, r0, r5
}
 8002a10:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

08002a14 <settings_read>:
#endif

void settings_read(Setting_TypeDef *s_ptr) {
	assert_param(s_ptr == NULL);

	int temp_buffer[TEMP_BUF_SIZE] = {0};
 8002a14:	22c8      	movs	r2, #200	@ 0xc8
void settings_read(Setting_TypeDef *s_ptr) {
 8002a16:	b530      	push	{r4, r5, lr}
 8002a18:	4c0e      	ldr	r4, [pc, #56]	@ (8002a54 <settings_read+0x40>)
	int temp_buffer[TEMP_BUF_SIZE] = {0};
 8002a1a:	2100      	movs	r1, #0
void settings_read(Setting_TypeDef *s_ptr) {
 8002a1c:	44a5      	add	sp, r4
	int temp_buffer[TEMP_BUF_SIZE] = {0};
 8002a1e:	0092      	lsls	r2, r2, #2
void settings_read(Setting_TypeDef *s_ptr) {
 8002a20:	0004      	movs	r4, r0
	int temp_buffer[TEMP_BUF_SIZE] = {0};
 8002a22:	4668      	mov	r0, sp
 8002a24:	f000 f8de 	bl	8002be4 <memset>

	/* Copy all settings (N x uint32_t) from FLASH to the buffer */
	flash_read(temp_buffer, ADDR_SETTINGS, num_of_settings);
 8002a28:	4b0b      	ldr	r3, [pc, #44]	@ (8002a58 <settings_read+0x44>)
 8002a2a:	4668      	mov	r0, sp
 8002a2c:	681d      	ldr	r5, [r3, #0]
 8002a2e:	490b      	ldr	r1, [pc, #44]	@ (8002a5c <settings_read+0x48>)
 8002a30:	002a      	movs	r2, r5
 8002a32:	f7ff ff9b 	bl	800296c <flash_read>

	/* Transfer them to the structures */
	for (Settings_IDs id = 0; id < num_of_settings; ++id)
 8002a36:	2300      	movs	r3, #0
 8002a38:	429d      	cmp	r5, r3
 8002a3a:	d803      	bhi.n	8002a44 <settings_read+0x30>
		s_ptr->val = temp_buffer[id];
}
 8002a3c:	23c9      	movs	r3, #201	@ 0xc9
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	449d      	add	sp, r3
 8002a42:	bd30      	pop	{r4, r5, pc}
		s_ptr->val = temp_buffer[id];
 8002a44:	4669      	mov	r1, sp
 8002a46:	009a      	lsls	r2, r3, #2
 8002a48:	588a      	ldr	r2, [r1, r2]
	for (Settings_IDs id = 0; id < num_of_settings; ++id)
 8002a4a:	3301      	adds	r3, #1
		s_ptr->val = temp_buffer[id];
 8002a4c:	6062      	str	r2, [r4, #4]
	for (Settings_IDs id = 0; id < num_of_settings; ++id)
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	e7f2      	b.n	8002a38 <settings_read+0x24>
 8002a52:	46c0      	nop			@ (mov r8, r8)
 8002a54:	fffffcdc 	.word	0xfffffcdc
 8002a58:	200008d0 	.word	0x200008d0
 8002a5c:	08080010 	.word	0x08080010

08002a60 <settings_write>:

int settings_write(Setting_TypeDef *s_ptr) {
	assert_param(s_ptr == NULL);

	int	status = 0;
	int temp_buffer[TEMP_BUF_SIZE] = {0};
 8002a60:	22c8      	movs	r2, #200	@ 0xc8
int settings_write(Setting_TypeDef *s_ptr) {
 8002a62:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a64:	4c1a      	ldr	r4, [pc, #104]	@ (8002ad0 <settings_write+0x70>)
 8002a66:	0005      	movs	r5, r0
 8002a68:	44a5      	add	sp, r4
	int temp_buffer[TEMP_BUF_SIZE] = {0};
 8002a6a:	2100      	movs	r1, #0
 8002a6c:	0092      	lsls	r2, r2, #2
 8002a6e:	4668      	mov	r0, sp
 8002a70:	f000 f8b8 	bl	8002be4 <memset>

	/* Copy values to the temp buffer */
	for (int i = 0; i < num_of_settings; ++i) {
 8002a74:	2200      	movs	r2, #0
 8002a76:	4e17      	ldr	r6, [pc, #92]	@ (8002ad4 <settings_write+0x74>)
		temp_buffer[i] = s_ptr[i].val;
 8002a78:	1d29      	adds	r1, r5, #4
	for (int i = 0; i < num_of_settings; ++i) {
 8002a7a:	6833      	ldr	r3, [r6, #0]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d114      	bne.n	8002aaa <settings_write+0x4a>
	}

	/* Write from temp buffer to the FLASH memory */
	status = flash_write(ADDR_SETTINGS, temp_buffer, num_of_settings);
 8002a80:	4669      	mov	r1, sp
 8002a82:	4815      	ldr	r0, [pc, #84]	@ (8002ad8 <settings_write+0x78>)
 8002a84:	f7ff ffa2 	bl	80029cc <flash_write>
 8002a88:	1e04      	subs	r4, r0, #0
	if(status != 0) return status;
 8002a8a:	d109      	bne.n	8002aa0 <settings_write+0x40>
	/*
	 * Check Read:
	 * Copy from memory to the temp again
	 * and compare with values in structures
	 */
	flash_read(temp_buffer, ADDR_SETTINGS, num_of_settings);
 8002a8c:	6836      	ldr	r6, [r6, #0]
 8002a8e:	4668      	mov	r0, sp
 8002a90:	0032      	movs	r2, r6
 8002a92:	4911      	ldr	r1, [pc, #68]	@ (8002ad8 <settings_write+0x78>)
 8002a94:	f7ff ff6a 	bl	800296c <flash_read>

	for (int i = 0; i < num_of_settings; ++i) {
 8002a98:	0023      	movs	r3, r4
		if (temp_buffer[i] != s_ptr[i].val) ++status;
 8002a9a:	3504      	adds	r5, #4
	for (int i = 0; i < num_of_settings; ++i) {
 8002a9c:	42b3      	cmp	r3, r6
 8002a9e:	d10b      	bne.n	8002ab8 <settings_write+0x58>
	}

	/* If both data match, then status == 0 (everything is ok, return 0) */
	return status;
}
 8002aa0:	0020      	movs	r0, r4
 8002aa2:	23c9      	movs	r3, #201	@ 0xc9
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	449d      	add	sp, r3
 8002aa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		temp_buffer[i] = s_ptr[i].val;
 8002aaa:	466f      	mov	r7, sp
 8002aac:	0154      	lsls	r4, r2, #5
 8002aae:	590c      	ldr	r4, [r1, r4]
 8002ab0:	0090      	lsls	r0, r2, #2
 8002ab2:	503c      	str	r4, [r7, r0]
	for (int i = 0; i < num_of_settings; ++i) {
 8002ab4:	3201      	adds	r2, #1
 8002ab6:	e7e1      	b.n	8002a7c <settings_write+0x1c>
		if (temp_buffer[i] != s_ptr[i].val) ++status;
 8002ab8:	4668      	mov	r0, sp
 8002aba:	009a      	lsls	r2, r3, #2
 8002abc:	0159      	lsls	r1, r3, #5
 8002abe:	5869      	ldr	r1, [r5, r1]
 8002ac0:	5882      	ldr	r2, [r0, r2]
	for (int i = 0; i < num_of_settings; ++i) {
 8002ac2:	3301      	adds	r3, #1
		if (temp_buffer[i] != s_ptr[i].val) ++status;
 8002ac4:	1a52      	subs	r2, r2, r1
 8002ac6:	1e51      	subs	r1, r2, #1
 8002ac8:	418a      	sbcs	r2, r1
 8002aca:	18a4      	adds	r4, r4, r2
	for (int i = 0; i < num_of_settings; ++i) {
 8002acc:	e7e6      	b.n	8002a9c <settings_write+0x3c>
 8002ace:	46c0      	nop			@ (mov r8, r8)
 8002ad0:	fffffcdc 	.word	0xfffffcdc
 8002ad4:	200008d0 	.word	0x200008d0
 8002ad8:	08080010 	.word	0x08080010

08002adc <settings_value_reset_all>:
 * @param  *s_ptr:
 * @retval returns -2 if ID is not found; -1 if s_ptr is NULL; 0 if OK.
 */
void settings_value_reset_all(Setting_TypeDef *s_ptr) {
	assert_param(s_ptr == NULL);
	for (int i = 0; i < NUM_OF_SETTINGS; ++i)
 8002adc:	1d03      	adds	r3, r0, #4
 8002ade:	30a4      	adds	r0, #164	@ 0xa4
		s_ptr[i].val = s_ptr[i].def;
 8002ae0:	685a      	ldr	r2, [r3, #4]
 8002ae2:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < NUM_OF_SETTINGS; ++i)
 8002ae4:	3320      	adds	r3, #32
 8002ae6:	4283      	cmp	r3, r0
 8002ae8:	d1fa      	bne.n	8002ae0 <settings_value_reset_all+0x4>
}
 8002aea:	4770      	bx	lr

08002aec <settings_init>:
Settings_Status settings_init(Setting_TypeDef *s_ptr, uint16_t number_of_settings) {
 8002aec:	b5f0      	push	{r4, r5, r6, r7, lr}
	num_of_settings = number_of_settings;
 8002aee:	4f37      	ldr	r7, [pc, #220]	@ (8002bcc <settings_init+0xe0>)
Settings_Status settings_init(Setting_TypeDef *s_ptr, uint16_t number_of_settings) {
 8002af0:	b089      	sub	sp, #36	@ 0x24
 8002af2:	0004      	movs	r4, r0
 8002af4:	9101      	str	r1, [sp, #4]
	num_of_settings = number_of_settings;
 8002af6:	6039      	str	r1, [r7, #0]
	volatile uint8_t is_empty = flash_check_is_empty();
 8002af8:	f7ff ff42 	bl	8002980 <flash_check_is_empty>
 8002afc:	ab02      	add	r3, sp, #8
 8002afe:	b2c0      	uxtb	r0, r0
 8002b00:	7098      	strb	r0, [r3, #2]
 8002b02:	3302      	adds	r3, #2
	if (is_empty) {
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	b2dd      	uxtb	r5, r3
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d15a      	bne.n	8002bc2 <settings_init+0xd6>
	return *( (volatile uint32_t*)ADDR_DEVICE_ID );
 8002b0c:	4b30      	ldr	r3, [pc, #192]	@ (8002bd0 <settings_init+0xe4>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
		volatile uint32_t id 	= device_id_read	();
 8002b10:	9303      	str	r3, [sp, #12]
    return *( (volatile uint32_t*)ADDR_DEVICE_FW );
 8002b12:	4b30      	ldr	r3, [pc, #192]	@ (8002bd4 <settings_init+0xe8>)
 8002b14:	681b      	ldr	r3, [r3, #0]
		volatile uint32_t fw 	= device_fw_read	();
 8002b16:	9304      	str	r3, [sp, #16]
	return *( (volatile uint32_t*)ADDR_SETTINGS_SIZE );
 8002b18:	4b2f      	ldr	r3, [pc, #188]	@ (8002bd8 <settings_init+0xec>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
		volatile uint32_t size 	= settings_size_read();
 8002b1c:	9305      	str	r3, [sp, #20]
		if (id == DEVICE_ID && size == num_of_settings && fw >= DEVICE_FW_MIN) {
 8002b1e:	9b03      	ldr	r3, [sp, #12]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d150      	bne.n	8002bc6 <settings_init+0xda>
 8002b24:	9b05      	ldr	r3, [sp, #20]
 8002b26:	9a01      	ldr	r2, [sp, #4]
			status |= (ID_WRONG | SIZE_WRONG);
 8002b28:	2644      	movs	r6, #68	@ 0x44
		if (id == DEVICE_ID && size == num_of_settings && fw >= DEVICE_FW_MIN) {
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d116      	bne.n	8002b5c <settings_init+0x70>
 8002b2e:	2380      	movs	r3, #128	@ 0x80
 8002b30:	9a04      	ldr	r2, [sp, #16]
 8002b32:	045b      	lsls	r3, r3, #17
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d311      	bcc.n	8002b5c <settings_init+0x70>
			settings_read(s_ptr);
 8002b38:	0020      	movs	r0, r4
 8002b3a:	f7ff ff6b 	bl	8002a14 <settings_read>
	for (Settings_IDs id = 0; id < num_of_settings; ++id) {
 8002b3e:	002b      	movs	r3, r5
 8002b40:	9a01      	ldr	r2, [sp, #4]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d82f      	bhi.n	8002ba6 <settings_init+0xba>
	if(non_valid_values > 0) return 0;
 8002b46:	426b      	negs	r3, r5
 8002b48:	415d      	adcs	r5, r3
	Settings_Status status 					= 0;
 8002b4a:	2600      	movs	r6, #0
			volatile uint8_t is_valid = settings_check_is_valid(s_ptr);
 8002b4c:	ab02      	add	r3, sp, #8
	if(non_valid_values > 0) return 0;
 8002b4e:	b2ed      	uxtb	r5, r5
			volatile uint8_t is_valid = settings_check_is_valid(s_ptr);
 8002b50:	70dd      	strb	r5, [r3, #3]
 8002b52:	3303      	adds	r3, #3
			if (!is_valid) {
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	42b3      	cmp	r3, r6
 8002b58:	d11e      	bne.n	8002b98 <settings_init+0xac>
				status |= OUT_OF_RANGE;
 8002b5a:	3680      	adds	r6, #128	@ 0x80
		settings_value_reset_all(s_ptr);
 8002b5c:	0020      	movs	r0, r4
 8002b5e:	f7ff ffbd 	bl	8002adc <settings_value_reset_all>
	int data[2] = {((ID1 << 16) | ID2), ((FW1 << 24) | (FW2 << 16) | FW3)};
 8002b62:	2300      	movs	r3, #0
    return flash_write(ADDR_DEVICE_ID, data, 2);
 8002b64:	2202      	movs	r2, #2
	int data[2] = {((ID1 << 16) | ID2), ((FW1 << 24) | (FW2 << 16) | FW3)};
 8002b66:	9306      	str	r3, [sp, #24]
    return flash_write(ADDR_DEVICE_ID, data, 2);
 8002b68:	a906      	add	r1, sp, #24
	int data[2] = {((ID1 << 16) | ID2), ((FW1 << 24) | (FW2 << 16) | FW3)};
 8002b6a:	3305      	adds	r3, #5
    return flash_write(ADDR_DEVICE_ID, data, 2);
 8002b6c:	4818      	ldr	r0, [pc, #96]	@ (8002bd0 <settings_init+0xe4>)
	int data[2] = {((ID1 << 16) | ID2), ((FW1 << 24) | (FW2 << 16) | FW3)};
 8002b6e:	9307      	str	r3, [sp, #28]
    return flash_write(ADDR_DEVICE_ID, data, 2);
 8002b70:	f7ff ff2c 	bl	80029cc <flash_write>
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	0005      	movs	r5, r0
	return flash_write(ADDR_SETTINGS_SIZE, &size, 1);
 8002b78:	2201      	movs	r2, #1
 8002b7a:	a906      	add	r1, sp, #24
 8002b7c:	4816      	ldr	r0, [pc, #88]	@ (8002bd8 <settings_init+0xec>)
 8002b7e:	9306      	str	r3, [sp, #24]
 8002b80:	f7ff ff24 	bl	80029cc <flash_write>
		res += settings_size_write	(num_of_settings); // What if size will overlay RTC values?
 8002b84:	1945      	adds	r5, r0, r5
		res += settings_write		(s_ptr);
 8002b86:	0020      	movs	r0, r4
 8002b88:	f7ff ff6a 	bl	8002a60 <settings_write>
 8002b8c:	182d      	adds	r5, r5, r0
		if (res > 0) status |= WRITE_FAIL;
 8002b8e:	2d00      	cmp	r5, #0
 8002b90:	dd02      	ble.n	8002b98 <settings_init+0xac>
 8002b92:	2380      	movs	r3, #128	@ 0x80
 8002b94:	005b      	lsls	r3, r3, #1
 8002b96:	431e      	orrs	r6, r3
};
 8002b98:	0030      	movs	r0, r6
		previous_running_time = *( (volatile uint32_t*)ADDR_DEVICE_RT );
 8002b9a:	4b10      	ldr	r3, [pc, #64]	@ (8002bdc <settings_init+0xf0>)
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	4b10      	ldr	r3, [pc, #64]	@ (8002be0 <settings_init+0xf4>)
 8002ba0:	601a      	str	r2, [r3, #0]
};
 8002ba2:	b009      	add	sp, #36	@ 0x24
 8002ba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(s_ptr->val > s_ptr->max || s_ptr->val < s_ptr->min) {
 8002ba6:	6862      	ldr	r2, [r4, #4]
 8002ba8:	6961      	ldr	r1, [r4, #20]
 8002baa:	428a      	cmp	r2, r1
 8002bac:	dc02      	bgt.n	8002bb4 <settings_init+0xc8>
 8002bae:	6921      	ldr	r1, [r4, #16]
 8002bb0:	428a      	cmp	r2, r1
 8002bb2:	da03      	bge.n	8002bbc <settings_init+0xd0>
			s_ptr->val = s_ptr->def;
 8002bb4:	68a2      	ldr	r2, [r4, #8]
			++non_valid_values;
 8002bb6:	3501      	adds	r5, #1
			s_ptr->val = s_ptr->def;
 8002bb8:	6062      	str	r2, [r4, #4]
			++non_valid_values;
 8002bba:	b2ed      	uxtb	r5, r5
	for (Settings_IDs id = 0; id < num_of_settings; ++id) {
 8002bbc:	3301      	adds	r3, #1
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	e7be      	b.n	8002b40 <settings_init+0x54>
		status |= FLASH_EMPTY;
 8002bc2:	2602      	movs	r6, #2
 8002bc4:	e7ca      	b.n	8002b5c <settings_init+0x70>
			status |= (ID_WRONG | SIZE_WRONG);
 8002bc6:	2644      	movs	r6, #68	@ 0x44
 8002bc8:	e7c8      	b.n	8002b5c <settings_init+0x70>
 8002bca:	46c0      	nop			@ (mov r8, r8)
 8002bcc:	200008d0 	.word	0x200008d0
 8002bd0:	08080000 	.word	0x08080000
 8002bd4:	08080004 	.word	0x08080004
 8002bd8:	0808000c 	.word	0x0808000c
 8002bdc:	08080008 	.word	0x08080008
 8002be0:	200008cc 	.word	0x200008cc

08002be4 <memset>:
 8002be4:	0003      	movs	r3, r0
 8002be6:	1882      	adds	r2, r0, r2
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d100      	bne.n	8002bee <memset+0xa>
 8002bec:	4770      	bx	lr
 8002bee:	7019      	strb	r1, [r3, #0]
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	e7f9      	b.n	8002be8 <memset+0x4>

08002bf4 <__libc_init_array>:
 8002bf4:	b570      	push	{r4, r5, r6, lr}
 8002bf6:	2600      	movs	r6, #0
 8002bf8:	4c0c      	ldr	r4, [pc, #48]	@ (8002c2c <__libc_init_array+0x38>)
 8002bfa:	4d0d      	ldr	r5, [pc, #52]	@ (8002c30 <__libc_init_array+0x3c>)
 8002bfc:	1b64      	subs	r4, r4, r5
 8002bfe:	10a4      	asrs	r4, r4, #2
 8002c00:	42a6      	cmp	r6, r4
 8002c02:	d109      	bne.n	8002c18 <__libc_init_array+0x24>
 8002c04:	2600      	movs	r6, #0
 8002c06:	f000 f819 	bl	8002c3c <_init>
 8002c0a:	4c0a      	ldr	r4, [pc, #40]	@ (8002c34 <__libc_init_array+0x40>)
 8002c0c:	4d0a      	ldr	r5, [pc, #40]	@ (8002c38 <__libc_init_array+0x44>)
 8002c0e:	1b64      	subs	r4, r4, r5
 8002c10:	10a4      	asrs	r4, r4, #2
 8002c12:	42a6      	cmp	r6, r4
 8002c14:	d105      	bne.n	8002c22 <__libc_init_array+0x2e>
 8002c16:	bd70      	pop	{r4, r5, r6, pc}
 8002c18:	00b3      	lsls	r3, r6, #2
 8002c1a:	58eb      	ldr	r3, [r5, r3]
 8002c1c:	4798      	blx	r3
 8002c1e:	3601      	adds	r6, #1
 8002c20:	e7ee      	b.n	8002c00 <__libc_init_array+0xc>
 8002c22:	00b3      	lsls	r3, r6, #2
 8002c24:	58eb      	ldr	r3, [r5, r3]
 8002c26:	4798      	blx	r3
 8002c28:	3601      	adds	r6, #1
 8002c2a:	e7f2      	b.n	8002c12 <__libc_init_array+0x1e>
 8002c2c:	08002ca0 	.word	0x08002ca0
 8002c30:	08002ca0 	.word	0x08002ca0
 8002c34:	08002ca4 	.word	0x08002ca4
 8002c38:	08002ca0 	.word	0x08002ca0

08002c3c <_init>:
 8002c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c3e:	46c0      	nop			@ (mov r8, r8)
 8002c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c42:	bc08      	pop	{r3}
 8002c44:	469e      	mov	lr, r3
 8002c46:	4770      	bx	lr

08002c48 <_fini>:
 8002c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c4a:	46c0      	nop			@ (mov r8, r8)
 8002c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c4e:	bc08      	pop	{r3}
 8002c50:	469e      	mov	lr, r3
 8002c52:	4770      	bx	lr
