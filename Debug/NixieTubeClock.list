
NixieTubeClock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a3c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08005afc  08005afc  00006afc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005bb4  08005bb4  00007860  2**0
                  CONTENTS
  4 .ARM          00000008  08005bb4  08005bb4  00006bb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005bbc  08005bbc  00007860  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005bbc  08005bbc  00006bbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005bc0  08005bc0  00006bc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000860  20000000  08005bc4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000cac  20000860  08006424  00007860  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000150c  08006424  0000850c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00007860  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e7a1  00000000  00000000  00007888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000043b9  00000000  00000000  00026029  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000cab3  00000000  00000000  0002a3e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001348  00000000  00000000  00036e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010ae  00000000  00000000  000381e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015081  00000000  00000000  0003928e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021363  00000000  00000000  0004e30f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00077d33  00000000  00000000  0006f672  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000e73a5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000035e8  00000000  00000000  000e73e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000058  00000000  00000000  000ea9d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000860 	.word	0x20000860
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005ae4 	.word	0x08005ae4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000864 	.word	0x20000864
 8000104:	08005ae4 	.word	0x08005ae4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <__aeabi_cfrcmple>:
 80003f4:	4684      	mov	ip, r0
 80003f6:	0008      	movs	r0, r1
 80003f8:	4661      	mov	r1, ip
 80003fa:	e7ff      	b.n	80003fc <__aeabi_cfcmpeq>

080003fc <__aeabi_cfcmpeq>:
 80003fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80003fe:	f000 f9dd 	bl	80007bc <__lesf2>
 8000402:	2800      	cmp	r0, #0
 8000404:	d401      	bmi.n	800040a <__aeabi_cfcmpeq+0xe>
 8000406:	2100      	movs	r1, #0
 8000408:	42c8      	cmn	r0, r1
 800040a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800040c <__aeabi_fcmpeq>:
 800040c:	b510      	push	{r4, lr}
 800040e:	f000 f95d 	bl	80006cc <__eqsf2>
 8000412:	4240      	negs	r0, r0
 8000414:	3001      	adds	r0, #1
 8000416:	bd10      	pop	{r4, pc}

08000418 <__aeabi_fcmplt>:
 8000418:	b510      	push	{r4, lr}
 800041a:	f000 f9cf 	bl	80007bc <__lesf2>
 800041e:	2800      	cmp	r0, #0
 8000420:	db01      	blt.n	8000426 <__aeabi_fcmplt+0xe>
 8000422:	2000      	movs	r0, #0
 8000424:	bd10      	pop	{r4, pc}
 8000426:	2001      	movs	r0, #1
 8000428:	bd10      	pop	{r4, pc}
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_fcmple>:
 800042c:	b510      	push	{r4, lr}
 800042e:	f000 f9c5 	bl	80007bc <__lesf2>
 8000432:	2800      	cmp	r0, #0
 8000434:	dd01      	ble.n	800043a <__aeabi_fcmple+0xe>
 8000436:	2000      	movs	r0, #0
 8000438:	bd10      	pop	{r4, pc}
 800043a:	2001      	movs	r0, #1
 800043c:	bd10      	pop	{r4, pc}
 800043e:	46c0      	nop			@ (mov r8, r8)

08000440 <__aeabi_fcmpgt>:
 8000440:	b510      	push	{r4, lr}
 8000442:	f000 f96b 	bl	800071c <__gesf2>
 8000446:	2800      	cmp	r0, #0
 8000448:	dc01      	bgt.n	800044e <__aeabi_fcmpgt+0xe>
 800044a:	2000      	movs	r0, #0
 800044c:	bd10      	pop	{r4, pc}
 800044e:	2001      	movs	r0, #1
 8000450:	bd10      	pop	{r4, pc}
 8000452:	46c0      	nop			@ (mov r8, r8)

08000454 <__aeabi_fcmpge>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f000 f961 	bl	800071c <__gesf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	da01      	bge.n	8000462 <__aeabi_fcmpge+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			@ (mov r8, r8)

08000468 <__aeabi_uldivmod>:
 8000468:	2b00      	cmp	r3, #0
 800046a:	d111      	bne.n	8000490 <__aeabi_uldivmod+0x28>
 800046c:	2a00      	cmp	r2, #0
 800046e:	d10f      	bne.n	8000490 <__aeabi_uldivmod+0x28>
 8000470:	2900      	cmp	r1, #0
 8000472:	d100      	bne.n	8000476 <__aeabi_uldivmod+0xe>
 8000474:	2800      	cmp	r0, #0
 8000476:	d002      	beq.n	800047e <__aeabi_uldivmod+0x16>
 8000478:	2100      	movs	r1, #0
 800047a:	43c9      	mvns	r1, r1
 800047c:	0008      	movs	r0, r1
 800047e:	b407      	push	{r0, r1, r2}
 8000480:	4802      	ldr	r0, [pc, #8]	@ (800048c <__aeabi_uldivmod+0x24>)
 8000482:	a102      	add	r1, pc, #8	@ (adr r1, 800048c <__aeabi_uldivmod+0x24>)
 8000484:	1840      	adds	r0, r0, r1
 8000486:	9002      	str	r0, [sp, #8]
 8000488:	bd03      	pop	{r0, r1, pc}
 800048a:	46c0      	nop			@ (mov r8, r8)
 800048c:	ffffff65 	.word	0xffffff65
 8000490:	b403      	push	{r0, r1}
 8000492:	4668      	mov	r0, sp
 8000494:	b501      	push	{r0, lr}
 8000496:	9802      	ldr	r0, [sp, #8]
 8000498:	f000 f84c 	bl	8000534 <__udivmoddi4>
 800049c:	9b01      	ldr	r3, [sp, #4]
 800049e:	469e      	mov	lr, r3
 80004a0:	b002      	add	sp, #8
 80004a2:	bc0c      	pop	{r2, r3}
 80004a4:	4770      	bx	lr
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_lmul>:
 80004a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004aa:	46ce      	mov	lr, r9
 80004ac:	4699      	mov	r9, r3
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	469c      	mov	ip, r3
 80004b2:	0413      	lsls	r3, r2, #16
 80004b4:	4647      	mov	r7, r8
 80004b6:	0c1b      	lsrs	r3, r3, #16
 80004b8:	001d      	movs	r5, r3
 80004ba:	000e      	movs	r6, r1
 80004bc:	4661      	mov	r1, ip
 80004be:	0404      	lsls	r4, r0, #16
 80004c0:	0c24      	lsrs	r4, r4, #16
 80004c2:	b580      	push	{r7, lr}
 80004c4:	0007      	movs	r7, r0
 80004c6:	0c10      	lsrs	r0, r2, #16
 80004c8:	434b      	muls	r3, r1
 80004ca:	4365      	muls	r5, r4
 80004cc:	4341      	muls	r1, r0
 80004ce:	4360      	muls	r0, r4
 80004d0:	0c2c      	lsrs	r4, r5, #16
 80004d2:	18c0      	adds	r0, r0, r3
 80004d4:	1824      	adds	r4, r4, r0
 80004d6:	468c      	mov	ip, r1
 80004d8:	42a3      	cmp	r3, r4
 80004da:	d903      	bls.n	80004e4 <__aeabi_lmul+0x3c>
 80004dc:	2380      	movs	r3, #128	@ 0x80
 80004de:	025b      	lsls	r3, r3, #9
 80004e0:	4698      	mov	r8, r3
 80004e2:	44c4      	add	ip, r8
 80004e4:	4649      	mov	r1, r9
 80004e6:	4379      	muls	r1, r7
 80004e8:	4356      	muls	r6, r2
 80004ea:	0c23      	lsrs	r3, r4, #16
 80004ec:	042d      	lsls	r5, r5, #16
 80004ee:	0c2d      	lsrs	r5, r5, #16
 80004f0:	1989      	adds	r1, r1, r6
 80004f2:	4463      	add	r3, ip
 80004f4:	0424      	lsls	r4, r4, #16
 80004f6:	1960      	adds	r0, r4, r5
 80004f8:	18c9      	adds	r1, r1, r3
 80004fa:	bcc0      	pop	{r6, r7}
 80004fc:	46b9      	mov	r9, r7
 80004fe:	46b0      	mov	r8, r6
 8000500:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000502:	46c0      	nop			@ (mov r8, r8)

08000504 <__aeabi_f2uiz>:
 8000504:	219e      	movs	r1, #158	@ 0x9e
 8000506:	b510      	push	{r4, lr}
 8000508:	05c9      	lsls	r1, r1, #23
 800050a:	1c04      	adds	r4, r0, #0
 800050c:	f7ff ffa2 	bl	8000454 <__aeabi_fcmpge>
 8000510:	2800      	cmp	r0, #0
 8000512:	d103      	bne.n	800051c <__aeabi_f2uiz+0x18>
 8000514:	1c20      	adds	r0, r4, #0
 8000516:	f000 fc81 	bl	8000e1c <__aeabi_f2iz>
 800051a:	bd10      	pop	{r4, pc}
 800051c:	219e      	movs	r1, #158	@ 0x9e
 800051e:	1c20      	adds	r0, r4, #0
 8000520:	05c9      	lsls	r1, r1, #23
 8000522:	f000 fad7 	bl	8000ad4 <__aeabi_fsub>
 8000526:	f000 fc79 	bl	8000e1c <__aeabi_f2iz>
 800052a:	2380      	movs	r3, #128	@ 0x80
 800052c:	061b      	lsls	r3, r3, #24
 800052e:	469c      	mov	ip, r3
 8000530:	4460      	add	r0, ip
 8000532:	e7f2      	b.n	800051a <__aeabi_f2uiz+0x16>

08000534 <__udivmoddi4>:
 8000534:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000536:	4657      	mov	r7, sl
 8000538:	464e      	mov	r6, r9
 800053a:	4645      	mov	r5, r8
 800053c:	46de      	mov	lr, fp
 800053e:	b5e0      	push	{r5, r6, r7, lr}
 8000540:	0004      	movs	r4, r0
 8000542:	000d      	movs	r5, r1
 8000544:	4692      	mov	sl, r2
 8000546:	4699      	mov	r9, r3
 8000548:	b083      	sub	sp, #12
 800054a:	428b      	cmp	r3, r1
 800054c:	d830      	bhi.n	80005b0 <__udivmoddi4+0x7c>
 800054e:	d02d      	beq.n	80005ac <__udivmoddi4+0x78>
 8000550:	4649      	mov	r1, r9
 8000552:	4650      	mov	r0, sl
 8000554:	f001 f81a 	bl	800158c <__clzdi2>
 8000558:	0029      	movs	r1, r5
 800055a:	0006      	movs	r6, r0
 800055c:	0020      	movs	r0, r4
 800055e:	f001 f815 	bl	800158c <__clzdi2>
 8000562:	1a33      	subs	r3, r6, r0
 8000564:	4698      	mov	r8, r3
 8000566:	3b20      	subs	r3, #32
 8000568:	d434      	bmi.n	80005d4 <__udivmoddi4+0xa0>
 800056a:	469b      	mov	fp, r3
 800056c:	4653      	mov	r3, sl
 800056e:	465a      	mov	r2, fp
 8000570:	4093      	lsls	r3, r2
 8000572:	4642      	mov	r2, r8
 8000574:	001f      	movs	r7, r3
 8000576:	4653      	mov	r3, sl
 8000578:	4093      	lsls	r3, r2
 800057a:	001e      	movs	r6, r3
 800057c:	42af      	cmp	r7, r5
 800057e:	d83b      	bhi.n	80005f8 <__udivmoddi4+0xc4>
 8000580:	42af      	cmp	r7, r5
 8000582:	d100      	bne.n	8000586 <__udivmoddi4+0x52>
 8000584:	e079      	b.n	800067a <__udivmoddi4+0x146>
 8000586:	465b      	mov	r3, fp
 8000588:	1ba4      	subs	r4, r4, r6
 800058a:	41bd      	sbcs	r5, r7
 800058c:	2b00      	cmp	r3, #0
 800058e:	da00      	bge.n	8000592 <__udivmoddi4+0x5e>
 8000590:	e076      	b.n	8000680 <__udivmoddi4+0x14c>
 8000592:	2200      	movs	r2, #0
 8000594:	2300      	movs	r3, #0
 8000596:	9200      	str	r2, [sp, #0]
 8000598:	9301      	str	r3, [sp, #4]
 800059a:	2301      	movs	r3, #1
 800059c:	465a      	mov	r2, fp
 800059e:	4093      	lsls	r3, r2
 80005a0:	9301      	str	r3, [sp, #4]
 80005a2:	2301      	movs	r3, #1
 80005a4:	4642      	mov	r2, r8
 80005a6:	4093      	lsls	r3, r2
 80005a8:	9300      	str	r3, [sp, #0]
 80005aa:	e029      	b.n	8000600 <__udivmoddi4+0xcc>
 80005ac:	4282      	cmp	r2, r0
 80005ae:	d9cf      	bls.n	8000550 <__udivmoddi4+0x1c>
 80005b0:	2200      	movs	r2, #0
 80005b2:	2300      	movs	r3, #0
 80005b4:	9200      	str	r2, [sp, #0]
 80005b6:	9301      	str	r3, [sp, #4]
 80005b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <__udivmoddi4+0x8e>
 80005be:	601c      	str	r4, [r3, #0]
 80005c0:	605d      	str	r5, [r3, #4]
 80005c2:	9800      	ldr	r0, [sp, #0]
 80005c4:	9901      	ldr	r1, [sp, #4]
 80005c6:	b003      	add	sp, #12
 80005c8:	bcf0      	pop	{r4, r5, r6, r7}
 80005ca:	46bb      	mov	fp, r7
 80005cc:	46b2      	mov	sl, r6
 80005ce:	46a9      	mov	r9, r5
 80005d0:	46a0      	mov	r8, r4
 80005d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005d4:	4642      	mov	r2, r8
 80005d6:	469b      	mov	fp, r3
 80005d8:	2320      	movs	r3, #32
 80005da:	1a9b      	subs	r3, r3, r2
 80005dc:	4652      	mov	r2, sl
 80005de:	40da      	lsrs	r2, r3
 80005e0:	4641      	mov	r1, r8
 80005e2:	0013      	movs	r3, r2
 80005e4:	464a      	mov	r2, r9
 80005e6:	408a      	lsls	r2, r1
 80005e8:	0017      	movs	r7, r2
 80005ea:	4642      	mov	r2, r8
 80005ec:	431f      	orrs	r7, r3
 80005ee:	4653      	mov	r3, sl
 80005f0:	4093      	lsls	r3, r2
 80005f2:	001e      	movs	r6, r3
 80005f4:	42af      	cmp	r7, r5
 80005f6:	d9c3      	bls.n	8000580 <__udivmoddi4+0x4c>
 80005f8:	2200      	movs	r2, #0
 80005fa:	2300      	movs	r3, #0
 80005fc:	9200      	str	r2, [sp, #0]
 80005fe:	9301      	str	r3, [sp, #4]
 8000600:	4643      	mov	r3, r8
 8000602:	2b00      	cmp	r3, #0
 8000604:	d0d8      	beq.n	80005b8 <__udivmoddi4+0x84>
 8000606:	07fb      	lsls	r3, r7, #31
 8000608:	0872      	lsrs	r2, r6, #1
 800060a:	431a      	orrs	r2, r3
 800060c:	4646      	mov	r6, r8
 800060e:	087b      	lsrs	r3, r7, #1
 8000610:	e00e      	b.n	8000630 <__udivmoddi4+0xfc>
 8000612:	42ab      	cmp	r3, r5
 8000614:	d101      	bne.n	800061a <__udivmoddi4+0xe6>
 8000616:	42a2      	cmp	r2, r4
 8000618:	d80c      	bhi.n	8000634 <__udivmoddi4+0x100>
 800061a:	1aa4      	subs	r4, r4, r2
 800061c:	419d      	sbcs	r5, r3
 800061e:	2001      	movs	r0, #1
 8000620:	1924      	adds	r4, r4, r4
 8000622:	416d      	adcs	r5, r5
 8000624:	2100      	movs	r1, #0
 8000626:	3e01      	subs	r6, #1
 8000628:	1824      	adds	r4, r4, r0
 800062a:	414d      	adcs	r5, r1
 800062c:	2e00      	cmp	r6, #0
 800062e:	d006      	beq.n	800063e <__udivmoddi4+0x10a>
 8000630:	42ab      	cmp	r3, r5
 8000632:	d9ee      	bls.n	8000612 <__udivmoddi4+0xde>
 8000634:	3e01      	subs	r6, #1
 8000636:	1924      	adds	r4, r4, r4
 8000638:	416d      	adcs	r5, r5
 800063a:	2e00      	cmp	r6, #0
 800063c:	d1f8      	bne.n	8000630 <__udivmoddi4+0xfc>
 800063e:	9800      	ldr	r0, [sp, #0]
 8000640:	9901      	ldr	r1, [sp, #4]
 8000642:	465b      	mov	r3, fp
 8000644:	1900      	adds	r0, r0, r4
 8000646:	4169      	adcs	r1, r5
 8000648:	2b00      	cmp	r3, #0
 800064a:	db24      	blt.n	8000696 <__udivmoddi4+0x162>
 800064c:	002b      	movs	r3, r5
 800064e:	465a      	mov	r2, fp
 8000650:	4644      	mov	r4, r8
 8000652:	40d3      	lsrs	r3, r2
 8000654:	002a      	movs	r2, r5
 8000656:	40e2      	lsrs	r2, r4
 8000658:	001c      	movs	r4, r3
 800065a:	465b      	mov	r3, fp
 800065c:	0015      	movs	r5, r2
 800065e:	2b00      	cmp	r3, #0
 8000660:	db2a      	blt.n	80006b8 <__udivmoddi4+0x184>
 8000662:	0026      	movs	r6, r4
 8000664:	409e      	lsls	r6, r3
 8000666:	0033      	movs	r3, r6
 8000668:	0026      	movs	r6, r4
 800066a:	4647      	mov	r7, r8
 800066c:	40be      	lsls	r6, r7
 800066e:	0032      	movs	r2, r6
 8000670:	1a80      	subs	r0, r0, r2
 8000672:	4199      	sbcs	r1, r3
 8000674:	9000      	str	r0, [sp, #0]
 8000676:	9101      	str	r1, [sp, #4]
 8000678:	e79e      	b.n	80005b8 <__udivmoddi4+0x84>
 800067a:	42a3      	cmp	r3, r4
 800067c:	d8bc      	bhi.n	80005f8 <__udivmoddi4+0xc4>
 800067e:	e782      	b.n	8000586 <__udivmoddi4+0x52>
 8000680:	4642      	mov	r2, r8
 8000682:	2320      	movs	r3, #32
 8000684:	2100      	movs	r1, #0
 8000686:	1a9b      	subs	r3, r3, r2
 8000688:	2200      	movs	r2, #0
 800068a:	9100      	str	r1, [sp, #0]
 800068c:	9201      	str	r2, [sp, #4]
 800068e:	2201      	movs	r2, #1
 8000690:	40da      	lsrs	r2, r3
 8000692:	9201      	str	r2, [sp, #4]
 8000694:	e785      	b.n	80005a2 <__udivmoddi4+0x6e>
 8000696:	4642      	mov	r2, r8
 8000698:	2320      	movs	r3, #32
 800069a:	1a9b      	subs	r3, r3, r2
 800069c:	002a      	movs	r2, r5
 800069e:	4646      	mov	r6, r8
 80006a0:	409a      	lsls	r2, r3
 80006a2:	0023      	movs	r3, r4
 80006a4:	40f3      	lsrs	r3, r6
 80006a6:	4644      	mov	r4, r8
 80006a8:	4313      	orrs	r3, r2
 80006aa:	002a      	movs	r2, r5
 80006ac:	40e2      	lsrs	r2, r4
 80006ae:	001c      	movs	r4, r3
 80006b0:	465b      	mov	r3, fp
 80006b2:	0015      	movs	r5, r2
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	dad4      	bge.n	8000662 <__udivmoddi4+0x12e>
 80006b8:	4642      	mov	r2, r8
 80006ba:	002f      	movs	r7, r5
 80006bc:	2320      	movs	r3, #32
 80006be:	0026      	movs	r6, r4
 80006c0:	4097      	lsls	r7, r2
 80006c2:	1a9b      	subs	r3, r3, r2
 80006c4:	40de      	lsrs	r6, r3
 80006c6:	003b      	movs	r3, r7
 80006c8:	4333      	orrs	r3, r6
 80006ca:	e7cd      	b.n	8000668 <__udivmoddi4+0x134>

080006cc <__eqsf2>:
 80006cc:	b570      	push	{r4, r5, r6, lr}
 80006ce:	0042      	lsls	r2, r0, #1
 80006d0:	024e      	lsls	r6, r1, #9
 80006d2:	004c      	lsls	r4, r1, #1
 80006d4:	0245      	lsls	r5, r0, #9
 80006d6:	0a6d      	lsrs	r5, r5, #9
 80006d8:	0e12      	lsrs	r2, r2, #24
 80006da:	0fc3      	lsrs	r3, r0, #31
 80006dc:	0a76      	lsrs	r6, r6, #9
 80006de:	0e24      	lsrs	r4, r4, #24
 80006e0:	0fc9      	lsrs	r1, r1, #31
 80006e2:	2aff      	cmp	r2, #255	@ 0xff
 80006e4:	d010      	beq.n	8000708 <__eqsf2+0x3c>
 80006e6:	2cff      	cmp	r4, #255	@ 0xff
 80006e8:	d00c      	beq.n	8000704 <__eqsf2+0x38>
 80006ea:	2001      	movs	r0, #1
 80006ec:	42a2      	cmp	r2, r4
 80006ee:	d10a      	bne.n	8000706 <__eqsf2+0x3a>
 80006f0:	42b5      	cmp	r5, r6
 80006f2:	d108      	bne.n	8000706 <__eqsf2+0x3a>
 80006f4:	428b      	cmp	r3, r1
 80006f6:	d00f      	beq.n	8000718 <__eqsf2+0x4c>
 80006f8:	2a00      	cmp	r2, #0
 80006fa:	d104      	bne.n	8000706 <__eqsf2+0x3a>
 80006fc:	0028      	movs	r0, r5
 80006fe:	1e43      	subs	r3, r0, #1
 8000700:	4198      	sbcs	r0, r3
 8000702:	e000      	b.n	8000706 <__eqsf2+0x3a>
 8000704:	2001      	movs	r0, #1
 8000706:	bd70      	pop	{r4, r5, r6, pc}
 8000708:	2001      	movs	r0, #1
 800070a:	2cff      	cmp	r4, #255	@ 0xff
 800070c:	d1fb      	bne.n	8000706 <__eqsf2+0x3a>
 800070e:	4335      	orrs	r5, r6
 8000710:	d1f9      	bne.n	8000706 <__eqsf2+0x3a>
 8000712:	404b      	eors	r3, r1
 8000714:	0018      	movs	r0, r3
 8000716:	e7f6      	b.n	8000706 <__eqsf2+0x3a>
 8000718:	2000      	movs	r0, #0
 800071a:	e7f4      	b.n	8000706 <__eqsf2+0x3a>

0800071c <__gesf2>:
 800071c:	b530      	push	{r4, r5, lr}
 800071e:	0042      	lsls	r2, r0, #1
 8000720:	0244      	lsls	r4, r0, #9
 8000722:	024d      	lsls	r5, r1, #9
 8000724:	0fc3      	lsrs	r3, r0, #31
 8000726:	0048      	lsls	r0, r1, #1
 8000728:	0a64      	lsrs	r4, r4, #9
 800072a:	0e12      	lsrs	r2, r2, #24
 800072c:	0a6d      	lsrs	r5, r5, #9
 800072e:	0e00      	lsrs	r0, r0, #24
 8000730:	0fc9      	lsrs	r1, r1, #31
 8000732:	2aff      	cmp	r2, #255	@ 0xff
 8000734:	d019      	beq.n	800076a <__gesf2+0x4e>
 8000736:	28ff      	cmp	r0, #255	@ 0xff
 8000738:	d00b      	beq.n	8000752 <__gesf2+0x36>
 800073a:	2a00      	cmp	r2, #0
 800073c:	d11e      	bne.n	800077c <__gesf2+0x60>
 800073e:	2800      	cmp	r0, #0
 8000740:	d10b      	bne.n	800075a <__gesf2+0x3e>
 8000742:	2d00      	cmp	r5, #0
 8000744:	d027      	beq.n	8000796 <__gesf2+0x7a>
 8000746:	2c00      	cmp	r4, #0
 8000748:	d134      	bne.n	80007b4 <__gesf2+0x98>
 800074a:	2900      	cmp	r1, #0
 800074c:	d02f      	beq.n	80007ae <__gesf2+0x92>
 800074e:	0008      	movs	r0, r1
 8000750:	bd30      	pop	{r4, r5, pc}
 8000752:	2d00      	cmp	r5, #0
 8000754:	d128      	bne.n	80007a8 <__gesf2+0x8c>
 8000756:	2a00      	cmp	r2, #0
 8000758:	d101      	bne.n	800075e <__gesf2+0x42>
 800075a:	2c00      	cmp	r4, #0
 800075c:	d0f5      	beq.n	800074a <__gesf2+0x2e>
 800075e:	428b      	cmp	r3, r1
 8000760:	d107      	bne.n	8000772 <__gesf2+0x56>
 8000762:	2b00      	cmp	r3, #0
 8000764:	d023      	beq.n	80007ae <__gesf2+0x92>
 8000766:	0018      	movs	r0, r3
 8000768:	e7f2      	b.n	8000750 <__gesf2+0x34>
 800076a:	2c00      	cmp	r4, #0
 800076c:	d11c      	bne.n	80007a8 <__gesf2+0x8c>
 800076e:	28ff      	cmp	r0, #255	@ 0xff
 8000770:	d014      	beq.n	800079c <__gesf2+0x80>
 8000772:	1e58      	subs	r0, r3, #1
 8000774:	2302      	movs	r3, #2
 8000776:	4018      	ands	r0, r3
 8000778:	3801      	subs	r0, #1
 800077a:	e7e9      	b.n	8000750 <__gesf2+0x34>
 800077c:	2800      	cmp	r0, #0
 800077e:	d0f8      	beq.n	8000772 <__gesf2+0x56>
 8000780:	428b      	cmp	r3, r1
 8000782:	d1f6      	bne.n	8000772 <__gesf2+0x56>
 8000784:	4282      	cmp	r2, r0
 8000786:	dcf4      	bgt.n	8000772 <__gesf2+0x56>
 8000788:	dbeb      	blt.n	8000762 <__gesf2+0x46>
 800078a:	42ac      	cmp	r4, r5
 800078c:	d8f1      	bhi.n	8000772 <__gesf2+0x56>
 800078e:	2000      	movs	r0, #0
 8000790:	42ac      	cmp	r4, r5
 8000792:	d2dd      	bcs.n	8000750 <__gesf2+0x34>
 8000794:	e7e5      	b.n	8000762 <__gesf2+0x46>
 8000796:	2c00      	cmp	r4, #0
 8000798:	d0da      	beq.n	8000750 <__gesf2+0x34>
 800079a:	e7ea      	b.n	8000772 <__gesf2+0x56>
 800079c:	2d00      	cmp	r5, #0
 800079e:	d103      	bne.n	80007a8 <__gesf2+0x8c>
 80007a0:	428b      	cmp	r3, r1
 80007a2:	d1e6      	bne.n	8000772 <__gesf2+0x56>
 80007a4:	2000      	movs	r0, #0
 80007a6:	e7d3      	b.n	8000750 <__gesf2+0x34>
 80007a8:	2002      	movs	r0, #2
 80007aa:	4240      	negs	r0, r0
 80007ac:	e7d0      	b.n	8000750 <__gesf2+0x34>
 80007ae:	2001      	movs	r0, #1
 80007b0:	4240      	negs	r0, r0
 80007b2:	e7cd      	b.n	8000750 <__gesf2+0x34>
 80007b4:	428b      	cmp	r3, r1
 80007b6:	d0e8      	beq.n	800078a <__gesf2+0x6e>
 80007b8:	e7db      	b.n	8000772 <__gesf2+0x56>
 80007ba:	46c0      	nop			@ (mov r8, r8)

080007bc <__lesf2>:
 80007bc:	b530      	push	{r4, r5, lr}
 80007be:	0042      	lsls	r2, r0, #1
 80007c0:	0244      	lsls	r4, r0, #9
 80007c2:	024d      	lsls	r5, r1, #9
 80007c4:	0fc3      	lsrs	r3, r0, #31
 80007c6:	0048      	lsls	r0, r1, #1
 80007c8:	0a64      	lsrs	r4, r4, #9
 80007ca:	0e12      	lsrs	r2, r2, #24
 80007cc:	0a6d      	lsrs	r5, r5, #9
 80007ce:	0e00      	lsrs	r0, r0, #24
 80007d0:	0fc9      	lsrs	r1, r1, #31
 80007d2:	2aff      	cmp	r2, #255	@ 0xff
 80007d4:	d01a      	beq.n	800080c <__lesf2+0x50>
 80007d6:	28ff      	cmp	r0, #255	@ 0xff
 80007d8:	d00e      	beq.n	80007f8 <__lesf2+0x3c>
 80007da:	2a00      	cmp	r2, #0
 80007dc:	d11e      	bne.n	800081c <__lesf2+0x60>
 80007de:	2800      	cmp	r0, #0
 80007e0:	d10e      	bne.n	8000800 <__lesf2+0x44>
 80007e2:	2d00      	cmp	r5, #0
 80007e4:	d02a      	beq.n	800083c <__lesf2+0x80>
 80007e6:	2c00      	cmp	r4, #0
 80007e8:	d00c      	beq.n	8000804 <__lesf2+0x48>
 80007ea:	428b      	cmp	r3, r1
 80007ec:	d01d      	beq.n	800082a <__lesf2+0x6e>
 80007ee:	1e58      	subs	r0, r3, #1
 80007f0:	2302      	movs	r3, #2
 80007f2:	4018      	ands	r0, r3
 80007f4:	3801      	subs	r0, #1
 80007f6:	e010      	b.n	800081a <__lesf2+0x5e>
 80007f8:	2d00      	cmp	r5, #0
 80007fa:	d10d      	bne.n	8000818 <__lesf2+0x5c>
 80007fc:	2a00      	cmp	r2, #0
 80007fe:	d120      	bne.n	8000842 <__lesf2+0x86>
 8000800:	2c00      	cmp	r4, #0
 8000802:	d11e      	bne.n	8000842 <__lesf2+0x86>
 8000804:	2900      	cmp	r1, #0
 8000806:	d023      	beq.n	8000850 <__lesf2+0x94>
 8000808:	0008      	movs	r0, r1
 800080a:	e006      	b.n	800081a <__lesf2+0x5e>
 800080c:	2c00      	cmp	r4, #0
 800080e:	d103      	bne.n	8000818 <__lesf2+0x5c>
 8000810:	28ff      	cmp	r0, #255	@ 0xff
 8000812:	d1ec      	bne.n	80007ee <__lesf2+0x32>
 8000814:	2d00      	cmp	r5, #0
 8000816:	d017      	beq.n	8000848 <__lesf2+0x8c>
 8000818:	2002      	movs	r0, #2
 800081a:	bd30      	pop	{r4, r5, pc}
 800081c:	2800      	cmp	r0, #0
 800081e:	d0e6      	beq.n	80007ee <__lesf2+0x32>
 8000820:	428b      	cmp	r3, r1
 8000822:	d1e4      	bne.n	80007ee <__lesf2+0x32>
 8000824:	4282      	cmp	r2, r0
 8000826:	dce2      	bgt.n	80007ee <__lesf2+0x32>
 8000828:	db04      	blt.n	8000834 <__lesf2+0x78>
 800082a:	42ac      	cmp	r4, r5
 800082c:	d8df      	bhi.n	80007ee <__lesf2+0x32>
 800082e:	2000      	movs	r0, #0
 8000830:	42ac      	cmp	r4, r5
 8000832:	d2f2      	bcs.n	800081a <__lesf2+0x5e>
 8000834:	2b00      	cmp	r3, #0
 8000836:	d00b      	beq.n	8000850 <__lesf2+0x94>
 8000838:	0018      	movs	r0, r3
 800083a:	e7ee      	b.n	800081a <__lesf2+0x5e>
 800083c:	2c00      	cmp	r4, #0
 800083e:	d0ec      	beq.n	800081a <__lesf2+0x5e>
 8000840:	e7d5      	b.n	80007ee <__lesf2+0x32>
 8000842:	428b      	cmp	r3, r1
 8000844:	d1d3      	bne.n	80007ee <__lesf2+0x32>
 8000846:	e7f5      	b.n	8000834 <__lesf2+0x78>
 8000848:	2000      	movs	r0, #0
 800084a:	428b      	cmp	r3, r1
 800084c:	d0e5      	beq.n	800081a <__lesf2+0x5e>
 800084e:	e7ce      	b.n	80007ee <__lesf2+0x32>
 8000850:	2001      	movs	r0, #1
 8000852:	4240      	negs	r0, r0
 8000854:	e7e1      	b.n	800081a <__lesf2+0x5e>
 8000856:	46c0      	nop			@ (mov r8, r8)

08000858 <__aeabi_fmul>:
 8000858:	b5f0      	push	{r4, r5, r6, r7, lr}
 800085a:	464f      	mov	r7, r9
 800085c:	4646      	mov	r6, r8
 800085e:	46d6      	mov	lr, sl
 8000860:	0243      	lsls	r3, r0, #9
 8000862:	0a5b      	lsrs	r3, r3, #9
 8000864:	0045      	lsls	r5, r0, #1
 8000866:	b5c0      	push	{r6, r7, lr}
 8000868:	4699      	mov	r9, r3
 800086a:	1c0f      	adds	r7, r1, #0
 800086c:	0e2d      	lsrs	r5, r5, #24
 800086e:	0fc6      	lsrs	r6, r0, #31
 8000870:	2d00      	cmp	r5, #0
 8000872:	d100      	bne.n	8000876 <__aeabi_fmul+0x1e>
 8000874:	e088      	b.n	8000988 <__aeabi_fmul+0x130>
 8000876:	2dff      	cmp	r5, #255	@ 0xff
 8000878:	d100      	bne.n	800087c <__aeabi_fmul+0x24>
 800087a:	e08d      	b.n	8000998 <__aeabi_fmul+0x140>
 800087c:	2280      	movs	r2, #128	@ 0x80
 800087e:	00db      	lsls	r3, r3, #3
 8000880:	04d2      	lsls	r2, r2, #19
 8000882:	431a      	orrs	r2, r3
 8000884:	2300      	movs	r3, #0
 8000886:	4691      	mov	r9, r2
 8000888:	4698      	mov	r8, r3
 800088a:	469a      	mov	sl, r3
 800088c:	3d7f      	subs	r5, #127	@ 0x7f
 800088e:	027c      	lsls	r4, r7, #9
 8000890:	007b      	lsls	r3, r7, #1
 8000892:	0a64      	lsrs	r4, r4, #9
 8000894:	0e1b      	lsrs	r3, r3, #24
 8000896:	0fff      	lsrs	r7, r7, #31
 8000898:	2b00      	cmp	r3, #0
 800089a:	d068      	beq.n	800096e <__aeabi_fmul+0x116>
 800089c:	2bff      	cmp	r3, #255	@ 0xff
 800089e:	d021      	beq.n	80008e4 <__aeabi_fmul+0x8c>
 80008a0:	2280      	movs	r2, #128	@ 0x80
 80008a2:	00e4      	lsls	r4, r4, #3
 80008a4:	04d2      	lsls	r2, r2, #19
 80008a6:	4314      	orrs	r4, r2
 80008a8:	4642      	mov	r2, r8
 80008aa:	3b7f      	subs	r3, #127	@ 0x7f
 80008ac:	195b      	adds	r3, r3, r5
 80008ae:	2100      	movs	r1, #0
 80008b0:	1c5d      	adds	r5, r3, #1
 80008b2:	2a0a      	cmp	r2, #10
 80008b4:	dc2e      	bgt.n	8000914 <__aeabi_fmul+0xbc>
 80008b6:	407e      	eors	r6, r7
 80008b8:	4642      	mov	r2, r8
 80008ba:	2a02      	cmp	r2, #2
 80008bc:	dc23      	bgt.n	8000906 <__aeabi_fmul+0xae>
 80008be:	3a01      	subs	r2, #1
 80008c0:	2a01      	cmp	r2, #1
 80008c2:	d900      	bls.n	80008c6 <__aeabi_fmul+0x6e>
 80008c4:	e0bd      	b.n	8000a42 <__aeabi_fmul+0x1ea>
 80008c6:	2902      	cmp	r1, #2
 80008c8:	d06e      	beq.n	80009a8 <__aeabi_fmul+0x150>
 80008ca:	2901      	cmp	r1, #1
 80008cc:	d12c      	bne.n	8000928 <__aeabi_fmul+0xd0>
 80008ce:	2000      	movs	r0, #0
 80008d0:	2200      	movs	r2, #0
 80008d2:	05c0      	lsls	r0, r0, #23
 80008d4:	07f6      	lsls	r6, r6, #31
 80008d6:	4310      	orrs	r0, r2
 80008d8:	4330      	orrs	r0, r6
 80008da:	bce0      	pop	{r5, r6, r7}
 80008dc:	46ba      	mov	sl, r7
 80008de:	46b1      	mov	r9, r6
 80008e0:	46a8      	mov	r8, r5
 80008e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008e4:	002b      	movs	r3, r5
 80008e6:	33ff      	adds	r3, #255	@ 0xff
 80008e8:	2c00      	cmp	r4, #0
 80008ea:	d065      	beq.n	80009b8 <__aeabi_fmul+0x160>
 80008ec:	2203      	movs	r2, #3
 80008ee:	4641      	mov	r1, r8
 80008f0:	4311      	orrs	r1, r2
 80008f2:	0032      	movs	r2, r6
 80008f4:	3501      	adds	r5, #1
 80008f6:	4688      	mov	r8, r1
 80008f8:	407a      	eors	r2, r7
 80008fa:	35ff      	adds	r5, #255	@ 0xff
 80008fc:	290a      	cmp	r1, #10
 80008fe:	dd00      	ble.n	8000902 <__aeabi_fmul+0xaa>
 8000900:	e0d8      	b.n	8000ab4 <__aeabi_fmul+0x25c>
 8000902:	0016      	movs	r6, r2
 8000904:	2103      	movs	r1, #3
 8000906:	4640      	mov	r0, r8
 8000908:	2201      	movs	r2, #1
 800090a:	4082      	lsls	r2, r0
 800090c:	20a6      	movs	r0, #166	@ 0xa6
 800090e:	00c0      	lsls	r0, r0, #3
 8000910:	4202      	tst	r2, r0
 8000912:	d020      	beq.n	8000956 <__aeabi_fmul+0xfe>
 8000914:	4653      	mov	r3, sl
 8000916:	2b02      	cmp	r3, #2
 8000918:	d046      	beq.n	80009a8 <__aeabi_fmul+0x150>
 800091a:	2b03      	cmp	r3, #3
 800091c:	d100      	bne.n	8000920 <__aeabi_fmul+0xc8>
 800091e:	e0bb      	b.n	8000a98 <__aeabi_fmul+0x240>
 8000920:	4651      	mov	r1, sl
 8000922:	464c      	mov	r4, r9
 8000924:	2901      	cmp	r1, #1
 8000926:	d0d2      	beq.n	80008ce <__aeabi_fmul+0x76>
 8000928:	002b      	movs	r3, r5
 800092a:	337f      	adds	r3, #127	@ 0x7f
 800092c:	2b00      	cmp	r3, #0
 800092e:	dd70      	ble.n	8000a12 <__aeabi_fmul+0x1ba>
 8000930:	0762      	lsls	r2, r4, #29
 8000932:	d004      	beq.n	800093e <__aeabi_fmul+0xe6>
 8000934:	220f      	movs	r2, #15
 8000936:	4022      	ands	r2, r4
 8000938:	2a04      	cmp	r2, #4
 800093a:	d000      	beq.n	800093e <__aeabi_fmul+0xe6>
 800093c:	3404      	adds	r4, #4
 800093e:	0122      	lsls	r2, r4, #4
 8000940:	d503      	bpl.n	800094a <__aeabi_fmul+0xf2>
 8000942:	4b63      	ldr	r3, [pc, #396]	@ (8000ad0 <__aeabi_fmul+0x278>)
 8000944:	401c      	ands	r4, r3
 8000946:	002b      	movs	r3, r5
 8000948:	3380      	adds	r3, #128	@ 0x80
 800094a:	2bfe      	cmp	r3, #254	@ 0xfe
 800094c:	dc2c      	bgt.n	80009a8 <__aeabi_fmul+0x150>
 800094e:	01a2      	lsls	r2, r4, #6
 8000950:	0a52      	lsrs	r2, r2, #9
 8000952:	b2d8      	uxtb	r0, r3
 8000954:	e7bd      	b.n	80008d2 <__aeabi_fmul+0x7a>
 8000956:	2090      	movs	r0, #144	@ 0x90
 8000958:	0080      	lsls	r0, r0, #2
 800095a:	4202      	tst	r2, r0
 800095c:	d127      	bne.n	80009ae <__aeabi_fmul+0x156>
 800095e:	38b9      	subs	r0, #185	@ 0xb9
 8000960:	38ff      	subs	r0, #255	@ 0xff
 8000962:	4210      	tst	r0, r2
 8000964:	d06d      	beq.n	8000a42 <__aeabi_fmul+0x1ea>
 8000966:	003e      	movs	r6, r7
 8000968:	46a1      	mov	r9, r4
 800096a:	468a      	mov	sl, r1
 800096c:	e7d2      	b.n	8000914 <__aeabi_fmul+0xbc>
 800096e:	2c00      	cmp	r4, #0
 8000970:	d141      	bne.n	80009f6 <__aeabi_fmul+0x19e>
 8000972:	2301      	movs	r3, #1
 8000974:	4642      	mov	r2, r8
 8000976:	431a      	orrs	r2, r3
 8000978:	4690      	mov	r8, r2
 800097a:	002b      	movs	r3, r5
 800097c:	4642      	mov	r2, r8
 800097e:	2101      	movs	r1, #1
 8000980:	1c5d      	adds	r5, r3, #1
 8000982:	2a0a      	cmp	r2, #10
 8000984:	dd97      	ble.n	80008b6 <__aeabi_fmul+0x5e>
 8000986:	e7c5      	b.n	8000914 <__aeabi_fmul+0xbc>
 8000988:	2b00      	cmp	r3, #0
 800098a:	d126      	bne.n	80009da <__aeabi_fmul+0x182>
 800098c:	2304      	movs	r3, #4
 800098e:	4698      	mov	r8, r3
 8000990:	3b03      	subs	r3, #3
 8000992:	2500      	movs	r5, #0
 8000994:	469a      	mov	sl, r3
 8000996:	e77a      	b.n	800088e <__aeabi_fmul+0x36>
 8000998:	2b00      	cmp	r3, #0
 800099a:	d118      	bne.n	80009ce <__aeabi_fmul+0x176>
 800099c:	2308      	movs	r3, #8
 800099e:	4698      	mov	r8, r3
 80009a0:	3b06      	subs	r3, #6
 80009a2:	25ff      	movs	r5, #255	@ 0xff
 80009a4:	469a      	mov	sl, r3
 80009a6:	e772      	b.n	800088e <__aeabi_fmul+0x36>
 80009a8:	20ff      	movs	r0, #255	@ 0xff
 80009aa:	2200      	movs	r2, #0
 80009ac:	e791      	b.n	80008d2 <__aeabi_fmul+0x7a>
 80009ae:	2280      	movs	r2, #128	@ 0x80
 80009b0:	2600      	movs	r6, #0
 80009b2:	20ff      	movs	r0, #255	@ 0xff
 80009b4:	03d2      	lsls	r2, r2, #15
 80009b6:	e78c      	b.n	80008d2 <__aeabi_fmul+0x7a>
 80009b8:	4641      	mov	r1, r8
 80009ba:	2202      	movs	r2, #2
 80009bc:	3501      	adds	r5, #1
 80009be:	4311      	orrs	r1, r2
 80009c0:	4688      	mov	r8, r1
 80009c2:	35ff      	adds	r5, #255	@ 0xff
 80009c4:	290a      	cmp	r1, #10
 80009c6:	dca5      	bgt.n	8000914 <__aeabi_fmul+0xbc>
 80009c8:	2102      	movs	r1, #2
 80009ca:	407e      	eors	r6, r7
 80009cc:	e774      	b.n	80008b8 <__aeabi_fmul+0x60>
 80009ce:	230c      	movs	r3, #12
 80009d0:	4698      	mov	r8, r3
 80009d2:	3b09      	subs	r3, #9
 80009d4:	25ff      	movs	r5, #255	@ 0xff
 80009d6:	469a      	mov	sl, r3
 80009d8:	e759      	b.n	800088e <__aeabi_fmul+0x36>
 80009da:	0018      	movs	r0, r3
 80009dc:	f000 fdb8 	bl	8001550 <__clzsi2>
 80009e0:	464a      	mov	r2, r9
 80009e2:	1f43      	subs	r3, r0, #5
 80009e4:	2576      	movs	r5, #118	@ 0x76
 80009e6:	409a      	lsls	r2, r3
 80009e8:	2300      	movs	r3, #0
 80009ea:	426d      	negs	r5, r5
 80009ec:	4691      	mov	r9, r2
 80009ee:	4698      	mov	r8, r3
 80009f0:	469a      	mov	sl, r3
 80009f2:	1a2d      	subs	r5, r5, r0
 80009f4:	e74b      	b.n	800088e <__aeabi_fmul+0x36>
 80009f6:	0020      	movs	r0, r4
 80009f8:	f000 fdaa 	bl	8001550 <__clzsi2>
 80009fc:	4642      	mov	r2, r8
 80009fe:	1f43      	subs	r3, r0, #5
 8000a00:	409c      	lsls	r4, r3
 8000a02:	1a2b      	subs	r3, r5, r0
 8000a04:	3b76      	subs	r3, #118	@ 0x76
 8000a06:	2100      	movs	r1, #0
 8000a08:	1c5d      	adds	r5, r3, #1
 8000a0a:	2a0a      	cmp	r2, #10
 8000a0c:	dc00      	bgt.n	8000a10 <__aeabi_fmul+0x1b8>
 8000a0e:	e752      	b.n	80008b6 <__aeabi_fmul+0x5e>
 8000a10:	e780      	b.n	8000914 <__aeabi_fmul+0xbc>
 8000a12:	2201      	movs	r2, #1
 8000a14:	1ad3      	subs	r3, r2, r3
 8000a16:	2b1b      	cmp	r3, #27
 8000a18:	dd00      	ble.n	8000a1c <__aeabi_fmul+0x1c4>
 8000a1a:	e758      	b.n	80008ce <__aeabi_fmul+0x76>
 8000a1c:	359e      	adds	r5, #158	@ 0x9e
 8000a1e:	0022      	movs	r2, r4
 8000a20:	40ac      	lsls	r4, r5
 8000a22:	40da      	lsrs	r2, r3
 8000a24:	1e63      	subs	r3, r4, #1
 8000a26:	419c      	sbcs	r4, r3
 8000a28:	4322      	orrs	r2, r4
 8000a2a:	0753      	lsls	r3, r2, #29
 8000a2c:	d004      	beq.n	8000a38 <__aeabi_fmul+0x1e0>
 8000a2e:	230f      	movs	r3, #15
 8000a30:	4013      	ands	r3, r2
 8000a32:	2b04      	cmp	r3, #4
 8000a34:	d000      	beq.n	8000a38 <__aeabi_fmul+0x1e0>
 8000a36:	3204      	adds	r2, #4
 8000a38:	0153      	lsls	r3, r2, #5
 8000a3a:	d537      	bpl.n	8000aac <__aeabi_fmul+0x254>
 8000a3c:	2001      	movs	r0, #1
 8000a3e:	2200      	movs	r2, #0
 8000a40:	e747      	b.n	80008d2 <__aeabi_fmul+0x7a>
 8000a42:	0c21      	lsrs	r1, r4, #16
 8000a44:	464a      	mov	r2, r9
 8000a46:	0424      	lsls	r4, r4, #16
 8000a48:	0c24      	lsrs	r4, r4, #16
 8000a4a:	0027      	movs	r7, r4
 8000a4c:	0c10      	lsrs	r0, r2, #16
 8000a4e:	0412      	lsls	r2, r2, #16
 8000a50:	0c12      	lsrs	r2, r2, #16
 8000a52:	4344      	muls	r4, r0
 8000a54:	4357      	muls	r7, r2
 8000a56:	4348      	muls	r0, r1
 8000a58:	4351      	muls	r1, r2
 8000a5a:	0c3a      	lsrs	r2, r7, #16
 8000a5c:	1909      	adds	r1, r1, r4
 8000a5e:	1852      	adds	r2, r2, r1
 8000a60:	4294      	cmp	r4, r2
 8000a62:	d903      	bls.n	8000a6c <__aeabi_fmul+0x214>
 8000a64:	2180      	movs	r1, #128	@ 0x80
 8000a66:	0249      	lsls	r1, r1, #9
 8000a68:	468c      	mov	ip, r1
 8000a6a:	4460      	add	r0, ip
 8000a6c:	043f      	lsls	r7, r7, #16
 8000a6e:	0411      	lsls	r1, r2, #16
 8000a70:	0c3f      	lsrs	r7, r7, #16
 8000a72:	19c9      	adds	r1, r1, r7
 8000a74:	018c      	lsls	r4, r1, #6
 8000a76:	1e67      	subs	r7, r4, #1
 8000a78:	41bc      	sbcs	r4, r7
 8000a7a:	0c12      	lsrs	r2, r2, #16
 8000a7c:	0e89      	lsrs	r1, r1, #26
 8000a7e:	1812      	adds	r2, r2, r0
 8000a80:	430c      	orrs	r4, r1
 8000a82:	0192      	lsls	r2, r2, #6
 8000a84:	4314      	orrs	r4, r2
 8000a86:	0112      	lsls	r2, r2, #4
 8000a88:	d50e      	bpl.n	8000aa8 <__aeabi_fmul+0x250>
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	0862      	lsrs	r2, r4, #1
 8000a8e:	401c      	ands	r4, r3
 8000a90:	4314      	orrs	r4, r2
 8000a92:	e749      	b.n	8000928 <__aeabi_fmul+0xd0>
 8000a94:	003e      	movs	r6, r7
 8000a96:	46a1      	mov	r9, r4
 8000a98:	2280      	movs	r2, #128	@ 0x80
 8000a9a:	464b      	mov	r3, r9
 8000a9c:	03d2      	lsls	r2, r2, #15
 8000a9e:	431a      	orrs	r2, r3
 8000aa0:	0252      	lsls	r2, r2, #9
 8000aa2:	20ff      	movs	r0, #255	@ 0xff
 8000aa4:	0a52      	lsrs	r2, r2, #9
 8000aa6:	e714      	b.n	80008d2 <__aeabi_fmul+0x7a>
 8000aa8:	001d      	movs	r5, r3
 8000aaa:	e73d      	b.n	8000928 <__aeabi_fmul+0xd0>
 8000aac:	0192      	lsls	r2, r2, #6
 8000aae:	2000      	movs	r0, #0
 8000ab0:	0a52      	lsrs	r2, r2, #9
 8000ab2:	e70e      	b.n	80008d2 <__aeabi_fmul+0x7a>
 8000ab4:	290f      	cmp	r1, #15
 8000ab6:	d1ed      	bne.n	8000a94 <__aeabi_fmul+0x23c>
 8000ab8:	2280      	movs	r2, #128	@ 0x80
 8000aba:	464b      	mov	r3, r9
 8000abc:	03d2      	lsls	r2, r2, #15
 8000abe:	4213      	tst	r3, r2
 8000ac0:	d0ea      	beq.n	8000a98 <__aeabi_fmul+0x240>
 8000ac2:	4214      	tst	r4, r2
 8000ac4:	d1e8      	bne.n	8000a98 <__aeabi_fmul+0x240>
 8000ac6:	003e      	movs	r6, r7
 8000ac8:	20ff      	movs	r0, #255	@ 0xff
 8000aca:	4322      	orrs	r2, r4
 8000acc:	e701      	b.n	80008d2 <__aeabi_fmul+0x7a>
 8000ace:	46c0      	nop			@ (mov r8, r8)
 8000ad0:	f7ffffff 	.word	0xf7ffffff

08000ad4 <__aeabi_fsub>:
 8000ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ad6:	4647      	mov	r7, r8
 8000ad8:	46ce      	mov	lr, r9
 8000ada:	024e      	lsls	r6, r1, #9
 8000adc:	0243      	lsls	r3, r0, #9
 8000ade:	0045      	lsls	r5, r0, #1
 8000ae0:	0a72      	lsrs	r2, r6, #9
 8000ae2:	0fc4      	lsrs	r4, r0, #31
 8000ae4:	0048      	lsls	r0, r1, #1
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	4694      	mov	ip, r2
 8000aea:	0a5f      	lsrs	r7, r3, #9
 8000aec:	0e2d      	lsrs	r5, r5, #24
 8000aee:	099b      	lsrs	r3, r3, #6
 8000af0:	0e00      	lsrs	r0, r0, #24
 8000af2:	0fc9      	lsrs	r1, r1, #31
 8000af4:	09b6      	lsrs	r6, r6, #6
 8000af6:	28ff      	cmp	r0, #255	@ 0xff
 8000af8:	d024      	beq.n	8000b44 <__aeabi_fsub+0x70>
 8000afa:	2201      	movs	r2, #1
 8000afc:	4051      	eors	r1, r2
 8000afe:	1a2a      	subs	r2, r5, r0
 8000b00:	428c      	cmp	r4, r1
 8000b02:	d00f      	beq.n	8000b24 <__aeabi_fsub+0x50>
 8000b04:	2a00      	cmp	r2, #0
 8000b06:	dc00      	bgt.n	8000b0a <__aeabi_fsub+0x36>
 8000b08:	e16a      	b.n	8000de0 <__aeabi_fsub+0x30c>
 8000b0a:	2800      	cmp	r0, #0
 8000b0c:	d135      	bne.n	8000b7a <__aeabi_fsub+0xa6>
 8000b0e:	2e00      	cmp	r6, #0
 8000b10:	d100      	bne.n	8000b14 <__aeabi_fsub+0x40>
 8000b12:	e0a2      	b.n	8000c5a <__aeabi_fsub+0x186>
 8000b14:	1e51      	subs	r1, r2, #1
 8000b16:	2a01      	cmp	r2, #1
 8000b18:	d100      	bne.n	8000b1c <__aeabi_fsub+0x48>
 8000b1a:	e124      	b.n	8000d66 <__aeabi_fsub+0x292>
 8000b1c:	2aff      	cmp	r2, #255	@ 0xff
 8000b1e:	d021      	beq.n	8000b64 <__aeabi_fsub+0x90>
 8000b20:	000a      	movs	r2, r1
 8000b22:	e02f      	b.n	8000b84 <__aeabi_fsub+0xb0>
 8000b24:	2a00      	cmp	r2, #0
 8000b26:	dc00      	bgt.n	8000b2a <__aeabi_fsub+0x56>
 8000b28:	e167      	b.n	8000dfa <__aeabi_fsub+0x326>
 8000b2a:	2800      	cmp	r0, #0
 8000b2c:	d05e      	beq.n	8000bec <__aeabi_fsub+0x118>
 8000b2e:	2dff      	cmp	r5, #255	@ 0xff
 8000b30:	d018      	beq.n	8000b64 <__aeabi_fsub+0x90>
 8000b32:	2180      	movs	r1, #128	@ 0x80
 8000b34:	04c9      	lsls	r1, r1, #19
 8000b36:	430e      	orrs	r6, r1
 8000b38:	2a1b      	cmp	r2, #27
 8000b3a:	dc00      	bgt.n	8000b3e <__aeabi_fsub+0x6a>
 8000b3c:	e076      	b.n	8000c2c <__aeabi_fsub+0x158>
 8000b3e:	002a      	movs	r2, r5
 8000b40:	3301      	adds	r3, #1
 8000b42:	e032      	b.n	8000baa <__aeabi_fsub+0xd6>
 8000b44:	002a      	movs	r2, r5
 8000b46:	3aff      	subs	r2, #255	@ 0xff
 8000b48:	4691      	mov	r9, r2
 8000b4a:	2e00      	cmp	r6, #0
 8000b4c:	d042      	beq.n	8000bd4 <__aeabi_fsub+0x100>
 8000b4e:	428c      	cmp	r4, r1
 8000b50:	d055      	beq.n	8000bfe <__aeabi_fsub+0x12a>
 8000b52:	464a      	mov	r2, r9
 8000b54:	2a00      	cmp	r2, #0
 8000b56:	d100      	bne.n	8000b5a <__aeabi_fsub+0x86>
 8000b58:	e09c      	b.n	8000c94 <__aeabi_fsub+0x1c0>
 8000b5a:	2d00      	cmp	r5, #0
 8000b5c:	d100      	bne.n	8000b60 <__aeabi_fsub+0x8c>
 8000b5e:	e077      	b.n	8000c50 <__aeabi_fsub+0x17c>
 8000b60:	000c      	movs	r4, r1
 8000b62:	0033      	movs	r3, r6
 8000b64:	08db      	lsrs	r3, r3, #3
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d100      	bne.n	8000b6c <__aeabi_fsub+0x98>
 8000b6a:	e06e      	b.n	8000c4a <__aeabi_fsub+0x176>
 8000b6c:	2280      	movs	r2, #128	@ 0x80
 8000b6e:	03d2      	lsls	r2, r2, #15
 8000b70:	4313      	orrs	r3, r2
 8000b72:	025b      	lsls	r3, r3, #9
 8000b74:	20ff      	movs	r0, #255	@ 0xff
 8000b76:	0a5b      	lsrs	r3, r3, #9
 8000b78:	e024      	b.n	8000bc4 <__aeabi_fsub+0xf0>
 8000b7a:	2dff      	cmp	r5, #255	@ 0xff
 8000b7c:	d0f2      	beq.n	8000b64 <__aeabi_fsub+0x90>
 8000b7e:	2180      	movs	r1, #128	@ 0x80
 8000b80:	04c9      	lsls	r1, r1, #19
 8000b82:	430e      	orrs	r6, r1
 8000b84:	2101      	movs	r1, #1
 8000b86:	2a1b      	cmp	r2, #27
 8000b88:	dc08      	bgt.n	8000b9c <__aeabi_fsub+0xc8>
 8000b8a:	0031      	movs	r1, r6
 8000b8c:	2020      	movs	r0, #32
 8000b8e:	40d1      	lsrs	r1, r2
 8000b90:	1a82      	subs	r2, r0, r2
 8000b92:	4096      	lsls	r6, r2
 8000b94:	0032      	movs	r2, r6
 8000b96:	1e50      	subs	r0, r2, #1
 8000b98:	4182      	sbcs	r2, r0
 8000b9a:	4311      	orrs	r1, r2
 8000b9c:	1a5b      	subs	r3, r3, r1
 8000b9e:	015a      	lsls	r2, r3, #5
 8000ba0:	d460      	bmi.n	8000c64 <__aeabi_fsub+0x190>
 8000ba2:	2107      	movs	r1, #7
 8000ba4:	002a      	movs	r2, r5
 8000ba6:	4019      	ands	r1, r3
 8000ba8:	d057      	beq.n	8000c5a <__aeabi_fsub+0x186>
 8000baa:	210f      	movs	r1, #15
 8000bac:	4019      	ands	r1, r3
 8000bae:	2904      	cmp	r1, #4
 8000bb0:	d000      	beq.n	8000bb4 <__aeabi_fsub+0xe0>
 8000bb2:	3304      	adds	r3, #4
 8000bb4:	0159      	lsls	r1, r3, #5
 8000bb6:	d550      	bpl.n	8000c5a <__aeabi_fsub+0x186>
 8000bb8:	1c50      	adds	r0, r2, #1
 8000bba:	2afe      	cmp	r2, #254	@ 0xfe
 8000bbc:	d045      	beq.n	8000c4a <__aeabi_fsub+0x176>
 8000bbe:	019b      	lsls	r3, r3, #6
 8000bc0:	b2c0      	uxtb	r0, r0
 8000bc2:	0a5b      	lsrs	r3, r3, #9
 8000bc4:	05c0      	lsls	r0, r0, #23
 8000bc6:	4318      	orrs	r0, r3
 8000bc8:	07e4      	lsls	r4, r4, #31
 8000bca:	4320      	orrs	r0, r4
 8000bcc:	bcc0      	pop	{r6, r7}
 8000bce:	46b9      	mov	r9, r7
 8000bd0:	46b0      	mov	r8, r6
 8000bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	4051      	eors	r1, r2
 8000bd8:	428c      	cmp	r4, r1
 8000bda:	d1ba      	bne.n	8000b52 <__aeabi_fsub+0x7e>
 8000bdc:	464a      	mov	r2, r9
 8000bde:	2a00      	cmp	r2, #0
 8000be0:	d010      	beq.n	8000c04 <__aeabi_fsub+0x130>
 8000be2:	2d00      	cmp	r5, #0
 8000be4:	d100      	bne.n	8000be8 <__aeabi_fsub+0x114>
 8000be6:	e098      	b.n	8000d1a <__aeabi_fsub+0x246>
 8000be8:	2300      	movs	r3, #0
 8000bea:	e7bb      	b.n	8000b64 <__aeabi_fsub+0x90>
 8000bec:	2e00      	cmp	r6, #0
 8000bee:	d034      	beq.n	8000c5a <__aeabi_fsub+0x186>
 8000bf0:	1e51      	subs	r1, r2, #1
 8000bf2:	2a01      	cmp	r2, #1
 8000bf4:	d06e      	beq.n	8000cd4 <__aeabi_fsub+0x200>
 8000bf6:	2aff      	cmp	r2, #255	@ 0xff
 8000bf8:	d0b4      	beq.n	8000b64 <__aeabi_fsub+0x90>
 8000bfa:	000a      	movs	r2, r1
 8000bfc:	e79c      	b.n	8000b38 <__aeabi_fsub+0x64>
 8000bfe:	2a00      	cmp	r2, #0
 8000c00:	d000      	beq.n	8000c04 <__aeabi_fsub+0x130>
 8000c02:	e088      	b.n	8000d16 <__aeabi_fsub+0x242>
 8000c04:	20fe      	movs	r0, #254	@ 0xfe
 8000c06:	1c6a      	adds	r2, r5, #1
 8000c08:	4210      	tst	r0, r2
 8000c0a:	d000      	beq.n	8000c0e <__aeabi_fsub+0x13a>
 8000c0c:	e092      	b.n	8000d34 <__aeabi_fsub+0x260>
 8000c0e:	2d00      	cmp	r5, #0
 8000c10:	d000      	beq.n	8000c14 <__aeabi_fsub+0x140>
 8000c12:	e0a4      	b.n	8000d5e <__aeabi_fsub+0x28a>
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d100      	bne.n	8000c1a <__aeabi_fsub+0x146>
 8000c18:	e0cb      	b.n	8000db2 <__aeabi_fsub+0x2de>
 8000c1a:	2e00      	cmp	r6, #0
 8000c1c:	d000      	beq.n	8000c20 <__aeabi_fsub+0x14c>
 8000c1e:	e0ca      	b.n	8000db6 <__aeabi_fsub+0x2e2>
 8000c20:	2200      	movs	r2, #0
 8000c22:	08db      	lsrs	r3, r3, #3
 8000c24:	025b      	lsls	r3, r3, #9
 8000c26:	0a5b      	lsrs	r3, r3, #9
 8000c28:	b2d0      	uxtb	r0, r2
 8000c2a:	e7cb      	b.n	8000bc4 <__aeabi_fsub+0xf0>
 8000c2c:	0031      	movs	r1, r6
 8000c2e:	2020      	movs	r0, #32
 8000c30:	40d1      	lsrs	r1, r2
 8000c32:	1a82      	subs	r2, r0, r2
 8000c34:	4096      	lsls	r6, r2
 8000c36:	0032      	movs	r2, r6
 8000c38:	1e50      	subs	r0, r2, #1
 8000c3a:	4182      	sbcs	r2, r0
 8000c3c:	430a      	orrs	r2, r1
 8000c3e:	189b      	adds	r3, r3, r2
 8000c40:	015a      	lsls	r2, r3, #5
 8000c42:	d5ae      	bpl.n	8000ba2 <__aeabi_fsub+0xce>
 8000c44:	1c6a      	adds	r2, r5, #1
 8000c46:	2dfe      	cmp	r5, #254	@ 0xfe
 8000c48:	d14a      	bne.n	8000ce0 <__aeabi_fsub+0x20c>
 8000c4a:	20ff      	movs	r0, #255	@ 0xff
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	e7b9      	b.n	8000bc4 <__aeabi_fsub+0xf0>
 8000c50:	22ff      	movs	r2, #255	@ 0xff
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d14b      	bne.n	8000cee <__aeabi_fsub+0x21a>
 8000c56:	000c      	movs	r4, r1
 8000c58:	0033      	movs	r3, r6
 8000c5a:	08db      	lsrs	r3, r3, #3
 8000c5c:	2aff      	cmp	r2, #255	@ 0xff
 8000c5e:	d100      	bne.n	8000c62 <__aeabi_fsub+0x18e>
 8000c60:	e781      	b.n	8000b66 <__aeabi_fsub+0x92>
 8000c62:	e7df      	b.n	8000c24 <__aeabi_fsub+0x150>
 8000c64:	019f      	lsls	r7, r3, #6
 8000c66:	09bf      	lsrs	r7, r7, #6
 8000c68:	0038      	movs	r0, r7
 8000c6a:	f000 fc71 	bl	8001550 <__clzsi2>
 8000c6e:	3805      	subs	r0, #5
 8000c70:	4087      	lsls	r7, r0
 8000c72:	4285      	cmp	r5, r0
 8000c74:	dc21      	bgt.n	8000cba <__aeabi_fsub+0x1e6>
 8000c76:	003b      	movs	r3, r7
 8000c78:	2120      	movs	r1, #32
 8000c7a:	1b42      	subs	r2, r0, r5
 8000c7c:	3201      	adds	r2, #1
 8000c7e:	40d3      	lsrs	r3, r2
 8000c80:	1a8a      	subs	r2, r1, r2
 8000c82:	4097      	lsls	r7, r2
 8000c84:	1e7a      	subs	r2, r7, #1
 8000c86:	4197      	sbcs	r7, r2
 8000c88:	2200      	movs	r2, #0
 8000c8a:	433b      	orrs	r3, r7
 8000c8c:	0759      	lsls	r1, r3, #29
 8000c8e:	d000      	beq.n	8000c92 <__aeabi_fsub+0x1be>
 8000c90:	e78b      	b.n	8000baa <__aeabi_fsub+0xd6>
 8000c92:	e78f      	b.n	8000bb4 <__aeabi_fsub+0xe0>
 8000c94:	20fe      	movs	r0, #254	@ 0xfe
 8000c96:	1c6a      	adds	r2, r5, #1
 8000c98:	4210      	tst	r0, r2
 8000c9a:	d112      	bne.n	8000cc2 <__aeabi_fsub+0x1ee>
 8000c9c:	2d00      	cmp	r5, #0
 8000c9e:	d152      	bne.n	8000d46 <__aeabi_fsub+0x272>
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d07c      	beq.n	8000d9e <__aeabi_fsub+0x2ca>
 8000ca4:	2e00      	cmp	r6, #0
 8000ca6:	d0bb      	beq.n	8000c20 <__aeabi_fsub+0x14c>
 8000ca8:	1b9a      	subs	r2, r3, r6
 8000caa:	0150      	lsls	r0, r2, #5
 8000cac:	d400      	bmi.n	8000cb0 <__aeabi_fsub+0x1dc>
 8000cae:	e08b      	b.n	8000dc8 <__aeabi_fsub+0x2f4>
 8000cb0:	2401      	movs	r4, #1
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	1af3      	subs	r3, r6, r3
 8000cb6:	400c      	ands	r4, r1
 8000cb8:	e7e8      	b.n	8000c8c <__aeabi_fsub+0x1b8>
 8000cba:	4b56      	ldr	r3, [pc, #344]	@ (8000e14 <__aeabi_fsub+0x340>)
 8000cbc:	1a2a      	subs	r2, r5, r0
 8000cbe:	403b      	ands	r3, r7
 8000cc0:	e7e4      	b.n	8000c8c <__aeabi_fsub+0x1b8>
 8000cc2:	1b9f      	subs	r7, r3, r6
 8000cc4:	017a      	lsls	r2, r7, #5
 8000cc6:	d446      	bmi.n	8000d56 <__aeabi_fsub+0x282>
 8000cc8:	2f00      	cmp	r7, #0
 8000cca:	d1cd      	bne.n	8000c68 <__aeabi_fsub+0x194>
 8000ccc:	2400      	movs	r4, #0
 8000cce:	2000      	movs	r0, #0
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	e777      	b.n	8000bc4 <__aeabi_fsub+0xf0>
 8000cd4:	199b      	adds	r3, r3, r6
 8000cd6:	2501      	movs	r5, #1
 8000cd8:	3201      	adds	r2, #1
 8000cda:	0159      	lsls	r1, r3, #5
 8000cdc:	d400      	bmi.n	8000ce0 <__aeabi_fsub+0x20c>
 8000cde:	e760      	b.n	8000ba2 <__aeabi_fsub+0xce>
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	484d      	ldr	r0, [pc, #308]	@ (8000e18 <__aeabi_fsub+0x344>)
 8000ce4:	4019      	ands	r1, r3
 8000ce6:	085b      	lsrs	r3, r3, #1
 8000ce8:	4003      	ands	r3, r0
 8000cea:	430b      	orrs	r3, r1
 8000cec:	e7ce      	b.n	8000c8c <__aeabi_fsub+0x1b8>
 8000cee:	1e57      	subs	r7, r2, #1
 8000cf0:	2a01      	cmp	r2, #1
 8000cf2:	d05a      	beq.n	8000daa <__aeabi_fsub+0x2d6>
 8000cf4:	000c      	movs	r4, r1
 8000cf6:	2aff      	cmp	r2, #255	@ 0xff
 8000cf8:	d033      	beq.n	8000d62 <__aeabi_fsub+0x28e>
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	2f1b      	cmp	r7, #27
 8000cfe:	dc07      	bgt.n	8000d10 <__aeabi_fsub+0x23c>
 8000d00:	2120      	movs	r1, #32
 8000d02:	1bc9      	subs	r1, r1, r7
 8000d04:	001a      	movs	r2, r3
 8000d06:	408b      	lsls	r3, r1
 8000d08:	40fa      	lsrs	r2, r7
 8000d0a:	1e59      	subs	r1, r3, #1
 8000d0c:	418b      	sbcs	r3, r1
 8000d0e:	431a      	orrs	r2, r3
 8000d10:	0005      	movs	r5, r0
 8000d12:	1ab3      	subs	r3, r6, r2
 8000d14:	e743      	b.n	8000b9e <__aeabi_fsub+0xca>
 8000d16:	2d00      	cmp	r5, #0
 8000d18:	d123      	bne.n	8000d62 <__aeabi_fsub+0x28e>
 8000d1a:	22ff      	movs	r2, #255	@ 0xff
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d09b      	beq.n	8000c58 <__aeabi_fsub+0x184>
 8000d20:	1e51      	subs	r1, r2, #1
 8000d22:	2a01      	cmp	r2, #1
 8000d24:	d0d6      	beq.n	8000cd4 <__aeabi_fsub+0x200>
 8000d26:	2aff      	cmp	r2, #255	@ 0xff
 8000d28:	d01b      	beq.n	8000d62 <__aeabi_fsub+0x28e>
 8000d2a:	291b      	cmp	r1, #27
 8000d2c:	dd2c      	ble.n	8000d88 <__aeabi_fsub+0x2b4>
 8000d2e:	0002      	movs	r2, r0
 8000d30:	1c73      	adds	r3, r6, #1
 8000d32:	e73a      	b.n	8000baa <__aeabi_fsub+0xd6>
 8000d34:	2aff      	cmp	r2, #255	@ 0xff
 8000d36:	d088      	beq.n	8000c4a <__aeabi_fsub+0x176>
 8000d38:	199b      	adds	r3, r3, r6
 8000d3a:	085b      	lsrs	r3, r3, #1
 8000d3c:	0759      	lsls	r1, r3, #29
 8000d3e:	d000      	beq.n	8000d42 <__aeabi_fsub+0x26e>
 8000d40:	e733      	b.n	8000baa <__aeabi_fsub+0xd6>
 8000d42:	08db      	lsrs	r3, r3, #3
 8000d44:	e76e      	b.n	8000c24 <__aeabi_fsub+0x150>
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d110      	bne.n	8000d6c <__aeabi_fsub+0x298>
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	d043      	beq.n	8000dd6 <__aeabi_fsub+0x302>
 8000d4e:	2401      	movs	r4, #1
 8000d50:	0033      	movs	r3, r6
 8000d52:	400c      	ands	r4, r1
 8000d54:	e706      	b.n	8000b64 <__aeabi_fsub+0x90>
 8000d56:	2401      	movs	r4, #1
 8000d58:	1af7      	subs	r7, r6, r3
 8000d5a:	400c      	ands	r4, r1
 8000d5c:	e784      	b.n	8000c68 <__aeabi_fsub+0x194>
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d104      	bne.n	8000d6c <__aeabi_fsub+0x298>
 8000d62:	0033      	movs	r3, r6
 8000d64:	e6fe      	b.n	8000b64 <__aeabi_fsub+0x90>
 8000d66:	2501      	movs	r5, #1
 8000d68:	1b9b      	subs	r3, r3, r6
 8000d6a:	e718      	b.n	8000b9e <__aeabi_fsub+0xca>
 8000d6c:	2e00      	cmp	r6, #0
 8000d6e:	d100      	bne.n	8000d72 <__aeabi_fsub+0x29e>
 8000d70:	e6f8      	b.n	8000b64 <__aeabi_fsub+0x90>
 8000d72:	2280      	movs	r2, #128	@ 0x80
 8000d74:	03d2      	lsls	r2, r2, #15
 8000d76:	4297      	cmp	r7, r2
 8000d78:	d304      	bcc.n	8000d84 <__aeabi_fsub+0x2b0>
 8000d7a:	4594      	cmp	ip, r2
 8000d7c:	d202      	bcs.n	8000d84 <__aeabi_fsub+0x2b0>
 8000d7e:	2401      	movs	r4, #1
 8000d80:	0033      	movs	r3, r6
 8000d82:	400c      	ands	r4, r1
 8000d84:	08db      	lsrs	r3, r3, #3
 8000d86:	e6f1      	b.n	8000b6c <__aeabi_fsub+0x98>
 8000d88:	001a      	movs	r2, r3
 8000d8a:	2520      	movs	r5, #32
 8000d8c:	40ca      	lsrs	r2, r1
 8000d8e:	1a69      	subs	r1, r5, r1
 8000d90:	408b      	lsls	r3, r1
 8000d92:	1e59      	subs	r1, r3, #1
 8000d94:	418b      	sbcs	r3, r1
 8000d96:	4313      	orrs	r3, r2
 8000d98:	0005      	movs	r5, r0
 8000d9a:	199b      	adds	r3, r3, r6
 8000d9c:	e750      	b.n	8000c40 <__aeabi_fsub+0x16c>
 8000d9e:	2e00      	cmp	r6, #0
 8000da0:	d094      	beq.n	8000ccc <__aeabi_fsub+0x1f8>
 8000da2:	2401      	movs	r4, #1
 8000da4:	0033      	movs	r3, r6
 8000da6:	400c      	ands	r4, r1
 8000da8:	e73a      	b.n	8000c20 <__aeabi_fsub+0x14c>
 8000daa:	000c      	movs	r4, r1
 8000dac:	2501      	movs	r5, #1
 8000dae:	1af3      	subs	r3, r6, r3
 8000db0:	e6f5      	b.n	8000b9e <__aeabi_fsub+0xca>
 8000db2:	0033      	movs	r3, r6
 8000db4:	e734      	b.n	8000c20 <__aeabi_fsub+0x14c>
 8000db6:	199b      	adds	r3, r3, r6
 8000db8:	2200      	movs	r2, #0
 8000dba:	0159      	lsls	r1, r3, #5
 8000dbc:	d5c1      	bpl.n	8000d42 <__aeabi_fsub+0x26e>
 8000dbe:	4a15      	ldr	r2, [pc, #84]	@ (8000e14 <__aeabi_fsub+0x340>)
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	08db      	lsrs	r3, r3, #3
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	e72d      	b.n	8000c24 <__aeabi_fsub+0x150>
 8000dc8:	2a00      	cmp	r2, #0
 8000dca:	d100      	bne.n	8000dce <__aeabi_fsub+0x2fa>
 8000dcc:	e77e      	b.n	8000ccc <__aeabi_fsub+0x1f8>
 8000dce:	0013      	movs	r3, r2
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	08db      	lsrs	r3, r3, #3
 8000dd4:	e726      	b.n	8000c24 <__aeabi_fsub+0x150>
 8000dd6:	2380      	movs	r3, #128	@ 0x80
 8000dd8:	2400      	movs	r4, #0
 8000dda:	20ff      	movs	r0, #255	@ 0xff
 8000ddc:	03db      	lsls	r3, r3, #15
 8000dde:	e6f1      	b.n	8000bc4 <__aeabi_fsub+0xf0>
 8000de0:	2a00      	cmp	r2, #0
 8000de2:	d100      	bne.n	8000de6 <__aeabi_fsub+0x312>
 8000de4:	e756      	b.n	8000c94 <__aeabi_fsub+0x1c0>
 8000de6:	1b47      	subs	r7, r0, r5
 8000de8:	003a      	movs	r2, r7
 8000dea:	2d00      	cmp	r5, #0
 8000dec:	d100      	bne.n	8000df0 <__aeabi_fsub+0x31c>
 8000dee:	e730      	b.n	8000c52 <__aeabi_fsub+0x17e>
 8000df0:	2280      	movs	r2, #128	@ 0x80
 8000df2:	04d2      	lsls	r2, r2, #19
 8000df4:	000c      	movs	r4, r1
 8000df6:	4313      	orrs	r3, r2
 8000df8:	e77f      	b.n	8000cfa <__aeabi_fsub+0x226>
 8000dfa:	2a00      	cmp	r2, #0
 8000dfc:	d100      	bne.n	8000e00 <__aeabi_fsub+0x32c>
 8000dfe:	e701      	b.n	8000c04 <__aeabi_fsub+0x130>
 8000e00:	1b41      	subs	r1, r0, r5
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d101      	bne.n	8000e0a <__aeabi_fsub+0x336>
 8000e06:	000a      	movs	r2, r1
 8000e08:	e788      	b.n	8000d1c <__aeabi_fsub+0x248>
 8000e0a:	2280      	movs	r2, #128	@ 0x80
 8000e0c:	04d2      	lsls	r2, r2, #19
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	e78b      	b.n	8000d2a <__aeabi_fsub+0x256>
 8000e12:	46c0      	nop			@ (mov r8, r8)
 8000e14:	fbffffff 	.word	0xfbffffff
 8000e18:	7dffffff 	.word	0x7dffffff

08000e1c <__aeabi_f2iz>:
 8000e1c:	0241      	lsls	r1, r0, #9
 8000e1e:	0042      	lsls	r2, r0, #1
 8000e20:	0fc3      	lsrs	r3, r0, #31
 8000e22:	0a49      	lsrs	r1, r1, #9
 8000e24:	2000      	movs	r0, #0
 8000e26:	0e12      	lsrs	r2, r2, #24
 8000e28:	2a7e      	cmp	r2, #126	@ 0x7e
 8000e2a:	dd03      	ble.n	8000e34 <__aeabi_f2iz+0x18>
 8000e2c:	2a9d      	cmp	r2, #157	@ 0x9d
 8000e2e:	dd02      	ble.n	8000e36 <__aeabi_f2iz+0x1a>
 8000e30:	4a09      	ldr	r2, [pc, #36]	@ (8000e58 <__aeabi_f2iz+0x3c>)
 8000e32:	1898      	adds	r0, r3, r2
 8000e34:	4770      	bx	lr
 8000e36:	2080      	movs	r0, #128	@ 0x80
 8000e38:	0400      	lsls	r0, r0, #16
 8000e3a:	4301      	orrs	r1, r0
 8000e3c:	2a95      	cmp	r2, #149	@ 0x95
 8000e3e:	dc07      	bgt.n	8000e50 <__aeabi_f2iz+0x34>
 8000e40:	2096      	movs	r0, #150	@ 0x96
 8000e42:	1a82      	subs	r2, r0, r2
 8000e44:	40d1      	lsrs	r1, r2
 8000e46:	4248      	negs	r0, r1
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d1f3      	bne.n	8000e34 <__aeabi_f2iz+0x18>
 8000e4c:	0008      	movs	r0, r1
 8000e4e:	e7f1      	b.n	8000e34 <__aeabi_f2iz+0x18>
 8000e50:	3a96      	subs	r2, #150	@ 0x96
 8000e52:	4091      	lsls	r1, r2
 8000e54:	e7f7      	b.n	8000e46 <__aeabi_f2iz+0x2a>
 8000e56:	46c0      	nop			@ (mov r8, r8)
 8000e58:	7fffffff 	.word	0x7fffffff

08000e5c <__aeabi_dmul>:
 8000e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e5e:	4657      	mov	r7, sl
 8000e60:	46de      	mov	lr, fp
 8000e62:	464e      	mov	r6, r9
 8000e64:	4645      	mov	r5, r8
 8000e66:	b5e0      	push	{r5, r6, r7, lr}
 8000e68:	001f      	movs	r7, r3
 8000e6a:	030b      	lsls	r3, r1, #12
 8000e6c:	0b1b      	lsrs	r3, r3, #12
 8000e6e:	0016      	movs	r6, r2
 8000e70:	469a      	mov	sl, r3
 8000e72:	0fca      	lsrs	r2, r1, #31
 8000e74:	004b      	lsls	r3, r1, #1
 8000e76:	0004      	movs	r4, r0
 8000e78:	4693      	mov	fp, r2
 8000e7a:	b087      	sub	sp, #28
 8000e7c:	0d5b      	lsrs	r3, r3, #21
 8000e7e:	d100      	bne.n	8000e82 <__aeabi_dmul+0x26>
 8000e80:	e0d5      	b.n	800102e <__aeabi_dmul+0x1d2>
 8000e82:	4abb      	ldr	r2, [pc, #748]	@ (8001170 <__aeabi_dmul+0x314>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d100      	bne.n	8000e8a <__aeabi_dmul+0x2e>
 8000e88:	e0f8      	b.n	800107c <__aeabi_dmul+0x220>
 8000e8a:	4651      	mov	r1, sl
 8000e8c:	0f42      	lsrs	r2, r0, #29
 8000e8e:	00c9      	lsls	r1, r1, #3
 8000e90:	430a      	orrs	r2, r1
 8000e92:	2180      	movs	r1, #128	@ 0x80
 8000e94:	0409      	lsls	r1, r1, #16
 8000e96:	4311      	orrs	r1, r2
 8000e98:	00c2      	lsls	r2, r0, #3
 8000e9a:	4691      	mov	r9, r2
 8000e9c:	4ab5      	ldr	r2, [pc, #724]	@ (8001174 <__aeabi_dmul+0x318>)
 8000e9e:	468a      	mov	sl, r1
 8000ea0:	189d      	adds	r5, r3, r2
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	4698      	mov	r8, r3
 8000ea6:	9302      	str	r3, [sp, #8]
 8000ea8:	033c      	lsls	r4, r7, #12
 8000eaa:	007b      	lsls	r3, r7, #1
 8000eac:	0ffa      	lsrs	r2, r7, #31
 8000eae:	0030      	movs	r0, r6
 8000eb0:	0b24      	lsrs	r4, r4, #12
 8000eb2:	0d5b      	lsrs	r3, r3, #21
 8000eb4:	9200      	str	r2, [sp, #0]
 8000eb6:	d100      	bne.n	8000eba <__aeabi_dmul+0x5e>
 8000eb8:	e096      	b.n	8000fe8 <__aeabi_dmul+0x18c>
 8000eba:	4aad      	ldr	r2, [pc, #692]	@ (8001170 <__aeabi_dmul+0x314>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d031      	beq.n	8000f24 <__aeabi_dmul+0xc8>
 8000ec0:	0f72      	lsrs	r2, r6, #29
 8000ec2:	00e4      	lsls	r4, r4, #3
 8000ec4:	4322      	orrs	r2, r4
 8000ec6:	2480      	movs	r4, #128	@ 0x80
 8000ec8:	0424      	lsls	r4, r4, #16
 8000eca:	4314      	orrs	r4, r2
 8000ecc:	4aa9      	ldr	r2, [pc, #676]	@ (8001174 <__aeabi_dmul+0x318>)
 8000ece:	00f0      	lsls	r0, r6, #3
 8000ed0:	4694      	mov	ip, r2
 8000ed2:	4463      	add	r3, ip
 8000ed4:	195b      	adds	r3, r3, r5
 8000ed6:	1c5a      	adds	r2, r3, #1
 8000ed8:	9201      	str	r2, [sp, #4]
 8000eda:	4642      	mov	r2, r8
 8000edc:	2600      	movs	r6, #0
 8000ede:	2a0a      	cmp	r2, #10
 8000ee0:	dc42      	bgt.n	8000f68 <__aeabi_dmul+0x10c>
 8000ee2:	465a      	mov	r2, fp
 8000ee4:	9900      	ldr	r1, [sp, #0]
 8000ee6:	404a      	eors	r2, r1
 8000ee8:	4693      	mov	fp, r2
 8000eea:	4642      	mov	r2, r8
 8000eec:	2a02      	cmp	r2, #2
 8000eee:	dc32      	bgt.n	8000f56 <__aeabi_dmul+0xfa>
 8000ef0:	3a01      	subs	r2, #1
 8000ef2:	2a01      	cmp	r2, #1
 8000ef4:	d900      	bls.n	8000ef8 <__aeabi_dmul+0x9c>
 8000ef6:	e149      	b.n	800118c <__aeabi_dmul+0x330>
 8000ef8:	2e02      	cmp	r6, #2
 8000efa:	d100      	bne.n	8000efe <__aeabi_dmul+0xa2>
 8000efc:	e0ca      	b.n	8001094 <__aeabi_dmul+0x238>
 8000efe:	2e01      	cmp	r6, #1
 8000f00:	d13d      	bne.n	8000f7e <__aeabi_dmul+0x122>
 8000f02:	2300      	movs	r3, #0
 8000f04:	2400      	movs	r4, #0
 8000f06:	2200      	movs	r2, #0
 8000f08:	0010      	movs	r0, r2
 8000f0a:	465a      	mov	r2, fp
 8000f0c:	051b      	lsls	r3, r3, #20
 8000f0e:	4323      	orrs	r3, r4
 8000f10:	07d2      	lsls	r2, r2, #31
 8000f12:	4313      	orrs	r3, r2
 8000f14:	0019      	movs	r1, r3
 8000f16:	b007      	add	sp, #28
 8000f18:	bcf0      	pop	{r4, r5, r6, r7}
 8000f1a:	46bb      	mov	fp, r7
 8000f1c:	46b2      	mov	sl, r6
 8000f1e:	46a9      	mov	r9, r5
 8000f20:	46a0      	mov	r8, r4
 8000f22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f24:	4b92      	ldr	r3, [pc, #584]	@ (8001170 <__aeabi_dmul+0x314>)
 8000f26:	4326      	orrs	r6, r4
 8000f28:	18eb      	adds	r3, r5, r3
 8000f2a:	2e00      	cmp	r6, #0
 8000f2c:	d100      	bne.n	8000f30 <__aeabi_dmul+0xd4>
 8000f2e:	e0bb      	b.n	80010a8 <__aeabi_dmul+0x24c>
 8000f30:	2203      	movs	r2, #3
 8000f32:	4641      	mov	r1, r8
 8000f34:	4311      	orrs	r1, r2
 8000f36:	465a      	mov	r2, fp
 8000f38:	4688      	mov	r8, r1
 8000f3a:	9900      	ldr	r1, [sp, #0]
 8000f3c:	404a      	eors	r2, r1
 8000f3e:	2180      	movs	r1, #128	@ 0x80
 8000f40:	0109      	lsls	r1, r1, #4
 8000f42:	468c      	mov	ip, r1
 8000f44:	0029      	movs	r1, r5
 8000f46:	4461      	add	r1, ip
 8000f48:	9101      	str	r1, [sp, #4]
 8000f4a:	4641      	mov	r1, r8
 8000f4c:	290a      	cmp	r1, #10
 8000f4e:	dd00      	ble.n	8000f52 <__aeabi_dmul+0xf6>
 8000f50:	e233      	b.n	80013ba <__aeabi_dmul+0x55e>
 8000f52:	4693      	mov	fp, r2
 8000f54:	2603      	movs	r6, #3
 8000f56:	4642      	mov	r2, r8
 8000f58:	2701      	movs	r7, #1
 8000f5a:	4097      	lsls	r7, r2
 8000f5c:	21a6      	movs	r1, #166	@ 0xa6
 8000f5e:	003a      	movs	r2, r7
 8000f60:	00c9      	lsls	r1, r1, #3
 8000f62:	400a      	ands	r2, r1
 8000f64:	420f      	tst	r7, r1
 8000f66:	d031      	beq.n	8000fcc <__aeabi_dmul+0x170>
 8000f68:	9e02      	ldr	r6, [sp, #8]
 8000f6a:	2e02      	cmp	r6, #2
 8000f6c:	d100      	bne.n	8000f70 <__aeabi_dmul+0x114>
 8000f6e:	e235      	b.n	80013dc <__aeabi_dmul+0x580>
 8000f70:	2e03      	cmp	r6, #3
 8000f72:	d100      	bne.n	8000f76 <__aeabi_dmul+0x11a>
 8000f74:	e1d2      	b.n	800131c <__aeabi_dmul+0x4c0>
 8000f76:	4654      	mov	r4, sl
 8000f78:	4648      	mov	r0, r9
 8000f7a:	2e01      	cmp	r6, #1
 8000f7c:	d0c1      	beq.n	8000f02 <__aeabi_dmul+0xa6>
 8000f7e:	9a01      	ldr	r2, [sp, #4]
 8000f80:	4b7d      	ldr	r3, [pc, #500]	@ (8001178 <__aeabi_dmul+0x31c>)
 8000f82:	4694      	mov	ip, r2
 8000f84:	4463      	add	r3, ip
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	dc00      	bgt.n	8000f8c <__aeabi_dmul+0x130>
 8000f8a:	e0c0      	b.n	800110e <__aeabi_dmul+0x2b2>
 8000f8c:	0742      	lsls	r2, r0, #29
 8000f8e:	d009      	beq.n	8000fa4 <__aeabi_dmul+0x148>
 8000f90:	220f      	movs	r2, #15
 8000f92:	4002      	ands	r2, r0
 8000f94:	2a04      	cmp	r2, #4
 8000f96:	d005      	beq.n	8000fa4 <__aeabi_dmul+0x148>
 8000f98:	1d02      	adds	r2, r0, #4
 8000f9a:	4282      	cmp	r2, r0
 8000f9c:	4180      	sbcs	r0, r0
 8000f9e:	4240      	negs	r0, r0
 8000fa0:	1824      	adds	r4, r4, r0
 8000fa2:	0010      	movs	r0, r2
 8000fa4:	01e2      	lsls	r2, r4, #7
 8000fa6:	d506      	bpl.n	8000fb6 <__aeabi_dmul+0x15a>
 8000fa8:	4b74      	ldr	r3, [pc, #464]	@ (800117c <__aeabi_dmul+0x320>)
 8000faa:	9a01      	ldr	r2, [sp, #4]
 8000fac:	401c      	ands	r4, r3
 8000fae:	2380      	movs	r3, #128	@ 0x80
 8000fb0:	4694      	mov	ip, r2
 8000fb2:	00db      	lsls	r3, r3, #3
 8000fb4:	4463      	add	r3, ip
 8000fb6:	4a72      	ldr	r2, [pc, #456]	@ (8001180 <__aeabi_dmul+0x324>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	dc6b      	bgt.n	8001094 <__aeabi_dmul+0x238>
 8000fbc:	0762      	lsls	r2, r4, #29
 8000fbe:	08c0      	lsrs	r0, r0, #3
 8000fc0:	0264      	lsls	r4, r4, #9
 8000fc2:	055b      	lsls	r3, r3, #21
 8000fc4:	4302      	orrs	r2, r0
 8000fc6:	0b24      	lsrs	r4, r4, #12
 8000fc8:	0d5b      	lsrs	r3, r3, #21
 8000fca:	e79d      	b.n	8000f08 <__aeabi_dmul+0xac>
 8000fcc:	2190      	movs	r1, #144	@ 0x90
 8000fce:	0089      	lsls	r1, r1, #2
 8000fd0:	420f      	tst	r7, r1
 8000fd2:	d163      	bne.n	800109c <__aeabi_dmul+0x240>
 8000fd4:	2288      	movs	r2, #136	@ 0x88
 8000fd6:	423a      	tst	r2, r7
 8000fd8:	d100      	bne.n	8000fdc <__aeabi_dmul+0x180>
 8000fda:	e0d7      	b.n	800118c <__aeabi_dmul+0x330>
 8000fdc:	9b00      	ldr	r3, [sp, #0]
 8000fde:	46a2      	mov	sl, r4
 8000fe0:	469b      	mov	fp, r3
 8000fe2:	4681      	mov	r9, r0
 8000fe4:	9602      	str	r6, [sp, #8]
 8000fe6:	e7bf      	b.n	8000f68 <__aeabi_dmul+0x10c>
 8000fe8:	0023      	movs	r3, r4
 8000fea:	4333      	orrs	r3, r6
 8000fec:	d100      	bne.n	8000ff0 <__aeabi_dmul+0x194>
 8000fee:	e07f      	b.n	80010f0 <__aeabi_dmul+0x294>
 8000ff0:	2c00      	cmp	r4, #0
 8000ff2:	d100      	bne.n	8000ff6 <__aeabi_dmul+0x19a>
 8000ff4:	e1ad      	b.n	8001352 <__aeabi_dmul+0x4f6>
 8000ff6:	0020      	movs	r0, r4
 8000ff8:	f000 faaa 	bl	8001550 <__clzsi2>
 8000ffc:	0002      	movs	r2, r0
 8000ffe:	0003      	movs	r3, r0
 8001000:	3a0b      	subs	r2, #11
 8001002:	201d      	movs	r0, #29
 8001004:	0019      	movs	r1, r3
 8001006:	1a82      	subs	r2, r0, r2
 8001008:	0030      	movs	r0, r6
 800100a:	3908      	subs	r1, #8
 800100c:	40d0      	lsrs	r0, r2
 800100e:	408c      	lsls	r4, r1
 8001010:	4304      	orrs	r4, r0
 8001012:	0030      	movs	r0, r6
 8001014:	4088      	lsls	r0, r1
 8001016:	4a5b      	ldr	r2, [pc, #364]	@ (8001184 <__aeabi_dmul+0x328>)
 8001018:	1aeb      	subs	r3, r5, r3
 800101a:	4694      	mov	ip, r2
 800101c:	4463      	add	r3, ip
 800101e:	1c5a      	adds	r2, r3, #1
 8001020:	9201      	str	r2, [sp, #4]
 8001022:	4642      	mov	r2, r8
 8001024:	2600      	movs	r6, #0
 8001026:	2a0a      	cmp	r2, #10
 8001028:	dc00      	bgt.n	800102c <__aeabi_dmul+0x1d0>
 800102a:	e75a      	b.n	8000ee2 <__aeabi_dmul+0x86>
 800102c:	e79c      	b.n	8000f68 <__aeabi_dmul+0x10c>
 800102e:	4653      	mov	r3, sl
 8001030:	4303      	orrs	r3, r0
 8001032:	4699      	mov	r9, r3
 8001034:	d054      	beq.n	80010e0 <__aeabi_dmul+0x284>
 8001036:	4653      	mov	r3, sl
 8001038:	2b00      	cmp	r3, #0
 800103a:	d100      	bne.n	800103e <__aeabi_dmul+0x1e2>
 800103c:	e177      	b.n	800132e <__aeabi_dmul+0x4d2>
 800103e:	4650      	mov	r0, sl
 8001040:	f000 fa86 	bl	8001550 <__clzsi2>
 8001044:	230b      	movs	r3, #11
 8001046:	425b      	negs	r3, r3
 8001048:	469c      	mov	ip, r3
 800104a:	0002      	movs	r2, r0
 800104c:	4484      	add	ip, r0
 800104e:	0011      	movs	r1, r2
 8001050:	4650      	mov	r0, sl
 8001052:	3908      	subs	r1, #8
 8001054:	4088      	lsls	r0, r1
 8001056:	231d      	movs	r3, #29
 8001058:	4680      	mov	r8, r0
 800105a:	4660      	mov	r0, ip
 800105c:	1a1b      	subs	r3, r3, r0
 800105e:	0020      	movs	r0, r4
 8001060:	40d8      	lsrs	r0, r3
 8001062:	0003      	movs	r3, r0
 8001064:	4640      	mov	r0, r8
 8001066:	4303      	orrs	r3, r0
 8001068:	469a      	mov	sl, r3
 800106a:	0023      	movs	r3, r4
 800106c:	408b      	lsls	r3, r1
 800106e:	4699      	mov	r9, r3
 8001070:	2300      	movs	r3, #0
 8001072:	4d44      	ldr	r5, [pc, #272]	@ (8001184 <__aeabi_dmul+0x328>)
 8001074:	4698      	mov	r8, r3
 8001076:	1aad      	subs	r5, r5, r2
 8001078:	9302      	str	r3, [sp, #8]
 800107a:	e715      	b.n	8000ea8 <__aeabi_dmul+0x4c>
 800107c:	4652      	mov	r2, sl
 800107e:	4302      	orrs	r2, r0
 8001080:	4691      	mov	r9, r2
 8001082:	d126      	bne.n	80010d2 <__aeabi_dmul+0x276>
 8001084:	2200      	movs	r2, #0
 8001086:	001d      	movs	r5, r3
 8001088:	2302      	movs	r3, #2
 800108a:	4692      	mov	sl, r2
 800108c:	3208      	adds	r2, #8
 800108e:	4690      	mov	r8, r2
 8001090:	9302      	str	r3, [sp, #8]
 8001092:	e709      	b.n	8000ea8 <__aeabi_dmul+0x4c>
 8001094:	2400      	movs	r4, #0
 8001096:	2200      	movs	r2, #0
 8001098:	4b35      	ldr	r3, [pc, #212]	@ (8001170 <__aeabi_dmul+0x314>)
 800109a:	e735      	b.n	8000f08 <__aeabi_dmul+0xac>
 800109c:	2300      	movs	r3, #0
 800109e:	2480      	movs	r4, #128	@ 0x80
 80010a0:	469b      	mov	fp, r3
 80010a2:	0324      	lsls	r4, r4, #12
 80010a4:	4b32      	ldr	r3, [pc, #200]	@ (8001170 <__aeabi_dmul+0x314>)
 80010a6:	e72f      	b.n	8000f08 <__aeabi_dmul+0xac>
 80010a8:	2202      	movs	r2, #2
 80010aa:	4641      	mov	r1, r8
 80010ac:	4311      	orrs	r1, r2
 80010ae:	2280      	movs	r2, #128	@ 0x80
 80010b0:	0112      	lsls	r2, r2, #4
 80010b2:	4694      	mov	ip, r2
 80010b4:	002a      	movs	r2, r5
 80010b6:	4462      	add	r2, ip
 80010b8:	4688      	mov	r8, r1
 80010ba:	9201      	str	r2, [sp, #4]
 80010bc:	290a      	cmp	r1, #10
 80010be:	dd00      	ble.n	80010c2 <__aeabi_dmul+0x266>
 80010c0:	e752      	b.n	8000f68 <__aeabi_dmul+0x10c>
 80010c2:	465a      	mov	r2, fp
 80010c4:	2000      	movs	r0, #0
 80010c6:	9900      	ldr	r1, [sp, #0]
 80010c8:	0004      	movs	r4, r0
 80010ca:	404a      	eors	r2, r1
 80010cc:	4693      	mov	fp, r2
 80010ce:	2602      	movs	r6, #2
 80010d0:	e70b      	b.n	8000eea <__aeabi_dmul+0x8e>
 80010d2:	220c      	movs	r2, #12
 80010d4:	001d      	movs	r5, r3
 80010d6:	2303      	movs	r3, #3
 80010d8:	4681      	mov	r9, r0
 80010da:	4690      	mov	r8, r2
 80010dc:	9302      	str	r3, [sp, #8]
 80010de:	e6e3      	b.n	8000ea8 <__aeabi_dmul+0x4c>
 80010e0:	2300      	movs	r3, #0
 80010e2:	469a      	mov	sl, r3
 80010e4:	3304      	adds	r3, #4
 80010e6:	4698      	mov	r8, r3
 80010e8:	3b03      	subs	r3, #3
 80010ea:	2500      	movs	r5, #0
 80010ec:	9302      	str	r3, [sp, #8]
 80010ee:	e6db      	b.n	8000ea8 <__aeabi_dmul+0x4c>
 80010f0:	4642      	mov	r2, r8
 80010f2:	3301      	adds	r3, #1
 80010f4:	431a      	orrs	r2, r3
 80010f6:	002b      	movs	r3, r5
 80010f8:	4690      	mov	r8, r2
 80010fa:	1c5a      	adds	r2, r3, #1
 80010fc:	9201      	str	r2, [sp, #4]
 80010fe:	4642      	mov	r2, r8
 8001100:	2400      	movs	r4, #0
 8001102:	2000      	movs	r0, #0
 8001104:	2601      	movs	r6, #1
 8001106:	2a0a      	cmp	r2, #10
 8001108:	dc00      	bgt.n	800110c <__aeabi_dmul+0x2b0>
 800110a:	e6ea      	b.n	8000ee2 <__aeabi_dmul+0x86>
 800110c:	e72c      	b.n	8000f68 <__aeabi_dmul+0x10c>
 800110e:	2201      	movs	r2, #1
 8001110:	1ad2      	subs	r2, r2, r3
 8001112:	2a38      	cmp	r2, #56	@ 0x38
 8001114:	dd00      	ble.n	8001118 <__aeabi_dmul+0x2bc>
 8001116:	e6f4      	b.n	8000f02 <__aeabi_dmul+0xa6>
 8001118:	2a1f      	cmp	r2, #31
 800111a:	dc00      	bgt.n	800111e <__aeabi_dmul+0x2c2>
 800111c:	e12a      	b.n	8001374 <__aeabi_dmul+0x518>
 800111e:	211f      	movs	r1, #31
 8001120:	4249      	negs	r1, r1
 8001122:	1acb      	subs	r3, r1, r3
 8001124:	0021      	movs	r1, r4
 8001126:	40d9      	lsrs	r1, r3
 8001128:	000b      	movs	r3, r1
 800112a:	2a20      	cmp	r2, #32
 800112c:	d005      	beq.n	800113a <__aeabi_dmul+0x2de>
 800112e:	4a16      	ldr	r2, [pc, #88]	@ (8001188 <__aeabi_dmul+0x32c>)
 8001130:	9d01      	ldr	r5, [sp, #4]
 8001132:	4694      	mov	ip, r2
 8001134:	4465      	add	r5, ip
 8001136:	40ac      	lsls	r4, r5
 8001138:	4320      	orrs	r0, r4
 800113a:	1e42      	subs	r2, r0, #1
 800113c:	4190      	sbcs	r0, r2
 800113e:	4318      	orrs	r0, r3
 8001140:	2307      	movs	r3, #7
 8001142:	0019      	movs	r1, r3
 8001144:	2400      	movs	r4, #0
 8001146:	4001      	ands	r1, r0
 8001148:	4203      	tst	r3, r0
 800114a:	d00c      	beq.n	8001166 <__aeabi_dmul+0x30a>
 800114c:	230f      	movs	r3, #15
 800114e:	4003      	ands	r3, r0
 8001150:	2b04      	cmp	r3, #4
 8001152:	d100      	bne.n	8001156 <__aeabi_dmul+0x2fa>
 8001154:	e140      	b.n	80013d8 <__aeabi_dmul+0x57c>
 8001156:	1d03      	adds	r3, r0, #4
 8001158:	4283      	cmp	r3, r0
 800115a:	41a4      	sbcs	r4, r4
 800115c:	0018      	movs	r0, r3
 800115e:	4264      	negs	r4, r4
 8001160:	0761      	lsls	r1, r4, #29
 8001162:	0264      	lsls	r4, r4, #9
 8001164:	0b24      	lsrs	r4, r4, #12
 8001166:	08c2      	lsrs	r2, r0, #3
 8001168:	2300      	movs	r3, #0
 800116a:	430a      	orrs	r2, r1
 800116c:	e6cc      	b.n	8000f08 <__aeabi_dmul+0xac>
 800116e:	46c0      	nop			@ (mov r8, r8)
 8001170:	000007ff 	.word	0x000007ff
 8001174:	fffffc01 	.word	0xfffffc01
 8001178:	000003ff 	.word	0x000003ff
 800117c:	feffffff 	.word	0xfeffffff
 8001180:	000007fe 	.word	0x000007fe
 8001184:	fffffc0d 	.word	0xfffffc0d
 8001188:	0000043e 	.word	0x0000043e
 800118c:	4649      	mov	r1, r9
 800118e:	464a      	mov	r2, r9
 8001190:	0409      	lsls	r1, r1, #16
 8001192:	0c09      	lsrs	r1, r1, #16
 8001194:	000d      	movs	r5, r1
 8001196:	0c16      	lsrs	r6, r2, #16
 8001198:	0c02      	lsrs	r2, r0, #16
 800119a:	0400      	lsls	r0, r0, #16
 800119c:	0c00      	lsrs	r0, r0, #16
 800119e:	4345      	muls	r5, r0
 80011a0:	46ac      	mov	ip, r5
 80011a2:	0005      	movs	r5, r0
 80011a4:	4375      	muls	r5, r6
 80011a6:	46a8      	mov	r8, r5
 80011a8:	0015      	movs	r5, r2
 80011aa:	000f      	movs	r7, r1
 80011ac:	4375      	muls	r5, r6
 80011ae:	9200      	str	r2, [sp, #0]
 80011b0:	9502      	str	r5, [sp, #8]
 80011b2:	002a      	movs	r2, r5
 80011b4:	9d00      	ldr	r5, [sp, #0]
 80011b6:	436f      	muls	r7, r5
 80011b8:	4665      	mov	r5, ip
 80011ba:	0c2d      	lsrs	r5, r5, #16
 80011bc:	46a9      	mov	r9, r5
 80011be:	4447      	add	r7, r8
 80011c0:	444f      	add	r7, r9
 80011c2:	45b8      	cmp	r8, r7
 80011c4:	d905      	bls.n	80011d2 <__aeabi_dmul+0x376>
 80011c6:	0015      	movs	r5, r2
 80011c8:	2280      	movs	r2, #128	@ 0x80
 80011ca:	0252      	lsls	r2, r2, #9
 80011cc:	4690      	mov	r8, r2
 80011ce:	4445      	add	r5, r8
 80011d0:	9502      	str	r5, [sp, #8]
 80011d2:	0c3d      	lsrs	r5, r7, #16
 80011d4:	9503      	str	r5, [sp, #12]
 80011d6:	4665      	mov	r5, ip
 80011d8:	042d      	lsls	r5, r5, #16
 80011da:	043f      	lsls	r7, r7, #16
 80011dc:	0c2d      	lsrs	r5, r5, #16
 80011de:	46ac      	mov	ip, r5
 80011e0:	003d      	movs	r5, r7
 80011e2:	4465      	add	r5, ip
 80011e4:	9504      	str	r5, [sp, #16]
 80011e6:	0c25      	lsrs	r5, r4, #16
 80011e8:	0424      	lsls	r4, r4, #16
 80011ea:	0c24      	lsrs	r4, r4, #16
 80011ec:	46ac      	mov	ip, r5
 80011ee:	0025      	movs	r5, r4
 80011f0:	4375      	muls	r5, r6
 80011f2:	46a8      	mov	r8, r5
 80011f4:	4665      	mov	r5, ip
 80011f6:	000f      	movs	r7, r1
 80011f8:	4369      	muls	r1, r5
 80011fa:	4441      	add	r1, r8
 80011fc:	4689      	mov	r9, r1
 80011fe:	4367      	muls	r7, r4
 8001200:	0c39      	lsrs	r1, r7, #16
 8001202:	4449      	add	r1, r9
 8001204:	436e      	muls	r6, r5
 8001206:	4588      	cmp	r8, r1
 8001208:	d903      	bls.n	8001212 <__aeabi_dmul+0x3b6>
 800120a:	2280      	movs	r2, #128	@ 0x80
 800120c:	0252      	lsls	r2, r2, #9
 800120e:	4690      	mov	r8, r2
 8001210:	4446      	add	r6, r8
 8001212:	0c0d      	lsrs	r5, r1, #16
 8001214:	46a8      	mov	r8, r5
 8001216:	0035      	movs	r5, r6
 8001218:	4445      	add	r5, r8
 800121a:	9505      	str	r5, [sp, #20]
 800121c:	9d03      	ldr	r5, [sp, #12]
 800121e:	043f      	lsls	r7, r7, #16
 8001220:	46a8      	mov	r8, r5
 8001222:	0c3f      	lsrs	r7, r7, #16
 8001224:	0409      	lsls	r1, r1, #16
 8001226:	19c9      	adds	r1, r1, r7
 8001228:	4488      	add	r8, r1
 800122a:	4645      	mov	r5, r8
 800122c:	9503      	str	r5, [sp, #12]
 800122e:	4655      	mov	r5, sl
 8001230:	042e      	lsls	r6, r5, #16
 8001232:	0c36      	lsrs	r6, r6, #16
 8001234:	0c2f      	lsrs	r7, r5, #16
 8001236:	0035      	movs	r5, r6
 8001238:	4345      	muls	r5, r0
 800123a:	4378      	muls	r0, r7
 800123c:	4681      	mov	r9, r0
 800123e:	0038      	movs	r0, r7
 8001240:	46a8      	mov	r8, r5
 8001242:	0c2d      	lsrs	r5, r5, #16
 8001244:	46aa      	mov	sl, r5
 8001246:	9a00      	ldr	r2, [sp, #0]
 8001248:	4350      	muls	r0, r2
 800124a:	4372      	muls	r2, r6
 800124c:	444a      	add	r2, r9
 800124e:	4452      	add	r2, sl
 8001250:	4591      	cmp	r9, r2
 8001252:	d903      	bls.n	800125c <__aeabi_dmul+0x400>
 8001254:	2580      	movs	r5, #128	@ 0x80
 8001256:	026d      	lsls	r5, r5, #9
 8001258:	46a9      	mov	r9, r5
 800125a:	4448      	add	r0, r9
 800125c:	0c15      	lsrs	r5, r2, #16
 800125e:	46a9      	mov	r9, r5
 8001260:	4645      	mov	r5, r8
 8001262:	042d      	lsls	r5, r5, #16
 8001264:	0c2d      	lsrs	r5, r5, #16
 8001266:	46a8      	mov	r8, r5
 8001268:	4665      	mov	r5, ip
 800126a:	437d      	muls	r5, r7
 800126c:	0412      	lsls	r2, r2, #16
 800126e:	4448      	add	r0, r9
 8001270:	4490      	add	r8, r2
 8001272:	46a9      	mov	r9, r5
 8001274:	0032      	movs	r2, r6
 8001276:	4665      	mov	r5, ip
 8001278:	4362      	muls	r2, r4
 800127a:	436e      	muls	r6, r5
 800127c:	437c      	muls	r4, r7
 800127e:	0c17      	lsrs	r7, r2, #16
 8001280:	1936      	adds	r6, r6, r4
 8001282:	19bf      	adds	r7, r7, r6
 8001284:	42bc      	cmp	r4, r7
 8001286:	d903      	bls.n	8001290 <__aeabi_dmul+0x434>
 8001288:	2480      	movs	r4, #128	@ 0x80
 800128a:	0264      	lsls	r4, r4, #9
 800128c:	46a4      	mov	ip, r4
 800128e:	44e1      	add	r9, ip
 8001290:	9c02      	ldr	r4, [sp, #8]
 8001292:	9e03      	ldr	r6, [sp, #12]
 8001294:	46a4      	mov	ip, r4
 8001296:	9d05      	ldr	r5, [sp, #20]
 8001298:	4466      	add	r6, ip
 800129a:	428e      	cmp	r6, r1
 800129c:	4189      	sbcs	r1, r1
 800129e:	46ac      	mov	ip, r5
 80012a0:	0412      	lsls	r2, r2, #16
 80012a2:	043c      	lsls	r4, r7, #16
 80012a4:	0c12      	lsrs	r2, r2, #16
 80012a6:	18a2      	adds	r2, r4, r2
 80012a8:	4462      	add	r2, ip
 80012aa:	4249      	negs	r1, r1
 80012ac:	1854      	adds	r4, r2, r1
 80012ae:	4446      	add	r6, r8
 80012b0:	46a4      	mov	ip, r4
 80012b2:	4546      	cmp	r6, r8
 80012b4:	41a4      	sbcs	r4, r4
 80012b6:	4682      	mov	sl, r0
 80012b8:	4264      	negs	r4, r4
 80012ba:	46a0      	mov	r8, r4
 80012bc:	42aa      	cmp	r2, r5
 80012be:	4192      	sbcs	r2, r2
 80012c0:	458c      	cmp	ip, r1
 80012c2:	4189      	sbcs	r1, r1
 80012c4:	44e2      	add	sl, ip
 80012c6:	44d0      	add	r8, sl
 80012c8:	4249      	negs	r1, r1
 80012ca:	4252      	negs	r2, r2
 80012cc:	430a      	orrs	r2, r1
 80012ce:	45a0      	cmp	r8, r4
 80012d0:	41a4      	sbcs	r4, r4
 80012d2:	4582      	cmp	sl, r0
 80012d4:	4189      	sbcs	r1, r1
 80012d6:	4264      	negs	r4, r4
 80012d8:	4249      	negs	r1, r1
 80012da:	430c      	orrs	r4, r1
 80012dc:	4641      	mov	r1, r8
 80012de:	0c3f      	lsrs	r7, r7, #16
 80012e0:	19d2      	adds	r2, r2, r7
 80012e2:	1912      	adds	r2, r2, r4
 80012e4:	0dcc      	lsrs	r4, r1, #23
 80012e6:	9904      	ldr	r1, [sp, #16]
 80012e8:	0270      	lsls	r0, r6, #9
 80012ea:	4308      	orrs	r0, r1
 80012ec:	1e41      	subs	r1, r0, #1
 80012ee:	4188      	sbcs	r0, r1
 80012f0:	4641      	mov	r1, r8
 80012f2:	444a      	add	r2, r9
 80012f4:	0df6      	lsrs	r6, r6, #23
 80012f6:	0252      	lsls	r2, r2, #9
 80012f8:	4330      	orrs	r0, r6
 80012fa:	0249      	lsls	r1, r1, #9
 80012fc:	4314      	orrs	r4, r2
 80012fe:	4308      	orrs	r0, r1
 8001300:	01d2      	lsls	r2, r2, #7
 8001302:	d535      	bpl.n	8001370 <__aeabi_dmul+0x514>
 8001304:	2201      	movs	r2, #1
 8001306:	0843      	lsrs	r3, r0, #1
 8001308:	4002      	ands	r2, r0
 800130a:	4313      	orrs	r3, r2
 800130c:	07e0      	lsls	r0, r4, #31
 800130e:	4318      	orrs	r0, r3
 8001310:	0864      	lsrs	r4, r4, #1
 8001312:	e634      	b.n	8000f7e <__aeabi_dmul+0x122>
 8001314:	9b00      	ldr	r3, [sp, #0]
 8001316:	46a2      	mov	sl, r4
 8001318:	469b      	mov	fp, r3
 800131a:	4681      	mov	r9, r0
 800131c:	2480      	movs	r4, #128	@ 0x80
 800131e:	4653      	mov	r3, sl
 8001320:	0324      	lsls	r4, r4, #12
 8001322:	431c      	orrs	r4, r3
 8001324:	0324      	lsls	r4, r4, #12
 8001326:	464a      	mov	r2, r9
 8001328:	4b2e      	ldr	r3, [pc, #184]	@ (80013e4 <__aeabi_dmul+0x588>)
 800132a:	0b24      	lsrs	r4, r4, #12
 800132c:	e5ec      	b.n	8000f08 <__aeabi_dmul+0xac>
 800132e:	f000 f90f 	bl	8001550 <__clzsi2>
 8001332:	2315      	movs	r3, #21
 8001334:	469c      	mov	ip, r3
 8001336:	4484      	add	ip, r0
 8001338:	0002      	movs	r2, r0
 800133a:	4663      	mov	r3, ip
 800133c:	3220      	adds	r2, #32
 800133e:	2b1c      	cmp	r3, #28
 8001340:	dc00      	bgt.n	8001344 <__aeabi_dmul+0x4e8>
 8001342:	e684      	b.n	800104e <__aeabi_dmul+0x1f2>
 8001344:	2300      	movs	r3, #0
 8001346:	4699      	mov	r9, r3
 8001348:	0023      	movs	r3, r4
 800134a:	3808      	subs	r0, #8
 800134c:	4083      	lsls	r3, r0
 800134e:	469a      	mov	sl, r3
 8001350:	e68e      	b.n	8001070 <__aeabi_dmul+0x214>
 8001352:	f000 f8fd 	bl	8001550 <__clzsi2>
 8001356:	0002      	movs	r2, r0
 8001358:	0003      	movs	r3, r0
 800135a:	3215      	adds	r2, #21
 800135c:	3320      	adds	r3, #32
 800135e:	2a1c      	cmp	r2, #28
 8001360:	dc00      	bgt.n	8001364 <__aeabi_dmul+0x508>
 8001362:	e64e      	b.n	8001002 <__aeabi_dmul+0x1a6>
 8001364:	0002      	movs	r2, r0
 8001366:	0034      	movs	r4, r6
 8001368:	3a08      	subs	r2, #8
 800136a:	2000      	movs	r0, #0
 800136c:	4094      	lsls	r4, r2
 800136e:	e652      	b.n	8001016 <__aeabi_dmul+0x1ba>
 8001370:	9301      	str	r3, [sp, #4]
 8001372:	e604      	b.n	8000f7e <__aeabi_dmul+0x122>
 8001374:	4b1c      	ldr	r3, [pc, #112]	@ (80013e8 <__aeabi_dmul+0x58c>)
 8001376:	0021      	movs	r1, r4
 8001378:	469c      	mov	ip, r3
 800137a:	0003      	movs	r3, r0
 800137c:	9d01      	ldr	r5, [sp, #4]
 800137e:	40d3      	lsrs	r3, r2
 8001380:	4465      	add	r5, ip
 8001382:	40a9      	lsls	r1, r5
 8001384:	4319      	orrs	r1, r3
 8001386:	0003      	movs	r3, r0
 8001388:	40ab      	lsls	r3, r5
 800138a:	1e58      	subs	r0, r3, #1
 800138c:	4183      	sbcs	r3, r0
 800138e:	4319      	orrs	r1, r3
 8001390:	0008      	movs	r0, r1
 8001392:	40d4      	lsrs	r4, r2
 8001394:	074b      	lsls	r3, r1, #29
 8001396:	d009      	beq.n	80013ac <__aeabi_dmul+0x550>
 8001398:	230f      	movs	r3, #15
 800139a:	400b      	ands	r3, r1
 800139c:	2b04      	cmp	r3, #4
 800139e:	d005      	beq.n	80013ac <__aeabi_dmul+0x550>
 80013a0:	1d0b      	adds	r3, r1, #4
 80013a2:	428b      	cmp	r3, r1
 80013a4:	4180      	sbcs	r0, r0
 80013a6:	4240      	negs	r0, r0
 80013a8:	1824      	adds	r4, r4, r0
 80013aa:	0018      	movs	r0, r3
 80013ac:	0223      	lsls	r3, r4, #8
 80013ae:	d400      	bmi.n	80013b2 <__aeabi_dmul+0x556>
 80013b0:	e6d6      	b.n	8001160 <__aeabi_dmul+0x304>
 80013b2:	2301      	movs	r3, #1
 80013b4:	2400      	movs	r4, #0
 80013b6:	2200      	movs	r2, #0
 80013b8:	e5a6      	b.n	8000f08 <__aeabi_dmul+0xac>
 80013ba:	290f      	cmp	r1, #15
 80013bc:	d1aa      	bne.n	8001314 <__aeabi_dmul+0x4b8>
 80013be:	2380      	movs	r3, #128	@ 0x80
 80013c0:	4652      	mov	r2, sl
 80013c2:	031b      	lsls	r3, r3, #12
 80013c4:	421a      	tst	r2, r3
 80013c6:	d0a9      	beq.n	800131c <__aeabi_dmul+0x4c0>
 80013c8:	421c      	tst	r4, r3
 80013ca:	d1a7      	bne.n	800131c <__aeabi_dmul+0x4c0>
 80013cc:	431c      	orrs	r4, r3
 80013ce:	9b00      	ldr	r3, [sp, #0]
 80013d0:	0002      	movs	r2, r0
 80013d2:	469b      	mov	fp, r3
 80013d4:	4b03      	ldr	r3, [pc, #12]	@ (80013e4 <__aeabi_dmul+0x588>)
 80013d6:	e597      	b.n	8000f08 <__aeabi_dmul+0xac>
 80013d8:	2400      	movs	r4, #0
 80013da:	e6c1      	b.n	8001160 <__aeabi_dmul+0x304>
 80013dc:	2400      	movs	r4, #0
 80013de:	4b01      	ldr	r3, [pc, #4]	@ (80013e4 <__aeabi_dmul+0x588>)
 80013e0:	0022      	movs	r2, r4
 80013e2:	e591      	b.n	8000f08 <__aeabi_dmul+0xac>
 80013e4:	000007ff 	.word	0x000007ff
 80013e8:	0000041e 	.word	0x0000041e

080013ec <__aeabi_i2d>:
 80013ec:	b570      	push	{r4, r5, r6, lr}
 80013ee:	2800      	cmp	r0, #0
 80013f0:	d016      	beq.n	8001420 <__aeabi_i2d+0x34>
 80013f2:	17c3      	asrs	r3, r0, #31
 80013f4:	18c5      	adds	r5, r0, r3
 80013f6:	405d      	eors	r5, r3
 80013f8:	0fc4      	lsrs	r4, r0, #31
 80013fa:	0028      	movs	r0, r5
 80013fc:	f000 f8a8 	bl	8001550 <__clzsi2>
 8001400:	4b10      	ldr	r3, [pc, #64]	@ (8001444 <__aeabi_i2d+0x58>)
 8001402:	1a1b      	subs	r3, r3, r0
 8001404:	055b      	lsls	r3, r3, #21
 8001406:	0d5b      	lsrs	r3, r3, #21
 8001408:	280a      	cmp	r0, #10
 800140a:	dc14      	bgt.n	8001436 <__aeabi_i2d+0x4a>
 800140c:	0002      	movs	r2, r0
 800140e:	002e      	movs	r6, r5
 8001410:	3215      	adds	r2, #21
 8001412:	4096      	lsls	r6, r2
 8001414:	220b      	movs	r2, #11
 8001416:	1a12      	subs	r2, r2, r0
 8001418:	40d5      	lsrs	r5, r2
 800141a:	032d      	lsls	r5, r5, #12
 800141c:	0b2d      	lsrs	r5, r5, #12
 800141e:	e003      	b.n	8001428 <__aeabi_i2d+0x3c>
 8001420:	2400      	movs	r4, #0
 8001422:	2300      	movs	r3, #0
 8001424:	2500      	movs	r5, #0
 8001426:	2600      	movs	r6, #0
 8001428:	051b      	lsls	r3, r3, #20
 800142a:	432b      	orrs	r3, r5
 800142c:	07e4      	lsls	r4, r4, #31
 800142e:	4323      	orrs	r3, r4
 8001430:	0030      	movs	r0, r6
 8001432:	0019      	movs	r1, r3
 8001434:	bd70      	pop	{r4, r5, r6, pc}
 8001436:	380b      	subs	r0, #11
 8001438:	4085      	lsls	r5, r0
 800143a:	032d      	lsls	r5, r5, #12
 800143c:	2600      	movs	r6, #0
 800143e:	0b2d      	lsrs	r5, r5, #12
 8001440:	e7f2      	b.n	8001428 <__aeabi_i2d+0x3c>
 8001442:	46c0      	nop			@ (mov r8, r8)
 8001444:	0000041e 	.word	0x0000041e

08001448 <__aeabi_d2f>:
 8001448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800144a:	004b      	lsls	r3, r1, #1
 800144c:	030f      	lsls	r7, r1, #12
 800144e:	0d5b      	lsrs	r3, r3, #21
 8001450:	4c3b      	ldr	r4, [pc, #236]	@ (8001540 <__aeabi_d2f+0xf8>)
 8001452:	0f45      	lsrs	r5, r0, #29
 8001454:	b083      	sub	sp, #12
 8001456:	0a7f      	lsrs	r7, r7, #9
 8001458:	1c5e      	adds	r6, r3, #1
 800145a:	432f      	orrs	r7, r5
 800145c:	9000      	str	r0, [sp, #0]
 800145e:	9101      	str	r1, [sp, #4]
 8001460:	0fca      	lsrs	r2, r1, #31
 8001462:	00c5      	lsls	r5, r0, #3
 8001464:	4226      	tst	r6, r4
 8001466:	d00b      	beq.n	8001480 <__aeabi_d2f+0x38>
 8001468:	4936      	ldr	r1, [pc, #216]	@ (8001544 <__aeabi_d2f+0xfc>)
 800146a:	185c      	adds	r4, r3, r1
 800146c:	2cfe      	cmp	r4, #254	@ 0xfe
 800146e:	dd13      	ble.n	8001498 <__aeabi_d2f+0x50>
 8001470:	20ff      	movs	r0, #255	@ 0xff
 8001472:	2300      	movs	r3, #0
 8001474:	05c0      	lsls	r0, r0, #23
 8001476:	4318      	orrs	r0, r3
 8001478:	07d2      	lsls	r2, r2, #31
 800147a:	4310      	orrs	r0, r2
 800147c:	b003      	add	sp, #12
 800147e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001480:	2b00      	cmp	r3, #0
 8001482:	d102      	bne.n	800148a <__aeabi_d2f+0x42>
 8001484:	2000      	movs	r0, #0
 8001486:	2300      	movs	r3, #0
 8001488:	e7f4      	b.n	8001474 <__aeabi_d2f+0x2c>
 800148a:	433d      	orrs	r5, r7
 800148c:	d0f0      	beq.n	8001470 <__aeabi_d2f+0x28>
 800148e:	2380      	movs	r3, #128	@ 0x80
 8001490:	03db      	lsls	r3, r3, #15
 8001492:	20ff      	movs	r0, #255	@ 0xff
 8001494:	433b      	orrs	r3, r7
 8001496:	e7ed      	b.n	8001474 <__aeabi_d2f+0x2c>
 8001498:	2c00      	cmp	r4, #0
 800149a:	dd14      	ble.n	80014c6 <__aeabi_d2f+0x7e>
 800149c:	9b00      	ldr	r3, [sp, #0]
 800149e:	00ff      	lsls	r7, r7, #3
 80014a0:	019b      	lsls	r3, r3, #6
 80014a2:	1e58      	subs	r0, r3, #1
 80014a4:	4183      	sbcs	r3, r0
 80014a6:	0f69      	lsrs	r1, r5, #29
 80014a8:	433b      	orrs	r3, r7
 80014aa:	430b      	orrs	r3, r1
 80014ac:	0759      	lsls	r1, r3, #29
 80014ae:	d041      	beq.n	8001534 <__aeabi_d2f+0xec>
 80014b0:	210f      	movs	r1, #15
 80014b2:	4019      	ands	r1, r3
 80014b4:	2904      	cmp	r1, #4
 80014b6:	d028      	beq.n	800150a <__aeabi_d2f+0xc2>
 80014b8:	3304      	adds	r3, #4
 80014ba:	0159      	lsls	r1, r3, #5
 80014bc:	d525      	bpl.n	800150a <__aeabi_d2f+0xc2>
 80014be:	3401      	adds	r4, #1
 80014c0:	2300      	movs	r3, #0
 80014c2:	b2e0      	uxtb	r0, r4
 80014c4:	e7d6      	b.n	8001474 <__aeabi_d2f+0x2c>
 80014c6:	0021      	movs	r1, r4
 80014c8:	3117      	adds	r1, #23
 80014ca:	dbdb      	blt.n	8001484 <__aeabi_d2f+0x3c>
 80014cc:	2180      	movs	r1, #128	@ 0x80
 80014ce:	201e      	movs	r0, #30
 80014d0:	0409      	lsls	r1, r1, #16
 80014d2:	4339      	orrs	r1, r7
 80014d4:	1b00      	subs	r0, r0, r4
 80014d6:	281f      	cmp	r0, #31
 80014d8:	dd1b      	ble.n	8001512 <__aeabi_d2f+0xca>
 80014da:	2602      	movs	r6, #2
 80014dc:	4276      	negs	r6, r6
 80014de:	1b34      	subs	r4, r6, r4
 80014e0:	000e      	movs	r6, r1
 80014e2:	40e6      	lsrs	r6, r4
 80014e4:	0034      	movs	r4, r6
 80014e6:	2820      	cmp	r0, #32
 80014e8:	d004      	beq.n	80014f4 <__aeabi_d2f+0xac>
 80014ea:	4817      	ldr	r0, [pc, #92]	@ (8001548 <__aeabi_d2f+0x100>)
 80014ec:	4684      	mov	ip, r0
 80014ee:	4463      	add	r3, ip
 80014f0:	4099      	lsls	r1, r3
 80014f2:	430d      	orrs	r5, r1
 80014f4:	002b      	movs	r3, r5
 80014f6:	1e59      	subs	r1, r3, #1
 80014f8:	418b      	sbcs	r3, r1
 80014fa:	4323      	orrs	r3, r4
 80014fc:	0759      	lsls	r1, r3, #29
 80014fe:	d015      	beq.n	800152c <__aeabi_d2f+0xe4>
 8001500:	210f      	movs	r1, #15
 8001502:	2400      	movs	r4, #0
 8001504:	4019      	ands	r1, r3
 8001506:	2904      	cmp	r1, #4
 8001508:	d117      	bne.n	800153a <__aeabi_d2f+0xf2>
 800150a:	019b      	lsls	r3, r3, #6
 800150c:	0a5b      	lsrs	r3, r3, #9
 800150e:	b2e0      	uxtb	r0, r4
 8001510:	e7b0      	b.n	8001474 <__aeabi_d2f+0x2c>
 8001512:	4c0e      	ldr	r4, [pc, #56]	@ (800154c <__aeabi_d2f+0x104>)
 8001514:	191c      	adds	r4, r3, r4
 8001516:	002b      	movs	r3, r5
 8001518:	40a5      	lsls	r5, r4
 800151a:	40c3      	lsrs	r3, r0
 800151c:	40a1      	lsls	r1, r4
 800151e:	1e68      	subs	r0, r5, #1
 8001520:	4185      	sbcs	r5, r0
 8001522:	4329      	orrs	r1, r5
 8001524:	430b      	orrs	r3, r1
 8001526:	2400      	movs	r4, #0
 8001528:	0759      	lsls	r1, r3, #29
 800152a:	d1c1      	bne.n	80014b0 <__aeabi_d2f+0x68>
 800152c:	019b      	lsls	r3, r3, #6
 800152e:	2000      	movs	r0, #0
 8001530:	0a5b      	lsrs	r3, r3, #9
 8001532:	e79f      	b.n	8001474 <__aeabi_d2f+0x2c>
 8001534:	08db      	lsrs	r3, r3, #3
 8001536:	b2e0      	uxtb	r0, r4
 8001538:	e79c      	b.n	8001474 <__aeabi_d2f+0x2c>
 800153a:	3304      	adds	r3, #4
 800153c:	e7e5      	b.n	800150a <__aeabi_d2f+0xc2>
 800153e:	46c0      	nop			@ (mov r8, r8)
 8001540:	000007fe 	.word	0x000007fe
 8001544:	fffffc80 	.word	0xfffffc80
 8001548:	fffffca2 	.word	0xfffffca2
 800154c:	fffffc82 	.word	0xfffffc82

08001550 <__clzsi2>:
 8001550:	211c      	movs	r1, #28
 8001552:	2301      	movs	r3, #1
 8001554:	041b      	lsls	r3, r3, #16
 8001556:	4298      	cmp	r0, r3
 8001558:	d301      	bcc.n	800155e <__clzsi2+0xe>
 800155a:	0c00      	lsrs	r0, r0, #16
 800155c:	3910      	subs	r1, #16
 800155e:	0a1b      	lsrs	r3, r3, #8
 8001560:	4298      	cmp	r0, r3
 8001562:	d301      	bcc.n	8001568 <__clzsi2+0x18>
 8001564:	0a00      	lsrs	r0, r0, #8
 8001566:	3908      	subs	r1, #8
 8001568:	091b      	lsrs	r3, r3, #4
 800156a:	4298      	cmp	r0, r3
 800156c:	d301      	bcc.n	8001572 <__clzsi2+0x22>
 800156e:	0900      	lsrs	r0, r0, #4
 8001570:	3904      	subs	r1, #4
 8001572:	a202      	add	r2, pc, #8	@ (adr r2, 800157c <__clzsi2+0x2c>)
 8001574:	5c10      	ldrb	r0, [r2, r0]
 8001576:	1840      	adds	r0, r0, r1
 8001578:	4770      	bx	lr
 800157a:	46c0      	nop			@ (mov r8, r8)
 800157c:	02020304 	.word	0x02020304
 8001580:	01010101 	.word	0x01010101
	...

0800158c <__clzdi2>:
 800158c:	b510      	push	{r4, lr}
 800158e:	2900      	cmp	r1, #0
 8001590:	d103      	bne.n	800159a <__clzdi2+0xe>
 8001592:	f7ff ffdd 	bl	8001550 <__clzsi2>
 8001596:	3020      	adds	r0, #32
 8001598:	e002      	b.n	80015a0 <__clzdi2+0x14>
 800159a:	0008      	movs	r0, r1
 800159c:	f7ff ffd8 	bl	8001550 <__clzsi2>
 80015a0:	bd10      	pop	{r4, pc}
 80015a2:	46c0      	nop			@ (mov r8, r8)

080015a4 <IN12_set>:

//void IN12_set_digit_pairs(uint16_t first_number, uint16_t second_number) {
//	IN12_set(first_number/10, first_number%10, second_number/10, second_number%10);
//}

void IN12_set(void) {
 80015a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015a6:	46d6      	mov	lr, sl
 80015a8:	464f      	mov	r7, r9
 80015aa:	4646      	mov	r6, r8
 80015ac:	b5c0      	push	{r6, r7, lr}
	OUTPUT_DISABLE();
 80015ae:	20a0      	movs	r0, #160	@ 0xa0
 80015b0:	2201      	movs	r2, #1
 80015b2:	2180      	movs	r1, #128	@ 0x80
 80015b4:	05c0      	lsls	r0, r0, #23
 80015b6:	f001 feaf 	bl	8003318 <HAL_GPIO_WritePin>

//	shift_reg_send(clock_data.bitmask.tube[3]);
//	shift_reg_send(clock_data.bitmask.tube[2]);
//	shift_reg_send(clock_data.bitmask.tube[1]);
//	shift_reg_send(clock_data.bitmask.tube[0]);
	shift_reg_send(clock_data.bitmask.fused);
 80015ba:	4b20      	ldr	r3, [pc, #128]	@ (800163c <IN12_set+0x98>)
 80015bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80015be:	4691      	mov	r9, r2
 80015c0:	6b5f      	ldr	r7, [r3, #52]	@ 0x34
 80015c2:	243f      	movs	r4, #63	@ 0x3f
		DATA_SET((data >> bit) & 1);
 80015c4:	2320      	movs	r3, #32
 80015c6:	4698      	mov	r8, r3
 80015c8:	2501      	movs	r5, #1
 80015ca:	23a0      	movs	r3, #160	@ 0xa0
 80015cc:	05db      	lsls	r3, r3, #23
 80015ce:	469a      	mov	sl, r3
 80015d0:	e019      	b.n	8001606 <IN12_set+0x62>
 80015d2:	4643      	mov	r3, r8
 80015d4:	1b1b      	subs	r3, r3, r4
 80015d6:	003a      	movs	r2, r7
 80015d8:	409a      	lsls	r2, r3
 80015da:	0013      	movs	r3, r2
 80015dc:	464a      	mov	r2, r9
 80015de:	40e2      	lsrs	r2, r4
 80015e0:	431a      	orrs	r2, r3
 80015e2:	402a      	ands	r2, r5
 80015e4:	2140      	movs	r1, #64	@ 0x40
 80015e6:	4650      	mov	r0, sl
 80015e8:	f001 fe96 	bl	8003318 <HAL_GPIO_WritePin>
	SHIFT_REG_SET(1);
 80015ec:	4e14      	ldr	r6, [pc, #80]	@ (8001640 <IN12_set+0x9c>)
 80015ee:	002a      	movs	r2, r5
 80015f0:	2102      	movs	r1, #2
 80015f2:	0030      	movs	r0, r6
 80015f4:	f001 fe90 	bl	8003318 <HAL_GPIO_WritePin>
	SHIFT_REG_SET(0);
 80015f8:	2200      	movs	r2, #0
 80015fa:	2102      	movs	r1, #2
 80015fc:	0030      	movs	r0, r6
 80015fe:	f001 fe8b 	bl	8003318 <HAL_GPIO_WritePin>
	for (int8_t bit = 63; bit >= 0; --bit) {	// Send least significant bit first
 8001602:	3c01      	subs	r4, #1
 8001604:	d305      	bcc.n	8001612 <IN12_set+0x6e>
		DATA_SET((data >> bit) & 1);
 8001606:	0023      	movs	r3, r4
 8001608:	3b20      	subs	r3, #32
 800160a:	d4e2      	bmi.n	80015d2 <IN12_set+0x2e>
 800160c:	003a      	movs	r2, r7
 800160e:	40da      	lsrs	r2, r3
 8001610:	e7e7      	b.n	80015e2 <IN12_set+0x3e>
	STORAGE_REG_SET(1);
 8001612:	2201      	movs	r2, #1
 8001614:	2101      	movs	r1, #1
 8001616:	0030      	movs	r0, r6
 8001618:	f001 fe7e 	bl	8003318 <HAL_GPIO_WritePin>
	STORAGE_REG_SET(0);
 800161c:	2200      	movs	r2, #0
 800161e:	2101      	movs	r1, #1
 8001620:	0030      	movs	r0, r6
 8001622:	f001 fe79 	bl	8003318 <HAL_GPIO_WritePin>
	/*
	 * Toggle latch
	 */
	shift_reg_pulse_rclk(PULSE_DURATION_MS);

	OUTPUT_ENABLE();
 8001626:	20a0      	movs	r0, #160	@ 0xa0
 8001628:	2200      	movs	r2, #0
 800162a:	2180      	movs	r1, #128	@ 0x80
 800162c:	05c0      	lsls	r0, r0, #23
 800162e:	f001 fe73 	bl	8003318 <HAL_GPIO_WritePin>
}
 8001632:	bce0      	pop	{r5, r6, r7}
 8001634:	46ba      	mov	sl, r7
 8001636:	46b1      	mov	r9, r6
 8001638:	46a8      	mov	r8, r5
 800163a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800163c:	20000880 	.word	0x20000880
 8001640:	50000400 	.word	0x50000400

08001644 <bitmask_set>:

void bitmask_set(void) {
 8001644:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001646:	46c6      	mov	lr, r8
 8001648:	b500      	push	{lr}
	memset(clock_data.is_digit_on, 0, sizeof(bool)*NUM_OF_TUBES*NUM_OF_DIGITS);
 800164a:	4c23      	ldr	r4, [pc, #140]	@ (80016d8 <bitmask_set+0x94>)
 800164c:	2228      	movs	r2, #40	@ 0x28
 800164e:	2100      	movs	r1, #0
 8001650:	0020      	movs	r0, r4
 8001652:	f004 fa13 	bl	8005a7c <memset>
	clock_data.bitmask.fused = 0;
 8001656:	0026      	movs	r6, r4
 8001658:	3e08      	subs	r6, #8
 800165a:	2200      	movs	r2, #0
 800165c:	2300      	movs	r3, #0
 800165e:	6332      	str	r2, [r6, #48]	@ 0x30
 8001660:	6373      	str	r3, [r6, #52]	@ 0x34
//	digit[4] = {
//			*clock_data.first_number,
//			*clock_data.first_number,
//	};

	clock_data.is_digit_on[0][GET_MOST_SIGNIFICANT_DIGIT(*clock_data.first_number)] 	= true;
 8001662:	6837      	ldr	r7, [r6, #0]
 8001664:	8838      	ldrh	r0, [r7, #0]
 8001666:	210a      	movs	r1, #10
 8001668:	f7fe fd4e 	bl	8000108 <__udivsi3>
 800166c:	b2c3      	uxtb	r3, r0
 800166e:	18f3      	adds	r3, r6, r3
 8001670:	2501      	movs	r5, #1
 8001672:	721d      	strb	r5, [r3, #8]
	clock_data.is_digit_on[1][GET_LEAST_SIGNIFICANT_DIGIT(*clock_data.first_number)] 	= true;
 8001674:	8838      	ldrh	r0, [r7, #0]
 8001676:	210a      	movs	r1, #10
 8001678:	f7fe fdcc 	bl	8000214 <__aeabi_uidivmod>
 800167c:	b2cb      	uxtb	r3, r1
 800167e:	18f3      	adds	r3, r6, r3
 8001680:	749d      	strb	r5, [r3, #18]
	clock_data.is_digit_on[2][GET_MOST_SIGNIFICANT_DIGIT(*clock_data.second_number)] 	= true;
 8001682:	6877      	ldr	r7, [r6, #4]
 8001684:	8838      	ldrh	r0, [r7, #0]
 8001686:	210a      	movs	r1, #10
 8001688:	f7fe fd3e 	bl	8000108 <__udivsi3>
 800168c:	b2c3      	uxtb	r3, r0
 800168e:	18f3      	adds	r3, r6, r3
 8001690:	771d      	strb	r5, [r3, #28]
	clock_data.is_digit_on[3][GET_LEAST_SIGNIFICANT_DIGIT(*clock_data.second_number)] 	= true;
 8001692:	8838      	ldrh	r0, [r7, #0]
 8001694:	210a      	movs	r1, #10
 8001696:	f7fe fdbd 	bl	8000214 <__aeabi_uidivmod>
 800169a:	b2cb      	uxtb	r3, r1
 800169c:	18f3      	adds	r3, r6, r3
 800169e:	3326      	adds	r3, #38	@ 0x26
 80016a0:	701d      	strb	r5, [r3, #0]

	for (int t = 0; t < NUM_OF_TUBES; ++t) {
 80016a2:	0027      	movs	r7, r4
 80016a4:	46a4      	mov	ip, r4
		for (int d = 0; d < NUM_OF_DIGITS; ++d) {
 80016a6:	46b0      	mov	r8, r6
 80016a8:	8e32      	ldrh	r2, [r6, #48]	@ 0x30
 80016aa:	4b0c      	ldr	r3, [pc, #48]	@ (80016dc <bitmask_set+0x98>)
 80016ac:	001d      	movs	r5, r3
 80016ae:	3514      	adds	r5, #20
void bitmask_set(void) {
 80016b0:	0038      	movs	r0, r7
			clock_data.bitmask.tube[t] |= digit_bitmask[d]*clock_data.is_digit_on[t][d];
 80016b2:	7801      	ldrb	r1, [r0, #0]
 80016b4:	881c      	ldrh	r4, [r3, #0]
 80016b6:	4361      	muls	r1, r4
 80016b8:	430a      	orrs	r2, r1
 80016ba:	b292      	uxth	r2, r2
		for (int d = 0; d < NUM_OF_DIGITS; ++d) {
 80016bc:	3302      	adds	r3, #2
 80016be:	3001      	adds	r0, #1
 80016c0:	42ab      	cmp	r3, r5
 80016c2:	d1f6      	bne.n	80016b2 <bitmask_set+0x6e>
 80016c4:	4643      	mov	r3, r8
 80016c6:	861a      	strh	r2, [r3, #48]	@ 0x30
	for (int t = 0; t < NUM_OF_TUBES; ++t) {
 80016c8:	3602      	adds	r6, #2
 80016ca:	370a      	adds	r7, #10
 80016cc:	4566      	cmp	r6, ip
 80016ce:	d1ea      	bne.n	80016a6 <bitmask_set+0x62>
		}
	}
}
 80016d0:	bc80      	pop	{r7}
 80016d2:	46b8      	mov	r8, r7
 80016d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016d6:	46c0      	nop			@ (mov r8, r8)
 80016d8:	20000888 	.word	0x20000888
 80016dc:	08005afc 	.word	0x08005afc

080016e0 <time_update>:

void time_update(void) {
 80016e0:	b510      	push	{r4, lr}
	// Need to stop PWM first so there is no flickering
	rtc_time.Hours 		= DS3231_GetHour();
 80016e2:	f001 fa0b 	bl	8002afc <DS3231_GetHour>
 80016e6:	4c04      	ldr	r4, [pc, #16]	@ (80016f8 <time_update+0x18>)
 80016e8:	7020      	strb	r0, [r4, #0]
	rtc_time.Minutes 	= DS3231_GetMinute();
 80016ea:	f001 fa0e 	bl	8002b0a <DS3231_GetMinute>
 80016ee:	7060      	strb	r0, [r4, #1]
	rtc_time.Seconds 	= DS3231_GetSecond();
 80016f0:	f001 fa12 	bl	8002b18 <DS3231_GetSecond>
 80016f4:	70a0      	strb	r0, [r4, #2]


}
 80016f6:	bd10      	pop	{r4, pc}
 80016f8:	200008c8 	.word	0x200008c8

080016fc <IN12_init>:
	rtc_date.Month 		= DS3231_GetMonth();
	rtc_date.Date 		= DS3231_GetDate();
	rtc_date.WeekDay 	= DS3231_GetDayOfWeek();
}

void IN12_init(void) {
 80016fc:	b510      	push	{r4, lr}
	if(DS3231_IsOscillatorStopped()) {
 80016fe:	f001 f9c1 	bl	8002a84 <DS3231_IsOscillatorStopped>
 8001702:	2800      	cmp	r0, #0
 8001704:	d10f      	bne.n	8001726 <IN12_init+0x2a>
		// todo: go to the "time set mode" automaticaly
		DS3231_SetFullTime(12, 34, 56);
		DS3231_EnableOscillator(DS3231_ENABLED);
	}

	time_update();
 8001706:	f7ff ffeb 	bl	80016e0 <time_update>
	rtc_date.Year 		= DS3231_GetYear();
 800170a:	f001 f9e2 	bl	8002ad2 <DS3231_GetYear>
 800170e:	4c0a      	ldr	r4, [pc, #40]	@ (8001738 <IN12_init+0x3c>)
 8001710:	70e0      	strb	r0, [r4, #3]
	rtc_date.Month 		= DS3231_GetMonth();
 8001712:	f001 f9d5 	bl	8002ac0 <DS3231_GetMonth>
 8001716:	7060      	strb	r0, [r4, #1]
	rtc_date.Date 		= DS3231_GetDate();
 8001718:	f001 f9cb 	bl	8002ab2 <DS3231_GetDate>
 800171c:	70a0      	strb	r0, [r4, #2]
	rtc_date.WeekDay 	= DS3231_GetDayOfWeek();
 800171e:	f001 f9c1 	bl	8002aa4 <DS3231_GetDayOfWeek>
 8001722:	7020      	strb	r0, [r4, #0]
	date_update();
}
 8001724:	bd10      	pop	{r4, pc}
		DS3231_SetFullTime(12, 34, 56);
 8001726:	2238      	movs	r2, #56	@ 0x38
 8001728:	2122      	movs	r1, #34	@ 0x22
 800172a:	200c      	movs	r0, #12
 800172c:	f001 fa5e 	bl	8002bec <DS3231_SetFullTime>
		DS3231_EnableOscillator(DS3231_ENABLED);
 8001730:	2001      	movs	r0, #1
 8001732:	f001 f949 	bl	80029c8 <DS3231_EnableOscillator>
 8001736:	e7e6      	b.n	8001706 <IN12_init+0xa>
 8001738:	200008c4 	.word	0x200008c4

0800173c <tubes_data_source_set>:

void tubes_data_source_set(uint16_t* first_number_src, uint16_t* second_number_src) {
	clock_data.first_number = first_number_src;
 800173c:	4b01      	ldr	r3, [pc, #4]	@ (8001744 <tubes_data_source_set+0x8>)
 800173e:	6018      	str	r0, [r3, #0]
	clock_data.second_number = second_number_src;
 8001740:	6059      	str	r1, [r3, #4]
}
 8001742:	4770      	bx	lr
 8001744:	20000880 	.word	0x20000880

08001748 <btns_init>:


/*
 * @brief	Set defaults, add timer handle and start it
 */
HAL_StatusTypeDef btns_init(Buttons_HandleTypeDef *hbtns, Button_InitTypeDef user_buttons[], uint8_t num_of_buttons, TIM_HandleTypeDef *htim, State_TypeDef default_state) {
 8001748:	b5f0      	push	{r4, r5, r6, r7, lr}
 800174a:	46d6      	mov	lr, sl
 800174c:	464f      	mov	r7, r9
 800174e:	4646      	mov	r6, r8
 8001750:	b5c0      	push	{r6, r7, lr}
 8001752:	4680      	mov	r8, r0
 8001754:	000d      	movs	r5, r1
 8001756:	0017      	movs	r7, r2
 8001758:	aa08      	add	r2, sp, #32
 800175a:	7812      	ldrb	r2, [r2, #0]
 800175c:	4692      	mov	sl, r2
	assert_param(hbtns 			== NULL);
	assert_param(user_buttons 	== NULL);
	assert_param(htim 			== NULL);

	if(num_of_buttons > MAX_NUMBER_OF_BUTTONS)
 800175e:	2f0f      	cmp	r7, #15
 8001760:	d859      	bhi.n	8001816 <btns_init+0xce>
		return HAL_ERROR;

	hbtns->num_of_buttons	= num_of_buttons;
 8001762:	22f0      	movs	r2, #240	@ 0xf0
 8001764:	0052      	lsls	r2, r2, #1
 8001766:	5487      	strb	r7, [r0, r2]
	hbtns->htim 			= htim;										// Set dedicated to buttons timer
 8001768:	3208      	adds	r2, #8
 800176a:	5083      	str	r3, [r0, r2]

	/*
	 * Register button parameters and fill additional fields
	 */
	for(int id = 0; id < num_of_buttons; ++id) {
 800176c:	2f00      	cmp	r7, #0
 800176e:	d019      	beq.n	80017a4 <btns_init+0x5c>
 8001770:	0004      	movs	r4, r0
 8001772:	2600      	movs	r6, #0
		strcpy(hbtns->list[id].name, user_buttons[id].name);		// Copy name
		hbtns->list[id].mask			= 1 << id;					// Create unique bitmask
 8001774:	2301      	movs	r3, #1
 8001776:	4699      	mov	r9, r3
		strcpy(hbtns->list[id].name, user_buttons[id].name);		// Copy name
 8001778:	0029      	movs	r1, r5
 800177a:	0020      	movs	r0, r4
 800177c:	f004 f9aa 	bl	8005ad4 <strcpy>
		hbtns->list[id].mask			= 1 << id;					// Create unique bitmask
 8001780:	464b      	mov	r3, r9
 8001782:	40b3      	lsls	r3, r6
 8001784:	82a3      	strh	r3, [r4, #20]
		hbtns->list[id].port 			= user_buttons[id].port;
 8001786:	696b      	ldr	r3, [r5, #20]
 8001788:	61a3      	str	r3, [r4, #24]
		hbtns->list[id].pin 			= user_buttons[id].pin;
 800178a:	8b2b      	ldrh	r3, [r5, #24]
 800178c:	83a3      	strh	r3, [r4, #28]
		hbtns->list[id].state_active 	= user_buttons[id].state_active;
 800178e:	7eab      	ldrb	r3, [r5, #26]
 8001790:	77a3      	strb	r3, [r4, #30]
		hbtns->list[id].state 			= user_buttons[id].state_active == GPIO_PIN_SET ? GPIO_PIN_RESET : GPIO_PIN_SET; // By default lvl_en is opposite of active
 8001792:	3b01      	subs	r3, #1
 8001794:	1e5a      	subs	r2, r3, #1
 8001796:	4193      	sbcs	r3, r2
 8001798:	77e3      	strb	r3, [r4, #31]
	for(int id = 0; id < num_of_buttons; ++id) {
 800179a:	3601      	adds	r6, #1
 800179c:	3420      	adds	r4, #32
 800179e:	351c      	adds	r5, #28
 80017a0:	42be      	cmp	r6, r7
 80017a2:	dbe9      	blt.n	8001778 <btns_init+0x30>
	hbtns->pressed_btns_mask	= 0; 			// Reset buttons mask
 80017a4:	23f1      	movs	r3, #241	@ 0xf1
 80017a6:	005b      	lsls	r3, r3, #1
 80017a8:	2200      	movs	r2, #0
 80017aa:	4641      	mov	r1, r8
 80017ac:	52ca      	strh	r2, [r1, r3]
	hbtns->state_current		= new_state;
 80017ae:	3302      	adds	r3, #2
 80017b0:	4642      	mov	r2, r8
 80017b2:	4651      	mov	r1, sl
 80017b4:	54d1      	strb	r1, [r2, r3]
	hbtns->state_previous		= new_state;
 80017b6:	23e6      	movs	r3, #230	@ 0xe6
 80017b8:	33ff      	adds	r3, #255	@ 0xff
 80017ba:	54d1      	strb	r1, [r2, r3]
	hbtns->hold_s		= 0;
 80017bc:	2200      	movs	r2, #0
 80017be:	3301      	adds	r3, #1
 80017c0:	4641      	mov	r1, r8
 80017c2:	54ca      	strb	r2, [r1, r3]
	btns_state_set(hbtns, default_state);

	/*
	 * Set max count for long presses, e.g. 1000ms/50ms = 20
	 */
	hold_1s_cnt 	= 1000/hbtns->htim->Init.Period;
 80017c4:	3302      	adds	r3, #2
 80017c6:	58cd      	ldr	r5, [r1, r3]
 80017c8:	4c14      	ldr	r4, [pc, #80]	@ (800181c <btns_init+0xd4>)
 80017ca:	68e9      	ldr	r1, [r5, #12]
 80017cc:	20fa      	movs	r0, #250	@ 0xfa
 80017ce:	0080      	lsls	r0, r0, #2
 80017d0:	f7fe fc9a 	bl	8000108 <__udivsi3>
 80017d4:	7020      	strb	r0, [r4, #0]
	HAL_TIM_StateTypeDef timer_status = HAL_TIM_Base_GetState(hbtns->htim);
 80017d6:	0028      	movs	r0, r5
 80017d8:	f003 fd1d 	bl	8005216 <HAL_TIM_Base_GetState>
	if (timer_status == HAL_TIM_STATE_READY) {
 80017dc:	2801      	cmp	r0, #1
 80017de:	d004      	beq.n	80017ea <btns_init+0xa2>

	/*
	 * Start the timer
	 */
	return btns_timer_start(hbtns);
}
 80017e0:	bce0      	pop	{r5, r6, r7}
 80017e2:	46ba      	mov	sl, r7
 80017e4:	46b1      	mov	r9, r6
 80017e6:	46a8      	mov	r8, r5
 80017e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		FIX_TIMER_TRIGGER(hbtns->htim);
 80017ea:	25f4      	movs	r5, #244	@ 0xf4
 80017ec:	006d      	lsls	r5, r5, #1
 80017ee:	4643      	mov	r3, r8
 80017f0:	595b      	ldr	r3, [r3, r5]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2202      	movs	r2, #2
 80017f6:	4252      	negs	r2, r2
 80017f8:	611a      	str	r2, [r3, #16]
		timer_status += HAL_TIM_Base_Start_IT(hbtns->htim);
 80017fa:	4643      	mov	r3, r8
 80017fc:	5958      	ldr	r0, [r3, r5]
 80017fe:	f003 f8b3 	bl	8004968 <HAL_TIM_Base_Start_IT>
 8001802:	0004      	movs	r4, r0
		timer_status += HAL_TIM_OC_Start_IT(hbtns->htim, TIM_CHANNEL_1);
 8001804:	4643      	mov	r3, r8
 8001806:	5958      	ldr	r0, [r3, r5]
 8001808:	2100      	movs	r1, #0
 800180a:	f003 f8dd 	bl	80049c8 <HAL_TIM_OC_Start_IT>
 800180e:	1820      	adds	r0, r4, r0
 8001810:	3001      	adds	r0, #1
 8001812:	b2c0      	uxtb	r0, r0
 8001814:	e7e4      	b.n	80017e0 <btns_init+0x98>
		return HAL_ERROR;
 8001816:	2001      	movs	r0, #1
 8001818:	e7e2      	b.n	80017e0 <btns_init+0x98>
 800181a:	46c0      	nop			@ (mov r8, r8)
 800181c:	200008e8 	.word	0x200008e8

08001820 <btns_check>:
void btns_check(Buttons_HandleTypeDef *hbtns) {
 8001820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001822:	46ce      	mov	lr, r9
 8001824:	4647      	mov	r7, r8
 8001826:	b580      	push	{r7, lr}
 8001828:	0005      	movs	r5, r0
	hbtns->state_current = RELEASED;
 800182a:	23f2      	movs	r3, #242	@ 0xf2
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	2200      	movs	r2, #0
 8001830:	54c2      	strb	r2, [r0, r3]
	for(int i = 0; i < hbtns->num_of_buttons; ++i) {
 8001832:	3b04      	subs	r3, #4
 8001834:	5cc3      	ldrb	r3, [r0, r3]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d100      	bne.n	800183c <btns_check+0x1c>
 800183a:	e071      	b.n	8001920 <btns_check+0x100>
 800183c:	0004      	movs	r4, r0
 800183e:	3414      	adds	r4, #20
 8001840:	2600      	movs	r6, #0
			hbtns->pressed_btns_mask |= hbtns->list[i].mask;
 8001842:	27f1      	movs	r7, #241	@ 0xf1
 8001844:	007f      	lsls	r7, r7, #1
			hbtns->state_current = PRESSED;
 8001846:	23f2      	movs	r3, #242	@ 0xf2
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	4699      	mov	r9, r3
 800184c:	3be4      	subs	r3, #228	@ 0xe4
 800184e:	3bff      	subs	r3, #255	@ 0xff
 8001850:	4698      	mov	r8, r3
 8001852:	e00d      	b.n	8001870 <btns_check+0x50>
			hbtns->pressed_btns_mask |= hbtns->list[i].mask;
 8001854:	5beb      	ldrh	r3, [r5, r7]
 8001856:	8822      	ldrh	r2, [r4, #0]
 8001858:	4313      	orrs	r3, r2
 800185a:	53eb      	strh	r3, [r5, r7]
			hbtns->state_current = PRESSED;
 800185c:	464b      	mov	r3, r9
 800185e:	4642      	mov	r2, r8
 8001860:	54ea      	strb	r2, [r5, r3]
	for(int i = 0; i < hbtns->num_of_buttons; ++i) {
 8001862:	3601      	adds	r6, #1
 8001864:	3420      	adds	r4, #32
 8001866:	23f0      	movs	r3, #240	@ 0xf0
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	5ceb      	ldrb	r3, [r5, r3]
 800186c:	429e      	cmp	r6, r3
 800186e:	da07      	bge.n	8001880 <btns_check+0x60>
		gpio_state = HAL_GPIO_ReadPin(hbtns->list[i].port, hbtns->list[i].pin);
 8001870:	8921      	ldrh	r1, [r4, #8]
 8001872:	6860      	ldr	r0, [r4, #4]
 8001874:	f001 fd4a 	bl	800330c <HAL_GPIO_ReadPin>
		if(gpio_state == hbtns->list[i].state_active) {
 8001878:	7aa3      	ldrb	r3, [r4, #10]
 800187a:	4283      	cmp	r3, r0
 800187c:	d1f1      	bne.n	8001862 <btns_check+0x42>
 800187e:	e7e9      	b.n	8001854 <btns_check+0x34>
	if (hbtns->state_current != hbtns->state_previous) {
 8001880:	23f2      	movs	r3, #242	@ 0xf2
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	5ceb      	ldrb	r3, [r5, r3]
 8001886:	22e6      	movs	r2, #230	@ 0xe6
 8001888:	32ff      	adds	r2, #255	@ 0xff
 800188a:	5caa      	ldrb	r2, [r5, r2]
 800188c:	4293      	cmp	r3, r2
 800188e:	d02e      	beq.n	80018ee <btns_check+0xce>
		if (hbtns->state_current == PRESSED) {
 8001890:	2b01      	cmp	r3, #1
 8001892:	d016      	beq.n	80018c2 <btns_check+0xa2>
			if (hbtns->hold_s < 2) {
 8001894:	23f3      	movs	r3, #243	@ 0xf3
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	5ce9      	ldrb	r1, [r5, r3]
 800189a:	2901      	cmp	r1, #1
 800189c:	d922      	bls.n	80018e4 <btns_check+0xc4>
	hbtns->pressed_btns_mask	= 0; 			// Reset buttons mask
 800189e:	23f1      	movs	r3, #241	@ 0xf1
 80018a0:	005b      	lsls	r3, r3, #1
 80018a2:	2200      	movs	r2, #0
 80018a4:	52ea      	strh	r2, [r5, r3]
	hbtns->state_current		= new_state;
 80018a6:	2300      	movs	r3, #0
 80018a8:	2100      	movs	r1, #0
 80018aa:	32e5      	adds	r2, #229	@ 0xe5
 80018ac:	32ff      	adds	r2, #255	@ 0xff
 80018ae:	54a9      	strb	r1, [r5, r2]
	hbtns->state_previous		= new_state;
 80018b0:	22e6      	movs	r2, #230	@ 0xe6
 80018b2:	32ff      	adds	r2, #255	@ 0xff
 80018b4:	54ab      	strb	r3, [r5, r2]
	hbtns->hold_s		= 0;
 80018b6:	3201      	adds	r2, #1
 80018b8:	54ab      	strb	r3, [r5, r2]
}
 80018ba:	bcc0      	pop	{r6, r7}
 80018bc:	46b9      	mov	r9, r7
 80018be:	46b0      	mov	r8, r6
 80018c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	hbtns->pressed_btns_mask	= 0; 			// Reset buttons mask
 80018c2:	33e2      	adds	r3, #226	@ 0xe2
 80018c4:	33ff      	adds	r3, #255	@ 0xff
 80018c6:	2200      	movs	r2, #0
 80018c8:	52ea      	strh	r2, [r5, r3]
	hbtns->state_current		= new_state;
 80018ca:	3be2      	subs	r3, #226	@ 0xe2
 80018cc:	3bff      	subs	r3, #255	@ 0xff
 80018ce:	32e5      	adds	r2, #229	@ 0xe5
 80018d0:	32ff      	adds	r2, #255	@ 0xff
 80018d2:	54ab      	strb	r3, [r5, r2]
	hbtns->state_previous		= new_state;
 80018d4:	22e6      	movs	r2, #230	@ 0xe6
 80018d6:	32ff      	adds	r2, #255	@ 0xff
 80018d8:	54ab      	strb	r3, [r5, r2]
	hbtns->hold_s		= 0;
 80018da:	2200      	movs	r2, #0
 80018dc:	33e6      	adds	r3, #230	@ 0xe6
 80018de:	33ff      	adds	r3, #255	@ 0xff
 80018e0:	54ea      	strb	r2, [r5, r3]
}
 80018e2:	e7ea      	b.n	80018ba <btns_check+0x9a>
				btns_callback(hbtns->pressed_btns_mask, hbtns->hold_s);
 80018e4:	3b04      	subs	r3, #4
 80018e6:	5ae8      	ldrh	r0, [r5, r3]
 80018e8:	f000 f824 	bl	8001934 <btns_callback>
 80018ec:	e7d7      	b.n	800189e <btns_check+0x7e>
		if(hbtns->state_previous == PRESSED) {
 80018ee:	2a01      	cmp	r2, #1
 80018f0:	d1e3      	bne.n	80018ba <btns_check+0x9a>
			if(++cnt > hold_1s_cnt) {
 80018f2:	4a0e      	ldr	r2, [pc, #56]	@ (800192c <btns_check+0x10c>)
 80018f4:	7813      	ldrb	r3, [r2, #0]
 80018f6:	3301      	adds	r3, #1
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	7013      	strb	r3, [r2, #0]
 80018fc:	4a0c      	ldr	r2, [pc, #48]	@ (8001930 <btns_check+0x110>)
 80018fe:	7812      	ldrb	r2, [r2, #0]
 8001900:	429a      	cmp	r2, r3
 8001902:	d2da      	bcs.n	80018ba <btns_check+0x9a>
				cnt = 0;
 8001904:	4b09      	ldr	r3, [pc, #36]	@ (800192c <btns_check+0x10c>)
 8001906:	2200      	movs	r2, #0
 8001908:	701a      	strb	r2, [r3, #0]
				++hbtns->hold_s;
 800190a:	23f3      	movs	r3, #243	@ 0xf3
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	5ce9      	ldrb	r1, [r5, r3]
 8001910:	3101      	adds	r1, #1
 8001912:	b2c9      	uxtb	r1, r1
 8001914:	54e9      	strb	r1, [r5, r3]
				btns_callback(hbtns->pressed_btns_mask, hbtns->hold_s);
 8001916:	3b04      	subs	r3, #4
 8001918:	5ae8      	ldrh	r0, [r5, r3]
 800191a:	f000 f80b 	bl	8001934 <btns_callback>
}
 800191e:	e7cc      	b.n	80018ba <btns_check+0x9a>
	if (hbtns->state_current != hbtns->state_previous) {
 8001920:	23e6      	movs	r3, #230	@ 0xe6
 8001922:	33ff      	adds	r3, #255	@ 0xff
 8001924:	5cc3      	ldrb	r3, [r0, r3]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d1b4      	bne.n	8001894 <btns_check+0x74>
 800192a:	e7c6      	b.n	80018ba <btns_check+0x9a>
 800192c:	200008dc 	.word	0x200008dc
 8001930:	200008e8 	.word	0x200008e8

08001934 <btns_callback>:

extern uint8_t duty_cycles[4];


void btns_callback(uint16_t mask, PressType_TypeDef press_type) {
	shared_mask 		= mask;
 8001934:	4b02      	ldr	r3, [pc, #8]	@ (8001940 <btns_callback+0xc>)
 8001936:	6018      	str	r0, [r3, #0]
	shared_press_type 	= press_type;
 8001938:	4b02      	ldr	r3, [pc, #8]	@ (8001944 <btns_callback+0x10>)
 800193a:	6019      	str	r1, [r3, #0]
}
 800193c:	4770      	bx	lr
 800193e:	46c0      	nop			@ (mov r8, r8)
 8001940:	200008e4 	.word	0x200008e4
 8001944:	200008e0 	.word	0x200008e0

08001948 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001948:	b510      	push	{r4, lr}
 800194a:	0004      	movs	r4, r0
	static uint32_t count_50_ms = 0;
	if(htim == &htim2) {
 800194c:	4b11      	ldr	r3, [pc, #68]	@ (8001994 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800194e:	4298      	cmp	r0, r3
 8001950:	d003      	beq.n	800195a <HAL_TIM_PeriodElapsedCallback+0x12>
		bitmask_set(); // restore values
		if(!flag_upd_tubes)
			flag_upd_tubes = 1;
	}

	if(htim == &htim21) {
 8001952:	4b11      	ldr	r3, [pc, #68]	@ (8001998 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001954:	429c      	cmp	r4, r3
 8001956:	d00a      	beq.n	800196e <HAL_TIM_PeriodElapsedCallback+0x26>
		}
		if (count_50_ms % 1000 == 0) {
		}
		btns_check(&hbtns);
	}
}
 8001958:	bd10      	pop	{r4, pc}
		bitmask_set(); // restore values
 800195a:	f7ff fe73 	bl	8001644 <bitmask_set>
		if(!flag_upd_tubes)
 800195e:	4b0f      	ldr	r3, [pc, #60]	@ (800199c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d1f5      	bne.n	8001952 <HAL_TIM_PeriodElapsedCallback+0xa>
			flag_upd_tubes = 1;
 8001966:	4b0d      	ldr	r3, [pc, #52]	@ (800199c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001968:	2201      	movs	r2, #1
 800196a:	701a      	strb	r2, [r3, #0]
 800196c:	e7f1      	b.n	8001952 <HAL_TIM_PeriodElapsedCallback+0xa>
		++count_50_ms;
 800196e:	4a0c      	ldr	r2, [pc, #48]	@ (80019a0 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001970:	6813      	ldr	r3, [r2, #0]
 8001972:	3301      	adds	r3, #1
 8001974:	6013      	str	r3, [r2, #0]
		if (count_50_ms >= 20) {
 8001976:	2b13      	cmp	r3, #19
 8001978:	d907      	bls.n	800198a <HAL_TIM_PeriodElapsedCallback+0x42>
			flag_upd_time = 1;
 800197a:	4b0a      	ldr	r3, [pc, #40]	@ (80019a4 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800197c:	2201      	movs	r2, #1
 800197e:	701a      	strb	r2, [r3, #0]
			flag_upd_dots = 1;
 8001980:	4b09      	ldr	r3, [pc, #36]	@ (80019a8 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001982:	701a      	strb	r2, [r3, #0]
			count_50_ms = 0;
 8001984:	4b06      	ldr	r3, [pc, #24]	@ (80019a0 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001986:	2200      	movs	r2, #0
 8001988:	601a      	str	r2, [r3, #0]
		btns_check(&hbtns);
 800198a:	4808      	ldr	r0, [pc, #32]	@ (80019ac <HAL_TIM_PeriodElapsedCallback+0x64>)
 800198c:	f7ff ff48 	bl	8001820 <btns_check>
}
 8001990:	e7e2      	b.n	8001958 <HAL_TIM_PeriodElapsedCallback+0x10>
 8001992:	46c0      	nop			@ (mov r8, r8)
 8001994:	20000c48 	.word	0x20000c48
 8001998:	20000c08 	.word	0x20000c08
 800199c:	200008c2 	.word	0x200008c2
 80019a0:	200008ec 	.word	0x200008ec
 80019a4:	200008c1 	.word	0x200008c1
 80019a8:	200008c0 	.word	0x200008c0
 80019ac:	200008f4 	.word	0x200008f4

080019b0 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
	if(htim == &htim2) {
 80019b0:	4b12      	ldr	r3, [pc, #72]	@ (80019fc <HAL_TIM_PWM_PulseFinishedCallback+0x4c>)
 80019b2:	4283      	cmp	r3, r0
 80019b4:	d000      	beq.n	80019b8 <HAL_TIM_PWM_PulseFinishedCallback+0x8>
			default: break;
		}
		if(!flag_upd_tubes)
			flag_upd_tubes = 1;
	}
}
 80019b6:	4770      	bx	lr
		switch (htim->Channel) {
 80019b8:	7e1b      	ldrb	r3, [r3, #24]
 80019ba:	2b04      	cmp	r3, #4
 80019bc:	d019      	beq.n	80019f2 <HAL_TIM_PWM_PulseFinishedCallback+0x42>
 80019be:	d807      	bhi.n	80019d0 <HAL_TIM_PWM_PulseFinishedCallback+0x20>
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d00b      	beq.n	80019dc <HAL_TIM_PWM_PulseFinishedCallback+0x2c>
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d10c      	bne.n	80019e2 <HAL_TIM_PWM_PulseFinishedCallback+0x32>
			case HAL_TIM_ACTIVE_CHANNEL_2: clock_data.bitmask.tube[1] = 0; break;
 80019c8:	4b0d      	ldr	r3, [pc, #52]	@ (8001a00 <HAL_TIM_PWM_PulseFinishedCallback+0x50>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	865a      	strh	r2, [r3, #50]	@ 0x32
 80019ce:	e008      	b.n	80019e2 <HAL_TIM_PWM_PulseFinishedCallback+0x32>
		switch (htim->Channel) {
 80019d0:	2b08      	cmp	r3, #8
 80019d2:	d106      	bne.n	80019e2 <HAL_TIM_PWM_PulseFinishedCallback+0x32>
			case HAL_TIM_ACTIVE_CHANNEL_4: clock_data.bitmask.tube[3] = 0; break;
 80019d4:	4b0a      	ldr	r3, [pc, #40]	@ (8001a00 <HAL_TIM_PWM_PulseFinishedCallback+0x50>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	86da      	strh	r2, [r3, #54]	@ 0x36
 80019da:	e002      	b.n	80019e2 <HAL_TIM_PWM_PulseFinishedCallback+0x32>
			case HAL_TIM_ACTIVE_CHANNEL_1: clock_data.bitmask.tube[0] = 0; break;// E.g. "if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {...}"
 80019dc:	4b08      	ldr	r3, [pc, #32]	@ (8001a00 <HAL_TIM_PWM_PulseFinishedCallback+0x50>)
 80019de:	2200      	movs	r2, #0
 80019e0:	861a      	strh	r2, [r3, #48]	@ 0x30
		if(!flag_upd_tubes)
 80019e2:	4b08      	ldr	r3, [pc, #32]	@ (8001a04 <HAL_TIM_PWM_PulseFinishedCallback+0x54>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d1e5      	bne.n	80019b6 <HAL_TIM_PWM_PulseFinishedCallback+0x6>
			flag_upd_tubes = 1;
 80019ea:	4b06      	ldr	r3, [pc, #24]	@ (8001a04 <HAL_TIM_PWM_PulseFinishedCallback+0x54>)
 80019ec:	2201      	movs	r2, #1
 80019ee:	701a      	strb	r2, [r3, #0]
}
 80019f0:	e7e1      	b.n	80019b6 <HAL_TIM_PWM_PulseFinishedCallback+0x6>
			case HAL_TIM_ACTIVE_CHANNEL_3: clock_data.bitmask.tube[2] = 0; break;
 80019f2:	4b03      	ldr	r3, [pc, #12]	@ (8001a00 <HAL_TIM_PWM_PulseFinishedCallback+0x50>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	869a      	strh	r2, [r3, #52]	@ 0x34
 80019f8:	e7f3      	b.n	80019e2 <HAL_TIM_PWM_PulseFinishedCallback+0x32>
 80019fa:	46c0      	nop			@ (mov r8, r8)
 80019fc:	20000c48 	.word	0x20000c48
 8001a00:	20000880 	.word	0x20000880
 8001a04:	200008c2 	.word	0x200008c2

08001a08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a08:	b500      	push	{lr}
 8001a0a:	b099      	sub	sp, #100	@ 0x64
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a0c:	2234      	movs	r2, #52	@ 0x34
 8001a0e:	2100      	movs	r1, #0
 8001a10:	a80b      	add	r0, sp, #44	@ 0x2c
 8001a12:	f004 f833 	bl	8005a7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a16:	2214      	movs	r2, #20
 8001a18:	2100      	movs	r1, #0
 8001a1a:	a806      	add	r0, sp, #24
 8001a1c:	f004 f82e 	bl	8005a7c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a20:	2218      	movs	r2, #24
 8001a22:	2100      	movs	r1, #0
 8001a24:	4668      	mov	r0, sp
 8001a26:	f004 f829 	bl	8005a7c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a2a:	4921      	ldr	r1, [pc, #132]	@ (8001ab0 <SystemClock_Config+0xa8>)
 8001a2c:	680a      	ldr	r2, [r1, #0]
 8001a2e:	4b21      	ldr	r3, [pc, #132]	@ (8001ab4 <SystemClock_Config+0xac>)
 8001a30:	401a      	ands	r2, r3
 8001a32:	2380      	movs	r3, #128	@ 0x80
 8001a34:	011b      	lsls	r3, r3, #4
 8001a36:	4313      	orrs	r3, r2
 8001a38:	600b      	str	r3, [r1, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001a3a:	230a      	movs	r3, #10
 8001a3c:	930b      	str	r3, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a3e:	3b09      	subs	r3, #9
 8001a40:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a42:	2210      	movs	r2, #16
 8001a44:	920f      	str	r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001a46:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a48:	3301      	adds	r3, #1
 8001a4a:	9314      	str	r3, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	9315      	str	r3, [sp, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8001a50:	2380      	movs	r3, #128	@ 0x80
 8001a52:	02db      	lsls	r3, r3, #11
 8001a54:	9316      	str	r3, [sp, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8001a56:	2380      	movs	r3, #128	@ 0x80
 8001a58:	03db      	lsls	r3, r3, #15
 8001a5a:	9317      	str	r3, [sp, #92]	@ 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a5c:	a80b      	add	r0, sp, #44	@ 0x2c
 8001a5e:	f002 f97b 	bl	8003d58 <HAL_RCC_OscConfig>
 8001a62:	2800      	cmp	r0, #0
 8001a64:	d11d      	bne.n	8001aa2 <SystemClock_Config+0x9a>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a66:	230f      	movs	r3, #15
 8001a68:	9306      	str	r3, [sp, #24]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a6a:	3b0c      	subs	r3, #12
 8001a6c:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a72:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a74:	930a      	str	r3, [sp, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001a76:	2101      	movs	r1, #1
 8001a78:	a806      	add	r0, sp, #24
 8001a7a:	f002 fc2f 	bl	80042dc <HAL_RCC_ClockConfig>
 8001a7e:	2800      	cmp	r0, #0
 8001a80:	d111      	bne.n	8001aa6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_LPUART1
 8001a82:	232e      	movs	r3, #46	@ 0x2e
 8001a84:	9300      	str	r3, [sp, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001a86:	2300      	movs	r3, #0
 8001a88:	9302      	str	r3, [sp, #8]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001a8a:	9303      	str	r3, [sp, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001a8c:	9304      	str	r3, [sp, #16]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001a8e:	2380      	movs	r3, #128	@ 0x80
 8001a90:	029b      	lsls	r3, r3, #10
 8001a92:	9301      	str	r3, [sp, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a94:	4668      	mov	r0, sp
 8001a96:	f002 fd41 	bl	800451c <HAL_RCCEx_PeriphCLKConfig>
 8001a9a:	2800      	cmp	r0, #0
 8001a9c:	d105      	bne.n	8001aaa <SystemClock_Config+0xa2>
  {
    Error_Handler();
  }
}
 8001a9e:	b019      	add	sp, #100	@ 0x64
 8001aa0:	bd00      	pop	{pc}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001aa2:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001aa4:	e7fe      	b.n	8001aa4 <SystemClock_Config+0x9c>
 8001aa6:	b672      	cpsid	i
 8001aa8:	e7fe      	b.n	8001aa8 <SystemClock_Config+0xa0>
 8001aaa:	b672      	cpsid	i
 8001aac:	e7fe      	b.n	8001aac <SystemClock_Config+0xa4>
 8001aae:	46c0      	nop			@ (mov r8, r8)
 8001ab0:	40007000 	.word	0x40007000
 8001ab4:	ffffe7ff 	.word	0xffffe7ff

08001ab8 <main>:
{
 8001ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001aba:	46d6      	mov	lr, sl
 8001abc:	464f      	mov	r7, r9
 8001abe:	4646      	mov	r6, r8
 8001ac0:	b5c0      	push	{r6, r7, lr}
 8001ac2:	b092      	sub	sp, #72	@ 0x48
  HAL_Init();
 8001ac4:	f001 f8c4 	bl	8002c50 <HAL_Init>
  SystemClock_Config();
 8001ac8:	f7ff ff9e 	bl	8001a08 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001acc:	2214      	movs	r2, #20
 8001ace:	2100      	movs	r1, #0
 8001ad0:	a80d      	add	r0, sp, #52	@ 0x34
 8001ad2:	f003 ffd3 	bl	8005a7c <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ad6:	4dde      	ldr	r5, [pc, #888]	@ (8001e50 <main+0x398>)
 8001ad8:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
 8001ada:	2304      	movs	r3, #4
 8001adc:	431a      	orrs	r2, r3
 8001ade:	62ea      	str	r2, [r5, #44]	@ 0x2c
 8001ae0:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	9304      	str	r3, [sp, #16]
 8001ae6:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ae8:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8001aea:	2601      	movs	r6, #1
 8001aec:	4333      	orrs	r3, r6
 8001aee:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8001af0:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8001af2:	4033      	ands	r3, r6
 8001af4:	9305      	str	r3, [sp, #20]
 8001af6:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001af8:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8001afa:	2202      	movs	r2, #2
 8001afc:	4690      	mov	r8, r2
 8001afe:	4313      	orrs	r3, r2
 8001b00:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8001b02:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8001b04:	4013      	ands	r3, r2
 8001b06:	9306      	str	r3, [sp, #24]
 8001b08:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOC, DIMM_LED_1_Pin|DIMM_LED_2_Pin, GPIO_PIN_RESET);
 8001b0a:	24c0      	movs	r4, #192	@ 0xc0
 8001b0c:	0224      	lsls	r4, r4, #8
 8001b0e:	4bd1      	ldr	r3, [pc, #836]	@ (8001e54 <main+0x39c>)
 8001b10:	469a      	mov	sl, r3
 8001b12:	2200      	movs	r2, #0
 8001b14:	0021      	movs	r1, r4
 8001b16:	0018      	movs	r0, r3
 8001b18:	f001 fbfe 	bl	8003318 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TXS_OE_GPIO_Port, TXS_OE_Pin, GPIO_PIN_SET);
 8001b1c:	27a0      	movs	r7, #160	@ 0xa0
 8001b1e:	05ff      	lsls	r7, r7, #23
 8001b20:	2201      	movs	r2, #1
 8001b22:	2102      	movs	r1, #2
 8001b24:	0038      	movs	r0, r7
 8001b26:	f001 fbf7 	bl	8003318 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SHDN_170V_3V3_Pin|INS_EN_3V3_Pin|DIN_3V3_Pin|OE_3V3_Pin, GPIO_PIN_RESET);
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	21f0      	movs	r1, #240	@ 0xf0
 8001b2e:	0038      	movs	r0, r7
 8001b30:	f001 fbf2 	bl	8003318 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, RCK_3V3_Pin|SCK_3V3_Pin, GPIO_PIN_RESET);
 8001b34:	4bc8      	ldr	r3, [pc, #800]	@ (8001e58 <main+0x3a0>)
 8001b36:	4699      	mov	r9, r3
 8001b38:	2200      	movs	r2, #0
 8001b3a:	2103      	movs	r1, #3
 8001b3c:	0018      	movs	r0, r3
 8001b3e:	f001 fbeb 	bl	8003318 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = DIMM_LED_1_Pin|DIMM_LED_2_Pin;
 8001b42:	940d      	str	r4, [sp, #52]	@ 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b44:	960e      	str	r6, [sp, #56]	@ 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b46:	2400      	movs	r4, #0
 8001b48:	940f      	str	r4, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b4a:	9410      	str	r4, [sp, #64]	@ 0x40
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b4c:	a90d      	add	r1, sp, #52	@ 0x34
 8001b4e:	4650      	mov	r0, sl
 8001b50:	f001 faf4 	bl	800313c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BTN_4_Pin|INT_SQW_Pin|INT_OPT_Pin|JDY_STAT_Pin
 8001b54:	4bc1      	ldr	r3, [pc, #772]	@ (8001e5c <main+0x3a4>)
 8001b56:	930d      	str	r3, [sp, #52]	@ 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b58:	940e      	str	r4, [sp, #56]	@ 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5a:	940f      	str	r4, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b5c:	a90d      	add	r1, sp, #52	@ 0x34
 8001b5e:	0038      	movs	r0, r7
 8001b60:	f001 faec 	bl	800313c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = TXS_OE_Pin;
 8001b64:	4643      	mov	r3, r8
 8001b66:	930d      	str	r3, [sp, #52]	@ 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b68:	960e      	str	r6, [sp, #56]	@ 0x38
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b6a:	960f      	str	r6, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b6c:	9410      	str	r4, [sp, #64]	@ 0x40
  HAL_GPIO_Init(TXS_OE_GPIO_Port, &GPIO_InitStruct);
 8001b6e:	a90d      	add	r1, sp, #52	@ 0x34
 8001b70:	0038      	movs	r0, r7
 8001b72:	f001 fae3 	bl	800313c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SHDN_170V_3V3_Pin;
 8001b76:	2310      	movs	r3, #16
 8001b78:	930d      	str	r3, [sp, #52]	@ 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b7a:	960e      	str	r6, [sp, #56]	@ 0x38
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b7c:	4643      	mov	r3, r8
 8001b7e:	930f      	str	r3, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b80:	9410      	str	r4, [sp, #64]	@ 0x40
  HAL_GPIO_Init(SHDN_170V_3V3_GPIO_Port, &GPIO_InitStruct);
 8001b82:	a90d      	add	r1, sp, #52	@ 0x34
 8001b84:	0038      	movs	r0, r7
 8001b86:	f001 fad9 	bl	800313c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = INS_EN_3V3_Pin|DIN_3V3_Pin|OE_3V3_Pin;
 8001b8a:	23e0      	movs	r3, #224	@ 0xe0
 8001b8c:	930d      	str	r3, [sp, #52]	@ 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b8e:	960e      	str	r6, [sp, #56]	@ 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b90:	940f      	str	r4, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b92:	3bdd      	subs	r3, #221	@ 0xdd
 8001b94:	4698      	mov	r8, r3
 8001b96:	9310      	str	r3, [sp, #64]	@ 0x40
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b98:	a90d      	add	r1, sp, #52	@ 0x34
 8001b9a:	0038      	movs	r0, r7
 8001b9c:	f001 face 	bl	800313c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RCK_3V3_Pin|SCK_3V3_Pin;
 8001ba0:	4643      	mov	r3, r8
 8001ba2:	930d      	str	r3, [sp, #52]	@ 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ba4:	960e      	str	r6, [sp, #56]	@ 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba6:	940f      	str	r4, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ba8:	9310      	str	r3, [sp, #64]	@ 0x40
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001baa:	a90d      	add	r1, sp, #52	@ 0x34
 8001bac:	4648      	mov	r0, r9
 8001bae:	f001 fac5 	bl	800313c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BTN_3_Pin|BTN_2_Pin|BTN_1_Pin;
 8001bb2:	2338      	movs	r3, #56	@ 0x38
 8001bb4:	930d      	str	r3, [sp, #52]	@ 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bb6:	940e      	str	r4, [sp, #56]	@ 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb8:	940f      	str	r4, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bba:	a90d      	add	r1, sp, #52	@ 0x34
 8001bbc:	4648      	mov	r0, r9
 8001bbe:	f001 fabd 	bl	800313c <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001bc2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8001bc4:	4333      	orrs	r3, r6
 8001bc6:	632b      	str	r3, [r5, #48]	@ 0x30
 8001bc8:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8001bca:	4033      	ands	r3, r6
 8001bcc:	9303      	str	r3, [sp, #12]
 8001bce:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	2102      	movs	r1, #2
 8001bd4:	2009      	movs	r0, #9
 8001bd6:	f001 f861 	bl	8002c9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001bda:	2009      	movs	r0, #9
 8001bdc:	f001 f890 	bl	8002d00 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 2, 0);
 8001be0:	2200      	movs	r2, #0
 8001be2:	2102      	movs	r1, #2
 8001be4:	200a      	movs	r0, #10
 8001be6:	f001 f859 	bl	8002c9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8001bea:	200a      	movs	r0, #10
 8001bec:	f001 f888 	bl	8002d00 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 2, 0);
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	2102      	movs	r1, #2
 8001bf4:	200b      	movs	r0, #11
 8001bf6:	f001 f851 	bl	8002c9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8001bfa:	200b      	movs	r0, #11
 8001bfc:	f001 f880 	bl	8002d00 <HAL_NVIC_EnableIRQ>
  hi2c1.Instance = I2C1;
 8001c00:	4897      	ldr	r0, [pc, #604]	@ (8001e60 <main+0x3a8>)
 8001c02:	4b98      	ldr	r3, [pc, #608]	@ (8001e64 <main+0x3ac>)
 8001c04:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8001c06:	4b98      	ldr	r3, [pc, #608]	@ (8001e68 <main+0x3b0>)
 8001c08:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001c0a:	6084      	str	r4, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c0c:	60c6      	str	r6, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c0e:	6104      	str	r4, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001c10:	6144      	str	r4, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c12:	6184      	str	r4, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c14:	61c4      	str	r4, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c16:	6204      	str	r4, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c18:	f001 fd48 	bl	80036ac <HAL_I2C_Init>
 8001c1c:	2800      	cmp	r0, #0
 8001c1e:	d000      	beq.n	8001c22 <main+0x16a>
 8001c20:	e0f4      	b.n	8001e0c <main+0x354>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c22:	488f      	ldr	r0, [pc, #572]	@ (8001e60 <main+0x3a8>)
 8001c24:	2100      	movs	r1, #0
 8001c26:	f001 ffe5 	bl	8003bf4 <HAL_I2CEx_ConfigAnalogFilter>
 8001c2a:	2800      	cmp	r0, #0
 8001c2c:	d000      	beq.n	8001c30 <main+0x178>
 8001c2e:	e0ef      	b.n	8001e10 <main+0x358>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001c30:	488b      	ldr	r0, [pc, #556]	@ (8001e60 <main+0x3a8>)
 8001c32:	2100      	movs	r1, #0
 8001c34:	f002 f80a 	bl	8003c4c <HAL_I2CEx_ConfigDigitalFilter>
 8001c38:	2800      	cmp	r0, #0
 8001c3a:	d000      	beq.n	8001c3e <main+0x186>
 8001c3c:	e0ea      	b.n	8001e14 <main+0x35c>
  hlpuart1.Instance = LPUART1;
 8001c3e:	488b      	ldr	r0, [pc, #556]	@ (8001e6c <main+0x3b4>)
 8001c40:	4b8b      	ldr	r3, [pc, #556]	@ (8001e70 <main+0x3b8>)
 8001c42:	6003      	str	r3, [r0, #0]
  hlpuart1.Init.BaudRate = 209700;
 8001c44:	4b8b      	ldr	r3, [pc, #556]	@ (8001e74 <main+0x3bc>)
 8001c46:	6043      	str	r3, [r0, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8001c48:	2380      	movs	r3, #128	@ 0x80
 8001c4a:	055b      	lsls	r3, r3, #21
 8001c4c:	6083      	str	r3, [r0, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	60c3      	str	r3, [r0, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001c52:	6103      	str	r3, [r0, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001c54:	220c      	movs	r2, #12
 8001c56:	6142      	str	r2, [r0, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c58:	6183      	str	r3, [r0, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c5a:	6203      	str	r3, [r0, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c5c:	6243      	str	r3, [r0, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001c5e:	f003 fd8d 	bl	800577c <HAL_UART_Init>
 8001c62:	2800      	cmp	r0, #0
 8001c64:	d000      	beq.n	8001c68 <main+0x1b0>
 8001c66:	e0d7      	b.n	8001e18 <main+0x360>
  huart2.Instance = USART2;
 8001c68:	4883      	ldr	r0, [pc, #524]	@ (8001e78 <main+0x3c0>)
 8001c6a:	4b84      	ldr	r3, [pc, #528]	@ (8001e7c <main+0x3c4>)
 8001c6c:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8001c6e:	23e1      	movs	r3, #225	@ 0xe1
 8001c70:	025b      	lsls	r3, r3, #9
 8001c72:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c74:	2300      	movs	r3, #0
 8001c76:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c78:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c7a:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c7c:	220c      	movs	r2, #12
 8001c7e:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c80:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c82:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c84:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c86:	6243      	str	r3, [r0, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c88:	f003 fd78 	bl	800577c <HAL_UART_Init>
 8001c8c:	2800      	cmp	r0, #0
 8001c8e:	d000      	beq.n	8001c92 <main+0x1da>
 8001c90:	e0c4      	b.n	8001e1c <main+0x364>
  hrtc.Instance = RTC;
 8001c92:	487b      	ldr	r0, [pc, #492]	@ (8001e80 <main+0x3c8>)
 8001c94:	4b7b      	ldr	r3, [pc, #492]	@ (8001e84 <main+0x3cc>)
 8001c96:	6003      	str	r3, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	6043      	str	r3, [r0, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001c9c:	227f      	movs	r2, #127	@ 0x7f
 8001c9e:	6082      	str	r2, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 8001ca0:	3280      	adds	r2, #128	@ 0x80
 8001ca2:	60c2      	str	r2, [r0, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001ca4:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001ca6:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001ca8:	6183      	str	r3, [r0, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001caa:	61c3      	str	r3, [r0, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001cac:	f002 fd72 	bl	8004794 <HAL_RTC_Init>
 8001cb0:	2800      	cmp	r0, #0
 8001cb2:	d000      	beq.n	8001cb6 <main+0x1fe>
 8001cb4:	e0b4      	b.n	8001e20 <main+0x368>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cb6:	2210      	movs	r2, #16
 8001cb8:	2100      	movs	r1, #0
 8001cba:	a80d      	add	r0, sp, #52	@ 0x34
 8001cbc:	f003 fede 	bl	8005a7c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cc0:	2208      	movs	r2, #8
 8001cc2:	2100      	movs	r1, #0
 8001cc4:	a809      	add	r0, sp, #36	@ 0x24
 8001cc6:	f003 fed9 	bl	8005a7c <memset>
  htim21.Instance = TIM21;
 8001cca:	486f      	ldr	r0, [pc, #444]	@ (8001e88 <main+0x3d0>)
 8001ccc:	4b6f      	ldr	r3, [pc, #444]	@ (8001e8c <main+0x3d4>)
 8001cce:	6003      	str	r3, [r0, #0]
  htim21.Init.Prescaler = 32000-1;
 8001cd0:	4b6f      	ldr	r3, [pc, #444]	@ (8001e90 <main+0x3d8>)
 8001cd2:	6043      	str	r3, [r0, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	6083      	str	r3, [r0, #8]
  htim21.Init.Period = 50-1;
 8001cd8:	2231      	movs	r2, #49	@ 0x31
 8001cda:	60c2      	str	r2, [r0, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cdc:	6103      	str	r3, [r0, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cde:	6143      	str	r3, [r0, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 8001ce0:	f002 fe1d 	bl	800491e <HAL_TIM_Base_Init>
 8001ce4:	2800      	cmp	r0, #0
 8001ce6:	d000      	beq.n	8001cea <main+0x232>
 8001ce8:	e09c      	b.n	8001e24 <main+0x36c>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cea:	2380      	movs	r3, #128	@ 0x80
 8001cec:	015b      	lsls	r3, r3, #5
 8001cee:	930d      	str	r3, [sp, #52]	@ 0x34
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 8001cf0:	4865      	ldr	r0, [pc, #404]	@ (8001e88 <main+0x3d0>)
 8001cf2:	a90d      	add	r1, sp, #52	@ 0x34
 8001cf4:	f003 f8a8 	bl	8004e48 <HAL_TIM_ConfigClockSource>
 8001cf8:	2800      	cmp	r0, #0
 8001cfa:	d000      	beq.n	8001cfe <main+0x246>
 8001cfc:	e094      	b.n	8001e28 <main+0x370>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	9309      	str	r3, [sp, #36]	@ 0x24
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d02:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 8001d04:	4860      	ldr	r0, [pc, #384]	@ (8001e88 <main+0x3d0>)
 8001d06:	a909      	add	r1, sp, #36	@ 0x24
 8001d08:	f003 fa8a 	bl	8005220 <HAL_TIMEx_MasterConfigSynchronization>
 8001d0c:	2800      	cmp	r0, #0
 8001d0e:	d000      	beq.n	8001d12 <main+0x25a>
 8001d10:	e08c      	b.n	8001e2c <main+0x374>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d12:	2210      	movs	r2, #16
 8001d14:	2100      	movs	r1, #0
 8001d16:	a809      	add	r0, sp, #36	@ 0x24
 8001d18:	f003 feb0 	bl	8005a7c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d1c:	2208      	movs	r2, #8
 8001d1e:	2100      	movs	r1, #0
 8001d20:	a807      	add	r0, sp, #28
 8001d22:	f003 feab 	bl	8005a7c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d26:	2210      	movs	r2, #16
 8001d28:	2100      	movs	r1, #0
 8001d2a:	a80d      	add	r0, sp, #52	@ 0x34
 8001d2c:	f003 fea6 	bl	8005a7c <memset>
  htim2.Instance = TIM2;
 8001d30:	4858      	ldr	r0, [pc, #352]	@ (8001e94 <main+0x3dc>)
 8001d32:	2380      	movs	r3, #128	@ 0x80
 8001d34:	05db      	lsls	r3, r3, #23
 8001d36:	6003      	str	r3, [r0, #0]
  htim2.Init.Prescaler = 3200-1;
 8001d38:	4b57      	ldr	r3, [pc, #348]	@ (8001e98 <main+0x3e0>)
 8001d3a:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 100-1;
 8001d40:	2263      	movs	r2, #99	@ 0x63
 8001d42:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d44:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d46:	6143      	str	r3, [r0, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d48:	f002 fde9 	bl	800491e <HAL_TIM_Base_Init>
 8001d4c:	2800      	cmp	r0, #0
 8001d4e:	d16f      	bne.n	8001e30 <main+0x378>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d50:	2380      	movs	r3, #128	@ 0x80
 8001d52:	015b      	lsls	r3, r3, #5
 8001d54:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d56:	484f      	ldr	r0, [pc, #316]	@ (8001e94 <main+0x3dc>)
 8001d58:	a909      	add	r1, sp, #36	@ 0x24
 8001d5a:	f003 f875 	bl	8004e48 <HAL_TIM_ConfigClockSource>
 8001d5e:	2800      	cmp	r0, #0
 8001d60:	d168      	bne.n	8001e34 <main+0x37c>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001d62:	484c      	ldr	r0, [pc, #304]	@ (8001e94 <main+0x3dc>)
 8001d64:	f002 fea7 	bl	8004ab6 <HAL_TIM_PWM_Init>
 8001d68:	2800      	cmp	r0, #0
 8001d6a:	d165      	bne.n	8001e38 <main+0x380>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d70:	9308      	str	r3, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d72:	4848      	ldr	r0, [pc, #288]	@ (8001e94 <main+0x3dc>)
 8001d74:	a907      	add	r1, sp, #28
 8001d76:	f003 fa53 	bl	8005220 <HAL_TIMEx_MasterConfigSynchronization>
 8001d7a:	2800      	cmp	r0, #0
 8001d7c:	d15e      	bne.n	8001e3c <main+0x384>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d7e:	2360      	movs	r3, #96	@ 0x60
 8001d80:	930d      	str	r3, [sp, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 8001d82:	2300      	movs	r3, #0
 8001d84:	930e      	str	r3, [sp, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d86:	930f      	str	r3, [sp, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d88:	9310      	str	r3, [sp, #64]	@ 0x40
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d8a:	4842      	ldr	r0, [pc, #264]	@ (8001e94 <main+0x3dc>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	a90d      	add	r1, sp, #52	@ 0x34
 8001d90:	f002 ffb6 	bl	8004d00 <HAL_TIM_PWM_ConfigChannel>
 8001d94:	2800      	cmp	r0, #0
 8001d96:	d153      	bne.n	8001e40 <main+0x388>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d98:	483e      	ldr	r0, [pc, #248]	@ (8001e94 <main+0x3dc>)
 8001d9a:	2204      	movs	r2, #4
 8001d9c:	a90d      	add	r1, sp, #52	@ 0x34
 8001d9e:	f002 ffaf 	bl	8004d00 <HAL_TIM_PWM_ConfigChannel>
 8001da2:	2800      	cmp	r0, #0
 8001da4:	d14e      	bne.n	8001e44 <main+0x38c>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001da6:	483b      	ldr	r0, [pc, #236]	@ (8001e94 <main+0x3dc>)
 8001da8:	2208      	movs	r2, #8
 8001daa:	a90d      	add	r1, sp, #52	@ 0x34
 8001dac:	f002 ffa8 	bl	8004d00 <HAL_TIM_PWM_ConfigChannel>
 8001db0:	2800      	cmp	r0, #0
 8001db2:	d149      	bne.n	8001e48 <main+0x390>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001db4:	4837      	ldr	r0, [pc, #220]	@ (8001e94 <main+0x3dc>)
 8001db6:	220c      	movs	r2, #12
 8001db8:	a90d      	add	r1, sp, #52	@ 0x34
 8001dba:	f002 ffa1 	bl	8004d00 <HAL_TIM_PWM_ConfigChannel>
 8001dbe:	2800      	cmp	r0, #0
 8001dc0:	d144      	bne.n	8001e4c <main+0x394>
  settings_init(s_ptr, settings_size);
 8001dc2:	4b36      	ldr	r3, [pc, #216]	@ (8001e9c <main+0x3e4>)
 8001dc4:	8819      	ldrh	r1, [r3, #0]
 8001dc6:	4836      	ldr	r0, [pc, #216]	@ (8001ea0 <main+0x3e8>)
 8001dc8:	f003 fdda 	bl	8005980 <settings_init>
  IN12_init();
 8001dcc:	f7ff fc96 	bl	80016fc <IN12_init>
  DS3231_Init(&hi2c1);
 8001dd0:	4c23      	ldr	r4, [pc, #140]	@ (8001e60 <main+0x3a8>)
 8001dd2:	0020      	movs	r0, r4
 8001dd4:	f000 fe42 	bl	8002a5c <DS3231_Init>
  init_menu_items(&hmenu, items_list, NUM_OF_MENUS, NUM_OF_ITEMS);
 8001dd8:	4932      	ldr	r1, [pc, #200]	@ (8001ea4 <main+0x3ec>)
 8001dda:	4833      	ldr	r0, [pc, #204]	@ (8001ea8 <main+0x3f0>)
 8001ddc:	2309      	movs	r3, #9
 8001dde:	2203      	movs	r2, #3
 8001de0:	f000 fb00 	bl	80023e4 <init_menu_items>
  btns_init(&hbtns, btns_list, num_of_btns, &htim21, PRESSED);
 8001de4:	4b28      	ldr	r3, [pc, #160]	@ (8001e88 <main+0x3d0>)
 8001de6:	4a31      	ldr	r2, [pc, #196]	@ (8001eac <main+0x3f4>)
 8001de8:	7812      	ldrb	r2, [r2, #0]
 8001dea:	4931      	ldr	r1, [pc, #196]	@ (8001eb0 <main+0x3f8>)
 8001dec:	4831      	ldr	r0, [pc, #196]	@ (8001eb4 <main+0x3fc>)
 8001dee:	2501      	movs	r5, #1
 8001df0:	9500      	str	r5, [sp, #0]
 8001df2:	f7ff fca9 	bl	8001748 <btns_init>
  Tmp75_Init(&hi2c1);
 8001df6:	0020      	movs	r0, r4
 8001df8:	f000 fd2e 	bl	8002858 <Tmp75_Init>
  opt3001_init();
 8001dfc:	f000 fb86 	bl	800250c <opt3001_init>
	  if(flag_upd_time) {
 8001e00:	4e2d      	ldr	r6, [pc, #180]	@ (8001eb8 <main+0x400>)
	  if(flag_upd_tubes) {
 8001e02:	4b2e      	ldr	r3, [pc, #184]	@ (8001ebc <main+0x404>)
 8001e04:	4699      	mov	r9, r3
		  items_list[TEMPERATURE].numbers[1] = ((int)(t*100))%100;
 8001e06:	4b2e      	ldr	r3, [pc, #184]	@ (8001ec0 <main+0x408>)
 8001e08:	4698      	mov	r8, r3
 8001e0a:	e0ca      	b.n	8001fa2 <main+0x4ea>
 8001e0c:	b672      	cpsid	i
  while (1)
 8001e0e:	e7fe      	b.n	8001e0e <main+0x356>
 8001e10:	b672      	cpsid	i
 8001e12:	e7fe      	b.n	8001e12 <main+0x35a>
 8001e14:	b672      	cpsid	i
 8001e16:	e7fe      	b.n	8001e16 <main+0x35e>
 8001e18:	b672      	cpsid	i
 8001e1a:	e7fe      	b.n	8001e1a <main+0x362>
 8001e1c:	b672      	cpsid	i
 8001e1e:	e7fe      	b.n	8001e1e <main+0x366>
 8001e20:	b672      	cpsid	i
 8001e22:	e7fe      	b.n	8001e22 <main+0x36a>
 8001e24:	b672      	cpsid	i
 8001e26:	e7fe      	b.n	8001e26 <main+0x36e>
 8001e28:	b672      	cpsid	i
 8001e2a:	e7fe      	b.n	8001e2a <main+0x372>
 8001e2c:	b672      	cpsid	i
 8001e2e:	e7fe      	b.n	8001e2e <main+0x376>
 8001e30:	b672      	cpsid	i
 8001e32:	e7fe      	b.n	8001e32 <main+0x37a>
 8001e34:	b672      	cpsid	i
 8001e36:	e7fe      	b.n	8001e36 <main+0x37e>
 8001e38:	b672      	cpsid	i
 8001e3a:	e7fe      	b.n	8001e3a <main+0x382>
 8001e3c:	b672      	cpsid	i
 8001e3e:	e7fe      	b.n	8001e3e <main+0x386>
 8001e40:	b672      	cpsid	i
 8001e42:	e7fe      	b.n	8001e42 <main+0x38a>
 8001e44:	b672      	cpsid	i
 8001e46:	e7fe      	b.n	8001e46 <main+0x38e>
 8001e48:	b672      	cpsid	i
 8001e4a:	e7fe      	b.n	8001e4a <main+0x392>
 8001e4c:	b672      	cpsid	i
 8001e4e:	e7fe      	b.n	8001e4e <main+0x396>
 8001e50:	40021000 	.word	0x40021000
 8001e54:	50000800 	.word	0x50000800
 8001e58:	50000400 	.word	0x50000400
 8001e5c:	00009901 	.word	0x00009901
 8001e60:	20000dbc 	.word	0x20000dbc
 8001e64:	40005400 	.word	0x40005400
 8001e68:	00707cbb 	.word	0x00707cbb
 8001e6c:	20000d34 	.word	0x20000d34
 8001e70:	40004800 	.word	0x40004800
 8001e74:	00033324 	.word	0x00033324
 8001e78:	20000cac 	.word	0x20000cac
 8001e7c:	40004400 	.word	0x40004400
 8001e80:	20000c88 	.word	0x20000c88
 8001e84:	40002800 	.word	0x40002800
 8001e88:	20000c08 	.word	0x20000c08
 8001e8c:	40010800 	.word	0x40010800
 8001e90:	00007cff 	.word	0x00007cff
 8001e94:	20000c48 	.word	0x20000c48
 8001e98:	00000c7f 	.word	0x00000c7f
 8001e9c:	20000002 	.word	0x20000002
 8001ea0:	2000079c 	.word	0x2000079c
 8001ea4:	20000004 	.word	0x20000004
 8001ea8:	20000ae0 	.word	0x20000ae0
 8001eac:	20000000 	.word	0x20000000
 8001eb0:	200007fc 	.word	0x200007fc
 8001eb4:	200008f4 	.word	0x200008f4
 8001eb8:	200008c1 	.word	0x200008c1
 8001ebc:	200008c2 	.word	0x200008c2
 8001ec0:	42c80000 	.word	0x42c80000
		  time_update();
 8001ec4:	f7ff fc0c 	bl	80016e0 <time_update>
		  items_list[YEAR].numbers[0] = 20;
 8001ec8:	4940      	ldr	r1, [pc, #256]	@ (8001fcc <main+0x514>)
 8001eca:	23e2      	movs	r3, #226	@ 0xe2
 8001ecc:	2214      	movs	r2, #20
 8001ece:	000d      	movs	r5, r1
 8001ed0:	52ca      	strh	r2, [r1, r3]
		  items_list[YEAR].numbers[1] = DS3231_GetYear() - 2000;
 8001ed2:	f000 fdfe 	bl	8002ad2 <DS3231_GetYear>
 8001ed6:	4b3e      	ldr	r3, [pc, #248]	@ (8001fd0 <main+0x518>)
 8001ed8:	469c      	mov	ip, r3
 8001eda:	4460      	add	r0, ip
 8001edc:	23e4      	movs	r3, #228	@ 0xe4
 8001ede:	52e8      	strh	r0, [r5, r3]
		  items_list[DAY_MONTH].numbers[0] = DS3231_GetDate();
 8001ee0:	f000 fde7 	bl	8002ab2 <DS3231_GetDate>
 8001ee4:	23dd      	movs	r3, #221	@ 0xdd
 8001ee6:	005b      	lsls	r3, r3, #1
 8001ee8:	52e8      	strh	r0, [r5, r3]
		  items_list[DAY_MONTH].numbers[1] = DS3231_GetMonth();
 8001eea:	f000 fde9 	bl	8002ac0 <DS3231_GetMonth>
 8001eee:	23de      	movs	r3, #222	@ 0xde
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	52e8      	strh	r0, [r5, r3]
		  items_list[HOURS_MINUTES].numbers[0] = DS3231_GetHour();
 8001ef4:	f000 fe02 	bl	8002afc <DS3231_GetHour>
 8001ef8:	4b36      	ldr	r3, [pc, #216]	@ (8001fd4 <main+0x51c>)
 8001efa:	52e8      	strh	r0, [r5, r3]
		  items_list[HOURS_MINUTES].numbers[1] = DS3231_GetMinute();
 8001efc:	f000 fe05 	bl	8002b0a <DS3231_GetMinute>
 8001f00:	23a5      	movs	r3, #165	@ 0xa5
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	52e8      	strh	r0, [r5, r3]
		  items_list[MINUTES_SECONDS].numbers[0] = items_list[HOURS_MINUTES].numbers[1];
 8001f06:	4b34      	ldr	r3, [pc, #208]	@ (8001fd8 <main+0x520>)
 8001f08:	52e8      	strh	r0, [r5, r3]
		  items_list[MINUTES_SECONDS].numbers[1] = DS3231_GetSecond();
 8001f0a:	f000 fe05 	bl	8002b18 <DS3231_GetSecond>
 8001f0e:	23db      	movs	r3, #219	@ 0xdb
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	52e8      	strh	r0, [r5, r3]
		  Read_TempCelsius(&t);
 8001f14:	4f31      	ldr	r7, [pc, #196]	@ (8001fdc <main+0x524>)
 8001f16:	0038      	movs	r0, r7
 8001f18:	f000 fcd2 	bl	80028c0 <Read_TempCelsius>
		  items_list[TEMPERATURE].numbers[0] = t;
 8001f1c:	6838      	ldr	r0, [r7, #0]
 8001f1e:	f7fe faf1 	bl	8000504 <__aeabi_f2uiz>
 8001f22:	4b2f      	ldr	r3, [pc, #188]	@ (8001fe0 <main+0x528>)
 8001f24:	52e8      	strh	r0, [r5, r3]
		  items_list[TEMPERATURE].numbers[1] = ((int)(t*100))%100;
 8001f26:	6838      	ldr	r0, [r7, #0]
 8001f28:	4641      	mov	r1, r8
 8001f2a:	f7fe fc95 	bl	8000858 <__aeabi_fmul>
 8001f2e:	f7fe ff75 	bl	8000e1c <__aeabi_f2iz>
 8001f32:	2164      	movs	r1, #100	@ 0x64
 8001f34:	f7fe fa58 	bl	80003e8 <__aeabi_idivmod>
 8001f38:	4b2a      	ldr	r3, [pc, #168]	@ (8001fe4 <main+0x52c>)
 8001f3a:	52e9      	strh	r1, [r5, r3]
		  flag_upd_time = 0;
 8001f3c:	4b2a      	ldr	r3, [pc, #168]	@ (8001fe8 <main+0x530>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	701a      	strb	r2, [r3, #0]
 8001f42:	e032      	b.n	8001faa <main+0x4f2>
		  IN12_set();
 8001f44:	f7ff fb2e 	bl	80015a4 <IN12_set>
		  flag_upd_tubes = 0;
 8001f48:	4b28      	ldr	r3, [pc, #160]	@ (8001fec <main+0x534>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	701a      	strb	r2, [r3, #0]
 8001f4e:	e030      	b.n	8001fb2 <main+0x4fa>
	  if(logic[hmenu.current_item][shared_mask][shared_press_type][hmenu.is_selected] != NULL) {
 8001f50:	4a27      	ldr	r2, [pc, #156]	@ (8001ff0 <main+0x538>)
 8001f52:	4b28      	ldr	r3, [pc, #160]	@ (8001ff4 <main+0x53c>)
 8001f54:	6819      	ldr	r1, [r3, #0]
 8001f56:	4b28      	ldr	r3, [pc, #160]	@ (8001ff8 <main+0x540>)
 8001f58:	681f      	ldr	r7, [r3, #0]
 8001f5a:	4b28      	ldr	r3, [pc, #160]	@ (8001ffc <main+0x544>)
 8001f5c:	7958      	ldrb	r0, [r3, #5]
 8001f5e:	791d      	ldrb	r5, [r3, #4]
 8001f60:	004b      	lsls	r3, r1, #1
 8001f62:	185b      	adds	r3, r3, r1
 8001f64:	0069      	lsls	r1, r5, #1
 8001f66:	1949      	adds	r1, r1, r5
 8001f68:	0109      	lsls	r1, r1, #4
 8001f6a:	185b      	adds	r3, r3, r1
 8001f6c:	0079      	lsls	r1, r7, #1
 8001f6e:	19c9      	adds	r1, r1, r7
 8001f70:	0049      	lsls	r1, r1, #1
 8001f72:	185b      	adds	r3, r3, r1
 8001f74:	181b      	adds	r3, r3, r0
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	589b      	ldr	r3, [r3, r2]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d012      	beq.n	8001fa4 <main+0x4ec>
		  (*logic[hmenu.current_item][shared_mask][shared_press_type][hmenu.is_selected])();
 8001f7e:	4798      	blx	r3
		  tubes_data_source_set(&(items_list[hmenu.current_item].numbers[0]), &(items_list[hmenu.current_item].numbers[1]));
 8001f80:	4b1e      	ldr	r3, [pc, #120]	@ (8001ffc <main+0x544>)
 8001f82:	791b      	ldrb	r3, [r3, #4]
 8001f84:	20d8      	movs	r0, #216	@ 0xd8
 8001f86:	4358      	muls	r0, r3
 8001f88:	0001      	movs	r1, r0
 8001f8a:	310c      	adds	r1, #12
 8001f8c:	4b0f      	ldr	r3, [pc, #60]	@ (8001fcc <main+0x514>)
 8001f8e:	18c9      	adds	r1, r1, r3
 8001f90:	300a      	adds	r0, #10
 8001f92:	18c0      	adds	r0, r0, r3
 8001f94:	f7ff fbd2 	bl	800173c <tubes_data_source_set>
		  shared_mask = 0;
 8001f98:	4b17      	ldr	r3, [pc, #92]	@ (8001ff8 <main+0x540>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	601a      	str	r2, [r3, #0]
		  shared_press_type = 0;
 8001f9e:	4b15      	ldr	r3, [pc, #84]	@ (8001ff4 <main+0x53c>)
 8001fa0:	601a      	str	r2, [r3, #0]
	  if(flag_upd_dots) {
 8001fa2:	4c17      	ldr	r4, [pc, #92]	@ (8002000 <main+0x548>)
	  if(flag_upd_time) {
 8001fa4:	7833      	ldrb	r3, [r6, #0]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d18c      	bne.n	8001ec4 <main+0x40c>
	  if(flag_upd_tubes) {
 8001faa:	464b      	mov	r3, r9
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d1c8      	bne.n	8001f44 <main+0x48c>
	  if(flag_upd_dots) {
 8001fb2:	7823      	ldrb	r3, [r4, #0]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d0cb      	beq.n	8001f50 <main+0x498>
		  flag_upd_dots = 0;
 8001fb8:	4b11      	ldr	r3, [pc, #68]	@ (8002000 <main+0x548>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_TogglePin(INS_EN_3V3_GPIO_Port, INS_EN_3V3_Pin);
 8001fbe:	20a0      	movs	r0, #160	@ 0xa0
 8001fc0:	2120      	movs	r1, #32
 8001fc2:	05c0      	lsls	r0, r0, #23
 8001fc4:	f001 f9ae 	bl	8003324 <HAL_GPIO_TogglePin>
 8001fc8:	e7c2      	b.n	8001f50 <main+0x498>
 8001fca:	46c0      	nop			@ (mov r8, r8)
 8001fcc:	20000004 	.word	0x20000004
 8001fd0:	fffff830 	.word	0xfffff830
 8001fd4:	00000292 	.word	0x00000292
 8001fd8:	0000036a 	.word	0x0000036a
 8001fdc:	200008f0 	.word	0x200008f0
 8001fe0:	00000442 	.word	0x00000442
 8001fe4:	00000444 	.word	0x00000444
 8001fe8:	200008c1 	.word	0x200008c1
 8001fec:	200008c2 	.word	0x200008c2
 8001ff0:	20000e14 	.word	0x20000e14
 8001ff4:	200008e0 	.word	0x200008e0
 8001ff8:	200008e4 	.word	0x200008e4
 8001ffc:	20000ae0 	.word	0x20000ae0
 8002000:	200008c0 	.word	0x200008c0

08002004 <Error_Handler>:
 8002004:	b672      	cpsid	i
  while (1)
 8002006:	e7fe      	b.n	8002006 <Error_Handler+0x2>

08002008 <item_goto_prev>:

	 tubes_data_source_set(&(items[menu->current_item].numbers[0]), &(items[menu->current_item].numbers[1]));
}

void item_goto_prev(void) {
	menu->current_item = items[menu->current_item].prev;
 8002008:	4b05      	ldr	r3, [pc, #20]	@ (8002020 <item_goto_prev+0x18>)
 800200a:	6819      	ldr	r1, [r3, #0]
 800200c:	7908      	ldrb	r0, [r1, #4]
 800200e:	4b05      	ldr	r3, [pc, #20]	@ (8002024 <item_goto_prev+0x1c>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	22d8      	movs	r2, #216	@ 0xd8
 8002014:	4342      	muls	r2, r0
 8002016:	189b      	adds	r3, r3, r2
 8002018:	7a1b      	ldrb	r3, [r3, #8]
 800201a:	710b      	strb	r3, [r1, #4]
}
 800201c:	4770      	bx	lr
 800201e:	46c0      	nop			@ (mov r8, r8)
 8002020:	200014dc 	.word	0x200014dc
 8002024:	200014d8 	.word	0x200014d8

08002028 <item_goto_next>:

void item_goto_next(void) {
	menu->current_item = items[menu->current_item].next;
 8002028:	4b05      	ldr	r3, [pc, #20]	@ (8002040 <item_goto_next+0x18>)
 800202a:	6819      	ldr	r1, [r3, #0]
 800202c:	7908      	ldrb	r0, [r1, #4]
 800202e:	4b05      	ldr	r3, [pc, #20]	@ (8002044 <item_goto_next+0x1c>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	22d8      	movs	r2, #216	@ 0xd8
 8002034:	4342      	muls	r2, r0
 8002036:	189b      	adds	r3, r3, r2
 8002038:	7a5b      	ldrb	r3, [r3, #9]
 800203a:	710b      	strb	r3, [r1, #4]
}
 800203c:	4770      	bx	lr
 800203e:	46c0      	nop			@ (mov r8, r8)
 8002040:	200014dc 	.word	0x200014dc
 8002044:	200014d8 	.word	0x200014d8

08002048 <item_selection_cycle>:
void item_selection_cycle(void) {
//	menu->is_selected = menu->is_selected < NUM_OF_SELECTIONS-1 ? menu->is_selected + 1 : 0;
	switch (menu->is_selected) {
 8002048:	4b19      	ldr	r3, [pc, #100]	@ (80020b0 <item_selection_cycle+0x68>)
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	7953      	ldrb	r3, [r2, #5]
 800204e:	2b01      	cmp	r3, #1
 8002050:	d01b      	beq.n	800208a <item_selection_cycle+0x42>
 8002052:	2b02      	cmp	r3, #2
 8002054:	d023      	beq.n	800209e <item_selection_cycle+0x56>
 8002056:	2b00      	cmp	r3, #0
 8002058:	d000      	beq.n	800205c <item_selection_cycle+0x14>
			duty_cycles[2] = duty_cycles[3] = 90;
			break;
		default:
			break;
	}
}
 800205a:	4770      	bx	lr
			if(menu->current_item == YEAR) {
 800205c:	7913      	ldrb	r3, [r2, #4]
 800205e:	2b01      	cmp	r3, #1
 8002060:	d009      	beq.n	8002076 <item_selection_cycle+0x2e>
				menu->is_selected = SELECTED_FIRST_NUM;
 8002062:	2301      	movs	r3, #1
 8002064:	7153      	strb	r3, [r2, #5]
				duty_cycles[0] = duty_cycles[1] = 90;
 8002066:	4b13      	ldr	r3, [pc, #76]	@ (80020b4 <item_selection_cycle+0x6c>)
 8002068:	225a      	movs	r2, #90	@ 0x5a
 800206a:	705a      	strb	r2, [r3, #1]
 800206c:	701a      	strb	r2, [r3, #0]
				duty_cycles[2] = duty_cycles[3] = 30;
 800206e:	3a3c      	subs	r2, #60	@ 0x3c
 8002070:	70da      	strb	r2, [r3, #3]
 8002072:	709a      	strb	r2, [r3, #2]
			break;
 8002074:	e7f1      	b.n	800205a <item_selection_cycle+0x12>
				menu->is_selected = SELECTED_SECOND_NUM;
 8002076:	3301      	adds	r3, #1
 8002078:	7153      	strb	r3, [r2, #5]
				duty_cycles[0] = duty_cycles[1] = 30;
 800207a:	4b0e      	ldr	r3, [pc, #56]	@ (80020b4 <item_selection_cycle+0x6c>)
 800207c:	221e      	movs	r2, #30
 800207e:	705a      	strb	r2, [r3, #1]
 8002080:	701a      	strb	r2, [r3, #0]
				duty_cycles[2] = duty_cycles[3] = 90;
 8002082:	323c      	adds	r2, #60	@ 0x3c
 8002084:	70da      	strb	r2, [r3, #3]
 8002086:	709a      	strb	r2, [r3, #2]
				break;
 8002088:	e7e7      	b.n	800205a <item_selection_cycle+0x12>
			menu->is_selected = SELECTED_SECOND_NUM;
 800208a:	2302      	movs	r3, #2
 800208c:	7153      	strb	r3, [r2, #5]
			duty_cycles[0] = duty_cycles[1] = 30;
 800208e:	4b09      	ldr	r3, [pc, #36]	@ (80020b4 <item_selection_cycle+0x6c>)
 8002090:	221e      	movs	r2, #30
 8002092:	705a      	strb	r2, [r3, #1]
 8002094:	701a      	strb	r2, [r3, #0]
			duty_cycles[2] = duty_cycles[3] = 90;
 8002096:	323c      	adds	r2, #60	@ 0x3c
 8002098:	70da      	strb	r2, [r3, #3]
 800209a:	709a      	strb	r2, [r3, #2]
			break;
 800209c:	e7dd      	b.n	800205a <item_selection_cycle+0x12>
			menu->is_selected = DESELECTED;
 800209e:	2300      	movs	r3, #0
 80020a0:	7153      	strb	r3, [r2, #5]
			duty_cycles[0] = duty_cycles[1] = 90;
 80020a2:	4b04      	ldr	r3, [pc, #16]	@ (80020b4 <item_selection_cycle+0x6c>)
 80020a4:	225a      	movs	r2, #90	@ 0x5a
 80020a6:	705a      	strb	r2, [r3, #1]
 80020a8:	701a      	strb	r2, [r3, #0]
			duty_cycles[2] = duty_cycles[3] = 90;
 80020aa:	70da      	strb	r2, [r3, #3]
 80020ac:	709a      	strb	r2, [r3, #2]
}
 80020ae:	e7d4      	b.n	800205a <item_selection_cycle+0x12>
 80020b0:	200014dc 	.word	0x200014dc
 80020b4:	20000850 	.word	0x20000850

080020b8 <year_decrease>:

void year_decrease(void) {
 80020b8:	b510      	push	{r4, lr}
	items[YEAR].numbers[1] = items[YEAR].numbers[1] > 0 ? items[YEAR].numbers[1] - 1 : 99;
 80020ba:	4b0a      	ldr	r3, [pc, #40]	@ (80020e4 <year_decrease+0x2c>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	001a      	movs	r2, r3
 80020c0:	32d8      	adds	r2, #216	@ 0xd8
 80020c2:	8991      	ldrh	r1, [r2, #12]
 80020c4:	2263      	movs	r2, #99	@ 0x63
 80020c6:	2900      	cmp	r1, #0
 80020c8:	d001      	beq.n	80020ce <year_decrease+0x16>
 80020ca:	3901      	subs	r1, #1
 80020cc:	b28a      	uxth	r2, r1
 80020ce:	33d8      	adds	r3, #216	@ 0xd8
 80020d0:	819a      	strh	r2, [r3, #12]
	DS3231_SetYear(2000 + (uint8_t)items[YEAR].numbers[1]);
 80020d2:	20ff      	movs	r0, #255	@ 0xff
 80020d4:	4010      	ands	r0, r2
 80020d6:	23fa      	movs	r3, #250	@ 0xfa
 80020d8:	00db      	lsls	r3, r3, #3
 80020da:	469c      	mov	ip, r3
 80020dc:	4460      	add	r0, ip
 80020de:	f000 fd48 	bl	8002b72 <DS3231_SetYear>
}
 80020e2:	bd10      	pop	{r4, pc}
 80020e4:	200014d8 	.word	0x200014d8

080020e8 <year_increase>:
void year_increase(void) {
 80020e8:	b510      	push	{r4, lr}
	items[YEAR].numbers[1] = items[YEAR].numbers[1] < 99 ? items[YEAR].numbers[1] + 1 : 0;
 80020ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002114 <year_increase+0x2c>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	001a      	movs	r2, r3
 80020f0:	32d8      	adds	r2, #216	@ 0xd8
 80020f2:	8992      	ldrh	r2, [r2, #12]
 80020f4:	2000      	movs	r0, #0
 80020f6:	2a62      	cmp	r2, #98	@ 0x62
 80020f8:	d801      	bhi.n	80020fe <year_increase+0x16>
 80020fa:	3201      	adds	r2, #1
 80020fc:	b290      	uxth	r0, r2
 80020fe:	33d8      	adds	r3, #216	@ 0xd8
 8002100:	8198      	strh	r0, [r3, #12]
	DS3231_SetYear(2000 + (uint8_t)items[YEAR].numbers[1]);
 8002102:	23fa      	movs	r3, #250	@ 0xfa
 8002104:	00db      	lsls	r3, r3, #3
 8002106:	469c      	mov	ip, r3
 8002108:	4460      	add	r0, ip
 800210a:	b280      	uxth	r0, r0
 800210c:	f000 fd31 	bl	8002b72 <DS3231_SetYear>
}
 8002110:	bd10      	pop	{r4, pc}
 8002112:	46c0      	nop			@ (mov r8, r8)
 8002114:	200014d8 	.word	0x200014d8

08002118 <month_decrease>:
	} else {
		day_max = 31;
	}
}

void month_decrease(void) {
 8002118:	b510      	push	{r4, lr}
	items[DAY_MONTH].numbers[1] = items[DAY_MONTH].numbers[1] > 1 ? items[DAY_MONTH].numbers[1] - 1 : 12;
 800211a:	4b09      	ldr	r3, [pc, #36]	@ (8002140 <month_decrease+0x28>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	001a      	movs	r2, r3
 8002120:	32b1      	adds	r2, #177	@ 0xb1
 8002122:	32ff      	adds	r2, #255	@ 0xff
 8002124:	8992      	ldrh	r2, [r2, #12]
 8002126:	200c      	movs	r0, #12
 8002128:	2a01      	cmp	r2, #1
 800212a:	d901      	bls.n	8002130 <month_decrease+0x18>
 800212c:	3a01      	subs	r2, #1
 800212e:	b290      	uxth	r0, r2
 8002130:	33b1      	adds	r3, #177	@ 0xb1
 8002132:	33ff      	adds	r3, #255	@ 0xff
 8002134:	8198      	strh	r0, [r3, #12]
	DS3231_SetMonth((uint8_t)items[DAY_MONTH].numbers[1]);
 8002136:	b2c0      	uxtb	r0, r0
 8002138:	f000 fd0a 	bl	8002b50 <DS3231_SetMonth>
}
 800213c:	bd10      	pop	{r4, pc}
 800213e:	46c0      	nop			@ (mov r8, r8)
 8002140:	200014d8 	.word	0x200014d8

08002144 <month_increase>:
void month_increase(void) {
 8002144:	b510      	push	{r4, lr}
	items[DAY_MONTH].numbers[1] = items[DAY_MONTH].numbers[1] < 11 ? items[DAY_MONTH].numbers[1] + 1 : 1;
 8002146:	4b09      	ldr	r3, [pc, #36]	@ (800216c <month_increase+0x28>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	001a      	movs	r2, r3
 800214c:	32b1      	adds	r2, #177	@ 0xb1
 800214e:	32ff      	adds	r2, #255	@ 0xff
 8002150:	8992      	ldrh	r2, [r2, #12]
 8002152:	2001      	movs	r0, #1
 8002154:	2a0a      	cmp	r2, #10
 8002156:	d801      	bhi.n	800215c <month_increase+0x18>
 8002158:	3201      	adds	r2, #1
 800215a:	b290      	uxth	r0, r2
 800215c:	33b1      	adds	r3, #177	@ 0xb1
 800215e:	33ff      	adds	r3, #255	@ 0xff
 8002160:	8198      	strh	r0, [r3, #12]
	DS3231_SetMonth((uint8_t)items[DAY_MONTH].numbers[1]);
 8002162:	b2c0      	uxtb	r0, r0
 8002164:	f000 fcf4 	bl	8002b50 <DS3231_SetMonth>
}
 8002168:	bd10      	pop	{r4, pc}
 800216a:	46c0      	nop			@ (mov r8, r8)
 800216c:	200014d8 	.word	0x200014d8

08002170 <check_max_date>:
static uint8_t check_max_date() {
 8002170:	b510      	push	{r4, lr}
	uint8_t year = DS3231_GetYear();
 8002172:	f000 fcae 	bl	8002ad2 <DS3231_GetYear>
 8002176:	0004      	movs	r4, r0
	if(DS3231_GetMonth()%2 == 0) {
 8002178:	f000 fca2 	bl	8002ac0 <DS3231_GetMonth>
 800217c:	211f      	movs	r1, #31
 800217e:	07c0      	lsls	r0, r0, #31
 8002180:	d502      	bpl.n	8002188 <check_max_date+0x18>
			day_max = 30;
 8002182:	4b0a      	ldr	r3, [pc, #40]	@ (80021ac <check_max_date+0x3c>)
 8002184:	7019      	strb	r1, [r3, #0]
}
 8002186:	bd10      	pop	{r4, pc}
		if(DS3231_GetMonth() == 2) {	// If February
 8002188:	f000 fc9a 	bl	8002ac0 <DS3231_GetMonth>
 800218c:	211e      	movs	r1, #30
 800218e:	2802      	cmp	r0, #2
 8002190:	d1f7      	bne.n	8002182 <check_max_date+0x12>
	uint8_t year = DS3231_GetYear();
 8002192:	b2e0      	uxtb	r0, r4
			day_max = (year%4 == 0) && (year%100 != 0) ? 29 : 28; // Check for leap year
 8002194:	3902      	subs	r1, #2
 8002196:	07a4      	lsls	r4, r4, #30
 8002198:	d1f3      	bne.n	8002182 <check_max_date+0x12>
 800219a:	3148      	adds	r1, #72	@ 0x48
 800219c:	f7fe f83a 	bl	8000214 <__aeabi_uidivmod>
 80021a0:	b2c9      	uxtb	r1, r1
 80021a2:	1e4b      	subs	r3, r1, #1
 80021a4:	4199      	sbcs	r1, r3
 80021a6:	311c      	adds	r1, #28
 80021a8:	e7eb      	b.n	8002182 <check_max_date+0x12>
 80021aa:	46c0      	nop			@ (mov r8, r8)
 80021ac:	200014d4 	.word	0x200014d4

080021b0 <days_decrease>:

void days_decrease(void) {
 80021b0:	b510      	push	{r4, lr}
	check_max_date();
 80021b2:	f7ff ffdd 	bl	8002170 <check_max_date>
	items[DAY_MONTH].numbers[0] = items[DAY_MONTH].numbers[0] > 1 ? items[DAY_MONTH].numbers[0] - 1 : day_max;
 80021b6:	4b0a      	ldr	r3, [pc, #40]	@ (80021e0 <days_decrease+0x30>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	001a      	movs	r2, r3
 80021bc:	32b1      	adds	r2, #177	@ 0xb1
 80021be:	32ff      	adds	r2, #255	@ 0xff
 80021c0:	8950      	ldrh	r0, [r2, #10]
 80021c2:	2801      	cmp	r0, #1
 80021c4:	d908      	bls.n	80021d8 <days_decrease+0x28>
 80021c6:	3801      	subs	r0, #1
 80021c8:	b280      	uxth	r0, r0
 80021ca:	33b1      	adds	r3, #177	@ 0xb1
 80021cc:	33ff      	adds	r3, #255	@ 0xff
 80021ce:	8158      	strh	r0, [r3, #10]
	DS3231_SetDate((uint8_t)items[DAY_MONTH].numbers[0]);
 80021d0:	b2c0      	uxtb	r0, r0
 80021d2:	f000 fcb5 	bl	8002b40 <DS3231_SetDate>
}
 80021d6:	bd10      	pop	{r4, pc}
	items[DAY_MONTH].numbers[0] = items[DAY_MONTH].numbers[0] > 1 ? items[DAY_MONTH].numbers[0] - 1 : day_max;
 80021d8:	4a02      	ldr	r2, [pc, #8]	@ (80021e4 <days_decrease+0x34>)
 80021da:	7810      	ldrb	r0, [r2, #0]
 80021dc:	e7f5      	b.n	80021ca <days_decrease+0x1a>
 80021de:	46c0      	nop			@ (mov r8, r8)
 80021e0:	200014d8 	.word	0x200014d8
 80021e4:	200014d4 	.word	0x200014d4

080021e8 <days_increase>:
void days_increase(void) {
 80021e8:	b510      	push	{r4, lr}
	check_max_date();
 80021ea:	f7ff ffc1 	bl	8002170 <check_max_date>
	items[DAY_MONTH].numbers[0] = items[DAY_MONTH].numbers[0] < day_max ? items[DAY_MONTH].numbers[0] + 1 : 1;
 80021ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002218 <days_increase+0x30>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	001a      	movs	r2, r3
 80021f4:	32b1      	adds	r2, #177	@ 0xb1
 80021f6:	32ff      	adds	r2, #255	@ 0xff
 80021f8:	8952      	ldrh	r2, [r2, #10]
 80021fa:	4908      	ldr	r1, [pc, #32]	@ (800221c <days_increase+0x34>)
 80021fc:	7809      	ldrb	r1, [r1, #0]
 80021fe:	2001      	movs	r0, #1
 8002200:	4291      	cmp	r1, r2
 8002202:	d901      	bls.n	8002208 <days_increase+0x20>
 8002204:	3201      	adds	r2, #1
 8002206:	b290      	uxth	r0, r2
 8002208:	33b1      	adds	r3, #177	@ 0xb1
 800220a:	33ff      	adds	r3, #255	@ 0xff
 800220c:	8158      	strh	r0, [r3, #10]
	DS3231_SetDate((uint8_t)items[DAY_MONTH].numbers[0]);
 800220e:	b2c0      	uxtb	r0, r0
 8002210:	f000 fc96 	bl	8002b40 <DS3231_SetDate>
}
 8002214:	bd10      	pop	{r4, pc}
 8002216:	46c0      	nop			@ (mov r8, r8)
 8002218:	200014d8 	.word	0x200014d8
 800221c:	200014d4 	.word	0x200014d4

08002220 <hours_decrease>:

void hours_decrease(void) {
 8002220:	b510      	push	{r4, lr}
	items[HOURS_MINUTES].numbers[0] = items[HOURS_MINUTES].numbers[0] > 0 ? items[HOURS_MINUTES].numbers[0] - 1 : 23;
 8002222:	4b0a      	ldr	r3, [pc, #40]	@ (800224c <hours_decrease+0x2c>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	22a2      	movs	r2, #162	@ 0xa2
 8002228:	0092      	lsls	r2, r2, #2
 800222a:	189a      	adds	r2, r3, r2
 800222c:	8952      	ldrh	r2, [r2, #10]
 800222e:	2017      	movs	r0, #23
 8002230:	2a00      	cmp	r2, #0
 8002232:	d001      	beq.n	8002238 <hours_decrease+0x18>
 8002234:	3a01      	subs	r2, #1
 8002236:	b290      	uxth	r0, r2
 8002238:	22a2      	movs	r2, #162	@ 0xa2
 800223a:	0092      	lsls	r2, r2, #2
 800223c:	4694      	mov	ip, r2
 800223e:	4463      	add	r3, ip
 8002240:	8158      	strh	r0, [r3, #10]
	DS3231_SetHour((uint8_t)items[HOURS_MINUTES].numbers[0]);
 8002242:	b2c0      	uxtb	r0, r0
 8002244:	f000 fcb8 	bl	8002bb8 <DS3231_SetHour>
}
 8002248:	bd10      	pop	{r4, pc}
 800224a:	46c0      	nop			@ (mov r8, r8)
 800224c:	200014d8 	.word	0x200014d8

08002250 <hours_increase>:
void hours_increase(void) {
 8002250:	b510      	push	{r4, lr}
	items[HOURS_MINUTES].numbers[0] = items[HOURS_MINUTES].numbers[0] < 23 ? items[HOURS_MINUTES].numbers[0] + 1 : 0;
 8002252:	4b0a      	ldr	r3, [pc, #40]	@ (800227c <hours_increase+0x2c>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	22a2      	movs	r2, #162	@ 0xa2
 8002258:	0092      	lsls	r2, r2, #2
 800225a:	189a      	adds	r2, r3, r2
 800225c:	8952      	ldrh	r2, [r2, #10]
 800225e:	2000      	movs	r0, #0
 8002260:	2a16      	cmp	r2, #22
 8002262:	d801      	bhi.n	8002268 <hours_increase+0x18>
 8002264:	3201      	adds	r2, #1
 8002266:	b290      	uxth	r0, r2
 8002268:	22a2      	movs	r2, #162	@ 0xa2
 800226a:	0092      	lsls	r2, r2, #2
 800226c:	4694      	mov	ip, r2
 800226e:	4463      	add	r3, ip
 8002270:	8158      	strh	r0, [r3, #10]
	DS3231_SetHour((uint8_t)items[HOURS_MINUTES].numbers[0]);
 8002272:	b2c0      	uxtb	r0, r0
 8002274:	f000 fca0 	bl	8002bb8 <DS3231_SetHour>
}
 8002278:	bd10      	pop	{r4, pc}
 800227a:	46c0      	nop			@ (mov r8, r8)
 800227c:	200014d8 	.word	0x200014d8

08002280 <minutes_decrease>:
void minutes_decrease(void) {
 8002280:	b510      	push	{r4, lr}
	items[HOURS_MINUTES].numbers[1] = items[HOURS_MINUTES].numbers[1] > 0 ? items[HOURS_MINUTES].numbers[1] - 1 : 59;
 8002282:	4b0b      	ldr	r3, [pc, #44]	@ (80022b0 <minutes_decrease+0x30>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	22a2      	movs	r2, #162	@ 0xa2
 8002288:	0092      	lsls	r2, r2, #2
 800228a:	189a      	adds	r2, r3, r2
 800228c:	8992      	ldrh	r2, [r2, #12]
 800228e:	203b      	movs	r0, #59	@ 0x3b
 8002290:	2a00      	cmp	r2, #0
 8002292:	d001      	beq.n	8002298 <minutes_decrease+0x18>
 8002294:	3a01      	subs	r2, #1
 8002296:	b290      	uxth	r0, r2
 8002298:	22a2      	movs	r2, #162	@ 0xa2
 800229a:	0092      	lsls	r2, r2, #2
 800229c:	4694      	mov	ip, r2
 800229e:	4463      	add	r3, ip
 80022a0:	8198      	strh	r0, [r3, #12]
	DS3231_SetMinute((uint8_t)items[HOURS_MINUTES].numbers[1]);
 80022a2:	b2c0      	uxtb	r0, r0
 80022a4:	f000 fc92 	bl	8002bcc <DS3231_SetMinute>
	DS3231_SetSecond(0);
 80022a8:	2000      	movs	r0, #0
 80022aa:	f000 fc97 	bl	8002bdc <DS3231_SetSecond>
}
 80022ae:	bd10      	pop	{r4, pc}
 80022b0:	200014d8 	.word	0x200014d8

080022b4 <minutes_increase>:
void minutes_increase(void) {
 80022b4:	b510      	push	{r4, lr}
	items[HOURS_MINUTES].numbers[1] = items[HOURS_MINUTES].numbers[1] < 59 ? items[HOURS_MINUTES].numbers[1] + 1 : 0;
 80022b6:	4b0b      	ldr	r3, [pc, #44]	@ (80022e4 <minutes_increase+0x30>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	22a2      	movs	r2, #162	@ 0xa2
 80022bc:	0092      	lsls	r2, r2, #2
 80022be:	189a      	adds	r2, r3, r2
 80022c0:	8992      	ldrh	r2, [r2, #12]
 80022c2:	2000      	movs	r0, #0
 80022c4:	2a3a      	cmp	r2, #58	@ 0x3a
 80022c6:	d801      	bhi.n	80022cc <minutes_increase+0x18>
 80022c8:	3201      	adds	r2, #1
 80022ca:	b290      	uxth	r0, r2
 80022cc:	22a2      	movs	r2, #162	@ 0xa2
 80022ce:	0092      	lsls	r2, r2, #2
 80022d0:	4694      	mov	ip, r2
 80022d2:	4463      	add	r3, ip
 80022d4:	8198      	strh	r0, [r3, #12]
	DS3231_SetMinute((uint8_t)items[HOURS_MINUTES].numbers[1]);
 80022d6:	b2c0      	uxtb	r0, r0
 80022d8:	f000 fc78 	bl	8002bcc <DS3231_SetMinute>
	DS3231_SetSecond(0);
 80022dc:	2000      	movs	r0, #0
 80022de:	f000 fc7d 	bl	8002bdc <DS3231_SetSecond>
}
 80022e2:	bd10      	pop	{r4, pc}
 80022e4:	200014d8 	.word	0x200014d8

080022e8 <numbers_on_off>:

static void numbers_hide(void) {
	HAL_GPIO_WritePin(SHDN_170V_3V3_GPIO_Port, SHDN_170V_3V3_Pin, GPIO_PIN_SET);
}

static void numbers_on_off(void) {
 80022e8:	b510      	push	{r4, lr}
	static int status = 0;

	if(status == 0) {
 80022ea:	4b0c      	ldr	r3, [pc, #48]	@ (800231c <numbers_on_off+0x34>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d109      	bne.n	8002306 <numbers_on_off+0x1e>
		status = 1;
 80022f2:	4b0a      	ldr	r3, [pc, #40]	@ (800231c <numbers_on_off+0x34>)
 80022f4:	2201      	movs	r2, #1
 80022f6:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(SHDN_170V_3V3_GPIO_Port, SHDN_170V_3V3_Pin, GPIO_PIN_RESET);
 80022f8:	20a0      	movs	r0, #160	@ 0xa0
 80022fa:	2200      	movs	r2, #0
 80022fc:	2110      	movs	r1, #16
 80022fe:	05c0      	lsls	r0, r0, #23
 8002300:	f001 f80a 	bl	8003318 <HAL_GPIO_WritePin>
		status = 0;
		numbers_hide();
	}

//	TOGGLE_170V();
}
 8002304:	bd10      	pop	{r4, pc}
		status = 0;
 8002306:	4b05      	ldr	r3, [pc, #20]	@ (800231c <numbers_on_off+0x34>)
 8002308:	2200      	movs	r2, #0
 800230a:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(SHDN_170V_3V3_GPIO_Port, SHDN_170V_3V3_Pin, GPIO_PIN_SET);
 800230c:	20a0      	movs	r0, #160	@ 0xa0
 800230e:	3201      	adds	r2, #1
 8002310:	2110      	movs	r1, #16
 8002312:	05c0      	lsls	r0, r0, #23
 8002314:	f001 f800 	bl	8003318 <HAL_GPIO_WritePin>
}
 8002318:	e7f4      	b.n	8002304 <numbers_on_off+0x1c>
 800231a:	46c0      	nop			@ (mov r8, r8)
 800231c:	20000e10 	.word	0x20000e10

08002320 <init_menu_functions>:

static menu_toggle(void) {

}

void init_menu_functions(void) {
 8002320:	b5f0      	push	{r4, r5, r6, r7, lr}
	for(int item = 0; item < NUM_OF_ITEMS; ++item) {
 8002322:	4821      	ldr	r0, [pc, #132]	@ (80023a8 <init_menu_functions+0x88>)
 8002324:	0001      	movs	r1, r0
 8002326:	31c0      	adds	r1, #192	@ 0xc0
 8002328:	23d8      	movs	r3, #216	@ 0xd8
 800232a:	00db      	lsls	r3, r3, #3
 800232c:	469c      	mov	ip, r3
 800232e:	4484      	add	ip, r0
		for(int mask = 0; mask < NUM_OF_BTN_COMBINATIONS; ++mask) {
			for(int press = 0; press < NUM_OF_PRESS_TYPES; ++press) {
				for(int selection = 0; selection < NUM_OF_SELECTIONS; ++selection) {
					logic[item][mask][press][selection] 	= NULL;
 8002330:	2200      	movs	r2, #0
				}
			}
		}
		logic[item][MASK_ENTER]	[CLICK][DESELECTED] = numbers_on_off; //item_selection_cycle;
 8002332:	4f1e      	ldr	r7, [pc, #120]	@ (80023ac <init_menu_functions+0x8c>)
		logic[item][MASK_ENTER]	[HOLD][DESELECTED] = item_selection_cycle;
 8002334:	4c1e      	ldr	r4, [pc, #120]	@ (80023b0 <init_menu_functions+0x90>)

		logic[item][MASK_LEFT]	[CLICK][DESELECTED] = item_goto_prev; // Goes to a previous item when "is_selected == 0" and decreases parameter
 8002336:	4e1f      	ldr	r6, [pc, #124]	@ (80023b4 <init_menu_functions+0x94>)
		logic[item][MASK_RIGHT]	[CLICK][DESELECTED] = item_goto_next; // Goes to a previous item when "is_selected == 0" and decreases parameter
 8002338:	4d1f      	ldr	r5, [pc, #124]	@ (80023b8 <init_menu_functions+0x98>)
 800233a:	e009      	b.n	8002350 <init_menu_functions+0x30>
		logic[item][MASK_ENTER]	[CLICK][DESELECTED] = numbers_on_off; //item_selection_cycle;
 800233c:	6307      	str	r7, [r0, #48]	@ 0x30
		logic[item][MASK_ENTER]	[HOLD][DESELECTED] = item_selection_cycle;
 800233e:	63c4      	str	r4, [r0, #60]	@ 0x3c
		logic[item][MASK_LEFT]	[CLICK][DESELECTED] = item_goto_prev; // Goes to a previous item when "is_selected == 0" and decreases parameter
 8002340:	6186      	str	r6, [r0, #24]
		logic[item][MASK_RIGHT]	[CLICK][DESELECTED] = item_goto_next; // Goes to a previous item when "is_selected == 0" and decreases parameter
 8002342:	6605      	str	r5, [r0, #96]	@ 0x60
		logic[item][MASK_ENTER]	[CLICK][SELECTED_FIRST_NUM] = item_selection_cycle;
 8002344:	6344      	str	r4, [r0, #52]	@ 0x34
		logic[item][MASK_ENTER]	[CLICK][SELECTED_SECOND_NUM] = item_selection_cycle;
 8002346:	6384      	str	r4, [r0, #56]	@ 0x38
	for(int item = 0; item < NUM_OF_ITEMS; ++item) {
 8002348:	30c0      	adds	r0, #192	@ 0xc0
 800234a:	31c0      	adds	r1, #192	@ 0xc0
 800234c:	4560      	cmp	r0, ip
 800234e:	d00a      	beq.n	8002366 <init_menu_functions+0x46>
void init_menu_functions(void) {
 8002350:	0003      	movs	r3, r0
					logic[item][mask][press][selection] 	= NULL;
 8002352:	601a      	str	r2, [r3, #0]
 8002354:	605a      	str	r2, [r3, #4]
 8002356:	609a      	str	r2, [r3, #8]
 8002358:	60da      	str	r2, [r3, #12]
 800235a:	611a      	str	r2, [r3, #16]
 800235c:	615a      	str	r2, [r3, #20]
		for(int mask = 0; mask < NUM_OF_BTN_COMBINATIONS; ++mask) {
 800235e:	3318      	adds	r3, #24
 8002360:	4299      	cmp	r1, r3
 8002362:	d1f6      	bne.n	8002352 <init_menu_functions+0x32>
 8002364:	e7ea      	b.n	800233c <init_menu_functions+0x1c>
//		logic[item][MASK_ENTER]	[HOLD] 	= confirm_parameter_value;
	}

	logic[YEAR][MASK_LEFT]	[CLICK][SELECTED_SECOND_NUM] = year_decrease; // Goes to a previous item when "is_selected == 0" and decreases parameter
 8002366:	4b10      	ldr	r3, [pc, #64]	@ (80023a8 <init_menu_functions+0x88>)
 8002368:	4a14      	ldr	r2, [pc, #80]	@ (80023bc <init_menu_functions+0x9c>)
 800236a:	21e0      	movs	r1, #224	@ 0xe0
 800236c:	505a      	str	r2, [r3, r1]
	logic[YEAR][MASK_RIGHT][CLICK][SELECTED_SECOND_NUM] = year_increase;
 800236e:	4a14      	ldr	r2, [pc, #80]	@ (80023c0 <init_menu_functions+0xa0>)
 8002370:	3148      	adds	r1, #72	@ 0x48
 8002372:	505a      	str	r2, [r3, r1]

	logic[DAY_MONTH][MASK_LEFT]	[CLICK][SELECTED_FIRST_NUM] = days_decrease; // Goes to a previous item when "is_selected == 0" and decreases parameter
 8002374:	4a13      	ldr	r2, [pc, #76]	@ (80023c4 <init_menu_functions+0xa4>)
 8002376:	3174      	adds	r1, #116	@ 0x74
 8002378:	505a      	str	r2, [r3, r1]
	logic[DAY_MONTH][MASK_RIGHT][CLICK][SELECTED_FIRST_NUM] = days_increase;
 800237a:	4a13      	ldr	r2, [pc, #76]	@ (80023c8 <init_menu_functions+0xa8>)
 800237c:	3148      	adds	r1, #72	@ 0x48
 800237e:	505a      	str	r2, [r3, r1]
	logic[DAY_MONTH][MASK_LEFT]	[CLICK][SELECTED_SECOND_NUM] = month_decrease; // Goes to a previous item when "is_selected == 0" and decreases parameter
 8002380:	4a12      	ldr	r2, [pc, #72]	@ (80023cc <init_menu_functions+0xac>)
 8002382:	3944      	subs	r1, #68	@ 0x44
 8002384:	505a      	str	r2, [r3, r1]
	logic[DAY_MONTH][MASK_RIGHT][CLICK][SELECTED_SECOND_NUM] = month_increase;
 8002386:	4a12      	ldr	r2, [pc, #72]	@ (80023d0 <init_menu_functions+0xb0>)
 8002388:	3148      	adds	r1, #72	@ 0x48
 800238a:	505a      	str	r2, [r3, r1]

	logic[HOURS_MINUTES][MASK_LEFT]	[CLICK][SELECTED_FIRST_NUM] = hours_decrease; // Goes to a previous item when "is_selected == 0" and decreases parameter
 800238c:	4a11      	ldr	r2, [pc, #68]	@ (80023d4 <init_menu_functions+0xb4>)
 800238e:	3174      	adds	r1, #116	@ 0x74
 8002390:	505a      	str	r2, [r3, r1]
	logic[HOURS_MINUTES][MASK_RIGHT][CLICK][SELECTED_FIRST_NUM] = hours_increase;
 8002392:	4a11      	ldr	r2, [pc, #68]	@ (80023d8 <init_menu_functions+0xb8>)
 8002394:	3148      	adds	r1, #72	@ 0x48
 8002396:	505a      	str	r2, [r3, r1]
	logic[HOURS_MINUTES][MASK_LEFT]	[CLICK][SELECTED_SECOND_NUM] = minutes_decrease; // Goes to a previous item when "is_selected == 0" and decreases parameter
 8002398:	4a10      	ldr	r2, [pc, #64]	@ (80023dc <init_menu_functions+0xbc>)
 800239a:	3944      	subs	r1, #68	@ 0x44
 800239c:	505a      	str	r2, [r3, r1]
	logic[HOURS_MINUTES][MASK_RIGHT][CLICK][SELECTED_SECOND_NUM] = minutes_increase;
 800239e:	4a10      	ldr	r2, [pc, #64]	@ (80023e0 <init_menu_functions+0xc0>)
 80023a0:	3148      	adds	r1, #72	@ 0x48
 80023a2:	505a      	str	r2, [r3, r1]
}
 80023a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023a6:	46c0      	nop			@ (mov r8, r8)
 80023a8:	20000e14 	.word	0x20000e14
 80023ac:	080022e9 	.word	0x080022e9
 80023b0:	08002049 	.word	0x08002049
 80023b4:	08002009 	.word	0x08002009
 80023b8:	08002029 	.word	0x08002029
 80023bc:	080020b9 	.word	0x080020b9
 80023c0:	080020e9 	.word	0x080020e9
 80023c4:	080021b1 	.word	0x080021b1
 80023c8:	080021e9 	.word	0x080021e9
 80023cc:	08002119 	.word	0x08002119
 80023d0:	08002145 	.word	0x08002145
 80023d4:	08002221 	.word	0x08002221
 80023d8:	08002251 	.word	0x08002251
 80023dc:	08002281 	.word	0x08002281
 80023e0:	080022b5 	.word	0x080022b5

080023e4 <init_menu_items>:
void init_menu_items(Menu_HandleTypeDef* user_menu, Item_TypeDef* user_items, uint16_t number_of_menus, uint16_t number_of_items) {
 80023e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023e6:	b083      	sub	sp, #12
 80023e8:	000c      	movs	r4, r1
	menu 				= user_menu;
 80023ea:	4b39      	ldr	r3, [pc, #228]	@ (80024d0 <init_menu_items+0xec>)
 80023ec:	6018      	str	r0, [r3, #0]
	items 				= user_items;
 80023ee:	4b39      	ldr	r3, [pc, #228]	@ (80024d4 <init_menu_items+0xf0>)
 80023f0:	6019      	str	r1, [r3, #0]
	ItemType selected 	= 1;
 80023f2:	2001      	movs	r0, #1
	for(MenuType target_menu = 0; target_menu < NUM_OF_MENUS; ++target_menu) {
 80023f4:	2500      	movs	r5, #0
				items[selected].next = i;
 80023f6:	27d8      	movs	r7, #216	@ 0xd8
 80023f8:	e018      	b.n	800242c <init_menu_items+0x48>
 80023fa:	001e      	movs	r6, r3
 80023fc:	0018      	movs	r0, r3
		for(ItemType i = 0; i < NUM_OF_ITEMS; ++i) {
 80023fe:	3301      	adds	r3, #1
 8002400:	b2db      	uxtb	r3, r3
 8002402:	32d8      	adds	r2, #216	@ 0xd8
 8002404:	2b09      	cmp	r3, #9
 8002406:	d009      	beq.n	800241c <init_menu_items+0x38>
			if(items[i].menu == target_menu) {
 8002408:	7811      	ldrb	r1, [r2, #0]
 800240a:	42a9      	cmp	r1, r5
 800240c:	d1f7      	bne.n	80023fe <init_menu_items+0x1a>
				if(first_item == 0) {
 800240e:	2e00      	cmp	r6, #0
 8002410:	d0f3      	beq.n	80023fa <init_menu_items+0x16>
				items[selected].next = i;
 8002412:	4378      	muls	r0, r7
 8002414:	1820      	adds	r0, r4, r0
 8002416:	7243      	strb	r3, [r0, #9]
 8002418:	0018      	movs	r0, r3
 800241a:	e7f0      	b.n	80023fe <init_menu_items+0x1a>
		items[selected].next = first_item;
 800241c:	4378      	muls	r0, r7
 800241e:	1820      	adds	r0, r4, r0
 8002420:	7246      	strb	r6, [r0, #9]
	for(MenuType target_menu = 0; target_menu < NUM_OF_MENUS; ++target_menu) {
 8002422:	3501      	adds	r5, #1
 8002424:	b2ed      	uxtb	r5, r5
		selected = first_item = 0;
 8002426:	2000      	movs	r0, #0
	for(MenuType target_menu = 0; target_menu < NUM_OF_MENUS; ++target_menu) {
 8002428:	2d03      	cmp	r5, #3
 800242a:	d003      	beq.n	8002434 <init_menu_items+0x50>
		for(ItemType i = 0; i < NUM_OF_ITEMS; ++i) {
 800242c:	0022      	movs	r2, r4
void init_menu_items(Menu_HandleTypeDef* user_menu, Item_TypeDef* user_items, uint16_t number_of_menus, uint16_t number_of_items) {
 800242e:	2600      	movs	r6, #0
		for(ItemType i = 0; i < NUM_OF_ITEMS; ++i) {
 8002430:	2300      	movs	r3, #0
 8002432:	e7e9      	b.n	8002408 <init_menu_items+0x24>
 8002434:	0025      	movs	r5, r4
 8002436:	35e0      	adds	r5, #224	@ 0xe0
	for(int current = 1; current < NUM_OF_ITEMS; ++current) {
 8002438:	2101      	movs	r1, #1
 800243a:	e00c      	b.n	8002456 <init_menu_items+0x72>
		for(int prev = 1; prev < NUM_OF_ITEMS; ++prev) {
 800243c:	3301      	adds	r3, #1
 800243e:	32d8      	adds	r2, #216	@ 0xd8
 8002440:	2b09      	cmp	r3, #9
 8002442:	d004      	beq.n	800244e <init_menu_items+0x6a>
			if(items[prev].next == current)
 8002444:	7810      	ldrb	r0, [r2, #0]
 8002446:	4288      	cmp	r0, r1
 8002448:	d1f8      	bne.n	800243c <init_menu_items+0x58>
				items[current].prev = prev;
 800244a:	702b      	strb	r3, [r5, #0]
 800244c:	e7f6      	b.n	800243c <init_menu_items+0x58>
	for(int current = 1; current < NUM_OF_ITEMS; ++current) {
 800244e:	3101      	adds	r1, #1
 8002450:	35d8      	adds	r5, #216	@ 0xd8
 8002452:	2909      	cmp	r1, #9
 8002454:	d003      	beq.n	800245e <init_menu_items+0x7a>
		for(int prev = 1; prev < NUM_OF_ITEMS; ++prev) {
 8002456:	0022      	movs	r2, r4
 8002458:	32e1      	adds	r2, #225	@ 0xe1
 800245a:	2301      	movs	r3, #1
 800245c:	e7f2      	b.n	8002444 <init_menu_items+0x60>
	init_menu_functions();
 800245e:	f7ff ff5f 	bl	8002320 <init_menu_functions>
	volatile HAL_StatusTypeDef status = 0;
 8002462:	466b      	mov	r3, sp
 8002464:	1dde      	adds	r6, r3, #7
 8002466:	2300      	movs	r3, #0
 8002468:	7033      	strb	r3, [r6, #0]
	status = HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t *)&duty_cycles[0], 1);
 800246a:	4c1b      	ldr	r4, [pc, #108]	@ (80024d8 <init_menu_items+0xf4>)
 800246c:	4d1b      	ldr	r5, [pc, #108]	@ (80024dc <init_menu_items+0xf8>)
 800246e:	3301      	adds	r3, #1
 8002470:	0022      	movs	r2, r4
 8002472:	2100      	movs	r1, #0
 8002474:	0028      	movs	r0, r5
 8002476:	f002 fb43 	bl	8004b00 <HAL_TIM_PWM_Start_DMA>
 800247a:	7030      	strb	r0, [r6, #0]
	status = HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_2, (uint32_t *)&duty_cycles[1], 1);
 800247c:	1c62      	adds	r2, r4, #1
 800247e:	2301      	movs	r3, #1
 8002480:	2104      	movs	r1, #4
 8002482:	0028      	movs	r0, r5
 8002484:	f002 fb3c 	bl	8004b00 <HAL_TIM_PWM_Start_DMA>
 8002488:	7030      	strb	r0, [r6, #0]
	status = HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_3, (uint32_t *)&duty_cycles[2], 1);
 800248a:	1ca2      	adds	r2, r4, #2
 800248c:	2301      	movs	r3, #1
 800248e:	2108      	movs	r1, #8
 8002490:	0028      	movs	r0, r5
 8002492:	f002 fb35 	bl	8004b00 <HAL_TIM_PWM_Start_DMA>
 8002496:	7030      	strb	r0, [r6, #0]
	status = HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_4, (uint32_t *)&duty_cycles[3], 1);
 8002498:	1ce2      	adds	r2, r4, #3
 800249a:	2301      	movs	r3, #1
 800249c:	210c      	movs	r1, #12
 800249e:	0028      	movs	r0, r5
 80024a0:	f002 fb2e 	bl	8004b00 <HAL_TIM_PWM_Start_DMA>
 80024a4:	7030      	strb	r0, [r6, #0]
	status = HAL_TIM_Base_Start_IT(&htim2);
 80024a6:	0028      	movs	r0, r5
 80024a8:	f002 fa5e 	bl	8004968 <HAL_TIM_Base_Start_IT>
 80024ac:	7030      	strb	r0, [r6, #0]
	menu->current_item = HOURS_MINUTES;
 80024ae:	4b08      	ldr	r3, [pc, #32]	@ (80024d0 <init_menu_items+0xec>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	2203      	movs	r2, #3
 80024b4:	711a      	strb	r2, [r3, #4]
	 tubes_data_source_set(&(items[menu->current_item].numbers[0]), &(items[menu->current_item].numbers[1]));
 80024b6:	4b07      	ldr	r3, [pc, #28]	@ (80024d4 <init_menu_items+0xf0>)
 80024b8:	6818      	ldr	r0, [r3, #0]
 80024ba:	23a5      	movs	r3, #165	@ 0xa5
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	18c1      	adds	r1, r0, r3
 80024c0:	4b07      	ldr	r3, [pc, #28]	@ (80024e0 <init_menu_items+0xfc>)
 80024c2:	469c      	mov	ip, r3
 80024c4:	4460      	add	r0, ip
 80024c6:	f7ff f939 	bl	800173c <tubes_data_source_set>
}
 80024ca:	b003      	add	sp, #12
 80024cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024ce:	46c0      	nop			@ (mov r8, r8)
 80024d0:	200014dc 	.word	0x200014dc
 80024d4:	200014d8 	.word	0x200014d8
 80024d8:	20000850 	.word	0x20000850
 80024dc:	20000c48 	.word	0x20000c48
 80024e0:	00000292 	.word	0x00000292

080024e4 <opt3001_writedata>:

static uint8_t device_addr= OPT3001_ADDR1;
static uint16_t config_data= 0xCE10;        //The sensor works in continuous operation mode by default.


void opt3001_writedata(uint8_t device_addr, uint8_t register_addr, uint16_t data){
 80024e4:	b500      	push	{lr}
 80024e6:	b085      	sub	sp, #20
 80024e8:	0013      	movs	r3, r2

	 uint8_t buffer[3];
	 buffer[0] = register_addr;
 80024ea:	aa03      	add	r2, sp, #12
 80024ec:	7011      	strb	r1, [r2, #0]
	 buffer[1] = (data)>>8;
 80024ee:	0a19      	lsrs	r1, r3, #8
 80024f0:	7051      	strb	r1, [r2, #1]
	 buffer[2] = (data)& 0x00FF;
 80024f2:	7093      	strb	r3, [r2, #2]
	 HAL_I2C_Master_Transmit(&hi2c1, device_addr<<1, buffer, 3, 50);
 80024f4:	0041      	lsls	r1, r0, #1
 80024f6:	4804      	ldr	r0, [pc, #16]	@ (8002508 <opt3001_writedata+0x24>)
 80024f8:	2332      	movs	r3, #50	@ 0x32
 80024fa:	9300      	str	r3, [sp, #0]
 80024fc:	3b2f      	subs	r3, #47	@ 0x2f
 80024fe:	f001 f93b 	bl	8003778 <HAL_I2C_Master_Transmit>
 }
 8002502:	b005      	add	sp, #20
 8002504:	bd00      	pop	{pc}
 8002506:	46c0      	nop			@ (mov r8, r8)
 8002508:	20000dbc 	.word	0x20000dbc

0800250c <opt3001_init>:
	received_data = ((readbuffer[0] << 8) | readbuffer[1]);
	
	return received_data;
}

uint8_t opt3001_init(){
 800250c:	b510      	push	{r4, lr}

	if (HAL_I2C_IsDeviceReady(&hi2c1, device_addr<<1, 1, 20000) != HAL_OK){
 800250e:	4809      	ldr	r0, [pc, #36]	@ (8002534 <opt3001_init+0x28>)
 8002510:	4b09      	ldr	r3, [pc, #36]	@ (8002538 <opt3001_init+0x2c>)
 8002512:	2201      	movs	r2, #1
 8002514:	2188      	movs	r1, #136	@ 0x88
 8002516:	f001 faab 	bl	8003a70 <HAL_I2C_IsDeviceReady>
		/* Return false */
		return 0;
 800251a:	2300      	movs	r3, #0
	if (HAL_I2C_IsDeviceReady(&hi2c1, device_addr<<1, 1, 20000) != HAL_OK){
 800251c:	2800      	cmp	r0, #0
 800251e:	d001      	beq.n	8002524 <opt3001_init+0x18>
	}

	opt3001_writedata(device_addr, OPT3001_ConfigReg, config_data);
	return 1;
}
 8002520:	0018      	movs	r0, r3
 8002522:	bd10      	pop	{r4, pc}
	opt3001_writedata(device_addr, OPT3001_ConfigReg, config_data);
 8002524:	4a05      	ldr	r2, [pc, #20]	@ (800253c <opt3001_init+0x30>)
 8002526:	2101      	movs	r1, #1
 8002528:	3044      	adds	r0, #68	@ 0x44
 800252a:	f7ff ffdb 	bl	80024e4 <opt3001_writedata>
	return 1;
 800252e:	2301      	movs	r3, #1
 8002530:	e7f6      	b.n	8002520 <opt3001_init+0x14>
 8002532:	46c0      	nop			@ (mov r8, r8)
 8002534:	20000dbc 	.word	0x20000dbc
 8002538:	00004e20 	.word	0x00004e20
 800253c:	0000ce10 	.word	0x0000ce10

08002540 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002540:	4b05      	ldr	r3, [pc, #20]	@ (8002558 <HAL_MspInit+0x18>)
 8002542:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002544:	2101      	movs	r1, #1
 8002546:	430a      	orrs	r2, r1
 8002548:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800254a:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800254c:	2280      	movs	r2, #128	@ 0x80
 800254e:	0552      	lsls	r2, r2, #21
 8002550:	430a      	orrs	r2, r1
 8002552:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002554:	4770      	bx	lr
 8002556:	46c0      	nop			@ (mov r8, r8)
 8002558:	40021000 	.word	0x40021000

0800255c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800255c:	b510      	push	{r4, lr}
 800255e:	b086      	sub	sp, #24
 8002560:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002562:	2214      	movs	r2, #20
 8002564:	2100      	movs	r1, #0
 8002566:	a801      	add	r0, sp, #4
 8002568:	f003 fa88 	bl	8005a7c <memset>
  if(hi2c->Instance==I2C1)
 800256c:	4b10      	ldr	r3, [pc, #64]	@ (80025b0 <HAL_I2C_MspInit+0x54>)
 800256e:	6822      	ldr	r2, [r4, #0]
 8002570:	429a      	cmp	r2, r3
 8002572:	d001      	beq.n	8002578 <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002574:	b006      	add	sp, #24
 8002576:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002578:	4c0e      	ldr	r4, [pc, #56]	@ (80025b4 <HAL_I2C_MspInit+0x58>)
 800257a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800257c:	2301      	movs	r3, #1
 800257e:	431a      	orrs	r2, r3
 8002580:	62e2      	str	r2, [r4, #44]	@ 0x2c
 8002582:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8002584:	401a      	ands	r2, r3
 8002586:	9200      	str	r2, [sp, #0]
 8002588:	9a00      	ldr	r2, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800258a:	22c0      	movs	r2, #192	@ 0xc0
 800258c:	00d2      	lsls	r2, r2, #3
 800258e:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002590:	2212      	movs	r2, #18
 8002592:	9202      	str	r2, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002594:	3a0f      	subs	r2, #15
 8002596:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8002598:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800259a:	20a0      	movs	r0, #160	@ 0xa0
 800259c:	a901      	add	r1, sp, #4
 800259e:	05c0      	lsls	r0, r0, #23
 80025a0:	f000 fdcc 	bl	800313c <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80025a4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80025a6:	2380      	movs	r3, #128	@ 0x80
 80025a8:	039b      	lsls	r3, r3, #14
 80025aa:	4313      	orrs	r3, r2
 80025ac:	63a3      	str	r3, [r4, #56]	@ 0x38
}
 80025ae:	e7e1      	b.n	8002574 <HAL_I2C_MspInit+0x18>
 80025b0:	40005400 	.word	0x40005400
 80025b4:	40021000 	.word	0x40021000

080025b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025b8:	b510      	push	{r4, lr}
 80025ba:	b088      	sub	sp, #32
 80025bc:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025be:	2214      	movs	r2, #20
 80025c0:	2100      	movs	r1, #0
 80025c2:	a803      	add	r0, sp, #12
 80025c4:	f003 fa5a 	bl	8005a7c <memset>
  if(huart->Instance==LPUART1)
 80025c8:	6823      	ldr	r3, [r4, #0]
 80025ca:	4a1e      	ldr	r2, [pc, #120]	@ (8002644 <HAL_UART_MspInit+0x8c>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d004      	beq.n	80025da <HAL_UART_MspInit+0x22>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 80025d0:	4a1d      	ldr	r2, [pc, #116]	@ (8002648 <HAL_UART_MspInit+0x90>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d01d      	beq.n	8002612 <HAL_UART_MspInit+0x5a>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80025d6:	b008      	add	sp, #32
 80025d8:	bd10      	pop	{r4, pc}
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80025da:	4b1c      	ldr	r3, [pc, #112]	@ (800264c <HAL_UART_MspInit+0x94>)
 80025dc:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80025de:	2280      	movs	r2, #128	@ 0x80
 80025e0:	02d2      	lsls	r2, r2, #11
 80025e2:	430a      	orrs	r2, r1
 80025e4:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025e6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80025e8:	2201      	movs	r2, #1
 80025ea:	4311      	orrs	r1, r2
 80025ec:	62d9      	str	r1, [r3, #44]	@ 0x2c
 80025ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025f0:	401a      	ands	r2, r3
 80025f2:	9201      	str	r2, [sp, #4]
 80025f4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80025f6:	230c      	movs	r3, #12
 80025f8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025fa:	3b0a      	subs	r3, #10
 80025fc:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025fe:	3301      	adds	r3, #1
 8002600:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8002602:	3303      	adds	r3, #3
 8002604:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002606:	20a0      	movs	r0, #160	@ 0xa0
 8002608:	a903      	add	r1, sp, #12
 800260a:	05c0      	lsls	r0, r0, #23
 800260c:	f000 fd96 	bl	800313c <HAL_GPIO_Init>
 8002610:	e7e1      	b.n	80025d6 <HAL_UART_MspInit+0x1e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002612:	4b0e      	ldr	r3, [pc, #56]	@ (800264c <HAL_UART_MspInit+0x94>)
 8002614:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8002616:	2280      	movs	r2, #128	@ 0x80
 8002618:	0292      	lsls	r2, r2, #10
 800261a:	430a      	orrs	r2, r1
 800261c:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800261e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002620:	2202      	movs	r2, #2
 8002622:	4311      	orrs	r1, r2
 8002624:	62d9      	str	r1, [r3, #44]	@ 0x2c
 8002626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002628:	4013      	ands	r3, r2
 800262a:	9302      	str	r3, [sp, #8]
 800262c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800262e:	23c0      	movs	r3, #192	@ 0xc0
 8002630:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002632:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002634:	3bbd      	subs	r3, #189	@ 0xbd
 8002636:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002638:	a903      	add	r1, sp, #12
 800263a:	4805      	ldr	r0, [pc, #20]	@ (8002650 <HAL_UART_MspInit+0x98>)
 800263c:	f000 fd7e 	bl	800313c <HAL_GPIO_Init>
}
 8002640:	e7c9      	b.n	80025d6 <HAL_UART_MspInit+0x1e>
 8002642:	46c0      	nop			@ (mov r8, r8)
 8002644:	40004800 	.word	0x40004800
 8002648:	40004400 	.word	0x40004400
 800264c:	40021000 	.word	0x40021000
 8002650:	50000400 	.word	0x50000400

08002654 <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 8002654:	4b05      	ldr	r3, [pc, #20]	@ (800266c <HAL_RTC_MspInit+0x18>)
 8002656:	6802      	ldr	r2, [r0, #0]
 8002658:	429a      	cmp	r2, r3
 800265a:	d000      	beq.n	800265e <HAL_RTC_MspInit+0xa>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800265c:	4770      	bx	lr
    __HAL_RCC_RTC_ENABLE();
 800265e:	4a04      	ldr	r2, [pc, #16]	@ (8002670 <HAL_RTC_MspInit+0x1c>)
 8002660:	6d11      	ldr	r1, [r2, #80]	@ 0x50
 8002662:	2380      	movs	r3, #128	@ 0x80
 8002664:	02db      	lsls	r3, r3, #11
 8002666:	430b      	orrs	r3, r1
 8002668:	6513      	str	r3, [r2, #80]	@ 0x50
}
 800266a:	e7f7      	b.n	800265c <HAL_RTC_MspInit+0x8>
 800266c:	40002800 	.word	0x40002800
 8002670:	40021000 	.word	0x40021000

08002674 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002674:	b510      	push	{r4, lr}
 8002676:	0004      	movs	r4, r0
  if(htim_base->Instance==TIM2)
 8002678:	6803      	ldr	r3, [r0, #0]
 800267a:	2280      	movs	r2, #128	@ 0x80
 800267c:	05d2      	lsls	r2, r2, #23
 800267e:	4293      	cmp	r3, r2
 8002680:	d004      	beq.n	800268c <HAL_TIM_Base_MspInit+0x18>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM21)
 8002682:	4a46      	ldr	r2, [pc, #280]	@ (800279c <HAL_TIM_Base_MspInit+0x128>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d100      	bne.n	800268a <HAL_TIM_Base_MspInit+0x16>
 8002688:	e07a      	b.n	8002780 <HAL_TIM_Base_MspInit+0x10c>
  /* USER CODE BEGIN TIM21_MspInit 1 */

  /* USER CODE END TIM21_MspInit 1 */
  }

}
 800268a:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 800268c:	4a44      	ldr	r2, [pc, #272]	@ (80027a0 <HAL_TIM_Base_MspInit+0x12c>)
 800268e:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8002690:	2101      	movs	r1, #1
 8002692:	430b      	orrs	r3, r1
 8002694:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 8002696:	4843      	ldr	r0, [pc, #268]	@ (80027a4 <HAL_TIM_Base_MspInit+0x130>)
 8002698:	4b43      	ldr	r3, [pc, #268]	@ (80027a8 <HAL_TIM_Base_MspInit+0x134>)
 800269a:	6003      	str	r3, [r0, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_8;
 800269c:	2308      	movs	r3, #8
 800269e:	6043      	str	r3, [r0, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80026a0:	3308      	adds	r3, #8
 80026a2:	6083      	str	r3, [r0, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80026a4:	2300      	movs	r3, #0
 80026a6:	60c3      	str	r3, [r0, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_DISABLE;
 80026a8:	6103      	str	r3, [r0, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80026aa:	2280      	movs	r2, #128	@ 0x80
 80026ac:	0052      	lsls	r2, r2, #1
 80026ae:	6142      	str	r2, [r0, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026b0:	6183      	str	r3, [r0, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 80026b2:	3ae0      	subs	r2, #224	@ 0xe0
 80026b4:	61c2      	str	r2, [r0, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80026b6:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 80026b8:	f000 fb4a 	bl	8002d50 <HAL_DMA_Init>
 80026bc:	2800      	cmp	r0, #0
 80026be:	d153      	bne.n	8002768 <HAL_TIM_Base_MspInit+0xf4>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 80026c0:	4b38      	ldr	r3, [pc, #224]	@ (80027a4 <HAL_TIM_Base_MspInit+0x130>)
 80026c2:	6223      	str	r3, [r4, #32]
 80026c4:	629c      	str	r4, [r3, #40]	@ 0x28
    hdma_tim2_ch2.Instance = DMA1_Channel3;
 80026c6:	4839      	ldr	r0, [pc, #228]	@ (80027ac <HAL_TIM_Base_MspInit+0x138>)
 80026c8:	4b39      	ldr	r3, [pc, #228]	@ (80027b0 <HAL_TIM_Base_MspInit+0x13c>)
 80026ca:	6003      	str	r3, [r0, #0]
    hdma_tim2_ch2.Init.Request = DMA_REQUEST_8;
 80026cc:	2308      	movs	r3, #8
 80026ce:	6043      	str	r3, [r0, #4]
    hdma_tim2_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80026d0:	3308      	adds	r3, #8
 80026d2:	6083      	str	r3, [r0, #8]
    hdma_tim2_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80026d4:	2300      	movs	r3, #0
 80026d6:	60c3      	str	r3, [r0, #12]
    hdma_tim2_ch2.Init.MemInc = DMA_MINC_DISABLE;
 80026d8:	6103      	str	r3, [r0, #16]
    hdma_tim2_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80026da:	2280      	movs	r2, #128	@ 0x80
 80026dc:	0052      	lsls	r2, r2, #1
 80026de:	6142      	str	r2, [r0, #20]
    hdma_tim2_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026e0:	6183      	str	r3, [r0, #24]
    hdma_tim2_ch2.Init.Mode = DMA_CIRCULAR;
 80026e2:	3ae0      	subs	r2, #224	@ 0xe0
 80026e4:	61c2      	str	r2, [r0, #28]
    hdma_tim2_ch2.Init.Priority = DMA_PRIORITY_LOW;
 80026e6:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch2) != HAL_OK)
 80026e8:	f000 fb32 	bl	8002d50 <HAL_DMA_Init>
 80026ec:	2800      	cmp	r0, #0
 80026ee:	d13e      	bne.n	800276e <HAL_TIM_Base_MspInit+0xfa>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2);
 80026f0:	4b2e      	ldr	r3, [pc, #184]	@ (80027ac <HAL_TIM_Base_MspInit+0x138>)
 80026f2:	6263      	str	r3, [r4, #36]	@ 0x24
 80026f4:	629c      	str	r4, [r3, #40]	@ 0x28
    hdma_tim2_ch3.Instance = DMA1_Channel1;
 80026f6:	482f      	ldr	r0, [pc, #188]	@ (80027b4 <HAL_TIM_Base_MspInit+0x140>)
 80026f8:	4b2f      	ldr	r3, [pc, #188]	@ (80027b8 <HAL_TIM_Base_MspInit+0x144>)
 80026fa:	6003      	str	r3, [r0, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_8;
 80026fc:	2308      	movs	r3, #8
 80026fe:	6043      	str	r3, [r0, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002700:	3308      	adds	r3, #8
 8002702:	6083      	str	r3, [r0, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002704:	2300      	movs	r3, #0
 8002706:	60c3      	str	r3, [r0, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_DISABLE;
 8002708:	6103      	str	r3, [r0, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800270a:	2280      	movs	r2, #128	@ 0x80
 800270c:	0052      	lsls	r2, r2, #1
 800270e:	6142      	str	r2, [r0, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002710:	6183      	str	r3, [r0, #24]
    hdma_tim2_ch3.Init.Mode = DMA_CIRCULAR;
 8002712:	3ae0      	subs	r2, #224	@ 0xe0
 8002714:	61c2      	str	r2, [r0, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8002716:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 8002718:	f000 fb1a 	bl	8002d50 <HAL_DMA_Init>
 800271c:	2800      	cmp	r0, #0
 800271e:	d129      	bne.n	8002774 <HAL_TIM_Base_MspInit+0x100>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 8002720:	4b24      	ldr	r3, [pc, #144]	@ (80027b4 <HAL_TIM_Base_MspInit+0x140>)
 8002722:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002724:	629c      	str	r4, [r3, #40]	@ 0x28
    hdma_tim2_ch4.Instance = DMA1_Channel4;
 8002726:	4825      	ldr	r0, [pc, #148]	@ (80027bc <HAL_TIM_Base_MspInit+0x148>)
 8002728:	4b25      	ldr	r3, [pc, #148]	@ (80027c0 <HAL_TIM_Base_MspInit+0x14c>)
 800272a:	6003      	str	r3, [r0, #0]
    hdma_tim2_ch4.Init.Request = DMA_REQUEST_8;
 800272c:	2308      	movs	r3, #8
 800272e:	6043      	str	r3, [r0, #4]
    hdma_tim2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002730:	3308      	adds	r3, #8
 8002732:	6083      	str	r3, [r0, #8]
    hdma_tim2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8002734:	2300      	movs	r3, #0
 8002736:	60c3      	str	r3, [r0, #12]
    hdma_tim2_ch4.Init.MemInc = DMA_MINC_DISABLE;
 8002738:	6103      	str	r3, [r0, #16]
    hdma_tim2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800273a:	2280      	movs	r2, #128	@ 0x80
 800273c:	0052      	lsls	r2, r2, #1
 800273e:	6142      	str	r2, [r0, #20]
    hdma_tim2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002740:	6183      	str	r3, [r0, #24]
    hdma_tim2_ch4.Init.Mode = DMA_CIRCULAR;
 8002742:	3ae0      	subs	r2, #224	@ 0xe0
 8002744:	61c2      	str	r2, [r0, #28]
    hdma_tim2_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8002746:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch4) != HAL_OK)
 8002748:	f000 fb02 	bl	8002d50 <HAL_DMA_Init>
 800274c:	2800      	cmp	r0, #0
 800274e:	d114      	bne.n	800277a <HAL_TIM_Base_MspInit+0x106>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch4);
 8002750:	4b1a      	ldr	r3, [pc, #104]	@ (80027bc <HAL_TIM_Base_MspInit+0x148>)
 8002752:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002754:	629c      	str	r4, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8002756:	2200      	movs	r2, #0
 8002758:	2101      	movs	r1, #1
 800275a:	200f      	movs	r0, #15
 800275c:	f000 fa9e 	bl	8002c9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002760:	200f      	movs	r0, #15
 8002762:	f000 facd 	bl	8002d00 <HAL_NVIC_EnableIRQ>
 8002766:	e790      	b.n	800268a <HAL_TIM_Base_MspInit+0x16>
      Error_Handler();
 8002768:	f7ff fc4c 	bl	8002004 <Error_Handler>
 800276c:	e7a8      	b.n	80026c0 <HAL_TIM_Base_MspInit+0x4c>
      Error_Handler();
 800276e:	f7ff fc49 	bl	8002004 <Error_Handler>
 8002772:	e7bd      	b.n	80026f0 <HAL_TIM_Base_MspInit+0x7c>
      Error_Handler();
 8002774:	f7ff fc46 	bl	8002004 <Error_Handler>
 8002778:	e7d2      	b.n	8002720 <HAL_TIM_Base_MspInit+0xac>
      Error_Handler();
 800277a:	f7ff fc43 	bl	8002004 <Error_Handler>
 800277e:	e7e7      	b.n	8002750 <HAL_TIM_Base_MspInit+0xdc>
    __HAL_RCC_TIM21_CLK_ENABLE();
 8002780:	4a07      	ldr	r2, [pc, #28]	@ (80027a0 <HAL_TIM_Base_MspInit+0x12c>)
 8002782:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8002784:	2104      	movs	r1, #4
 8002786:	430b      	orrs	r3, r1
 8002788:	6353      	str	r3, [r2, #52]	@ 0x34
    HAL_NVIC_SetPriority(TIM21_IRQn, 3, 0);
 800278a:	2200      	movs	r2, #0
 800278c:	3901      	subs	r1, #1
 800278e:	2014      	movs	r0, #20
 8002790:	f000 fa84 	bl	8002c9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
 8002794:	2014      	movs	r0, #20
 8002796:	f000 fab3 	bl	8002d00 <HAL_NVIC_EnableIRQ>
}
 800279a:	e776      	b.n	800268a <HAL_TIM_Base_MspInit+0x16>
 800279c:	40010800 	.word	0x40010800
 80027a0:	40021000 	.word	0x40021000
 80027a4:	20000bc0 	.word	0x20000bc0
 80027a8:	40020058 	.word	0x40020058
 80027ac:	20000b78 	.word	0x20000b78
 80027b0:	40020030 	.word	0x40020030
 80027b4:	20000b30 	.word	0x20000b30
 80027b8:	40020008 	.word	0x40020008
 80027bc:	20000ae8 	.word	0x20000ae8
 80027c0:	40020044 	.word	0x40020044

080027c4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027c4:	e7fe      	b.n	80027c4 <NMI_Handler>

080027c6 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027c6:	e7fe      	b.n	80027c6 <HardFault_Handler>

080027c8 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80027c8:	4770      	bx	lr

080027ca <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027ca:	4770      	bx	lr

080027cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027cc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027ce:	f000 fa53 	bl	8002c78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027d2:	bd10      	pop	{r4, pc}

080027d4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80027d4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 80027d6:	4802      	ldr	r0, [pc, #8]	@ (80027e0 <DMA1_Channel1_IRQHandler+0xc>)
 80027d8:	f000 fb4f 	bl	8002e7a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80027dc:	bd10      	pop	{r4, pc}
 80027de:	46c0      	nop			@ (mov r8, r8)
 80027e0:	20000b30 	.word	0x20000b30

080027e4 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80027e4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2);
 80027e6:	4802      	ldr	r0, [pc, #8]	@ (80027f0 <DMA1_Channel2_3_IRQHandler+0xc>)
 80027e8:	f000 fb47 	bl	8002e7a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80027ec:	bd10      	pop	{r4, pc}
 80027ee:	46c0      	nop			@ (mov r8, r8)
 80027f0:	20000b78 	.word	0x20000b78

080027f4 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 80027f4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch4);
 80027f6:	4803      	ldr	r0, [pc, #12]	@ (8002804 <DMA1_Channel4_5_6_7_IRQHandler+0x10>)
 80027f8:	f000 fb3f 	bl	8002e7a <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 80027fc:	4802      	ldr	r0, [pc, #8]	@ (8002808 <DMA1_Channel4_5_6_7_IRQHandler+0x14>)
 80027fe:	f000 fb3c 	bl	8002e7a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8002802:	bd10      	pop	{r4, pc}
 8002804:	20000ae8 	.word	0x20000ae8
 8002808:	20000bc0 	.word	0x20000bc0

0800280c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800280c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800280e:	4802      	ldr	r0, [pc, #8]	@ (8002818 <TIM2_IRQHandler+0xc>)
 8002810:	f002 fc41 	bl	8005096 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002814:	bd10      	pop	{r4, pc}
 8002816:	46c0      	nop			@ (mov r8, r8)
 8002818:	20000c48 	.word	0x20000c48

0800281c <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 800281c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM21_IRQn 0 */

  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
 800281e:	4802      	ldr	r0, [pc, #8]	@ (8002828 <TIM21_IRQHandler+0xc>)
 8002820:	f002 fc39 	bl	8005096 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 8002824:	bd10      	pop	{r4, pc}
 8002826:	46c0      	nop			@ (mov r8, r8)
 8002828:	20000c08 	.word	0x20000c08

0800282c <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800282c:	4770      	bx	lr
	...

08002830 <Write_Register>:
	Write_Register(0x01, 0x2000);


}

void Write_Register(uint8_t register_pointer, uint16_t register_value) {
 8002830:	b500      	push	{lr}
 8002832:	b085      	sub	sp, #20
	uint8_t data[3];
	data[0] = register_pointer;     // TMP75_ADDR
 8002834:	aa03      	add	r2, sp, #12
 8002836:	7010      	strb	r0, [r2, #0]
	data[1] = register_value >> 8;    // MSB byte of 16bit data
 8002838:	0a0b      	lsrs	r3, r1, #8
 800283a:	7053      	strb	r3, [r2, #1]
	data[2] = register_value;       // LSB byte of 16bit data
 800283c:	7091      	strb	r1, [r2, #2]

	HAL_I2C_Master_Transmit(i2c, TMP75_ADDR, data, 3, 100);
 800283e:	4b05      	ldr	r3, [pc, #20]	@ (8002854 <Write_Register+0x24>)
 8002840:	6818      	ldr	r0, [r3, #0]
 8002842:	2364      	movs	r3, #100	@ 0x64
 8002844:	9300      	str	r3, [sp, #0]
 8002846:	3b61      	subs	r3, #97	@ 0x61
 8002848:	2190      	movs	r1, #144	@ 0x90
 800284a:	f000 ff95 	bl	8003778 <HAL_I2C_Master_Transmit>

}
 800284e:	b005      	add	sp, #20
 8002850:	bd00      	pop	{pc}
 8002852:	46c0      	nop			@ (mov r8, r8)
 8002854:	200014e0 	.word	0x200014e0

08002858 <Tmp75_Init>:
void Tmp75_Init(I2C_HandleTypeDef* handle) {
 8002858:	b500      	push	{lr}
 800285a:	b083      	sub	sp, #12
	if(handle != NULL) i2c = handle;
 800285c:	2800      	cmp	r0, #0
 800285e:	d001      	beq.n	8002864 <Tmp75_Init+0xc>
 8002860:	4b09      	ldr	r3, [pc, #36]	@ (8002888 <Tmp75_Init+0x30>)
 8002862:	6018      	str	r0, [r3, #0]
	volatile HAL_StatusTypeDef stat = HAL_I2C_IsDeviceReady(i2c, TMP75_ADDR, 3, 100);
 8002864:	4b08      	ldr	r3, [pc, #32]	@ (8002888 <Tmp75_Init+0x30>)
 8002866:	6818      	ldr	r0, [r3, #0]
 8002868:	2364      	movs	r3, #100	@ 0x64
 800286a:	2203      	movs	r2, #3
 800286c:	2190      	movs	r1, #144	@ 0x90
 800286e:	f001 f8ff 	bl	8003a70 <HAL_I2C_IsDeviceReady>
 8002872:	466b      	mov	r3, sp
 8002874:	71d8      	strb	r0, [r3, #7]
	stat = 0;
 8002876:	2200      	movs	r2, #0
 8002878:	71da      	strb	r2, [r3, #7]
	Write_Register(0x01, 0x2000);
 800287a:	2180      	movs	r1, #128	@ 0x80
 800287c:	0189      	lsls	r1, r1, #6
 800287e:	2001      	movs	r0, #1
 8002880:	f7ff ffd6 	bl	8002830 <Write_Register>
}
 8002884:	b003      	add	sp, #12
 8002886:	bd00      	pop	{pc}
 8002888:	200014e0 	.word	0x200014e0

0800288c <Read_Register>:

void Read_Register(uint8_t register_pointer, uint8_t* receive_buffer) {
 800288c:	b570      	push	{r4, r5, r6, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	000c      	movs	r4, r1
 8002892:	220f      	movs	r2, #15
 8002894:	446a      	add	r2, sp
 8002896:	7010      	strb	r0, [r2, #0]
	// first set the register pointer to the register wanted to be read
	HAL_I2C_Master_Transmit(i2c, TMP75_ADDR, &register_pointer, 1, 100);
 8002898:	4e08      	ldr	r6, [pc, #32]	@ (80028bc <Read_Register+0x30>)
 800289a:	6830      	ldr	r0, [r6, #0]
 800289c:	2564      	movs	r5, #100	@ 0x64
 800289e:	9500      	str	r5, [sp, #0]
 80028a0:	2301      	movs	r3, #1
 80028a2:	2190      	movs	r1, #144	@ 0x90
 80028a4:	f000 ff68 	bl	8003778 <HAL_I2C_Master_Transmit>

	// receive the 2 x 8bit data into the receive buffer
	HAL_I2C_Master_Receive(i2c, TMP75_ADDR, receive_buffer, 2, 100);
 80028a8:	6830      	ldr	r0, [r6, #0]
 80028aa:	9500      	str	r5, [sp, #0]
 80028ac:	2302      	movs	r3, #2
 80028ae:	0022      	movs	r2, r4
 80028b0:	2190      	movs	r1, #144	@ 0x90
 80028b2:	f001 f81f 	bl	80038f4 <HAL_I2C_Master_Receive>
}
 80028b6:	b004      	add	sp, #16
 80028b8:	bd70      	pop	{r4, r5, r6, pc}
 80028ba:	46c0      	nop			@ (mov r8, r8)
 80028bc:	200014e0 	.word	0x200014e0

080028c0 <Read_TempCelsius>:
void One_ShotTemp(void) {
	//One-Shot register = 0x04 and write any value to start aconversion
	Write_Register(0x04, 0x0000);
}

void Read_TempCelsius(float *receive_buffer) {
 80028c0:	b510      	push	{r4, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	0004      	movs	r4, r0
	uint8_t buffer[2];
	uint16_t TempSum;
	Read_Register(0x00, buffer);
 80028c6:	a901      	add	r1, sp, #4
 80028c8:	2000      	movs	r0, #0
 80028ca:	f7ff ffdf 	bl	800288c <Read_Register>
	TempSum = (((buffer[0] << 8) | buffer[1]) >> 4);
 80028ce:	466b      	mov	r3, sp
 80028d0:	7918      	ldrb	r0, [r3, #4]
 80028d2:	0200      	lsls	r0, r0, #8
 80028d4:	795b      	ldrb	r3, [r3, #5]
 80028d6:	4318      	orrs	r0, r3
 80028d8:	1100      	asrs	r0, r0, #4
	*receive_buffer = (TempSum * FTMP75_TEMP_AD_STEP);
 80028da:	f7fe fd87 	bl	80013ec <__aeabi_i2d>
 80028de:	2200      	movs	r2, #0
 80028e0:	4b03      	ldr	r3, [pc, #12]	@ (80028f0 <Read_TempCelsius+0x30>)
 80028e2:	f7fe fabb 	bl	8000e5c <__aeabi_dmul>
 80028e6:	f7fe fdaf 	bl	8001448 <__aeabi_d2f>
 80028ea:	6020      	str	r0, [r4, #0]
}
 80028ec:	b002      	add	sp, #8
 80028ee:	bd10      	pop	{r4, pc}
 80028f0:	3fb00000 	.word	0x3fb00000

080028f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80028f4:	480d      	ldr	r0, [pc, #52]	@ (800292c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80028f6:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 80028f8:	f7ff ff98 	bl	800282c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80028fc:	480c      	ldr	r0, [pc, #48]	@ (8002930 <LoopForever+0x6>)
  ldr r1, =_edata
 80028fe:	490d      	ldr	r1, [pc, #52]	@ (8002934 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002900:	4a0d      	ldr	r2, [pc, #52]	@ (8002938 <LoopForever+0xe>)
  movs r3, #0
 8002902:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002904:	e002      	b.n	800290c <LoopCopyDataInit>

08002906 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002906:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002908:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800290a:	3304      	adds	r3, #4

0800290c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800290c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800290e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002910:	d3f9      	bcc.n	8002906 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002912:	4a0a      	ldr	r2, [pc, #40]	@ (800293c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002914:	4c0a      	ldr	r4, [pc, #40]	@ (8002940 <LoopForever+0x16>)
  movs r3, #0
 8002916:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002918:	e001      	b.n	800291e <LoopFillZerobss>

0800291a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800291a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800291c:	3204      	adds	r2, #4

0800291e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800291e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002920:	d3fb      	bcc.n	800291a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002922:	f003 f8b3 	bl	8005a8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002926:	f7ff f8c7 	bl	8001ab8 <main>

0800292a <LoopForever>:

LoopForever:
    b LoopForever
 800292a:	e7fe      	b.n	800292a <LoopForever>
   ldr   r0, =_estack
 800292c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002930:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002934:	20000860 	.word	0x20000860
  ldr r2, =_sidata
 8002938:	08005bc4 	.word	0x08005bc4
  ldr r2, =_sbss
 800293c:	20000860 	.word	0x20000860
  ldr r4, =_ebss
 8002940:	2000150c 	.word	0x2000150c

08002944 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002944:	e7fe      	b.n	8002944 <ADC1_COMP_IRQHandler>
	...

08002948 <DS3231_SetRegByte>:
/**
 * @brief Set the byte in the designated DS3231 register to value.
 * @param regAddr Register address to write.
 * @param val Value to set, 0 to 255.
 */
void DS3231_SetRegByte(uint8_t regAddr, uint8_t val) {
 8002948:	b500      	push	{lr}
 800294a:	b085      	sub	sp, #20
	uint8_t bytes[2] = { regAddr, val };
 800294c:	466b      	mov	r3, sp
 800294e:	7318      	strb	r0, [r3, #12]
 8002950:	7359      	strb	r1, [r3, #13]
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, bytes, 2, DS3231_TIMEOUT);
 8002952:	4b06      	ldr	r3, [pc, #24]	@ (800296c <DS3231_SetRegByte+0x24>)
 8002954:	6818      	ldr	r0, [r3, #0]
 8002956:	2301      	movs	r3, #1
 8002958:	425b      	negs	r3, r3
 800295a:	9300      	str	r3, [sp, #0]
 800295c:	3303      	adds	r3, #3
 800295e:	aa03      	add	r2, sp, #12
 8002960:	21d0      	movs	r1, #208	@ 0xd0
 8002962:	f000 ff09 	bl	8003778 <HAL_I2C_Master_Transmit>
}
 8002966:	b005      	add	sp, #20
 8002968:	bd00      	pop	{pc}
 800296a:	46c0      	nop			@ (mov r8, r8)
 800296c:	200014e4 	.word	0x200014e4

08002970 <DS3231_GetRegByte>:
/**
 * @brief Gets the byte in the designated DS3231 register.
 * @param regAddr Register address to read.
 * @return Value stored in the register, 0 to 255.
 */
uint8_t DS3231_GetRegByte(uint8_t regAddr) {
 8002970:	b570      	push	{r4, r5, r6, lr}
 8002972:	b086      	sub	sp, #24
 8002974:	220f      	movs	r2, #15
 8002976:	446a      	add	r2, sp
 8002978:	7010      	strb	r0, [r2, #0]
	uint8_t val;
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &regAddr, 1, DS3231_TIMEOUT);
 800297a:	4e0a      	ldr	r6, [pc, #40]	@ (80029a4 <DS3231_GetRegByte+0x34>)
 800297c:	6830      	ldr	r0, [r6, #0]
 800297e:	2501      	movs	r5, #1
 8002980:	426d      	negs	r5, r5
 8002982:	9500      	str	r5, [sp, #0]
 8002984:	2301      	movs	r3, #1
 8002986:	21d0      	movs	r1, #208	@ 0xd0
 8002988:	f000 fef6 	bl	8003778 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &val, 1, DS3231_TIMEOUT);
 800298c:	2417      	movs	r4, #23
 800298e:	446c      	add	r4, sp
 8002990:	6830      	ldr	r0, [r6, #0]
 8002992:	9500      	str	r5, [sp, #0]
 8002994:	2301      	movs	r3, #1
 8002996:	0022      	movs	r2, r4
 8002998:	21d0      	movs	r1, #208	@ 0xd0
 800299a:	f000 ffab 	bl	80038f4 <HAL_I2C_Master_Receive>
	return val;
 800299e:	7820      	ldrb	r0, [r4, #0]
}
 80029a0:	b006      	add	sp, #24
 80029a2:	bd70      	pop	{r4, r5, r6, pc}
 80029a4:	200014e4 	.word	0x200014e4

080029a8 <DS3231_SetInterruptMode>:

/**
 * @brief Set the interrupt mode to either alarm interrupt or square wave interrupt.
 * @param mode Interrupt mode to set, DS3231_ALARM_INTERRUPT or DS3231_SQUARE_WAVE_INTERRUPT.
 */
void DS3231_SetInterruptMode(DS3231_InterruptMode mode){
 80029a8:	b510      	push	{r4, lr}
 80029aa:	0004      	movs	r4, r0
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 80029ac:	200e      	movs	r0, #14
 80029ae:	f7ff ffdf 	bl	8002970 <DS3231_GetRegByte>
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfb) | ((mode & 0x01) << DS3231_INTCN));
 80029b2:	00a4      	lsls	r4, r4, #2
 80029b4:	2104      	movs	r1, #4
 80029b6:	4021      	ands	r1, r4
 80029b8:	2304      	movs	r3, #4
 80029ba:	4398      	bics	r0, r3
 80029bc:	4301      	orrs	r1, r0
 80029be:	b2c9      	uxtb	r1, r1
 80029c0:	200e      	movs	r0, #14
 80029c2:	f7ff ffc1 	bl	8002948 <DS3231_SetRegByte>
}
 80029c6:	bd10      	pop	{r4, pc}

080029c8 <DS3231_EnableOscillator>:

/**
 * @brief Enables clock oscillator.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableOscillator(DS3231_State enable){
 80029c8:	b510      	push	{r4, lr}
 80029ca:	0004      	movs	r4, r0
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 80029cc:	200e      	movs	r0, #14
 80029ce:	f7ff ffcf 	bl	8002970 <DS3231_GetRegByte>
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0x7f) | ((!enable & 0x01) << DS3231_EOSC));
 80029d2:	4263      	negs	r3, r4
 80029d4:	415c      	adcs	r4, r3
 80029d6:	01e1      	lsls	r1, r4, #7
 80029d8:	237f      	movs	r3, #127	@ 0x7f
 80029da:	4003      	ands	r3, r0
 80029dc:	4319      	orrs	r1, r3
 80029de:	200e      	movs	r0, #14
 80029e0:	f7ff ffb2 	bl	8002948 <DS3231_SetRegByte>
}
 80029e4:	bd10      	pop	{r4, pc}

080029e6 <DS3231_EnableAlarm2>:

/**
 * @brief Enables alarm 2.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableAlarm2(DS3231_State enable){
 80029e6:	b510      	push	{r4, lr}
 80029e8:	0004      	movs	r4, r0
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 80029ea:	200e      	movs	r0, #14
 80029ec:	f7ff ffc0 	bl	8002970 <DS3231_GetRegByte>
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfd) | ((enable & 0x01) << DS3231_A2IE));
 80029f0:	0064      	lsls	r4, r4, #1
 80029f2:	2102      	movs	r1, #2
 80029f4:	4021      	ands	r1, r4
 80029f6:	2302      	movs	r3, #2
 80029f8:	4398      	bics	r0, r3
 80029fa:	4301      	orrs	r1, r0
 80029fc:	b2c9      	uxtb	r1, r1
 80029fe:	200e      	movs	r0, #14
 8002a00:	f7ff ffa2 	bl	8002948 <DS3231_SetRegByte>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 8002a04:	2001      	movs	r0, #1
 8002a06:	f7ff ffcf 	bl	80029a8 <DS3231_SetInterruptMode>
}
 8002a0a:	bd10      	pop	{r4, pc}

08002a0c <DS3231_ClearAlarm2Flag>:

/**
 * @brief Clears alarm 2 matched flag. Matched flags must be cleared before the next match or the next interrupt will be masked.
 */
void DS3231_ClearAlarm2Flag(){
 8002a0c:	b510      	push	{r4, lr}
	uint8_t status = DS3231_GetRegByte(DS3231_REG_STATUS) & 0xfd;
 8002a0e:	200f      	movs	r0, #15
 8002a10:	f7ff ffae 	bl	8002970 <DS3231_GetRegByte>
 8002a14:	21fd      	movs	r1, #253	@ 0xfd
	DS3231_SetRegByte(DS3231_REG_STATUS, status & ~(0x01 << DS3231_A2F));
 8002a16:	4001      	ands	r1, r0
 8002a18:	200f      	movs	r0, #15
 8002a1a:	f7ff ff95 	bl	8002948 <DS3231_SetRegByte>
}
 8002a1e:	bd10      	pop	{r4, pc}

08002a20 <DS3231_EnableAlarm1>:

/**
 * @brief Enables alarm 1.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableAlarm1(DS3231_State enable){
 8002a20:	b510      	push	{r4, lr}
 8002a22:	0004      	movs	r4, r0
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8002a24:	200e      	movs	r0, #14
 8002a26:	f7ff ffa3 	bl	8002970 <DS3231_GetRegByte>
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfe) | ((enable & 0x01) << DS3231_A1IE));
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	0001      	movs	r1, r0
 8002a2e:	4399      	bics	r1, r3
 8002a30:	2001      	movs	r0, #1
 8002a32:	4020      	ands	r0, r4
 8002a34:	4301      	orrs	r1, r0
 8002a36:	b2c9      	uxtb	r1, r1
 8002a38:	200e      	movs	r0, #14
 8002a3a:	f7ff ff85 	bl	8002948 <DS3231_SetRegByte>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 8002a3e:	2001      	movs	r0, #1
 8002a40:	f7ff ffb2 	bl	80029a8 <DS3231_SetInterruptMode>
}
 8002a44:	bd10      	pop	{r4, pc}

08002a46 <DS3231_ClearAlarm1Flag>:

/**
 * @brief Clears alarm 1 matched flag. Matched flags must be cleared before the next match or the next interrupt will be masked.
 */
void DS3231_ClearAlarm1Flag(){
 8002a46:	b510      	push	{r4, lr}
	uint8_t status = DS3231_GetRegByte(DS3231_REG_STATUS) & 0xfe;
 8002a48:	200f      	movs	r0, #15
 8002a4a:	f7ff ff91 	bl	8002970 <DS3231_GetRegByte>
 8002a4e:	21fe      	movs	r1, #254	@ 0xfe
	DS3231_SetRegByte(DS3231_REG_STATUS, status & ~(0x01 << DS3231_A1F));
 8002a50:	4001      	ands	r1, r0
 8002a52:	200f      	movs	r0, #15
 8002a54:	f7ff ff78 	bl	8002948 <DS3231_SetRegByte>
}
 8002a58:	bd10      	pop	{r4, pc}
	...

08002a5c <DS3231_Init>:
void DS3231_Init(I2C_HandleTypeDef *hi2c) {
 8002a5c:	b510      	push	{r4, lr}
	_ds3231_ui2c = hi2c;
 8002a5e:	4b08      	ldr	r3, [pc, #32]	@ (8002a80 <DS3231_Init+0x24>)
 8002a60:	6018      	str	r0, [r3, #0]
	DS3231_EnableAlarm1(DS3231_DISABLED);
 8002a62:	2000      	movs	r0, #0
 8002a64:	f7ff ffdc 	bl	8002a20 <DS3231_EnableAlarm1>
	DS3231_EnableAlarm2(DS3231_DISABLED);
 8002a68:	2000      	movs	r0, #0
 8002a6a:	f7ff ffbc 	bl	80029e6 <DS3231_EnableAlarm2>
	DS3231_ClearAlarm1Flag();
 8002a6e:	f7ff ffea 	bl	8002a46 <DS3231_ClearAlarm1Flag>
	DS3231_ClearAlarm2Flag();
 8002a72:	f7ff ffcb 	bl	8002a0c <DS3231_ClearAlarm2Flag>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 8002a76:	2001      	movs	r0, #1
 8002a78:	f7ff ff96 	bl	80029a8 <DS3231_SetInterruptMode>
}
 8002a7c:	bd10      	pop	{r4, pc}
 8002a7e:	46c0      	nop			@ (mov r8, r8)
 8002a80:	200014e4 	.word	0x200014e4

08002a84 <DS3231_IsOscillatorStopped>:

/**
 * @brief Check whether the clock oscillator is stopped.
 * @return Oscillator stopped flag (OSF) bit, 0 or 1.
 */
uint8_t DS3231_IsOscillatorStopped(){
 8002a84:	b510      	push	{r4, lr}
	return (DS3231_GetRegByte(DS3231_REG_STATUS) >> DS3231_OSF) & 0x01;
 8002a86:	200f      	movs	r0, #15
 8002a88:	f7ff ff72 	bl	8002970 <DS3231_GetRegByte>
 8002a8c:	09c0      	lsrs	r0, r0, #7
 8002a8e:	b2c0      	uxtb	r0, r0
}
 8002a90:	bd10      	pop	{r4, pc}

08002a92 <DS3231_DecodeBCD>:
 * @brief Decodes the raw binary value stored in registers to decimal format.
 * @param bin Binary-coded decimal value retrieved from register, 0 to 255.
 * @return Decoded decimal value.
 */
uint8_t DS3231_DecodeBCD(uint8_t bin) {
	return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
 8002a92:	0903      	lsrs	r3, r0, #4
 8002a94:	009a      	lsls	r2, r3, #2
 8002a96:	189b      	adds	r3, r3, r2
 8002a98:	005b      	lsls	r3, r3, #1
 8002a9a:	220f      	movs	r2, #15
 8002a9c:	4010      	ands	r0, r2
 8002a9e:	1818      	adds	r0, r3, r0
 8002aa0:	b2c0      	uxtb	r0, r0
}
 8002aa2:	4770      	bx	lr

08002aa4 <DS3231_GetDayOfWeek>:
uint8_t DS3231_GetDayOfWeek(void) {
 8002aa4:	b510      	push	{r4, lr}
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_DOW));
 8002aa6:	2003      	movs	r0, #3
 8002aa8:	f7ff ff62 	bl	8002970 <DS3231_GetRegByte>
 8002aac:	f7ff fff1 	bl	8002a92 <DS3231_DecodeBCD>
}
 8002ab0:	bd10      	pop	{r4, pc}

08002ab2 <DS3231_GetDate>:
uint8_t DS3231_GetDate(void) {
 8002ab2:	b510      	push	{r4, lr}
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_DATE));
 8002ab4:	2004      	movs	r0, #4
 8002ab6:	f7ff ff5b 	bl	8002970 <DS3231_GetRegByte>
 8002aba:	f7ff ffea 	bl	8002a92 <DS3231_DecodeBCD>
}
 8002abe:	bd10      	pop	{r4, pc}

08002ac0 <DS3231_GetMonth>:
uint8_t DS3231_GetMonth(void) {
 8002ac0:	b510      	push	{r4, lr}
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_MONTH) & 0x7f);
 8002ac2:	2005      	movs	r0, #5
 8002ac4:	f7ff ff54 	bl	8002970 <DS3231_GetRegByte>
 8002ac8:	237f      	movs	r3, #127	@ 0x7f
 8002aca:	4018      	ands	r0, r3
 8002acc:	f7ff ffe1 	bl	8002a92 <DS3231_DecodeBCD>
}
 8002ad0:	bd10      	pop	{r4, pc}

08002ad2 <DS3231_GetYear>:
uint16_t DS3231_GetYear(void) {
 8002ad2:	b510      	push	{r4, lr}
	uint8_t decYear = DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_YEAR));
 8002ad4:	2006      	movs	r0, #6
 8002ad6:	f7ff ff4b 	bl	8002970 <DS3231_GetRegByte>
 8002ada:	f7ff ffda 	bl	8002a92 <DS3231_DecodeBCD>
 8002ade:	0004      	movs	r4, r0
	uint16_t century = (DS3231_GetRegByte(DS3231_REG_MONTH) >> DS3231_CENTURY) * 100 + 2000;
 8002ae0:	2005      	movs	r0, #5
 8002ae2:	f7ff ff45 	bl	8002970 <DS3231_GetRegByte>
 8002ae6:	09c0      	lsrs	r0, r0, #7
 8002ae8:	b2c0      	uxtb	r0, r0
 8002aea:	2364      	movs	r3, #100	@ 0x64
 8002aec:	4358      	muls	r0, r3
	return century + decYear;
 8002aee:	23fa      	movs	r3, #250	@ 0xfa
 8002af0:	00db      	lsls	r3, r3, #3
 8002af2:	469c      	mov	ip, r3
 8002af4:	4464      	add	r4, ip
 8002af6:	1900      	adds	r0, r0, r4
 8002af8:	b280      	uxth	r0, r0
}
 8002afa:	bd10      	pop	{r4, pc}

08002afc <DS3231_GetHour>:
uint8_t DS3231_GetHour(void) {
 8002afc:	b510      	push	{r4, lr}
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_HOUR));
 8002afe:	2002      	movs	r0, #2
 8002b00:	f7ff ff36 	bl	8002970 <DS3231_GetRegByte>
 8002b04:	f7ff ffc5 	bl	8002a92 <DS3231_DecodeBCD>
}
 8002b08:	bd10      	pop	{r4, pc}

08002b0a <DS3231_GetMinute>:
uint8_t DS3231_GetMinute(void) {
 8002b0a:	b510      	push	{r4, lr}
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_MINUTE));
 8002b0c:	2001      	movs	r0, #1
 8002b0e:	f7ff ff2f 	bl	8002970 <DS3231_GetRegByte>
 8002b12:	f7ff ffbe 	bl	8002a92 <DS3231_DecodeBCD>
}
 8002b16:	bd10      	pop	{r4, pc}

08002b18 <DS3231_GetSecond>:
uint8_t DS3231_GetSecond(void) {
 8002b18:	b510      	push	{r4, lr}
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_SECOND));
 8002b1a:	2000      	movs	r0, #0
 8002b1c:	f7ff ff28 	bl	8002970 <DS3231_GetRegByte>
 8002b20:	f7ff ffb7 	bl	8002a92 <DS3231_DecodeBCD>
}
 8002b24:	bd10      	pop	{r4, pc}

08002b26 <DS3231_EncodeBCD>:
/**
 * @brief Encodes a decimal number to binaty-coded decimal for storage in registers.
 * @param dec Decimal number to encode.
 * @return Encoded binary-coded decimal value.
 */
uint8_t DS3231_EncodeBCD(uint8_t dec) {
 8002b26:	b570      	push	{r4, r5, r6, lr}
 8002b28:	0005      	movs	r5, r0
	return (dec % 10 + ((dec / 10) << 4));
 8002b2a:	210a      	movs	r1, #10
 8002b2c:	f7fd faec 	bl	8000108 <__udivsi3>
 8002b30:	0104      	lsls	r4, r0, #4
 8002b32:	210a      	movs	r1, #10
 8002b34:	0028      	movs	r0, r5
 8002b36:	f7fd fb6d 	bl	8000214 <__aeabi_uidivmod>
 8002b3a:	1860      	adds	r0, r4, r1
 8002b3c:	b2c0      	uxtb	r0, r0
}
 8002b3e:	bd70      	pop	{r4, r5, r6, pc}

08002b40 <DS3231_SetDate>:
void DS3231_SetDate(uint8_t date) {
 8002b40:	b510      	push	{r4, lr}
	DS3231_SetRegByte(DS3231_REG_DATE, DS3231_EncodeBCD(date));
 8002b42:	f7ff fff0 	bl	8002b26 <DS3231_EncodeBCD>
 8002b46:	0001      	movs	r1, r0
 8002b48:	2004      	movs	r0, #4
 8002b4a:	f7ff fefd 	bl	8002948 <DS3231_SetRegByte>
}
 8002b4e:	bd10      	pop	{r4, pc}

08002b50 <DS3231_SetMonth>:
void DS3231_SetMonth(uint8_t month) {
 8002b50:	b570      	push	{r4, r5, r6, lr}
 8002b52:	0005      	movs	r5, r0
	uint8_t century = DS3231_GetRegByte(DS3231_REG_MONTH) & 0x80;
 8002b54:	2005      	movs	r0, #5
 8002b56:	f7ff ff0b 	bl	8002970 <DS3231_GetRegByte>
 8002b5a:	0004      	movs	r4, r0
	DS3231_SetRegByte(DS3231_REG_MONTH, DS3231_EncodeBCD(month) | century);
 8002b5c:	0028      	movs	r0, r5
 8002b5e:	f7ff ffe2 	bl	8002b26 <DS3231_EncodeBCD>
	uint8_t century = DS3231_GetRegByte(DS3231_REG_MONTH) & 0x80;
 8002b62:	237f      	movs	r3, #127	@ 0x7f
 8002b64:	439c      	bics	r4, r3
	DS3231_SetRegByte(DS3231_REG_MONTH, DS3231_EncodeBCD(month) | century);
 8002b66:	4320      	orrs	r0, r4
 8002b68:	b2c1      	uxtb	r1, r0
 8002b6a:	2005      	movs	r0, #5
 8002b6c:	f7ff feec 	bl	8002948 <DS3231_SetRegByte>
}
 8002b70:	bd70      	pop	{r4, r5, r6, pc}

08002b72 <DS3231_SetYear>:
void DS3231_SetYear(uint16_t year) {
 8002b72:	b570      	push	{r4, r5, r6, lr}
 8002b74:	0004      	movs	r4, r0
	uint8_t monthReg = (DS3231_GetRegByte(DS3231_REG_MONTH) & 0x7f) | (century << DS3231_CENTURY);
 8002b76:	2005      	movs	r0, #5
 8002b78:	f7ff fefa 	bl	8002970 <DS3231_GetRegByte>
 8002b7c:	0005      	movs	r5, r0
	uint8_t century = (year / 100) % 20;
 8002b7e:	2164      	movs	r1, #100	@ 0x64
 8002b80:	0020      	movs	r0, r4
 8002b82:	f7fd fac1 	bl	8000108 <__udivsi3>
 8002b86:	b280      	uxth	r0, r0
 8002b88:	2114      	movs	r1, #20
 8002b8a:	f7fd fb43 	bl	8000214 <__aeabi_uidivmod>
	uint8_t monthReg = (DS3231_GetRegByte(DS3231_REG_MONTH) & 0x7f) | (century << DS3231_CENTURY);
 8002b8e:	b2c9      	uxtb	r1, r1
 8002b90:	01c9      	lsls	r1, r1, #7
 8002b92:	207f      	movs	r0, #127	@ 0x7f
 8002b94:	4028      	ands	r0, r5
 8002b96:	4301      	orrs	r1, r0
	DS3231_SetRegByte(DS3231_REG_MONTH, monthReg);
 8002b98:	b2c9      	uxtb	r1, r1
 8002b9a:	2005      	movs	r0, #5
 8002b9c:	f7ff fed4 	bl	8002948 <DS3231_SetRegByte>
	DS3231_SetRegByte(DS3231_REG_YEAR, DS3231_EncodeBCD(year % 100));
 8002ba0:	2164      	movs	r1, #100	@ 0x64
 8002ba2:	0020      	movs	r0, r4
 8002ba4:	f7fd fb36 	bl	8000214 <__aeabi_uidivmod>
 8002ba8:	b2c8      	uxtb	r0, r1
 8002baa:	f7ff ffbc 	bl	8002b26 <DS3231_EncodeBCD>
 8002bae:	0001      	movs	r1, r0
 8002bb0:	2006      	movs	r0, #6
 8002bb2:	f7ff fec9 	bl	8002948 <DS3231_SetRegByte>
}
 8002bb6:	bd70      	pop	{r4, r5, r6, pc}

08002bb8 <DS3231_SetHour>:
void DS3231_SetHour(uint8_t hour_24mode) {
 8002bb8:	b510      	push	{r4, lr}
	DS3231_SetRegByte(DS3231_REG_HOUR, DS3231_EncodeBCD(hour_24mode & 0x3f));
 8002bba:	233f      	movs	r3, #63	@ 0x3f
 8002bbc:	4018      	ands	r0, r3
 8002bbe:	f7ff ffb2 	bl	8002b26 <DS3231_EncodeBCD>
 8002bc2:	0001      	movs	r1, r0
 8002bc4:	2002      	movs	r0, #2
 8002bc6:	f7ff febf 	bl	8002948 <DS3231_SetRegByte>
}
 8002bca:	bd10      	pop	{r4, pc}

08002bcc <DS3231_SetMinute>:
void DS3231_SetMinute(uint8_t minute) {
 8002bcc:	b510      	push	{r4, lr}
	DS3231_SetRegByte(DS3231_REG_MINUTE, DS3231_EncodeBCD(minute));
 8002bce:	f7ff ffaa 	bl	8002b26 <DS3231_EncodeBCD>
 8002bd2:	0001      	movs	r1, r0
 8002bd4:	2001      	movs	r0, #1
 8002bd6:	f7ff feb7 	bl	8002948 <DS3231_SetRegByte>
}
 8002bda:	bd10      	pop	{r4, pc}

08002bdc <DS3231_SetSecond>:
void DS3231_SetSecond(uint8_t second) {
 8002bdc:	b510      	push	{r4, lr}
	DS3231_SetRegByte(DS3231_REG_SECOND, DS3231_EncodeBCD(second));
 8002bde:	f7ff ffa2 	bl	8002b26 <DS3231_EncodeBCD>
 8002be2:	0001      	movs	r1, r0
 8002be4:	2000      	movs	r0, #0
 8002be6:	f7ff feaf 	bl	8002948 <DS3231_SetRegByte>
}
 8002bea:	bd10      	pop	{r4, pc}

08002bec <DS3231_SetFullTime>:
void DS3231_SetFullTime(uint8_t  hour_24mode, uint8_t minute, uint8_t second){
 8002bec:	b570      	push	{r4, r5, r6, lr}
 8002bee:	000d      	movs	r5, r1
 8002bf0:	0014      	movs	r4, r2
	DS3231_SetHour(hour_24mode);
 8002bf2:	f7ff ffe1 	bl	8002bb8 <DS3231_SetHour>
	DS3231_SetMinute(minute);
 8002bf6:	0028      	movs	r0, r5
 8002bf8:	f7ff ffe8 	bl	8002bcc <DS3231_SetMinute>
	DS3231_SetSecond(second);
 8002bfc:	0020      	movs	r0, r4
 8002bfe:	f7ff ffed 	bl	8002bdc <DS3231_SetSecond>
}
 8002c02:	bd70      	pop	{r4, r5, r6, pc}

08002c04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c04:	b570      	push	{r4, r5, r6, lr}
 8002c06:	0004      	movs	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c08:	4d0e      	ldr	r5, [pc, #56]	@ (8002c44 <HAL_InitTick+0x40>)
 8002c0a:	4b0f      	ldr	r3, [pc, #60]	@ (8002c48 <HAL_InitTick+0x44>)
 8002c0c:	7819      	ldrb	r1, [r3, #0]
 8002c0e:	20fa      	movs	r0, #250	@ 0xfa
 8002c10:	0080      	lsls	r0, r0, #2
 8002c12:	f7fd fa79 	bl	8000108 <__udivsi3>
 8002c16:	0001      	movs	r1, r0
 8002c18:	6828      	ldr	r0, [r5, #0]
 8002c1a:	f7fd fa75 	bl	8000108 <__udivsi3>
 8002c1e:	f000 f87b 	bl	8002d18 <HAL_SYSTICK_Config>
 8002c22:	2800      	cmp	r0, #0
 8002c24:	d10b      	bne.n	8002c3e <HAL_InitTick+0x3a>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8002c26:	3001      	adds	r0, #1
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c28:	2c03      	cmp	r4, #3
 8002c2a:	d809      	bhi.n	8002c40 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	0021      	movs	r1, r4
 8002c30:	4240      	negs	r0, r0
 8002c32:	f000 f833 	bl	8002c9c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c36:	4b05      	ldr	r3, [pc, #20]	@ (8002c4c <HAL_InitTick+0x48>)
 8002c38:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c3a:	2000      	movs	r0, #0
 8002c3c:	e000      	b.n	8002c40 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8002c3e:	2001      	movs	r0, #1
}
 8002c40:	bd70      	pop	{r4, r5, r6, pc}
 8002c42:	46c0      	nop			@ (mov r8, r8)
 8002c44:	20000854 	.word	0x20000854
 8002c48:	20000858 	.word	0x20000858
 8002c4c:	2000085c 	.word	0x2000085c

08002c50 <HAL_Init>:
{
 8002c50:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002c52:	4a08      	ldr	r2, [pc, #32]	@ (8002c74 <HAL_Init+0x24>)
 8002c54:	6813      	ldr	r3, [r2, #0]
 8002c56:	2140      	movs	r1, #64	@ 0x40
 8002c58:	430b      	orrs	r3, r1
 8002c5a:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002c5c:	2003      	movs	r0, #3
 8002c5e:	f7ff ffd1 	bl	8002c04 <HAL_InitTick>
 8002c62:	1e04      	subs	r4, r0, #0
 8002c64:	d002      	beq.n	8002c6c <HAL_Init+0x1c>
    status = HAL_ERROR;
 8002c66:	2401      	movs	r4, #1
}
 8002c68:	0020      	movs	r0, r4
 8002c6a:	bd10      	pop	{r4, pc}
    HAL_MspInit();
 8002c6c:	f7ff fc68 	bl	8002540 <HAL_MspInit>
 8002c70:	e7fa      	b.n	8002c68 <HAL_Init+0x18>
 8002c72:	46c0      	nop			@ (mov r8, r8)
 8002c74:	40022000 	.word	0x40022000

08002c78 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002c78:	4a03      	ldr	r2, [pc, #12]	@ (8002c88 <HAL_IncTick+0x10>)
 8002c7a:	6811      	ldr	r1, [r2, #0]
 8002c7c:	4b03      	ldr	r3, [pc, #12]	@ (8002c8c <HAL_IncTick+0x14>)
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	185b      	adds	r3, r3, r1
 8002c82:	6013      	str	r3, [r2, #0]
}
 8002c84:	4770      	bx	lr
 8002c86:	46c0      	nop			@ (mov r8, r8)
 8002c88:	200014e8 	.word	0x200014e8
 8002c8c:	20000858 	.word	0x20000858

08002c90 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002c90:	4b01      	ldr	r3, [pc, #4]	@ (8002c98 <HAL_GetTick+0x8>)
 8002c92:	6818      	ldr	r0, [r3, #0]
}
 8002c94:	4770      	bx	lr
 8002c96:	46c0      	nop			@ (mov r8, r8)
 8002c98:	200014e8 	.word	0x200014e8

08002c9c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c9c:	b570      	push	{r4, r5, r6, lr}
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8002c9e:	2800      	cmp	r0, #0
 8002ca0:	db14      	blt.n	8002ccc <HAL_NVIC_SetPriority+0x30>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002ca2:	0884      	lsrs	r4, r0, #2
 8002ca4:	00a4      	lsls	r4, r4, #2
 8002ca6:	4b14      	ldr	r3, [pc, #80]	@ (8002cf8 <HAL_NVIC_SetPriority+0x5c>)
 8002ca8:	469c      	mov	ip, r3
 8002caa:	4464      	add	r4, ip
 8002cac:	26c0      	movs	r6, #192	@ 0xc0
 8002cae:	00b6      	lsls	r6, r6, #2
 8002cb0:	59a5      	ldr	r5, [r4, r6]
 8002cb2:	2203      	movs	r2, #3
 8002cb4:	4002      	ands	r2, r0
 8002cb6:	00d2      	lsls	r2, r2, #3
 8002cb8:	23ff      	movs	r3, #255	@ 0xff
 8002cba:	0018      	movs	r0, r3
 8002cbc:	4090      	lsls	r0, r2
 8002cbe:	4385      	bics	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002cc0:	0189      	lsls	r1, r1, #6
 8002cc2:	400b      	ands	r3, r1
 8002cc4:	4093      	lsls	r3, r2
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002cc6:	432b      	orrs	r3, r5
 8002cc8:	51a3      	str	r3, [r4, r6]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8002cca:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002ccc:	230f      	movs	r3, #15
 8002cce:	4003      	ands	r3, r0
 8002cd0:	3b08      	subs	r3, #8
 8002cd2:	089b      	lsrs	r3, r3, #2
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	4a09      	ldr	r2, [pc, #36]	@ (8002cfc <HAL_NVIC_SetPriority+0x60>)
 8002cd8:	4694      	mov	ip, r2
 8002cda:	4463      	add	r3, ip
 8002cdc:	69dc      	ldr	r4, [r3, #28]
 8002cde:	2203      	movs	r2, #3
 8002ce0:	4010      	ands	r0, r2
 8002ce2:	00c0      	lsls	r0, r0, #3
 8002ce4:	32fc      	adds	r2, #252	@ 0xfc
 8002ce6:	0015      	movs	r5, r2
 8002ce8:	4085      	lsls	r5, r0
 8002cea:	43ac      	bics	r4, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002cec:	0189      	lsls	r1, r1, #6
 8002cee:	400a      	ands	r2, r1
 8002cf0:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002cf2:	4322      	orrs	r2, r4
 8002cf4:	61da      	str	r2, [r3, #28]
 8002cf6:	e7e8      	b.n	8002cca <HAL_NVIC_SetPriority+0x2e>
 8002cf8:	e000e100 	.word	0xe000e100
 8002cfc:	e000ed00 	.word	0xe000ed00

08002d00 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002d00:	2800      	cmp	r0, #0
 8002d02:	db05      	blt.n	8002d10 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d04:	221f      	movs	r2, #31
 8002d06:	4002      	ands	r2, r0
 8002d08:	2301      	movs	r3, #1
 8002d0a:	4093      	lsls	r3, r2
 8002d0c:	4a01      	ldr	r2, [pc, #4]	@ (8002d14 <HAL_NVIC_EnableIRQ+0x14>)
 8002d0e:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002d10:	4770      	bx	lr
 8002d12:	46c0      	nop			@ (mov r8, r8)
 8002d14:	e000e100 	.word	0xe000e100

08002d18 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d18:	3801      	subs	r0, #1
 8002d1a:	2380      	movs	r3, #128	@ 0x80
 8002d1c:	045b      	lsls	r3, r3, #17
 8002d1e:	4298      	cmp	r0, r3
 8002d20:	d20f      	bcs.n	8002d42 <HAL_SYSTICK_Config+0x2a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d22:	4a09      	ldr	r2, [pc, #36]	@ (8002d48 <HAL_SYSTICK_Config+0x30>)
 8002d24:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002d26:	4809      	ldr	r0, [pc, #36]	@ (8002d4c <HAL_SYSTICK_Config+0x34>)
 8002d28:	6a03      	ldr	r3, [r0, #32]
 8002d2a:	021b      	lsls	r3, r3, #8
 8002d2c:	0a1b      	lsrs	r3, r3, #8
 8002d2e:	21c0      	movs	r1, #192	@ 0xc0
 8002d30:	0609      	lsls	r1, r1, #24
 8002d32:	430b      	orrs	r3, r1
 8002d34:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d36:	2300      	movs	r3, #0
 8002d38:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d3a:	3307      	adds	r3, #7
 8002d3c:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d3e:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002d40:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002d42:	2001      	movs	r0, #1
   return SysTick_Config(TicksNumb);
 8002d44:	e7fc      	b.n	8002d40 <HAL_SYSTICK_Config+0x28>
 8002d46:	46c0      	nop			@ (mov r8, r8)
 8002d48:	e000e010 	.word	0xe000e010
 8002d4c:	e000ed00 	.word	0xe000ed00

08002d50 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d50:	b570      	push	{r4, r5, r6, lr}
 8002d52:	1e04      	subs	r4, r0, #0
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002d54:	d03c      	beq.n	8002dd0 <HAL_DMA_Init+0x80>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002d56:	6805      	ldr	r5, [r0, #0]
 8002d58:	4b1e      	ldr	r3, [pc, #120]	@ (8002dd4 <HAL_DMA_Init+0x84>)
 8002d5a:	18e8      	adds	r0, r5, r3
 8002d5c:	2114      	movs	r1, #20
 8002d5e:	f7fd f9d3 	bl	8000108 <__udivsi3>
 8002d62:	0080      	lsls	r0, r0, #2
 8002d64:	6460      	str	r0, [r4, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 8002d66:	4b1c      	ldr	r3, [pc, #112]	@ (8002dd8 <HAL_DMA_Init+0x88>)
 8002d68:	6423      	str	r3, [r4, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d6a:	2325      	movs	r3, #37	@ 0x25
 8002d6c:	2202      	movs	r2, #2
 8002d6e:	54e2      	strb	r2, [r4, r3]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002d70:	682a      	ldr	r2, [r5, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002d72:	4b1a      	ldr	r3, [pc, #104]	@ (8002ddc <HAL_DMA_Init+0x8c>)
 8002d74:	401a      	ands	r2, r3
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002d76:	68a3      	ldr	r3, [r4, #8]
 8002d78:	68e1      	ldr	r1, [r4, #12]
 8002d7a:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d7c:	6921      	ldr	r1, [r4, #16]
 8002d7e:	430b      	orrs	r3, r1
 8002d80:	6961      	ldr	r1, [r4, #20]
 8002d82:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d84:	69a1      	ldr	r1, [r4, #24]
 8002d86:	430b      	orrs	r3, r1
 8002d88:	69e1      	ldr	r1, [r4, #28]
 8002d8a:	430b      	orrs	r3, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d8c:	6a21      	ldr	r1, [r4, #32]
 8002d8e:	430b      	orrs	r3, r1
  tmp |=  hdma->Init.Direction        |
 8002d90:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002d92:	602b      	str	r3, [r5, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002d94:	2380      	movs	r3, #128	@ 0x80
 8002d96:	01db      	lsls	r3, r3, #7
 8002d98:	68a2      	ldr	r2, [r4, #8]
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d00f      	beq.n	8002dbe <HAL_DMA_Init+0x6e>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002d9e:	4a10      	ldr	r2, [pc, #64]	@ (8002de0 <HAL_DMA_Init+0x90>)
 8002da0:	6813      	ldr	r3, [r2, #0]
 8002da2:	251c      	movs	r5, #28
 8002da4:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8002da6:	4028      	ands	r0, r5
 8002da8:	210f      	movs	r1, #15
 8002daa:	4081      	lsls	r1, r0
 8002dac:	438b      	bics	r3, r1
 8002dae:	6013      	str	r3, [r2, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002db0:	6810      	ldr	r0, [r2, #0]
 8002db2:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8002db4:	4029      	ands	r1, r5
 8002db6:	6863      	ldr	r3, [r4, #4]
 8002db8:	408b      	lsls	r3, r1
 8002dba:	4303      	orrs	r3, r0
 8002dbc:	6013      	str	r3, [r2, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	63e3      	str	r3, [r4, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002dc2:	2225      	movs	r2, #37	@ 0x25
 8002dc4:	2101      	movs	r1, #1
 8002dc6:	54a1      	strb	r1, [r4, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002dc8:	3a01      	subs	r2, #1
 8002dca:	54a3      	strb	r3, [r4, r2]

  return HAL_OK;
 8002dcc:	2000      	movs	r0, #0
}
 8002dce:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002dd0:	2001      	movs	r0, #1
 8002dd2:	e7fc      	b.n	8002dce <HAL_DMA_Init+0x7e>
 8002dd4:	bffdfff8 	.word	0xbffdfff8
 8002dd8:	40020000 	.word	0x40020000
 8002ddc:	ffff800f 	.word	0xffff800f
 8002de0:	400200a8 	.word	0x400200a8

08002de4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002de4:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002de6:	2424      	movs	r4, #36	@ 0x24
 8002de8:	5d04      	ldrb	r4, [r0, r4]
 8002dea:	2c01      	cmp	r4, #1
 8002dec:	d043      	beq.n	8002e76 <HAL_DMA_Start_IT+0x92>
 8002dee:	2424      	movs	r4, #36	@ 0x24
 8002df0:	2501      	movs	r5, #1
 8002df2:	5505      	strb	r5, [r0, r4]

  if(HAL_DMA_STATE_READY == hdma->State)
 8002df4:	3401      	adds	r4, #1
 8002df6:	5d04      	ldrb	r4, [r0, r4]
 8002df8:	2c01      	cmp	r4, #1
 8002dfa:	d004      	beq.n	8002e06 <HAL_DMA_Start_IT+0x22>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dfc:	2324      	movs	r3, #36	@ 0x24
 8002dfe:	2200      	movs	r2, #0
 8002e00:	54c2      	strb	r2, [r0, r3]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002e02:	2002      	movs	r0, #2
  }
  return status;
}
 8002e04:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e06:	3424      	adds	r4, #36	@ 0x24
 8002e08:	3501      	adds	r5, #1
 8002e0a:	5505      	strb	r5, [r0, r4]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e0c:	2400      	movs	r4, #0
 8002e0e:	63c4      	str	r4, [r0, #60]	@ 0x3c
    __HAL_DMA_DISABLE(hdma);
 8002e10:	6806      	ldr	r6, [r0, #0]
 8002e12:	6835      	ldr	r5, [r6, #0]
 8002e14:	3401      	adds	r4, #1
 8002e16:	43a5      	bics	r5, r4
 8002e18:	6035      	str	r5, [r6, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002e1a:	6c06      	ldr	r6, [r0, #64]	@ 0x40
 8002e1c:	6c45      	ldr	r5, [r0, #68]	@ 0x44
 8002e1e:	271c      	movs	r7, #28
 8002e20:	403d      	ands	r5, r7
 8002e22:	40ac      	lsls	r4, r5
 8002e24:	6074      	str	r4, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002e26:	6804      	ldr	r4, [r0, #0]
 8002e28:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e2a:	6883      	ldr	r3, [r0, #8]
 8002e2c:	2b10      	cmp	r3, #16
 8002e2e:	d012      	beq.n	8002e56 <HAL_DMA_Start_IT+0x72>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8002e30:	6803      	ldr	r3, [r0, #0]
 8002e32:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8002e34:	6803      	ldr	r3, [r0, #0]
 8002e36:	60da      	str	r2, [r3, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8002e38:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d010      	beq.n	8002e60 <HAL_DMA_Start_IT+0x7c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e3e:	6802      	ldr	r2, [r0, #0]
 8002e40:	6813      	ldr	r3, [r2, #0]
 8002e42:	210e      	movs	r1, #14
 8002e44:	430b      	orrs	r3, r1
 8002e46:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8002e48:	6802      	ldr	r2, [r0, #0]
 8002e4a:	6813      	ldr	r3, [r2, #0]
 8002e4c:	2101      	movs	r1, #1
 8002e4e:	430b      	orrs	r3, r1
 8002e50:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e52:	2000      	movs	r0, #0
 8002e54:	e7d6      	b.n	8002e04 <HAL_DMA_Start_IT+0x20>
    hdma->Instance->CPAR = DstAddress;
 8002e56:	6803      	ldr	r3, [r0, #0]
 8002e58:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8002e5a:	6803      	ldr	r3, [r0, #0]
 8002e5c:	60d9      	str	r1, [r3, #12]
 8002e5e:	e7eb      	b.n	8002e38 <HAL_DMA_Start_IT+0x54>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e60:	6802      	ldr	r2, [r0, #0]
 8002e62:	6813      	ldr	r3, [r2, #0]
 8002e64:	2104      	movs	r1, #4
 8002e66:	438b      	bics	r3, r1
 8002e68:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002e6a:	6802      	ldr	r2, [r0, #0]
 8002e6c:	6813      	ldr	r3, [r2, #0]
 8002e6e:	3106      	adds	r1, #6
 8002e70:	430b      	orrs	r3, r1
 8002e72:	6013      	str	r3, [r2, #0]
 8002e74:	e7e8      	b.n	8002e48 <HAL_DMA_Start_IT+0x64>
  __HAL_LOCK(hdma);
 8002e76:	2002      	movs	r0, #2
 8002e78:	e7c4      	b.n	8002e04 <HAL_DMA_Start_IT+0x20>

08002e7a <HAL_DMA_IRQHandler>:
{
 8002e7a:	b570      	push	{r4, r5, r6, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002e7c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8002e7e:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8002e80:	6804      	ldr	r4, [r0, #0]
 8002e82:	6825      	ldr	r5, [r4, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8002e84:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8002e86:	221c      	movs	r2, #28
 8002e88:	4013      	ands	r3, r2
 8002e8a:	3a18      	subs	r2, #24
 8002e8c:	409a      	lsls	r2, r3
 8002e8e:	4211      	tst	r1, r2
 8002e90:	d014      	beq.n	8002ebc <HAL_DMA_IRQHandler+0x42>
 8002e92:	076a      	lsls	r2, r5, #29
 8002e94:	d512      	bpl.n	8002ebc <HAL_DMA_IRQHandler+0x42>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e96:	6823      	ldr	r3, [r4, #0]
 8002e98:	069b      	lsls	r3, r3, #26
 8002e9a:	d403      	bmi.n	8002ea4 <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e9c:	6823      	ldr	r3, [r4, #0]
 8002e9e:	2204      	movs	r2, #4
 8002ea0:	4393      	bics	r3, r2
 8002ea2:	6023      	str	r3, [r4, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8002ea4:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8002ea6:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8002ea8:	231c      	movs	r3, #28
 8002eaa:	401a      	ands	r2, r3
 8002eac:	3b18      	subs	r3, #24
 8002eae:	4093      	lsls	r3, r2
 8002eb0:	604b      	str	r3, [r1, #4]
     if(hdma->XferHalfCpltCallback != NULL)
 8002eb2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d000      	beq.n	8002eba <HAL_DMA_IRQHandler+0x40>
        hdma->XferHalfCpltCallback(hdma);
 8002eb8:	4798      	blx	r3
}
 8002eba:	bd70      	pop	{r4, r5, r6, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8002ebc:	2202      	movs	r2, #2
 8002ebe:	409a      	lsls	r2, r3
 8002ec0:	4211      	tst	r1, r2
 8002ec2:	d01a      	beq.n	8002efa <HAL_DMA_IRQHandler+0x80>
 8002ec4:	07aa      	lsls	r2, r5, #30
 8002ec6:	d518      	bpl.n	8002efa <HAL_DMA_IRQHandler+0x80>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ec8:	6823      	ldr	r3, [r4, #0]
 8002eca:	069b      	lsls	r3, r3, #26
 8002ecc:	d406      	bmi.n	8002edc <HAL_DMA_IRQHandler+0x62>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002ece:	6823      	ldr	r3, [r4, #0]
 8002ed0:	220a      	movs	r2, #10
 8002ed2:	4393      	bics	r3, r2
 8002ed4:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8002ed6:	2325      	movs	r3, #37	@ 0x25
 8002ed8:	3a09      	subs	r2, #9
 8002eda:	54c2      	strb	r2, [r0, r3]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8002edc:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8002ede:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8002ee0:	231c      	movs	r3, #28
 8002ee2:	401a      	ands	r2, r3
 8002ee4:	3b1a      	subs	r3, #26
 8002ee6:	4093      	lsls	r3, r2
 8002ee8:	604b      	str	r3, [r1, #4]
    __HAL_UNLOCK(hdma);
 8002eea:	2324      	movs	r3, #36	@ 0x24
 8002eec:	2200      	movs	r2, #0
 8002eee:	54c2      	strb	r2, [r0, r3]
    if(hdma->XferCpltCallback != NULL)
 8002ef0:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d0e1      	beq.n	8002eba <HAL_DMA_IRQHandler+0x40>
      hdma->XferCpltCallback(hdma);
 8002ef6:	4798      	blx	r3
 8002ef8:	e7df      	b.n	8002eba <HAL_DMA_IRQHandler+0x40>
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8002efa:	2208      	movs	r2, #8
 8002efc:	409a      	lsls	r2, r3
 8002efe:	4211      	tst	r1, r2
 8002f00:	d0db      	beq.n	8002eba <HAL_DMA_IRQHandler+0x40>
 8002f02:	072d      	lsls	r5, r5, #28
 8002f04:	d5d9      	bpl.n	8002eba <HAL_DMA_IRQHandler+0x40>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f06:	6823      	ldr	r3, [r4, #0]
 8002f08:	220e      	movs	r2, #14
 8002f0a:	4393      	bics	r3, r2
 8002f0c:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002f0e:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8002f10:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8002f12:	231c      	movs	r3, #28
 8002f14:	401a      	ands	r2, r3
 8002f16:	3b1b      	subs	r3, #27
 8002f18:	001c      	movs	r4, r3
 8002f1a:	4094      	lsls	r4, r2
 8002f1c:	604c      	str	r4, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002f1e:	63c3      	str	r3, [r0, #60]	@ 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8002f20:	2225      	movs	r2, #37	@ 0x25
 8002f22:	5483      	strb	r3, [r0, r2]
    __HAL_UNLOCK(hdma);
 8002f24:	3323      	adds	r3, #35	@ 0x23
 8002f26:	2200      	movs	r2, #0
 8002f28:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferErrorCallback != NULL)
 8002f2a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d0c4      	beq.n	8002eba <HAL_DMA_IRQHandler+0x40>
      hdma->XferErrorCallback(hdma);
 8002f30:	4798      	blx	r3
  return;
 8002f32:	e7c2      	b.n	8002eba <HAL_DMA_IRQHandler+0x40>

08002f34 <FLASH_SetErrorCode>:
  */
static void FLASH_SetErrorCode(void)
{
  uint32_t flags = 0;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8002f34:	4b2b      	ldr	r3, [pc, #172]	@ (8002fe4 <FLASH_SetErrorCode+0xb0>)
 8002f36:	6999      	ldr	r1, [r3, #24]
 8002f38:	2280      	movs	r2, #128	@ 0x80
 8002f3a:	0052      	lsls	r2, r2, #1
 8002f3c:	000b      	movs	r3, r1
 8002f3e:	4013      	ands	r3, r2
 8002f40:	4211      	tst	r1, r2
 8002f42:	d006      	beq.n	8002f52 <FLASH_SetErrorCode+0x1e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002f44:	4a28      	ldr	r2, [pc, #160]	@ (8002fe8 <FLASH_SetErrorCode+0xb4>)
 8002f46:	6953      	ldr	r3, [r2, #20]
 8002f48:	2102      	movs	r1, #2
 8002f4a:	430b      	orrs	r3, r1
 8002f4c:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_WRPERR;
 8002f4e:	2380      	movs	r3, #128	@ 0x80
 8002f50:	005b      	lsls	r3, r3, #1
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 8002f52:	4a24      	ldr	r2, [pc, #144]	@ (8002fe4 <FLASH_SetErrorCode+0xb0>)
 8002f54:	6992      	ldr	r2, [r2, #24]
 8002f56:	0592      	lsls	r2, r2, #22
 8002f58:	d507      	bpl.n	8002f6a <FLASH_SetErrorCode+0x36>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8002f5a:	4923      	ldr	r1, [pc, #140]	@ (8002fe8 <FLASH_SetErrorCode+0xb4>)
 8002f5c:	694a      	ldr	r2, [r1, #20]
 8002f5e:	2001      	movs	r0, #1
 8002f60:	4302      	orrs	r2, r0
 8002f62:	614a      	str	r2, [r1, #20]
    flags |= FLASH_FLAG_PGAERR;
 8002f64:	2280      	movs	r2, #128	@ 0x80
 8002f66:	0092      	lsls	r2, r2, #2
 8002f68:	4313      	orrs	r3, r2
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 8002f6a:	4a1e      	ldr	r2, [pc, #120]	@ (8002fe4 <FLASH_SetErrorCode+0xb0>)
 8002f6c:	6992      	ldr	r2, [r2, #24]
 8002f6e:	0552      	lsls	r2, r2, #21
 8002f70:	d507      	bpl.n	8002f82 <FLASH_SetErrorCode+0x4e>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 8002f72:	491d      	ldr	r1, [pc, #116]	@ (8002fe8 <FLASH_SetErrorCode+0xb4>)
 8002f74:	694a      	ldr	r2, [r1, #20]
 8002f76:	2008      	movs	r0, #8
 8002f78:	4302      	orrs	r2, r0
 8002f7a:	614a      	str	r2, [r1, #20]
    flags |= FLASH_FLAG_SIZERR;
 8002f7c:	2280      	movs	r2, #128	@ 0x80
 8002f7e:	00d2      	lsls	r2, r2, #3
 8002f80:	4313      	orrs	r3, r2
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8002f82:	4a18      	ldr	r2, [pc, #96]	@ (8002fe4 <FLASH_SetErrorCode+0xb0>)
 8002f84:	6992      	ldr	r2, [r2, #24]
 8002f86:	0512      	lsls	r2, r2, #20
 8002f88:	d507      	bpl.n	8002f9a <FLASH_SetErrorCode+0x66>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8002f8a:	4917      	ldr	r1, [pc, #92]	@ (8002fe8 <FLASH_SetErrorCode+0xb4>)
 8002f8c:	694a      	ldr	r2, [r1, #20]
 8002f8e:	2004      	movs	r0, #4
 8002f90:	4302      	orrs	r2, r0
 8002f92:	614a      	str	r2, [r1, #20]
    flags |= FLASH_FLAG_OPTVERR;
 8002f94:	2280      	movs	r2, #128	@ 0x80
 8002f96:	0112      	lsls	r2, r2, #4
 8002f98:	4313      	orrs	r3, r2
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 8002f9a:	4a12      	ldr	r2, [pc, #72]	@ (8002fe4 <FLASH_SetErrorCode+0xb0>)
 8002f9c:	6992      	ldr	r2, [r2, #24]
 8002f9e:	0492      	lsls	r2, r2, #18
 8002fa0:	d507      	bpl.n	8002fb2 <FLASH_SetErrorCode+0x7e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8002fa2:	4911      	ldr	r1, [pc, #68]	@ (8002fe8 <FLASH_SetErrorCode+0xb4>)
 8002fa4:	694a      	ldr	r2, [r1, #20]
 8002fa6:	2010      	movs	r0, #16
 8002fa8:	4302      	orrs	r2, r0
 8002faa:	614a      	str	r2, [r1, #20]
    flags |= FLASH_FLAG_RDERR;
 8002fac:	2280      	movs	r2, #128	@ 0x80
 8002fae:	0192      	lsls	r2, r2, #6
 8002fb0:	4313      	orrs	r3, r2
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 8002fb2:	4a0c      	ldr	r2, [pc, #48]	@ (8002fe4 <FLASH_SetErrorCode+0xb0>)
 8002fb4:	6992      	ldr	r2, [r2, #24]
 8002fb6:	0392      	lsls	r2, r2, #14
 8002fb8:	d505      	bpl.n	8002fc6 <FLASH_SetErrorCode+0x92>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 8002fba:	480b      	ldr	r0, [pc, #44]	@ (8002fe8 <FLASH_SetErrorCode+0xb4>)
 8002fbc:	6942      	ldr	r2, [r0, #20]
 8002fbe:	2120      	movs	r1, #32
 8002fc0:	430a      	orrs	r2, r1
 8002fc2:	6142      	str	r2, [r0, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 8002fc4:	430b      	orrs	r3, r1
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 8002fc6:	4a07      	ldr	r2, [pc, #28]	@ (8002fe4 <FLASH_SetErrorCode+0xb0>)
 8002fc8:	6992      	ldr	r2, [r2, #24]
 8002fca:	03d2      	lsls	r2, r2, #15
 8002fcc:	d507      	bpl.n	8002fde <FLASH_SetErrorCode+0xaa>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 8002fce:	4906      	ldr	r1, [pc, #24]	@ (8002fe8 <FLASH_SetErrorCode+0xb4>)
 8002fd0:	694a      	ldr	r2, [r1, #20]
 8002fd2:	2040      	movs	r0, #64	@ 0x40
 8002fd4:	4302      	orrs	r2, r0
 8002fd6:	614a      	str	r2, [r1, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 8002fd8:	2280      	movs	r2, #128	@ 0x80
 8002fda:	0252      	lsls	r2, r2, #9
 8002fdc:	4313      	orrs	r3, r2
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002fde:	4a01      	ldr	r2, [pc, #4]	@ (8002fe4 <FLASH_SetErrorCode+0xb0>)
 8002fe0:	6193      	str	r3, [r2, #24]
}  
 8002fe2:	4770      	bx	lr
 8002fe4:	40022000 	.word	0x40022000
 8002fe8:	200014ec 	.word	0x200014ec

08002fec <FLASH_WaitForLastOperation>:
{
 8002fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fee:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002ff0:	f7ff fe4e 	bl	8002c90 <HAL_GetTick>
 8002ff4:	0007      	movs	r7, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002ff6:	4e1d      	ldr	r6, [pc, #116]	@ (800306c <FLASH_WaitForLastOperation+0x80>)
 8002ff8:	2501      	movs	r5, #1
 8002ffa:	69b3      	ldr	r3, [r6, #24]
 8002ffc:	421d      	tst	r5, r3
 8002ffe:	d00a      	beq.n	8003016 <FLASH_WaitForLastOperation+0x2a>
    if (Timeout != HAL_MAX_DELAY)
 8003000:	1c63      	adds	r3, r4, #1
 8003002:	d0fa      	beq.n	8002ffa <FLASH_WaitForLastOperation+0xe>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003004:	2c00      	cmp	r4, #0
 8003006:	d02e      	beq.n	8003066 <FLASH_WaitForLastOperation+0x7a>
 8003008:	f7ff fe42 	bl	8002c90 <HAL_GetTick>
 800300c:	1bc0      	subs	r0, r0, r7
 800300e:	42a0      	cmp	r0, r4
 8003010:	d9f3      	bls.n	8002ffa <FLASH_WaitForLastOperation+0xe>
        return HAL_TIMEOUT;
 8003012:	2003      	movs	r0, #3
 8003014:	e026      	b.n	8003064 <FLASH_WaitForLastOperation+0x78>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003016:	4b15      	ldr	r3, [pc, #84]	@ (800306c <FLASH_WaitForLastOperation+0x80>)
 8003018:	699b      	ldr	r3, [r3, #24]
 800301a:	079b      	lsls	r3, r3, #30
 800301c:	d502      	bpl.n	8003024 <FLASH_WaitForLastOperation+0x38>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800301e:	4b13      	ldr	r3, [pc, #76]	@ (800306c <FLASH_WaitForLastOperation+0x80>)
 8003020:	2202      	movs	r2, #2
 8003022:	619a      	str	r2, [r3, #24]
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8003024:	4b11      	ldr	r3, [pc, #68]	@ (800306c <FLASH_WaitForLastOperation+0x80>)
 8003026:	699b      	ldr	r3, [r3, #24]
 8003028:	05db      	lsls	r3, r3, #23
 800302a:	d418      	bmi.n	800305e <FLASH_WaitForLastOperation+0x72>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800302c:	4b0f      	ldr	r3, [pc, #60]	@ (800306c <FLASH_WaitForLastOperation+0x80>)
 800302e:	699b      	ldr	r3, [r3, #24]
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8003030:	059b      	lsls	r3, r3, #22
 8003032:	d414      	bmi.n	800305e <FLASH_WaitForLastOperation+0x72>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8003034:	4b0d      	ldr	r3, [pc, #52]	@ (800306c <FLASH_WaitForLastOperation+0x80>)
 8003036:	699b      	ldr	r3, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8003038:	055b      	lsls	r3, r3, #21
 800303a:	d410      	bmi.n	800305e <FLASH_WaitForLastOperation+0x72>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800303c:	4b0b      	ldr	r3, [pc, #44]	@ (800306c <FLASH_WaitForLastOperation+0x80>)
 800303e:	699b      	ldr	r3, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8003040:	051b      	lsls	r3, r3, #20
 8003042:	d40c      	bmi.n	800305e <FLASH_WaitForLastOperation+0x72>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8003044:	4b09      	ldr	r3, [pc, #36]	@ (800306c <FLASH_WaitForLastOperation+0x80>)
 8003046:	699b      	ldr	r3, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8003048:	049b      	lsls	r3, r3, #18
 800304a:	d408      	bmi.n	800305e <FLASH_WaitForLastOperation+0x72>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800304c:	4b07      	ldr	r3, [pc, #28]	@ (800306c <FLASH_WaitForLastOperation+0x80>)
 800304e:	699b      	ldr	r3, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8003050:	039b      	lsls	r3, r3, #14
 8003052:	d404      	bmi.n	800305e <FLASH_WaitForLastOperation+0x72>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 8003054:	4b05      	ldr	r3, [pc, #20]	@ (800306c <FLASH_WaitForLastOperation+0x80>)
 8003056:	699b      	ldr	r3, [r3, #24]
  return HAL_OK;
 8003058:	2000      	movs	r0, #0
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800305a:	03db      	lsls	r3, r3, #15
 800305c:	d502      	bpl.n	8003064 <FLASH_WaitForLastOperation+0x78>
    FLASH_SetErrorCode();
 800305e:	f7ff ff69 	bl	8002f34 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003062:	2001      	movs	r0, #1
}
 8003064:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8003066:	2003      	movs	r0, #3
 8003068:	e7fc      	b.n	8003064 <FLASH_WaitForLastOperation+0x78>
 800306a:	46c0      	nop			@ (mov r8, r8)
 800306c:	40022000 	.word	0x40022000

08003070 <HAL_FLASHEx_DATAEEPROM_Unlock>:
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 8003070:	4b09      	ldr	r3, [pc, #36]	@ (8003098 <HAL_FLASHEx_DATAEEPROM_Unlock+0x28>)
 8003072:	685b      	ldr	r3, [r3, #4]
    {
      return HAL_ERROR;
    }
  }

  return HAL_OK;  
 8003074:	2000      	movs	r0, #0
  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 8003076:	07db      	lsls	r3, r3, #31
 8003078:	d50c      	bpl.n	8003094 <HAL_FLASHEx_DATAEEPROM_Unlock+0x24>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800307a:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800307e:	b672      	cpsid	i
    FLASH->PEKEYR = FLASH_PEKEY1;
 8003080:	4b05      	ldr	r3, [pc, #20]	@ (8003098 <HAL_FLASHEx_DATAEEPROM_Unlock+0x28>)
 8003082:	4906      	ldr	r1, [pc, #24]	@ (800309c <HAL_FLASHEx_DATAEEPROM_Unlock+0x2c>)
 8003084:	60d9      	str	r1, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 8003086:	4906      	ldr	r1, [pc, #24]	@ (80030a0 <HAL_FLASHEx_DATAEEPROM_Unlock+0x30>)
 8003088:	60d9      	str	r1, [r3, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800308a:	f382 8810 	msr	PRIMASK, r2
    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	3001      	adds	r0, #1
 8003092:	4018      	ands	r0, r3
}
 8003094:	4770      	bx	lr
 8003096:	46c0      	nop			@ (mov r8, r8)
 8003098:	40022000 	.word	0x40022000
 800309c:	89abcdef 	.word	0x89abcdef
 80030a0:	02030405 	.word	0x02030405

080030a4 <HAL_FLASHEx_DATAEEPROM_Lock>:
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 80030a4:	4a03      	ldr	r2, [pc, #12]	@ (80030b4 <HAL_FLASHEx_DATAEEPROM_Lock+0x10>)
 80030a6:	6853      	ldr	r3, [r2, #4]
 80030a8:	2101      	movs	r1, #1
 80030aa:	430b      	orrs	r3, r1
 80030ac:	6053      	str	r3, [r2, #4]
  
  return HAL_OK;
}
 80030ae:	2000      	movs	r0, #0
 80030b0:	4770      	bx	lr
 80030b2:	46c0      	nop			@ (mov r8, r8)
 80030b4:	40022000 	.word	0x40022000

080030b8 <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect 
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t Address)
{
 80030b8:	b510      	push	{r4, lr}
 80030ba:	0004      	movs	r4, r0
  
  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80030bc:	4806      	ldr	r0, [pc, #24]	@ (80030d8 <HAL_FLASHEx_DATAEEPROM_Erase+0x20>)
 80030be:	f7ff ff95 	bl	8002fec <FLASH_WaitForLastOperation>
  
  if(status == HAL_OK)
 80030c2:	2800      	cmp	r0, #0
 80030c4:	d000      	beq.n	80030c8 <HAL_FLASHEx_DATAEEPROM_Erase+0x10>
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
  }
   
  /* Return the erase status */
  return status;
}  
 80030c6:	bd10      	pop	{r4, pc}
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80030c8:	4b04      	ldr	r3, [pc, #16]	@ (80030dc <HAL_FLASHEx_DATAEEPROM_Erase+0x24>)
 80030ca:	2200      	movs	r2, #0
 80030cc:	615a      	str	r2, [r3, #20]
      *(__IO uint32_t *) Address = 0x00000000U;
 80030ce:	6022      	str	r2, [r4, #0]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80030d0:	4801      	ldr	r0, [pc, #4]	@ (80030d8 <HAL_FLASHEx_DATAEEPROM_Erase+0x20>)
 80030d2:	f7ff ff8b 	bl	8002fec <FLASH_WaitForLastOperation>
 80030d6:	e7f6      	b.n	80030c6 <HAL_FLASHEx_DATAEEPROM_Erase+0xe>
 80030d8:	0000c350 	.word	0x0000c350
 80030dc:	200014ec 	.word	0x200014ec

080030e0 <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 80030e0:	b570      	push	{r4, r5, r6, lr}
 80030e2:	0006      	movs	r6, r0
 80030e4:	000d      	movs	r5, r1
 80030e6:	0014      	movs	r4, r2
  HAL_StatusTypeDef status = HAL_ERROR;
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80030e8:	4b12      	ldr	r3, [pc, #72]	@ (8003134 <HAL_FLASHEx_DATAEEPROM_Program+0x54>)
 80030ea:	7c1b      	ldrb	r3, [r3, #16]
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d01f      	beq.n	8003130 <HAL_FLASHEx_DATAEEPROM_Program+0x50>
 80030f0:	4b10      	ldr	r3, [pc, #64]	@ (8003134 <HAL_FLASHEx_DATAEEPROM_Program+0x54>)
 80030f2:	2201      	movs	r2, #1
 80030f4:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80030f6:	4810      	ldr	r0, [pc, #64]	@ (8003138 <HAL_FLASHEx_DATAEEPROM_Program+0x58>)
 80030f8:	f7ff ff78 	bl	8002fec <FLASH_WaitForLastOperation>
  
  if(status == HAL_OK)
 80030fc:	2800      	cmp	r0, #0
 80030fe:	d110      	bne.n	8003122 <HAL_FLASHEx_DATAEEPROM_Program+0x42>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003100:	4b0c      	ldr	r3, [pc, #48]	@ (8003134 <HAL_FLASHEx_DATAEEPROM_Program+0x54>)
 8003102:	2200      	movs	r2, #0
 8003104:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 8003106:	2e02      	cmp	r6, #2
 8003108:	d007      	beq.n	800311a <HAL_FLASHEx_DATAEEPROM_Program+0x3a>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 800310a:	2e01      	cmp	r6, #1
 800310c:	d00d      	beq.n	800312a <HAL_FLASHEx_DATAEEPROM_Program+0x4a>
      /* Program byte (8-bit) at a specified address.*/
      *(__IO uint8_t *)Address = (uint8_t) Data;
    }
    else
    {
      status = HAL_ERROR;
 800310e:	2001      	movs	r0, #1
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 8003110:	2e00      	cmp	r6, #0
 8003112:	d106      	bne.n	8003122 <HAL_FLASHEx_DATAEEPROM_Program+0x42>
      *(__IO uint8_t *)Address = (uint8_t) Data;
 8003114:	b2e4      	uxtb	r4, r4
 8003116:	702c      	strb	r4, [r5, #0]
 8003118:	e000      	b.n	800311c <HAL_FLASHEx_DATAEEPROM_Program+0x3c>
      *(__IO uint32_t *)Address = Data;
 800311a:	602c      	str	r4, [r5, #0]
    }

    if (status == HAL_OK)
    {
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800311c:	4806      	ldr	r0, [pc, #24]	@ (8003138 <HAL_FLASHEx_DATAEEPROM_Program+0x58>)
 800311e:	f7ff ff65 	bl	8002fec <FLASH_WaitForLastOperation>
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003122:	4b04      	ldr	r3, [pc, #16]	@ (8003134 <HAL_FLASHEx_DATAEEPROM_Program+0x54>)
 8003124:	2200      	movs	r2, #0
 8003126:	741a      	strb	r2, [r3, #16]

  return status;
}
 8003128:	bd70      	pop	{r4, r5, r6, pc}
      *(__IO uint16_t *)Address = (uint16_t) Data;
 800312a:	b2a4      	uxth	r4, r4
 800312c:	802c      	strh	r4, [r5, #0]
 800312e:	e7f5      	b.n	800311c <HAL_FLASHEx_DATAEEPROM_Program+0x3c>
  __HAL_LOCK(&pFlash);
 8003130:	2002      	movs	r0, #2
 8003132:	e7f9      	b.n	8003128 <HAL_FLASHEx_DATAEEPROM_Program+0x48>
 8003134:	200014ec 	.word	0x200014ec
 8003138:	0000c350 	.word	0x0000c350

0800313c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800313c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800313e:	46de      	mov	lr, fp
 8003140:	4657      	mov	r7, sl
 8003142:	464e      	mov	r6, r9
 8003144:	4645      	mov	r5, r8
 8003146:	b5e0      	push	{r5, r6, r7, lr}
 8003148:	b083      	sub	sp, #12
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800314a:	680f      	ldr	r7, [r1, #0]
 800314c:	2f00      	cmp	r7, #0
 800314e:	d100      	bne.n	8003152 <HAL_GPIO_Init+0x16>
 8003150:	e0c9      	b.n	80032e6 <HAL_GPIO_Init+0x1aa>
 8003152:	2200      	movs	r2, #0
  uint32_t position = 0x00U;
 8003154:	2300      	movs	r3, #0

    if (iocurrent)
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003156:	2403      	movs	r4, #3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003158:	4d66      	ldr	r5, [pc, #408]	@ (80032f4 <HAL_GPIO_Init+0x1b8>)
 800315a:	46ab      	mov	fp, r5
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800315c:	4d66      	ldr	r5, [pc, #408]	@ (80032f8 <HAL_GPIO_Init+0x1bc>)
 800315e:	46aa      	mov	sl, r5
 8003160:	e046      	b.n	80031f0 <HAL_GPIO_Init+0xb4>
        temp = GPIOx->OSPEEDR;
 8003162:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003164:	0025      	movs	r5, r4
 8003166:	4095      	lsls	r5, r2
 8003168:	43af      	bics	r7, r5
 800316a:	46b8      	mov	r8, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 800316c:	68cf      	ldr	r7, [r1, #12]
 800316e:	4097      	lsls	r7, r2
 8003170:	4645      	mov	r5, r8
 8003172:	432f      	orrs	r7, r5
        GPIOx->OSPEEDR = temp;
 8003174:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8003176:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003178:	43b7      	bics	r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800317a:	684e      	ldr	r6, [r1, #4]
 800317c:	0936      	lsrs	r6, r6, #4
 800317e:	2501      	movs	r5, #1
 8003180:	402e      	ands	r6, r5
 8003182:	409e      	lsls	r6, r3
 8003184:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 8003186:	6046      	str	r6, [r0, #4]
 8003188:	e03e      	b.n	8003208 <HAL_GPIO_Init+0xcc>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800318a:	2600      	movs	r6, #0
 800318c:	464d      	mov	r5, r9
 800318e:	40ae      	lsls	r6, r5
 8003190:	4645      	mov	r5, r8
 8003192:	432e      	orrs	r6, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003194:	60be      	str	r6, [r7, #8]
        temp = EXTI->RTSR;
 8003196:	4655      	mov	r5, sl
 8003198:	68ad      	ldr	r5, [r5, #8]
 800319a:	46a9      	mov	r9, r5
        temp &= ~((uint32_t)iocurrent);
 800319c:	4665      	mov	r5, ip
 800319e:	43ef      	mvns	r7, r5
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031a0:	684d      	ldr	r5, [r1, #4]
 80031a2:	2680      	movs	r6, #128	@ 0x80
 80031a4:	0376      	lsls	r6, r6, #13
 80031a6:	4235      	tst	r5, r6
 80031a8:	d000      	beq.n	80031ac <HAL_GPIO_Init+0x70>
 80031aa:	e08e      	b.n	80032ca <HAL_GPIO_Init+0x18e>
        temp &= ~((uint32_t)iocurrent);
 80031ac:	464e      	mov	r6, r9
 80031ae:	403e      	ands	r6, r7
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 80031b0:	4655      	mov	r5, sl
 80031b2:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR;
 80031b4:	68ee      	ldr	r6, [r5, #12]
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031b6:	684d      	ldr	r5, [r1, #4]
 80031b8:	02ad      	lsls	r5, r5, #10
 80031ba:	d500      	bpl.n	80031be <HAL_GPIO_Init+0x82>
 80031bc:	e089      	b.n	80032d2 <HAL_GPIO_Init+0x196>
        temp &= ~((uint32_t)iocurrent);
 80031be:	403e      	ands	r6, r7
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 80031c0:	4655      	mov	r5, sl
 80031c2:	60ee      	str	r6, [r5, #12]

        temp = EXTI->EMR;
 80031c4:	686e      	ldr	r6, [r5, #4]
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031c6:	684d      	ldr	r5, [r1, #4]
 80031c8:	03ad      	lsls	r5, r5, #14
 80031ca:	d500      	bpl.n	80031ce <HAL_GPIO_Init+0x92>
 80031cc:	e084      	b.n	80032d8 <HAL_GPIO_Init+0x19c>
        temp &= ~((uint32_t)iocurrent);
 80031ce:	403e      	ands	r6, r7
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 80031d0:	4655      	mov	r5, sl
 80031d2:	606e      	str	r6, [r5, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031d4:	682e      	ldr	r6, [r5, #0]
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031d6:	684d      	ldr	r5, [r1, #4]
 80031d8:	03ed      	lsls	r5, r5, #15
 80031da:	d500      	bpl.n	80031de <HAL_GPIO_Init+0xa2>
 80031dc:	e07f      	b.n	80032de <HAL_GPIO_Init+0x1a2>
        temp &= ~((uint32_t)iocurrent);
 80031de:	403e      	ands	r6, r7
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 80031e0:	4655      	mov	r5, sl
 80031e2:	602e      	str	r6, [r5, #0]
      }
    }
    position++;
 80031e4:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0)
 80031e6:	680f      	ldr	r7, [r1, #0]
 80031e8:	3202      	adds	r2, #2
 80031ea:	003e      	movs	r6, r7
 80031ec:	40de      	lsrs	r6, r3
 80031ee:	d07a      	beq.n	80032e6 <HAL_GPIO_Init+0x1aa>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80031f0:	2601      	movs	r6, #1
 80031f2:	409e      	lsls	r6, r3
 80031f4:	003d      	movs	r5, r7
 80031f6:	4035      	ands	r5, r6
 80031f8:	46ac      	mov	ip, r5
    if (iocurrent)
 80031fa:	4237      	tst	r7, r6
 80031fc:	d0f2      	beq.n	80031e4 <HAL_GPIO_Init+0xa8>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80031fe:	684f      	ldr	r7, [r1, #4]
 8003200:	4027      	ands	r7, r4
 8003202:	3f01      	subs	r7, #1
 8003204:	2f01      	cmp	r7, #1
 8003206:	d9ac      	bls.n	8003162 <HAL_GPIO_Init+0x26>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003208:	684e      	ldr	r6, [r1, #4]
 800320a:	4026      	ands	r6, r4
 800320c:	2e03      	cmp	r6, #3
 800320e:	d022      	beq.n	8003256 <HAL_GPIO_Init+0x11a>
        temp = GPIOx->PUPDR;
 8003210:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003212:	0026      	movs	r6, r4
 8003214:	4096      	lsls	r6, r2
 8003216:	43b7      	bics	r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003218:	688e      	ldr	r6, [r1, #8]
 800321a:	4096      	lsls	r6, r2
 800321c:	433e      	orrs	r6, r7
        GPIOx->PUPDR = temp;
 800321e:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003220:	684e      	ldr	r6, [r1, #4]
 8003222:	4026      	ands	r6, r4
 8003224:	2e02      	cmp	r6, #2
 8003226:	d116      	bne.n	8003256 <HAL_GPIO_Init+0x11a>
        temp = GPIOx->AFR[position >> 3U];
 8003228:	08de      	lsrs	r6, r3, #3
 800322a:	00b6      	lsls	r6, r6, #2
 800322c:	1985      	adds	r5, r0, r6
 800322e:	9501      	str	r5, [sp, #4]
 8003230:	6a2d      	ldr	r5, [r5, #32]
 8003232:	46a9      	mov	r9, r5
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8003234:	2707      	movs	r7, #7
 8003236:	401f      	ands	r7, r3
 8003238:	00bf      	lsls	r7, r7, #2
 800323a:	250f      	movs	r5, #15
 800323c:	40bd      	lsls	r5, r7
 800323e:	46a8      	mov	r8, r5
 8003240:	464d      	mov	r5, r9
 8003242:	4646      	mov	r6, r8
 8003244:	43b5      	bics	r5, r6
 8003246:	46a9      	mov	r9, r5
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8003248:	690d      	ldr	r5, [r1, #16]
 800324a:	40bd      	lsls	r5, r7
 800324c:	002f      	movs	r7, r5
 800324e:	464d      	mov	r5, r9
 8003250:	432f      	orrs	r7, r5
        GPIOx->AFR[position >> 3U] = temp;
 8003252:	9d01      	ldr	r5, [sp, #4]
 8003254:	622f      	str	r7, [r5, #32]
      temp = GPIOx->MODER;
 8003256:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003258:	0026      	movs	r6, r4
 800325a:	4096      	lsls	r6, r2
 800325c:	43b7      	bics	r7, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800325e:	684e      	ldr	r6, [r1, #4]
 8003260:	4026      	ands	r6, r4
 8003262:	4096      	lsls	r6, r2
 8003264:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 8003266:	6006      	str	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003268:	684e      	ldr	r6, [r1, #4]
 800326a:	25c0      	movs	r5, #192	@ 0xc0
 800326c:	02ad      	lsls	r5, r5, #10
 800326e:	422e      	tst	r6, r5
 8003270:	d0b8      	beq.n	80031e4 <HAL_GPIO_Init+0xa8>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003272:	465d      	mov	r5, fp
 8003274:	6b6e      	ldr	r6, [r5, #52]	@ 0x34
 8003276:	2501      	movs	r5, #1
 8003278:	432e      	orrs	r6, r5
 800327a:	465d      	mov	r5, fp
 800327c:	636e      	str	r6, [r5, #52]	@ 0x34
        temp = SYSCFG->EXTICR[position >> 2U];
 800327e:	089f      	lsrs	r7, r3, #2
 8003280:	00bf      	lsls	r7, r7, #2
 8003282:	4d1e      	ldr	r5, [pc, #120]	@ (80032fc <HAL_GPIO_Init+0x1c0>)
 8003284:	46a8      	mov	r8, r5
 8003286:	4447      	add	r7, r8
 8003288:	68bd      	ldr	r5, [r7, #8]
 800328a:	9501      	str	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800328c:	0025      	movs	r5, r4
 800328e:	401d      	ands	r5, r3
 8003290:	00ad      	lsls	r5, r5, #2
 8003292:	46a9      	mov	r9, r5
 8003294:	250f      	movs	r5, #15
 8003296:	464e      	mov	r6, r9
 8003298:	40b5      	lsls	r5, r6
 800329a:	9e01      	ldr	r6, [sp, #4]
 800329c:	43ae      	bics	r6, r5
 800329e:	46b0      	mov	r8, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80032a0:	25a0      	movs	r5, #160	@ 0xa0
 80032a2:	05ed      	lsls	r5, r5, #23
 80032a4:	42a8      	cmp	r0, r5
 80032a6:	d100      	bne.n	80032aa <HAL_GPIO_Init+0x16e>
 80032a8:	e76f      	b.n	800318a <HAL_GPIO_Init+0x4e>
 80032aa:	4e15      	ldr	r6, [pc, #84]	@ (8003300 <HAL_GPIO_Init+0x1c4>)
 80032ac:	42b0      	cmp	r0, r6
 80032ae:	d008      	beq.n	80032c2 <HAL_GPIO_Init+0x186>
 80032b0:	4e14      	ldr	r6, [pc, #80]	@ (8003304 <HAL_GPIO_Init+0x1c8>)
 80032b2:	42b0      	cmp	r0, r6
 80032b4:	d007      	beq.n	80032c6 <HAL_GPIO_Init+0x18a>
 80032b6:	4d14      	ldr	r5, [pc, #80]	@ (8003308 <HAL_GPIO_Init+0x1cc>)
 80032b8:	1946      	adds	r6, r0, r5
 80032ba:	1e75      	subs	r5, r6, #1
 80032bc:	41ae      	sbcs	r6, r5
 80032be:	3605      	adds	r6, #5
 80032c0:	e764      	b.n	800318c <HAL_GPIO_Init+0x50>
 80032c2:	2601      	movs	r6, #1
 80032c4:	e762      	b.n	800318c <HAL_GPIO_Init+0x50>
 80032c6:	2602      	movs	r6, #2
 80032c8:	e760      	b.n	800318c <HAL_GPIO_Init+0x50>
          temp |= iocurrent;
 80032ca:	4665      	mov	r5, ip
 80032cc:	464e      	mov	r6, r9
 80032ce:	432e      	orrs	r6, r5
 80032d0:	e76e      	b.n	80031b0 <HAL_GPIO_Init+0x74>
          temp |= iocurrent;
 80032d2:	4665      	mov	r5, ip
 80032d4:	432e      	orrs	r6, r5
 80032d6:	e773      	b.n	80031c0 <HAL_GPIO_Init+0x84>
          temp |= iocurrent;
 80032d8:	4665      	mov	r5, ip
 80032da:	432e      	orrs	r6, r5
 80032dc:	e778      	b.n	80031d0 <HAL_GPIO_Init+0x94>
          temp |= iocurrent;
 80032de:	4665      	mov	r5, ip
 80032e0:	4335      	orrs	r5, r6
 80032e2:	002e      	movs	r6, r5
 80032e4:	e77c      	b.n	80031e0 <HAL_GPIO_Init+0xa4>
  }
}
 80032e6:	b003      	add	sp, #12
 80032e8:	bcf0      	pop	{r4, r5, r6, r7}
 80032ea:	46bb      	mov	fp, r7
 80032ec:	46b2      	mov	sl, r6
 80032ee:	46a9      	mov	r9, r5
 80032f0:	46a0      	mov	r8, r4
 80032f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032f4:	40021000 	.word	0x40021000
 80032f8:	40010400 	.word	0x40010400
 80032fc:	40010000 	.word	0x40010000
 8003300:	50000400 	.word	0x50000400
 8003304:	50000800 	.word	0x50000800
 8003308:	afffe400 	.word	0xafffe400

0800330c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800330c:	6900      	ldr	r0, [r0, #16]
 800330e:	4008      	ands	r0, r1
 8003310:	1e43      	subs	r3, r0, #1
 8003312:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8003314:	b2c0      	uxtb	r0, r0
}
 8003316:	4770      	bx	lr

08003318 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003318:	2a00      	cmp	r2, #0
 800331a:	d001      	beq.n	8003320 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 800331c:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800331e:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 8003320:	6281      	str	r1, [r0, #40]	@ 0x28
}
 8003322:	e7fc      	b.n	800331e <HAL_GPIO_WritePin+0x6>

08003324 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003324:	6942      	ldr	r2, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003326:	0013      	movs	r3, r2
 8003328:	400b      	ands	r3, r1
 800332a:	041b      	lsls	r3, r3, #16
 800332c:	4391      	bics	r1, r2
 800332e:	430b      	orrs	r3, r1
 8003330:	6183      	str	r3, [r0, #24]
}
 8003332:	4770      	bx	lr

08003334 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003334:	6802      	ldr	r2, [r0, #0]
 8003336:	6993      	ldr	r3, [r2, #24]
 8003338:	079b      	lsls	r3, r3, #30
 800333a:	d501      	bpl.n	8003340 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 800333c:	2300      	movs	r3, #0
 800333e:	6293      	str	r3, [r2, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003340:	6803      	ldr	r3, [r0, #0]
 8003342:	699a      	ldr	r2, [r3, #24]
 8003344:	07d2      	lsls	r2, r2, #31
 8003346:	d403      	bmi.n	8003350 <I2C_Flush_TXDR+0x1c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003348:	699a      	ldr	r2, [r3, #24]
 800334a:	2101      	movs	r1, #1
 800334c:	430a      	orrs	r2, r1
 800334e:	619a      	str	r2, [r3, #24]
  }
}
 8003350:	4770      	bx	lr
	...

08003354 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003354:	b530      	push	{r4, r5, lr}
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003356:	6800      	ldr	r0, [r0, #0]
 8003358:	6844      	ldr	r4, [r0, #4]
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800335a:	0412      	lsls	r2, r2, #16
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800335c:	9d03      	ldr	r5, [sp, #12]
 800335e:	432b      	orrs	r3, r5
 8003360:	431a      	orrs	r2, r3
 8003362:	0589      	lsls	r1, r1, #22
 8003364:	0d89      	lsrs	r1, r1, #22
 8003366:	430a      	orrs	r2, r1
 8003368:	0052      	lsls	r2, r2, #1
 800336a:	0852      	lsrs	r2, r2, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 800336c:	0d6b      	lsrs	r3, r5, #21
 800336e:	2180      	movs	r1, #128	@ 0x80
 8003370:	00c9      	lsls	r1, r1, #3
 8003372:	400b      	ands	r3, r1
 8003374:	4902      	ldr	r1, [pc, #8]	@ (8003380 <I2C_TransferConfig+0x2c>)
 8003376:	430b      	orrs	r3, r1
 8003378:	439c      	bics	r4, r3
 800337a:	4322      	orrs	r2, r4
 800337c:	6042      	str	r2, [r0, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800337e:	bd30      	pop	{r4, r5, pc}
 8003380:	03ff63ff 	.word	0x03ff63ff

08003384 <I2C_IsErrorOccurred>:
{
 8003384:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003386:	46d6      	mov	lr, sl
 8003388:	464f      	mov	r7, r9
 800338a:	4646      	mov	r6, r8
 800338c:	b5c0      	push	{r6, r7, lr}
 800338e:	0004      	movs	r4, r0
 8003390:	000d      	movs	r5, r1
 8003392:	4690      	mov	r8, r2
  uint32_t itflag   = hi2c->Instance->ISR;
 8003394:	6801      	ldr	r1, [r0, #0]
 8003396:	698b      	ldr	r3, [r1, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003398:	2210      	movs	r2, #16
 800339a:	0016      	movs	r6, r2
 800339c:	401e      	ands	r6, r3
  HAL_StatusTypeDef status = HAL_OK;
 800339e:	2000      	movs	r0, #0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80033a0:	421a      	tst	r2, r3
 80033a2:	d044      	beq.n	800342e <I2C_IsErrorOccurred+0xaa>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033a4:	2310      	movs	r3, #16
 80033a6:	61cb      	str	r3, [r1, #28]
  uint32_t error_code = 0;
 80033a8:	2300      	movs	r3, #0
 80033aa:	4699      	mov	r9, r3
  HAL_StatusTypeDef status = HAL_OK;
 80033ac:	2600      	movs	r6, #0
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80033ae:	2720      	movs	r7, #32
 80033b0:	6821      	ldr	r1, [r4, #0]
 80033b2:	698b      	ldr	r3, [r1, #24]
 80033b4:	421f      	tst	r7, r3
 80033b6:	d131      	bne.n	800341c <I2C_IsErrorOccurred+0x98>
 80033b8:	2e00      	cmp	r6, #0
 80033ba:	d133      	bne.n	8003424 <I2C_IsErrorOccurred+0xa0>
      if (Timeout != HAL_MAX_DELAY)
 80033bc:	1c6b      	adds	r3, r5, #1
 80033be:	d0f8      	beq.n	80033b2 <I2C_IsErrorOccurred+0x2e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80033c0:	f7ff fc66 	bl	8002c90 <HAL_GetTick>
 80033c4:	4643      	mov	r3, r8
 80033c6:	1ac0      	subs	r0, r0, r3
 80033c8:	42a8      	cmp	r0, r5
 80033ca:	d801      	bhi.n	80033d0 <I2C_IsErrorOccurred+0x4c>
 80033cc:	2d00      	cmp	r5, #0
 80033ce:	d1ef      	bne.n	80033b0 <I2C_IsErrorOccurred+0x2c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80033d0:	6822      	ldr	r2, [r4, #0]
 80033d2:	6850      	ldr	r0, [r2, #4]
          tmp2 = hi2c->Mode;
 80033d4:	2342      	movs	r3, #66	@ 0x42
 80033d6:	5ce3      	ldrb	r3, [r4, r3]
 80033d8:	b2db      	uxtb	r3, r3
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80033da:	6991      	ldr	r1, [r2, #24]
 80033dc:	0409      	lsls	r1, r1, #16
 80033de:	d503      	bpl.n	80033e8 <I2C_IsErrorOccurred+0x64>
 80033e0:	0440      	lsls	r0, r0, #17
 80033e2:	d401      	bmi.n	80033e8 <I2C_IsErrorOccurred+0x64>
              (tmp1 != I2C_CR2_STOP) && \
 80033e4:	2b20      	cmp	r3, #32
 80033e6:	d110      	bne.n	800340a <I2C_IsErrorOccurred+0x86>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033e8:	2320      	movs	r3, #32
 80033ea:	469a      	mov	sl, r3
 80033ec:	6823      	ldr	r3, [r4, #0]
 80033ee:	699b      	ldr	r3, [r3, #24]
 80033f0:	4652      	mov	r2, sl
 80033f2:	421a      	tst	r2, r3
 80033f4:	d1dc      	bne.n	80033b0 <I2C_IsErrorOccurred+0x2c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80033f6:	f7ff fc4b 	bl	8002c90 <HAL_GetTick>
 80033fa:	4643      	mov	r3, r8
 80033fc:	1ac0      	subs	r0, r0, r3
 80033fe:	2819      	cmp	r0, #25
 8003400:	d9f4      	bls.n	80033ec <I2C_IsErrorOccurred+0x68>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003402:	2320      	movs	r3, #32
 8003404:	4699      	mov	r9, r3
              status = HAL_ERROR;
 8003406:	2601      	movs	r6, #1
 8003408:	e7d2      	b.n	80033b0 <I2C_IsErrorOccurred+0x2c>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800340a:	6851      	ldr	r1, [r2, #4]
 800340c:	2380      	movs	r3, #128	@ 0x80
 800340e:	01db      	lsls	r3, r3, #7
 8003410:	430b      	orrs	r3, r1
 8003412:	6053      	str	r3, [r2, #4]
            tickstart = HAL_GetTick();
 8003414:	f7ff fc3c 	bl	8002c90 <HAL_GetTick>
 8003418:	4680      	mov	r8, r0
 800341a:	e7e5      	b.n	80033e8 <I2C_IsErrorOccurred+0x64>
    if (status == HAL_OK)
 800341c:	2e00      	cmp	r6, #0
 800341e:	d101      	bne.n	8003424 <I2C_IsErrorOccurred+0xa0>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003420:	2320      	movs	r3, #32
 8003422:	61cb      	str	r3, [r1, #28]
    error_code |= HAL_I2C_ERROR_AF;
 8003424:	2604      	movs	r6, #4
 8003426:	464b      	mov	r3, r9
 8003428:	4333      	orrs	r3, r6
 800342a:	001e      	movs	r6, r3
    status = HAL_ERROR;
 800342c:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 800342e:	6822      	ldr	r2, [r4, #0]
 8003430:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003432:	05d9      	lsls	r1, r3, #23
 8003434:	d504      	bpl.n	8003440 <I2C_IsErrorOccurred+0xbc>
    error_code |= HAL_I2C_ERROR_BERR;
 8003436:	2101      	movs	r1, #1
 8003438:	430e      	orrs	r6, r1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800343a:	31ff      	adds	r1, #255	@ 0xff
 800343c:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 800343e:	2001      	movs	r0, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003440:	055a      	lsls	r2, r3, #21
 8003442:	d526      	bpl.n	8003492 <I2C_IsErrorOccurred+0x10e>
    error_code |= HAL_I2C_ERROR_OVR;
 8003444:	2208      	movs	r2, #8
 8003446:	4316      	orrs	r6, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003448:	6822      	ldr	r2, [r4, #0]
 800344a:	2180      	movs	r1, #128	@ 0x80
 800344c:	00c9      	lsls	r1, r1, #3
 800344e:	61d1      	str	r1, [r2, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003450:	059b      	lsls	r3, r3, #22
 8003452:	d505      	bpl.n	8003460 <I2C_IsErrorOccurred+0xdc>
    error_code |= HAL_I2C_ERROR_ARLO;
 8003454:	2302      	movs	r3, #2
 8003456:	431e      	orrs	r6, r3
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003458:	6823      	ldr	r3, [r4, #0]
 800345a:	2280      	movs	r2, #128	@ 0x80
 800345c:	0092      	lsls	r2, r2, #2
 800345e:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8003460:	0020      	movs	r0, r4
 8003462:	f7ff ff67 	bl	8003334 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8003466:	6822      	ldr	r2, [r4, #0]
 8003468:	6853      	ldr	r3, [r2, #4]
 800346a:	490c      	ldr	r1, [pc, #48]	@ (800349c <I2C_IsErrorOccurred+0x118>)
 800346c:	400b      	ands	r3, r1
 800346e:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 8003470:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8003472:	4333      	orrs	r3, r6
 8003474:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003476:	2341      	movs	r3, #65	@ 0x41
 8003478:	2220      	movs	r2, #32
 800347a:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800347c:	2300      	movs	r3, #0
 800347e:	3222      	adds	r2, #34	@ 0x22
 8003480:	54a3      	strb	r3, [r4, r2]
    __HAL_UNLOCK(hi2c);
 8003482:	3a02      	subs	r2, #2
 8003484:	54a3      	strb	r3, [r4, r2]
 8003486:	2001      	movs	r0, #1
}
 8003488:	bce0      	pop	{r5, r6, r7}
 800348a:	46ba      	mov	sl, r7
 800348c:	46b1      	mov	r9, r6
 800348e:	46a8      	mov	r8, r5
 8003490:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003492:	059b      	lsls	r3, r3, #22
 8003494:	d4de      	bmi.n	8003454 <I2C_IsErrorOccurred+0xd0>
  if (status != HAL_OK)
 8003496:	2800      	cmp	r0, #0
 8003498:	d0f6      	beq.n	8003488 <I2C_IsErrorOccurred+0x104>
 800349a:	e7e1      	b.n	8003460 <I2C_IsErrorOccurred+0xdc>
 800349c:	fe00e800 	.word	0xfe00e800

080034a0 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80034a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034a2:	0004      	movs	r4, r0
 80034a4:	000d      	movs	r5, r1
 80034a6:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80034a8:	2702      	movs	r7, #2
 80034aa:	6823      	ldr	r3, [r4, #0]
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	421f      	tst	r7, r3
 80034b0:	d120      	bne.n	80034f4 <I2C_WaitOnTXISFlagUntilTimeout+0x54>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80034b2:	0032      	movs	r2, r6
 80034b4:	0029      	movs	r1, r5
 80034b6:	0020      	movs	r0, r4
 80034b8:	f7ff ff64 	bl	8003384 <I2C_IsErrorOccurred>
 80034bc:	2800      	cmp	r0, #0
 80034be:	d11b      	bne.n	80034f8 <I2C_WaitOnTXISFlagUntilTimeout+0x58>
    if (Timeout != HAL_MAX_DELAY)
 80034c0:	1c6b      	adds	r3, r5, #1
 80034c2:	d0f2      	beq.n	80034aa <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034c4:	f7ff fbe4 	bl	8002c90 <HAL_GetTick>
 80034c8:	1b80      	subs	r0, r0, r6
 80034ca:	42a8      	cmp	r0, r5
 80034cc:	d801      	bhi.n	80034d2 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 80034ce:	2d00      	cmp	r5, #0
 80034d0:	d1eb      	bne.n	80034aa <I2C_WaitOnTXISFlagUntilTimeout+0xa>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80034d2:	6823      	ldr	r3, [r4, #0]
 80034d4:	699b      	ldr	r3, [r3, #24]
 80034d6:	079b      	lsls	r3, r3, #30
 80034d8:	d4e7      	bmi.n	80034aa <I2C_WaitOnTXISFlagUntilTimeout+0xa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034da:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80034dc:	2220      	movs	r2, #32
 80034de:	4313      	orrs	r3, r2
 80034e0:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80034e2:	2341      	movs	r3, #65	@ 0x41
 80034e4:	54e2      	strb	r2, [r4, r3]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80034e6:	2300      	movs	r3, #0
 80034e8:	3222      	adds	r2, #34	@ 0x22
 80034ea:	54a3      	strb	r3, [r4, r2]
          __HAL_UNLOCK(hi2c);
 80034ec:	3a02      	subs	r2, #2
 80034ee:	54a3      	strb	r3, [r4, r2]
          return HAL_ERROR;
 80034f0:	2001      	movs	r0, #1
 80034f2:	e000      	b.n	80034f6 <I2C_WaitOnTXISFlagUntilTimeout+0x56>
  return HAL_OK;
 80034f4:	2000      	movs	r0, #0
}
 80034f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 80034f8:	2001      	movs	r0, #1
 80034fa:	e7fc      	b.n	80034f6 <I2C_WaitOnTXISFlagUntilTimeout+0x56>

080034fc <I2C_WaitOnFlagUntilTimeout>:
{
 80034fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034fe:	46c6      	mov	lr, r8
 8003500:	b500      	push	{lr}
 8003502:	b082      	sub	sp, #8
 8003504:	4680      	mov	r8, r0
 8003506:	000e      	movs	r6, r1
 8003508:	0017      	movs	r7, r2
 800350a:	001d      	movs	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800350c:	9201      	str	r2, [sp, #4]
 800350e:	4643      	mov	r3, r8
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	699c      	ldr	r4, [r3, #24]
 8003514:	4034      	ands	r4, r6
 8003516:	1ba4      	subs	r4, r4, r6
 8003518:	4262      	negs	r2, r4
 800351a:	4154      	adcs	r4, r2
 800351c:	42bc      	cmp	r4, r7
 800351e:	d122      	bne.n	8003566 <I2C_WaitOnFlagUntilTimeout+0x6a>
    if (Timeout != HAL_MAX_DELAY)
 8003520:	1c6a      	adds	r2, r5, #1
 8003522:	d0f6      	beq.n	8003512 <I2C_WaitOnFlagUntilTimeout+0x16>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003524:	f7ff fbb4 	bl	8002c90 <HAL_GetTick>
 8003528:	9b08      	ldr	r3, [sp, #32]
 800352a:	1ac0      	subs	r0, r0, r3
 800352c:	42a8      	cmp	r0, r5
 800352e:	d801      	bhi.n	8003534 <I2C_WaitOnFlagUntilTimeout+0x38>
 8003530:	2d00      	cmp	r5, #0
 8003532:	d1ec      	bne.n	800350e <I2C_WaitOnFlagUntilTimeout+0x12>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003534:	4643      	mov	r3, r8
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	4033      	ands	r3, r6
 800353c:	1b9b      	subs	r3, r3, r6
 800353e:	425a      	negs	r2, r3
 8003540:	4153      	adcs	r3, r2
 8003542:	9a01      	ldr	r2, [sp, #4]
 8003544:	4293      	cmp	r3, r2
 8003546:	d1e2      	bne.n	800350e <I2C_WaitOnFlagUntilTimeout+0x12>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003548:	4643      	mov	r3, r8
 800354a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800354c:	2220      	movs	r2, #32
 800354e:	4313      	orrs	r3, r2
 8003550:	4641      	mov	r1, r8
 8003552:	644b      	str	r3, [r1, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003554:	2341      	movs	r3, #65	@ 0x41
 8003556:	54ca      	strb	r2, [r1, r3]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003558:	2300      	movs	r3, #0
 800355a:	3222      	adds	r2, #34	@ 0x22
 800355c:	548b      	strb	r3, [r1, r2]
          __HAL_UNLOCK(hi2c);
 800355e:	3a02      	subs	r2, #2
 8003560:	548b      	strb	r3, [r1, r2]
          return HAL_ERROR;
 8003562:	2001      	movs	r0, #1
 8003564:	e000      	b.n	8003568 <I2C_WaitOnFlagUntilTimeout+0x6c>
  return HAL_OK;
 8003566:	2000      	movs	r0, #0
}
 8003568:	b002      	add	sp, #8
 800356a:	bc80      	pop	{r7}
 800356c:	46b8      	mov	r8, r7
 800356e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003570 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8003570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003572:	46c6      	mov	lr, r8
 8003574:	b500      	push	{lr}
 8003576:	0005      	movs	r5, r0
 8003578:	000e      	movs	r6, r1
 800357a:	0017      	movs	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800357c:	6803      	ldr	r3, [r0, #0]
 800357e:	699b      	ldr	r3, [r3, #24]
 8003580:	069b      	lsls	r3, r3, #26
 8003582:	d428      	bmi.n	80035d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x66>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003584:	2320      	movs	r3, #32
 8003586:	4698      	mov	r8, r3
 8003588:	e009      	b.n	800359e <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 800358a:	682b      	ldr	r3, [r5, #0]
 800358c:	699b      	ldr	r3, [r3, #24]
 800358e:	4642      	mov	r2, r8
 8003590:	421a      	tst	r2, r3
 8003592:	d013      	beq.n	80035bc <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003594:	682b      	ldr	r3, [r5, #0]
 8003596:	699b      	ldr	r3, [r3, #24]
 8003598:	4642      	mov	r2, r8
 800359a:	421a      	tst	r2, r3
 800359c:	d11e      	bne.n	80035dc <I2C_WaitOnSTOPFlagUntilTimeout+0x6c>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800359e:	003a      	movs	r2, r7
 80035a0:	0031      	movs	r1, r6
 80035a2:	0028      	movs	r0, r5
 80035a4:	f7ff feee 	bl	8003384 <I2C_IsErrorOccurred>
 80035a8:	1e04      	subs	r4, r0, #0
 80035aa:	d116      	bne.n	80035da <I2C_WaitOnSTOPFlagUntilTimeout+0x6a>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035ac:	f7ff fb70 	bl	8002c90 <HAL_GetTick>
 80035b0:	1bc0      	subs	r0, r0, r7
 80035b2:	42b0      	cmp	r0, r6
 80035b4:	d8e9      	bhi.n	800358a <I2C_WaitOnSTOPFlagUntilTimeout+0x1a>
 80035b6:	2e00      	cmp	r6, #0
 80035b8:	d1ec      	bne.n	8003594 <I2C_WaitOnSTOPFlagUntilTimeout+0x24>
 80035ba:	e7e6      	b.n	800358a <I2C_WaitOnSTOPFlagUntilTimeout+0x1a>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035bc:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 80035be:	2220      	movs	r2, #32
 80035c0:	4313      	orrs	r3, r2
 80035c2:	646b      	str	r3, [r5, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80035c4:	2341      	movs	r3, #65	@ 0x41
 80035c6:	54ea      	strb	r2, [r5, r3]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035c8:	2300      	movs	r3, #0
 80035ca:	3222      	adds	r2, #34	@ 0x22
 80035cc:	54ab      	strb	r3, [r5, r2]
        __HAL_UNLOCK(hi2c);
 80035ce:	3a02      	subs	r2, #2
 80035d0:	54ab      	strb	r3, [r5, r2]
        return HAL_ERROR;
 80035d2:	2401      	movs	r4, #1
 80035d4:	e002      	b.n	80035dc <I2C_WaitOnSTOPFlagUntilTimeout+0x6c>
  return HAL_OK;
 80035d6:	2400      	movs	r4, #0
 80035d8:	e000      	b.n	80035dc <I2C_WaitOnSTOPFlagUntilTimeout+0x6c>
      return HAL_ERROR;
 80035da:	2401      	movs	r4, #1
}
 80035dc:	0020      	movs	r0, r4
 80035de:	bc80      	pop	{r7}
 80035e0:	46b8      	mov	r8, r7
 80035e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080035e4 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 80035e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035e6:	46ce      	mov	lr, r9
 80035e8:	4647      	mov	r7, r8
 80035ea:	b580      	push	{r7, lr}
 80035ec:	0004      	movs	r4, r0
 80035ee:	000e      	movs	r6, r1
 80035f0:	0017      	movs	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80035f2:	6803      	ldr	r3, [r0, #0]
 80035f4:	699b      	ldr	r3, [r3, #24]
 80035f6:	075b      	lsls	r3, r3, #29
 80035f8:	d44e      	bmi.n	8003698 <I2C_WaitOnRXNEFlagUntilTimeout+0xb4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80035fa:	2320      	movs	r3, #32
 80035fc:	4699      	mov	r9, r3
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80035fe:	3b1c      	subs	r3, #28
 8003600:	4698      	mov	r8, r3
 8003602:	e02a      	b.n	800365a <I2C_WaitOnRXNEFlagUntilTimeout+0x76>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003604:	699a      	ldr	r2, [r3, #24]
 8003606:	0752      	lsls	r2, r2, #29
 8003608:	d502      	bpl.n	8003610 <I2C_WaitOnRXNEFlagUntilTimeout+0x2c>
 800360a:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 800360c:	2a00      	cmp	r2, #0
 800360e:	d146      	bne.n	800369e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003610:	699a      	ldr	r2, [r3, #24]
 8003612:	06d2      	lsls	r2, r2, #27
 8003614:	d514      	bpl.n	8003640 <I2C_WaitOnRXNEFlagUntilTimeout+0x5c>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003616:	2210      	movs	r2, #16
 8003618:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800361a:	2304      	movs	r3, #4
 800361c:	6463      	str	r3, [r4, #68]	@ 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800361e:	6823      	ldr	r3, [r4, #0]
 8003620:	2220      	movs	r2, #32
 8003622:	61da      	str	r2, [r3, #28]
        I2C_RESET_CR2(hi2c);
 8003624:	6821      	ldr	r1, [r4, #0]
 8003626:	684b      	ldr	r3, [r1, #4]
 8003628:	481f      	ldr	r0, [pc, #124]	@ (80036a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xc4>)
 800362a:	4003      	ands	r3, r0
 800362c:	604b      	str	r3, [r1, #4]
        hi2c->State = HAL_I2C_STATE_READY;
 800362e:	2341      	movs	r3, #65	@ 0x41
 8003630:	54e2      	strb	r2, [r4, r3]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003632:	2300      	movs	r3, #0
 8003634:	3222      	adds	r2, #34	@ 0x22
 8003636:	54a3      	strb	r3, [r4, r2]
        __HAL_UNLOCK(hi2c);
 8003638:	3a02      	subs	r2, #2
 800363a:	54a3      	strb	r3, [r4, r2]
        return HAL_ERROR;
 800363c:	2501      	movs	r5, #1
 800363e:	e02e      	b.n	800369e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003640:	2300      	movs	r3, #0
 8003642:	6463      	str	r3, [r4, #68]	@ 0x44
 8003644:	e7eb      	b.n	800361e <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003646:	6823      	ldr	r3, [r4, #0]
 8003648:	699b      	ldr	r3, [r3, #24]
 800364a:	4642      	mov	r2, r8
 800364c:	421a      	tst	r2, r3
 800364e:	d018      	beq.n	8003682 <I2C_WaitOnRXNEFlagUntilTimeout+0x9e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003650:	6823      	ldr	r3, [r4, #0]
 8003652:	699b      	ldr	r3, [r3, #24]
 8003654:	4642      	mov	r2, r8
 8003656:	421a      	tst	r2, r3
 8003658:	d121      	bne.n	800369e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800365a:	003a      	movs	r2, r7
 800365c:	0031      	movs	r1, r6
 800365e:	0020      	movs	r0, r4
 8003660:	f7ff fe90 	bl	8003384 <I2C_IsErrorOccurred>
 8003664:	1e05      	subs	r5, r0, #0
 8003666:	d119      	bne.n	800369c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003668:	6823      	ldr	r3, [r4, #0]
 800366a:	699a      	ldr	r2, [r3, #24]
 800366c:	4649      	mov	r1, r9
 800366e:	4211      	tst	r1, r2
 8003670:	d1c8      	bne.n	8003604 <I2C_WaitOnRXNEFlagUntilTimeout+0x20>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003672:	f7ff fb0d 	bl	8002c90 <HAL_GetTick>
 8003676:	1bc0      	subs	r0, r0, r7
 8003678:	42b0      	cmp	r0, r6
 800367a:	d8e4      	bhi.n	8003646 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 800367c:	2e00      	cmp	r6, #0
 800367e:	d1e7      	bne.n	8003650 <I2C_WaitOnRXNEFlagUntilTimeout+0x6c>
 8003680:	e7e1      	b.n	8003646 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003682:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8003684:	2220      	movs	r2, #32
 8003686:	4313      	orrs	r3, r2
 8003688:	6463      	str	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800368a:	2341      	movs	r3, #65	@ 0x41
 800368c:	54e2      	strb	r2, [r4, r3]
        __HAL_UNLOCK(hi2c);
 800368e:	3b01      	subs	r3, #1
 8003690:	2200      	movs	r2, #0
 8003692:	54e2      	strb	r2, [r4, r3]
        return HAL_ERROR;
 8003694:	2501      	movs	r5, #1
 8003696:	e002      	b.n	800369e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  return HAL_OK;
 8003698:	2500      	movs	r5, #0
 800369a:	e000      	b.n	800369e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
      return HAL_ERROR;
 800369c:	2501      	movs	r5, #1
}
 800369e:	0028      	movs	r0, r5
 80036a0:	bcc0      	pop	{r6, r7}
 80036a2:	46b9      	mov	r9, r7
 80036a4:	46b0      	mov	r8, r6
 80036a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036a8:	fe00e800 	.word	0xfe00e800

080036ac <HAL_I2C_Init>:
{
 80036ac:	b510      	push	{r4, lr}
 80036ae:	1e04      	subs	r4, r0, #0
  if (hi2c == NULL)
 80036b0:	d059      	beq.n	8003766 <HAL_I2C_Init+0xba>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036b2:	2341      	movs	r3, #65	@ 0x41
 80036b4:	5cc3      	ldrb	r3, [r0, r3]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d043      	beq.n	8003742 <HAL_I2C_Init+0x96>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80036ba:	2341      	movs	r3, #65	@ 0x41
 80036bc:	2224      	movs	r2, #36	@ 0x24
 80036be:	54e2      	strb	r2, [r4, r3]
  __HAL_I2C_DISABLE(hi2c);
 80036c0:	6822      	ldr	r2, [r4, #0]
 80036c2:	6813      	ldr	r3, [r2, #0]
 80036c4:	2101      	movs	r1, #1
 80036c6:	438b      	bics	r3, r1
 80036c8:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80036ca:	6822      	ldr	r2, [r4, #0]
 80036cc:	6863      	ldr	r3, [r4, #4]
 80036ce:	4927      	ldr	r1, [pc, #156]	@ (800376c <HAL_I2C_Init+0xc0>)
 80036d0:	400b      	ands	r3, r1
 80036d2:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80036d4:	6822      	ldr	r2, [r4, #0]
 80036d6:	6893      	ldr	r3, [r2, #8]
 80036d8:	4925      	ldr	r1, [pc, #148]	@ (8003770 <HAL_I2C_Init+0xc4>)
 80036da:	400b      	ands	r3, r1
 80036dc:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80036de:	68e3      	ldr	r3, [r4, #12]
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d034      	beq.n	800374e <HAL_I2C_Init+0xa2>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80036e4:	6822      	ldr	r2, [r4, #0]
 80036e6:	68a1      	ldr	r1, [r4, #8]
 80036e8:	2384      	movs	r3, #132	@ 0x84
 80036ea:	021b      	lsls	r3, r3, #8
 80036ec:	430b      	orrs	r3, r1
 80036ee:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80036f0:	68e3      	ldr	r3, [r4, #12]
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d032      	beq.n	800375c <HAL_I2C_Init+0xb0>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80036f6:	6822      	ldr	r2, [r4, #0]
 80036f8:	6851      	ldr	r1, [r2, #4]
 80036fa:	4b1e      	ldr	r3, [pc, #120]	@ (8003774 <HAL_I2C_Init+0xc8>)
 80036fc:	430b      	orrs	r3, r1
 80036fe:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003700:	6822      	ldr	r2, [r4, #0]
 8003702:	68d3      	ldr	r3, [r2, #12]
 8003704:	491a      	ldr	r1, [pc, #104]	@ (8003770 <HAL_I2C_Init+0xc4>)
 8003706:	400b      	ands	r3, r1
 8003708:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800370a:	6821      	ldr	r1, [r4, #0]
 800370c:	6923      	ldr	r3, [r4, #16]
 800370e:	6962      	ldr	r2, [r4, #20]
 8003710:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003712:	69a2      	ldr	r2, [r4, #24]
 8003714:	0212      	lsls	r2, r2, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003716:	4313      	orrs	r3, r2
 8003718:	60cb      	str	r3, [r1, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800371a:	6822      	ldr	r2, [r4, #0]
 800371c:	69e3      	ldr	r3, [r4, #28]
 800371e:	6a21      	ldr	r1, [r4, #32]
 8003720:	430b      	orrs	r3, r1
 8003722:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8003724:	6822      	ldr	r2, [r4, #0]
 8003726:	6813      	ldr	r3, [r2, #0]
 8003728:	2101      	movs	r1, #1
 800372a:	430b      	orrs	r3, r1
 800372c:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800372e:	2300      	movs	r3, #0
 8003730:	6463      	str	r3, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003732:	2241      	movs	r2, #65	@ 0x41
 8003734:	311f      	adds	r1, #31
 8003736:	54a1      	strb	r1, [r4, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003738:	6323      	str	r3, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800373a:	3201      	adds	r2, #1
 800373c:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 800373e:	2000      	movs	r0, #0
}
 8003740:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8003742:	3340      	adds	r3, #64	@ 0x40
 8003744:	2200      	movs	r2, #0
 8003746:	54c2      	strb	r2, [r0, r3]
    HAL_I2C_MspInit(hi2c);
 8003748:	f7fe ff08 	bl	800255c <HAL_I2C_MspInit>
 800374c:	e7b5      	b.n	80036ba <HAL_I2C_Init+0xe>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800374e:	6822      	ldr	r2, [r4, #0]
 8003750:	68a1      	ldr	r1, [r4, #8]
 8003752:	2380      	movs	r3, #128	@ 0x80
 8003754:	021b      	lsls	r3, r3, #8
 8003756:	430b      	orrs	r3, r1
 8003758:	6093      	str	r3, [r2, #8]
 800375a:	e7c9      	b.n	80036f0 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800375c:	6823      	ldr	r3, [r4, #0]
 800375e:	2280      	movs	r2, #128	@ 0x80
 8003760:	0112      	lsls	r2, r2, #4
 8003762:	605a      	str	r2, [r3, #4]
 8003764:	e7c7      	b.n	80036f6 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8003766:	2001      	movs	r0, #1
 8003768:	e7ea      	b.n	8003740 <HAL_I2C_Init+0x94>
 800376a:	46c0      	nop			@ (mov r8, r8)
 800376c:	f0ffffff 	.word	0xf0ffffff
 8003770:	ffff7fff 	.word	0xffff7fff
 8003774:	02008000 	.word	0x02008000

08003778 <HAL_I2C_Master_Transmit>:
{
 8003778:	b5f0      	push	{r4, r5, r6, r7, lr}
 800377a:	b085      	sub	sp, #20
 800377c:	0004      	movs	r4, r0
 800377e:	000f      	movs	r7, r1
 8003780:	9202      	str	r2, [sp, #8]
 8003782:	9303      	str	r3, [sp, #12]
 8003784:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003786:	2341      	movs	r3, #65	@ 0x41
 8003788:	5cc3      	ldrb	r3, [r0, r3]
 800378a:	2b20      	cmp	r3, #32
 800378c:	d000      	beq.n	8003790 <HAL_I2C_Master_Transmit+0x18>
 800378e:	e09f      	b.n	80038d0 <HAL_I2C_Master_Transmit+0x158>
    __HAL_LOCK(hi2c);
 8003790:	3320      	adds	r3, #32
 8003792:	5cc3      	ldrb	r3, [r0, r3]
 8003794:	2b01      	cmp	r3, #1
 8003796:	d100      	bne.n	800379a <HAL_I2C_Master_Transmit+0x22>
 8003798:	e09d      	b.n	80038d6 <HAL_I2C_Master_Transmit+0x15e>
 800379a:	2340      	movs	r3, #64	@ 0x40
 800379c:	2201      	movs	r2, #1
 800379e:	54c2      	strb	r2, [r0, r3]
    tickstart = HAL_GetTick();
 80037a0:	f7ff fa76 	bl	8002c90 <HAL_GetTick>
 80037a4:	0006      	movs	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80037a6:	2180      	movs	r1, #128	@ 0x80
 80037a8:	9000      	str	r0, [sp, #0]
 80037aa:	2319      	movs	r3, #25
 80037ac:	2201      	movs	r2, #1
 80037ae:	0209      	lsls	r1, r1, #8
 80037b0:	0020      	movs	r0, r4
 80037b2:	f7ff fea3 	bl	80034fc <I2C_WaitOnFlagUntilTimeout>
 80037b6:	2800      	cmp	r0, #0
 80037b8:	d000      	beq.n	80037bc <HAL_I2C_Master_Transmit+0x44>
 80037ba:	e08e      	b.n	80038da <HAL_I2C_Master_Transmit+0x162>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80037bc:	2341      	movs	r3, #65	@ 0x41
 80037be:	2221      	movs	r2, #33	@ 0x21
 80037c0:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80037c2:	3301      	adds	r3, #1
 80037c4:	3a11      	subs	r2, #17
 80037c6:	54e2      	strb	r2, [r4, r3]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037c8:	2300      	movs	r3, #0
 80037ca:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
 80037cc:	9a02      	ldr	r2, [sp, #8]
 80037ce:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 80037d0:	9a03      	ldr	r2, [sp, #12]
 80037d2:	8562      	strh	r2, [r4, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80037d4:	6363      	str	r3, [r4, #52]	@ 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037d6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80037d8:	b29b      	uxth	r3, r3
 80037da:	2bff      	cmp	r3, #255	@ 0xff
 80037dc:	d926      	bls.n	800382c <HAL_I2C_Master_Transmit+0xb4>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80037de:	23ff      	movs	r3, #255	@ 0xff
 80037e0:	8523      	strh	r3, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80037e2:	3b7f      	subs	r3, #127	@ 0x7f
 80037e4:	4a41      	ldr	r2, [pc, #260]	@ (80038ec <HAL_I2C_Master_Transmit+0x174>)
 80037e6:	9200      	str	r2, [sp, #0]
 80037e8:	045b      	lsls	r3, r3, #17
 80037ea:	22ff      	movs	r2, #255	@ 0xff
 80037ec:	0039      	movs	r1, r7
 80037ee:	0020      	movs	r0, r4
 80037f0:	f7ff fdb0 	bl	8003354 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80037f4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80037f6:	b29b      	uxth	r3, r3
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d134      	bne.n	8003866 <HAL_I2C_Master_Transmit+0xee>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037fc:	0032      	movs	r2, r6
 80037fe:	0029      	movs	r1, r5
 8003800:	0020      	movs	r0, r4
 8003802:	f7ff feb5 	bl	8003570 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003806:	2800      	cmp	r0, #0
 8003808:	d000      	beq.n	800380c <HAL_I2C_Master_Transmit+0x94>
 800380a:	e06c      	b.n	80038e6 <HAL_I2C_Master_Transmit+0x16e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800380c:	6823      	ldr	r3, [r4, #0]
 800380e:	2220      	movs	r2, #32
 8003810:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8003812:	6821      	ldr	r1, [r4, #0]
 8003814:	684b      	ldr	r3, [r1, #4]
 8003816:	4d36      	ldr	r5, [pc, #216]	@ (80038f0 <HAL_I2C_Master_Transmit+0x178>)
 8003818:	402b      	ands	r3, r5
 800381a:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800381c:	2341      	movs	r3, #65	@ 0x41
 800381e:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003820:	2300      	movs	r3, #0
 8003822:	3222      	adds	r2, #34	@ 0x22
 8003824:	54a3      	strb	r3, [r4, r2]
    __HAL_UNLOCK(hi2c);
 8003826:	3a02      	subs	r2, #2
 8003828:	54a3      	strb	r3, [r4, r2]
    return HAL_OK;
 800382a:	e052      	b.n	80038d2 <HAL_I2C_Master_Transmit+0x15a>
      hi2c->XferSize = hi2c->XferCount;
 800382c:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800382e:	b292      	uxth	r2, r2
 8003830:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003832:	2380      	movs	r3, #128	@ 0x80
 8003834:	b2d2      	uxtb	r2, r2
 8003836:	492d      	ldr	r1, [pc, #180]	@ (80038ec <HAL_I2C_Master_Transmit+0x174>)
 8003838:	9100      	str	r1, [sp, #0]
 800383a:	049b      	lsls	r3, r3, #18
 800383c:	0039      	movs	r1, r7
 800383e:	0020      	movs	r0, r4
 8003840:	f7ff fd88 	bl	8003354 <I2C_TransferConfig>
 8003844:	e7d6      	b.n	80037f4 <HAL_I2C_Master_Transmit+0x7c>
          hi2c->XferSize = hi2c->XferCount;
 8003846:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8003848:	b292      	uxth	r2, r2
 800384a:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800384c:	2380      	movs	r3, #128	@ 0x80
 800384e:	b2d2      	uxtb	r2, r2
 8003850:	2100      	movs	r1, #0
 8003852:	9100      	str	r1, [sp, #0]
 8003854:	049b      	lsls	r3, r3, #18
 8003856:	0039      	movs	r1, r7
 8003858:	0020      	movs	r0, r4
 800385a:	f7ff fd7b 	bl	8003354 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800385e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003860:	b29b      	uxth	r3, r3
 8003862:	2b00      	cmp	r3, #0
 8003864:	d0ca      	beq.n	80037fc <HAL_I2C_Master_Transmit+0x84>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003866:	0032      	movs	r2, r6
 8003868:	0029      	movs	r1, r5
 800386a:	0020      	movs	r0, r4
 800386c:	f7ff fe18 	bl	80034a0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003870:	2800      	cmp	r0, #0
 8003872:	d134      	bne.n	80038de <HAL_I2C_Master_Transmit+0x166>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003874:	6823      	ldr	r3, [r4, #0]
 8003876:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003878:	7812      	ldrb	r2, [r2, #0]
 800387a:	629a      	str	r2, [r3, #40]	@ 0x28
      hi2c->pBuffPtr++;
 800387c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800387e:	3301      	adds	r3, #1
 8003880:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8003882:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003884:	3b01      	subs	r3, #1
 8003886:	b29b      	uxth	r3, r3
 8003888:	8563      	strh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800388a:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800388c:	3b01      	subs	r3, #1
 800388e:	b29b      	uxth	r3, r3
 8003890:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003892:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8003894:	b292      	uxth	r2, r2
 8003896:	2a00      	cmp	r2, #0
 8003898:	d0e1      	beq.n	800385e <HAL_I2C_Master_Transmit+0xe6>
 800389a:	2b00      	cmp	r3, #0
 800389c:	d1df      	bne.n	800385e <HAL_I2C_Master_Transmit+0xe6>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800389e:	9600      	str	r6, [sp, #0]
 80038a0:	002b      	movs	r3, r5
 80038a2:	2200      	movs	r2, #0
 80038a4:	2180      	movs	r1, #128	@ 0x80
 80038a6:	0020      	movs	r0, r4
 80038a8:	f7ff fe28 	bl	80034fc <I2C_WaitOnFlagUntilTimeout>
 80038ac:	2800      	cmp	r0, #0
 80038ae:	d118      	bne.n	80038e2 <HAL_I2C_Master_Transmit+0x16a>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038b0:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	2bff      	cmp	r3, #255	@ 0xff
 80038b6:	d9c6      	bls.n	8003846 <HAL_I2C_Master_Transmit+0xce>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80038b8:	23ff      	movs	r3, #255	@ 0xff
 80038ba:	8523      	strh	r3, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80038bc:	3b7f      	subs	r3, #127	@ 0x7f
 80038be:	2200      	movs	r2, #0
 80038c0:	9200      	str	r2, [sp, #0]
 80038c2:	045b      	lsls	r3, r3, #17
 80038c4:	32ff      	adds	r2, #255	@ 0xff
 80038c6:	0039      	movs	r1, r7
 80038c8:	0020      	movs	r0, r4
 80038ca:	f7ff fd43 	bl	8003354 <I2C_TransferConfig>
 80038ce:	e7c6      	b.n	800385e <HAL_I2C_Master_Transmit+0xe6>
    return HAL_BUSY;
 80038d0:	2002      	movs	r0, #2
}
 80038d2:	b005      	add	sp, #20
 80038d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 80038d6:	2002      	movs	r0, #2
 80038d8:	e7fb      	b.n	80038d2 <HAL_I2C_Master_Transmit+0x15a>
      return HAL_ERROR;
 80038da:	2001      	movs	r0, #1
 80038dc:	e7f9      	b.n	80038d2 <HAL_I2C_Master_Transmit+0x15a>
        return HAL_ERROR;
 80038de:	2001      	movs	r0, #1
 80038e0:	e7f7      	b.n	80038d2 <HAL_I2C_Master_Transmit+0x15a>
          return HAL_ERROR;
 80038e2:	2001      	movs	r0, #1
 80038e4:	e7f5      	b.n	80038d2 <HAL_I2C_Master_Transmit+0x15a>
      return HAL_ERROR;
 80038e6:	2001      	movs	r0, #1
 80038e8:	e7f3      	b.n	80038d2 <HAL_I2C_Master_Transmit+0x15a>
 80038ea:	46c0      	nop			@ (mov r8, r8)
 80038ec:	80002000 	.word	0x80002000
 80038f0:	fe00e800 	.word	0xfe00e800

080038f4 <HAL_I2C_Master_Receive>:
{
 80038f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038f6:	b085      	sub	sp, #20
 80038f8:	0004      	movs	r4, r0
 80038fa:	000f      	movs	r7, r1
 80038fc:	9202      	str	r2, [sp, #8]
 80038fe:	9303      	str	r3, [sp, #12]
 8003900:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003902:	2341      	movs	r3, #65	@ 0x41
 8003904:	5cc3      	ldrb	r3, [r0, r3]
 8003906:	2b20      	cmp	r3, #32
 8003908:	d000      	beq.n	800390c <HAL_I2C_Master_Receive+0x18>
 800390a:	e09f      	b.n	8003a4c <HAL_I2C_Master_Receive+0x158>
    __HAL_LOCK(hi2c);
 800390c:	3320      	adds	r3, #32
 800390e:	5cc3      	ldrb	r3, [r0, r3]
 8003910:	2b01      	cmp	r3, #1
 8003912:	d100      	bne.n	8003916 <HAL_I2C_Master_Receive+0x22>
 8003914:	e09d      	b.n	8003a52 <HAL_I2C_Master_Receive+0x15e>
 8003916:	2340      	movs	r3, #64	@ 0x40
 8003918:	2201      	movs	r2, #1
 800391a:	54c2      	strb	r2, [r0, r3]
    tickstart = HAL_GetTick();
 800391c:	f7ff f9b8 	bl	8002c90 <HAL_GetTick>
 8003920:	0006      	movs	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003922:	2180      	movs	r1, #128	@ 0x80
 8003924:	9000      	str	r0, [sp, #0]
 8003926:	2319      	movs	r3, #25
 8003928:	2201      	movs	r2, #1
 800392a:	0209      	lsls	r1, r1, #8
 800392c:	0020      	movs	r0, r4
 800392e:	f7ff fde5 	bl	80034fc <I2C_WaitOnFlagUntilTimeout>
 8003932:	2800      	cmp	r0, #0
 8003934:	d000      	beq.n	8003938 <HAL_I2C_Master_Receive+0x44>
 8003936:	e08e      	b.n	8003a56 <HAL_I2C_Master_Receive+0x162>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003938:	2341      	movs	r3, #65	@ 0x41
 800393a:	2222      	movs	r2, #34	@ 0x22
 800393c:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800393e:	3301      	adds	r3, #1
 8003940:	3a12      	subs	r2, #18
 8003942:	54e2      	strb	r2, [r4, r3]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003944:	2300      	movs	r3, #0
 8003946:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
 8003948:	9a02      	ldr	r2, [sp, #8]
 800394a:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 800394c:	9a03      	ldr	r2, [sp, #12]
 800394e:	8562      	strh	r2, [r4, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003950:	6363      	str	r3, [r4, #52]	@ 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003952:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003954:	b29b      	uxth	r3, r3
 8003956:	2bff      	cmp	r3, #255	@ 0xff
 8003958:	d926      	bls.n	80039a8 <HAL_I2C_Master_Receive+0xb4>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800395a:	23ff      	movs	r3, #255	@ 0xff
 800395c:	8523      	strh	r3, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800395e:	3b7f      	subs	r3, #127	@ 0x7f
 8003960:	4a41      	ldr	r2, [pc, #260]	@ (8003a68 <HAL_I2C_Master_Receive+0x174>)
 8003962:	9200      	str	r2, [sp, #0]
 8003964:	045b      	lsls	r3, r3, #17
 8003966:	22ff      	movs	r2, #255	@ 0xff
 8003968:	0039      	movs	r1, r7
 800396a:	0020      	movs	r0, r4
 800396c:	f7ff fcf2 	bl	8003354 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003970:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003972:	b29b      	uxth	r3, r3
 8003974:	2b00      	cmp	r3, #0
 8003976:	d134      	bne.n	80039e2 <HAL_I2C_Master_Receive+0xee>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003978:	0032      	movs	r2, r6
 800397a:	0029      	movs	r1, r5
 800397c:	0020      	movs	r0, r4
 800397e:	f7ff fdf7 	bl	8003570 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003982:	2800      	cmp	r0, #0
 8003984:	d000      	beq.n	8003988 <HAL_I2C_Master_Receive+0x94>
 8003986:	e06c      	b.n	8003a62 <HAL_I2C_Master_Receive+0x16e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003988:	6823      	ldr	r3, [r4, #0]
 800398a:	2220      	movs	r2, #32
 800398c:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800398e:	6821      	ldr	r1, [r4, #0]
 8003990:	684b      	ldr	r3, [r1, #4]
 8003992:	4d36      	ldr	r5, [pc, #216]	@ (8003a6c <HAL_I2C_Master_Receive+0x178>)
 8003994:	402b      	ands	r3, r5
 8003996:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003998:	2341      	movs	r3, #65	@ 0x41
 800399a:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800399c:	2300      	movs	r3, #0
 800399e:	3222      	adds	r2, #34	@ 0x22
 80039a0:	54a3      	strb	r3, [r4, r2]
    __HAL_UNLOCK(hi2c);
 80039a2:	3a02      	subs	r2, #2
 80039a4:	54a3      	strb	r3, [r4, r2]
    return HAL_OK;
 80039a6:	e052      	b.n	8003a4e <HAL_I2C_Master_Receive+0x15a>
      hi2c->XferSize = hi2c->XferCount;
 80039a8:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 80039aa:	b292      	uxth	r2, r2
 80039ac:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80039ae:	2380      	movs	r3, #128	@ 0x80
 80039b0:	b2d2      	uxtb	r2, r2
 80039b2:	492d      	ldr	r1, [pc, #180]	@ (8003a68 <HAL_I2C_Master_Receive+0x174>)
 80039b4:	9100      	str	r1, [sp, #0]
 80039b6:	049b      	lsls	r3, r3, #18
 80039b8:	0039      	movs	r1, r7
 80039ba:	0020      	movs	r0, r4
 80039bc:	f7ff fcca 	bl	8003354 <I2C_TransferConfig>
 80039c0:	e7d6      	b.n	8003970 <HAL_I2C_Master_Receive+0x7c>
          hi2c->XferSize = hi2c->XferCount;
 80039c2:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 80039c4:	b292      	uxth	r2, r2
 80039c6:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80039c8:	2380      	movs	r3, #128	@ 0x80
 80039ca:	b2d2      	uxtb	r2, r2
 80039cc:	2100      	movs	r1, #0
 80039ce:	9100      	str	r1, [sp, #0]
 80039d0:	049b      	lsls	r3, r3, #18
 80039d2:	0039      	movs	r1, r7
 80039d4:	0020      	movs	r0, r4
 80039d6:	f7ff fcbd 	bl	8003354 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80039da:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80039dc:	b29b      	uxth	r3, r3
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d0ca      	beq.n	8003978 <HAL_I2C_Master_Receive+0x84>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039e2:	0032      	movs	r2, r6
 80039e4:	0029      	movs	r1, r5
 80039e6:	0020      	movs	r0, r4
 80039e8:	f7ff fdfc 	bl	80035e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80039ec:	2800      	cmp	r0, #0
 80039ee:	d134      	bne.n	8003a5a <HAL_I2C_Master_Receive+0x166>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80039f0:	6823      	ldr	r3, [r4, #0]
 80039f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80039f4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80039f6:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80039f8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80039fa:	3301      	adds	r3, #1
 80039fc:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 80039fe:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8003a00:	3b01      	subs	r3, #1
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	8523      	strh	r3, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8003a06:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8003a08:	3a01      	subs	r2, #1
 8003a0a:	b292      	uxth	r2, r2
 8003a0c:	8562      	strh	r2, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003a0e:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8003a10:	b292      	uxth	r2, r2
 8003a12:	2a00      	cmp	r2, #0
 8003a14:	d0e1      	beq.n	80039da <HAL_I2C_Master_Receive+0xe6>
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d1df      	bne.n	80039da <HAL_I2C_Master_Receive+0xe6>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003a1a:	9600      	str	r6, [sp, #0]
 8003a1c:	002b      	movs	r3, r5
 8003a1e:	2200      	movs	r2, #0
 8003a20:	2180      	movs	r1, #128	@ 0x80
 8003a22:	0020      	movs	r0, r4
 8003a24:	f7ff fd6a 	bl	80034fc <I2C_WaitOnFlagUntilTimeout>
 8003a28:	2800      	cmp	r0, #0
 8003a2a:	d118      	bne.n	8003a5e <HAL_I2C_Master_Receive+0x16a>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a2c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	2bff      	cmp	r3, #255	@ 0xff
 8003a32:	d9c6      	bls.n	80039c2 <HAL_I2C_Master_Receive+0xce>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a34:	23ff      	movs	r3, #255	@ 0xff
 8003a36:	8523      	strh	r3, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003a38:	3b7f      	subs	r3, #127	@ 0x7f
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	9200      	str	r2, [sp, #0]
 8003a3e:	045b      	lsls	r3, r3, #17
 8003a40:	32ff      	adds	r2, #255	@ 0xff
 8003a42:	0039      	movs	r1, r7
 8003a44:	0020      	movs	r0, r4
 8003a46:	f7ff fc85 	bl	8003354 <I2C_TransferConfig>
 8003a4a:	e7c6      	b.n	80039da <HAL_I2C_Master_Receive+0xe6>
    return HAL_BUSY;
 8003a4c:	2002      	movs	r0, #2
}
 8003a4e:	b005      	add	sp, #20
 8003a50:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 8003a52:	2002      	movs	r0, #2
 8003a54:	e7fb      	b.n	8003a4e <HAL_I2C_Master_Receive+0x15a>
      return HAL_ERROR;
 8003a56:	2001      	movs	r0, #1
 8003a58:	e7f9      	b.n	8003a4e <HAL_I2C_Master_Receive+0x15a>
        return HAL_ERROR;
 8003a5a:	2001      	movs	r0, #1
 8003a5c:	e7f7      	b.n	8003a4e <HAL_I2C_Master_Receive+0x15a>
          return HAL_ERROR;
 8003a5e:	2001      	movs	r0, #1
 8003a60:	e7f5      	b.n	8003a4e <HAL_I2C_Master_Receive+0x15a>
      return HAL_ERROR;
 8003a62:	2001      	movs	r0, #1
 8003a64:	e7f3      	b.n	8003a4e <HAL_I2C_Master_Receive+0x15a>
 8003a66:	46c0      	nop			@ (mov r8, r8)
 8003a68:	80002400 	.word	0x80002400
 8003a6c:	fe00e800 	.word	0xfe00e800

08003a70 <HAL_I2C_IsDeviceReady>:
{
 8003a70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a72:	46de      	mov	lr, fp
 8003a74:	4657      	mov	r7, sl
 8003a76:	4646      	mov	r6, r8
 8003a78:	b5c0      	push	{r6, r7, lr}
 8003a7a:	b086      	sub	sp, #24
 8003a7c:	0005      	movs	r5, r0
 8003a7e:	9103      	str	r1, [sp, #12]
 8003a80:	4692      	mov	sl, r2
 8003a82:	001c      	movs	r4, r3
  __IO uint32_t I2C_Trials = 0UL;
 8003a84:	2300      	movs	r3, #0
 8003a86:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a88:	3341      	adds	r3, #65	@ 0x41
 8003a8a:	5cc3      	ldrb	r3, [r0, r3]
 8003a8c:	2b20      	cmp	r3, #32
 8003a8e:	d000      	beq.n	8003a92 <HAL_I2C_IsDeviceReady+0x22>
 8003a90:	e09f      	b.n	8003bd2 <HAL_I2C_IsDeviceReady+0x162>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003a92:	6803      	ldr	r3, [r0, #0]
 8003a94:	699b      	ldr	r3, [r3, #24]
 8003a96:	041b      	lsls	r3, r3, #16
 8003a98:	d500      	bpl.n	8003a9c <HAL_I2C_IsDeviceReady+0x2c>
 8003a9a:	e09c      	b.n	8003bd6 <HAL_I2C_IsDeviceReady+0x166>
    __HAL_LOCK(hi2c);
 8003a9c:	2340      	movs	r3, #64	@ 0x40
 8003a9e:	5cc3      	ldrb	r3, [r0, r3]
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d100      	bne.n	8003aa6 <HAL_I2C_IsDeviceReady+0x36>
 8003aa4:	e099      	b.n	8003bda <HAL_I2C_IsDeviceReady+0x16a>
 8003aa6:	2340      	movs	r3, #64	@ 0x40
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	54c2      	strb	r2, [r0, r3]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003aac:	3301      	adds	r3, #1
 8003aae:	3223      	adds	r2, #35	@ 0x23
 8003ab0:	54c2      	strb	r2, [r0, r3]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	6443      	str	r3, [r0, #68]	@ 0x44
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8003ab6:	058b      	lsls	r3, r1, #22
 8003ab8:	0d9b      	lsrs	r3, r3, #22
 8003aba:	469b      	mov	fp, r3
 8003abc:	68eb      	ldr	r3, [r5, #12]
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d014      	beq.n	8003aec <HAL_I2C_IsDeviceReady+0x7c>
 8003ac2:	4b4a      	ldr	r3, [pc, #296]	@ (8003bec <HAL_I2C_IsDeviceReady+0x17c>)
 8003ac4:	465a      	mov	r2, fp
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	682a      	ldr	r2, [r5, #0]
 8003aca:	6053      	str	r3, [r2, #4]
      tickstart = HAL_GetTick();
 8003acc:	f7ff f8e0 	bl	8002c90 <HAL_GetTick>
 8003ad0:	0007      	movs	r7, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ad2:	682b      	ldr	r3, [r5, #0]
 8003ad4:	699a      	ldr	r2, [r3, #24]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003ad6:	6999      	ldr	r1, [r3, #24]
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ad8:	2320      	movs	r3, #32
 8003ada:	4013      	ands	r3, r2
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003adc:	2210      	movs	r2, #16
 8003ade:	400a      	ands	r2, r1
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	d12a      	bne.n	8003b3a <HAL_I2C_IsDeviceReady+0xca>
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ae4:	3320      	adds	r3, #32
 8003ae6:	4698      	mov	r8, r3
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003ae8:	2610      	movs	r6, #16
 8003aea:	e00d      	b.n	8003b08 <HAL_I2C_IsDeviceReady+0x98>
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8003aec:	9b03      	ldr	r3, [sp, #12]
 8003aee:	059a      	lsls	r2, r3, #22
 8003af0:	0d92      	lsrs	r2, r2, #22
 8003af2:	4b3f      	ldr	r3, [pc, #252]	@ (8003bf0 <HAL_I2C_IsDeviceReady+0x180>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	e7e7      	b.n	8003ac8 <HAL_I2C_IsDeviceReady+0x58>
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003af8:	682a      	ldr	r2, [r5, #0]
 8003afa:	6993      	ldr	r3, [r2, #24]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003afc:	6992      	ldr	r2, [r2, #24]
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003afe:	4641      	mov	r1, r8
 8003b00:	400b      	ands	r3, r1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003b02:	4032      	ands	r2, r6
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003b04:	4313      	orrs	r3, r2
 8003b06:	d118      	bne.n	8003b3a <HAL_I2C_IsDeviceReady+0xca>
        if (Timeout != HAL_MAX_DELAY)
 8003b08:	1c63      	adds	r3, r4, #1
 8003b0a:	d0f5      	beq.n	8003af8 <HAL_I2C_IsDeviceReady+0x88>
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003b0c:	f7ff f8c0 	bl	8002c90 <HAL_GetTick>
 8003b10:	1bc0      	subs	r0, r0, r7
 8003b12:	42a0      	cmp	r0, r4
 8003b14:	d801      	bhi.n	8003b1a <HAL_I2C_IsDeviceReady+0xaa>
 8003b16:	2c00      	cmp	r4, #0
 8003b18:	d1ee      	bne.n	8003af8 <HAL_I2C_IsDeviceReady+0x88>
            hi2c->State = HAL_I2C_STATE_READY;
 8003b1a:	2220      	movs	r2, #32
 8003b1c:	2341      	movs	r3, #65	@ 0x41
 8003b1e:	54ea      	strb	r2, [r5, r3]
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b20:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8003b22:	4313      	orrs	r3, r2
 8003b24:	646b      	str	r3, [r5, #68]	@ 0x44
            __HAL_UNLOCK(hi2c);
 8003b26:	2340      	movs	r3, #64	@ 0x40
 8003b28:	2200      	movs	r2, #0
 8003b2a:	54ea      	strb	r2, [r5, r3]
            return HAL_ERROR;
 8003b2c:	2001      	movs	r0, #1
}
 8003b2e:	b006      	add	sp, #24
 8003b30:	bce0      	pop	{r5, r6, r7}
 8003b32:	46bb      	mov	fp, r7
 8003b34:	46b2      	mov	sl, r6
 8003b36:	46a8      	mov	r8, r5
 8003b38:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8003b3a:	682b      	ldr	r3, [r5, #0]
 8003b3c:	699b      	ldr	r3, [r3, #24]
 8003b3e:	06db      	lsls	r3, r3, #27
 8003b40:	d522      	bpl.n	8003b88 <HAL_I2C_IsDeviceReady+0x118>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003b42:	9700      	str	r7, [sp, #0]
 8003b44:	0023      	movs	r3, r4
 8003b46:	2200      	movs	r2, #0
 8003b48:	2120      	movs	r1, #32
 8003b4a:	0028      	movs	r0, r5
 8003b4c:	f7ff fcd6 	bl	80034fc <I2C_WaitOnFlagUntilTimeout>
 8003b50:	2800      	cmp	r0, #0
 8003b52:	d146      	bne.n	8003be2 <HAL_I2C_IsDeviceReady+0x172>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b54:	682b      	ldr	r3, [r5, #0]
 8003b56:	2210      	movs	r2, #16
 8003b58:	61da      	str	r2, [r3, #28]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b5a:	682b      	ldr	r3, [r5, #0]
 8003b5c:	3210      	adds	r2, #16
 8003b5e:	61da      	str	r2, [r3, #28]
      if (I2C_Trials == Trials)
 8003b60:	9b05      	ldr	r3, [sp, #20]
 8003b62:	4553      	cmp	r3, sl
 8003b64:	d022      	beq.n	8003bac <HAL_I2C_IsDeviceReady+0x13c>
      I2C_Trials++;
 8003b66:	9b05      	ldr	r3, [sp, #20]
 8003b68:	3301      	adds	r3, #1
 8003b6a:	9305      	str	r3, [sp, #20]
    } while (I2C_Trials < Trials);
 8003b6c:	9b05      	ldr	r3, [sp, #20]
 8003b6e:	4553      	cmp	r3, sl
 8003b70:	d3a4      	bcc.n	8003abc <HAL_I2C_IsDeviceReady+0x4c>
    hi2c->State = HAL_I2C_STATE_READY;
 8003b72:	2220      	movs	r2, #32
 8003b74:	2341      	movs	r3, #65	@ 0x41
 8003b76:	54ea      	strb	r2, [r5, r3]
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b78:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	646b      	str	r3, [r5, #68]	@ 0x44
    __HAL_UNLOCK(hi2c);
 8003b7e:	2340      	movs	r3, #64	@ 0x40
 8003b80:	2200      	movs	r2, #0
 8003b82:	54ea      	strb	r2, [r5, r3]
    return HAL_ERROR;
 8003b84:	2001      	movs	r0, #1
 8003b86:	e7d2      	b.n	8003b2e <HAL_I2C_IsDeviceReady+0xbe>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003b88:	9700      	str	r7, [sp, #0]
 8003b8a:	0023      	movs	r3, r4
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	2120      	movs	r1, #32
 8003b90:	0028      	movs	r0, r5
 8003b92:	f7ff fcb3 	bl	80034fc <I2C_WaitOnFlagUntilTimeout>
 8003b96:	2800      	cmp	r0, #0
 8003b98:	d121      	bne.n	8003bde <HAL_I2C_IsDeviceReady+0x16e>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b9a:	682a      	ldr	r2, [r5, #0]
 8003b9c:	2320      	movs	r3, #32
 8003b9e:	61d3      	str	r3, [r2, #28]
        hi2c->State = HAL_I2C_STATE_READY;
 8003ba0:	2241      	movs	r2, #65	@ 0x41
 8003ba2:	54ab      	strb	r3, [r5, r2]
        __HAL_UNLOCK(hi2c);
 8003ba4:	3320      	adds	r3, #32
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	54ea      	strb	r2, [r5, r3]
        return HAL_OK;
 8003baa:	e7c0      	b.n	8003b2e <HAL_I2C_IsDeviceReady+0xbe>
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003bac:	682a      	ldr	r2, [r5, #0]
 8003bae:	6851      	ldr	r1, [r2, #4]
 8003bb0:	2380      	movs	r3, #128	@ 0x80
 8003bb2:	01db      	lsls	r3, r3, #7
 8003bb4:	430b      	orrs	r3, r1
 8003bb6:	6053      	str	r3, [r2, #4]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003bb8:	9700      	str	r7, [sp, #0]
 8003bba:	0023      	movs	r3, r4
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	2120      	movs	r1, #32
 8003bc0:	0028      	movs	r0, r5
 8003bc2:	f7ff fc9b 	bl	80034fc <I2C_WaitOnFlagUntilTimeout>
 8003bc6:	2800      	cmp	r0, #0
 8003bc8:	d10d      	bne.n	8003be6 <HAL_I2C_IsDeviceReady+0x176>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bca:	682b      	ldr	r3, [r5, #0]
 8003bcc:	2220      	movs	r2, #32
 8003bce:	61da      	str	r2, [r3, #28]
 8003bd0:	e7c9      	b.n	8003b66 <HAL_I2C_IsDeviceReady+0xf6>
    return HAL_BUSY;
 8003bd2:	2002      	movs	r0, #2
 8003bd4:	e7ab      	b.n	8003b2e <HAL_I2C_IsDeviceReady+0xbe>
      return HAL_BUSY;
 8003bd6:	2002      	movs	r0, #2
 8003bd8:	e7a9      	b.n	8003b2e <HAL_I2C_IsDeviceReady+0xbe>
    __HAL_LOCK(hi2c);
 8003bda:	2002      	movs	r0, #2
 8003bdc:	e7a7      	b.n	8003b2e <HAL_I2C_IsDeviceReady+0xbe>
          return HAL_ERROR;
 8003bde:	2001      	movs	r0, #1
 8003be0:	e7a5      	b.n	8003b2e <HAL_I2C_IsDeviceReady+0xbe>
          return HAL_ERROR;
 8003be2:	2001      	movs	r0, #1
 8003be4:	e7a3      	b.n	8003b2e <HAL_I2C_IsDeviceReady+0xbe>
          return HAL_ERROR;
 8003be6:	2001      	movs	r0, #1
 8003be8:	e7a1      	b.n	8003b2e <HAL_I2C_IsDeviceReady+0xbe>
 8003bea:	46c0      	nop			@ (mov r8, r8)
 8003bec:	02002800 	.word	0x02002800
 8003bf0:	02002000 	.word	0x02002000

08003bf4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bf6:	2341      	movs	r3, #65	@ 0x41
 8003bf8:	5cc3      	ldrb	r3, [r0, r3]
 8003bfa:	2b20      	cmp	r3, #32
 8003bfc:	d120      	bne.n	8003c40 <HAL_I2CEx_ConfigAnalogFilter+0x4c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bfe:	3320      	adds	r3, #32
 8003c00:	5cc3      	ldrb	r3, [r0, r3]
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d01e      	beq.n	8003c44 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 8003c06:	2440      	movs	r4, #64	@ 0x40
 8003c08:	2201      	movs	r2, #1
 8003c0a:	5502      	strb	r2, [r0, r4]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c0c:	2541      	movs	r5, #65	@ 0x41
 8003c0e:	2324      	movs	r3, #36	@ 0x24
 8003c10:	5543      	strb	r3, [r0, r5]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c12:	6806      	ldr	r6, [r0, #0]
 8003c14:	6833      	ldr	r3, [r6, #0]
 8003c16:	4393      	bics	r3, r2
 8003c18:	6033      	str	r3, [r6, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003c1a:	6806      	ldr	r6, [r0, #0]
 8003c1c:	6833      	ldr	r3, [r6, #0]
 8003c1e:	4f0a      	ldr	r7, [pc, #40]	@ (8003c48 <HAL_I2CEx_ConfigAnalogFilter+0x54>)
 8003c20:	403b      	ands	r3, r7
 8003c22:	6033      	str	r3, [r6, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003c24:	6806      	ldr	r6, [r0, #0]
 8003c26:	6833      	ldr	r3, [r6, #0]
 8003c28:	430b      	orrs	r3, r1
 8003c2a:	6033      	str	r3, [r6, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c2c:	6801      	ldr	r1, [r0, #0]
 8003c2e:	680b      	ldr	r3, [r1, #0]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	600b      	str	r3, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c34:	2320      	movs	r3, #32
 8003c36:	5543      	strb	r3, [r0, r5]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c38:	2300      	movs	r3, #0
 8003c3a:	5503      	strb	r3, [r0, r4]

    return HAL_OK;
 8003c3c:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8003c3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8003c40:	2002      	movs	r0, #2
 8003c42:	e7fc      	b.n	8003c3e <HAL_I2CEx_ConfigAnalogFilter+0x4a>
    __HAL_LOCK(hi2c);
 8003c44:	2002      	movs	r0, #2
 8003c46:	e7fa      	b.n	8003c3e <HAL_I2CEx_ConfigAnalogFilter+0x4a>
 8003c48:	ffffefff 	.word	0xffffefff

08003c4c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003c4c:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c4e:	2341      	movs	r3, #65	@ 0x41
 8003c50:	5cc3      	ldrb	r3, [r0, r3]
 8003c52:	2b20      	cmp	r3, #32
 8003c54:	d11e      	bne.n	8003c94 <HAL_I2CEx_ConfigDigitalFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c56:	3320      	adds	r3, #32
 8003c58:	5cc3      	ldrb	r3, [r0, r3]
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d01c      	beq.n	8003c98 <HAL_I2CEx_ConfigDigitalFilter+0x4c>
 8003c5e:	2440      	movs	r4, #64	@ 0x40
 8003c60:	2201      	movs	r2, #1
 8003c62:	5502      	strb	r2, [r0, r4]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c64:	2541      	movs	r5, #65	@ 0x41
 8003c66:	2324      	movs	r3, #36	@ 0x24
 8003c68:	5543      	strb	r3, [r0, r5]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c6a:	6806      	ldr	r6, [r0, #0]
 8003c6c:	6833      	ldr	r3, [r6, #0]
 8003c6e:	4393      	bics	r3, r2
 8003c70:	6033      	str	r3, [r6, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003c72:	6806      	ldr	r6, [r0, #0]
 8003c74:	6833      	ldr	r3, [r6, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003c76:	4f09      	ldr	r7, [pc, #36]	@ (8003c9c <HAL_I2CEx_ConfigDigitalFilter+0x50>)
 8003c78:	403b      	ands	r3, r7

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003c7a:	0209      	lsls	r1, r1, #8
 8003c7c:	4319      	orrs	r1, r3

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003c7e:	6031      	str	r1, [r6, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c80:	6801      	ldr	r1, [r0, #0]
 8003c82:	680b      	ldr	r3, [r1, #0]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	600b      	str	r3, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c88:	2320      	movs	r3, #32
 8003c8a:	5543      	strb	r3, [r0, r5]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	5503      	strb	r3, [r0, r4]

    return HAL_OK;
 8003c90:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8003c92:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8003c94:	2002      	movs	r0, #2
 8003c96:	e7fc      	b.n	8003c92 <HAL_I2CEx_ConfigDigitalFilter+0x46>
    __HAL_LOCK(hi2c);
 8003c98:	2002      	movs	r0, #2
 8003c9a:	e7fa      	b.n	8003c92 <HAL_I2CEx_ConfigDigitalFilter+0x46>
 8003c9c:	fffff0ff 	.word	0xfffff0ff

08003ca0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ca0:	b510      	push	{r4, lr}
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8003ca2:	4b27      	ldr	r3, [pc, #156]	@ (8003d40 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003ca4:	68da      	ldr	r2, [r3, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ca6:	230c      	movs	r3, #12
 8003ca8:	4013      	ands	r3, r2
 8003caa:	2b08      	cmp	r3, #8
 8003cac:	d046      	beq.n	8003d3c <HAL_RCC_GetSysClockFreq+0x9c>
 8003cae:	2b0c      	cmp	r3, #12
 8003cb0:	d017      	beq.n	8003ce2 <HAL_RCC_GetSysClockFreq+0x42>
 8003cb2:	2b04      	cmp	r3, #4
 8003cb4:	d008      	beq.n	8003cc8 <HAL_RCC_GetSysClockFreq+0x28>
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003cb6:	4b22      	ldr	r3, [pc, #136]	@ (8003d40 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	041b      	lsls	r3, r3, #16
 8003cbc:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003cbe:	3301      	adds	r3, #1
 8003cc0:	2080      	movs	r0, #128	@ 0x80
 8003cc2:	0200      	lsls	r0, r0, #8
 8003cc4:	4098      	lsls	r0, r3
      break;
 8003cc6:	e00b      	b.n	8003ce0 <HAL_RCC_GetSysClockFreq+0x40>
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003cc8:	4b1d      	ldr	r3, [pc, #116]	@ (8003d40 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	2010      	movs	r0, #16
 8003cce:	4018      	ands	r0, r3
        sysclockfreq =  (HSI_VALUE >> 2);
 8003cd0:	4243      	negs	r3, r0
 8003cd2:	4158      	adcs	r0, r3
 8003cd4:	4240      	negs	r0, r0
 8003cd6:	4b1b      	ldr	r3, [pc, #108]	@ (8003d44 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003cd8:	4018      	ands	r0, r3
 8003cda:	4b1b      	ldr	r3, [pc, #108]	@ (8003d48 <HAL_RCC_GetSysClockFreq+0xa8>)
 8003cdc:	469c      	mov	ip, r3
 8003cde:	4460      	add	r0, ip
    }
  }
  return sysclockfreq;
}
 8003ce0:	bd10      	pop	{r4, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003ce2:	491a      	ldr	r1, [pc, #104]	@ (8003d4c <HAL_RCC_GetSysClockFreq+0xac>)
 8003ce4:	0293      	lsls	r3, r2, #10
 8003ce6:	0f1b      	lsrs	r3, r3, #28
 8003ce8:	5cc8      	ldrb	r0, [r1, r3]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003cea:	0212      	lsls	r2, r2, #8
 8003cec:	0f94      	lsrs	r4, r2, #30
 8003cee:	3401      	adds	r4, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003cf0:	4b13      	ldr	r3, [pc, #76]	@ (8003d40 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	03db      	lsls	r3, r3, #15
 8003cf6:	d509      	bpl.n	8003d0c <HAL_RCC_GetSysClockFreq+0x6c>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003cf8:	4a15      	ldr	r2, [pc, #84]	@ (8003d50 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	2100      	movs	r1, #0
 8003cfe:	f7fc fbd3 	bl	80004a8 <__aeabi_lmul>
 8003d02:	0022      	movs	r2, r4
 8003d04:	2300      	movs	r3, #0
 8003d06:	f7fc fbaf 	bl	8000468 <__aeabi_uldivmod>
 8003d0a:	e7e9      	b.n	8003ce0 <HAL_RCC_GetSysClockFreq+0x40>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003d0c:	4b0c      	ldr	r3, [pc, #48]	@ (8003d40 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	06db      	lsls	r3, r3, #27
 8003d12:	d509      	bpl.n	8003d28 <HAL_RCC_GetSysClockFreq+0x88>
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8003d14:	4a0c      	ldr	r2, [pc, #48]	@ (8003d48 <HAL_RCC_GetSysClockFreq+0xa8>)
 8003d16:	2300      	movs	r3, #0
 8003d18:	2100      	movs	r1, #0
 8003d1a:	f7fc fbc5 	bl	80004a8 <__aeabi_lmul>
 8003d1e:	0022      	movs	r2, r4
 8003d20:	2300      	movs	r3, #0
 8003d22:	f7fc fba1 	bl	8000468 <__aeabi_uldivmod>
 8003d26:	e7db      	b.n	8003ce0 <HAL_RCC_GetSysClockFreq+0x40>
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003d28:	4a0a      	ldr	r2, [pc, #40]	@ (8003d54 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	2100      	movs	r1, #0
 8003d2e:	f7fc fbbb 	bl	80004a8 <__aeabi_lmul>
 8003d32:	0022      	movs	r2, r4
 8003d34:	2300      	movs	r3, #0
 8003d36:	f7fc fb97 	bl	8000468 <__aeabi_uldivmod>
 8003d3a:	e7d1      	b.n	8003ce0 <HAL_RCC_GetSysClockFreq+0x40>
  switch (tmpreg & RCC_CFGR_SWS)
 8003d3c:	4804      	ldr	r0, [pc, #16]	@ (8003d50 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003d3e:	e7cf      	b.n	8003ce0 <HAL_RCC_GetSysClockFreq+0x40>
 8003d40:	40021000 	.word	0x40021000
 8003d44:	00b71b00 	.word	0x00b71b00
 8003d48:	003d0900 	.word	0x003d0900
 8003d4c:	08005b48 	.word	0x08005b48
 8003d50:	007a1200 	.word	0x007a1200
 8003d54:	00f42400 	.word	0x00f42400

08003d58 <HAL_RCC_OscConfig>:
{
 8003d58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d5a:	46d6      	mov	lr, sl
 8003d5c:	464f      	mov	r7, r9
 8003d5e:	4646      	mov	r6, r8
 8003d60:	b5c0      	push	{r6, r7, lr}
 8003d62:	b082      	sub	sp, #8
 8003d64:	1e04      	subs	r4, r0, #0
  if(RCC_OscInitStruct == NULL)
 8003d66:	d100      	bne.n	8003d6a <HAL_RCC_OscConfig+0x12>
 8003d68:	e299      	b.n	800429e <HAL_RCC_OscConfig+0x546>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d6a:	4bc2      	ldr	r3, [pc, #776]	@ (8004074 <HAL_RCC_OscConfig+0x31c>)
 8003d6c:	68da      	ldr	r2, [r3, #12]
 8003d6e:	250c      	movs	r5, #12
 8003d70:	4015      	ands	r5, r2
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d72:	68de      	ldr	r6, [r3, #12]
 8003d74:	2380      	movs	r3, #128	@ 0x80
 8003d76:	025b      	lsls	r3, r3, #9
 8003d78:	401e      	ands	r6, r3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d7a:	6803      	ldr	r3, [r0, #0]
 8003d7c:	07db      	lsls	r3, r3, #31
 8003d7e:	d53c      	bpl.n	8003dfa <HAL_RCC_OscConfig+0xa2>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d80:	2d08      	cmp	r5, #8
 8003d82:	d032      	beq.n	8003dea <HAL_RCC_OscConfig+0x92>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003d84:	2d0c      	cmp	r5, #12
 8003d86:	d02e      	beq.n	8003de6 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d88:	6863      	ldr	r3, [r4, #4]
 8003d8a:	2280      	movs	r2, #128	@ 0x80
 8003d8c:	0252      	lsls	r2, r2, #9
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d05e      	beq.n	8003e50 <HAL_RCC_OscConfig+0xf8>
 8003d92:	22a0      	movs	r2, #160	@ 0xa0
 8003d94:	02d2      	lsls	r2, r2, #11
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d061      	beq.n	8003e5e <HAL_RCC_OscConfig+0x106>
 8003d9a:	4bb6      	ldr	r3, [pc, #728]	@ (8004074 <HAL_RCC_OscConfig+0x31c>)
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	49b6      	ldr	r1, [pc, #728]	@ (8004078 <HAL_RCC_OscConfig+0x320>)
 8003da0:	400a      	ands	r2, r1
 8003da2:	601a      	str	r2, [r3, #0]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	2180      	movs	r1, #128	@ 0x80
 8003da8:	0249      	lsls	r1, r1, #9
 8003daa:	400a      	ands	r2, r1
 8003dac:	9201      	str	r2, [sp, #4]
 8003dae:	9a01      	ldr	r2, [sp, #4]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	49b2      	ldr	r1, [pc, #712]	@ (800407c <HAL_RCC_OscConfig+0x324>)
 8003db4:	400a      	ands	r2, r1
 8003db6:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003db8:	6863      	ldr	r3, [r4, #4]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d05b      	beq.n	8003e76 <HAL_RCC_OscConfig+0x11e>
        tickstart = HAL_GetTick();
 8003dbe:	f7fe ff67 	bl	8002c90 <HAL_GetTick>
 8003dc2:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003dc4:	4bab      	ldr	r3, [pc, #684]	@ (8004074 <HAL_RCC_OscConfig+0x31c>)
 8003dc6:	4699      	mov	r9, r3
 8003dc8:	2380      	movs	r3, #128	@ 0x80
 8003dca:	029b      	lsls	r3, r3, #10
 8003dcc:	4698      	mov	r8, r3
 8003dce:	464b      	mov	r3, r9
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4642      	mov	r2, r8
 8003dd4:	4213      	tst	r3, r2
 8003dd6:	d110      	bne.n	8003dfa <HAL_RCC_OscConfig+0xa2>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003dd8:	f7fe ff5a 	bl	8002c90 <HAL_GetTick>
 8003ddc:	1bc0      	subs	r0, r0, r7
 8003dde:	2864      	cmp	r0, #100	@ 0x64
 8003de0:	d9f5      	bls.n	8003dce <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 8003de2:	2003      	movs	r0, #3
 8003de4:	e25c      	b.n	80042a0 <HAL_RCC_OscConfig+0x548>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003de6:	2e00      	cmp	r6, #0
 8003de8:	d0ce      	beq.n	8003d88 <HAL_RCC_OscConfig+0x30>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dea:	4ba2      	ldr	r3, [pc, #648]	@ (8004074 <HAL_RCC_OscConfig+0x31c>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	039b      	lsls	r3, r3, #14
 8003df0:	d503      	bpl.n	8003dfa <HAL_RCC_OscConfig+0xa2>
 8003df2:	6863      	ldr	r3, [r4, #4]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d100      	bne.n	8003dfa <HAL_RCC_OscConfig+0xa2>
 8003df8:	e258      	b.n	80042ac <HAL_RCC_OscConfig+0x554>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dfa:	6823      	ldr	r3, [r4, #0]
 8003dfc:	079b      	lsls	r3, r3, #30
 8003dfe:	d575      	bpl.n	8003eec <HAL_RCC_OscConfig+0x194>
    hsi_state = RCC_OscInitStruct->HSIState;
 8003e00:	68e3      	ldr	r3, [r4, #12]
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8003e02:	069a      	lsls	r2, r3, #26
 8003e04:	d505      	bpl.n	8003e12 <HAL_RCC_OscConfig+0xba>
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8003e06:	489b      	ldr	r0, [pc, #620]	@ (8004074 <HAL_RCC_OscConfig+0x31c>)
 8003e08:	6802      	ldr	r2, [r0, #0]
 8003e0a:	2120      	movs	r1, #32
 8003e0c:	430a      	orrs	r2, r1
 8003e0e:	6002      	str	r2, [r0, #0]
      hsi_state &= ~RCC_CR_HSIOUTEN;
 8003e10:	438b      	bics	r3, r1
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e12:	2d04      	cmp	r5, #4
 8003e14:	d045      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x14a>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003e16:	2d0c      	cmp	r5, #12
 8003e18:	d041      	beq.n	8003e9e <HAL_RCC_OscConfig+0x146>
      if(hsi_state != RCC_HSI_OFF)
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d100      	bne.n	8003e20 <HAL_RCC_OscConfig+0xc8>
 8003e1e:	e0bc      	b.n	8003f9a <HAL_RCC_OscConfig+0x242>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003e20:	4994      	ldr	r1, [pc, #592]	@ (8004074 <HAL_RCC_OscConfig+0x31c>)
 8003e22:	680a      	ldr	r2, [r1, #0]
 8003e24:	2009      	movs	r0, #9
 8003e26:	4382      	bics	r2, r0
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 8003e2c:	f7fe ff30 	bl	8002c90 <HAL_GetTick>
 8003e30:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003e32:	4b90      	ldr	r3, [pc, #576]	@ (8004074 <HAL_RCC_OscConfig+0x31c>)
 8003e34:	4698      	mov	r8, r3
 8003e36:	2704      	movs	r7, #4
 8003e38:	4643      	mov	r3, r8
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	421f      	tst	r7, r3
 8003e3e:	d000      	beq.n	8003e42 <HAL_RCC_OscConfig+0xea>
 8003e40:	e0a2      	b.n	8003f88 <HAL_RCC_OscConfig+0x230>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e42:	f7fe ff25 	bl	8002c90 <HAL_GetTick>
 8003e46:	1b80      	subs	r0, r0, r6
 8003e48:	2802      	cmp	r0, #2
 8003e4a:	d9f5      	bls.n	8003e38 <HAL_RCC_OscConfig+0xe0>
            return HAL_TIMEOUT;
 8003e4c:	2003      	movs	r0, #3
 8003e4e:	e227      	b.n	80042a0 <HAL_RCC_OscConfig+0x548>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e50:	4a88      	ldr	r2, [pc, #544]	@ (8004074 <HAL_RCC_OscConfig+0x31c>)
 8003e52:	6811      	ldr	r1, [r2, #0]
 8003e54:	2380      	movs	r3, #128	@ 0x80
 8003e56:	025b      	lsls	r3, r3, #9
 8003e58:	430b      	orrs	r3, r1
 8003e5a:	6013      	str	r3, [r2, #0]
 8003e5c:	e7ac      	b.n	8003db8 <HAL_RCC_OscConfig+0x60>
 8003e5e:	4b85      	ldr	r3, [pc, #532]	@ (8004074 <HAL_RCC_OscConfig+0x31c>)
 8003e60:	6819      	ldr	r1, [r3, #0]
 8003e62:	2280      	movs	r2, #128	@ 0x80
 8003e64:	02d2      	lsls	r2, r2, #11
 8003e66:	430a      	orrs	r2, r1
 8003e68:	601a      	str	r2, [r3, #0]
 8003e6a:	6819      	ldr	r1, [r3, #0]
 8003e6c:	2280      	movs	r2, #128	@ 0x80
 8003e6e:	0252      	lsls	r2, r2, #9
 8003e70:	430a      	orrs	r2, r1
 8003e72:	601a      	str	r2, [r3, #0]
 8003e74:	e7a0      	b.n	8003db8 <HAL_RCC_OscConfig+0x60>
        tickstart = HAL_GetTick();
 8003e76:	f7fe ff0b 	bl	8002c90 <HAL_GetTick>
 8003e7a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003e7c:	4b7d      	ldr	r3, [pc, #500]	@ (8004074 <HAL_RCC_OscConfig+0x31c>)
 8003e7e:	4699      	mov	r9, r3
 8003e80:	2380      	movs	r3, #128	@ 0x80
 8003e82:	029b      	lsls	r3, r3, #10
 8003e84:	4698      	mov	r8, r3
 8003e86:	464b      	mov	r3, r9
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4642      	mov	r2, r8
 8003e8c:	4213      	tst	r3, r2
 8003e8e:	d0b4      	beq.n	8003dfa <HAL_RCC_OscConfig+0xa2>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e90:	f7fe fefe 	bl	8002c90 <HAL_GetTick>
 8003e94:	1bc0      	subs	r0, r0, r7
 8003e96:	2864      	cmp	r0, #100	@ 0x64
 8003e98:	d9f5      	bls.n	8003e86 <HAL_RCC_OscConfig+0x12e>
            return HAL_TIMEOUT;
 8003e9a:	2003      	movs	r0, #3
 8003e9c:	e200      	b.n	80042a0 <HAL_RCC_OscConfig+0x548>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003e9e:	2e00      	cmp	r6, #0
 8003ea0:	d1bb      	bne.n	8003e1a <HAL_RCC_OscConfig+0xc2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8003ea2:	4a74      	ldr	r2, [pc, #464]	@ (8004074 <HAL_RCC_OscConfig+0x31c>)
 8003ea4:	6812      	ldr	r2, [r2, #0]
 8003ea6:	0752      	lsls	r2, r2, #29
 8003ea8:	d502      	bpl.n	8003eb0 <HAL_RCC_OscConfig+0x158>
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d100      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x158>
 8003eae:	e1ff      	b.n	80042b0 <HAL_RCC_OscConfig+0x558>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eb0:	4e70      	ldr	r6, [pc, #448]	@ (8004074 <HAL_RCC_OscConfig+0x31c>)
 8003eb2:	6871      	ldr	r1, [r6, #4]
 8003eb4:	6922      	ldr	r2, [r4, #16]
 8003eb6:	0212      	lsls	r2, r2, #8
 8003eb8:	4871      	ldr	r0, [pc, #452]	@ (8004080 <HAL_RCC_OscConfig+0x328>)
 8003eba:	4001      	ands	r1, r0
 8003ebc:	430a      	orrs	r2, r1
 8003ebe:	6072      	str	r2, [r6, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003ec0:	6832      	ldr	r2, [r6, #0]
 8003ec2:	2109      	movs	r1, #9
 8003ec4:	438a      	bics	r2, r1
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	6033      	str	r3, [r6, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003eca:	f7ff fee9 	bl	8003ca0 <HAL_RCC_GetSysClockFreq>
 8003ece:	68f3      	ldr	r3, [r6, #12]
 8003ed0:	496c      	ldr	r1, [pc, #432]	@ (8004084 <HAL_RCC_OscConfig+0x32c>)
 8003ed2:	4a6d      	ldr	r2, [pc, #436]	@ (8004088 <HAL_RCC_OscConfig+0x330>)
 8003ed4:	061b      	lsls	r3, r3, #24
 8003ed6:	0f1b      	lsrs	r3, r3, #28
 8003ed8:	5cd3      	ldrb	r3, [r2, r3]
 8003eda:	40d8      	lsrs	r0, r3
 8003edc:	6008      	str	r0, [r1, #0]
      status = HAL_InitTick (uwTickPrio);
 8003ede:	4b6b      	ldr	r3, [pc, #428]	@ (800408c <HAL_RCC_OscConfig+0x334>)
 8003ee0:	6818      	ldr	r0, [r3, #0]
 8003ee2:	f7fe fe8f 	bl	8002c04 <HAL_InitTick>
      if(status != HAL_OK)
 8003ee6:	2800      	cmp	r0, #0
 8003ee8:	d000      	beq.n	8003eec <HAL_RCC_OscConfig+0x194>
 8003eea:	e1d9      	b.n	80042a0 <HAL_RCC_OscConfig+0x548>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003eec:	6823      	ldr	r3, [r4, #0]
 8003eee:	06db      	lsls	r3, r3, #27
 8003ef0:	d52c      	bpl.n	8003f4c <HAL_RCC_OscConfig+0x1f4>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ef2:	2d00      	cmp	r5, #0
 8003ef4:	d167      	bne.n	8003fc6 <HAL_RCC_OscConfig+0x26e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003ef6:	4b5f      	ldr	r3, [pc, #380]	@ (8004074 <HAL_RCC_OscConfig+0x31c>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	059b      	lsls	r3, r3, #22
 8003efc:	d503      	bpl.n	8003f06 <HAL_RCC_OscConfig+0x1ae>
 8003efe:	69a3      	ldr	r3, [r4, #24]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d100      	bne.n	8003f06 <HAL_RCC_OscConfig+0x1ae>
 8003f04:	e1d6      	b.n	80042b4 <HAL_RCC_OscConfig+0x55c>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f06:	4b5b      	ldr	r3, [pc, #364]	@ (8004074 <HAL_RCC_OscConfig+0x31c>)
 8003f08:	685a      	ldr	r2, [r3, #4]
 8003f0a:	4961      	ldr	r1, [pc, #388]	@ (8004090 <HAL_RCC_OscConfig+0x338>)
 8003f0c:	400a      	ands	r2, r1
 8003f0e:	6a21      	ldr	r1, [r4, #32]
 8003f10:	430a      	orrs	r2, r1
 8003f12:	605a      	str	r2, [r3, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f14:	6859      	ldr	r1, [r3, #4]
 8003f16:	69e2      	ldr	r2, [r4, #28]
 8003f18:	0612      	lsls	r2, r2, #24
 8003f1a:	0209      	lsls	r1, r1, #8
 8003f1c:	0a09      	lsrs	r1, r1, #8
 8003f1e:	430a      	orrs	r2, r1
 8003f20:	605a      	str	r2, [r3, #4]
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003f22:	68da      	ldr	r2, [r3, #12]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003f24:	4857      	ldr	r0, [pc, #348]	@ (8004084 <HAL_RCC_OscConfig+0x32c>)
 8003f26:	6a21      	ldr	r1, [r4, #32]
 8003f28:	0b49      	lsrs	r1, r1, #13
 8003f2a:	3101      	adds	r1, #1
 8003f2c:	2380      	movs	r3, #128	@ 0x80
 8003f2e:	021b      	lsls	r3, r3, #8
 8003f30:	408b      	lsls	r3, r1
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003f32:	4955      	ldr	r1, [pc, #340]	@ (8004088 <HAL_RCC_OscConfig+0x330>)
 8003f34:	0612      	lsls	r2, r2, #24
 8003f36:	0f12      	lsrs	r2, r2, #28
 8003f38:	5c8a      	ldrb	r2, [r1, r2]
 8003f3a:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003f3c:	6003      	str	r3, [r0, #0]
        status = HAL_InitTick (uwTickPrio);
 8003f3e:	4b53      	ldr	r3, [pc, #332]	@ (800408c <HAL_RCC_OscConfig+0x334>)
 8003f40:	6818      	ldr	r0, [r3, #0]
 8003f42:	f7fe fe5f 	bl	8002c04 <HAL_InitTick>
        if(status != HAL_OK)
 8003f46:	2800      	cmp	r0, #0
 8003f48:	d000      	beq.n	8003f4c <HAL_RCC_OscConfig+0x1f4>
 8003f4a:	e1a9      	b.n	80042a0 <HAL_RCC_OscConfig+0x548>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f4c:	6823      	ldr	r3, [r4, #0]
 8003f4e:	071b      	lsls	r3, r3, #28
 8003f50:	d400      	bmi.n	8003f54 <HAL_RCC_OscConfig+0x1fc>
 8003f52:	e0a1      	b.n	8004098 <HAL_RCC_OscConfig+0x340>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f54:	6963      	ldr	r3, [r4, #20]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d076      	beq.n	8004048 <HAL_RCC_OscConfig+0x2f0>
      __HAL_RCC_LSI_ENABLE();
 8003f5a:	4a46      	ldr	r2, [pc, #280]	@ (8004074 <HAL_RCC_OscConfig+0x31c>)
 8003f5c:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8003f5e:	2101      	movs	r1, #1
 8003f60:	430b      	orrs	r3, r1
 8003f62:	6513      	str	r3, [r2, #80]	@ 0x50
      tickstart = HAL_GetTick();
 8003f64:	f7fe fe94 	bl	8002c90 <HAL_GetTick>
 8003f68:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003f6a:	4b42      	ldr	r3, [pc, #264]	@ (8004074 <HAL_RCC_OscConfig+0x31c>)
 8003f6c:	4698      	mov	r8, r3
 8003f6e:	2702      	movs	r7, #2
 8003f70:	4643      	mov	r3, r8
 8003f72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f74:	421f      	tst	r7, r3
 8003f76:	d000      	beq.n	8003f7a <HAL_RCC_OscConfig+0x222>
 8003f78:	e08e      	b.n	8004098 <HAL_RCC_OscConfig+0x340>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f7a:	f7fe fe89 	bl	8002c90 <HAL_GetTick>
 8003f7e:	1b80      	subs	r0, r0, r6
 8003f80:	2802      	cmp	r0, #2
 8003f82:	d9f5      	bls.n	8003f70 <HAL_RCC_OscConfig+0x218>
          return HAL_TIMEOUT;
 8003f84:	2003      	movs	r0, #3
 8003f86:	e18b      	b.n	80042a0 <HAL_RCC_OscConfig+0x548>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f88:	493a      	ldr	r1, [pc, #232]	@ (8004074 <HAL_RCC_OscConfig+0x31c>)
 8003f8a:	684a      	ldr	r2, [r1, #4]
 8003f8c:	6923      	ldr	r3, [r4, #16]
 8003f8e:	021b      	lsls	r3, r3, #8
 8003f90:	483b      	ldr	r0, [pc, #236]	@ (8004080 <HAL_RCC_OscConfig+0x328>)
 8003f92:	4002      	ands	r2, r0
 8003f94:	4313      	orrs	r3, r2
 8003f96:	604b      	str	r3, [r1, #4]
 8003f98:	e7a8      	b.n	8003eec <HAL_RCC_OscConfig+0x194>
        __HAL_RCC_HSI_DISABLE();
 8003f9a:	4a36      	ldr	r2, [pc, #216]	@ (8004074 <HAL_RCC_OscConfig+0x31c>)
 8003f9c:	6813      	ldr	r3, [r2, #0]
 8003f9e:	2101      	movs	r1, #1
 8003fa0:	438b      	bics	r3, r1
 8003fa2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003fa4:	f7fe fe74 	bl	8002c90 <HAL_GetTick>
 8003fa8:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003faa:	4b32      	ldr	r3, [pc, #200]	@ (8004074 <HAL_RCC_OscConfig+0x31c>)
 8003fac:	4698      	mov	r8, r3
 8003fae:	2704      	movs	r7, #4
 8003fb0:	4643      	mov	r3, r8
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	421f      	tst	r7, r3
 8003fb6:	d099      	beq.n	8003eec <HAL_RCC_OscConfig+0x194>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fb8:	f7fe fe6a 	bl	8002c90 <HAL_GetTick>
 8003fbc:	1b80      	subs	r0, r0, r6
 8003fbe:	2802      	cmp	r0, #2
 8003fc0:	d9f6      	bls.n	8003fb0 <HAL_RCC_OscConfig+0x258>
            return HAL_TIMEOUT;
 8003fc2:	2003      	movs	r0, #3
 8003fc4:	e16c      	b.n	80042a0 <HAL_RCC_OscConfig+0x548>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003fc6:	69a3      	ldr	r3, [r4, #24]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d026      	beq.n	800401a <HAL_RCC_OscConfig+0x2c2>
        __HAL_RCC_MSI_ENABLE();
 8003fcc:	4a29      	ldr	r2, [pc, #164]	@ (8004074 <HAL_RCC_OscConfig+0x31c>)
 8003fce:	6811      	ldr	r1, [r2, #0]
 8003fd0:	2380      	movs	r3, #128	@ 0x80
 8003fd2:	005b      	lsls	r3, r3, #1
 8003fd4:	430b      	orrs	r3, r1
 8003fd6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003fd8:	f7fe fe5a 	bl	8002c90 <HAL_GetTick>
 8003fdc:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003fde:	4b25      	ldr	r3, [pc, #148]	@ (8004074 <HAL_RCC_OscConfig+0x31c>)
 8003fe0:	4698      	mov	r8, r3
 8003fe2:	2780      	movs	r7, #128	@ 0x80
 8003fe4:	00bf      	lsls	r7, r7, #2
 8003fe6:	4643      	mov	r3, r8
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	423b      	tst	r3, r7
 8003fec:	d106      	bne.n	8003ffc <HAL_RCC_OscConfig+0x2a4>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003fee:	f7fe fe4f 	bl	8002c90 <HAL_GetTick>
 8003ff2:	1b80      	subs	r0, r0, r6
 8003ff4:	2802      	cmp	r0, #2
 8003ff6:	d9f6      	bls.n	8003fe6 <HAL_RCC_OscConfig+0x28e>
            return HAL_TIMEOUT;
 8003ff8:	2003      	movs	r0, #3
 8003ffa:	e151      	b.n	80042a0 <HAL_RCC_OscConfig+0x548>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ffc:	491d      	ldr	r1, [pc, #116]	@ (8004074 <HAL_RCC_OscConfig+0x31c>)
 8003ffe:	684b      	ldr	r3, [r1, #4]
 8004000:	4a23      	ldr	r2, [pc, #140]	@ (8004090 <HAL_RCC_OscConfig+0x338>)
 8004002:	4013      	ands	r3, r2
 8004004:	6a22      	ldr	r2, [r4, #32]
 8004006:	4313      	orrs	r3, r2
 8004008:	604b      	str	r3, [r1, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800400a:	684a      	ldr	r2, [r1, #4]
 800400c:	69e3      	ldr	r3, [r4, #28]
 800400e:	061b      	lsls	r3, r3, #24
 8004010:	0212      	lsls	r2, r2, #8
 8004012:	0a12      	lsrs	r2, r2, #8
 8004014:	4313      	orrs	r3, r2
 8004016:	604b      	str	r3, [r1, #4]
 8004018:	e798      	b.n	8003f4c <HAL_RCC_OscConfig+0x1f4>
        __HAL_RCC_MSI_DISABLE();
 800401a:	4a16      	ldr	r2, [pc, #88]	@ (8004074 <HAL_RCC_OscConfig+0x31c>)
 800401c:	6813      	ldr	r3, [r2, #0]
 800401e:	491d      	ldr	r1, [pc, #116]	@ (8004094 <HAL_RCC_OscConfig+0x33c>)
 8004020:	400b      	ands	r3, r1
 8004022:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004024:	f7fe fe34 	bl	8002c90 <HAL_GetTick>
 8004028:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800402a:	4b12      	ldr	r3, [pc, #72]	@ (8004074 <HAL_RCC_OscConfig+0x31c>)
 800402c:	4698      	mov	r8, r3
 800402e:	2780      	movs	r7, #128	@ 0x80
 8004030:	00bf      	lsls	r7, r7, #2
 8004032:	4643      	mov	r3, r8
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	423b      	tst	r3, r7
 8004038:	d088      	beq.n	8003f4c <HAL_RCC_OscConfig+0x1f4>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800403a:	f7fe fe29 	bl	8002c90 <HAL_GetTick>
 800403e:	1b80      	subs	r0, r0, r6
 8004040:	2802      	cmp	r0, #2
 8004042:	d9f6      	bls.n	8004032 <HAL_RCC_OscConfig+0x2da>
            return HAL_TIMEOUT;
 8004044:	2003      	movs	r0, #3
 8004046:	e12b      	b.n	80042a0 <HAL_RCC_OscConfig+0x548>
      __HAL_RCC_LSI_DISABLE();
 8004048:	4a0a      	ldr	r2, [pc, #40]	@ (8004074 <HAL_RCC_OscConfig+0x31c>)
 800404a:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800404c:	2101      	movs	r1, #1
 800404e:	438b      	bics	r3, r1
 8004050:	6513      	str	r3, [r2, #80]	@ 0x50
      tickstart = HAL_GetTick();
 8004052:	f7fe fe1d 	bl	8002c90 <HAL_GetTick>
 8004056:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004058:	4b06      	ldr	r3, [pc, #24]	@ (8004074 <HAL_RCC_OscConfig+0x31c>)
 800405a:	4698      	mov	r8, r3
 800405c:	2702      	movs	r7, #2
 800405e:	4643      	mov	r3, r8
 8004060:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004062:	421f      	tst	r7, r3
 8004064:	d018      	beq.n	8004098 <HAL_RCC_OscConfig+0x340>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004066:	f7fe fe13 	bl	8002c90 <HAL_GetTick>
 800406a:	1b80      	subs	r0, r0, r6
 800406c:	2802      	cmp	r0, #2
 800406e:	d9f6      	bls.n	800405e <HAL_RCC_OscConfig+0x306>
          return HAL_TIMEOUT;
 8004070:	2003      	movs	r0, #3
 8004072:	e115      	b.n	80042a0 <HAL_RCC_OscConfig+0x548>
 8004074:	40021000 	.word	0x40021000
 8004078:	fffeffff 	.word	0xfffeffff
 800407c:	fffbffff 	.word	0xfffbffff
 8004080:	ffffe0ff 	.word	0xffffe0ff
 8004084:	20000854 	.word	0x20000854
 8004088:	08005b5c 	.word	0x08005b5c
 800408c:	2000085c 	.word	0x2000085c
 8004090:	ffff1fff 	.word	0xffff1fff
 8004094:	fffffeff 	.word	0xfffffeff
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004098:	6823      	ldr	r3, [r4, #0]
 800409a:	075b      	lsls	r3, r3, #29
 800409c:	d400      	bmi.n	80040a0 <HAL_RCC_OscConfig+0x348>
 800409e:	e088      	b.n	80041b2 <HAL_RCC_OscConfig+0x45a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040a0:	4b86      	ldr	r3, [pc, #536]	@ (80042bc <HAL_RCC_OscConfig+0x564>)
 80040a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
    FlagStatus       pwrclkchanged = RESET;
 80040a4:	2200      	movs	r2, #0
 80040a6:	4692      	mov	sl, r2
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040a8:	00db      	lsls	r3, r3, #3
 80040aa:	d407      	bmi.n	80040bc <HAL_RCC_OscConfig+0x364>
      __HAL_RCC_PWR_CLK_ENABLE();
 80040ac:	4a83      	ldr	r2, [pc, #524]	@ (80042bc <HAL_RCC_OscConfig+0x564>)
 80040ae:	6b91      	ldr	r1, [r2, #56]	@ 0x38
 80040b0:	2380      	movs	r3, #128	@ 0x80
 80040b2:	055b      	lsls	r3, r3, #21
 80040b4:	430b      	orrs	r3, r1
 80040b6:	6393      	str	r3, [r2, #56]	@ 0x38
      pwrclkchanged = SET;
 80040b8:	2301      	movs	r3, #1
 80040ba:	469a      	mov	sl, r3
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040bc:	4b80      	ldr	r3, [pc, #512]	@ (80042c0 <HAL_RCC_OscConfig+0x568>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	05db      	lsls	r3, r3, #23
 80040c2:	d510      	bpl.n	80040e6 <HAL_RCC_OscConfig+0x38e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040c4:	68a3      	ldr	r3, [r4, #8]
 80040c6:	2280      	movs	r2, #128	@ 0x80
 80040c8:	0052      	lsls	r2, r2, #1
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d023      	beq.n	8004116 <HAL_RCC_OscConfig+0x3be>
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d13e      	bne.n	8004150 <HAL_RCC_OscConfig+0x3f8>
 80040d2:	4b7a      	ldr	r3, [pc, #488]	@ (80042bc <HAL_RCC_OscConfig+0x564>)
 80040d4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80040d6:	497b      	ldr	r1, [pc, #492]	@ (80042c4 <HAL_RCC_OscConfig+0x56c>)
 80040d8:	400a      	ands	r2, r1
 80040da:	651a      	str	r2, [r3, #80]	@ 0x50
 80040dc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80040de:	497a      	ldr	r1, [pc, #488]	@ (80042c8 <HAL_RCC_OscConfig+0x570>)
 80040e0:	400a      	ands	r2, r1
 80040e2:	651a      	str	r2, [r3, #80]	@ 0x50
 80040e4:	e01d      	b.n	8004122 <HAL_RCC_OscConfig+0x3ca>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040e6:	4a76      	ldr	r2, [pc, #472]	@ (80042c0 <HAL_RCC_OscConfig+0x568>)
 80040e8:	6811      	ldr	r1, [r2, #0]
 80040ea:	2380      	movs	r3, #128	@ 0x80
 80040ec:	005b      	lsls	r3, r3, #1
 80040ee:	430b      	orrs	r3, r1
 80040f0:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80040f2:	f7fe fdcd 	bl	8002c90 <HAL_GetTick>
 80040f6:	0006      	movs	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040f8:	4b71      	ldr	r3, [pc, #452]	@ (80042c0 <HAL_RCC_OscConfig+0x568>)
 80040fa:	4698      	mov	r8, r3
 80040fc:	2780      	movs	r7, #128	@ 0x80
 80040fe:	007f      	lsls	r7, r7, #1
 8004100:	4643      	mov	r3, r8
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	423b      	tst	r3, r7
 8004106:	d1dd      	bne.n	80040c4 <HAL_RCC_OscConfig+0x36c>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004108:	f7fe fdc2 	bl	8002c90 <HAL_GetTick>
 800410c:	1b80      	subs	r0, r0, r6
 800410e:	2864      	cmp	r0, #100	@ 0x64
 8004110:	d9f6      	bls.n	8004100 <HAL_RCC_OscConfig+0x3a8>
          return HAL_TIMEOUT;
 8004112:	2003      	movs	r0, #3
 8004114:	e0c4      	b.n	80042a0 <HAL_RCC_OscConfig+0x548>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004116:	4a69      	ldr	r2, [pc, #420]	@ (80042bc <HAL_RCC_OscConfig+0x564>)
 8004118:	6d11      	ldr	r1, [r2, #80]	@ 0x50
 800411a:	2380      	movs	r3, #128	@ 0x80
 800411c:	005b      	lsls	r3, r3, #1
 800411e:	430b      	orrs	r3, r1
 8004120:	6513      	str	r3, [r2, #80]	@ 0x50
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004122:	68a3      	ldr	r3, [r4, #8]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d02d      	beq.n	8004184 <HAL_RCC_OscConfig+0x42c>
      tickstart = HAL_GetTick();
 8004128:	f7fe fdb2 	bl	8002c90 <HAL_GetTick>
 800412c:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800412e:	4b63      	ldr	r3, [pc, #396]	@ (80042bc <HAL_RCC_OscConfig+0x564>)
 8004130:	4698      	mov	r8, r3
 8004132:	2780      	movs	r7, #128	@ 0x80
 8004134:	00bf      	lsls	r7, r7, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004136:	4b65      	ldr	r3, [pc, #404]	@ (80042cc <HAL_RCC_OscConfig+0x574>)
 8004138:	4699      	mov	r9, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800413a:	4643      	mov	r3, r8
 800413c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800413e:	423b      	tst	r3, r7
 8004140:	d134      	bne.n	80041ac <HAL_RCC_OscConfig+0x454>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004142:	f7fe fda5 	bl	8002c90 <HAL_GetTick>
 8004146:	1b80      	subs	r0, r0, r6
 8004148:	4548      	cmp	r0, r9
 800414a:	d9f6      	bls.n	800413a <HAL_RCC_OscConfig+0x3e2>
          return HAL_TIMEOUT;
 800414c:	2003      	movs	r0, #3
 800414e:	e0a7      	b.n	80042a0 <HAL_RCC_OscConfig+0x548>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004150:	22a0      	movs	r2, #160	@ 0xa0
 8004152:	00d2      	lsls	r2, r2, #3
 8004154:	4293      	cmp	r3, r2
 8004156:	d009      	beq.n	800416c <HAL_RCC_OscConfig+0x414>
 8004158:	4b58      	ldr	r3, [pc, #352]	@ (80042bc <HAL_RCC_OscConfig+0x564>)
 800415a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800415c:	4959      	ldr	r1, [pc, #356]	@ (80042c4 <HAL_RCC_OscConfig+0x56c>)
 800415e:	400a      	ands	r2, r1
 8004160:	651a      	str	r2, [r3, #80]	@ 0x50
 8004162:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004164:	4958      	ldr	r1, [pc, #352]	@ (80042c8 <HAL_RCC_OscConfig+0x570>)
 8004166:	400a      	ands	r2, r1
 8004168:	651a      	str	r2, [r3, #80]	@ 0x50
 800416a:	e7da      	b.n	8004122 <HAL_RCC_OscConfig+0x3ca>
 800416c:	4b53      	ldr	r3, [pc, #332]	@ (80042bc <HAL_RCC_OscConfig+0x564>)
 800416e:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004170:	3a01      	subs	r2, #1
 8004172:	3aff      	subs	r2, #255	@ 0xff
 8004174:	430a      	orrs	r2, r1
 8004176:	651a      	str	r2, [r3, #80]	@ 0x50
 8004178:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800417a:	2280      	movs	r2, #128	@ 0x80
 800417c:	0052      	lsls	r2, r2, #1
 800417e:	430a      	orrs	r2, r1
 8004180:	651a      	str	r2, [r3, #80]	@ 0x50
 8004182:	e7ce      	b.n	8004122 <HAL_RCC_OscConfig+0x3ca>
      tickstart = HAL_GetTick();
 8004184:	f7fe fd84 	bl	8002c90 <HAL_GetTick>
 8004188:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800418a:	4b4c      	ldr	r3, [pc, #304]	@ (80042bc <HAL_RCC_OscConfig+0x564>)
 800418c:	4698      	mov	r8, r3
 800418e:	2780      	movs	r7, #128	@ 0x80
 8004190:	00bf      	lsls	r7, r7, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004192:	4b4e      	ldr	r3, [pc, #312]	@ (80042cc <HAL_RCC_OscConfig+0x574>)
 8004194:	4699      	mov	r9, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004196:	4643      	mov	r3, r8
 8004198:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800419a:	423b      	tst	r3, r7
 800419c:	d006      	beq.n	80041ac <HAL_RCC_OscConfig+0x454>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800419e:	f7fe fd77 	bl	8002c90 <HAL_GetTick>
 80041a2:	1b80      	subs	r0, r0, r6
 80041a4:	4548      	cmp	r0, r9
 80041a6:	d9f6      	bls.n	8004196 <HAL_RCC_OscConfig+0x43e>
          return HAL_TIMEOUT;
 80041a8:	2003      	movs	r0, #3
 80041aa:	e079      	b.n	80042a0 <HAL_RCC_OscConfig+0x548>
    if(pwrclkchanged == SET)
 80041ac:	4653      	mov	r3, sl
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d01c      	beq.n	80041ec <HAL_RCC_OscConfig+0x494>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041b2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
  return HAL_OK;
 80041b4:	2000      	movs	r0, #0
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d072      	beq.n	80042a0 <HAL_RCC_OscConfig+0x548>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80041ba:	2d0c      	cmp	r5, #12
 80041bc:	d055      	beq.n	800426a <HAL_RCC_OscConfig+0x512>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041be:	2b02      	cmp	r3, #2
 80041c0:	d01a      	beq.n	80041f8 <HAL_RCC_OscConfig+0x4a0>
        __HAL_RCC_PLL_DISABLE();
 80041c2:	4a3e      	ldr	r2, [pc, #248]	@ (80042bc <HAL_RCC_OscConfig+0x564>)
 80041c4:	6813      	ldr	r3, [r2, #0]
 80041c6:	4942      	ldr	r1, [pc, #264]	@ (80042d0 <HAL_RCC_OscConfig+0x578>)
 80041c8:	400b      	ands	r3, r1
 80041ca:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80041cc:	f7fe fd60 	bl	8002c90 <HAL_GetTick>
 80041d0:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80041d2:	4e3a      	ldr	r6, [pc, #232]	@ (80042bc <HAL_RCC_OscConfig+0x564>)
 80041d4:	2580      	movs	r5, #128	@ 0x80
 80041d6:	04ad      	lsls	r5, r5, #18
 80041d8:	6833      	ldr	r3, [r6, #0]
 80041da:	422b      	tst	r3, r5
 80041dc:	d043      	beq.n	8004266 <HAL_RCC_OscConfig+0x50e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041de:	f7fe fd57 	bl	8002c90 <HAL_GetTick>
 80041e2:	1b00      	subs	r0, r0, r4
 80041e4:	2802      	cmp	r0, #2
 80041e6:	d9f7      	bls.n	80041d8 <HAL_RCC_OscConfig+0x480>
            return HAL_TIMEOUT;
 80041e8:	2003      	movs	r0, #3
 80041ea:	e059      	b.n	80042a0 <HAL_RCC_OscConfig+0x548>
      __HAL_RCC_PWR_CLK_DISABLE();
 80041ec:	4a33      	ldr	r2, [pc, #204]	@ (80042bc <HAL_RCC_OscConfig+0x564>)
 80041ee:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 80041f0:	4938      	ldr	r1, [pc, #224]	@ (80042d4 <HAL_RCC_OscConfig+0x57c>)
 80041f2:	400b      	ands	r3, r1
 80041f4:	6393      	str	r3, [r2, #56]	@ 0x38
 80041f6:	e7dc      	b.n	80041b2 <HAL_RCC_OscConfig+0x45a>
        __HAL_RCC_PLL_DISABLE();
 80041f8:	4a30      	ldr	r2, [pc, #192]	@ (80042bc <HAL_RCC_OscConfig+0x564>)
 80041fa:	6813      	ldr	r3, [r2, #0]
 80041fc:	4934      	ldr	r1, [pc, #208]	@ (80042d0 <HAL_RCC_OscConfig+0x578>)
 80041fe:	400b      	ands	r3, r1
 8004200:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004202:	f7fe fd45 	bl	8002c90 <HAL_GetTick>
 8004206:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004208:	4f2c      	ldr	r7, [pc, #176]	@ (80042bc <HAL_RCC_OscConfig+0x564>)
 800420a:	2680      	movs	r6, #128	@ 0x80
 800420c:	04b6      	lsls	r6, r6, #18
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	4233      	tst	r3, r6
 8004212:	d006      	beq.n	8004222 <HAL_RCC_OscConfig+0x4ca>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004214:	f7fe fd3c 	bl	8002c90 <HAL_GetTick>
 8004218:	1b40      	subs	r0, r0, r5
 800421a:	2802      	cmp	r0, #2
 800421c:	d9f7      	bls.n	800420e <HAL_RCC_OscConfig+0x4b6>
            return HAL_TIMEOUT;
 800421e:	2003      	movs	r0, #3
 8004220:	e03e      	b.n	80042a0 <HAL_RCC_OscConfig+0x548>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004222:	4a26      	ldr	r2, [pc, #152]	@ (80042bc <HAL_RCC_OscConfig+0x564>)
 8004224:	68d1      	ldr	r1, [r2, #12]
 8004226:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004228:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800422a:	4303      	orrs	r3, r0
 800422c:	482a      	ldr	r0, [pc, #168]	@ (80042d8 <HAL_RCC_OscConfig+0x580>)
 800422e:	4001      	ands	r1, r0
 8004230:	430b      	orrs	r3, r1
 8004232:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004234:	430b      	orrs	r3, r1
 8004236:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLL_ENABLE();
 8004238:	6811      	ldr	r1, [r2, #0]
 800423a:	2380      	movs	r3, #128	@ 0x80
 800423c:	045b      	lsls	r3, r3, #17
 800423e:	430b      	orrs	r3, r1
 8004240:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004242:	f7fe fd25 	bl	8002c90 <HAL_GetTick>
 8004246:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004248:	4e1c      	ldr	r6, [pc, #112]	@ (80042bc <HAL_RCC_OscConfig+0x564>)
 800424a:	2580      	movs	r5, #128	@ 0x80
 800424c:	04ad      	lsls	r5, r5, #18
 800424e:	6833      	ldr	r3, [r6, #0]
 8004250:	422b      	tst	r3, r5
 8004252:	d106      	bne.n	8004262 <HAL_RCC_OscConfig+0x50a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004254:	f7fe fd1c 	bl	8002c90 <HAL_GetTick>
 8004258:	1b00      	subs	r0, r0, r4
 800425a:	2802      	cmp	r0, #2
 800425c:	d9f7      	bls.n	800424e <HAL_RCC_OscConfig+0x4f6>
            return HAL_TIMEOUT;
 800425e:	2003      	movs	r0, #3
 8004260:	e01e      	b.n	80042a0 <HAL_RCC_OscConfig+0x548>
  return HAL_OK;
 8004262:	2000      	movs	r0, #0
 8004264:	e01c      	b.n	80042a0 <HAL_RCC_OscConfig+0x548>
 8004266:	2000      	movs	r0, #0
 8004268:	e01a      	b.n	80042a0 <HAL_RCC_OscConfig+0x548>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800426a:	2b01      	cmp	r3, #1
 800426c:	d024      	beq.n	80042b8 <HAL_RCC_OscConfig+0x560>
        pll_config = RCC->CFGR;
 800426e:	4b13      	ldr	r3, [pc, #76]	@ (80042bc <HAL_RCC_OscConfig+0x564>)
 8004270:	68db      	ldr	r3, [r3, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004272:	2280      	movs	r2, #128	@ 0x80
 8004274:	0252      	lsls	r2, r2, #9
 8004276:	401a      	ands	r2, r3
 8004278:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
          return HAL_ERROR;
 800427a:	2001      	movs	r0, #1
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800427c:	428a      	cmp	r2, r1
 800427e:	d10f      	bne.n	80042a0 <HAL_RCC_OscConfig+0x548>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004280:	22f0      	movs	r2, #240	@ 0xf0
 8004282:	0392      	lsls	r2, r2, #14
 8004284:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004286:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8004288:	428a      	cmp	r2, r1
 800428a:	d109      	bne.n	80042a0 <HAL_RCC_OscConfig+0x548>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800428c:	22c0      	movs	r2, #192	@ 0xc0
 800428e:	0412      	lsls	r2, r2, #16
 8004290:	4013      	ands	r3, r2
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004292:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8004294:	1a9b      	subs	r3, r3, r2
 8004296:	1e5a      	subs	r2, r3, #1
 8004298:	4193      	sbcs	r3, r2
 800429a:	b2d8      	uxtb	r0, r3
 800429c:	e000      	b.n	80042a0 <HAL_RCC_OscConfig+0x548>
    return HAL_ERROR;
 800429e:	2001      	movs	r0, #1
}
 80042a0:	b002      	add	sp, #8
 80042a2:	bce0      	pop	{r5, r6, r7}
 80042a4:	46ba      	mov	sl, r7
 80042a6:	46b1      	mov	r9, r6
 80042a8:	46a8      	mov	r8, r5
 80042aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return HAL_ERROR;
 80042ac:	2001      	movs	r0, #1
 80042ae:	e7f7      	b.n	80042a0 <HAL_RCC_OscConfig+0x548>
        return HAL_ERROR;
 80042b0:	2001      	movs	r0, #1
 80042b2:	e7f5      	b.n	80042a0 <HAL_RCC_OscConfig+0x548>
        return HAL_ERROR;
 80042b4:	2001      	movs	r0, #1
 80042b6:	e7f3      	b.n	80042a0 <HAL_RCC_OscConfig+0x548>
        return HAL_ERROR;
 80042b8:	2001      	movs	r0, #1
 80042ba:	e7f1      	b.n	80042a0 <HAL_RCC_OscConfig+0x548>
 80042bc:	40021000 	.word	0x40021000
 80042c0:	40007000 	.word	0x40007000
 80042c4:	fffffeff 	.word	0xfffffeff
 80042c8:	fffffbff 	.word	0xfffffbff
 80042cc:	00001388 	.word	0x00001388
 80042d0:	feffffff 	.word	0xfeffffff
 80042d4:	efffffff 	.word	0xefffffff
 80042d8:	ff02ffff 	.word	0xff02ffff

080042dc <HAL_RCC_ClockConfig>:
{
 80042dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042de:	46ce      	mov	lr, r9
 80042e0:	4647      	mov	r7, r8
 80042e2:	b580      	push	{r7, lr}
 80042e4:	0004      	movs	r4, r0
 80042e6:	000d      	movs	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80042e8:	2800      	cmp	r0, #0
 80042ea:	d100      	bne.n	80042ee <HAL_RCC_ClockConfig+0x12>
 80042ec:	e0e2      	b.n	80044b4 <HAL_RCC_ClockConfig+0x1d8>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042ee:	4b73      	ldr	r3, [pc, #460]	@ (80044bc <HAL_RCC_ClockConfig+0x1e0>)
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	2301      	movs	r3, #1
 80042f4:	4013      	ands	r3, r2
 80042f6:	428b      	cmp	r3, r1
 80042f8:	d31a      	bcc.n	8004330 <HAL_RCC_ClockConfig+0x54>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042fa:	6823      	ldr	r3, [r4, #0]
 80042fc:	079b      	lsls	r3, r3, #30
 80042fe:	d506      	bpl.n	800430e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004300:	4a6f      	ldr	r2, [pc, #444]	@ (80044c0 <HAL_RCC_ClockConfig+0x1e4>)
 8004302:	68d3      	ldr	r3, [r2, #12]
 8004304:	21f0      	movs	r1, #240	@ 0xf0
 8004306:	438b      	bics	r3, r1
 8004308:	68a1      	ldr	r1, [r4, #8]
 800430a:	430b      	orrs	r3, r1
 800430c:	60d3      	str	r3, [r2, #12]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800430e:	6823      	ldr	r3, [r4, #0]
 8004310:	07db      	lsls	r3, r3, #31
 8004312:	d400      	bmi.n	8004316 <HAL_RCC_ClockConfig+0x3a>
 8004314:	e08a      	b.n	800442c <HAL_RCC_ClockConfig+0x150>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004316:	6862      	ldr	r2, [r4, #4]
 8004318:	2a02      	cmp	r2, #2
 800431a:	d023      	beq.n	8004364 <HAL_RCC_ClockConfig+0x88>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800431c:	2a03      	cmp	r2, #3
 800431e:	d046      	beq.n	80043ae <HAL_RCC_ClockConfig+0xd2>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004320:	2a01      	cmp	r2, #1
 8004322:	d04a      	beq.n	80043ba <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004324:	4b66      	ldr	r3, [pc, #408]	@ (80044c0 <HAL_RCC_ClockConfig+0x1e4>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	059b      	lsls	r3, r3, #22
 800432a:	d420      	bmi.n	800436e <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 800432c:	2001      	movs	r0, #1
 800432e:	e0a7      	b.n	8004480 <HAL_RCC_ClockConfig+0x1a4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004330:	4a62      	ldr	r2, [pc, #392]	@ (80044bc <HAL_RCC_ClockConfig+0x1e0>)
 8004332:	6813      	ldr	r3, [r2, #0]
 8004334:	2101      	movs	r1, #1
 8004336:	438b      	bics	r3, r1
 8004338:	432b      	orrs	r3, r5
 800433a:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800433c:	f7fe fca8 	bl	8002c90 <HAL_GetTick>
 8004340:	0006      	movs	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004342:	4b5e      	ldr	r3, [pc, #376]	@ (80044bc <HAL_RCC_ClockConfig+0x1e0>)
 8004344:	4698      	mov	r8, r3
 8004346:	2701      	movs	r7, #1
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004348:	4b5e      	ldr	r3, [pc, #376]	@ (80044c4 <HAL_RCC_ClockConfig+0x1e8>)
 800434a:	4699      	mov	r9, r3
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800434c:	4643      	mov	r3, r8
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	403b      	ands	r3, r7
 8004352:	42ab      	cmp	r3, r5
 8004354:	d0d1      	beq.n	80042fa <HAL_RCC_ClockConfig+0x1e>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004356:	f7fe fc9b 	bl	8002c90 <HAL_GetTick>
 800435a:	1b80      	subs	r0, r0, r6
 800435c:	4548      	cmp	r0, r9
 800435e:	d9f5      	bls.n	800434c <HAL_RCC_ClockConfig+0x70>
        return HAL_TIMEOUT;
 8004360:	2003      	movs	r0, #3
 8004362:	e08d      	b.n	8004480 <HAL_RCC_ClockConfig+0x1a4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004364:	4b56      	ldr	r3, [pc, #344]	@ (80044c0 <HAL_RCC_ClockConfig+0x1e4>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	039b      	lsls	r3, r3, #14
 800436a:	d400      	bmi.n	800436e <HAL_RCC_ClockConfig+0x92>
 800436c:	e0a4      	b.n	80044b8 <HAL_RCC_ClockConfig+0x1dc>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800436e:	4954      	ldr	r1, [pc, #336]	@ (80044c0 <HAL_RCC_ClockConfig+0x1e4>)
 8004370:	68cb      	ldr	r3, [r1, #12]
 8004372:	2003      	movs	r0, #3
 8004374:	4383      	bics	r3, r0
 8004376:	4313      	orrs	r3, r2
 8004378:	60cb      	str	r3, [r1, #12]
    tickstart = HAL_GetTick();
 800437a:	f7fe fc89 	bl	8002c90 <HAL_GetTick>
 800437e:	0006      	movs	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004380:	6863      	ldr	r3, [r4, #4]
 8004382:	2b02      	cmp	r3, #2
 8004384:	d01f      	beq.n	80043c6 <HAL_RCC_ClockConfig+0xea>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004386:	2b03      	cmp	r3, #3
 8004388:	d02e      	beq.n	80043e8 <HAL_RCC_ClockConfig+0x10c>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800438a:	2b01      	cmp	r3, #1
 800438c:	d03d      	beq.n	800440a <HAL_RCC_ClockConfig+0x12e>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800438e:	4b4c      	ldr	r3, [pc, #304]	@ (80044c0 <HAL_RCC_ClockConfig+0x1e4>)
 8004390:	4698      	mov	r8, r3
 8004392:	270c      	movs	r7, #12
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004394:	4b4b      	ldr	r3, [pc, #300]	@ (80044c4 <HAL_RCC_ClockConfig+0x1e8>)
 8004396:	4699      	mov	r9, r3
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004398:	4643      	mov	r3, r8
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	421f      	tst	r7, r3
 800439e:	d045      	beq.n	800442c <HAL_RCC_ClockConfig+0x150>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043a0:	f7fe fc76 	bl	8002c90 <HAL_GetTick>
 80043a4:	1b80      	subs	r0, r0, r6
 80043a6:	4548      	cmp	r0, r9
 80043a8:	d9f6      	bls.n	8004398 <HAL_RCC_ClockConfig+0xbc>
          return HAL_TIMEOUT;
 80043aa:	2003      	movs	r0, #3
 80043ac:	e068      	b.n	8004480 <HAL_RCC_ClockConfig+0x1a4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80043ae:	4b44      	ldr	r3, [pc, #272]	@ (80044c0 <HAL_RCC_ClockConfig+0x1e4>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	019b      	lsls	r3, r3, #6
 80043b4:	d4db      	bmi.n	800436e <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 80043b6:	2001      	movs	r0, #1
 80043b8:	e062      	b.n	8004480 <HAL_RCC_ClockConfig+0x1a4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80043ba:	4b41      	ldr	r3, [pc, #260]	@ (80044c0 <HAL_RCC_ClockConfig+0x1e4>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	075b      	lsls	r3, r3, #29
 80043c0:	d4d5      	bmi.n	800436e <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 80043c2:	2001      	movs	r0, #1
 80043c4:	e05c      	b.n	8004480 <HAL_RCC_ClockConfig+0x1a4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80043c6:	4b3e      	ldr	r3, [pc, #248]	@ (80044c0 <HAL_RCC_ClockConfig+0x1e4>)
 80043c8:	4698      	mov	r8, r3
 80043ca:	270c      	movs	r7, #12
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043cc:	4b3d      	ldr	r3, [pc, #244]	@ (80044c4 <HAL_RCC_ClockConfig+0x1e8>)
 80043ce:	4699      	mov	r9, r3
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80043d0:	4643      	mov	r3, r8
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	403b      	ands	r3, r7
 80043d6:	2b08      	cmp	r3, #8
 80043d8:	d028      	beq.n	800442c <HAL_RCC_ClockConfig+0x150>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043da:	f7fe fc59 	bl	8002c90 <HAL_GetTick>
 80043de:	1b80      	subs	r0, r0, r6
 80043e0:	4548      	cmp	r0, r9
 80043e2:	d9f5      	bls.n	80043d0 <HAL_RCC_ClockConfig+0xf4>
          return HAL_TIMEOUT;
 80043e4:	2003      	movs	r0, #3
 80043e6:	e04b      	b.n	8004480 <HAL_RCC_ClockConfig+0x1a4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80043e8:	4b35      	ldr	r3, [pc, #212]	@ (80044c0 <HAL_RCC_ClockConfig+0x1e4>)
 80043ea:	4698      	mov	r8, r3
 80043ec:	270c      	movs	r7, #12
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043ee:	4b35      	ldr	r3, [pc, #212]	@ (80044c4 <HAL_RCC_ClockConfig+0x1e8>)
 80043f0:	4699      	mov	r9, r3
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80043f2:	4643      	mov	r3, r8
 80043f4:	68db      	ldr	r3, [r3, #12]
 80043f6:	403b      	ands	r3, r7
 80043f8:	2b0c      	cmp	r3, #12
 80043fa:	d017      	beq.n	800442c <HAL_RCC_ClockConfig+0x150>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043fc:	f7fe fc48 	bl	8002c90 <HAL_GetTick>
 8004400:	1b80      	subs	r0, r0, r6
 8004402:	4548      	cmp	r0, r9
 8004404:	d9f5      	bls.n	80043f2 <HAL_RCC_ClockConfig+0x116>
          return HAL_TIMEOUT;
 8004406:	2003      	movs	r0, #3
 8004408:	e03a      	b.n	8004480 <HAL_RCC_ClockConfig+0x1a4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800440a:	4b2d      	ldr	r3, [pc, #180]	@ (80044c0 <HAL_RCC_ClockConfig+0x1e4>)
 800440c:	4698      	mov	r8, r3
 800440e:	270c      	movs	r7, #12
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004410:	4b2c      	ldr	r3, [pc, #176]	@ (80044c4 <HAL_RCC_ClockConfig+0x1e8>)
 8004412:	4699      	mov	r9, r3
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004414:	4643      	mov	r3, r8
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	403b      	ands	r3, r7
 800441a:	2b04      	cmp	r3, #4
 800441c:	d006      	beq.n	800442c <HAL_RCC_ClockConfig+0x150>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800441e:	f7fe fc37 	bl	8002c90 <HAL_GetTick>
 8004422:	1b80      	subs	r0, r0, r6
 8004424:	4548      	cmp	r0, r9
 8004426:	d9f5      	bls.n	8004414 <HAL_RCC_ClockConfig+0x138>
          return HAL_TIMEOUT;
 8004428:	2003      	movs	r0, #3
 800442a:	e029      	b.n	8004480 <HAL_RCC_ClockConfig+0x1a4>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800442c:	4b23      	ldr	r3, [pc, #140]	@ (80044bc <HAL_RCC_ClockConfig+0x1e0>)
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	2301      	movs	r3, #1
 8004432:	4013      	ands	r3, r2
 8004434:	42ab      	cmp	r3, r5
 8004436:	d827      	bhi.n	8004488 <HAL_RCC_ClockConfig+0x1ac>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004438:	6823      	ldr	r3, [r4, #0]
 800443a:	075b      	lsls	r3, r3, #29
 800443c:	d506      	bpl.n	800444c <HAL_RCC_ClockConfig+0x170>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800443e:	4a20      	ldr	r2, [pc, #128]	@ (80044c0 <HAL_RCC_ClockConfig+0x1e4>)
 8004440:	68d3      	ldr	r3, [r2, #12]
 8004442:	4921      	ldr	r1, [pc, #132]	@ (80044c8 <HAL_RCC_ClockConfig+0x1ec>)
 8004444:	400b      	ands	r3, r1
 8004446:	68e1      	ldr	r1, [r4, #12]
 8004448:	430b      	orrs	r3, r1
 800444a:	60d3      	str	r3, [r2, #12]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800444c:	6823      	ldr	r3, [r4, #0]
 800444e:	071b      	lsls	r3, r3, #28
 8004450:	d507      	bpl.n	8004462 <HAL_RCC_ClockConfig+0x186>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004452:	491b      	ldr	r1, [pc, #108]	@ (80044c0 <HAL_RCC_ClockConfig+0x1e4>)
 8004454:	68ca      	ldr	r2, [r1, #12]
 8004456:	6923      	ldr	r3, [r4, #16]
 8004458:	00db      	lsls	r3, r3, #3
 800445a:	481c      	ldr	r0, [pc, #112]	@ (80044cc <HAL_RCC_ClockConfig+0x1f0>)
 800445c:	4002      	ands	r2, r0
 800445e:	4313      	orrs	r3, r2
 8004460:	60cb      	str	r3, [r1, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004462:	f7ff fc1d 	bl	8003ca0 <HAL_RCC_GetSysClockFreq>
 8004466:	4b16      	ldr	r3, [pc, #88]	@ (80044c0 <HAL_RCC_ClockConfig+0x1e4>)
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	4919      	ldr	r1, [pc, #100]	@ (80044d0 <HAL_RCC_ClockConfig+0x1f4>)
 800446c:	4a19      	ldr	r2, [pc, #100]	@ (80044d4 <HAL_RCC_ClockConfig+0x1f8>)
 800446e:	061b      	lsls	r3, r3, #24
 8004470:	0f1b      	lsrs	r3, r3, #28
 8004472:	5cd3      	ldrb	r3, [r2, r3]
 8004474:	40d8      	lsrs	r0, r3
 8004476:	6008      	str	r0, [r1, #0]
  status = HAL_InitTick(uwTickPrio);
 8004478:	4b17      	ldr	r3, [pc, #92]	@ (80044d8 <HAL_RCC_ClockConfig+0x1fc>)
 800447a:	6818      	ldr	r0, [r3, #0]
 800447c:	f7fe fbc2 	bl	8002c04 <HAL_InitTick>
}
 8004480:	bcc0      	pop	{r6, r7}
 8004482:	46b9      	mov	r9, r7
 8004484:	46b0      	mov	r8, r6
 8004486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004488:	4a0c      	ldr	r2, [pc, #48]	@ (80044bc <HAL_RCC_ClockConfig+0x1e0>)
 800448a:	6813      	ldr	r3, [r2, #0]
 800448c:	2101      	movs	r1, #1
 800448e:	438b      	bics	r3, r1
 8004490:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004492:	f7fe fbfd 	bl	8002c90 <HAL_GetTick>
 8004496:	0005      	movs	r5, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004498:	4f08      	ldr	r7, [pc, #32]	@ (80044bc <HAL_RCC_ClockConfig+0x1e0>)
 800449a:	2601      	movs	r6, #1
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800449c:	4b09      	ldr	r3, [pc, #36]	@ (80044c4 <HAL_RCC_ClockConfig+0x1e8>)
 800449e:	4698      	mov	r8, r3
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	421e      	tst	r6, r3
 80044a4:	d0c8      	beq.n	8004438 <HAL_RCC_ClockConfig+0x15c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044a6:	f7fe fbf3 	bl	8002c90 <HAL_GetTick>
 80044aa:	1b40      	subs	r0, r0, r5
 80044ac:	4540      	cmp	r0, r8
 80044ae:	d9f7      	bls.n	80044a0 <HAL_RCC_ClockConfig+0x1c4>
        return HAL_TIMEOUT;
 80044b0:	2003      	movs	r0, #3
 80044b2:	e7e5      	b.n	8004480 <HAL_RCC_ClockConfig+0x1a4>
    return HAL_ERROR;
 80044b4:	2001      	movs	r0, #1
 80044b6:	e7e3      	b.n	8004480 <HAL_RCC_ClockConfig+0x1a4>
        return HAL_ERROR;
 80044b8:	2001      	movs	r0, #1
 80044ba:	e7e1      	b.n	8004480 <HAL_RCC_ClockConfig+0x1a4>
 80044bc:	40022000 	.word	0x40022000
 80044c0:	40021000 	.word	0x40021000
 80044c4:	00001388 	.word	0x00001388
 80044c8:	fffff8ff 	.word	0xfffff8ff
 80044cc:	ffffc7ff 	.word	0xffffc7ff
 80044d0:	20000854 	.word	0x20000854
 80044d4:	08005b5c 	.word	0x08005b5c
 80044d8:	2000085c 	.word	0x2000085c

080044dc <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80044dc:	4b04      	ldr	r3, [pc, #16]	@ (80044f0 <HAL_RCC_GetPCLK1Freq+0x14>)
 80044de:	68db      	ldr	r3, [r3, #12]
  return SystemCoreClock;
 80044e0:	4a04      	ldr	r2, [pc, #16]	@ (80044f4 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80044e2:	4905      	ldr	r1, [pc, #20]	@ (80044f8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80044e4:	055b      	lsls	r3, r3, #21
 80044e6:	0f5b      	lsrs	r3, r3, #29
 80044e8:	5ccb      	ldrb	r3, [r1, r3]
 80044ea:	6810      	ldr	r0, [r2, #0]
 80044ec:	40d8      	lsrs	r0, r3
}
 80044ee:	4770      	bx	lr
 80044f0:	40021000 	.word	0x40021000
 80044f4:	20000854 	.word	0x20000854
 80044f8:	08005b54 	.word	0x08005b54

080044fc <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80044fc:	4b04      	ldr	r3, [pc, #16]	@ (8004510 <HAL_RCC_GetPCLK2Freq+0x14>)
 80044fe:	68db      	ldr	r3, [r3, #12]
  return SystemCoreClock;
 8004500:	4a04      	ldr	r2, [pc, #16]	@ (8004514 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004502:	4905      	ldr	r1, [pc, #20]	@ (8004518 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004504:	049b      	lsls	r3, r3, #18
 8004506:	0f5b      	lsrs	r3, r3, #29
 8004508:	5ccb      	ldrb	r3, [r1, r3]
 800450a:	6810      	ldr	r0, [r2, #0]
 800450c:	40d8      	lsrs	r0, r3
}
 800450e:	4770      	bx	lr
 8004510:	40021000 	.word	0x40021000
 8004514:	20000854 	.word	0x20000854
 8004518:	08005b54 	.word	0x08005b54

0800451c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800451c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800451e:	46d6      	mov	lr, sl
 8004520:	464f      	mov	r7, r9
 8004522:	4646      	mov	r6, r8
 8004524:	b5c0      	push	{r6, r7, lr}
 8004526:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004528:	6803      	ldr	r3, [r0, #0]
 800452a:	069b      	lsls	r3, r3, #26
 800452c:	d554      	bpl.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0xbc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800452e:	4b62      	ldr	r3, [pc, #392]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 8004530:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  FlagStatus       pwrclkchanged = RESET;
 8004532:	2200      	movs	r2, #0
 8004534:	4692      	mov	sl, r2
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004536:	00db      	lsls	r3, r3, #3
 8004538:	d407      	bmi.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800453a:	4a5f      	ldr	r2, [pc, #380]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 800453c:	6b91      	ldr	r1, [r2, #56]	@ 0x38
 800453e:	2380      	movs	r3, #128	@ 0x80
 8004540:	055b      	lsls	r3, r3, #21
 8004542:	430b      	orrs	r3, r1
 8004544:	6393      	str	r3, [r2, #56]	@ 0x38
      pwrclkchanged = SET;
 8004546:	2301      	movs	r3, #1
 8004548:	469a      	mov	sl, r3
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800454a:	4b5c      	ldr	r3, [pc, #368]	@ (80046bc <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	05db      	lsls	r3, r3, #23
 8004550:	d400      	bmi.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x38>
 8004552:	e06f      	b.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x118>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8004554:	4b58      	ldr	r3, [pc, #352]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 8004556:	681b      	ldr	r3, [r3, #0]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004558:	6862      	ldr	r2, [r4, #4]
 800455a:	4053      	eors	r3, r2
 800455c:	21c0      	movs	r1, #192	@ 0xc0
 800455e:	0389      	lsls	r1, r1, #14
 8004560:	420b      	tst	r3, r1
 8004562:	d006      	beq.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x56>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8004564:	23c0      	movs	r3, #192	@ 0xc0
 8004566:	029b      	lsls	r3, r3, #10
 8004568:	0011      	movs	r1, r2
 800456a:	4019      	ands	r1, r3
 800456c:	4299      	cmp	r1, r3
 800456e:	d100      	bne.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004570:	e077      	b.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x146>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8004572:	4b51      	ldr	r3, [pc, #324]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 8004574:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004576:	23c0      	movs	r3, #192	@ 0xc0
 8004578:	029b      	lsls	r3, r3, #10
 800457a:	0008      	movs	r0, r1
 800457c:	4018      	ands	r0, r3

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800457e:	4219      	tst	r1, r3
 8004580:	d015      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x92>
 8004582:	401a      	ands	r2, r3
 8004584:	4282      	cmp	r2, r0
 8004586:	d012      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x92>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004588:	6823      	ldr	r3, [r4, #0]
 800458a:	069b      	lsls	r3, r3, #26
 800458c:	d521      	bpl.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800458e:	4b4a      	ldr	r3, [pc, #296]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 8004590:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004592:	494b      	ldr	r1, [pc, #300]	@ (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004594:	4011      	ands	r1, r2

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004596:	6d1d      	ldr	r5, [r3, #80]	@ 0x50
 8004598:	2080      	movs	r0, #128	@ 0x80
 800459a:	0300      	lsls	r0, r0, #12
 800459c:	4328      	orrs	r0, r5
 800459e:	6518      	str	r0, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80045a0:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80045a2:	4d48      	ldr	r5, [pc, #288]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80045a4:	4028      	ands	r0, r5
 80045a6:	6518      	str	r0, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80045a8:	6519      	str	r1, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80045aa:	05d2      	lsls	r2, r2, #23
 80045ac:	d460      	bmi.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x154>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80045ae:	6823      	ldr	r3, [r4, #0]
 80045b0:	069b      	lsls	r3, r3, #26
 80045b2:	d50e      	bpl.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045b4:	6863      	ldr	r3, [r4, #4]
 80045b6:	22c0      	movs	r2, #192	@ 0xc0
 80045b8:	0292      	lsls	r2, r2, #10
 80045ba:	0019      	movs	r1, r3
 80045bc:	4011      	ands	r1, r2
 80045be:	4291      	cmp	r1, r2
 80045c0:	d06a      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80045c2:	4a3d      	ldr	r2, [pc, #244]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 80045c4:	6d11      	ldr	r1, [r2, #80]	@ 0x50
 80045c6:	6863      	ldr	r3, [r4, #4]
 80045c8:	20c0      	movs	r0, #192	@ 0xc0
 80045ca:	0280      	lsls	r0, r0, #10
 80045cc:	4003      	ands	r3, r0
 80045ce:	430b      	orrs	r3, r1
 80045d0:	6513      	str	r3, [r2, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80045d2:	4653      	mov	r3, sl
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d069      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x190>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80045d8:	6823      	ldr	r3, [r4, #0]
 80045da:	079b      	lsls	r3, r3, #30
 80045dc:	d506      	bpl.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0xd0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80045de:	4a36      	ldr	r2, [pc, #216]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 80045e0:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 80045e2:	210c      	movs	r1, #12
 80045e4:	438b      	bics	r3, r1
 80045e6:	68a1      	ldr	r1, [r4, #8]
 80045e8:	430b      	orrs	r3, r1
 80045ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80045ec:	6823      	ldr	r3, [r4, #0]
 80045ee:	075b      	lsls	r3, r3, #29
 80045f0:	d506      	bpl.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0xe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80045f2:	4a31      	ldr	r2, [pc, #196]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 80045f4:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 80045f6:	4934      	ldr	r1, [pc, #208]	@ (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045f8:	400b      	ands	r3, r1
 80045fa:	68e1      	ldr	r1, [r4, #12]
 80045fc:	430b      	orrs	r3, r1
 80045fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004600:	6823      	ldr	r3, [r4, #0]
 8004602:	071b      	lsls	r3, r3, #28
 8004604:	d506      	bpl.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004606:	4a2c      	ldr	r2, [pc, #176]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 8004608:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800460a:	4930      	ldr	r1, [pc, #192]	@ (80046cc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800460c:	400b      	ands	r3, r1
 800460e:	6921      	ldr	r1, [r4, #16]
 8004610:	430b      	orrs	r3, r1
 8004612:	64d3      	str	r3, [r2, #76]	@ 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004614:	6823      	ldr	r3, [r4, #0]
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 8004616:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004618:	061b      	lsls	r3, r3, #24
 800461a:	d506      	bpl.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x10e>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800461c:	4a26      	ldr	r2, [pc, #152]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 800461e:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8004620:	492b      	ldr	r1, [pc, #172]	@ (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004622:	400b      	ands	r3, r1
 8004624:	6961      	ldr	r1, [r4, #20]
 8004626:	430b      	orrs	r3, r1
 8004628:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800462a:	bce0      	pop	{r5, r6, r7}
 800462c:	46ba      	mov	sl, r7
 800462e:	46b1      	mov	r9, r6
 8004630:	46a8      	mov	r8, r5
 8004632:	bdf0      	pop	{r4, r5, r6, r7, pc}
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004634:	4a21      	ldr	r2, [pc, #132]	@ (80046bc <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8004636:	6811      	ldr	r1, [r2, #0]
 8004638:	2380      	movs	r3, #128	@ 0x80
 800463a:	005b      	lsls	r3, r3, #1
 800463c:	430b      	orrs	r3, r1
 800463e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8004640:	f7fe fb26 	bl	8002c90 <HAL_GetTick>
 8004644:	0005      	movs	r5, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004646:	4f1d      	ldr	r7, [pc, #116]	@ (80046bc <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8004648:	2680      	movs	r6, #128	@ 0x80
 800464a:	0076      	lsls	r6, r6, #1
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	4233      	tst	r3, r6
 8004650:	d000      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x138>
 8004652:	e77f      	b.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x38>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004654:	f7fe fb1c 	bl	8002c90 <HAL_GetTick>
 8004658:	1b40      	subs	r0, r0, r5
 800465a:	2864      	cmp	r0, #100	@ 0x64
 800465c:	d9f6      	bls.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x130>
          return HAL_TIMEOUT;
 800465e:	2003      	movs	r0, #3
 8004660:	e7e3      	b.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004662:	4b15      	ldr	r3, [pc, #84]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	039b      	lsls	r3, r3, #14
 8004668:	d400      	bmi.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x150>
 800466a:	e782      	b.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x56>
          return HAL_ERROR;
 800466c:	2001      	movs	r0, #1
 800466e:	e7dc      	b.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x10e>
        tickstart = HAL_GetTick();
 8004670:	f7fe fb0e 	bl	8002c90 <HAL_GetTick>
 8004674:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004676:	4b10      	ldr	r3, [pc, #64]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 8004678:	4698      	mov	r8, r3
 800467a:	2680      	movs	r6, #128	@ 0x80
 800467c:	00b6      	lsls	r6, r6, #2
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800467e:	4b15      	ldr	r3, [pc, #84]	@ (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004680:	4699      	mov	r9, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004682:	4643      	mov	r3, r8
 8004684:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004686:	4233      	tst	r3, r6
 8004688:	d191      	bne.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x92>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800468a:	f7fe fb01 	bl	8002c90 <HAL_GetTick>
 800468e:	1b40      	subs	r0, r0, r5
 8004690:	4548      	cmp	r0, r9
 8004692:	d9f6      	bls.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x166>
            return HAL_TIMEOUT;
 8004694:	2003      	movs	r0, #3
 8004696:	e7c8      	b.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004698:	4907      	ldr	r1, [pc, #28]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 800469a:	680a      	ldr	r2, [r1, #0]
 800469c:	480e      	ldr	r0, [pc, #56]	@ (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800469e:	4002      	ands	r2, r0
 80046a0:	20c0      	movs	r0, #192	@ 0xc0
 80046a2:	0380      	lsls	r0, r0, #14
 80046a4:	4003      	ands	r3, r0
 80046a6:	4313      	orrs	r3, r2
 80046a8:	600b      	str	r3, [r1, #0]
 80046aa:	e78a      	b.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0xa6>
      __HAL_RCC_PWR_CLK_DISABLE();
 80046ac:	4a02      	ldr	r2, [pc, #8]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 80046ae:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 80046b0:	490a      	ldr	r1, [pc, #40]	@ (80046dc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80046b2:	400b      	ands	r3, r1
 80046b4:	6393      	str	r3, [r2, #56]	@ 0x38
 80046b6:	e78f      	b.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0xbc>
 80046b8:	40021000 	.word	0x40021000
 80046bc:	40007000 	.word	0x40007000
 80046c0:	fffcffff 	.word	0xfffcffff
 80046c4:	fff7ffff 	.word	0xfff7ffff
 80046c8:	fffff3ff 	.word	0xfffff3ff
 80046cc:	ffffcfff 	.word	0xffffcfff
 80046d0:	fff3ffff 	.word	0xfff3ffff
 80046d4:	00001388 	.word	0x00001388
 80046d8:	ffcfffff 	.word	0xffcfffff
 80046dc:	efffffff 	.word	0xefffffff

080046e0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80046e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046e2:	0004      	movs	r4, r0
  uint32_t tickstart = 0U;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80046e4:	6803      	ldr	r3, [r0, #0]
 80046e6:	4a0a      	ldr	r2, [pc, #40]	@ (8004710 <HAL_RTC_WaitForSynchro+0x30>)
 80046e8:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80046ea:	f7fe fad1 	bl	8002c90 <HAL_GetTick>
 80046ee:	0005      	movs	r5, r0

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80046f0:	2620      	movs	r6, #32
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80046f2:	27fa      	movs	r7, #250	@ 0xfa
 80046f4:	00bf      	lsls	r7, r7, #2
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80046f6:	6823      	ldr	r3, [r4, #0]
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	421e      	tst	r6, r3
 80046fc:	d106      	bne.n	800470c <HAL_RTC_WaitForSynchro+0x2c>
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80046fe:	f7fe fac7 	bl	8002c90 <HAL_GetTick>
 8004702:	1b40      	subs	r0, r0, r5
 8004704:	42b8      	cmp	r0, r7
 8004706:	d9f6      	bls.n	80046f6 <HAL_RTC_WaitForSynchro+0x16>
    {
      return HAL_TIMEOUT;
 8004708:	2003      	movs	r0, #3
 800470a:	e000      	b.n	800470e <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 800470c:	2000      	movs	r0, #0
}
 800470e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004710:	0001ff5f 	.word	0x0001ff5f

08004714 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004714:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004716:	46c6      	mov	lr, r8
 8004718:	b500      	push	{lr}
 800471a:	0004      	movs	r4, r0
  uint32_t tickstart = 0U;
  HAL_StatusTypeDef status = HAL_OK;

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800471c:	6802      	ldr	r2, [r0, #0]
 800471e:	68d3      	ldr	r3, [r2, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8004720:	2500      	movs	r5, #0
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004722:	065b      	lsls	r3, r3, #25
 8004724:	d503      	bpl.n	800472e <RTC_EnterInitMode+0x1a>
      }
    }
  }

  return status;
}
 8004726:	0028      	movs	r0, r5
 8004728:	bc80      	pop	{r7}
 800472a:	46b8      	mov	r8, r7
 800472c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800472e:	68d3      	ldr	r3, [r2, #12]
 8004730:	2180      	movs	r1, #128	@ 0x80
 8004732:	430b      	orrs	r3, r1
 8004734:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 8004736:	f7fe faab 	bl	8002c90 <HAL_GetTick>
 800473a:	0006      	movs	r6, r0
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800473c:	2740      	movs	r7, #64	@ 0x40
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800473e:	23fa      	movs	r3, #250	@ 0xfa
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	4698      	mov	r8, r3
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004744:	6823      	ldr	r3, [r4, #0]
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	421f      	tst	r7, r3
 800474a:	d1ec      	bne.n	8004726 <RTC_EnterInitMode+0x12>
 800474c:	2d01      	cmp	r5, #1
 800474e:	d0ea      	beq.n	8004726 <RTC_EnterInitMode+0x12>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004750:	f7fe fa9e 	bl	8002c90 <HAL_GetTick>
 8004754:	1b80      	subs	r0, r0, r6
 8004756:	4540      	cmp	r0, r8
 8004758:	d9f4      	bls.n	8004744 <RTC_EnterInitMode+0x30>
        hrtc->State = HAL_RTC_STATE_ERROR;
 800475a:	2321      	movs	r3, #33	@ 0x21
 800475c:	2204      	movs	r2, #4
 800475e:	54e2      	strb	r2, [r4, r3]
        status = HAL_ERROR;
 8004760:	2501      	movs	r5, #1
 8004762:	e7ef      	b.n	8004744 <RTC_EnterInitMode+0x30>

08004764 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004764:	b510      	push	{r4, lr}
 8004766:	0004      	movs	r4, r0
  HAL_StatusTypeDef status = HAL_OK;

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004768:	6802      	ldr	r2, [r0, #0]
 800476a:	68d3      	ldr	r3, [r2, #12]
 800476c:	2180      	movs	r1, #128	@ 0x80
 800476e:	438b      	bics	r3, r1
 8004770:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004772:	6803      	ldr	r3, [r0, #0]
 8004774:	689b      	ldr	r3, [r3, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004776:	2000      	movs	r0, #0
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004778:	069b      	lsls	r3, r3, #26
 800477a:	d500      	bpl.n	800477e <RTC_ExitInitMode+0x1a>
      status = HAL_ERROR;
    }
  }

  return status;
}
 800477c:	bd10      	pop	{r4, pc}
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800477e:	0020      	movs	r0, r4
 8004780:	f7ff ffae 	bl	80046e0 <HAL_RTC_WaitForSynchro>
 8004784:	2800      	cmp	r0, #0
 8004786:	d0f9      	beq.n	800477c <RTC_ExitInitMode+0x18>
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004788:	2321      	movs	r3, #33	@ 0x21
 800478a:	2204      	movs	r2, #4
 800478c:	54e2      	strb	r2, [r4, r3]
      status = HAL_ERROR;
 800478e:	2001      	movs	r0, #1
 8004790:	e7f4      	b.n	800477c <RTC_ExitInitMode+0x18>
	...

08004794 <HAL_RTC_Init>:
{
 8004794:	b510      	push	{r4, lr}
 8004796:	1e04      	subs	r4, r0, #0
  if (hrtc == NULL)
 8004798:	d04f      	beq.n	800483a <HAL_RTC_Init+0xa6>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800479a:	2321      	movs	r3, #33	@ 0x21
 800479c:	5cc3      	ldrb	r3, [r0, r3]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d00b      	beq.n	80047ba <HAL_RTC_Init+0x26>
  hrtc->State = HAL_RTC_STATE_BUSY;
 80047a2:	2321      	movs	r3, #33	@ 0x21
 80047a4:	2202      	movs	r2, #2
 80047a6:	54e2      	strb	r2, [r4, r3]
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80047a8:	6822      	ldr	r2, [r4, #0]
 80047aa:	68d3      	ldr	r3, [r2, #12]
 80047ac:	06db      	lsls	r3, r3, #27
 80047ae:	d50a      	bpl.n	80047c6 <HAL_RTC_Init+0x32>
    hrtc->State = HAL_RTC_STATE_READY;
 80047b0:	2321      	movs	r3, #33	@ 0x21
 80047b2:	2201      	movs	r2, #1
 80047b4:	54e2      	strb	r2, [r4, r3]
 80047b6:	2000      	movs	r0, #0
}
 80047b8:	bd10      	pop	{r4, pc}
    hrtc->Lock = HAL_UNLOCKED;
 80047ba:	3320      	adds	r3, #32
 80047bc:	2200      	movs	r2, #0
 80047be:	54c2      	strb	r2, [r0, r3]
    HAL_RTC_MspInit(hrtc);
 80047c0:	f7fd ff48 	bl	8002654 <HAL_RTC_MspInit>
 80047c4:	e7ed      	b.n	80047a2 <HAL_RTC_Init+0xe>
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80047c6:	23ca      	movs	r3, #202	@ 0xca
 80047c8:	6253      	str	r3, [r2, #36]	@ 0x24
 80047ca:	6823      	ldr	r3, [r4, #0]
 80047cc:	2253      	movs	r2, #83	@ 0x53
 80047ce:	625a      	str	r2, [r3, #36]	@ 0x24
    status = RTC_EnterInitMode(hrtc);
 80047d0:	0020      	movs	r0, r4
 80047d2:	f7ff ff9f 	bl	8004714 <RTC_EnterInitMode>
    if (status == HAL_OK)
 80047d6:	2800      	cmp	r0, #0
 80047d8:	d003      	beq.n	80047e2 <HAL_RTC_Init+0x4e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80047da:	6823      	ldr	r3, [r4, #0]
 80047dc:	22ff      	movs	r2, #255	@ 0xff
 80047de:	625a      	str	r2, [r3, #36]	@ 0x24
  if (status == HAL_OK)
 80047e0:	e7ea      	b.n	80047b8 <HAL_RTC_Init+0x24>
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80047e2:	6822      	ldr	r2, [r4, #0]
 80047e4:	6893      	ldr	r3, [r2, #8]
 80047e6:	4916      	ldr	r1, [pc, #88]	@ (8004840 <HAL_RTC_Init+0xac>)
 80047e8:	400b      	ands	r3, r1
 80047ea:	6093      	str	r3, [r2, #8]
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80047ec:	6822      	ldr	r2, [r4, #0]
 80047ee:	6891      	ldr	r1, [r2, #8]
 80047f0:	6863      	ldr	r3, [r4, #4]
 80047f2:	6920      	ldr	r0, [r4, #16]
 80047f4:	4303      	orrs	r3, r0
 80047f6:	69a0      	ldr	r0, [r4, #24]
 80047f8:	4303      	orrs	r3, r0
 80047fa:	430b      	orrs	r3, r1
 80047fc:	6093      	str	r3, [r2, #8]
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80047fe:	6823      	ldr	r3, [r4, #0]
 8004800:	68e2      	ldr	r2, [r4, #12]
 8004802:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004804:	6822      	ldr	r2, [r4, #0]
 8004806:	6911      	ldr	r1, [r2, #16]
 8004808:	68a3      	ldr	r3, [r4, #8]
 800480a:	041b      	lsls	r3, r3, #16
 800480c:	430b      	orrs	r3, r1
 800480e:	6113      	str	r3, [r2, #16]
      status = RTC_ExitInitMode(hrtc);
 8004810:	0020      	movs	r0, r4
 8004812:	f7ff ffa7 	bl	8004764 <RTC_ExitInitMode>
    if (status == HAL_OK)
 8004816:	2800      	cmp	r0, #0
 8004818:	d1df      	bne.n	80047da <HAL_RTC_Init+0x46>
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 800481a:	6822      	ldr	r2, [r4, #0]
 800481c:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800481e:	2103      	movs	r1, #3
 8004820:	438b      	bics	r3, r1
 8004822:	64d3      	str	r3, [r2, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004824:	6822      	ldr	r2, [r4, #0]
 8004826:	6cd1      	ldr	r1, [r2, #76]	@ 0x4c
 8004828:	69e3      	ldr	r3, [r4, #28]
 800482a:	6960      	ldr	r0, [r4, #20]
 800482c:	4303      	orrs	r3, r0
 800482e:	430b      	orrs	r3, r1
 8004830:	64d3      	str	r3, [r2, #76]	@ 0x4c
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004832:	6823      	ldr	r3, [r4, #0]
 8004834:	22ff      	movs	r2, #255	@ 0xff
 8004836:	625a      	str	r2, [r3, #36]	@ 0x24
  if (status == HAL_OK)
 8004838:	e7ba      	b.n	80047b0 <HAL_RTC_Init+0x1c>
    return HAL_ERROR;
 800483a:	2001      	movs	r0, #1
 800483c:	e7bc      	b.n	80047b8 <HAL_RTC_Init+0x24>
 800483e:	46c0      	nop			@ (mov r8, r8)
 8004840:	ff8fffbf 	.word	0xff8fffbf

08004844 <TIM_Base_SetConfig>:
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004844:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004846:	2280      	movs	r2, #128	@ 0x80
 8004848:	05d2      	lsls	r2, r2, #23
 800484a:	4290      	cmp	r0, r2
 800484c:	d00a      	beq.n	8004864 <TIM_Base_SetConfig+0x20>
 800484e:	4a12      	ldr	r2, [pc, #72]	@ (8004898 <TIM_Base_SetConfig+0x54>)
 8004850:	4290      	cmp	r0, r2
 8004852:	d01b      	beq.n	800488c <TIM_Base_SetConfig+0x48>
 8004854:	4a11      	ldr	r2, [pc, #68]	@ (800489c <TIM_Base_SetConfig+0x58>)
 8004856:	4290      	cmp	r0, r2
 8004858:	d10c      	bne.n	8004874 <TIM_Base_SetConfig+0x30>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800485a:	2270      	movs	r2, #112	@ 0x70
 800485c:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 800485e:	684a      	ldr	r2, [r1, #4]
 8004860:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004862:	e003      	b.n	800486c <TIM_Base_SetConfig+0x28>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004864:	2270      	movs	r2, #112	@ 0x70
 8004866:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8004868:	684a      	ldr	r2, [r1, #4]
 800486a:	4313      	orrs	r3, r2
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800486c:	4a0c      	ldr	r2, [pc, #48]	@ (80048a0 <TIM_Base_SetConfig+0x5c>)
 800486e:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004870:	68ca      	ldr	r2, [r1, #12]
 8004872:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004874:	2280      	movs	r2, #128	@ 0x80
 8004876:	4393      	bics	r3, r2
 8004878:	690a      	ldr	r2, [r1, #16]
 800487a:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800487c:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800487e:	688b      	ldr	r3, [r1, #8]
 8004880:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004882:	680b      	ldr	r3, [r1, #0]
 8004884:	6283      	str	r3, [r0, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004886:	2301      	movs	r3, #1
 8004888:	6143      	str	r3, [r0, #20]
}
 800488a:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800488c:	2270      	movs	r2, #112	@ 0x70
 800488e:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8004890:	684a      	ldr	r2, [r1, #4]
 8004892:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004894:	e7ea      	b.n	800486c <TIM_Base_SetConfig+0x28>
 8004896:	46c0      	nop			@ (mov r8, r8)
 8004898:	40010800 	.word	0x40010800
 800489c:	40011400 	.word	0x40011400
 80048a0:	fffffcff 	.word	0xfffffcff

080048a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048a4:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048a6:	6a03      	ldr	r3, [r0, #32]
 80048a8:	2201      	movs	r2, #1
 80048aa:	4393      	bics	r3, r2
 80048ac:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048ae:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048b0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048b2:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80048b4:	2573      	movs	r5, #115	@ 0x73
 80048b6:	43aa      	bics	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048b8:	680d      	ldr	r5, [r1, #0]
 80048ba:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80048bc:	2502      	movs	r5, #2
 80048be:	43ab      	bics	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80048c0:	688d      	ldr	r5, [r1, #8]
 80048c2:	432b      	orrs	r3, r5

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048c4:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048c6:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80048c8:	684a      	ldr	r2, [r1, #4]
 80048ca:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048cc:	6203      	str	r3, [r0, #32]
}
 80048ce:	bd30      	pop	{r4, r5, pc}

080048d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048d0:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048d2:	6a03      	ldr	r3, [r0, #32]
 80048d4:	2210      	movs	r2, #16
 80048d6:	4393      	bics	r3, r2
 80048d8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048da:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048dc:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048de:	6983      	ldr	r3, [r0, #24]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80048e0:	4a07      	ldr	r2, [pc, #28]	@ (8004900 <TIM_OC2_SetConfig+0x30>)
 80048e2:	4013      	ands	r3, r2

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048e4:	680a      	ldr	r2, [r1, #0]
 80048e6:	0212      	lsls	r2, r2, #8
 80048e8:	431a      	orrs	r2, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80048ea:	2320      	movs	r3, #32
 80048ec:	439c      	bics	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80048ee:	688b      	ldr	r3, [r1, #8]
 80048f0:	011b      	lsls	r3, r3, #4
 80048f2:	4323      	orrs	r3, r4

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048f4:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048f6:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80048f8:	684a      	ldr	r2, [r1, #4]
 80048fa:	6382      	str	r2, [r0, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048fc:	6203      	str	r3, [r0, #32]
}
 80048fe:	bd30      	pop	{r4, r5, pc}
 8004900:	ffff8cff 	.word	0xffff8cff

08004904 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004904:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004906:	231f      	movs	r3, #31
 8004908:	4019      	ands	r1, r3

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800490a:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800490c:	2401      	movs	r4, #1
 800490e:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8004910:	43a3      	bics	r3, r4
 8004912:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004914:	6a03      	ldr	r3, [r0, #32]
 8004916:	408a      	lsls	r2, r1
 8004918:	431a      	orrs	r2, r3
 800491a:	6202      	str	r2, [r0, #32]
}
 800491c:	bd10      	pop	{r4, pc}

0800491e <HAL_TIM_Base_Init>:
{
 800491e:	b570      	push	{r4, r5, r6, lr}
 8004920:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8004922:	d01e      	beq.n	8004962 <HAL_TIM_Base_Init+0x44>
  if (htim->State == HAL_TIM_STATE_RESET)
 8004924:	2339      	movs	r3, #57	@ 0x39
 8004926:	5cc3      	ldrb	r3, [r0, r3]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d014      	beq.n	8004956 <HAL_TIM_Base_Init+0x38>
  htim->State = HAL_TIM_STATE_BUSY;
 800492c:	2539      	movs	r5, #57	@ 0x39
 800492e:	2302      	movs	r3, #2
 8004930:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004932:	0021      	movs	r1, r4
 8004934:	c901      	ldmia	r1!, {r0}
 8004936:	f7ff ff85 	bl	8004844 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800493a:	2301      	movs	r3, #1
 800493c:	223e      	movs	r2, #62	@ 0x3e
 800493e:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004940:	3a04      	subs	r2, #4
 8004942:	54a3      	strb	r3, [r4, r2]
 8004944:	3201      	adds	r2, #1
 8004946:	54a3      	strb	r3, [r4, r2]
 8004948:	3201      	adds	r2, #1
 800494a:	54a3      	strb	r3, [r4, r2]
 800494c:	3201      	adds	r2, #1
 800494e:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8004950:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8004952:	2000      	movs	r0, #0
}
 8004954:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8004956:	3338      	adds	r3, #56	@ 0x38
 8004958:	2200      	movs	r2, #0
 800495a:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 800495c:	f7fd fe8a 	bl	8002674 <HAL_TIM_Base_MspInit>
 8004960:	e7e4      	b.n	800492c <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 8004962:	2001      	movs	r0, #1
 8004964:	e7f6      	b.n	8004954 <HAL_TIM_Base_Init+0x36>
	...

08004968 <HAL_TIM_Base_Start_IT>:
{
 8004968:	0003      	movs	r3, r0
  if (htim->State != HAL_TIM_STATE_READY)
 800496a:	2239      	movs	r2, #57	@ 0x39
 800496c:	5c82      	ldrb	r2, [r0, r2]
    return HAL_ERROR;
 800496e:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 8004970:	2a01      	cmp	r2, #1
 8004972:	d121      	bne.n	80049b8 <HAL_TIM_Base_Start_IT+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 8004974:	3238      	adds	r2, #56	@ 0x38
 8004976:	2102      	movs	r1, #2
 8004978:	5499      	strb	r1, [r3, r2]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800497a:	6819      	ldr	r1, [r3, #0]
 800497c:	68ca      	ldr	r2, [r1, #12]
 800497e:	4302      	orrs	r2, r0
 8004980:	60ca      	str	r2, [r1, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	2280      	movs	r2, #128	@ 0x80
 8004986:	05d2      	lsls	r2, r2, #23
 8004988:	4293      	cmp	r3, r2
 800498a:	d00b      	beq.n	80049a4 <HAL_TIM_Base_Start_IT+0x3c>
 800498c:	4a0c      	ldr	r2, [pc, #48]	@ (80049c0 <HAL_TIM_Base_Start_IT+0x58>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d008      	beq.n	80049a4 <HAL_TIM_Base_Start_IT+0x3c>
 8004992:	4a0c      	ldr	r2, [pc, #48]	@ (80049c4 <HAL_TIM_Base_Start_IT+0x5c>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d005      	beq.n	80049a4 <HAL_TIM_Base_Start_IT+0x3c>
    __HAL_TIM_ENABLE(htim);
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	2101      	movs	r1, #1
 800499c:	430a      	orrs	r2, r1
 800499e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80049a0:	2000      	movs	r0, #0
 80049a2:	e009      	b.n	80049b8 <HAL_TIM_Base_Start_IT+0x50>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049a4:	6899      	ldr	r1, [r3, #8]
 80049a6:	2207      	movs	r2, #7
 80049a8:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049aa:	2a06      	cmp	r2, #6
 80049ac:	d005      	beq.n	80049ba <HAL_TIM_Base_Start_IT+0x52>
      __HAL_TIM_ENABLE(htim);
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	2101      	movs	r1, #1
 80049b2:	430a      	orrs	r2, r1
 80049b4:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80049b6:	2000      	movs	r0, #0
}
 80049b8:	4770      	bx	lr
  return HAL_OK;
 80049ba:	2000      	movs	r0, #0
 80049bc:	e7fc      	b.n	80049b8 <HAL_TIM_Base_Start_IT+0x50>
 80049be:	46c0      	nop			@ (mov r8, r8)
 80049c0:	40010800 	.word	0x40010800
 80049c4:	40011400 	.word	0x40011400

080049c8 <HAL_TIM_OC_Start_IT>:
{
 80049c8:	b510      	push	{r4, lr}
 80049ca:	0004      	movs	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80049cc:	2900      	cmp	r1, #0
 80049ce:	d11f      	bne.n	8004a10 <HAL_TIM_OC_Start_IT+0x48>
 80049d0:	233a      	movs	r3, #58	@ 0x3a
 80049d2:	5cc3      	ldrb	r3, [r0, r3]
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d161      	bne.n	8004a9c <HAL_TIM_OC_Start_IT+0xd4>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80049d8:	2002      	movs	r0, #2
 80049da:	233a      	movs	r3, #58	@ 0x3a
 80049dc:	54e0      	strb	r0, [r4, r3]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80049de:	6822      	ldr	r2, [r4, #0]
 80049e0:	68d3      	ldr	r3, [r2, #12]
 80049e2:	4303      	orrs	r3, r0
 80049e4:	60d3      	str	r3, [r2, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80049e6:	6820      	ldr	r0, [r4, #0]
 80049e8:	2201      	movs	r2, #1
 80049ea:	f7ff ff8b 	bl	8004904 <TIM_CCxChannelCmd>
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049ee:	6823      	ldr	r3, [r4, #0]
 80049f0:	2280      	movs	r2, #128	@ 0x80
 80049f2:	05d2      	lsls	r2, r2, #23
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d046      	beq.n	8004a86 <HAL_TIM_OC_Start_IT+0xbe>
 80049f8:	4a2c      	ldr	r2, [pc, #176]	@ (8004aac <HAL_TIM_OC_Start_IT+0xe4>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d043      	beq.n	8004a86 <HAL_TIM_OC_Start_IT+0xbe>
 80049fe:	4a2c      	ldr	r2, [pc, #176]	@ (8004ab0 <HAL_TIM_OC_Start_IT+0xe8>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d040      	beq.n	8004a86 <HAL_TIM_OC_Start_IT+0xbe>
      __HAL_TIM_ENABLE(htim);
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	2101      	movs	r1, #1
 8004a08:	430a      	orrs	r2, r1
 8004a0a:	601a      	str	r2, [r3, #0]
 8004a0c:	2000      	movs	r0, #0
 8004a0e:	e044      	b.n	8004a9a <HAL_TIM_OC_Start_IT+0xd2>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004a10:	2904      	cmp	r1, #4
 8004a12:	d00b      	beq.n	8004a2c <HAL_TIM_OC_Start_IT+0x64>
 8004a14:	2908      	cmp	r1, #8
 8004a16:	d016      	beq.n	8004a46 <HAL_TIM_OC_Start_IT+0x7e>
 8004a18:	233d      	movs	r3, #61	@ 0x3d
 8004a1a:	5cc3      	ldrb	r3, [r0, r3]
 8004a1c:	3b01      	subs	r3, #1
 8004a1e:	1e5a      	subs	r2, r3, #1
 8004a20:	4193      	sbcs	r3, r2
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d015      	beq.n	8004a54 <HAL_TIM_OC_Start_IT+0x8c>
    return HAL_ERROR;
 8004a28:	2001      	movs	r0, #1
 8004a2a:	e036      	b.n	8004a9a <HAL_TIM_OC_Start_IT+0xd2>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004a2c:	233b      	movs	r3, #59	@ 0x3b
 8004a2e:	5cc3      	ldrb	r3, [r0, r3]
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d135      	bne.n	8004aa0 <HAL_TIM_OC_Start_IT+0xd8>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a34:	233b      	movs	r3, #59	@ 0x3b
 8004a36:	2202      	movs	r2, #2
 8004a38:	54c2      	strb	r2, [r0, r3]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004a3a:	6802      	ldr	r2, [r0, #0]
 8004a3c:	68d3      	ldr	r3, [r2, #12]
 8004a3e:	2004      	movs	r0, #4
 8004a40:	4303      	orrs	r3, r0
 8004a42:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 8004a44:	e7cf      	b.n	80049e6 <HAL_TIM_OC_Start_IT+0x1e>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004a46:	233c      	movs	r3, #60	@ 0x3c
 8004a48:	5cc3      	ldrb	r3, [r0, r3]
 8004a4a:	3b01      	subs	r3, #1
 8004a4c:	1e5a      	subs	r2, r3, #1
 8004a4e:	4193      	sbcs	r3, r2
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	e7e7      	b.n	8004a24 <HAL_TIM_OC_Start_IT+0x5c>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a54:	2908      	cmp	r1, #8
 8004a56:	d00d      	beq.n	8004a74 <HAL_TIM_OC_Start_IT+0xac>
 8004a58:	233d      	movs	r3, #61	@ 0x3d
 8004a5a:	2202      	movs	r2, #2
 8004a5c:	54e2      	strb	r2, [r4, r3]
  switch (Channel)
 8004a5e:	2001      	movs	r0, #1
 8004a60:	2908      	cmp	r1, #8
 8004a62:	d91a      	bls.n	8004a9a <HAL_TIM_OC_Start_IT+0xd2>
 8004a64:	290c      	cmp	r1, #12
 8004a66:	d11d      	bne.n	8004aa4 <HAL_TIM_OC_Start_IT+0xdc>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004a68:	6822      	ldr	r2, [r4, #0]
 8004a6a:	68d3      	ldr	r3, [r2, #12]
 8004a6c:	300f      	adds	r0, #15
 8004a6e:	4303      	orrs	r3, r0
 8004a70:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 8004a72:	e7b8      	b.n	80049e6 <HAL_TIM_OC_Start_IT+0x1e>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a74:	233c      	movs	r3, #60	@ 0x3c
 8004a76:	2202      	movs	r2, #2
 8004a78:	54e2      	strb	r2, [r4, r3]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004a7a:	6822      	ldr	r2, [r4, #0]
 8004a7c:	68d3      	ldr	r3, [r2, #12]
 8004a7e:	2008      	movs	r0, #8
 8004a80:	4303      	orrs	r3, r0
 8004a82:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 8004a84:	e7af      	b.n	80049e6 <HAL_TIM_OC_Start_IT+0x1e>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a86:	6899      	ldr	r1, [r3, #8]
 8004a88:	2207      	movs	r2, #7
 8004a8a:	400a      	ands	r2, r1
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a8c:	2a06      	cmp	r2, #6
 8004a8e:	d00b      	beq.n	8004aa8 <HAL_TIM_OC_Start_IT+0xe0>
        __HAL_TIM_ENABLE(htim);
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	2101      	movs	r1, #1
 8004a94:	430a      	orrs	r2, r1
 8004a96:	601a      	str	r2, [r3, #0]
 8004a98:	2000      	movs	r0, #0
}
 8004a9a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004a9c:	2001      	movs	r0, #1
 8004a9e:	e7fc      	b.n	8004a9a <HAL_TIM_OC_Start_IT+0xd2>
 8004aa0:	2001      	movs	r0, #1
 8004aa2:	e7fa      	b.n	8004a9a <HAL_TIM_OC_Start_IT+0xd2>
  switch (Channel)
 8004aa4:	2001      	movs	r0, #1
 8004aa6:	e7f8      	b.n	8004a9a <HAL_TIM_OC_Start_IT+0xd2>
 8004aa8:	2000      	movs	r0, #0
 8004aaa:	e7f6      	b.n	8004a9a <HAL_TIM_OC_Start_IT+0xd2>
 8004aac:	40010800 	.word	0x40010800
 8004ab0:	40011400 	.word	0x40011400

08004ab4 <HAL_TIM_PWM_MspInit>:
}
 8004ab4:	4770      	bx	lr

08004ab6 <HAL_TIM_PWM_Init>:
{
 8004ab6:	b570      	push	{r4, r5, r6, lr}
 8004ab8:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8004aba:	d01e      	beq.n	8004afa <HAL_TIM_PWM_Init+0x44>
  if (htim->State == HAL_TIM_STATE_RESET)
 8004abc:	2339      	movs	r3, #57	@ 0x39
 8004abe:	5cc3      	ldrb	r3, [r0, r3]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d014      	beq.n	8004aee <HAL_TIM_PWM_Init+0x38>
  htim->State = HAL_TIM_STATE_BUSY;
 8004ac4:	2539      	movs	r5, #57	@ 0x39
 8004ac6:	2302      	movs	r3, #2
 8004ac8:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004aca:	0021      	movs	r1, r4
 8004acc:	c901      	ldmia	r1!, {r0}
 8004ace:	f7ff feb9 	bl	8004844 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	223e      	movs	r2, #62	@ 0x3e
 8004ad6:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ad8:	3a04      	subs	r2, #4
 8004ada:	54a3      	strb	r3, [r4, r2]
 8004adc:	3201      	adds	r2, #1
 8004ade:	54a3      	strb	r3, [r4, r2]
 8004ae0:	3201      	adds	r2, #1
 8004ae2:	54a3      	strb	r3, [r4, r2]
 8004ae4:	3201      	adds	r2, #1
 8004ae6:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8004ae8:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8004aea:	2000      	movs	r0, #0
}
 8004aec:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8004aee:	3338      	adds	r3, #56	@ 0x38
 8004af0:	2200      	movs	r2, #0
 8004af2:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_PWM_MspInit(htim);
 8004af4:	f7ff ffde 	bl	8004ab4 <HAL_TIM_PWM_MspInit>
 8004af8:	e7e4      	b.n	8004ac4 <HAL_TIM_PWM_Init+0xe>
    return HAL_ERROR;
 8004afa:	2001      	movs	r0, #1
 8004afc:	e7f6      	b.n	8004aec <HAL_TIM_PWM_Init+0x36>
	...

08004b00 <HAL_TIM_PWM_Start_DMA>:
{
 8004b00:	b570      	push	{r4, r5, r6, lr}
 8004b02:	0006      	movs	r6, r0
 8004b04:	000d      	movs	r5, r1
 8004b06:	0011      	movs	r1, r2
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8004b08:	2d00      	cmp	r5, #0
 8004b0a:	d109      	bne.n	8004b20 <HAL_TIM_PWM_Start_DMA+0x20>
 8004b0c:	223a      	movs	r2, #58	@ 0x3a
 8004b0e:	5c84      	ldrb	r4, [r0, r2]
 8004b10:	3c02      	subs	r4, #2
 8004b12:	4262      	negs	r2, r4
 8004b14:	4154      	adcs	r4, r2
 8004b16:	b2e4      	uxtb	r4, r4
 8004b18:	2c00      	cmp	r4, #0
 8004b1a:	d01a      	beq.n	8004b52 <HAL_TIM_PWM_Start_DMA+0x52>
    return HAL_BUSY;
 8004b1c:	2002      	movs	r0, #2
 8004b1e:	e0da      	b.n	8004cd6 <HAL_TIM_PWM_Start_DMA+0x1d6>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8004b20:	2d04      	cmp	r5, #4
 8004b22:	d008      	beq.n	8004b36 <HAL_TIM_PWM_Start_DMA+0x36>
 8004b24:	2d08      	cmp	r5, #8
 8004b26:	d00d      	beq.n	8004b44 <HAL_TIM_PWM_Start_DMA+0x44>
 8004b28:	223d      	movs	r2, #61	@ 0x3d
 8004b2a:	5c84      	ldrb	r4, [r0, r2]
 8004b2c:	3c02      	subs	r4, #2
 8004b2e:	4262      	negs	r2, r4
 8004b30:	4154      	adcs	r4, r2
 8004b32:	b2e4      	uxtb	r4, r4
 8004b34:	e7f0      	b.n	8004b18 <HAL_TIM_PWM_Start_DMA+0x18>
 8004b36:	223b      	movs	r2, #59	@ 0x3b
 8004b38:	5c84      	ldrb	r4, [r0, r2]
 8004b3a:	3c02      	subs	r4, #2
 8004b3c:	4262      	negs	r2, r4
 8004b3e:	4154      	adcs	r4, r2
 8004b40:	b2e4      	uxtb	r4, r4
 8004b42:	e7e9      	b.n	8004b18 <HAL_TIM_PWM_Start_DMA+0x18>
 8004b44:	223c      	movs	r2, #60	@ 0x3c
 8004b46:	5c84      	ldrb	r4, [r0, r2]
 8004b48:	3c02      	subs	r4, #2
 8004b4a:	4262      	negs	r2, r4
 8004b4c:	4154      	adcs	r4, r2
 8004b4e:	b2e4      	uxtb	r4, r4
 8004b50:	e7e2      	b.n	8004b18 <HAL_TIM_PWM_Start_DMA+0x18>
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8004b52:	2d00      	cmp	r5, #0
 8004b54:	d141      	bne.n	8004bda <HAL_TIM_PWM_Start_DMA+0xda>
 8004b56:	223a      	movs	r2, #58	@ 0x3a
 8004b58:	5cb2      	ldrb	r2, [r6, r2]
 8004b5a:	3a01      	subs	r2, #1
 8004b5c:	4250      	negs	r0, r2
 8004b5e:	4142      	adcs	r2, r0
 8004b60:	b2d2      	uxtb	r2, r2
    return HAL_ERROR;
 8004b62:	2001      	movs	r0, #1
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8004b64:	2a00      	cmp	r2, #0
 8004b66:	d100      	bne.n	8004b6a <HAL_TIM_PWM_Start_DMA+0x6a>
 8004b68:	e0b5      	b.n	8004cd6 <HAL_TIM_PWM_Start_DMA+0x1d6>
    if ((pData == NULL) || (Length == 0U))
 8004b6a:	2900      	cmp	r1, #0
 8004b6c:	d100      	bne.n	8004b70 <HAL_TIM_PWM_Start_DMA+0x70>
 8004b6e:	e0af      	b.n	8004cd0 <HAL_TIM_PWM_Start_DMA+0x1d0>
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d100      	bne.n	8004b76 <HAL_TIM_PWM_Start_DMA+0x76>
 8004b74:	e0ae      	b.n	8004cd4 <HAL_TIM_PWM_Start_DMA+0x1d4>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b76:	2d00      	cmp	r5, #0
 8004b78:	d148      	bne.n	8004c0c <HAL_TIM_PWM_Start_DMA+0x10c>
 8004b7a:	223a      	movs	r2, #58	@ 0x3a
 8004b7c:	2002      	movs	r0, #2
 8004b7e:	54b0      	strb	r0, [r6, r2]
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004b80:	6a32      	ldr	r2, [r6, #32]
 8004b82:	485a      	ldr	r0, [pc, #360]	@ (8004cec <HAL_TIM_PWM_Start_DMA+0x1ec>)
 8004b84:	62d0      	str	r0, [r2, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004b86:	6a32      	ldr	r2, [r6, #32]
 8004b88:	4859      	ldr	r0, [pc, #356]	@ (8004cf0 <HAL_TIM_PWM_Start_DMA+0x1f0>)
 8004b8a:	6310      	str	r0, [r2, #48]	@ 0x30
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004b8c:	6a32      	ldr	r2, [r6, #32]
 8004b8e:	4859      	ldr	r0, [pc, #356]	@ (8004cf4 <HAL_TIM_PWM_Start_DMA+0x1f4>)
 8004b90:	6350      	str	r0, [r2, #52]	@ 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8004b92:	6832      	ldr	r2, [r6, #0]
 8004b94:	3234      	adds	r2, #52	@ 0x34
 8004b96:	6a30      	ldr	r0, [r6, #32]
 8004b98:	f7fe f924 	bl	8002de4 <HAL_DMA_Start_IT>
 8004b9c:	2800      	cmp	r0, #0
 8004b9e:	d000      	beq.n	8004ba2 <HAL_TIM_PWM_Start_DMA+0xa2>
 8004ba0:	e09a      	b.n	8004cd8 <HAL_TIM_PWM_Start_DMA+0x1d8>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004ba2:	6832      	ldr	r2, [r6, #0]
 8004ba4:	68d1      	ldr	r1, [r2, #12]
 8004ba6:	2380      	movs	r3, #128	@ 0x80
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	430b      	orrs	r3, r1
 8004bac:	60d3      	str	r3, [r2, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004bae:	6830      	ldr	r0, [r6, #0]
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	0029      	movs	r1, r5
 8004bb4:	f7ff fea6 	bl	8004904 <TIM_CCxChannelCmd>
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bb8:	6833      	ldr	r3, [r6, #0]
 8004bba:	2280      	movs	r2, #128	@ 0x80
 8004bbc:	05d2      	lsls	r2, r2, #23
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d07b      	beq.n	8004cba <HAL_TIM_PWM_Start_DMA+0x1ba>
 8004bc2:	4a4d      	ldr	r2, [pc, #308]	@ (8004cf8 <HAL_TIM_PWM_Start_DMA+0x1f8>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d078      	beq.n	8004cba <HAL_TIM_PWM_Start_DMA+0x1ba>
 8004bc8:	4a4c      	ldr	r2, [pc, #304]	@ (8004cfc <HAL_TIM_PWM_Start_DMA+0x1fc>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d075      	beq.n	8004cba <HAL_TIM_PWM_Start_DMA+0x1ba>
      __HAL_TIM_ENABLE(htim);
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	2101      	movs	r1, #1
 8004bd2:	430a      	orrs	r2, r1
 8004bd4:	601a      	str	r2, [r3, #0]
 8004bd6:	2000      	movs	r0, #0
 8004bd8:	e07d      	b.n	8004cd6 <HAL_TIM_PWM_Start_DMA+0x1d6>
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8004bda:	2d04      	cmp	r5, #4
 8004bdc:	d008      	beq.n	8004bf0 <HAL_TIM_PWM_Start_DMA+0xf0>
 8004bde:	2d08      	cmp	r5, #8
 8004be0:	d00d      	beq.n	8004bfe <HAL_TIM_PWM_Start_DMA+0xfe>
 8004be2:	223d      	movs	r2, #61	@ 0x3d
 8004be4:	5cb2      	ldrb	r2, [r6, r2]
 8004be6:	3a01      	subs	r2, #1
 8004be8:	4250      	negs	r0, r2
 8004bea:	4142      	adcs	r2, r0
 8004bec:	b2d2      	uxtb	r2, r2
 8004bee:	e7b8      	b.n	8004b62 <HAL_TIM_PWM_Start_DMA+0x62>
 8004bf0:	223b      	movs	r2, #59	@ 0x3b
 8004bf2:	5cb2      	ldrb	r2, [r6, r2]
 8004bf4:	3a01      	subs	r2, #1
 8004bf6:	4250      	negs	r0, r2
 8004bf8:	4142      	adcs	r2, r0
 8004bfa:	b2d2      	uxtb	r2, r2
 8004bfc:	e7b1      	b.n	8004b62 <HAL_TIM_PWM_Start_DMA+0x62>
 8004bfe:	223c      	movs	r2, #60	@ 0x3c
 8004c00:	5cb2      	ldrb	r2, [r6, r2]
 8004c02:	3a01      	subs	r2, #1
 8004c04:	4250      	negs	r0, r2
 8004c06:	4142      	adcs	r2, r0
 8004c08:	b2d2      	uxtb	r2, r2
 8004c0a:	e7aa      	b.n	8004b62 <HAL_TIM_PWM_Start_DMA+0x62>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c0c:	2d04      	cmp	r5, #4
 8004c0e:	d020      	beq.n	8004c52 <HAL_TIM_PWM_Start_DMA+0x152>
 8004c10:	2d08      	cmp	r5, #8
 8004c12:	d038      	beq.n	8004c86 <HAL_TIM_PWM_Start_DMA+0x186>
 8004c14:	223d      	movs	r2, #61	@ 0x3d
 8004c16:	2002      	movs	r0, #2
 8004c18:	54b0      	strb	r0, [r6, r2]
  switch (Channel)
 8004c1a:	3801      	subs	r0, #1
 8004c1c:	2d08      	cmp	r5, #8
 8004c1e:	d95a      	bls.n	8004cd6 <HAL_TIM_PWM_Start_DMA+0x1d6>
 8004c20:	2d0c      	cmp	r5, #12
 8004c22:	d158      	bne.n	8004cd6 <HAL_TIM_PWM_Start_DMA+0x1d6>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004c24:	6af2      	ldr	r2, [r6, #44]	@ 0x2c
 8004c26:	4831      	ldr	r0, [pc, #196]	@ (8004cec <HAL_TIM_PWM_Start_DMA+0x1ec>)
 8004c28:	62d0      	str	r0, [r2, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004c2a:	6af2      	ldr	r2, [r6, #44]	@ 0x2c
 8004c2c:	4830      	ldr	r0, [pc, #192]	@ (8004cf0 <HAL_TIM_PWM_Start_DMA+0x1f0>)
 8004c2e:	6310      	str	r0, [r2, #48]	@ 0x30
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004c30:	6af2      	ldr	r2, [r6, #44]	@ 0x2c
 8004c32:	4830      	ldr	r0, [pc, #192]	@ (8004cf4 <HAL_TIM_PWM_Start_DMA+0x1f4>)
 8004c34:	6350      	str	r0, [r2, #52]	@ 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8004c36:	6832      	ldr	r2, [r6, #0]
 8004c38:	3240      	adds	r2, #64	@ 0x40
 8004c3a:	6af0      	ldr	r0, [r6, #44]	@ 0x2c
 8004c3c:	f7fe f8d2 	bl	8002de4 <HAL_DMA_Start_IT>
 8004c40:	2800      	cmp	r0, #0
 8004c42:	d14f      	bne.n	8004ce4 <HAL_TIM_PWM_Start_DMA+0x1e4>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004c44:	6832      	ldr	r2, [r6, #0]
 8004c46:	68d1      	ldr	r1, [r2, #12]
 8004c48:	2380      	movs	r3, #128	@ 0x80
 8004c4a:	015b      	lsls	r3, r3, #5
 8004c4c:	430b      	orrs	r3, r1
 8004c4e:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 8004c50:	e7ad      	b.n	8004bae <HAL_TIM_PWM_Start_DMA+0xae>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c52:	223b      	movs	r2, #59	@ 0x3b
 8004c54:	2002      	movs	r0, #2
 8004c56:	54b0      	strb	r0, [r6, r2]
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004c58:	6a72      	ldr	r2, [r6, #36]	@ 0x24
 8004c5a:	4824      	ldr	r0, [pc, #144]	@ (8004cec <HAL_TIM_PWM_Start_DMA+0x1ec>)
 8004c5c:	62d0      	str	r0, [r2, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004c5e:	6a72      	ldr	r2, [r6, #36]	@ 0x24
 8004c60:	4823      	ldr	r0, [pc, #140]	@ (8004cf0 <HAL_TIM_PWM_Start_DMA+0x1f0>)
 8004c62:	6310      	str	r0, [r2, #48]	@ 0x30
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004c64:	6a72      	ldr	r2, [r6, #36]	@ 0x24
 8004c66:	4823      	ldr	r0, [pc, #140]	@ (8004cf4 <HAL_TIM_PWM_Start_DMA+0x1f4>)
 8004c68:	6350      	str	r0, [r2, #52]	@ 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8004c6a:	6832      	ldr	r2, [r6, #0]
 8004c6c:	3238      	adds	r2, #56	@ 0x38
 8004c6e:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8004c70:	f7fe f8b8 	bl	8002de4 <HAL_DMA_Start_IT>
 8004c74:	2800      	cmp	r0, #0
 8004c76:	d131      	bne.n	8004cdc <HAL_TIM_PWM_Start_DMA+0x1dc>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8004c78:	6832      	ldr	r2, [r6, #0]
 8004c7a:	68d1      	ldr	r1, [r2, #12]
 8004c7c:	2380      	movs	r3, #128	@ 0x80
 8004c7e:	00db      	lsls	r3, r3, #3
 8004c80:	430b      	orrs	r3, r1
 8004c82:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 8004c84:	e793      	b.n	8004bae <HAL_TIM_PWM_Start_DMA+0xae>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c86:	223c      	movs	r2, #60	@ 0x3c
 8004c88:	2002      	movs	r0, #2
 8004c8a:	54b0      	strb	r0, [r6, r2]
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004c8c:	6ab2      	ldr	r2, [r6, #40]	@ 0x28
 8004c8e:	4817      	ldr	r0, [pc, #92]	@ (8004cec <HAL_TIM_PWM_Start_DMA+0x1ec>)
 8004c90:	62d0      	str	r0, [r2, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004c92:	6ab2      	ldr	r2, [r6, #40]	@ 0x28
 8004c94:	4816      	ldr	r0, [pc, #88]	@ (8004cf0 <HAL_TIM_PWM_Start_DMA+0x1f0>)
 8004c96:	6310      	str	r0, [r2, #48]	@ 0x30
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004c98:	6ab2      	ldr	r2, [r6, #40]	@ 0x28
 8004c9a:	4816      	ldr	r0, [pc, #88]	@ (8004cf4 <HAL_TIM_PWM_Start_DMA+0x1f4>)
 8004c9c:	6350      	str	r0, [r2, #52]	@ 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8004c9e:	6832      	ldr	r2, [r6, #0]
 8004ca0:	323c      	adds	r2, #60	@ 0x3c
 8004ca2:	6ab0      	ldr	r0, [r6, #40]	@ 0x28
 8004ca4:	f7fe f89e 	bl	8002de4 <HAL_DMA_Start_IT>
 8004ca8:	2800      	cmp	r0, #0
 8004caa:	d119      	bne.n	8004ce0 <HAL_TIM_PWM_Start_DMA+0x1e0>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8004cac:	6832      	ldr	r2, [r6, #0]
 8004cae:	68d1      	ldr	r1, [r2, #12]
 8004cb0:	2380      	movs	r3, #128	@ 0x80
 8004cb2:	011b      	lsls	r3, r3, #4
 8004cb4:	430b      	orrs	r3, r1
 8004cb6:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 8004cb8:	e779      	b.n	8004bae <HAL_TIM_PWM_Start_DMA+0xae>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cba:	6899      	ldr	r1, [r3, #8]
 8004cbc:	2207      	movs	r2, #7
 8004cbe:	400a      	ands	r2, r1
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cc0:	2a06      	cmp	r2, #6
 8004cc2:	d011      	beq.n	8004ce8 <HAL_TIM_PWM_Start_DMA+0x1e8>
        __HAL_TIM_ENABLE(htim);
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	2101      	movs	r1, #1
 8004cc8:	430a      	orrs	r2, r1
 8004cca:	601a      	str	r2, [r3, #0]
 8004ccc:	2000      	movs	r0, #0
 8004cce:	e002      	b.n	8004cd6 <HAL_TIM_PWM_Start_DMA+0x1d6>
      return HAL_ERROR;
 8004cd0:	2001      	movs	r0, #1
 8004cd2:	e000      	b.n	8004cd6 <HAL_TIM_PWM_Start_DMA+0x1d6>
 8004cd4:	2001      	movs	r0, #1
}
 8004cd6:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8004cd8:	2001      	movs	r0, #1
 8004cda:	e7fc      	b.n	8004cd6 <HAL_TIM_PWM_Start_DMA+0x1d6>
        return HAL_ERROR;
 8004cdc:	2001      	movs	r0, #1
 8004cde:	e7fa      	b.n	8004cd6 <HAL_TIM_PWM_Start_DMA+0x1d6>
        return HAL_ERROR;
 8004ce0:	2001      	movs	r0, #1
 8004ce2:	e7f8      	b.n	8004cd6 <HAL_TIM_PWM_Start_DMA+0x1d6>
        return HAL_ERROR;
 8004ce4:	2001      	movs	r0, #1
 8004ce6:	e7f6      	b.n	8004cd6 <HAL_TIM_PWM_Start_DMA+0x1d6>
 8004ce8:	2000      	movs	r0, #0
 8004cea:	e7f4      	b.n	8004cd6 <HAL_TIM_PWM_Start_DMA+0x1d6>
 8004cec:	08004fe5 	.word	0x08004fe5
 8004cf0:	08005057 	.word	0x08005057
 8004cf4:	080051bb 	.word	0x080051bb
 8004cf8:	40010800 	.word	0x40010800
 8004cfc:	40011400 	.word	0x40011400

08004d00 <HAL_TIM_PWM_ConfigChannel>:
{
 8004d00:	b570      	push	{r4, r5, r6, lr}
 8004d02:	0004      	movs	r4, r0
 8004d04:	000d      	movs	r5, r1
  __HAL_LOCK(htim);
 8004d06:	2338      	movs	r3, #56	@ 0x38
 8004d08:	5cc3      	ldrb	r3, [r0, r3]
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d100      	bne.n	8004d10 <HAL_TIM_PWM_ConfigChannel+0x10>
 8004d0e:	e08d      	b.n	8004e2c <HAL_TIM_PWM_ConfigChannel+0x12c>
 8004d10:	2338      	movs	r3, #56	@ 0x38
 8004d12:	2101      	movs	r1, #1
 8004d14:	54c1      	strb	r1, [r0, r3]
  switch (Channel)
 8004d16:	2a08      	cmp	r2, #8
 8004d18:	d061      	beq.n	8004dde <HAL_TIM_PWM_ConfigChannel+0xde>
 8004d1a:	d81b      	bhi.n	8004d54 <HAL_TIM_PWM_ConfigChannel+0x54>
 8004d1c:	2a00      	cmp	r2, #0
 8004d1e:	d046      	beq.n	8004dae <HAL_TIM_PWM_ConfigChannel+0xae>
 8004d20:	0008      	movs	r0, r1
 8004d22:	2a04      	cmp	r2, #4
 8004d24:	d157      	bne.n	8004dd6 <HAL_TIM_PWM_ConfigChannel+0xd6>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d26:	6820      	ldr	r0, [r4, #0]
 8004d28:	0029      	movs	r1, r5
 8004d2a:	f7ff fdd1 	bl	80048d0 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004d2e:	6822      	ldr	r2, [r4, #0]
 8004d30:	6991      	ldr	r1, [r2, #24]
 8004d32:	2380      	movs	r3, #128	@ 0x80
 8004d34:	011b      	lsls	r3, r3, #4
 8004d36:	430b      	orrs	r3, r1
 8004d38:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004d3a:	6822      	ldr	r2, [r4, #0]
 8004d3c:	6993      	ldr	r3, [r2, #24]
 8004d3e:	493c      	ldr	r1, [pc, #240]	@ (8004e30 <HAL_TIM_PWM_ConfigChannel+0x130>)
 8004d40:	400b      	ands	r3, r1
 8004d42:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004d44:	6822      	ldr	r2, [r4, #0]
 8004d46:	6991      	ldr	r1, [r2, #24]
 8004d48:	68eb      	ldr	r3, [r5, #12]
 8004d4a:	021b      	lsls	r3, r3, #8
 8004d4c:	430b      	orrs	r3, r1
 8004d4e:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8004d50:	2000      	movs	r0, #0
      break;
 8004d52:	e040      	b.n	8004dd6 <HAL_TIM_PWM_ConfigChannel+0xd6>
  switch (Channel)
 8004d54:	2001      	movs	r0, #1
 8004d56:	2a0c      	cmp	r2, #12
 8004d58:	d13d      	bne.n	8004dd6 <HAL_TIM_PWM_ConfigChannel+0xd6>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d5a:	6823      	ldr	r3, [r4, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d5c:	6a1a      	ldr	r2, [r3, #32]
 8004d5e:	4935      	ldr	r1, [pc, #212]	@ (8004e34 <HAL_TIM_PWM_ConfigChannel+0x134>)
 8004d60:	400a      	ands	r2, r1
 8004d62:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8004d64:	6a18      	ldr	r0, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8004d66:	685e      	ldr	r6, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8004d68:	69da      	ldr	r2, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d6a:	4933      	ldr	r1, [pc, #204]	@ (8004e38 <HAL_TIM_PWM_ConfigChannel+0x138>)
 8004d6c:	400a      	ands	r2, r1
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d6e:	6829      	ldr	r1, [r5, #0]
 8004d70:	0209      	lsls	r1, r1, #8
 8004d72:	4311      	orrs	r1, r2
  tmpccer &= ~TIM_CCER_CC4P;
 8004d74:	4a31      	ldr	r2, [pc, #196]	@ (8004e3c <HAL_TIM_PWM_ConfigChannel+0x13c>)
 8004d76:	4010      	ands	r0, r2
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d78:	68aa      	ldr	r2, [r5, #8]
 8004d7a:	0312      	lsls	r2, r2, #12
 8004d7c:	4302      	orrs	r2, r0
  TIMx->CR2 = tmpcr2;
 8004d7e:	605e      	str	r6, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8004d80:	61d9      	str	r1, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8004d82:	6869      	ldr	r1, [r5, #4]
 8004d84:	6419      	str	r1, [r3, #64]	@ 0x40
  TIMx->CCER = tmpccer;
 8004d86:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d88:	6822      	ldr	r2, [r4, #0]
 8004d8a:	69d1      	ldr	r1, [r2, #28]
 8004d8c:	2380      	movs	r3, #128	@ 0x80
 8004d8e:	011b      	lsls	r3, r3, #4
 8004d90:	430b      	orrs	r3, r1
 8004d92:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d94:	6822      	ldr	r2, [r4, #0]
 8004d96:	69d3      	ldr	r3, [r2, #28]
 8004d98:	4925      	ldr	r1, [pc, #148]	@ (8004e30 <HAL_TIM_PWM_ConfigChannel+0x130>)
 8004d9a:	400b      	ands	r3, r1
 8004d9c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d9e:	6822      	ldr	r2, [r4, #0]
 8004da0:	69d1      	ldr	r1, [r2, #28]
 8004da2:	68eb      	ldr	r3, [r5, #12]
 8004da4:	021b      	lsls	r3, r3, #8
 8004da6:	430b      	orrs	r3, r1
 8004da8:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8004daa:	2000      	movs	r0, #0
      break;
 8004dac:	e013      	b.n	8004dd6 <HAL_TIM_PWM_ConfigChannel+0xd6>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004dae:	6800      	ldr	r0, [r0, #0]
 8004db0:	0029      	movs	r1, r5
 8004db2:	f7ff fd77 	bl	80048a4 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004db6:	6822      	ldr	r2, [r4, #0]
 8004db8:	6993      	ldr	r3, [r2, #24]
 8004dba:	2108      	movs	r1, #8
 8004dbc:	430b      	orrs	r3, r1
 8004dbe:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004dc0:	6822      	ldr	r2, [r4, #0]
 8004dc2:	6993      	ldr	r3, [r2, #24]
 8004dc4:	3904      	subs	r1, #4
 8004dc6:	438b      	bics	r3, r1
 8004dc8:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004dca:	6822      	ldr	r2, [r4, #0]
 8004dcc:	6993      	ldr	r3, [r2, #24]
 8004dce:	68e9      	ldr	r1, [r5, #12]
 8004dd0:	430b      	orrs	r3, r1
 8004dd2:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8004dd4:	2000      	movs	r0, #0
  __HAL_UNLOCK(htim);
 8004dd6:	2338      	movs	r3, #56	@ 0x38
 8004dd8:	2200      	movs	r2, #0
 8004dda:	54e2      	strb	r2, [r4, r3]
}
 8004ddc:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004dde:	6803      	ldr	r3, [r0, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004de0:	6a1a      	ldr	r2, [r3, #32]
 8004de2:	4917      	ldr	r1, [pc, #92]	@ (8004e40 <HAL_TIM_PWM_ConfigChannel+0x140>)
 8004de4:	400a      	ands	r2, r1
 8004de6:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8004de8:	6a18      	ldr	r0, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8004dea:	685e      	ldr	r6, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8004dec:	69d9      	ldr	r1, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004dee:	2273      	movs	r2, #115	@ 0x73
 8004df0:	4391      	bics	r1, r2
  tmpccmrx |= OC_Config->OCMode;
 8004df2:	682a      	ldr	r2, [r5, #0]
 8004df4:	4311      	orrs	r1, r2
  tmpccer &= ~TIM_CCER_CC3P;
 8004df6:	4a13      	ldr	r2, [pc, #76]	@ (8004e44 <HAL_TIM_PWM_ConfigChannel+0x144>)
 8004df8:	4010      	ands	r0, r2
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004dfa:	68aa      	ldr	r2, [r5, #8]
 8004dfc:	0212      	lsls	r2, r2, #8
 8004dfe:	4302      	orrs	r2, r0
  TIMx->CR2 = tmpcr2;
 8004e00:	605e      	str	r6, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8004e02:	61d9      	str	r1, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8004e04:	6869      	ldr	r1, [r5, #4]
 8004e06:	63d9      	str	r1, [r3, #60]	@ 0x3c
  TIMx->CCER = tmpccer;
 8004e08:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e0a:	6822      	ldr	r2, [r4, #0]
 8004e0c:	69d3      	ldr	r3, [r2, #28]
 8004e0e:	2108      	movs	r1, #8
 8004e10:	430b      	orrs	r3, r1
 8004e12:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e14:	6822      	ldr	r2, [r4, #0]
 8004e16:	69d3      	ldr	r3, [r2, #28]
 8004e18:	3904      	subs	r1, #4
 8004e1a:	438b      	bics	r3, r1
 8004e1c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e1e:	6822      	ldr	r2, [r4, #0]
 8004e20:	69d3      	ldr	r3, [r2, #28]
 8004e22:	68e9      	ldr	r1, [r5, #12]
 8004e24:	430b      	orrs	r3, r1
 8004e26:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8004e28:	2000      	movs	r0, #0
      break;
 8004e2a:	e7d4      	b.n	8004dd6 <HAL_TIM_PWM_ConfigChannel+0xd6>
  __HAL_LOCK(htim);
 8004e2c:	2002      	movs	r0, #2
 8004e2e:	e7d5      	b.n	8004ddc <HAL_TIM_PWM_ConfigChannel+0xdc>
 8004e30:	fffffbff 	.word	0xfffffbff
 8004e34:	ffffefff 	.word	0xffffefff
 8004e38:	ffff8cff 	.word	0xffff8cff
 8004e3c:	ffffdfff 	.word	0xffffdfff
 8004e40:	fffffeff 	.word	0xfffffeff
 8004e44:	fffffdff 	.word	0xfffffdff

08004e48 <HAL_TIM_ConfigClockSource>:
{
 8004e48:	b570      	push	{r4, r5, r6, lr}
 8004e4a:	0002      	movs	r2, r0
  __HAL_LOCK(htim);
 8004e4c:	2338      	movs	r3, #56	@ 0x38
 8004e4e:	5cc3      	ldrb	r3, [r0, r3]
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d100      	bne.n	8004e56 <HAL_TIM_ConfigClockSource+0xe>
 8004e54:	e0bb      	b.n	8004fce <HAL_TIM_ConfigClockSource+0x186>
 8004e56:	2338      	movs	r3, #56	@ 0x38
 8004e58:	2001      	movs	r0, #1
 8004e5a:	54d0      	strb	r0, [r2, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 8004e5c:	3301      	adds	r3, #1
 8004e5e:	3001      	adds	r0, #1
 8004e60:	54d0      	strb	r0, [r2, r3]
  tmpsmcr = htim->Instance->SMCR;
 8004e62:	6810      	ldr	r0, [r2, #0]
 8004e64:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e66:	4c5b      	ldr	r4, [pc, #364]	@ (8004fd4 <HAL_TIM_ConfigClockSource+0x18c>)
 8004e68:	4023      	ands	r3, r4
  htim->Instance->SMCR = tmpsmcr;
 8004e6a:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8004e6c:	680b      	ldr	r3, [r1, #0]
 8004e6e:	2b60      	cmp	r3, #96	@ 0x60
 8004e70:	d100      	bne.n	8004e74 <HAL_TIM_ConfigClockSource+0x2c>
 8004e72:	e071      	b.n	8004f58 <HAL_TIM_ConfigClockSource+0x110>
 8004e74:	d83f      	bhi.n	8004ef6 <HAL_TIM_ConfigClockSource+0xae>
 8004e76:	2b40      	cmp	r3, #64	@ 0x40
 8004e78:	d100      	bne.n	8004e7c <HAL_TIM_ConfigClockSource+0x34>
 8004e7a:	e089      	b.n	8004f90 <HAL_TIM_ConfigClockSource+0x148>
 8004e7c:	d91d      	bls.n	8004eba <HAL_TIM_ConfigClockSource+0x72>
 8004e7e:	2001      	movs	r0, #1
 8004e80:	2b50      	cmp	r3, #80	@ 0x50
 8004e82:	d131      	bne.n	8004ee8 <HAL_TIM_ConfigClockSource+0xa0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e84:	6813      	ldr	r3, [r2, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e86:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8004e88:	68c9      	ldr	r1, [r1, #12]
  tmpccer = TIMx->CCER;
 8004e8a:	6a1c      	ldr	r4, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e8c:	6a1d      	ldr	r5, [r3, #32]
 8004e8e:	2601      	movs	r6, #1
 8004e90:	43b5      	bics	r5, r6
 8004e92:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e94:	699d      	ldr	r5, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e96:	36ef      	adds	r6, #239	@ 0xef
 8004e98:	43b5      	bics	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e9a:	0109      	lsls	r1, r1, #4
 8004e9c:	4329      	orrs	r1, r5
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e9e:	250a      	movs	r5, #10
 8004ea0:	43ac      	bics	r4, r5
  tmpccer |= TIM_ICPolarity;
 8004ea2:	4320      	orrs	r0, r4
  TIMx->CCMR1 = tmpccmr1;
 8004ea4:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ea6:	6218      	str	r0, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ea8:	6811      	ldr	r1, [r2, #0]
  tmpsmcr = TIMx->SMCR;
 8004eaa:	688b      	ldr	r3, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004eac:	2070      	movs	r0, #112	@ 0x70
 8004eae:	4383      	bics	r3, r0
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004eb0:	3819      	subs	r0, #25
 8004eb2:	4303      	orrs	r3, r0
  TIMx->SMCR = tmpsmcr;
 8004eb4:	608b      	str	r3, [r1, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004eb6:	2000      	movs	r0, #0
}
 8004eb8:	e016      	b.n	8004ee8 <HAL_TIM_ConfigClockSource+0xa0>
  switch (sClockSourceConfig->ClockSource)
 8004eba:	2b20      	cmp	r3, #32
 8004ebc:	d003      	beq.n	8004ec6 <HAL_TIM_ConfigClockSource+0x7e>
 8004ebe:	d90c      	bls.n	8004eda <HAL_TIM_ConfigClockSource+0x92>
 8004ec0:	2001      	movs	r0, #1
 8004ec2:	2b30      	cmp	r3, #48	@ 0x30
 8004ec4:	d110      	bne.n	8004ee8 <HAL_TIM_ConfigClockSource+0xa0>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ec6:	6810      	ldr	r0, [r2, #0]
  tmpsmcr = TIMx->SMCR;
 8004ec8:	6881      	ldr	r1, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004eca:	2470      	movs	r4, #112	@ 0x70
 8004ecc:	43a1      	bics	r1, r4
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ece:	430b      	orrs	r3, r1
 8004ed0:	2107      	movs	r1, #7
 8004ed2:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8004ed4:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004ed6:	2000      	movs	r0, #0
}
 8004ed8:	e006      	b.n	8004ee8 <HAL_TIM_ConfigClockSource+0xa0>
  switch (sClockSourceConfig->ClockSource)
 8004eda:	2110      	movs	r1, #16
 8004edc:	0018      	movs	r0, r3
 8004ede:	4388      	bics	r0, r1
 8004ee0:	0001      	movs	r1, r0
 8004ee2:	2001      	movs	r0, #1
 8004ee4:	2900      	cmp	r1, #0
 8004ee6:	d0ee      	beq.n	8004ec6 <HAL_TIM_ConfigClockSource+0x7e>
  htim->State = HAL_TIM_STATE_READY;
 8004ee8:	2339      	movs	r3, #57	@ 0x39
 8004eea:	2101      	movs	r1, #1
 8004eec:	54d1      	strb	r1, [r2, r3]
  __HAL_UNLOCK(htim);
 8004eee:	3b01      	subs	r3, #1
 8004ef0:	2100      	movs	r1, #0
 8004ef2:	54d1      	strb	r1, [r2, r3]
}
 8004ef4:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8004ef6:	2080      	movs	r0, #128	@ 0x80
 8004ef8:	0140      	lsls	r0, r0, #5
 8004efa:	4283      	cmp	r3, r0
 8004efc:	d063      	beq.n	8004fc6 <HAL_TIM_ConfigClockSource+0x17e>
 8004efe:	2080      	movs	r0, #128	@ 0x80
 8004f00:	0180      	lsls	r0, r0, #6
 8004f02:	4283      	cmp	r3, r0
 8004f04:	d113      	bne.n	8004f2e <HAL_TIM_ConfigClockSource+0xe6>
      TIM_ETR_SetConfig(htim->Instance,
 8004f06:	6814      	ldr	r4, [r2, #0]
  tmpsmcr = TIMx->SMCR;
 8004f08:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f0a:	4b33      	ldr	r3, [pc, #204]	@ (8004fd8 <HAL_TIM_ConfigClockSource+0x190>)
 8004f0c:	4018      	ands	r0, r3
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f0e:	688b      	ldr	r3, [r1, #8]
 8004f10:	684d      	ldr	r5, [r1, #4]
 8004f12:	432b      	orrs	r3, r5
 8004f14:	68c9      	ldr	r1, [r1, #12]
 8004f16:	0209      	lsls	r1, r1, #8
 8004f18:	430b      	orrs	r3, r1
 8004f1a:	4303      	orrs	r3, r0
  TIMx->SMCR = tmpsmcr;
 8004f1c:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f1e:	6811      	ldr	r1, [r2, #0]
 8004f20:	6888      	ldr	r0, [r1, #8]
 8004f22:	2380      	movs	r3, #128	@ 0x80
 8004f24:	01db      	lsls	r3, r3, #7
 8004f26:	4303      	orrs	r3, r0
 8004f28:	608b      	str	r3, [r1, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004f2a:	2000      	movs	r0, #0
      break;
 8004f2c:	e7dc      	b.n	8004ee8 <HAL_TIM_ConfigClockSource+0xa0>
  switch (sClockSourceConfig->ClockSource)
 8004f2e:	2b70      	cmp	r3, #112	@ 0x70
 8004f30:	d14b      	bne.n	8004fca <HAL_TIM_ConfigClockSource+0x182>
      TIM_ETR_SetConfig(htim->Instance,
 8004f32:	6814      	ldr	r4, [r2, #0]
  tmpsmcr = TIMx->SMCR;
 8004f34:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f36:	4b28      	ldr	r3, [pc, #160]	@ (8004fd8 <HAL_TIM_ConfigClockSource+0x190>)
 8004f38:	4018      	ands	r0, r3
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f3a:	688b      	ldr	r3, [r1, #8]
 8004f3c:	684d      	ldr	r5, [r1, #4]
 8004f3e:	432b      	orrs	r3, r5
 8004f40:	68c9      	ldr	r1, [r1, #12]
 8004f42:	0209      	lsls	r1, r1, #8
 8004f44:	430b      	orrs	r3, r1
 8004f46:	4303      	orrs	r3, r0
  TIMx->SMCR = tmpsmcr;
 8004f48:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 8004f4a:	6811      	ldr	r1, [r2, #0]
 8004f4c:	688b      	ldr	r3, [r1, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f4e:	2077      	movs	r0, #119	@ 0x77
 8004f50:	4303      	orrs	r3, r0
      htim->Instance->SMCR = tmpsmcr;
 8004f52:	608b      	str	r3, [r1, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004f54:	2000      	movs	r0, #0
      break;
 8004f56:	e7c7      	b.n	8004ee8 <HAL_TIM_ConfigClockSource+0xa0>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f58:	6813      	ldr	r3, [r2, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f5a:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8004f5c:	68cc      	ldr	r4, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f5e:	6a19      	ldr	r1, [r3, #32]
 8004f60:	2510      	movs	r5, #16
 8004f62:	43a9      	bics	r1, r5
 8004f64:	6219      	str	r1, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f66:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8004f68:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f6a:	4e1c      	ldr	r6, [pc, #112]	@ (8004fdc <HAL_TIM_ConfigClockSource+0x194>)
 8004f6c:	4031      	ands	r1, r6
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f6e:	0324      	lsls	r4, r4, #12
 8004f70:	430c      	orrs	r4, r1
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f72:	21a0      	movs	r1, #160	@ 0xa0
 8004f74:	438d      	bics	r5, r1
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f76:	0101      	lsls	r1, r0, #4
 8004f78:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1 ;
 8004f7a:	619c      	str	r4, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f7c:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f7e:	6811      	ldr	r1, [r2, #0]
  tmpsmcr = TIMx->SMCR;
 8004f80:	688b      	ldr	r3, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f82:	2070      	movs	r0, #112	@ 0x70
 8004f84:	4383      	bics	r3, r0
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f86:	3809      	subs	r0, #9
 8004f88:	4303      	orrs	r3, r0
  TIMx->SMCR = tmpsmcr;
 8004f8a:	608b      	str	r3, [r1, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004f8c:	2000      	movs	r0, #0
}
 8004f8e:	e7ab      	b.n	8004ee8 <HAL_TIM_ConfigClockSource+0xa0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f90:	6813      	ldr	r3, [r2, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f92:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8004f94:	68c9      	ldr	r1, [r1, #12]
  tmpccer = TIMx->CCER;
 8004f96:	6a1c      	ldr	r4, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f98:	6a1d      	ldr	r5, [r3, #32]
 8004f9a:	2601      	movs	r6, #1
 8004f9c:	43b5      	bics	r5, r6
 8004f9e:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fa0:	699d      	ldr	r5, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004fa2:	36ef      	adds	r6, #239	@ 0xef
 8004fa4:	43b5      	bics	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004fa6:	0109      	lsls	r1, r1, #4
 8004fa8:	4329      	orrs	r1, r5
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004faa:	250a      	movs	r5, #10
 8004fac:	43ac      	bics	r4, r5
  tmpccer |= TIM_ICPolarity;
 8004fae:	4320      	orrs	r0, r4
  TIMx->CCMR1 = tmpccmr1;
 8004fb0:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fb2:	6218      	str	r0, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004fb4:	6811      	ldr	r1, [r2, #0]
  tmpsmcr = TIMx->SMCR;
 8004fb6:	688b      	ldr	r3, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004fb8:	2070      	movs	r0, #112	@ 0x70
 8004fba:	4383      	bics	r3, r0
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004fbc:	3829      	subs	r0, #41	@ 0x29
 8004fbe:	4303      	orrs	r3, r0
  TIMx->SMCR = tmpsmcr;
 8004fc0:	608b      	str	r3, [r1, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004fc2:	2000      	movs	r0, #0
}
 8004fc4:	e790      	b.n	8004ee8 <HAL_TIM_ConfigClockSource+0xa0>
  HAL_StatusTypeDef status = HAL_OK;
 8004fc6:	2000      	movs	r0, #0
 8004fc8:	e78e      	b.n	8004ee8 <HAL_TIM_ConfigClockSource+0xa0>
  switch (sClockSourceConfig->ClockSource)
 8004fca:	2001      	movs	r0, #1
 8004fcc:	e78c      	b.n	8004ee8 <HAL_TIM_ConfigClockSource+0xa0>
  __HAL_LOCK(htim);
 8004fce:	2002      	movs	r0, #2
 8004fd0:	e790      	b.n	8004ef4 <HAL_TIM_ConfigClockSource+0xac>
 8004fd2:	46c0      	nop			@ (mov r8, r8)
 8004fd4:	ffff0088 	.word	0xffff0088
 8004fd8:	ffff00ff 	.word	0xffff00ff
 8004fdc:	ffff0fff 	.word	0xffff0fff

08004fe0 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8004fe0:	4770      	bx	lr

08004fe2 <HAL_TIM_IC_CaptureCallback>:
}
 8004fe2:	4770      	bx	lr

08004fe4 <TIM_DMADelayPulseCplt>:
{
 8004fe4:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fe6:	6a84      	ldr	r4, [r0, #40]	@ 0x28
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004fe8:	6a23      	ldr	r3, [r4, #32]
 8004fea:	4283      	cmp	r3, r0
 8004fec:	d00e      	beq.n	800500c <TIM_DMADelayPulseCplt+0x28>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004fee:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004ff0:	4283      	cmp	r3, r0
 8004ff2:	d014      	beq.n	800501e <TIM_DMADelayPulseCplt+0x3a>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004ff4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004ff6:	4283      	cmp	r3, r0
 8004ff8:	d01a      	beq.n	8005030 <TIM_DMADelayPulseCplt+0x4c>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004ffa:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004ffc:	4283      	cmp	r3, r0
 8004ffe:	d020      	beq.n	8005042 <TIM_DMADelayPulseCplt+0x5e>
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005000:	0020      	movs	r0, r4
 8005002:	f7fc fcd5 	bl	80019b0 <HAL_TIM_PWM_PulseFinishedCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005006:	2300      	movs	r3, #0
 8005008:	7623      	strb	r3, [r4, #24]
}
 800500a:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800500c:	2301      	movs	r3, #1
 800500e:	7623      	strb	r3, [r4, #24]
    if (hdma->Init.Mode == DMA_NORMAL)
 8005010:	69c3      	ldr	r3, [r0, #28]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d1f4      	bne.n	8005000 <TIM_DMADelayPulseCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005016:	333a      	adds	r3, #58	@ 0x3a
 8005018:	2201      	movs	r2, #1
 800501a:	54e2      	strb	r2, [r4, r3]
 800501c:	e7f0      	b.n	8005000 <TIM_DMADelayPulseCplt+0x1c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800501e:	2302      	movs	r3, #2
 8005020:	7623      	strb	r3, [r4, #24]
    if (hdma->Init.Mode == DMA_NORMAL)
 8005022:	69c3      	ldr	r3, [r0, #28]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d1eb      	bne.n	8005000 <TIM_DMADelayPulseCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005028:	333b      	adds	r3, #59	@ 0x3b
 800502a:	2201      	movs	r2, #1
 800502c:	54e2      	strb	r2, [r4, r3]
 800502e:	e7e7      	b.n	8005000 <TIM_DMADelayPulseCplt+0x1c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005030:	2304      	movs	r3, #4
 8005032:	7623      	strb	r3, [r4, #24]
    if (hdma->Init.Mode == DMA_NORMAL)
 8005034:	69c3      	ldr	r3, [r0, #28]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d1e2      	bne.n	8005000 <TIM_DMADelayPulseCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800503a:	333c      	adds	r3, #60	@ 0x3c
 800503c:	2201      	movs	r2, #1
 800503e:	54e2      	strb	r2, [r4, r3]
 8005040:	e7de      	b.n	8005000 <TIM_DMADelayPulseCplt+0x1c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005042:	2308      	movs	r3, #8
 8005044:	7623      	strb	r3, [r4, #24]
    if (hdma->Init.Mode == DMA_NORMAL)
 8005046:	69c3      	ldr	r3, [r0, #28]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d1d9      	bne.n	8005000 <TIM_DMADelayPulseCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800504c:	333d      	adds	r3, #61	@ 0x3d
 800504e:	2201      	movs	r2, #1
 8005050:	54e2      	strb	r2, [r4, r3]
 8005052:	e7d5      	b.n	8005000 <TIM_DMADelayPulseCplt+0x1c>

08005054 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
}
 8005054:	4770      	bx	lr

08005056 <TIM_DMADelayPulseHalfCplt>:
{
 8005056:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005058:	6a84      	ldr	r4, [r0, #40]	@ 0x28
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800505a:	6a23      	ldr	r3, [r4, #32]
 800505c:	4283      	cmp	r3, r0
 800505e:	d00b      	beq.n	8005078 <TIM_DMADelayPulseHalfCplt+0x22>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005060:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005062:	4283      	cmp	r3, r0
 8005064:	d010      	beq.n	8005088 <TIM_DMADelayPulseHalfCplt+0x32>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005066:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8005068:	4283      	cmp	r3, r0
 800506a:	d010      	beq.n	800508e <TIM_DMADelayPulseHalfCplt+0x38>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800506c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800506e:	4283      	cmp	r3, r0
 8005070:	d104      	bne.n	800507c <TIM_DMADelayPulseHalfCplt+0x26>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005072:	2308      	movs	r3, #8
 8005074:	7623      	strb	r3, [r4, #24]
 8005076:	e001      	b.n	800507c <TIM_DMADelayPulseHalfCplt+0x26>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005078:	2301      	movs	r3, #1
 800507a:	7623      	strb	r3, [r4, #24]
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800507c:	0020      	movs	r0, r4
 800507e:	f7ff ffe9 	bl	8005054 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005082:	2300      	movs	r3, #0
 8005084:	7623      	strb	r3, [r4, #24]
}
 8005086:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005088:	2302      	movs	r3, #2
 800508a:	7623      	strb	r3, [r4, #24]
 800508c:	e7f6      	b.n	800507c <TIM_DMADelayPulseHalfCplt+0x26>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800508e:	2304      	movs	r3, #4
 8005090:	7623      	strb	r3, [r4, #24]
 8005092:	e7f3      	b.n	800507c <TIM_DMADelayPulseHalfCplt+0x26>

08005094 <HAL_TIM_TriggerCallback>:
}
 8005094:	4770      	bx	lr

08005096 <HAL_TIM_IRQHandler>:
{
 8005096:	b510      	push	{r4, lr}
 8005098:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800509a:	6802      	ldr	r2, [r0, #0]
 800509c:	6913      	ldr	r3, [r2, #16]
 800509e:	079b      	lsls	r3, r3, #30
 80050a0:	d50f      	bpl.n	80050c2 <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80050a2:	68d3      	ldr	r3, [r2, #12]
 80050a4:	079b      	lsls	r3, r3, #30
 80050a6:	d50c      	bpl.n	80050c2 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80050a8:	2303      	movs	r3, #3
 80050aa:	425b      	negs	r3, r3
 80050ac:	6113      	str	r3, [r2, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050ae:	3304      	adds	r3, #4
 80050b0:	7603      	strb	r3, [r0, #24]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80050b2:	6803      	ldr	r3, [r0, #0]
 80050b4:	699b      	ldr	r3, [r3, #24]
 80050b6:	079b      	lsls	r3, r3, #30
 80050b8:	d055      	beq.n	8005166 <HAL_TIM_IRQHandler+0xd0>
          HAL_TIM_IC_CaptureCallback(htim);
 80050ba:	f7ff ff92 	bl	8004fe2 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050be:	2300      	movs	r3, #0
 80050c0:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80050c2:	6822      	ldr	r2, [r4, #0]
 80050c4:	6913      	ldr	r3, [r2, #16]
 80050c6:	075b      	lsls	r3, r3, #29
 80050c8:	d512      	bpl.n	80050f0 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80050ca:	68d3      	ldr	r3, [r2, #12]
 80050cc:	075b      	lsls	r3, r3, #29
 80050ce:	d50f      	bpl.n	80050f0 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80050d0:	2305      	movs	r3, #5
 80050d2:	425b      	negs	r3, r3
 80050d4:	6113      	str	r3, [r2, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80050d6:	3307      	adds	r3, #7
 80050d8:	7623      	strb	r3, [r4, #24]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80050da:	6823      	ldr	r3, [r4, #0]
 80050dc:	699a      	ldr	r2, [r3, #24]
 80050de:	23c0      	movs	r3, #192	@ 0xc0
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	421a      	tst	r2, r3
 80050e4:	d045      	beq.n	8005172 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 80050e6:	0020      	movs	r0, r4
 80050e8:	f7ff ff7b 	bl	8004fe2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050ec:	2300      	movs	r3, #0
 80050ee:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80050f0:	6822      	ldr	r2, [r4, #0]
 80050f2:	6913      	ldr	r3, [r2, #16]
 80050f4:	071b      	lsls	r3, r3, #28
 80050f6:	d510      	bpl.n	800511a <HAL_TIM_IRQHandler+0x84>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80050f8:	68d3      	ldr	r3, [r2, #12]
 80050fa:	071b      	lsls	r3, r3, #28
 80050fc:	d50d      	bpl.n	800511a <HAL_TIM_IRQHandler+0x84>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80050fe:	2309      	movs	r3, #9
 8005100:	425b      	negs	r3, r3
 8005102:	6113      	str	r3, [r2, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005104:	330d      	adds	r3, #13
 8005106:	7623      	strb	r3, [r4, #24]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005108:	6823      	ldr	r3, [r4, #0]
 800510a:	69db      	ldr	r3, [r3, #28]
 800510c:	079b      	lsls	r3, r3, #30
 800510e:	d037      	beq.n	8005180 <HAL_TIM_IRQHandler+0xea>
        HAL_TIM_IC_CaptureCallback(htim);
 8005110:	0020      	movs	r0, r4
 8005112:	f7ff ff66 	bl	8004fe2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005116:	2300      	movs	r3, #0
 8005118:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800511a:	6822      	ldr	r2, [r4, #0]
 800511c:	6913      	ldr	r3, [r2, #16]
 800511e:	06db      	lsls	r3, r3, #27
 8005120:	d512      	bpl.n	8005148 <HAL_TIM_IRQHandler+0xb2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005122:	68d3      	ldr	r3, [r2, #12]
 8005124:	06db      	lsls	r3, r3, #27
 8005126:	d50f      	bpl.n	8005148 <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005128:	2311      	movs	r3, #17
 800512a:	425b      	negs	r3, r3
 800512c:	6113      	str	r3, [r2, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800512e:	3319      	adds	r3, #25
 8005130:	7623      	strb	r3, [r4, #24]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005132:	6823      	ldr	r3, [r4, #0]
 8005134:	69da      	ldr	r2, [r3, #28]
 8005136:	23c0      	movs	r3, #192	@ 0xc0
 8005138:	009b      	lsls	r3, r3, #2
 800513a:	421a      	tst	r2, r3
 800513c:	d027      	beq.n	800518e <HAL_TIM_IRQHandler+0xf8>
        HAL_TIM_IC_CaptureCallback(htim);
 800513e:	0020      	movs	r0, r4
 8005140:	f7ff ff4f 	bl	8004fe2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005144:	2300      	movs	r3, #0
 8005146:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005148:	6822      	ldr	r2, [r4, #0]
 800514a:	6913      	ldr	r3, [r2, #16]
 800514c:	07db      	lsls	r3, r3, #31
 800514e:	d502      	bpl.n	8005156 <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005150:	68d3      	ldr	r3, [r2, #12]
 8005152:	07db      	lsls	r3, r3, #31
 8005154:	d422      	bmi.n	800519c <HAL_TIM_IRQHandler+0x106>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005156:	6822      	ldr	r2, [r4, #0]
 8005158:	6913      	ldr	r3, [r2, #16]
 800515a:	065b      	lsls	r3, r3, #25
 800515c:	d502      	bpl.n	8005164 <HAL_TIM_IRQHandler+0xce>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800515e:	68d3      	ldr	r3, [r2, #12]
 8005160:	065b      	lsls	r3, r3, #25
 8005162:	d422      	bmi.n	80051aa <HAL_TIM_IRQHandler+0x114>
}
 8005164:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005166:	f7ff ff3b 	bl	8004fe0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800516a:	0020      	movs	r0, r4
 800516c:	f7fc fc20 	bl	80019b0 <HAL_TIM_PWM_PulseFinishedCallback>
 8005170:	e7a5      	b.n	80050be <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005172:	0020      	movs	r0, r4
 8005174:	f7ff ff34 	bl	8004fe0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005178:	0020      	movs	r0, r4
 800517a:	f7fc fc19 	bl	80019b0 <HAL_TIM_PWM_PulseFinishedCallback>
 800517e:	e7b5      	b.n	80050ec <HAL_TIM_IRQHandler+0x56>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005180:	0020      	movs	r0, r4
 8005182:	f7ff ff2d 	bl	8004fe0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005186:	0020      	movs	r0, r4
 8005188:	f7fc fc12 	bl	80019b0 <HAL_TIM_PWM_PulseFinishedCallback>
 800518c:	e7c3      	b.n	8005116 <HAL_TIM_IRQHandler+0x80>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800518e:	0020      	movs	r0, r4
 8005190:	f7ff ff26 	bl	8004fe0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005194:	0020      	movs	r0, r4
 8005196:	f7fc fc0b 	bl	80019b0 <HAL_TIM_PWM_PulseFinishedCallback>
 800519a:	e7d3      	b.n	8005144 <HAL_TIM_IRQHandler+0xae>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800519c:	2302      	movs	r3, #2
 800519e:	425b      	negs	r3, r3
 80051a0:	6113      	str	r3, [r2, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80051a2:	0020      	movs	r0, r4
 80051a4:	f7fc fbd0 	bl	8001948 <HAL_TIM_PeriodElapsedCallback>
 80051a8:	e7d5      	b.n	8005156 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80051aa:	2341      	movs	r3, #65	@ 0x41
 80051ac:	425b      	negs	r3, r3
 80051ae:	6113      	str	r3, [r2, #16]
      HAL_TIM_TriggerCallback(htim);
 80051b0:	0020      	movs	r0, r4
 80051b2:	f7ff ff6f 	bl	8005094 <HAL_TIM_TriggerCallback>
}
 80051b6:	e7d5      	b.n	8005164 <HAL_TIM_IRQHandler+0xce>

080051b8 <HAL_TIM_ErrorCallback>:
}
 80051b8:	4770      	bx	lr

080051ba <TIM_DMAError>:
{
 80051ba:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051bc:	6a84      	ldr	r4, [r0, #40]	@ 0x28
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80051be:	6a23      	ldr	r3, [r4, #32]
 80051c0:	4283      	cmp	r3, r0
 80051c2:	d00c      	beq.n	80051de <TIM_DMAError+0x24>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80051c4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80051c6:	4283      	cmp	r3, r0
 80051c8:	d013      	beq.n	80051f2 <TIM_DMAError+0x38>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80051ca:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80051cc:	4283      	cmp	r3, r0
 80051ce:	d016      	beq.n	80051fe <TIM_DMAError+0x44>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80051d0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80051d2:	4283      	cmp	r3, r0
 80051d4:	d019      	beq.n	800520a <TIM_DMAError+0x50>
    htim->State = HAL_TIM_STATE_READY;
 80051d6:	2339      	movs	r3, #57	@ 0x39
 80051d8:	2201      	movs	r2, #1
 80051da:	54e2      	strb	r2, [r4, r3]
 80051dc:	e003      	b.n	80051e6 <TIM_DMAError+0x2c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051de:	2301      	movs	r3, #1
 80051e0:	7623      	strb	r3, [r4, #24]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80051e2:	223a      	movs	r2, #58	@ 0x3a
 80051e4:	54a3      	strb	r3, [r4, r2]
  HAL_TIM_ErrorCallback(htim);
 80051e6:	0020      	movs	r0, r4
 80051e8:	f7ff ffe6 	bl	80051b8 <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051ec:	2300      	movs	r3, #0
 80051ee:	7623      	strb	r3, [r4, #24]
}
 80051f0:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051f2:	2302      	movs	r3, #2
 80051f4:	7623      	strb	r3, [r4, #24]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80051f6:	3339      	adds	r3, #57	@ 0x39
 80051f8:	2201      	movs	r2, #1
 80051fa:	54e2      	strb	r2, [r4, r3]
 80051fc:	e7f3      	b.n	80051e6 <TIM_DMAError+0x2c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051fe:	2304      	movs	r3, #4
 8005200:	7623      	strb	r3, [r4, #24]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005202:	3338      	adds	r3, #56	@ 0x38
 8005204:	2201      	movs	r2, #1
 8005206:	54e2      	strb	r2, [r4, r3]
 8005208:	e7ed      	b.n	80051e6 <TIM_DMAError+0x2c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800520a:	2308      	movs	r3, #8
 800520c:	7623      	strb	r3, [r4, #24]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800520e:	3335      	adds	r3, #53	@ 0x35
 8005210:	2201      	movs	r2, #1
 8005212:	54e2      	strb	r2, [r4, r3]
 8005214:	e7e7      	b.n	80051e6 <TIM_DMAError+0x2c>

08005216 <HAL_TIM_Base_GetState>:
  return htim->State;
 8005216:	2339      	movs	r3, #57	@ 0x39
 8005218:	5cc0      	ldrb	r0, [r0, r3]
 800521a:	b2c0      	uxtb	r0, r0
}
 800521c:	4770      	bx	lr
	...

08005220 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005220:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005222:	2338      	movs	r3, #56	@ 0x38
 8005224:	5cc3      	ldrb	r3, [r0, r3]
 8005226:	2b01      	cmp	r3, #1
 8005228:	d025      	beq.n	8005276 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800522a:	2338      	movs	r3, #56	@ 0x38
 800522c:	2201      	movs	r2, #1
 800522e:	54c2      	strb	r2, [r0, r3]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005230:	3301      	adds	r3, #1
 8005232:	3201      	adds	r2, #1
 8005234:	54c2      	strb	r2, [r0, r3]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005236:	6804      	ldr	r4, [r0, #0]
 8005238:	6863      	ldr	r3, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800523a:	68a2      	ldr	r2, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800523c:	2570      	movs	r5, #112	@ 0x70
 800523e:	43ab      	bics	r3, r5
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005240:	680d      	ldr	r5, [r1, #0]
 8005242:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005244:	6063      	str	r3, [r4, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005246:	6803      	ldr	r3, [r0, #0]
 8005248:	2480      	movs	r4, #128	@ 0x80
 800524a:	05e4      	lsls	r4, r4, #23
 800524c:	42a3      	cmp	r3, r4
 800524e:	d005      	beq.n	800525c <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8005250:	4c0a      	ldr	r4, [pc, #40]	@ (800527c <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
 8005252:	42a3      	cmp	r3, r4
 8005254:	d002      	beq.n	800525c <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8005256:	4c0a      	ldr	r4, [pc, #40]	@ (8005280 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 8005258:	42a3      	cmp	r3, r4
 800525a:	d104      	bne.n	8005266 <HAL_TIMEx_MasterConfigSynchronization+0x46>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800525c:	2480      	movs	r4, #128	@ 0x80
 800525e:	43a2      	bics	r2, r4
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005260:	6849      	ldr	r1, [r1, #4]
 8005262:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005264:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005266:	2339      	movs	r3, #57	@ 0x39
 8005268:	2201      	movs	r2, #1
 800526a:	54c2      	strb	r2, [r0, r3]

  __HAL_UNLOCK(htim);
 800526c:	3b01      	subs	r3, #1
 800526e:	2200      	movs	r2, #0
 8005270:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 8005272:	2000      	movs	r0, #0
}
 8005274:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 8005276:	2002      	movs	r0, #2
 8005278:	e7fc      	b.n	8005274 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 800527a:	46c0      	nop			@ (mov r8, r8)
 800527c:	40010800 	.word	0x40010800
 8005280:	40011400 	.word	0x40011400

08005284 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005284:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005286:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800528a:	2201      	movs	r2, #1
 800528c:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005290:	6801      	ldr	r1, [r0, #0]
 8005292:	680b      	ldr	r3, [r1, #0]
 8005294:	4c12      	ldr	r4, [pc, #72]	@ (80052e0 <UART_EndRxTransfer+0x5c>)
 8005296:	4023      	ands	r3, r4
 8005298:	600b      	str	r3, [r1, #0]
 800529a:	f38c 8810 	msr	PRIMASK, ip
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800529e:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052a2:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052a6:	6801      	ldr	r1, [r0, #0]
 80052a8:	688b      	ldr	r3, [r1, #8]
 80052aa:	4393      	bics	r3, r2
 80052ac:	608b      	str	r3, [r1, #8]
 80052ae:	f38c 8810 	msr	PRIMASK, ip

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052b2:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d006      	beq.n	80052c6 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052b8:	2380      	movs	r3, #128	@ 0x80
 80052ba:	2220      	movs	r2, #32
 80052bc:	50c2      	str	r2, [r0, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052be:	2300      	movs	r3, #0
 80052c0:	6603      	str	r3, [r0, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80052c2:	6683      	str	r3, [r0, #104]	@ 0x68
}
 80052c4:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052c6:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052ca:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052ce:	6802      	ldr	r2, [r0, #0]
 80052d0:	6813      	ldr	r3, [r2, #0]
 80052d2:	3432      	adds	r4, #50	@ 0x32
 80052d4:	34ff      	adds	r4, #255	@ 0xff
 80052d6:	43a3      	bics	r3, r4
 80052d8:	6013      	str	r3, [r2, #0]
 80052da:	f381 8810 	msr	PRIMASK, r1
}
 80052de:	e7eb      	b.n	80052b8 <UART_EndRxTransfer+0x34>
 80052e0:	fffffedf 	.word	0xfffffedf

080052e4 <UART_SetConfig>:
{
 80052e4:	b5d0      	push	{r4, r6, r7, lr}
 80052e6:	0004      	movs	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 80052e8:	6801      	ldr	r1, [r0, #0]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80052ea:	680a      	ldr	r2, [r1, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80052ec:	6883      	ldr	r3, [r0, #8]
 80052ee:	6900      	ldr	r0, [r0, #16]
 80052f0:	4303      	orrs	r3, r0
 80052f2:	6960      	ldr	r0, [r4, #20]
 80052f4:	4303      	orrs	r3, r0
 80052f6:	69e0      	ldr	r0, [r4, #28]
 80052f8:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80052fa:	4881      	ldr	r0, [pc, #516]	@ (8005500 <UART_SetConfig+0x21c>)
 80052fc:	4002      	ands	r2, r0
 80052fe:	4313      	orrs	r3, r2
 8005300:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005302:	6822      	ldr	r2, [r4, #0]
 8005304:	6853      	ldr	r3, [r2, #4]
 8005306:	497f      	ldr	r1, [pc, #508]	@ (8005504 <UART_SetConfig+0x220>)
 8005308:	400b      	ands	r3, r1
 800530a:	68e1      	ldr	r1, [r4, #12]
 800530c:	430b      	orrs	r3, r1
 800530e:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005310:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005312:	6822      	ldr	r2, [r4, #0]
 8005314:	4b7c      	ldr	r3, [pc, #496]	@ (8005508 <UART_SetConfig+0x224>)
 8005316:	429a      	cmp	r2, r3
 8005318:	d001      	beq.n	800531e <UART_SetConfig+0x3a>
    tmpreg |= huart->Init.OneBitSampling;
 800531a:	6a23      	ldr	r3, [r4, #32]
 800531c:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800531e:	6893      	ldr	r3, [r2, #8]
 8005320:	487a      	ldr	r0, [pc, #488]	@ (800550c <UART_SetConfig+0x228>)
 8005322:	4003      	ands	r3, r0
 8005324:	430b      	orrs	r3, r1
 8005326:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005328:	6822      	ldr	r2, [r4, #0]
 800532a:	4b79      	ldr	r3, [pc, #484]	@ (8005510 <UART_SetConfig+0x22c>)
 800532c:	429a      	cmp	r2, r3
 800532e:	d00f      	beq.n	8005350 <UART_SetConfig+0x6c>
 8005330:	4975      	ldr	r1, [pc, #468]	@ (8005508 <UART_SetConfig+0x224>)
 8005332:	2310      	movs	r3, #16
 8005334:	428a      	cmp	r2, r1
 8005336:	d026      	beq.n	8005386 <UART_SetConfig+0xa2>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005338:	69e2      	ldr	r2, [r4, #28]
 800533a:	2180      	movs	r1, #128	@ 0x80
 800533c:	0209      	lsls	r1, r1, #8
 800533e:	428a      	cmp	r2, r1
 8005340:	d06c      	beq.n	800541c <UART_SetConfig+0x138>
    switch (clocksource)
 8005342:	2b08      	cmp	r3, #8
 8005344:	d900      	bls.n	8005348 <UART_SetConfig+0x64>
 8005346:	e0cf      	b.n	80054e8 <UART_SetConfig+0x204>
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	4a72      	ldr	r2, [pc, #456]	@ (8005514 <UART_SetConfig+0x230>)
 800534c:	58d3      	ldr	r3, [r2, r3]
 800534e:	469f      	mov	pc, r3
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005350:	4b71      	ldr	r3, [pc, #452]	@ (8005518 <UART_SetConfig+0x234>)
 8005352:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005354:	230c      	movs	r3, #12
 8005356:	4013      	ands	r3, r2
 8005358:	2b08      	cmp	r3, #8
 800535a:	d100      	bne.n	800535e <UART_SetConfig+0x7a>
 800535c:	e0c6      	b.n	80054ec <UART_SetConfig+0x208>
 800535e:	d80a      	bhi.n	8005376 <UART_SetConfig+0x92>
 8005360:	2b00      	cmp	r3, #0
 8005362:	d100      	bne.n	8005366 <UART_SetConfig+0x82>
 8005364:	e0c4      	b.n	80054f0 <UART_SetConfig+0x20c>
 8005366:	3b04      	subs	r3, #4
 8005368:	425a      	negs	r2, r3
 800536a:	4153      	adcs	r3, r2
 800536c:	425b      	negs	r3, r3
 800536e:	220b      	movs	r2, #11
 8005370:	4393      	bics	r3, r2
 8005372:	3310      	adds	r3, #16
 8005374:	e7e0      	b.n	8005338 <UART_SetConfig+0x54>
 8005376:	3b0c      	subs	r3, #12
 8005378:	425a      	negs	r2, r3
 800537a:	4153      	adcs	r3, r2
 800537c:	425b      	negs	r3, r3
 800537e:	2207      	movs	r2, #7
 8005380:	4393      	bics	r3, r2
 8005382:	3310      	adds	r3, #16
 8005384:	e7d8      	b.n	8005338 <UART_SetConfig+0x54>
 8005386:	4b64      	ldr	r3, [pc, #400]	@ (8005518 <UART_SetConfig+0x234>)
 8005388:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800538a:	22c0      	movs	r2, #192	@ 0xc0
 800538c:	0112      	lsls	r2, r2, #4
 800538e:	4013      	ands	r3, r2
 8005390:	2280      	movs	r2, #128	@ 0x80
 8005392:	0112      	lsls	r2, r2, #4
 8005394:	4293      	cmp	r3, r2
 8005396:	d037      	beq.n	8005408 <UART_SetConfig+0x124>
 8005398:	d80b      	bhi.n	80053b2 <UART_SetConfig+0xce>
 800539a:	2b00      	cmp	r3, #0
 800539c:	d02d      	beq.n	80053fa <UART_SetConfig+0x116>
 800539e:	2280      	movs	r2, #128	@ 0x80
 80053a0:	00d2      	lsls	r2, r2, #3
 80053a2:	2001      	movs	r0, #1
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d000      	beq.n	80053aa <UART_SetConfig+0xc6>
 80053a8:	e083      	b.n	80054b2 <UART_SetConfig+0x1ce>
        pclk = HAL_RCC_GetSysClockFreq();
 80053aa:	f7fe fc79 	bl	8003ca0 <HAL_RCC_GetSysClockFreq>
 80053ae:	0003      	movs	r3, r0
        break;
 80053b0:	e026      	b.n	8005400 <UART_SetConfig+0x11c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053b2:	22c0      	movs	r2, #192	@ 0xc0
 80053b4:	0112      	lsls	r2, r2, #4
 80053b6:	2001      	movs	r0, #1
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d17a      	bne.n	80054b2 <UART_SetConfig+0x1ce>
 80053bc:	2380      	movs	r3, #128	@ 0x80
 80053be:	021b      	lsls	r3, r3, #8
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80053c0:	6862      	ldr	r2, [r4, #4]
 80053c2:	0051      	lsls	r1, r2, #1
 80053c4:	1889      	adds	r1, r1, r2
        ret = HAL_ERROR;
 80053c6:	2001      	movs	r0, #1
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80053c8:	4299      	cmp	r1, r3
 80053ca:	d872      	bhi.n	80054b2 <UART_SetConfig+0x1ce>
          (pclk > (4096U * huart->Init.BaudRate)))
 80053cc:	0311      	lsls	r1, r2, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80053ce:	4299      	cmp	r1, r3
 80053d0:	d36f      	bcc.n	80054b2 <UART_SetConfig+0x1ce>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80053d2:	0e19      	lsrs	r1, r3, #24
 80053d4:	0218      	lsls	r0, r3, #8
 80053d6:	0856      	lsrs	r6, r2, #1
 80053d8:	2700      	movs	r7, #0
 80053da:	1980      	adds	r0, r0, r6
 80053dc:	4179      	adcs	r1, r7
 80053de:	2300      	movs	r3, #0
 80053e0:	f7fb f842 	bl	8000468 <__aeabi_uldivmod>
 80053e4:	0003      	movs	r3, r0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80053e6:	4a4d      	ldr	r2, [pc, #308]	@ (800551c <UART_SetConfig+0x238>)
 80053e8:	1881      	adds	r1, r0, r2
 80053ea:	4a4d      	ldr	r2, [pc, #308]	@ (8005520 <UART_SetConfig+0x23c>)
          ret = HAL_ERROR;
 80053ec:	2001      	movs	r0, #1
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80053ee:	4291      	cmp	r1, r2
 80053f0:	d85f      	bhi.n	80054b2 <UART_SetConfig+0x1ce>
          huart->Instance->BRR = usartdiv;
 80053f2:	6822      	ldr	r2, [r4, #0]
 80053f4:	60d3      	str	r3, [r2, #12]
 80053f6:	2000      	movs	r0, #0
 80053f8:	e05b      	b.n	80054b2 <UART_SetConfig+0x1ce>
        pclk = HAL_RCC_GetPCLK1Freq();
 80053fa:	f7ff f86f 	bl	80044dc <HAL_RCC_GetPCLK1Freq>
 80053fe:	0003      	movs	r3, r0
    if (pclk != 0U)
 8005400:	2000      	movs	r0, #0
 8005402:	2b00      	cmp	r3, #0
 8005404:	d055      	beq.n	80054b2 <UART_SetConfig+0x1ce>
 8005406:	e7db      	b.n	80053c0 <UART_SetConfig+0xdc>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005408:	4b43      	ldr	r3, [pc, #268]	@ (8005518 <UART_SetConfig+0x234>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	06db      	lsls	r3, r3, #27
          pclk = (uint32_t) HSI_VALUE;
 800540e:	17db      	asrs	r3, r3, #31
 8005410:	4a44      	ldr	r2, [pc, #272]	@ (8005524 <UART_SetConfig+0x240>)
 8005412:	4013      	ands	r3, r2
 8005414:	4a44      	ldr	r2, [pc, #272]	@ (8005528 <UART_SetConfig+0x244>)
 8005416:	4694      	mov	ip, r2
 8005418:	4463      	add	r3, ip
 800541a:	e7d1      	b.n	80053c0 <UART_SetConfig+0xdc>
    switch (clocksource)
 800541c:	2b08      	cmp	r3, #8
 800541e:	d861      	bhi.n	80054e4 <UART_SetConfig+0x200>
 8005420:	009b      	lsls	r3, r3, #2
 8005422:	4942      	ldr	r1, [pc, #264]	@ (800552c <UART_SetConfig+0x248>)
 8005424:	58cb      	ldr	r3, [r1, r3]
 8005426:	469f      	mov	pc, r3
        pclk = HAL_RCC_GetPCLK1Freq();
 8005428:	f7ff f858 	bl	80044dc <HAL_RCC_GetPCLK1Freq>
 800542c:	0002      	movs	r2, r0
    if (pclk != 0U)
 800542e:	2000      	movs	r0, #0
 8005430:	2a00      	cmp	r2, #0
 8005432:	d03e      	beq.n	80054b2 <UART_SetConfig+0x1ce>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005434:	6861      	ldr	r1, [r4, #4]
 8005436:	0050      	lsls	r0, r2, #1
 8005438:	084b      	lsrs	r3, r1, #1
 800543a:	18c0      	adds	r0, r0, r3
 800543c:	f7fa fe64 	bl	8000108 <__udivsi3>
 8005440:	0003      	movs	r3, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005442:	0001      	movs	r1, r0
 8005444:	3910      	subs	r1, #16
 8005446:	4a3a      	ldr	r2, [pc, #232]	@ (8005530 <UART_SetConfig+0x24c>)
        ret = HAL_ERROR;
 8005448:	2001      	movs	r0, #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800544a:	4291      	cmp	r1, r2
 800544c:	d831      	bhi.n	80054b2 <UART_SetConfig+0x1ce>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800544e:	4a39      	ldr	r2, [pc, #228]	@ (8005534 <UART_SetConfig+0x250>)
 8005450:	401a      	ands	r2, r3
        huart->Instance->BRR = brrtemp;
 8005452:	6821      	ldr	r1, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005454:	071b      	lsls	r3, r3, #28
 8005456:	0f5b      	lsrs	r3, r3, #29
        huart->Instance->BRR = brrtemp;
 8005458:	4313      	orrs	r3, r2
 800545a:	60cb      	str	r3, [r1, #12]
 800545c:	2000      	movs	r0, #0
 800545e:	e028      	b.n	80054b2 <UART_SetConfig+0x1ce>
        pclk = HAL_RCC_GetPCLK2Freq();
 8005460:	f7ff f84c 	bl	80044fc <HAL_RCC_GetPCLK2Freq>
 8005464:	0002      	movs	r2, r0
        break;
 8005466:	e7e2      	b.n	800542e <UART_SetConfig+0x14a>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005468:	4b2b      	ldr	r3, [pc, #172]	@ (8005518 <UART_SetConfig+0x234>)
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	06d2      	lsls	r2, r2, #27
          pclk = (uint32_t) HSI_VALUE;
 800546e:	17d2      	asrs	r2, r2, #31
 8005470:	4b2c      	ldr	r3, [pc, #176]	@ (8005524 <UART_SetConfig+0x240>)
 8005472:	401a      	ands	r2, r3
 8005474:	4b2c      	ldr	r3, [pc, #176]	@ (8005528 <UART_SetConfig+0x244>)
 8005476:	469c      	mov	ip, r3
 8005478:	4462      	add	r2, ip
 800547a:	e7db      	b.n	8005434 <UART_SetConfig+0x150>
        pclk = HAL_RCC_GetSysClockFreq();
 800547c:	f7fe fc10 	bl	8003ca0 <HAL_RCC_GetSysClockFreq>
 8005480:	0002      	movs	r2, r0
        break;
 8005482:	e7d4      	b.n	800542e <UART_SetConfig+0x14a>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005484:	f7ff f82a 	bl	80044dc <HAL_RCC_GetPCLK1Freq>
 8005488:	0003      	movs	r3, r0
    if (pclk != 0U)
 800548a:	2000      	movs	r0, #0
 800548c:	2b00      	cmp	r3, #0
 800548e:	d010      	beq.n	80054b2 <UART_SetConfig+0x1ce>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005490:	6861      	ldr	r1, [r4, #4]
 8005492:	0848      	lsrs	r0, r1, #1
 8005494:	18c0      	adds	r0, r0, r3
 8005496:	f7fa fe37 	bl	8000108 <__udivsi3>
 800549a:	0003      	movs	r3, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800549c:	0001      	movs	r1, r0
 800549e:	3910      	subs	r1, #16
 80054a0:	4a23      	ldr	r2, [pc, #140]	@ (8005530 <UART_SetConfig+0x24c>)
        ret = HAL_ERROR;
 80054a2:	2001      	movs	r0, #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054a4:	4291      	cmp	r1, r2
 80054a6:	d804      	bhi.n	80054b2 <UART_SetConfig+0x1ce>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80054a8:	6822      	ldr	r2, [r4, #0]
 80054aa:	041b      	lsls	r3, r3, #16
 80054ac:	0c1b      	lsrs	r3, r3, #16
 80054ae:	60d3      	str	r3, [r2, #12]
 80054b0:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 80054b2:	2300      	movs	r3, #0
 80054b4:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 80054b6:	66e3      	str	r3, [r4, #108]	@ 0x6c
}
 80054b8:	bdd0      	pop	{r4, r6, r7, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 80054ba:	f7ff f81f 	bl	80044fc <HAL_RCC_GetPCLK2Freq>
 80054be:	0003      	movs	r3, r0
        break;
 80054c0:	e7e3      	b.n	800548a <UART_SetConfig+0x1a6>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80054c2:	4b15      	ldr	r3, [pc, #84]	@ (8005518 <UART_SetConfig+0x234>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	06db      	lsls	r3, r3, #27
          pclk = (uint32_t) HSI_VALUE;
 80054c8:	17db      	asrs	r3, r3, #31
 80054ca:	4a16      	ldr	r2, [pc, #88]	@ (8005524 <UART_SetConfig+0x240>)
 80054cc:	4013      	ands	r3, r2
 80054ce:	4a16      	ldr	r2, [pc, #88]	@ (8005528 <UART_SetConfig+0x244>)
 80054d0:	4694      	mov	ip, r2
 80054d2:	4463      	add	r3, ip
 80054d4:	e7dc      	b.n	8005490 <UART_SetConfig+0x1ac>
        pclk = HAL_RCC_GetSysClockFreq();
 80054d6:	f7fe fbe3 	bl	8003ca0 <HAL_RCC_GetSysClockFreq>
 80054da:	0003      	movs	r3, r0
        break;
 80054dc:	e7d5      	b.n	800548a <UART_SetConfig+0x1a6>
    switch (clocksource)
 80054de:	2380      	movs	r3, #128	@ 0x80
 80054e0:	021b      	lsls	r3, r3, #8
 80054e2:	e7d5      	b.n	8005490 <UART_SetConfig+0x1ac>
    switch (clocksource)
 80054e4:	2001      	movs	r0, #1
 80054e6:	e7e4      	b.n	80054b2 <UART_SetConfig+0x1ce>
    switch (clocksource)
 80054e8:	2001      	movs	r0, #1
 80054ea:	e7e2      	b.n	80054b2 <UART_SetConfig+0x1ce>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80054ec:	2302      	movs	r3, #2
 80054ee:	e723      	b.n	8005338 <UART_SetConfig+0x54>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054f0:	2380      	movs	r3, #128	@ 0x80
 80054f2:	021b      	lsls	r3, r3, #8
 80054f4:	69e2      	ldr	r2, [r4, #28]
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d096      	beq.n	8005428 <UART_SetConfig+0x144>
 80054fa:	2300      	movs	r3, #0
 80054fc:	e721      	b.n	8005342 <UART_SetConfig+0x5e>
 80054fe:	46c0      	nop			@ (mov r8, r8)
 8005500:	efff69f3 	.word	0xefff69f3
 8005504:	ffffcfff 	.word	0xffffcfff
 8005508:	40004800 	.word	0x40004800
 800550c:	fffff4ff 	.word	0xfffff4ff
 8005510:	40004400 	.word	0x40004400
 8005514:	08005b6c 	.word	0x08005b6c
 8005518:	40021000 	.word	0x40021000
 800551c:	fffffd00 	.word	0xfffffd00
 8005520:	000ffcff 	.word	0x000ffcff
 8005524:	ff48e500 	.word	0xff48e500
 8005528:	00f42400 	.word	0x00f42400
 800552c:	08005b90 	.word	0x08005b90
 8005530:	0000ffef 	.word	0x0000ffef
 8005534:	0000fff0 	.word	0x0000fff0

08005538 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005538:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800553a:	07db      	lsls	r3, r3, #31
 800553c:	d506      	bpl.n	800554c <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800553e:	6802      	ldr	r2, [r0, #0]
 8005540:	6853      	ldr	r3, [r2, #4]
 8005542:	492c      	ldr	r1, [pc, #176]	@ (80055f4 <UART_AdvFeatureConfig+0xbc>)
 8005544:	400b      	ands	r3, r1
 8005546:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8005548:	430b      	orrs	r3, r1
 800554a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800554c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800554e:	079b      	lsls	r3, r3, #30
 8005550:	d506      	bpl.n	8005560 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005552:	6802      	ldr	r2, [r0, #0]
 8005554:	6853      	ldr	r3, [r2, #4]
 8005556:	4928      	ldr	r1, [pc, #160]	@ (80055f8 <UART_AdvFeatureConfig+0xc0>)
 8005558:	400b      	ands	r3, r1
 800555a:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800555c:	430b      	orrs	r3, r1
 800555e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005560:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8005562:	075b      	lsls	r3, r3, #29
 8005564:	d506      	bpl.n	8005574 <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005566:	6802      	ldr	r2, [r0, #0]
 8005568:	6853      	ldr	r3, [r2, #4]
 800556a:	4924      	ldr	r1, [pc, #144]	@ (80055fc <UART_AdvFeatureConfig+0xc4>)
 800556c:	400b      	ands	r3, r1
 800556e:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8005570:	430b      	orrs	r3, r1
 8005572:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005574:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8005576:	071b      	lsls	r3, r3, #28
 8005578:	d506      	bpl.n	8005588 <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800557a:	6802      	ldr	r2, [r0, #0]
 800557c:	6853      	ldr	r3, [r2, #4]
 800557e:	4920      	ldr	r1, [pc, #128]	@ (8005600 <UART_AdvFeatureConfig+0xc8>)
 8005580:	400b      	ands	r3, r1
 8005582:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 8005584:	430b      	orrs	r3, r1
 8005586:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005588:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800558a:	06db      	lsls	r3, r3, #27
 800558c:	d506      	bpl.n	800559c <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800558e:	6802      	ldr	r2, [r0, #0]
 8005590:	6893      	ldr	r3, [r2, #8]
 8005592:	491c      	ldr	r1, [pc, #112]	@ (8005604 <UART_AdvFeatureConfig+0xcc>)
 8005594:	400b      	ands	r3, r1
 8005596:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8005598:	430b      	orrs	r3, r1
 800559a:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800559c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800559e:	069b      	lsls	r3, r3, #26
 80055a0:	d506      	bpl.n	80055b0 <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80055a2:	6802      	ldr	r2, [r0, #0]
 80055a4:	6893      	ldr	r3, [r2, #8]
 80055a6:	4918      	ldr	r1, [pc, #96]	@ (8005608 <UART_AdvFeatureConfig+0xd0>)
 80055a8:	400b      	ands	r3, r1
 80055aa:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 80055ac:	430b      	orrs	r3, r1
 80055ae:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80055b0:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80055b2:	065b      	lsls	r3, r3, #25
 80055b4:	d50b      	bpl.n	80055ce <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80055b6:	6802      	ldr	r2, [r0, #0]
 80055b8:	6853      	ldr	r3, [r2, #4]
 80055ba:	4914      	ldr	r1, [pc, #80]	@ (800560c <UART_AdvFeatureConfig+0xd4>)
 80055bc:	400b      	ands	r3, r1
 80055be:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 80055c0:	430b      	orrs	r3, r1
 80055c2:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80055c4:	2380      	movs	r3, #128	@ 0x80
 80055c6:	035b      	lsls	r3, r3, #13
 80055c8:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d00a      	beq.n	80055e4 <UART_AdvFeatureConfig+0xac>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80055ce:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80055d0:	061b      	lsls	r3, r3, #24
 80055d2:	d506      	bpl.n	80055e2 <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80055d4:	6802      	ldr	r2, [r0, #0]
 80055d6:	6853      	ldr	r3, [r2, #4]
 80055d8:	490d      	ldr	r1, [pc, #52]	@ (8005610 <UART_AdvFeatureConfig+0xd8>)
 80055da:	400b      	ands	r3, r1
 80055dc:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 80055de:	430b      	orrs	r3, r1
 80055e0:	6053      	str	r3, [r2, #4]
}
 80055e2:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80055e4:	6802      	ldr	r2, [r0, #0]
 80055e6:	6853      	ldr	r3, [r2, #4]
 80055e8:	490a      	ldr	r1, [pc, #40]	@ (8005614 <UART_AdvFeatureConfig+0xdc>)
 80055ea:	400b      	ands	r3, r1
 80055ec:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 80055ee:	430b      	orrs	r3, r1
 80055f0:	6053      	str	r3, [r2, #4]
 80055f2:	e7ec      	b.n	80055ce <UART_AdvFeatureConfig+0x96>
 80055f4:	fffdffff 	.word	0xfffdffff
 80055f8:	fffeffff 	.word	0xfffeffff
 80055fc:	fffbffff 	.word	0xfffbffff
 8005600:	ffff7fff 	.word	0xffff7fff
 8005604:	ffffefff 	.word	0xffffefff
 8005608:	ffffdfff 	.word	0xffffdfff
 800560c:	ffefffff 	.word	0xffefffff
 8005610:	fff7ffff 	.word	0xfff7ffff
 8005614:	ff9fffff 	.word	0xff9fffff

08005618 <UART_WaitOnFlagUntilTimeout>:
{
 8005618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800561a:	46ce      	mov	lr, r9
 800561c:	4647      	mov	r7, r8
 800561e:	b580      	push	{r7, lr}
 8005620:	4680      	mov	r8, r0
 8005622:	000d      	movs	r5, r1
 8005624:	0016      	movs	r6, r2
 8005626:	4699      	mov	r9, r3
 8005628:	9f08      	ldr	r7, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800562a:	4643      	mov	r3, r8
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	69dc      	ldr	r4, [r3, #28]
 8005630:	402c      	ands	r4, r5
 8005632:	1b64      	subs	r4, r4, r5
 8005634:	4262      	negs	r2, r4
 8005636:	4154      	adcs	r4, r2
 8005638:	42b4      	cmp	r4, r6
 800563a:	d131      	bne.n	80056a0 <UART_WaitOnFlagUntilTimeout+0x88>
    if (Timeout != HAL_MAX_DELAY)
 800563c:	1c7a      	adds	r2, r7, #1
 800563e:	d0f6      	beq.n	800562e <UART_WaitOnFlagUntilTimeout+0x16>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005640:	f7fd fb26 	bl	8002c90 <HAL_GetTick>
 8005644:	464b      	mov	r3, r9
 8005646:	1ac0      	subs	r0, r0, r3
 8005648:	42b8      	cmp	r0, r7
 800564a:	d82e      	bhi.n	80056aa <UART_WaitOnFlagUntilTimeout+0x92>
 800564c:	2f00      	cmp	r7, #0
 800564e:	d02e      	beq.n	80056ae <UART_WaitOnFlagUntilTimeout+0x96>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005650:	4643      	mov	r3, r8
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	0752      	lsls	r2, r2, #29
 8005658:	d5e7      	bpl.n	800562a <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800565a:	69da      	ldr	r2, [r3, #28]
 800565c:	0712      	lsls	r2, r2, #28
 800565e:	d411      	bmi.n	8005684 <UART_WaitOnFlagUntilTimeout+0x6c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005660:	69da      	ldr	r2, [r3, #28]
 8005662:	0512      	lsls	r2, r2, #20
 8005664:	d5e1      	bpl.n	800562a <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005666:	2280      	movs	r2, #128	@ 0x80
 8005668:	0112      	lsls	r2, r2, #4
 800566a:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 800566c:	4640      	mov	r0, r8
 800566e:	f7ff fe09 	bl	8005284 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005672:	2384      	movs	r3, #132	@ 0x84
 8005674:	2220      	movs	r2, #32
 8005676:	4641      	mov	r1, r8
 8005678:	50ca      	str	r2, [r1, r3]
          __HAL_UNLOCK(huart);
 800567a:	3b0c      	subs	r3, #12
 800567c:	2200      	movs	r2, #0
 800567e:	54ca      	strb	r2, [r1, r3]
          return HAL_TIMEOUT;
 8005680:	2003      	movs	r0, #3
 8005682:	e00e      	b.n	80056a2 <UART_WaitOnFlagUntilTimeout+0x8a>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005684:	2408      	movs	r4, #8
 8005686:	621c      	str	r4, [r3, #32]
           UART_EndRxTransfer(huart);
 8005688:	4640      	mov	r0, r8
 800568a:	f7ff fdfb 	bl	8005284 <UART_EndRxTransfer>
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800568e:	2384      	movs	r3, #132	@ 0x84
 8005690:	4642      	mov	r2, r8
 8005692:	50d4      	str	r4, [r2, r3]
           __HAL_UNLOCK(huart);
 8005694:	3b0c      	subs	r3, #12
 8005696:	2200      	movs	r2, #0
 8005698:	4641      	mov	r1, r8
 800569a:	54ca      	strb	r2, [r1, r3]
           return HAL_ERROR;
 800569c:	2001      	movs	r0, #1
 800569e:	e000      	b.n	80056a2 <UART_WaitOnFlagUntilTimeout+0x8a>
  return HAL_OK;
 80056a0:	2000      	movs	r0, #0
}
 80056a2:	bcc0      	pop	{r6, r7}
 80056a4:	46b9      	mov	r9, r7
 80056a6:	46b0      	mov	r8, r6
 80056a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 80056aa:	2003      	movs	r0, #3
 80056ac:	e7f9      	b.n	80056a2 <UART_WaitOnFlagUntilTimeout+0x8a>
 80056ae:	2003      	movs	r0, #3
 80056b0:	e7f7      	b.n	80056a2 <UART_WaitOnFlagUntilTimeout+0x8a>
	...

080056b4 <UART_CheckIdleState>:
{
 80056b4:	b530      	push	{r4, r5, lr}
 80056b6:	b083      	sub	sp, #12
 80056b8:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056ba:	2384      	movs	r3, #132	@ 0x84
 80056bc:	2200      	movs	r2, #0
 80056be:	50c2      	str	r2, [r0, r3]
  tickstart = HAL_GetTick();
 80056c0:	f7fd fae6 	bl	8002c90 <HAL_GetTick>
 80056c4:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80056c6:	6823      	ldr	r3, [r4, #0]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	071b      	lsls	r3, r3, #28
 80056cc:	d410      	bmi.n	80056f0 <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80056ce:	6823      	ldr	r3, [r4, #0]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	075b      	lsls	r3, r3, #29
 80056d4:	d427      	bmi.n	8005726 <UART_CheckIdleState+0x72>
  huart->gState = HAL_UART_STATE_READY;
 80056d6:	2320      	movs	r3, #32
 80056d8:	67e3      	str	r3, [r4, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80056da:	2280      	movs	r2, #128	@ 0x80
 80056dc:	50a3      	str	r3, [r4, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056de:	2300      	movs	r3, #0
 80056e0:	6623      	str	r3, [r4, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80056e2:	6663      	str	r3, [r4, #100]	@ 0x64
  return HAL_OK;
 80056e4:	2000      	movs	r0, #0
      __HAL_UNLOCK(huart);
 80056e6:	2378      	movs	r3, #120	@ 0x78
 80056e8:	2200      	movs	r2, #0
 80056ea:	54e2      	strb	r2, [r4, r3]
}
 80056ec:	b003      	add	sp, #12
 80056ee:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056f0:	2180      	movs	r1, #128	@ 0x80
 80056f2:	4b20      	ldr	r3, [pc, #128]	@ (8005774 <UART_CheckIdleState+0xc0>)
 80056f4:	9300      	str	r3, [sp, #0]
 80056f6:	0003      	movs	r3, r0
 80056f8:	2200      	movs	r2, #0
 80056fa:	0389      	lsls	r1, r1, #14
 80056fc:	0020      	movs	r0, r4
 80056fe:	f7ff ff8b 	bl	8005618 <UART_WaitOnFlagUntilTimeout>
 8005702:	2800      	cmp	r0, #0
 8005704:	d0e3      	beq.n	80056ce <UART_CheckIdleState+0x1a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005706:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800570a:	2301      	movs	r3, #1
 800570c:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005710:	6822      	ldr	r2, [r4, #0]
 8005712:	6813      	ldr	r3, [r2, #0]
 8005714:	2080      	movs	r0, #128	@ 0x80
 8005716:	4383      	bics	r3, r0
 8005718:	6013      	str	r3, [r2, #0]
 800571a:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 800571e:	2320      	movs	r3, #32
 8005720:	67e3      	str	r3, [r4, #124]	@ 0x7c
      return HAL_TIMEOUT;
 8005722:	387d      	subs	r0, #125	@ 0x7d
 8005724:	e7df      	b.n	80056e6 <UART_CheckIdleState+0x32>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005726:	2180      	movs	r1, #128	@ 0x80
 8005728:	4b12      	ldr	r3, [pc, #72]	@ (8005774 <UART_CheckIdleState+0xc0>)
 800572a:	9300      	str	r3, [sp, #0]
 800572c:	002b      	movs	r3, r5
 800572e:	2200      	movs	r2, #0
 8005730:	03c9      	lsls	r1, r1, #15
 8005732:	0020      	movs	r0, r4
 8005734:	f7ff ff70 	bl	8005618 <UART_WaitOnFlagUntilTimeout>
 8005738:	2800      	cmp	r0, #0
 800573a:	d0cc      	beq.n	80056d6 <UART_CheckIdleState+0x22>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800573c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005740:	2201      	movs	r2, #1
 8005742:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005746:	6821      	ldr	r1, [r4, #0]
 8005748:	680b      	ldr	r3, [r1, #0]
 800574a:	4d0b      	ldr	r5, [pc, #44]	@ (8005778 <UART_CheckIdleState+0xc4>)
 800574c:	402b      	ands	r3, r5
 800574e:	600b      	str	r3, [r1, #0]
 8005750:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005754:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005758:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800575c:	6821      	ldr	r1, [r4, #0]
 800575e:	688b      	ldr	r3, [r1, #8]
 8005760:	4393      	bics	r3, r2
 8005762:	608b      	str	r3, [r1, #8]
 8005764:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 8005768:	2380      	movs	r3, #128	@ 0x80
 800576a:	321f      	adds	r2, #31
 800576c:	50e2      	str	r2, [r4, r3]
      return HAL_TIMEOUT;
 800576e:	2003      	movs	r0, #3
 8005770:	e7b9      	b.n	80056e6 <UART_CheckIdleState+0x32>
 8005772:	46c0      	nop			@ (mov r8, r8)
 8005774:	01ffffff 	.word	0x01ffffff
 8005778:	fffffedf 	.word	0xfffffedf

0800577c <HAL_UART_Init>:
{
 800577c:	b510      	push	{r4, lr}
 800577e:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8005780:	d02e      	beq.n	80057e0 <HAL_UART_Init+0x64>
  if (huart->gState == HAL_UART_STATE_RESET)
 8005782:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 8005784:	2b00      	cmp	r3, #0
 8005786:	d021      	beq.n	80057cc <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8005788:	2324      	movs	r3, #36	@ 0x24
 800578a:	67e3      	str	r3, [r4, #124]	@ 0x7c
  __HAL_UART_DISABLE(huart);
 800578c:	6822      	ldr	r2, [r4, #0]
 800578e:	6813      	ldr	r3, [r2, #0]
 8005790:	2101      	movs	r1, #1
 8005792:	438b      	bics	r3, r1
 8005794:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005796:	0020      	movs	r0, r4
 8005798:	f7ff fda4 	bl	80052e4 <UART_SetConfig>
 800579c:	2801      	cmp	r0, #1
 800579e:	d014      	beq.n	80057ca <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80057a0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d118      	bne.n	80057d8 <HAL_UART_Init+0x5c>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057a6:	6822      	ldr	r2, [r4, #0]
 80057a8:	6853      	ldr	r3, [r2, #4]
 80057aa:	490e      	ldr	r1, [pc, #56]	@ (80057e4 <HAL_UART_Init+0x68>)
 80057ac:	400b      	ands	r3, r1
 80057ae:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057b0:	6822      	ldr	r2, [r4, #0]
 80057b2:	6893      	ldr	r3, [r2, #8]
 80057b4:	212a      	movs	r1, #42	@ 0x2a
 80057b6:	438b      	bics	r3, r1
 80057b8:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 80057ba:	6822      	ldr	r2, [r4, #0]
 80057bc:	6813      	ldr	r3, [r2, #0]
 80057be:	3929      	subs	r1, #41	@ 0x29
 80057c0:	430b      	orrs	r3, r1
 80057c2:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 80057c4:	0020      	movs	r0, r4
 80057c6:	f7ff ff75 	bl	80056b4 <UART_CheckIdleState>
}
 80057ca:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80057cc:	3378      	adds	r3, #120	@ 0x78
 80057ce:	2200      	movs	r2, #0
 80057d0:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 80057d2:	f7fc fef1 	bl	80025b8 <HAL_UART_MspInit>
 80057d6:	e7d7      	b.n	8005788 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 80057d8:	0020      	movs	r0, r4
 80057da:	f7ff fead 	bl	8005538 <UART_AdvFeatureConfig>
 80057de:	e7e2      	b.n	80057a6 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 80057e0:	2001      	movs	r0, #1
 80057e2:	e7f2      	b.n	80057ca <HAL_UART_Init+0x4e>
 80057e4:	ffffb7ff 	.word	0xffffb7ff

080057e8 <flash_read>:
  * @param  *dest: is the destination address of the data to be written.
  * @param  src: specifies the start address to be read.
  * @param  size: is the number of 32bit words to be written.
  * @note   This function todo: MIGHT BE for various uCs.
  */
static void flash_read(int* dest, uint32_t src, uint32_t size) {
 80057e8:	b510      	push	{r4, lr}
#ifdef STM32L031xx
	for (int i = 0; i < size; ++i)
 80057ea:	2a00      	cmp	r2, #0
 80057ec:	d008      	beq.n	8005800 <flash_read+0x18>
 80057ee:	0092      	lsls	r2, r2, #2
 80057f0:	1854      	adds	r4, r2, r1
 80057f2:	000b      	movs	r3, r1
		dest[i] = *( (volatile int*)(src + 4*i) );
 80057f4:	1a40      	subs	r0, r0, r1
 80057f6:	681a      	ldr	r2, [r3, #0]
 80057f8:	50c2      	str	r2, [r0, r3]
	for (int i = 0; i < size; ++i)
 80057fa:	3304      	adds	r3, #4
 80057fc:	42a3      	cmp	r3, r4
 80057fe:	d1fa      	bne.n	80057f6 <flash_read+0xe>
#elif defined(STM32G0B1xx)
	for (int i = 0; i < size; ++i)
		dest[i] = (int)(*(volatile uint64_t *)(src + 8*i)); // Go to next 8 bytes (doubleword)
#else
#endif
}
 8005800:	bd10      	pop	{r4, pc}
	...

08005804 <flash_check_is_empty>:
/**
  * @brief  Check if whole user page is empty
  * @retval	return 1 if falsh NOT empty, 0 if empty
  * @note   This function todo: MIGHT BE for various uCs.
  */
static int flash_check_is_empty(void) {
 8005804:	b580      	push	{r7, lr}
 8005806:	4f0f      	ldr	r7, [pc, #60]	@ (8005844 <flash_check_is_empty+0x40>)
 8005808:	44bd      	add	sp, r7
#ifdef STM32L031xx
	int temp_buf[EEPROM_SIZE/4] = {0};
 800580a:	2280      	movs	r2, #128	@ 0x80
 800580c:	00d2      	lsls	r2, r2, #3
 800580e:	2100      	movs	r1, #0
 8005810:	4668      	mov	r0, sp
 8005812:	f000 f933 	bl	8005a7c <memset>

	flash_read(temp_buf, USER_DATA_BASEADDR, EEPROM_SIZE/4);
 8005816:	2280      	movs	r2, #128	@ 0x80
 8005818:	0052      	lsls	r2, r2, #1
 800581a:	490b      	ldr	r1, [pc, #44]	@ (8005848 <flash_check_is_empty+0x44>)
 800581c:	4668      	mov	r0, sp
 800581e:	f7ff ffe3 	bl	80057e8 <flash_read>

	for (int i = 0; i < EEPROM_SIZE/4; ++i)
 8005822:	466b      	mov	r3, sp
 8005824:	a9ff      	add	r1, sp, #1020	@ 0x3fc
 8005826:	3104      	adds	r1, #4
		if (temp_buf[i] != 0) return 0;	// Break on the first non-zero value
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	2a00      	cmp	r2, #0
 800582c:	d104      	bne.n	8005838 <flash_check_is_empty+0x34>
	for (int i = 0; i < EEPROM_SIZE/4; ++i)
 800582e:	3304      	adds	r3, #4
 8005830:	428b      	cmp	r3, r1
 8005832:	d1f9      	bne.n	8005828 <flash_check_is_empty+0x24>
		if (temp_buf[i] != 0) return 0;	// Break on the first non-zero value
#else
#endif


	return 1;
 8005834:	2001      	movs	r0, #1
 8005836:	e000      	b.n	800583a <flash_check_is_empty+0x36>
		if (temp_buf[i] != 0) return 0;	// Break on the first non-zero value
 8005838:	2000      	movs	r0, #0
}
 800583a:	2380      	movs	r3, #128	@ 0x80
 800583c:	00db      	lsls	r3, r3, #3
 800583e:	449d      	add	sp, r3
 8005840:	bd80      	pop	{r7, pc}
 8005842:	46c0      	nop			@ (mov r8, r8)
 8005844:	fffffc00 	.word	0xfffffc00
 8005848:	08080000 	.word	0x08080000

0800584c <flash_write>:
static int flash_write(uint32_t dest, int* src, uint32_t size) {
 800584c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800584e:	46ce      	mov	lr, r9
 8005850:	b500      	push	{lr}
 8005852:	0004      	movs	r4, r0
 8005854:	000e      	movs	r6, r1
 8005856:	0015      	movs	r5, r2
	status = HAL_FLASHEx_DATAEEPROM_Unlock();
 8005858:	f7fd fc0a 	bl	8003070 <HAL_FLASHEx_DATAEEPROM_Unlock>
 800585c:	1e07      	subs	r7, r0, #0
	if (status != HAL_OK) return status;
 800585e:	d117      	bne.n	8005890 <flash_write+0x44>
	for (int i = 0; i < size; ++i) {
 8005860:	2d00      	cmp	r5, #0
 8005862:	d019      	beq.n	8005898 <flash_write+0x4c>
 8005864:	46a9      	mov	r9, r5
 8005866:	0025      	movs	r5, r4
		status += HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_WORD, dest + 4*i, src[i]);
 8005868:	1b36      	subs	r6, r6, r4
		status += HAL_FLASHEx_DATAEEPROM_Erase(dest + 4*i);
 800586a:	0028      	movs	r0, r5
 800586c:	f7fd fc24 	bl	80030b8 <HAL_FLASHEx_DATAEEPROM_Erase>
 8005870:	0004      	movs	r4, r0
		status += HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_WORD, dest + 4*i, src[i]);
 8005872:	5972      	ldr	r2, [r6, r5]
 8005874:	0029      	movs	r1, r5
 8005876:	2002      	movs	r0, #2
 8005878:	f7fd fc32 	bl	80030e0 <HAL_FLASHEx_DATAEEPROM_Program>
 800587c:	1824      	adds	r4, r4, r0
		if (status != HAL_OK) break;
 800587e:	2c00      	cmp	r4, #0
 8005880:	d103      	bne.n	800588a <flash_write+0x3e>
	for (int i = 0; i < size; ++i) {
 8005882:	3701      	adds	r7, #1
 8005884:	3504      	adds	r5, #4
 8005886:	45b9      	cmp	r9, r7
 8005888:	d1ef      	bne.n	800586a <flash_write+0x1e>
	status += HAL_FLASHEx_DATAEEPROM_Lock();
 800588a:	f7fd fc0b 	bl	80030a4 <HAL_FLASHEx_DATAEEPROM_Lock>
 800588e:	1907      	adds	r7, r0, r4
}
 8005890:	0038      	movs	r0, r7
 8005892:	bc80      	pop	{r7}
 8005894:	46b9      	mov	r9, r7
 8005896:	bdf0      	pop	{r4, r5, r6, r7, pc}
	status = HAL_FLASHEx_DATAEEPROM_Unlock();
 8005898:	0004      	movs	r4, r0
 800589a:	e7f6      	b.n	800588a <flash_write+0x3e>

0800589c <settings_read>:

	return match;
}
#endif

void settings_read(Setting_TypeDef *s_ptr) {
 800589c:	b530      	push	{r4, r5, lr}
 800589e:	4c10      	ldr	r4, [pc, #64]	@ (80058e0 <settings_read+0x44>)
 80058a0:	44a5      	add	sp, r4
 80058a2:	0005      	movs	r5, r0
	assert_param(s_ptr == NULL);

	int temp_buffer[TEMP_BUF_SIZE] = {0};
 80058a4:	22c8      	movs	r2, #200	@ 0xc8
 80058a6:	0092      	lsls	r2, r2, #2
 80058a8:	2100      	movs	r1, #0
 80058aa:	4668      	mov	r0, sp
 80058ac:	f000 f8e6 	bl	8005a7c <memset>

	/* Copy all settings (N x uint32_t) from FLASH to the buffer */
	flash_read(temp_buffer, ADDR_SETTINGS, num_of_settings);
 80058b0:	4b0c      	ldr	r3, [pc, #48]	@ (80058e4 <settings_read+0x48>)
 80058b2:	681c      	ldr	r4, [r3, #0]
 80058b4:	0022      	movs	r2, r4
 80058b6:	490c      	ldr	r1, [pc, #48]	@ (80058e8 <settings_read+0x4c>)
 80058b8:	4668      	mov	r0, sp
 80058ba:	f7ff ff95 	bl	80057e8 <flash_read>

	/* Transfer them to the structures */
	for (Settings_IDs id = 0; id < num_of_settings; ++id)
 80058be:	2c00      	cmp	r4, #0
 80058c0:	d009      	beq.n	80058d6 <settings_read+0x3a>
 80058c2:	2300      	movs	r3, #0
 80058c4:	001a      	movs	r2, r3
 80058c6:	3301      	adds	r3, #1
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	429c      	cmp	r4, r3
 80058cc:	d8fa      	bhi.n	80058c4 <settings_read+0x28>
		s_ptr->val = temp_buffer[id];
 80058ce:	0092      	lsls	r2, r2, #2
 80058d0:	466b      	mov	r3, sp
 80058d2:	58d3      	ldr	r3, [r2, r3]
 80058d4:	606b      	str	r3, [r5, #4]
}
 80058d6:	23c9      	movs	r3, #201	@ 0xc9
 80058d8:	009b      	lsls	r3, r3, #2
 80058da:	449d      	add	sp, r3
 80058dc:	bd30      	pop	{r4, r5, pc}
 80058de:	46c0      	nop			@ (mov r8, r8)
 80058e0:	fffffcdc 	.word	0xfffffcdc
 80058e4:	20001508 	.word	0x20001508
 80058e8:	08080010 	.word	0x08080010

080058ec <settings_write>:

int settings_write(Setting_TypeDef *s_ptr) {
 80058ec:	b570      	push	{r4, r5, r6, lr}
 80058ee:	4c1d      	ldr	r4, [pc, #116]	@ (8005964 <settings_write+0x78>)
 80058f0:	44a5      	add	sp, r4
 80058f2:	0006      	movs	r6, r0
	assert_param(s_ptr == NULL);

	int	status = 0;
	int temp_buffer[TEMP_BUF_SIZE] = {0};
 80058f4:	22c8      	movs	r2, #200	@ 0xc8
 80058f6:	0092      	lsls	r2, r2, #2
 80058f8:	2100      	movs	r1, #0
 80058fa:	4668      	mov	r0, sp
 80058fc:	f000 f8be 	bl	8005a7c <memset>

	/* Copy values to the temp buffer */
	for (int i = 0; i < num_of_settings; ++i) {
 8005900:	4b19      	ldr	r3, [pc, #100]	@ (8005968 <settings_write+0x7c>)
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	2a00      	cmp	r2, #0
 8005906:	d009      	beq.n	800591c <settings_write+0x30>
 8005908:	1d33      	adds	r3, r6, #4
 800590a:	4669      	mov	r1, sp
 800590c:	0155      	lsls	r5, r2, #5
 800590e:	3504      	adds	r5, #4
 8005910:	1975      	adds	r5, r6, r5
		temp_buffer[i] = s_ptr[i].val;
 8005912:	681c      	ldr	r4, [r3, #0]
 8005914:	c110      	stmia	r1!, {r4}
	for (int i = 0; i < num_of_settings; ++i) {
 8005916:	3320      	adds	r3, #32
 8005918:	42ab      	cmp	r3, r5
 800591a:	d1fa      	bne.n	8005912 <settings_write+0x26>
	}

	/* Write from temp buffer to the FLASH memory */
	status = flash_write(ADDR_SETTINGS, temp_buffer, num_of_settings);
 800591c:	4669      	mov	r1, sp
 800591e:	4813      	ldr	r0, [pc, #76]	@ (800596c <settings_write+0x80>)
 8005920:	f7ff ff94 	bl	800584c <flash_write>
 8005924:	1e04      	subs	r4, r0, #0
	if(status != 0) return status;
 8005926:	d004      	beq.n	8005932 <settings_write+0x46>
		if (temp_buffer[i] != s_ptr[i].val) ++status;
	}

	/* If both data match, then status == 0 (everything is ok, return 0) */
	return status;
}
 8005928:	0020      	movs	r0, r4
 800592a:	23c8      	movs	r3, #200	@ 0xc8
 800592c:	009b      	lsls	r3, r3, #2
 800592e:	449d      	add	sp, r3
 8005930:	bd70      	pop	{r4, r5, r6, pc}
	flash_read(temp_buffer, ADDR_SETTINGS, num_of_settings);
 8005932:	4b0d      	ldr	r3, [pc, #52]	@ (8005968 <settings_write+0x7c>)
 8005934:	681d      	ldr	r5, [r3, #0]
 8005936:	002a      	movs	r2, r5
 8005938:	490c      	ldr	r1, [pc, #48]	@ (800596c <settings_write+0x80>)
 800593a:	4668      	mov	r0, sp
 800593c:	f7ff ff54 	bl	80057e8 <flash_read>
	for (int i = 0; i < num_of_settings; ++i) {
 8005940:	2d00      	cmp	r5, #0
 8005942:	d0f1      	beq.n	8005928 <settings_write+0x3c>
 8005944:	4668      	mov	r0, sp
 8005946:	1d31      	adds	r1, r6, #4
 8005948:	016d      	lsls	r5, r5, #5
 800594a:	3504      	adds	r5, #4
 800594c:	1976      	adds	r6, r6, r5
		if (temp_buffer[i] != s_ptr[i].val) ++status;
 800594e:	c808      	ldmia	r0!, {r3}
 8005950:	680a      	ldr	r2, [r1, #0]
 8005952:	1a9b      	subs	r3, r3, r2
 8005954:	1e5a      	subs	r2, r3, #1
 8005956:	4193      	sbcs	r3, r2
 8005958:	18e4      	adds	r4, r4, r3
	for (int i = 0; i < num_of_settings; ++i) {
 800595a:	3120      	adds	r1, #32
 800595c:	42b1      	cmp	r1, r6
 800595e:	d1f6      	bne.n	800594e <settings_write+0x62>
 8005960:	e7e2      	b.n	8005928 <settings_write+0x3c>
 8005962:	46c0      	nop			@ (mov r8, r8)
 8005964:	fffffce0 	.word	0xfffffce0
 8005968:	20001508 	.word	0x20001508
 800596c:	08080010 	.word	0x08080010

08005970 <settings_value_reset_all>:
 * @param  *s_ptr:
 * @retval returns -2 if ID is not found; -1 if s_ptr is NULL; 0 if OK.
 */
void settings_value_reset_all(Setting_TypeDef *s_ptr) {
	assert_param(s_ptr == NULL);
	for (int i = 0; i < NUM_OF_SETTINGS; ++i)
 8005970:	1d03      	adds	r3, r0, #4
 8005972:	30a4      	adds	r0, #164	@ 0xa4
		s_ptr[i].val = s_ptr[i].def;
 8005974:	685a      	ldr	r2, [r3, #4]
 8005976:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < NUM_OF_SETTINGS; ++i)
 8005978:	3320      	adds	r3, #32
 800597a:	4283      	cmp	r3, r0
 800597c:	d1fa      	bne.n	8005974 <settings_value_reset_all+0x4>
}
 800597e:	4770      	bx	lr

08005980 <settings_init>:
Settings_Status settings_init(Setting_TypeDef *s_ptr, uint16_t number_of_settings) {
 8005980:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005982:	b089      	sub	sp, #36	@ 0x24
 8005984:	0005      	movs	r5, r0
 8005986:	000c      	movs	r4, r1
	num_of_settings = number_of_settings;
 8005988:	4b36      	ldr	r3, [pc, #216]	@ (8005a64 <settings_init+0xe4>)
 800598a:	6019      	str	r1, [r3, #0]
	volatile uint8_t is_empty = flash_check_is_empty();
 800598c:	f7ff ff3a 	bl	8005804 <flash_check_is_empty>
 8005990:	b2c0      	uxtb	r0, r0
 8005992:	231f      	movs	r3, #31
 8005994:	446b      	add	r3, sp
 8005996:	7018      	strb	r0, [r3, #0]
	if (is_empty) {
 8005998:	781b      	ldrb	r3, [r3, #0]
 800599a:	b2df      	uxtb	r7, r3
 800599c:	2b00      	cmp	r3, #0
 800599e:	d137      	bne.n	8005a10 <settings_init+0x90>
	return *( (volatile uint32_t*)ADDR_DEVICE_ID );
 80059a0:	4b31      	ldr	r3, [pc, #196]	@ (8005a68 <settings_init+0xe8>)
 80059a2:	681b      	ldr	r3, [r3, #0]
		volatile uint32_t id 	= device_id_read	();
 80059a4:	9302      	str	r3, [sp, #8]
    return *( (volatile uint32_t*)ADDR_DEVICE_FW );
 80059a6:	4b31      	ldr	r3, [pc, #196]	@ (8005a6c <settings_init+0xec>)
 80059a8:	681b      	ldr	r3, [r3, #0]
		volatile uint32_t fw 	= device_fw_read	();
 80059aa:	9303      	str	r3, [sp, #12]
	return *( (volatile uint32_t*)ADDR_SETTINGS_SIZE );
 80059ac:	4b30      	ldr	r3, [pc, #192]	@ (8005a70 <settings_init+0xf0>)
 80059ae:	681b      	ldr	r3, [r3, #0]
		volatile uint32_t size 	= settings_size_read();
 80059b0:	9304      	str	r3, [sp, #16]
		if (id == DEVICE_ID && size == num_of_settings && fw >= DEVICE_FW_MIN) {
 80059b2:	9b02      	ldr	r3, [sp, #8]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d152      	bne.n	8005a5e <settings_init+0xde>
 80059b8:	9b04      	ldr	r3, [sp, #16]
			status |= (ID_WRONG | SIZE_WRONG);
 80059ba:	2644      	movs	r6, #68	@ 0x44
		if (id == DEVICE_ID && size == num_of_settings && fw >= DEVICE_FW_MIN) {
 80059bc:	429c      	cmp	r4, r3
 80059be:	d128      	bne.n	8005a12 <settings_init+0x92>
 80059c0:	9a03      	ldr	r2, [sp, #12]
 80059c2:	2380      	movs	r3, #128	@ 0x80
 80059c4:	045b      	lsls	r3, r3, #17
 80059c6:	429a      	cmp	r2, r3
 80059c8:	d323      	bcc.n	8005a12 <settings_init+0x92>
			settings_read(s_ptr);
 80059ca:	0028      	movs	r0, r5
 80059cc:	f7ff ff66 	bl	800589c <settings_read>
	for (Settings_IDs id = 0; id < num_of_settings; ++id) {
 80059d0:	2c00      	cmp	r4, #0
 80059d2:	d011      	beq.n	80059f8 <settings_init+0x78>
		if(s_ptr->val > s_ptr->max || s_ptr->val < s_ptr->min) {
 80059d4:	6969      	ldr	r1, [r5, #20]
	for (Settings_IDs id = 0; id < num_of_settings; ++id) {
 80059d6:	003b      	movs	r3, r7
 80059d8:	e007      	b.n	80059ea <settings_init+0x6a>
			s_ptr->val = s_ptr->def;
 80059da:	68aa      	ldr	r2, [r5, #8]
 80059dc:	606a      	str	r2, [r5, #4]
			++non_valid_values;
 80059de:	3701      	adds	r7, #1
 80059e0:	b2ff      	uxtb	r7, r7
	for (Settings_IDs id = 0; id < num_of_settings; ++id) {
 80059e2:	3301      	adds	r3, #1
 80059e4:	b2db      	uxtb	r3, r3
 80059e6:	429c      	cmp	r4, r3
 80059e8:	d906      	bls.n	80059f8 <settings_init+0x78>
		if(s_ptr->val > s_ptr->max || s_ptr->val < s_ptr->min) {
 80059ea:	686a      	ldr	r2, [r5, #4]
 80059ec:	428a      	cmp	r2, r1
 80059ee:	dcf4      	bgt.n	80059da <settings_init+0x5a>
 80059f0:	6928      	ldr	r0, [r5, #16]
 80059f2:	4282      	cmp	r2, r0
 80059f4:	daf5      	bge.n	80059e2 <settings_init+0x62>
 80059f6:	e7f0      	b.n	80059da <settings_init+0x5a>
	if(non_valid_values > 0) return 0;
 80059f8:	427b      	negs	r3, r7
 80059fa:	415f      	adcs	r7, r3
 80059fc:	b2ff      	uxtb	r7, r7
			volatile uint8_t is_valid = settings_check_is_valid(s_ptr);
 80059fe:	466b      	mov	r3, sp
 8005a00:	71df      	strb	r7, [r3, #7]
 8005a02:	3307      	adds	r3, #7
			if (!is_valid) {
 8005a04:	781b      	ldrb	r3, [r3, #0]
	Settings_Status status 					= 0;
 8005a06:	2600      	movs	r6, #0
			if (!is_valid) {
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d121      	bne.n	8005a50 <settings_init+0xd0>
				status |= OUT_OF_RANGE;
 8005a0c:	3680      	adds	r6, #128	@ 0x80
 8005a0e:	e000      	b.n	8005a12 <settings_init+0x92>
		status |= FLASH_EMPTY;
 8005a10:	2602      	movs	r6, #2
		settings_value_reset_all(s_ptr);
 8005a12:	0028      	movs	r0, r5
 8005a14:	f7ff ffac 	bl	8005970 <settings_value_reset_all>
	int data[2] = {((ID1 << 16) | ID2), ((FW1 << 24) | (FW2 << 16) | FW3)};
 8005a18:	2300      	movs	r3, #0
 8005a1a:	9305      	str	r3, [sp, #20]
 8005a1c:	3305      	adds	r3, #5
 8005a1e:	9306      	str	r3, [sp, #24]
    return flash_write(ADDR_DEVICE_ID, data, 2);
 8005a20:	2202      	movs	r2, #2
 8005a22:	a905      	add	r1, sp, #20
 8005a24:	4810      	ldr	r0, [pc, #64]	@ (8005a68 <settings_init+0xe8>)
 8005a26:	f7ff ff11 	bl	800584c <flash_write>
 8005a2a:	0004      	movs	r4, r0
		res += settings_size_write	(num_of_settings); // What if size will overlay RTC values?
 8005a2c:	4b0d      	ldr	r3, [pc, #52]	@ (8005a64 <settings_init+0xe4>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	9305      	str	r3, [sp, #20]
	return flash_write(ADDR_SETTINGS_SIZE, &size, 1);
 8005a32:	2201      	movs	r2, #1
 8005a34:	a905      	add	r1, sp, #20
 8005a36:	480e      	ldr	r0, [pc, #56]	@ (8005a70 <settings_init+0xf0>)
 8005a38:	f7ff ff08 	bl	800584c <flash_write>
		res += settings_size_write	(num_of_settings); // What if size will overlay RTC values?
 8005a3c:	1904      	adds	r4, r0, r4
		res += settings_write		(s_ptr);
 8005a3e:	0028      	movs	r0, r5
 8005a40:	f7ff ff54 	bl	80058ec <settings_write>
 8005a44:	1824      	adds	r4, r4, r0
		if (res > 0) status |= WRITE_FAIL;
 8005a46:	2c00      	cmp	r4, #0
 8005a48:	dd02      	ble.n	8005a50 <settings_init+0xd0>
 8005a4a:	2380      	movs	r3, #128	@ 0x80
 8005a4c:	005b      	lsls	r3, r3, #1
 8005a4e:	431e      	orrs	r6, r3
		previous_running_time = *( (volatile uint32_t*)ADDR_DEVICE_RT );
 8005a50:	4b08      	ldr	r3, [pc, #32]	@ (8005a74 <settings_init+0xf4>)
 8005a52:	681a      	ldr	r2, [r3, #0]
 8005a54:	4b08      	ldr	r3, [pc, #32]	@ (8005a78 <settings_init+0xf8>)
 8005a56:	601a      	str	r2, [r3, #0]
};
 8005a58:	0030      	movs	r0, r6
 8005a5a:	b009      	add	sp, #36	@ 0x24
 8005a5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			status |= (ID_WRONG | SIZE_WRONG);
 8005a5e:	2644      	movs	r6, #68	@ 0x44
 8005a60:	e7d7      	b.n	8005a12 <settings_init+0x92>
 8005a62:	46c0      	nop			@ (mov r8, r8)
 8005a64:	20001508 	.word	0x20001508
 8005a68:	08080000 	.word	0x08080000
 8005a6c:	08080004 	.word	0x08080004
 8005a70:	0808000c 	.word	0x0808000c
 8005a74:	08080008 	.word	0x08080008
 8005a78:	20001504 	.word	0x20001504

08005a7c <memset>:
 8005a7c:	0003      	movs	r3, r0
 8005a7e:	1882      	adds	r2, r0, r2
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d100      	bne.n	8005a86 <memset+0xa>
 8005a84:	4770      	bx	lr
 8005a86:	7019      	strb	r1, [r3, #0]
 8005a88:	3301      	adds	r3, #1
 8005a8a:	e7f9      	b.n	8005a80 <memset+0x4>

08005a8c <__libc_init_array>:
 8005a8c:	b570      	push	{r4, r5, r6, lr}
 8005a8e:	2600      	movs	r6, #0
 8005a90:	4c0c      	ldr	r4, [pc, #48]	@ (8005ac4 <__libc_init_array+0x38>)
 8005a92:	4d0d      	ldr	r5, [pc, #52]	@ (8005ac8 <__libc_init_array+0x3c>)
 8005a94:	1b64      	subs	r4, r4, r5
 8005a96:	10a4      	asrs	r4, r4, #2
 8005a98:	42a6      	cmp	r6, r4
 8005a9a:	d109      	bne.n	8005ab0 <__libc_init_array+0x24>
 8005a9c:	2600      	movs	r6, #0
 8005a9e:	f000 f821 	bl	8005ae4 <_init>
 8005aa2:	4c0a      	ldr	r4, [pc, #40]	@ (8005acc <__libc_init_array+0x40>)
 8005aa4:	4d0a      	ldr	r5, [pc, #40]	@ (8005ad0 <__libc_init_array+0x44>)
 8005aa6:	1b64      	subs	r4, r4, r5
 8005aa8:	10a4      	asrs	r4, r4, #2
 8005aaa:	42a6      	cmp	r6, r4
 8005aac:	d105      	bne.n	8005aba <__libc_init_array+0x2e>
 8005aae:	bd70      	pop	{r4, r5, r6, pc}
 8005ab0:	00b3      	lsls	r3, r6, #2
 8005ab2:	58eb      	ldr	r3, [r5, r3]
 8005ab4:	4798      	blx	r3
 8005ab6:	3601      	adds	r6, #1
 8005ab8:	e7ee      	b.n	8005a98 <__libc_init_array+0xc>
 8005aba:	00b3      	lsls	r3, r6, #2
 8005abc:	58eb      	ldr	r3, [r5, r3]
 8005abe:	4798      	blx	r3
 8005ac0:	3601      	adds	r6, #1
 8005ac2:	e7f2      	b.n	8005aaa <__libc_init_array+0x1e>
 8005ac4:	08005bbc 	.word	0x08005bbc
 8005ac8:	08005bbc 	.word	0x08005bbc
 8005acc:	08005bc0 	.word	0x08005bc0
 8005ad0:	08005bbc 	.word	0x08005bbc

08005ad4 <strcpy>:
 8005ad4:	0003      	movs	r3, r0
 8005ad6:	780a      	ldrb	r2, [r1, #0]
 8005ad8:	3101      	adds	r1, #1
 8005ada:	701a      	strb	r2, [r3, #0]
 8005adc:	3301      	adds	r3, #1
 8005ade:	2a00      	cmp	r2, #0
 8005ae0:	d1f9      	bne.n	8005ad6 <strcpy+0x2>
 8005ae2:	4770      	bx	lr

08005ae4 <_init>:
 8005ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ae6:	46c0      	nop			@ (mov r8, r8)
 8005ae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005aea:	bc08      	pop	{r3}
 8005aec:	469e      	mov	lr, r3
 8005aee:	4770      	bx	lr

08005af0 <_fini>:
 8005af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005af2:	46c0      	nop			@ (mov r8, r8)
 8005af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005af6:	bc08      	pop	{r3}
 8005af8:	469e      	mov	lr, r3
 8005afa:	4770      	bx	lr
