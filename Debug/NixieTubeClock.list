
NixieTubeClock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ed8  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  08005f98  08005f98  00006f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006110  08006110  0000857c  2**0
                  CONTENTS
  4 .ARM          00000008  08006110  08006110  00007110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006118  08006118  0000857c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006118  08006118  00007118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800611c  0800611c  0000711c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000057c  20000000  08006120  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005b0  20000580  0800669c  00008580  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000b30  0800669c  00008b30  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000857c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000132a7  00000000  00000000  000085a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e63  00000000  00000000  0001b84b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001198  00000000  00000000  0001e6b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dae  00000000  00000000  0001f848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001420d  00000000  00000000  000205f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000163d8  00000000  00000000  00034803  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00076504  00000000  00000000  0004abdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c10df  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f90  00000000  00000000  000c1124  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000c50b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000580 	.word	0x20000580
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005f80 	.word	0x08005f80

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000584 	.word	0x20000584
 8000104:	08005f80 	.word	0x08005f80

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	@ (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	@ (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			@ (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			@ (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1824      	adds	r4, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	42a3      	cmp	r3, r4
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	@ 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c23      	lsrs	r3, r4, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0424      	lsls	r4, r4, #16
 80002ae:	1960      	adds	r0, r4, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			@ (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	d434      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f2:	469b      	mov	fp, r3
 80002f4:	4653      	mov	r3, sl
 80002f6:	465a      	mov	r2, fp
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83b      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e079      	b.n	8000402 <__udivmoddi4+0x146>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e076      	b.n	8000408 <__udivmoddi4+0x14c>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e029      	b.n	8000388 <__udivmoddi4+0xcc>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	469b      	mov	fp, r3
 8000360:	2320      	movs	r3, #32
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	40da      	lsrs	r2, r3
 8000368:	4641      	mov	r1, r8
 800036a:	0013      	movs	r3, r2
 800036c:	464a      	mov	r2, r9
 800036e:	408a      	lsls	r2, r1
 8000370:	0017      	movs	r7, r2
 8000372:	4642      	mov	r2, r8
 8000374:	431f      	orrs	r7, r3
 8000376:	4653      	mov	r3, sl
 8000378:	4093      	lsls	r3, r2
 800037a:	001e      	movs	r6, r3
 800037c:	42af      	cmp	r7, r5
 800037e:	d9c3      	bls.n	8000308 <__udivmoddi4+0x4c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	4643      	mov	r3, r8
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0d8      	beq.n	8000340 <__udivmoddi4+0x84>
 800038e:	07fb      	lsls	r3, r7, #31
 8000390:	0872      	lsrs	r2, r6, #1
 8000392:	431a      	orrs	r2, r3
 8000394:	4646      	mov	r6, r8
 8000396:	087b      	lsrs	r3, r7, #1
 8000398:	e00e      	b.n	80003b8 <__udivmoddi4+0xfc>
 800039a:	42ab      	cmp	r3, r5
 800039c:	d101      	bne.n	80003a2 <__udivmoddi4+0xe6>
 800039e:	42a2      	cmp	r2, r4
 80003a0:	d80c      	bhi.n	80003bc <__udivmoddi4+0x100>
 80003a2:	1aa4      	subs	r4, r4, r2
 80003a4:	419d      	sbcs	r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	1924      	adds	r4, r4, r4
 80003aa:	416d      	adcs	r5, r5
 80003ac:	2100      	movs	r1, #0
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1824      	adds	r4, r4, r0
 80003b2:	414d      	adcs	r5, r1
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d006      	beq.n	80003c6 <__udivmoddi4+0x10a>
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d9ee      	bls.n	800039a <__udivmoddi4+0xde>
 80003bc:	3e01      	subs	r6, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d1f8      	bne.n	80003b8 <__udivmoddi4+0xfc>
 80003c6:	9800      	ldr	r0, [sp, #0]
 80003c8:	9901      	ldr	r1, [sp, #4]
 80003ca:	465b      	mov	r3, fp
 80003cc:	1900      	adds	r0, r0, r4
 80003ce:	4169      	adcs	r1, r5
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	db24      	blt.n	800041e <__udivmoddi4+0x162>
 80003d4:	002b      	movs	r3, r5
 80003d6:	465a      	mov	r2, fp
 80003d8:	4644      	mov	r4, r8
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	40e2      	lsrs	r2, r4
 80003e0:	001c      	movs	r4, r3
 80003e2:	465b      	mov	r3, fp
 80003e4:	0015      	movs	r5, r2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db2a      	blt.n	8000440 <__udivmoddi4+0x184>
 80003ea:	0026      	movs	r6, r4
 80003ec:	409e      	lsls	r6, r3
 80003ee:	0033      	movs	r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	4647      	mov	r7, r8
 80003f4:	40be      	lsls	r6, r7
 80003f6:	0032      	movs	r2, r6
 80003f8:	1a80      	subs	r0, r0, r2
 80003fa:	4199      	sbcs	r1, r3
 80003fc:	9000      	str	r0, [sp, #0]
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	e79e      	b.n	8000340 <__udivmoddi4+0x84>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d8bc      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000406:	e782      	b.n	800030e <__udivmoddi4+0x52>
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	2100      	movs	r1, #0
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	9100      	str	r1, [sp, #0]
 8000414:	9201      	str	r2, [sp, #4]
 8000416:	2201      	movs	r2, #1
 8000418:	40da      	lsrs	r2, r3
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	e785      	b.n	800032a <__udivmoddi4+0x6e>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	4646      	mov	r6, r8
 8000428:	409a      	lsls	r2, r3
 800042a:	0023      	movs	r3, r4
 800042c:	40f3      	lsrs	r3, r6
 800042e:	4644      	mov	r4, r8
 8000430:	4313      	orrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	dad4      	bge.n	80003ea <__udivmoddi4+0x12e>
 8000440:	4642      	mov	r2, r8
 8000442:	002f      	movs	r7, r5
 8000444:	2320      	movs	r3, #32
 8000446:	0026      	movs	r6, r4
 8000448:	4097      	lsls	r7, r2
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	40de      	lsrs	r6, r3
 800044e:	003b      	movs	r3, r7
 8000450:	4333      	orrs	r3, r6
 8000452:	e7cd      	b.n	80003f0 <__udivmoddi4+0x134>

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	@ (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			@ (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <shift_reg_pulse_srclk>:
	0b0010000000,	// 7
	0b0100000000,	// 8
	0b1000000000 	// 9
};

static void shift_reg_pulse_srclk(uint32_t delay_ms) {
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
	SHIFT_REG_SET(1);
 80004b0:	4b0f      	ldr	r3, [pc, #60]	@ (80004f0 <shift_reg_pulse_srclk+0x48>)
 80004b2:	2201      	movs	r2, #1
 80004b4:	2102      	movs	r1, #2
 80004b6:	0018      	movs	r0, r3
 80004b8:	f002 f937 	bl	800272a <HAL_GPIO_WritePin>
	if (delay_ms > 0) HAL_Delay(delay_ms - 1);
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d004      	beq.n	80004cc <shift_reg_pulse_srclk+0x24>
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	3b01      	subs	r3, #1
 80004c6:	0018      	movs	r0, r3
 80004c8:	f001 fce8 	bl	8001e9c <HAL_Delay>
	SHIFT_REG_SET(0);
 80004cc:	4b08      	ldr	r3, [pc, #32]	@ (80004f0 <shift_reg_pulse_srclk+0x48>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	2102      	movs	r1, #2
 80004d2:	0018      	movs	r0, r3
 80004d4:	f002 f929 	bl	800272a <HAL_GPIO_WritePin>
	if (delay_ms > 0) HAL_Delay(delay_ms - 1);
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d004      	beq.n	80004e8 <shift_reg_pulse_srclk+0x40>
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	3b01      	subs	r3, #1
 80004e2:	0018      	movs	r0, r3
 80004e4:	f001 fcda 	bl	8001e9c <HAL_Delay>
}
 80004e8:	46c0      	nop			@ (mov r8, r8)
 80004ea:	46bd      	mov	sp, r7
 80004ec:	b002      	add	sp, #8
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	50000400 	.word	0x50000400

080004f4 <shift_reg_pulse_rclk>:
static void shift_reg_pulse_rclk(uint32_t delay_ms) {
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
	STORAGE_REG_SET(1);
 80004fc:	4b0f      	ldr	r3, [pc, #60]	@ (800053c <shift_reg_pulse_rclk+0x48>)
 80004fe:	2201      	movs	r2, #1
 8000500:	2101      	movs	r1, #1
 8000502:	0018      	movs	r0, r3
 8000504:	f002 f911 	bl	800272a <HAL_GPIO_WritePin>
	if (delay_ms > 0) HAL_Delay(delay_ms - 1);
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	2b00      	cmp	r3, #0
 800050c:	d004      	beq.n	8000518 <shift_reg_pulse_rclk+0x24>
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	3b01      	subs	r3, #1
 8000512:	0018      	movs	r0, r3
 8000514:	f001 fcc2 	bl	8001e9c <HAL_Delay>
	STORAGE_REG_SET(0);
 8000518:	4b08      	ldr	r3, [pc, #32]	@ (800053c <shift_reg_pulse_rclk+0x48>)
 800051a:	2200      	movs	r2, #0
 800051c:	2101      	movs	r1, #1
 800051e:	0018      	movs	r0, r3
 8000520:	f002 f903 	bl	800272a <HAL_GPIO_WritePin>
	if (delay_ms > 0) HAL_Delay(delay_ms - 1);
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	2b00      	cmp	r3, #0
 8000528:	d004      	beq.n	8000534 <shift_reg_pulse_rclk+0x40>
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	3b01      	subs	r3, #1
 800052e:	0018      	movs	r0, r3
 8000530:	f001 fcb4 	bl	8001e9c <HAL_Delay>
}
 8000534:	46c0      	nop			@ (mov r8, r8)
 8000536:	46bd      	mov	sp, r7
 8000538:	b002      	add	sp, #8
 800053a:	bd80      	pop	{r7, pc}
 800053c:	50000400 	.word	0x50000400

08000540 <shift_reg_send>:


// data size is 16 bit, but only 10 are actually connected to a nixie lamp
static void shift_reg_send(uint64_t data) {
 8000540:	b5b0      	push	{r4, r5, r7, lr}
 8000542:	b084      	sub	sp, #16
 8000544:	af00      	add	r7, sp, #0
 8000546:	6038      	str	r0, [r7, #0]
 8000548:	6079      	str	r1, [r7, #4]
	for (int8_t bit = 63; bit >= 0; --bit) {	// Send least significant bit first
 800054a:	230f      	movs	r3, #15
 800054c:	18fb      	adds	r3, r7, r3
 800054e:	223f      	movs	r2, #63	@ 0x3f
 8000550:	701a      	strb	r2, [r3, #0]
 8000552:	e02b      	b.n	80005ac <shift_reg_send+0x6c>
		/*
		 * Push data into shift register
		 */
		DATA_SET((data >> bit) & 1);
 8000554:	230f      	movs	r3, #15
 8000556:	18fb      	adds	r3, r7, r3
 8000558:	781b      	ldrb	r3, [r3, #0]
 800055a:	b25b      	sxtb	r3, r3
 800055c:	001a      	movs	r2, r3
 800055e:	3a20      	subs	r2, #32
 8000560:	2a00      	cmp	r2, #0
 8000562:	db03      	blt.n	800056c <shift_reg_send+0x2c>
 8000564:	6879      	ldr	r1, [r7, #4]
 8000566:	40d1      	lsrs	r1, r2
 8000568:	000c      	movs	r4, r1
 800056a:	e008      	b.n	800057e <shift_reg_send+0x3e>
 800056c:	2220      	movs	r2, #32
 800056e:	1ad2      	subs	r2, r2, r3
 8000570:	6879      	ldr	r1, [r7, #4]
 8000572:	4091      	lsls	r1, r2
 8000574:	000a      	movs	r2, r1
 8000576:	6839      	ldr	r1, [r7, #0]
 8000578:	40d9      	lsrs	r1, r3
 800057a:	000c      	movs	r4, r1
 800057c:	4314      	orrs	r4, r2
 800057e:	687a      	ldr	r2, [r7, #4]
 8000580:	40da      	lsrs	r2, r3
 8000582:	0015      	movs	r5, r2
 8000584:	b2e3      	uxtb	r3, r4
 8000586:	2201      	movs	r2, #1
 8000588:	4013      	ands	r3, r2
 800058a:	b2da      	uxtb	r2, r3
 800058c:	23a0      	movs	r3, #160	@ 0xa0
 800058e:	05db      	lsls	r3, r3, #23
 8000590:	2140      	movs	r1, #64	@ 0x40
 8000592:	0018      	movs	r0, r3
 8000594:	f002 f8c9 	bl	800272a <HAL_GPIO_WritePin>

		/*
		 * Set SER pin according to currently transmitted bit
		 * Toggle clock n times to set all N bits
		 */
		shift_reg_pulse_srclk(PULSE_DURATION_MS);
 8000598:	2000      	movs	r0, #0
 800059a:	f7ff ff85 	bl	80004a8 <shift_reg_pulse_srclk>
	for (int8_t bit = 63; bit >= 0; --bit) {	// Send least significant bit first
 800059e:	210f      	movs	r1, #15
 80005a0:	187b      	adds	r3, r7, r1
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	3b01      	subs	r3, #1
 80005a6:	b2da      	uxtb	r2, r3
 80005a8:	187b      	adds	r3, r7, r1
 80005aa:	701a      	strb	r2, [r3, #0]
 80005ac:	230f      	movs	r3, #15
 80005ae:	18fb      	adds	r3, r7, r3
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	2b7f      	cmp	r3, #127	@ 0x7f
 80005b4:	d9ce      	bls.n	8000554 <shift_reg_send+0x14>
	}
}
 80005b6:	46c0      	nop			@ (mov r8, r8)
 80005b8:	46c0      	nop			@ (mov r8, r8)
 80005ba:	46bd      	mov	sp, r7
 80005bc:	b004      	add	sp, #16
 80005be:	bdb0      	pop	{r4, r5, r7, pc}

080005c0 <IN12_set>:

//void IN12_set_digit_pairs(uint16_t first_number, uint16_t second_number) {
//	IN12_set(first_number/10, first_number%10, second_number/10, second_number%10);
//}

void IN12_set(void) {
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
	OUTPUT_DISABLE();
 80005c4:	23a0      	movs	r3, #160	@ 0xa0
 80005c6:	05db      	lsls	r3, r3, #23
 80005c8:	2201      	movs	r2, #1
 80005ca:	2180      	movs	r1, #128	@ 0x80
 80005cc:	0018      	movs	r0, r3
 80005ce:	f002 f8ac 	bl	800272a <HAL_GPIO_WritePin>

//	shift_reg_send(clock_data.bitmask.tube[3]);
//	shift_reg_send(clock_data.bitmask.tube[2]);
//	shift_reg_send(clock_data.bitmask.tube[1]);
//	shift_reg_send(clock_data.bitmask.tube[0]);
	shift_reg_send(clock_data.bitmask.fused);
 80005d2:	4b0a      	ldr	r3, [pc, #40]	@ (80005fc <IN12_set+0x3c>)
 80005d4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80005d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80005d8:	0010      	movs	r0, r2
 80005da:	0019      	movs	r1, r3
 80005dc:	f7ff ffb0 	bl	8000540 <shift_reg_send>

	/*
	 * Toggle latch
	 */
	shift_reg_pulse_rclk(PULSE_DURATION_MS);
 80005e0:	2000      	movs	r0, #0
 80005e2:	f7ff ff87 	bl	80004f4 <shift_reg_pulse_rclk>

	OUTPUT_ENABLE();
 80005e6:	23a0      	movs	r3, #160	@ 0xa0
 80005e8:	05db      	lsls	r3, r3, #23
 80005ea:	2200      	movs	r2, #0
 80005ec:	2180      	movs	r1, #128	@ 0x80
 80005ee:	0018      	movs	r0, r3
 80005f0:	f002 f89b 	bl	800272a <HAL_GPIO_WritePin>
}
 80005f4:	46c0      	nop			@ (mov r8, r8)
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	46c0      	nop			@ (mov r8, r8)
 80005fc:	200005b8 	.word	0x200005b8

08000600 <bitmask_set>:

void bitmask_set(void) {
 8000600:	b590      	push	{r4, r7, lr}
 8000602:	b083      	sub	sp, #12
 8000604:	af00      	add	r7, sp, #0
	memset(clock_data.is_digit_on, 0, sizeof(bool)*NUM_OF_TUBES*NUM_OF_DIGITS);
 8000606:	4b3a      	ldr	r3, [pc, #232]	@ (80006f0 <bitmask_set+0xf0>)
 8000608:	2228      	movs	r2, #40	@ 0x28
 800060a:	2100      	movs	r1, #0
 800060c:	0018      	movs	r0, r3
 800060e:	f005 fc83 	bl	8005f18 <memset>
	clock_data.bitmask.fused = 0;
 8000612:	4937      	ldr	r1, [pc, #220]	@ (80006f0 <bitmask_set+0xf0>)
 8000614:	2200      	movs	r2, #0
 8000616:	2300      	movs	r3, #0
 8000618:	628a      	str	r2, [r1, #40]	@ 0x28
 800061a:	62cb      	str	r3, [r1, #44]	@ 0x2c

	clock_data.is_digit_on[0][GET_MOST_SIGNIFICANT_DIGIT(rtc_time.Hours)] 		= true;
 800061c:	4b35      	ldr	r3, [pc, #212]	@ (80006f4 <bitmask_set+0xf4>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	210a      	movs	r1, #10
 8000622:	0018      	movs	r0, r3
 8000624:	f7ff fd70 	bl	8000108 <__udivsi3>
 8000628:	0003      	movs	r3, r0
 800062a:	b2db      	uxtb	r3, r3
 800062c:	001a      	movs	r2, r3
 800062e:	4b30      	ldr	r3, [pc, #192]	@ (80006f0 <bitmask_set+0xf0>)
 8000630:	2101      	movs	r1, #1
 8000632:	5499      	strb	r1, [r3, r2]
	clock_data.is_digit_on[1][GET_LEAST_SIGNIFICANT_DIGIT(rtc_time.Hours)] 		= true;
 8000634:	4b2f      	ldr	r3, [pc, #188]	@ (80006f4 <bitmask_set+0xf4>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	210a      	movs	r1, #10
 800063a:	0018      	movs	r0, r3
 800063c:	f7ff fdea 	bl	8000214 <__aeabi_uidivmod>
 8000640:	000b      	movs	r3, r1
 8000642:	b2db      	uxtb	r3, r3
 8000644:	001a      	movs	r2, r3
 8000646:	4b2a      	ldr	r3, [pc, #168]	@ (80006f0 <bitmask_set+0xf0>)
 8000648:	189b      	adds	r3, r3, r2
 800064a:	2201      	movs	r2, #1
 800064c:	729a      	strb	r2, [r3, #10]
	clock_data.is_digit_on[2][GET_MOST_SIGNIFICANT_DIGIT(rtc_time.Minutes)] 	= true;
 800064e:	4b29      	ldr	r3, [pc, #164]	@ (80006f4 <bitmask_set+0xf4>)
 8000650:	785b      	ldrb	r3, [r3, #1]
 8000652:	210a      	movs	r1, #10
 8000654:	0018      	movs	r0, r3
 8000656:	f7ff fd57 	bl	8000108 <__udivsi3>
 800065a:	0003      	movs	r3, r0
 800065c:	b2db      	uxtb	r3, r3
 800065e:	001a      	movs	r2, r3
 8000660:	4b23      	ldr	r3, [pc, #140]	@ (80006f0 <bitmask_set+0xf0>)
 8000662:	189b      	adds	r3, r3, r2
 8000664:	2201      	movs	r2, #1
 8000666:	751a      	strb	r2, [r3, #20]
	clock_data.is_digit_on[3][GET_LEAST_SIGNIFICANT_DIGIT(rtc_time.Minutes)] 	= true;
 8000668:	4b22      	ldr	r3, [pc, #136]	@ (80006f4 <bitmask_set+0xf4>)
 800066a:	785b      	ldrb	r3, [r3, #1]
 800066c:	210a      	movs	r1, #10
 800066e:	0018      	movs	r0, r3
 8000670:	f7ff fdd0 	bl	8000214 <__aeabi_uidivmod>
 8000674:	000b      	movs	r3, r1
 8000676:	b2db      	uxtb	r3, r3
 8000678:	001a      	movs	r2, r3
 800067a:	4b1d      	ldr	r3, [pc, #116]	@ (80006f0 <bitmask_set+0xf0>)
 800067c:	189b      	adds	r3, r3, r2
 800067e:	2201      	movs	r2, #1
 8000680:	779a      	strb	r2, [r3, #30]

	for (int t = 0; t < NUM_OF_TUBES; ++t) {
 8000682:	2300      	movs	r3, #0
 8000684:	607b      	str	r3, [r7, #4]
 8000686:	e02a      	b.n	80006de <bitmask_set+0xde>
		for (int d = 0; d < NUM_OF_DIGITS; ++d) {
 8000688:	2300      	movs	r3, #0
 800068a:	603b      	str	r3, [r7, #0]
 800068c:	e021      	b.n	80006d2 <bitmask_set+0xd2>
			clock_data.bitmask.tube[t] |= digit_bitmask[d]*clock_data.is_digit_on[t][d];
 800068e:	4b18      	ldr	r3, [pc, #96]	@ (80006f0 <bitmask_set+0xf0>)
 8000690:	687a      	ldr	r2, [r7, #4]
 8000692:	3214      	adds	r2, #20
 8000694:	0052      	lsls	r2, r2, #1
 8000696:	5ad3      	ldrh	r3, [r2, r3]
 8000698:	b219      	sxth	r1, r3
 800069a:	4b17      	ldr	r3, [pc, #92]	@ (80006f8 <bitmask_set+0xf8>)
 800069c:	683a      	ldr	r2, [r7, #0]
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	5ad0      	ldrh	r0, [r2, r3]
 80006a2:	4c13      	ldr	r4, [pc, #76]	@ (80006f0 <bitmask_set+0xf0>)
 80006a4:	687a      	ldr	r2, [r7, #4]
 80006a6:	0013      	movs	r3, r2
 80006a8:	009b      	lsls	r3, r3, #2
 80006aa:	189b      	adds	r3, r3, r2
 80006ac:	005b      	lsls	r3, r3, #1
 80006ae:	18e2      	adds	r2, r4, r3
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	18d3      	adds	r3, r2, r3
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	4343      	muls	r3, r0
 80006b8:	b29b      	uxth	r3, r3
 80006ba:	b21b      	sxth	r3, r3
 80006bc:	430b      	orrs	r3, r1
 80006be:	b21b      	sxth	r3, r3
 80006c0:	b299      	uxth	r1, r3
 80006c2:	4b0b      	ldr	r3, [pc, #44]	@ (80006f0 <bitmask_set+0xf0>)
 80006c4:	687a      	ldr	r2, [r7, #4]
 80006c6:	3214      	adds	r2, #20
 80006c8:	0052      	lsls	r2, r2, #1
 80006ca:	52d1      	strh	r1, [r2, r3]
		for (int d = 0; d < NUM_OF_DIGITS; ++d) {
 80006cc:	683b      	ldr	r3, [r7, #0]
 80006ce:	3301      	adds	r3, #1
 80006d0:	603b      	str	r3, [r7, #0]
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	2b09      	cmp	r3, #9
 80006d6:	ddda      	ble.n	800068e <bitmask_set+0x8e>
	for (int t = 0; t < NUM_OF_TUBES; ++t) {
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	3301      	adds	r3, #1
 80006dc:	607b      	str	r3, [r7, #4]
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	2b03      	cmp	r3, #3
 80006e2:	ddd1      	ble.n	8000688 <bitmask_set+0x88>
		}
	}
}
 80006e4:	46c0      	nop			@ (mov r8, r8)
 80006e6:	46c0      	nop			@ (mov r8, r8)
 80006e8:	46bd      	mov	sp, r7
 80006ea:	b003      	add	sp, #12
 80006ec:	bd90      	pop	{r4, r7, pc}
 80006ee:	46c0      	nop			@ (mov r8, r8)
 80006f0:	200005b8 	.word	0x200005b8
 80006f4:	2000059c 	.word	0x2000059c
 80006f8:	08006090 	.word	0x08006090

080006fc <time_update>:

void time_update(void) {
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
	rtc_time.Hours 		= DS3231_GetHour();
 8000700:	f001 fa9b 	bl	8001c3a <DS3231_GetHour>
 8000704:	0003      	movs	r3, r0
 8000706:	001a      	movs	r2, r3
 8000708:	4b08      	ldr	r3, [pc, #32]	@ (800072c <time_update+0x30>)
 800070a:	701a      	strb	r2, [r3, #0]
	rtc_time.Minutes 	= DS3231_GetMinute();
 800070c:	f001 faa2 	bl	8001c54 <DS3231_GetMinute>
 8000710:	0003      	movs	r3, r0
 8000712:	001a      	movs	r2, r3
 8000714:	4b05      	ldr	r3, [pc, #20]	@ (800072c <time_update+0x30>)
 8000716:	705a      	strb	r2, [r3, #1]
	rtc_time.Seconds 	= DS3231_GetSecond();
 8000718:	f001 faa9 	bl	8001c6e <DS3231_GetSecond>
 800071c:	0003      	movs	r3, r0
 800071e:	001a      	movs	r2, r3
 8000720:	4b02      	ldr	r3, [pc, #8]	@ (800072c <time_update+0x30>)
 8000722:	709a      	strb	r2, [r3, #2]


}
 8000724:	46c0      	nop			@ (mov r8, r8)
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	46c0      	nop			@ (mov r8, r8)
 800072c:	2000059c 	.word	0x2000059c

08000730 <date_update>:

static void date_update(void) {
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
	rtc_date.Year 		= DS3231_GetYear();
 8000734:	f001 fa59 	bl	8001bea <DS3231_GetYear>
 8000738:	0003      	movs	r3, r0
 800073a:	b2da      	uxtb	r2, r3
 800073c:	4b0b      	ldr	r3, [pc, #44]	@ (800076c <date_update+0x3c>)
 800073e:	70da      	strb	r2, [r3, #3]
	rtc_date.Month 		= DS3231_GetMonth();
 8000740:	f001 fa42 	bl	8001bc8 <DS3231_GetMonth>
 8000744:	0003      	movs	r3, r0
 8000746:	001a      	movs	r2, r3
 8000748:	4b08      	ldr	r3, [pc, #32]	@ (800076c <date_update+0x3c>)
 800074a:	705a      	strb	r2, [r3, #1]
	rtc_date.Date 		= DS3231_GetDate();
 800074c:	f001 fa2f 	bl	8001bae <DS3231_GetDate>
 8000750:	0003      	movs	r3, r0
 8000752:	001a      	movs	r2, r3
 8000754:	4b05      	ldr	r3, [pc, #20]	@ (800076c <date_update+0x3c>)
 8000756:	709a      	strb	r2, [r3, #2]
	rtc_date.WeekDay 	= DS3231_GetDayOfWeek();
 8000758:	f001 fa1c 	bl	8001b94 <DS3231_GetDayOfWeek>
 800075c:	0003      	movs	r3, r0
 800075e:	001a      	movs	r2, r3
 8000760:	4b02      	ldr	r3, [pc, #8]	@ (800076c <date_update+0x3c>)
 8000762:	701a      	strb	r2, [r3, #0]
}
 8000764:	46c0      	nop			@ (mov r8, r8)
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	46c0      	nop			@ (mov r8, r8)
 800076c:	200005b0 	.word	0x200005b0

08000770 <IN12_init>:

void IN12_init(void) {
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
	if(DS3231_IsOscillatorStopped()) {
 8000774:	f001 fa00 	bl	8001b78 <DS3231_IsOscillatorStopped>
 8000778:	1e03      	subs	r3, r0, #0
 800077a:	d007      	beq.n	800078c <IN12_init+0x1c>
		// todo: go to the "time set mode" automaticaly
		DS3231_SetFullTime(12, 34, 56);
 800077c:	2238      	movs	r2, #56	@ 0x38
 800077e:	2122      	movs	r1, #34	@ 0x22
 8000780:	200c      	movs	r0, #12
 8000782:	f001 fac0 	bl	8001d06 <DS3231_SetFullTime>
		DS3231_EnableOscillator(DS3231_ENABLED);
 8000786:	2001      	movs	r0, #1
 8000788:	f001 f94d 	bl	8001a26 <DS3231_EnableOscillator>
	}

	time_update();
 800078c:	f7ff ffb6 	bl	80006fc <time_update>
	date_update();
 8000790:	f7ff ffce 	bl	8000730 <date_update>
}
 8000794:	46c0      	nop			@ (mov r8, r8)
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}

0800079a <btns_state_get>:
 * 			and adds corresponding mask to the handle.
 * 			State equals to "PRESSED"
 * 			(to 0, RESET state) if
 * 			any of the buttons have been pressed.
 */
static void btns_state_get(Buttons_HandleTypeDef *hbtns) {
 800079a:	b5b0      	push	{r4, r5, r7, lr}
 800079c:	b084      	sub	sp, #16
 800079e:	af00      	add	r7, sp, #0
 80007a0:	6078      	str	r0, [r7, #4]
	GPIO_PinState gpio_state;
	hbtns->state_current = RELEASED;
 80007a2:	687a      	ldr	r2, [r7, #4]
 80007a4:	23f2      	movs	r3, #242	@ 0xf2
 80007a6:	005b      	lsls	r3, r3, #1
 80007a8:	2100      	movs	r1, #0
 80007aa:	54d1      	strb	r1, [r2, r3]

	for(int i = 0; i < hbtns->num_of_buttons; ++i) {
 80007ac:	2300      	movs	r3, #0
 80007ae:	60fb      	str	r3, [r7, #12]
 80007b0:	e034      	b.n	800081c <btns_state_get+0x82>
		gpio_state = HAL_GPIO_ReadPin(hbtns->list[i].port, hbtns->list[i].pin);
 80007b2:	687a      	ldr	r2, [r7, #4]
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	015b      	lsls	r3, r3, #5
 80007b8:	18d3      	adds	r3, r2, r3
 80007ba:	3318      	adds	r3, #24
 80007bc:	6818      	ldr	r0, [r3, #0]
 80007be:	687a      	ldr	r2, [r7, #4]
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	015b      	lsls	r3, r3, #5
 80007c4:	18d3      	adds	r3, r2, r3
 80007c6:	331c      	adds	r3, #28
 80007c8:	881b      	ldrh	r3, [r3, #0]
 80007ca:	250b      	movs	r5, #11
 80007cc:	197c      	adds	r4, r7, r5
 80007ce:	0019      	movs	r1, r3
 80007d0:	f001 ff8e 	bl	80026f0 <HAL_GPIO_ReadPin>
 80007d4:	0003      	movs	r3, r0
 80007d6:	7023      	strb	r3, [r4, #0]

		if(gpio_state == hbtns->list[i].state_active) {
 80007d8:	687a      	ldr	r2, [r7, #4]
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	015b      	lsls	r3, r3, #5
 80007de:	18d3      	adds	r3, r2, r3
 80007e0:	331e      	adds	r3, #30
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	197a      	adds	r2, r7, r5
 80007e6:	7812      	ldrb	r2, [r2, #0]
 80007e8:	429a      	cmp	r2, r3
 80007ea:	d114      	bne.n	8000816 <btns_state_get+0x7c>
			hbtns->pressed_btns_mask |= hbtns->list[i].mask;
 80007ec:	687a      	ldr	r2, [r7, #4]
 80007ee:	23f1      	movs	r3, #241	@ 0xf1
 80007f0:	005b      	lsls	r3, r3, #1
 80007f2:	5ad2      	ldrh	r2, [r2, r3]
 80007f4:	6879      	ldr	r1, [r7, #4]
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	015b      	lsls	r3, r3, #5
 80007fa:	18cb      	adds	r3, r1, r3
 80007fc:	3314      	adds	r3, #20
 80007fe:	881b      	ldrh	r3, [r3, #0]
 8000800:	4313      	orrs	r3, r2
 8000802:	b299      	uxth	r1, r3
 8000804:	687a      	ldr	r2, [r7, #4]
 8000806:	23f1      	movs	r3, #241	@ 0xf1
 8000808:	005b      	lsls	r3, r3, #1
 800080a:	52d1      	strh	r1, [r2, r3]
			hbtns->state_current = PRESSED;
 800080c:	687a      	ldr	r2, [r7, #4]
 800080e:	23f2      	movs	r3, #242	@ 0xf2
 8000810:	005b      	lsls	r3, r3, #1
 8000812:	2101      	movs	r1, #1
 8000814:	54d1      	strb	r1, [r2, r3]
	for(int i = 0; i < hbtns->num_of_buttons; ++i) {
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	3301      	adds	r3, #1
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	687a      	ldr	r2, [r7, #4]
 800081e:	23f0      	movs	r3, #240	@ 0xf0
 8000820:	005b      	lsls	r3, r3, #1
 8000822:	5cd3      	ldrb	r3, [r2, r3]
 8000824:	001a      	movs	r2, r3
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	4293      	cmp	r3, r2
 800082a:	dbc2      	blt.n	80007b2 <btns_state_get+0x18>
		}
	}
}
 800082c:	46c0      	nop			@ (mov r8, r8)
 800082e:	46c0      	nop			@ (mov r8, r8)
 8000830:	46bd      	mov	sp, r7
 8000832:	b004      	add	sp, #16
 8000834:	bdb0      	pop	{r4, r5, r7, pc}

08000836 <btns_state_set>:

/*
 * Define current state (usually power button is pressed when this function is called)
 *
 */
static void btns_state_set(Buttons_HandleTypeDef *hbtns, State_TypeDef new_state) {
 8000836:	b580      	push	{r7, lr}
 8000838:	b082      	sub	sp, #8
 800083a:	af00      	add	r7, sp, #0
 800083c:	6078      	str	r0, [r7, #4]
 800083e:	000a      	movs	r2, r1
 8000840:	1cfb      	adds	r3, r7, #3
 8000842:	701a      	strb	r2, [r3, #0]
	hbtns->pressed_btns_mask	= 0; 			// Reset buttons mask
 8000844:	687a      	ldr	r2, [r7, #4]
 8000846:	23f1      	movs	r3, #241	@ 0xf1
 8000848:	005b      	lsls	r3, r3, #1
 800084a:	2100      	movs	r1, #0
 800084c:	52d1      	strh	r1, [r2, r3]
	hbtns->state_current		= new_state;
 800084e:	687a      	ldr	r2, [r7, #4]
 8000850:	1cf9      	adds	r1, r7, #3
 8000852:	23f2      	movs	r3, #242	@ 0xf2
 8000854:	005b      	lsls	r3, r3, #1
 8000856:	7809      	ldrb	r1, [r1, #0]
 8000858:	54d1      	strb	r1, [r2, r3]
	hbtns->state_previous		= new_state;
 800085a:	687a      	ldr	r2, [r7, #4]
 800085c:	1cf9      	adds	r1, r7, #3
 800085e:	23e6      	movs	r3, #230	@ 0xe6
 8000860:	33ff      	adds	r3, #255	@ 0xff
 8000862:	7809      	ldrb	r1, [r1, #0]
 8000864:	54d1      	strb	r1, [r2, r3]
	hbtns->hold_s		= 0;
 8000866:	687a      	ldr	r2, [r7, #4]
 8000868:	23f3      	movs	r3, #243	@ 0xf3
 800086a:	005b      	lsls	r3, r3, #1
 800086c:	2100      	movs	r1, #0
 800086e:	54d1      	strb	r1, [r2, r3]
}
 8000870:	46c0      	nop			@ (mov r8, r8)
 8000872:	46bd      	mov	sp, r7
 8000874:	b002      	add	sp, #8
 8000876:	bd80      	pop	{r7, pc}

08000878 <btns_timer_start>:

static HAL_StatusTypeDef btns_timer_start(Buttons_HandleTypeDef *hbtns) {
 8000878:	b5b0      	push	{r4, r5, r7, lr}
 800087a:	b084      	sub	sp, #16
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
	HAL_TIM_StateTypeDef timer_status = HAL_TIM_Base_GetState(hbtns->htim);
 8000880:	687a      	ldr	r2, [r7, #4]
 8000882:	23f4      	movs	r3, #244	@ 0xf4
 8000884:	005b      	lsls	r3, r3, #1
 8000886:	58d3      	ldr	r3, [r2, r3]
 8000888:	250f      	movs	r5, #15
 800088a:	197c      	adds	r4, r7, r5
 800088c:	0018      	movs	r0, r3
 800088e:	f004 fb2d 	bl	8004eec <HAL_TIM_Base_GetState>
 8000892:	0003      	movs	r3, r0
 8000894:	7023      	strb	r3, [r4, #0]

	/*
	 * Start the timer if it hasn't been started yet
	 */
	if (timer_status == HAL_TIM_STATE_READY) {
 8000896:	0029      	movs	r1, r5
 8000898:	187b      	adds	r3, r7, r1
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	2b01      	cmp	r3, #1
 800089e:	d111      	bne.n	80008c4 <btns_timer_start+0x4c>
		/*
		 * Clear pending interrupt flag first
		 * otherwise IT would occur immediately after the start
		 */
		FIX_TIMER_TRIGGER(hbtns->htim);
 80008a0:	687a      	ldr	r2, [r7, #4]
 80008a2:	23f4      	movs	r3, #244	@ 0xf4
 80008a4:	005b      	lsls	r3, r3, #1
 80008a6:	58d3      	ldr	r3, [r2, r3]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	2202      	movs	r2, #2
 80008ac:	4252      	negs	r2, r2
 80008ae:	611a      	str	r2, [r3, #16]
		timer_status = HAL_TIM_Base_Start_IT(hbtns->htim);
 80008b0:	687a      	ldr	r2, [r7, #4]
 80008b2:	23f4      	movs	r3, #244	@ 0xf4
 80008b4:	005b      	lsls	r3, r3, #1
 80008b6:	58d3      	ldr	r3, [r2, r3]
 80008b8:	187c      	adds	r4, r7, r1
 80008ba:	0018      	movs	r0, r3
 80008bc:	f003 fd7c 	bl	80043b8 <HAL_TIM_Base_Start_IT>
 80008c0:	0003      	movs	r3, r0
 80008c2:	7023      	strb	r3, [r4, #0]
	}

	return (HAL_StatusTypeDef)timer_status;
 80008c4:	230f      	movs	r3, #15
 80008c6:	18fb      	adds	r3, r7, r3
 80008c8:	781b      	ldrb	r3, [r3, #0]
}
 80008ca:	0018      	movs	r0, r3
 80008cc:	46bd      	mov	sp, r7
 80008ce:	b004      	add	sp, #16
 80008d0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080008d4 <btns_check>:

void btns_check(Buttons_HandleTypeDef *hbtns) {
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
	uint8_t cnt = 0;
 80008dc:	230f      	movs	r3, #15
 80008de:	18fb      	adds	r3, r7, r3
 80008e0:	2200      	movs	r2, #0
 80008e2:	701a      	strb	r2, [r3, #0]
	/*
	 * Get buttons' masks and current state
	 */
	btns_state_get(hbtns);
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	0018      	movs	r0, r3
 80008e8:	f7ff ff57 	bl	800079a <btns_state_get>
	/*
	 * Check whether a button state has changed
	 * 1. If changed to active then just notice that (update previous state)
	 * 2. If changed to idle when no long presses were detected - execute "click callback"
	 */
	if (hbtns->state_current != hbtns->state_previous) {
 80008ec:	687a      	ldr	r2, [r7, #4]
 80008ee:	23f2      	movs	r3, #242	@ 0xf2
 80008f0:	005b      	lsls	r3, r3, #1
 80008f2:	5cd2      	ldrb	r2, [r2, r3]
 80008f4:	6879      	ldr	r1, [r7, #4]
 80008f6:	23e6      	movs	r3, #230	@ 0xe6
 80008f8:	33ff      	adds	r3, #255	@ 0xff
 80008fa:	5ccb      	ldrb	r3, [r1, r3]
 80008fc:	429a      	cmp	r2, r3
 80008fe:	d022      	beq.n	8000946 <btns_check+0x72>
		if (hbtns->state_current == PRESSED) {
 8000900:	687a      	ldr	r2, [r7, #4]
 8000902:	23f2      	movs	r3, #242	@ 0xf2
 8000904:	005b      	lsls	r3, r3, #1
 8000906:	5cd3      	ldrb	r3, [r2, r3]
 8000908:	2b01      	cmp	r3, #1
 800090a:	d105      	bne.n	8000918 <btns_check+0x44>
			btns_state_set(hbtns, PRESSED);
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	2101      	movs	r1, #1
 8000910:	0018      	movs	r0, r3
 8000912:	f7ff ff90 	bl	8000836 <btns_state_set>
				++hbtns->hold_s;
				btns_callback(hbtns->pressed_btns_mask, hbtns->hold_s);
			}
		}
	}
}
 8000916:	e040      	b.n	800099a <btns_check+0xc6>
			if (hbtns->hold_s < 2) {
 8000918:	687a      	ldr	r2, [r7, #4]
 800091a:	23f3      	movs	r3, #243	@ 0xf3
 800091c:	005b      	lsls	r3, r3, #1
 800091e:	5cd3      	ldrb	r3, [r2, r3]
 8000920:	2b01      	cmp	r3, #1
 8000922:	d80a      	bhi.n	800093a <btns_check+0x66>
				btns_callback(hbtns->pressed_btns_mask, hbtns->hold_s);
 8000924:	687a      	ldr	r2, [r7, #4]
 8000926:	23f1      	movs	r3, #241	@ 0xf1
 8000928:	005b      	lsls	r3, r3, #1
 800092a:	5ad0      	ldrh	r0, [r2, r3]
 800092c:	687a      	ldr	r2, [r7, #4]
 800092e:	23f3      	movs	r3, #243	@ 0xf3
 8000930:	005b      	lsls	r3, r3, #1
 8000932:	5cd3      	ldrb	r3, [r2, r3]
 8000934:	0019      	movs	r1, r3
 8000936:	f000 f8db 	bl	8000af0 <btns_callback>
			btns_state_set(hbtns, RELEASED);
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	2100      	movs	r1, #0
 800093e:	0018      	movs	r0, r3
 8000940:	f7ff ff79 	bl	8000836 <btns_state_set>
}
 8000944:	e029      	b.n	800099a <btns_check+0xc6>
		if(hbtns->state_previous == PRESSED) {
 8000946:	687a      	ldr	r2, [r7, #4]
 8000948:	23e6      	movs	r3, #230	@ 0xe6
 800094a:	33ff      	adds	r3, #255	@ 0xff
 800094c:	5cd3      	ldrb	r3, [r2, r3]
 800094e:	2b01      	cmp	r3, #1
 8000950:	d123      	bne.n	800099a <btns_check+0xc6>
			if(++cnt > hold_1s_cnt) {
 8000952:	210f      	movs	r1, #15
 8000954:	187b      	adds	r3, r7, r1
 8000956:	187a      	adds	r2, r7, r1
 8000958:	7812      	ldrb	r2, [r2, #0]
 800095a:	3201      	adds	r2, #1
 800095c:	701a      	strb	r2, [r3, #0]
 800095e:	4b11      	ldr	r3, [pc, #68]	@ (80009a4 <btns_check+0xd0>)
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	187a      	adds	r2, r7, r1
 8000964:	7812      	ldrb	r2, [r2, #0]
 8000966:	429a      	cmp	r2, r3
 8000968:	d917      	bls.n	800099a <btns_check+0xc6>
				cnt = 0;
 800096a:	187b      	adds	r3, r7, r1
 800096c:	2200      	movs	r2, #0
 800096e:	701a      	strb	r2, [r3, #0]
				++hbtns->hold_s;
 8000970:	687a      	ldr	r2, [r7, #4]
 8000972:	23f3      	movs	r3, #243	@ 0xf3
 8000974:	005b      	lsls	r3, r3, #1
 8000976:	5cd3      	ldrb	r3, [r2, r3]
 8000978:	3301      	adds	r3, #1
 800097a:	b2d9      	uxtb	r1, r3
 800097c:	687a      	ldr	r2, [r7, #4]
 800097e:	23f3      	movs	r3, #243	@ 0xf3
 8000980:	005b      	lsls	r3, r3, #1
 8000982:	54d1      	strb	r1, [r2, r3]
				btns_callback(hbtns->pressed_btns_mask, hbtns->hold_s);
 8000984:	687a      	ldr	r2, [r7, #4]
 8000986:	23f1      	movs	r3, #241	@ 0xf1
 8000988:	005b      	lsls	r3, r3, #1
 800098a:	5ad0      	ldrh	r0, [r2, r3]
 800098c:	687a      	ldr	r2, [r7, #4]
 800098e:	23f3      	movs	r3, #243	@ 0xf3
 8000990:	005b      	lsls	r3, r3, #1
 8000992:	5cd3      	ldrb	r3, [r2, r3]
 8000994:	0019      	movs	r1, r3
 8000996:	f000 f8ab 	bl	8000af0 <btns_callback>
}
 800099a:	46c0      	nop			@ (mov r8, r8)
 800099c:	46bd      	mov	sp, r7
 800099e:	b004      	add	sp, #16
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	46c0      	nop			@ (mov r8, r8)
 80009a4:	200005f0 	.word	0x200005f0

080009a8 <btns_init>:


/*
 * @brief	Set defaults, add timer handle and start it
 */
HAL_StatusTypeDef btns_init(Buttons_HandleTypeDef *hbtns, Button_InitTypeDef user_buttons[], uint8_t num_of_buttons, TIM_HandleTypeDef *htim, State_TypeDef default_state) {
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b086      	sub	sp, #24
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	60f8      	str	r0, [r7, #12]
 80009b0:	60b9      	str	r1, [r7, #8]
 80009b2:	603b      	str	r3, [r7, #0]
 80009b4:	1dfb      	adds	r3, r7, #7
 80009b6:	701a      	strb	r2, [r3, #0]
	assert_param(hbtns 			== NULL);
	assert_param(user_buttons 	== NULL);
	assert_param(htim 			== NULL);

	if(num_of_buttons > MAX_NUMBER_OF_BUTTONS)
 80009b8:	1dfb      	adds	r3, r7, #7
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	2b0f      	cmp	r3, #15
 80009be:	d901      	bls.n	80009c4 <btns_init+0x1c>
		return HAL_ERROR;
 80009c0:	2301      	movs	r3, #1
 80009c2:	e08f      	b.n	8000ae4 <btns_init+0x13c>

	hbtns->num_of_buttons	= num_of_buttons;
 80009c4:	68fa      	ldr	r2, [r7, #12]
 80009c6:	1df9      	adds	r1, r7, #7
 80009c8:	23f0      	movs	r3, #240	@ 0xf0
 80009ca:	005b      	lsls	r3, r3, #1
 80009cc:	7809      	ldrb	r1, [r1, #0]
 80009ce:	54d1      	strb	r1, [r2, r3]
	hbtns->htim 			= htim;										// Set dedicated to buttons timer
 80009d0:	68fa      	ldr	r2, [r7, #12]
 80009d2:	23f4      	movs	r3, #244	@ 0xf4
 80009d4:	005b      	lsls	r3, r3, #1
 80009d6:	6839      	ldr	r1, [r7, #0]
 80009d8:	50d1      	str	r1, [r2, r3]

	/*
	 * Register button parameters and fill additional fields
	 */
	for(int id = 0; id < num_of_buttons; ++id) {
 80009da:	2300      	movs	r3, #0
 80009dc:	617b      	str	r3, [r7, #20]
 80009de:	e061      	b.n	8000aa4 <btns_init+0xfc>
		strcpy(hbtns->list[id].name, user_buttons[id].name);		// Copy name
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	015b      	lsls	r3, r3, #5
 80009e4:	68fa      	ldr	r2, [r7, #12]
 80009e6:	18d0      	adds	r0, r2, r3
 80009e8:	697a      	ldr	r2, [r7, #20]
 80009ea:	0013      	movs	r3, r2
 80009ec:	00db      	lsls	r3, r3, #3
 80009ee:	1a9b      	subs	r3, r3, r2
 80009f0:	009b      	lsls	r3, r3, #2
 80009f2:	001a      	movs	r2, r3
 80009f4:	68bb      	ldr	r3, [r7, #8]
 80009f6:	189b      	adds	r3, r3, r2
 80009f8:	0019      	movs	r1, r3
 80009fa:	f005 fab9 	bl	8005f70 <strcpy>
		hbtns->list[id].mask			= 1 << id;					// Create unique bitmask
 80009fe:	2201      	movs	r2, #1
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	409a      	lsls	r2, r3
 8000a04:	0013      	movs	r3, r2
 8000a06:	b299      	uxth	r1, r3
 8000a08:	68fa      	ldr	r2, [r7, #12]
 8000a0a:	697b      	ldr	r3, [r7, #20]
 8000a0c:	015b      	lsls	r3, r3, #5
 8000a0e:	18d3      	adds	r3, r2, r3
 8000a10:	3314      	adds	r3, #20
 8000a12:	1c0a      	adds	r2, r1, #0
 8000a14:	801a      	strh	r2, [r3, #0]
		hbtns->list[id].port 			= user_buttons[id].port;
 8000a16:	697a      	ldr	r2, [r7, #20]
 8000a18:	0013      	movs	r3, r2
 8000a1a:	00db      	lsls	r3, r3, #3
 8000a1c:	1a9b      	subs	r3, r3, r2
 8000a1e:	009b      	lsls	r3, r3, #2
 8000a20:	001a      	movs	r2, r3
 8000a22:	68bb      	ldr	r3, [r7, #8]
 8000a24:	189b      	adds	r3, r3, r2
 8000a26:	695a      	ldr	r2, [r3, #20]
 8000a28:	68f9      	ldr	r1, [r7, #12]
 8000a2a:	697b      	ldr	r3, [r7, #20]
 8000a2c:	015b      	lsls	r3, r3, #5
 8000a2e:	18cb      	adds	r3, r1, r3
 8000a30:	3318      	adds	r3, #24
 8000a32:	601a      	str	r2, [r3, #0]
		hbtns->list[id].pin 			= user_buttons[id].pin;
 8000a34:	697a      	ldr	r2, [r7, #20]
 8000a36:	0013      	movs	r3, r2
 8000a38:	00db      	lsls	r3, r3, #3
 8000a3a:	1a9b      	subs	r3, r3, r2
 8000a3c:	009b      	lsls	r3, r3, #2
 8000a3e:	001a      	movs	r2, r3
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	189b      	adds	r3, r3, r2
 8000a44:	8b19      	ldrh	r1, [r3, #24]
 8000a46:	68fa      	ldr	r2, [r7, #12]
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	015b      	lsls	r3, r3, #5
 8000a4c:	18d3      	adds	r3, r2, r3
 8000a4e:	331c      	adds	r3, #28
 8000a50:	1c0a      	adds	r2, r1, #0
 8000a52:	801a      	strh	r2, [r3, #0]
		hbtns->list[id].state_active 	= user_buttons[id].state_active;
 8000a54:	697a      	ldr	r2, [r7, #20]
 8000a56:	0013      	movs	r3, r2
 8000a58:	00db      	lsls	r3, r3, #3
 8000a5a:	1a9b      	subs	r3, r3, r2
 8000a5c:	009b      	lsls	r3, r3, #2
 8000a5e:	001a      	movs	r2, r3
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	189b      	adds	r3, r3, r2
 8000a64:	7e99      	ldrb	r1, [r3, #26]
 8000a66:	68fa      	ldr	r2, [r7, #12]
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	015b      	lsls	r3, r3, #5
 8000a6c:	18d3      	adds	r3, r2, r3
 8000a6e:	331e      	adds	r3, #30
 8000a70:	1c0a      	adds	r2, r1, #0
 8000a72:	701a      	strb	r2, [r3, #0]
		hbtns->list[id].state 			= user_buttons[id].state_active == GPIO_PIN_SET ? GPIO_PIN_RESET : GPIO_PIN_SET; // By default lvl_en is opposite of active
 8000a74:	697a      	ldr	r2, [r7, #20]
 8000a76:	0013      	movs	r3, r2
 8000a78:	00db      	lsls	r3, r3, #3
 8000a7a:	1a9b      	subs	r3, r3, r2
 8000a7c:	009b      	lsls	r3, r3, #2
 8000a7e:	001a      	movs	r2, r3
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	189b      	adds	r3, r3, r2
 8000a84:	7e9b      	ldrb	r3, [r3, #26]
 8000a86:	3b01      	subs	r3, #1
 8000a88:	1e5a      	subs	r2, r3, #1
 8000a8a:	4193      	sbcs	r3, r2
 8000a8c:	b2db      	uxtb	r3, r3
 8000a8e:	0019      	movs	r1, r3
 8000a90:	68fa      	ldr	r2, [r7, #12]
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	015b      	lsls	r3, r3, #5
 8000a96:	18d3      	adds	r3, r2, r3
 8000a98:	331f      	adds	r3, #31
 8000a9a:	1c0a      	adds	r2, r1, #0
 8000a9c:	701a      	strb	r2, [r3, #0]
	for(int id = 0; id < num_of_buttons; ++id) {
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	617b      	str	r3, [r7, #20]
 8000aa4:	1dfb      	adds	r3, r7, #7
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	697a      	ldr	r2, [r7, #20]
 8000aaa:	429a      	cmp	r2, r3
 8000aac:	db98      	blt.n	80009e0 <btns_init+0x38>

	/*
	 * Set default state to prevent false detection on start.
	 * For example, when buttons are initialized with power button pressed.
	 */
	btns_state_set(hbtns, default_state);
 8000aae:	2320      	movs	r3, #32
 8000ab0:	18fb      	adds	r3, r7, r3
 8000ab2:	781a      	ldrb	r2, [r3, #0]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	0011      	movs	r1, r2
 8000ab8:	0018      	movs	r0, r3
 8000aba:	f7ff febc 	bl	8000836 <btns_state_set>

	/*
	 * Set max count for long presses, e.g. 1000ms/50ms = 20
	 */
	hold_1s_cnt 	= 1000/hbtns->htim->Init.Period;
 8000abe:	68fa      	ldr	r2, [r7, #12]
 8000ac0:	23f4      	movs	r3, #244	@ 0xf4
 8000ac2:	005b      	lsls	r3, r3, #1
 8000ac4:	58d3      	ldr	r3, [r2, r3]
 8000ac6:	68db      	ldr	r3, [r3, #12]
 8000ac8:	0019      	movs	r1, r3
 8000aca:	23fa      	movs	r3, #250	@ 0xfa
 8000acc:	0098      	lsls	r0, r3, #2
 8000ace:	f7ff fb1b 	bl	8000108 <__udivsi3>
 8000ad2:	0003      	movs	r3, r0
 8000ad4:	b2da      	uxtb	r2, r3
 8000ad6:	4b05      	ldr	r3, [pc, #20]	@ (8000aec <btns_init+0x144>)
 8000ad8:	701a      	strb	r2, [r3, #0]
//	hold_10s_count 			= 10000/hbtns->htim->Init.Period;

	/*
	 * Start the timer
	 */
	return btns_timer_start(hbtns);
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	0018      	movs	r0, r3
 8000ade:	f7ff fecb 	bl	8000878 <btns_timer_start>
 8000ae2:	0003      	movs	r3, r0
}
 8000ae4:	0018      	movs	r0, r3
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	b006      	add	sp, #24
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	200005f0 	.word	0x200005f0

08000af0 <btns_callback>:
//};
extern TIM_HandleTypeDef 		htim2;
//extern TIM_HandleTypeDef 		htim22;
extern Buttons_HandleTypeDef 	hbtns;

void btns_callback(uint16_t mask, PressType_TypeDef press_type) {
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	0002      	movs	r2, r0
 8000af8:	1dbb      	adds	r3, r7, #6
 8000afa:	801a      	strh	r2, [r3, #0]
 8000afc:	1d7b      	adds	r3, r7, #5
 8000afe:	1c0a      	adds	r2, r1, #0
 8000b00:	701a      	strb	r2, [r3, #0]
	shared_mask 		= mask;
 8000b02:	1dbb      	adds	r3, r7, #6
 8000b04:	881a      	ldrh	r2, [r3, #0]
 8000b06:	4b05      	ldr	r3, [pc, #20]	@ (8000b1c <btns_callback+0x2c>)
 8000b08:	601a      	str	r2, [r3, #0]
	shared_press_type 	= press_type;
 8000b0a:	1d7b      	adds	r3, r7, #5
 8000b0c:	781a      	ldrb	r2, [r3, #0]
 8000b0e:	4b04      	ldr	r3, [pc, #16]	@ (8000b20 <btns_callback+0x30>)
 8000b10:	601a      	str	r2, [r3, #0]
	//	case MASK_RIGHT:
	//		break;
	//
	//	default: break;
	//	}
}
 8000b12:	46c0      	nop			@ (mov r8, r8)
 8000b14:	46bd      	mov	sp, r7
 8000b16:	b002      	add	sp, #8
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	46c0      	nop			@ (mov r8, r8)
 8000b1c:	200005f4 	.word	0x200005f4
 8000b20:	200005f8 	.word	0x200005f8

08000b24 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
	static uint8_t count_50_ms = 0;
	if(htim == &htim2) {
 8000b2c:	687a      	ldr	r2, [r7, #4]
 8000b2e:	4b17      	ldr	r3, [pc, #92]	@ (8000b8c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000b30:	429a      	cmp	r2, r3
 8000b32:	d108      	bne.n	8000b46 <HAL_TIM_PeriodElapsedCallback+0x22>
		bitmask_set(); // restore values
 8000b34:	f7ff fd64 	bl	8000600 <bitmask_set>
		if(!flag_upd_tubes)
 8000b38:	4b15      	ldr	r3, [pc, #84]	@ (8000b90 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d102      	bne.n	8000b46 <HAL_TIM_PeriodElapsedCallback+0x22>
			flag_upd_tubes = 1;
 8000b40:	4b13      	ldr	r3, [pc, #76]	@ (8000b90 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000b42:	2201      	movs	r2, #1
 8000b44:	701a      	strb	r2, [r3, #0]
//		IN12_set();
	}

	if(htim == hbtns.htim) {
 8000b46:	4a13      	ldr	r2, [pc, #76]	@ (8000b94 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000b48:	23f4      	movs	r3, #244	@ 0xf4
 8000b4a:	005b      	lsls	r3, r3, #1
 8000b4c:	58d3      	ldr	r3, [r2, r3]
 8000b4e:	687a      	ldr	r2, [r7, #4]
 8000b50:	429a      	cmp	r2, r3
 8000b52:	d117      	bne.n	8000b84 <HAL_TIM_PeriodElapsedCallback+0x60>
		btns_check(&hbtns);
 8000b54:	4b0f      	ldr	r3, [pc, #60]	@ (8000b94 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000b56:	0018      	movs	r0, r3
 8000b58:	f7ff febc 	bl	80008d4 <btns_check>

		++count_50_ms;
 8000b5c:	4b0e      	ldr	r3, [pc, #56]	@ (8000b98 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	3301      	adds	r3, #1
 8000b62:	b2da      	uxtb	r2, r3
 8000b64:	4b0c      	ldr	r3, [pc, #48]	@ (8000b98 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000b66:	701a      	strb	r2, [r3, #0]
		if(count_50_ms >= 1000/50) {
 8000b68:	4b0b      	ldr	r3, [pc, #44]	@ (8000b98 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	2b13      	cmp	r3, #19
 8000b6e:	d909      	bls.n	8000b84 <HAL_TIM_PeriodElapsedCallback+0x60>
			count_50_ms = 0;
 8000b70:	4b09      	ldr	r3, [pc, #36]	@ (8000b98 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	701a      	strb	r2, [r3, #0]
			if(!flag_upd_time)
 8000b76:	4b09      	ldr	r3, [pc, #36]	@ (8000b9c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d102      	bne.n	8000b84 <HAL_TIM_PeriodElapsedCallback+0x60>
				flag_upd_time = 1;
 8000b7e:	4b07      	ldr	r3, [pc, #28]	@ (8000b9c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000b80:	2201      	movs	r2, #1
 8000b82:	701a      	strb	r2, [r3, #0]
//			time_update();
		}
	}
}
 8000b84:	46c0      	nop			@ (mov r8, r8)
 8000b86:	46bd      	mov	sp, r7
 8000b88:	b002      	add	sp, #8
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	20000788 	.word	0x20000788
 8000b90:	200005b4 	.word	0x200005b4
 8000b94:	20000938 	.word	0x20000938
 8000b98:	200005fc 	.word	0x200005fc
 8000b9c:	200005b5 	.word	0x200005b5

08000ba0 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
	if(htim == &htim2) {
 8000ba8:	687a      	ldr	r2, [r7, #4]
 8000baa:	4b0b      	ldr	r3, [pc, #44]	@ (8000bd8 <HAL_TIM_PWM_PulseFinishedCallback+0x38>)
 8000bac:	429a      	cmp	r2, r3
 8000bae:	d10e      	bne.n	8000bce <HAL_TIM_PWM_PulseFinishedCallback+0x2e>
		clock_data.bitmask.tube[htim->Channel - 1] = 0; // E.g. "if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {...}"
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	7e1b      	ldrb	r3, [r3, #24]
 8000bb4:	1e5a      	subs	r2, r3, #1
 8000bb6:	4b09      	ldr	r3, [pc, #36]	@ (8000bdc <HAL_TIM_PWM_PulseFinishedCallback+0x3c>)
 8000bb8:	3214      	adds	r2, #20
 8000bba:	0052      	lsls	r2, r2, #1
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	52d1      	strh	r1, [r2, r3]
		if(!flag_upd_tubes)
 8000bc0:	4b07      	ldr	r3, [pc, #28]	@ (8000be0 <HAL_TIM_PWM_PulseFinishedCallback+0x40>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d102      	bne.n	8000bce <HAL_TIM_PWM_PulseFinishedCallback+0x2e>
			flag_upd_tubes = 1;
 8000bc8:	4b05      	ldr	r3, [pc, #20]	@ (8000be0 <HAL_TIM_PWM_PulseFinishedCallback+0x40>)
 8000bca:	2201      	movs	r2, #1
 8000bcc:	701a      	strb	r2, [r3, #0]
//		IN12_set();
	}
}
 8000bce:	46c0      	nop			@ (mov r8, r8)
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	b002      	add	sp, #8
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	46c0      	nop			@ (mov r8, r8)
 8000bd8:	20000788 	.word	0x20000788
 8000bdc:	200005b8 	.word	0x200005b8
 8000be0:	200005b4 	.word	0x200005b4

08000be4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000be4:	b590      	push	{r4, r7, lr}
 8000be6:	b087      	sub	sp, #28
 8000be8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bea:	f001 f8e7 	bl	8001dbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bee:	f000 f8bd 	bl	8000d6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bf2:	f000 fb23 	bl	800123c <MX_GPIO_Init>
  MX_DMA_Init();
 8000bf6:	f000 faf3 	bl	80011e0 <MX_DMA_Init>
  MX_I2C1_Init();
 8000bfa:	f000 f937 	bl	8000e6c <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 8000bfe:	f000 f975 	bl	8000eec <MX_LPUART1_UART_Init>
  MX_USART2_UART_Init();
 8000c02:	f000 f9a3 	bl	8000f4c <MX_USART2_UART_Init>
  MX_RTC_Init();
 8000c06:	f000 f9d1 	bl	8000fac <MX_RTC_Init>
  MX_TIM21_Init();
 8000c0a:	f000 fa93 	bl	8001134 <MX_TIM21_Init>
  MX_TIM2_Init();
 8000c0e:	f000 f9f7 	bl	8001000 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
//  settings_init(s_ptr, settings_size);
  IN12_init();
 8000c12:	f7ff fdad 	bl	8000770 <IN12_init>
  DS3231_Init(&hi2c1);
 8000c16:	4b48      	ldr	r3, [pc, #288]	@ (8000d38 <main+0x154>)
 8000c18:	0018      	movs	r0, r3
 8000c1a:	f000 fe7f 	bl	800191c <DS3231_Init>

  init_menu_items(&hmenu, items_list, num_of_items);
 8000c1e:	4b47      	ldr	r3, [pc, #284]	@ (8000d3c <main+0x158>)
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	001a      	movs	r2, r3
 8000c24:	4946      	ldr	r1, [pc, #280]	@ (8000d40 <main+0x15c>)
 8000c26:	4b47      	ldr	r3, [pc, #284]	@ (8000d44 <main+0x160>)
 8000c28:	0018      	movs	r0, r3
 8000c2a:	f000 fbf9 	bl	8001420 <init_menu_items>
  btns_init(&hbtns, btns_list, num_of_btns, &htim21, PRESSED);
 8000c2e:	4b46      	ldr	r3, [pc, #280]	@ (8000d48 <main+0x164>)
 8000c30:	781a      	ldrb	r2, [r3, #0]
 8000c32:	4b46      	ldr	r3, [pc, #280]	@ (8000d4c <main+0x168>)
 8000c34:	4946      	ldr	r1, [pc, #280]	@ (8000d50 <main+0x16c>)
 8000c36:	4847      	ldr	r0, [pc, #284]	@ (8000d54 <main+0x170>)
 8000c38:	2401      	movs	r4, #1
 8000c3a:	9400      	str	r4, [sp, #0]
 8000c3c:	f7ff feb4 	bl	80009a8 <btns_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  // 7-15 Volts input
  uint8_t dir = 0;
 8000c40:	230e      	movs	r3, #14
 8000c42:	18fb      	adds	r3, r7, r3
 8000c44:	2200      	movs	r2, #0
 8000c46:	701a      	strb	r2, [r3, #0]
  uint8_t is_upd = 0;
 8000c48:	230f      	movs	r3, #15
 8000c4a:	18fb      	adds	r3, r7, r3
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	701a      	strb	r2, [r3, #0]
  uint32_t period = 100;
 8000c50:	2364      	movs	r3, #100	@ 0x64
 8000c52:	60bb      	str	r3, [r7, #8]
  uint8_t duty_cycle = 1;
 8000c54:	1dfb      	adds	r3, r7, #7
 8000c56:	2201      	movs	r2, #1
 8000c58:	701a      	strb	r2, [r3, #0]


  volatile HAL_StatusTypeDef status = 0;
 8000c5a:	1dbb      	adds	r3, r7, #6
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	701a      	strb	r2, [r3, #0]
  status = HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t *)&duty_cycles[0], 1);
 8000c60:	4a3d      	ldr	r2, [pc, #244]	@ (8000d58 <main+0x174>)
 8000c62:	483e      	ldr	r0, [pc, #248]	@ (8000d5c <main+0x178>)
 8000c64:	2301      	movs	r3, #1
 8000c66:	2100      	movs	r1, #0
 8000c68:	f003 fd0c 	bl	8004684 <HAL_TIM_PWM_Start_DMA>
 8000c6c:	0003      	movs	r3, r0
 8000c6e:	001a      	movs	r2, r3
 8000c70:	1dbb      	adds	r3, r7, #6
 8000c72:	701a      	strb	r2, [r3, #0]
//  status = HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_2, (uint32_t *)&duty_cycles[1], 1);
//  status = HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_3, (uint32_t *)&duty_cycles[2], 1);
//  status = HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_4, (uint32_t *)&duty_cycles[3], 1);

  status = HAL_TIM_Base_Start_IT(&htim2);
 8000c74:	4b39      	ldr	r3, [pc, #228]	@ (8000d5c <main+0x178>)
 8000c76:	0018      	movs	r0, r3
 8000c78:	f003 fb9e 	bl	80043b8 <HAL_TIM_Base_Start_IT>
 8000c7c:	0003      	movs	r3, r0
 8000c7e:	001a      	movs	r2, r3
 8000c80:	1dbb      	adds	r3, r7, #6
 8000c82:	701a      	strb	r2, [r3, #0]

  // No need to fix interrupt being called right after the starting timer
  // Here it serve the purpose of updating important variables and setting bits in control registers

  status = HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);
 8000c84:	4b35      	ldr	r3, [pc, #212]	@ (8000d5c <main+0x178>)
 8000c86:	2100      	movs	r1, #0
 8000c88:	0018      	movs	r0, r3
 8000c8a:	f003 fc29 	bl	80044e0 <HAL_TIM_PWM_Start_IT>
 8000c8e:	0003      	movs	r3, r0
 8000c90:	001a      	movs	r2, r3
 8000c92:	1dbb      	adds	r3, r7, #6
 8000c94:	701a      	strb	r2, [r3, #0]

  while (1)
  {
	  if(flag_upd_time) {
 8000c96:	4b32      	ldr	r3, [pc, #200]	@ (8000d60 <main+0x17c>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d004      	beq.n	8000ca8 <main+0xc4>
		  time_update();
 8000c9e:	f7ff fd2d 	bl	80006fc <time_update>
		  flag_upd_time = 0;
 8000ca2:	4b2f      	ldr	r3, [pc, #188]	@ (8000d60 <main+0x17c>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	701a      	strb	r2, [r3, #0]
	  }

	  if(flag_upd_tubes) {
 8000ca8:	4b2e      	ldr	r3, [pc, #184]	@ (8000d64 <main+0x180>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d004      	beq.n	8000cba <main+0xd6>
		  IN12_set();
 8000cb0:	f7ff fc86 	bl	80005c0 <IN12_set>
		  flag_upd_tubes = 0;
 8000cb4:	4b2b      	ldr	r3, [pc, #172]	@ (8000d64 <main+0x180>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	701a      	strb	r2, [r3, #0]
	  }

	  switch(shared_mask) {
 8000cba:	4b2b      	ldr	r3, [pc, #172]	@ (8000d68 <main+0x184>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	2b04      	cmp	r3, #4
 8000cc0:	d02b      	beq.n	8000d1a <main+0x136>
 8000cc2:	d825      	bhi.n	8000d10 <main+0x12c>
 8000cc4:	2b01      	cmp	r3, #1
 8000cc6:	d002      	beq.n	8000cce <main+0xea>
 8000cc8:	2b02      	cmp	r3, #2
 8000cca:	d00f      	beq.n	8000cec <main+0x108>
 8000ccc:	e020      	b.n	8000d10 <main+0x12c>
	  case MASK_LEFT:
		  is_upd = 1;
 8000cce:	230f      	movs	r3, #15
 8000cd0:	18fb      	adds	r3, r7, r3
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	701a      	strb	r2, [r3, #0]
		  if(duty_cycles[0] > 10)
 8000cd6:	4b20      	ldr	r3, [pc, #128]	@ (8000d58 <main+0x174>)
 8000cd8:	881b      	ldrh	r3, [r3, #0]
 8000cda:	2b0a      	cmp	r3, #10
 8000cdc:	d91f      	bls.n	8000d1e <main+0x13a>
			  duty_cycles[0] -= 10;
 8000cde:	4b1e      	ldr	r3, [pc, #120]	@ (8000d58 <main+0x174>)
 8000ce0:	881b      	ldrh	r3, [r3, #0]
 8000ce2:	3b0a      	subs	r3, #10
 8000ce4:	b29a      	uxth	r2, r3
 8000ce6:	4b1c      	ldr	r3, [pc, #112]	@ (8000d58 <main+0x174>)
 8000ce8:	801a      	strh	r2, [r3, #0]
		  break;
 8000cea:	e018      	b.n	8000d1e <main+0x13a>

	  case MASK_RIGHT:
		  is_upd = 1;
 8000cec:	230f      	movs	r3, #15
 8000cee:	18fb      	adds	r3, r7, r3
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	701a      	strb	r2, [r3, #0]
		  if(duty_cycles[0] < period - 10)
 8000cf4:	4b18      	ldr	r3, [pc, #96]	@ (8000d58 <main+0x174>)
 8000cf6:	881b      	ldrh	r3, [r3, #0]
 8000cf8:	001a      	movs	r2, r3
 8000cfa:	68bb      	ldr	r3, [r7, #8]
 8000cfc:	3b0a      	subs	r3, #10
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	d20f      	bcs.n	8000d22 <main+0x13e>
			  duty_cycles[0] += 10;
 8000d02:	4b15      	ldr	r3, [pc, #84]	@ (8000d58 <main+0x174>)
 8000d04:	881b      	ldrh	r3, [r3, #0]
 8000d06:	330a      	adds	r3, #10
 8000d08:	b29a      	uxth	r2, r3
 8000d0a:	4b13      	ldr	r3, [pc, #76]	@ (8000d58 <main+0x174>)
 8000d0c:	801a      	strh	r2, [r3, #0]

		  break;
 8000d0e:	e008      	b.n	8000d22 <main+0x13e>

	  case MASK_ENTER:
//		  dir = ~dir;
		  break;

	  default: is_upd = 0;
 8000d10:	230f      	movs	r3, #15
 8000d12:	18fb      	adds	r3, r7, r3
 8000d14:	2200      	movs	r2, #0
 8000d16:	701a      	strb	r2, [r3, #0]
 8000d18:	e004      	b.n	8000d24 <main+0x140>
		  break;
 8000d1a:	46c0      	nop			@ (mov r8, r8)
 8000d1c:	e002      	b.n	8000d24 <main+0x140>
		  break;
 8000d1e:	46c0      	nop			@ (mov r8, r8)
 8000d20:	e000      	b.n	8000d24 <main+0x140>
		  break;
 8000d22:	46c0      	nop			@ (mov r8, r8)
	  }

	  if(is_upd) {
 8000d24:	230f      	movs	r3, #15
 8000d26:	18fb      	adds	r3, r7, r3
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d0b3      	beq.n	8000c96 <main+0xb2>
//		  rtc_time.Seconds = 0;
//		  DS3231_EnableOscillator(DS3231_DISABLED);
//		  DS3231_SetFullTime(rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds);
//		  DS3231_EnableOscillator(DS3231_ENABLED);
		  shared_mask = 0;
 8000d2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d68 <main+0x184>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
	  if(flag_upd_time) {
 8000d34:	e7af      	b.n	8000c96 <main+0xb2>
 8000d36:	46c0      	nop			@ (mov r8, r8)
 8000d38:	20000600 	.word	0x20000600
 8000d3c:	20000565 	.word	0x20000565
 8000d40:	20000054 	.word	0x20000054
 8000d44:	20000928 	.word	0x20000928
 8000d48:	20000564 	.word	0x20000564
 8000d4c:	200007c8 	.word	0x200007c8
 8000d50:	20000000 	.word	0x20000000
 8000d54:	20000938 	.word	0x20000938
 8000d58:	20000568 	.word	0x20000568
 8000d5c:	20000788 	.word	0x20000788
 8000d60:	200005b5 	.word	0x200005b5
 8000d64:	200005b4 	.word	0x200005b4
 8000d68:	200005f4 	.word	0x200005f4

08000d6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d6c:	b590      	push	{r4, r7, lr}
 8000d6e:	b099      	sub	sp, #100	@ 0x64
 8000d70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d72:	242c      	movs	r4, #44	@ 0x2c
 8000d74:	193b      	adds	r3, r7, r4
 8000d76:	0018      	movs	r0, r3
 8000d78:	2334      	movs	r3, #52	@ 0x34
 8000d7a:	001a      	movs	r2, r3
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	f005 f8cb 	bl	8005f18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d82:	2318      	movs	r3, #24
 8000d84:	18fb      	adds	r3, r7, r3
 8000d86:	0018      	movs	r0, r3
 8000d88:	2314      	movs	r3, #20
 8000d8a:	001a      	movs	r2, r3
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	f005 f8c3 	bl	8005f18 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d92:	003b      	movs	r3, r7
 8000d94:	0018      	movs	r0, r3
 8000d96:	2318      	movs	r3, #24
 8000d98:	001a      	movs	r2, r3
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	f005 f8bc 	bl	8005f18 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000da0:	4b30      	ldr	r3, [pc, #192]	@ (8000e64 <SystemClock_Config+0xf8>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a30      	ldr	r2, [pc, #192]	@ (8000e68 <SystemClock_Config+0xfc>)
 8000da6:	401a      	ands	r2, r3
 8000da8:	4b2e      	ldr	r3, [pc, #184]	@ (8000e64 <SystemClock_Config+0xf8>)
 8000daa:	2180      	movs	r1, #128	@ 0x80
 8000dac:	0109      	lsls	r1, r1, #4
 8000dae:	430a      	orrs	r2, r1
 8000db0:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000db2:	0021      	movs	r1, r4
 8000db4:	187b      	adds	r3, r7, r1
 8000db6:	220a      	movs	r2, #10
 8000db8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dba:	187b      	adds	r3, r7, r1
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dc0:	187b      	adds	r3, r7, r1
 8000dc2:	2210      	movs	r2, #16
 8000dc4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000dc6:	187b      	adds	r3, r7, r1
 8000dc8:	2201      	movs	r2, #1
 8000dca:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dcc:	187b      	adds	r3, r7, r1
 8000dce:	2202      	movs	r2, #2
 8000dd0:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000dd2:	187b      	adds	r3, r7, r1
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8000dd8:	187b      	adds	r3, r7, r1
 8000dda:	2280      	movs	r2, #128	@ 0x80
 8000ddc:	02d2      	lsls	r2, r2, #11
 8000dde:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000de0:	187b      	adds	r3, r7, r1
 8000de2:	2280      	movs	r2, #128	@ 0x80
 8000de4:	03d2      	lsls	r2, r2, #15
 8000de6:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000de8:	187b      	adds	r3, r7, r1
 8000dea:	0018      	movs	r0, r3
 8000dec:	f002 faa6 	bl	800333c <HAL_RCC_OscConfig>
 8000df0:	1e03      	subs	r3, r0, #0
 8000df2:	d001      	beq.n	8000df8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000df4:	f000 faf6 	bl	80013e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000df8:	2118      	movs	r1, #24
 8000dfa:	187b      	adds	r3, r7, r1
 8000dfc:	220f      	movs	r2, #15
 8000dfe:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e00:	187b      	adds	r3, r7, r1
 8000e02:	2203      	movs	r2, #3
 8000e04:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e06:	187b      	adds	r3, r7, r1
 8000e08:	2200      	movs	r2, #0
 8000e0a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e0c:	187b      	adds	r3, r7, r1
 8000e0e:	2200      	movs	r2, #0
 8000e10:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e12:	187b      	adds	r3, r7, r1
 8000e14:	2200      	movs	r2, #0
 8000e16:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e18:	187b      	adds	r3, r7, r1
 8000e1a:	2101      	movs	r1, #1
 8000e1c:	0018      	movs	r0, r3
 8000e1e:	f002 fe09 	bl	8003a34 <HAL_RCC_ClockConfig>
 8000e22:	1e03      	subs	r3, r0, #0
 8000e24:	d001      	beq.n	8000e2a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000e26:	f000 fadd 	bl	80013e4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_LPUART1
 8000e2a:	003b      	movs	r3, r7
 8000e2c:	222e      	movs	r2, #46	@ 0x2e
 8000e2e:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e30:	003b      	movs	r3, r7
 8000e32:	2200      	movs	r2, #0
 8000e34:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000e36:	003b      	movs	r3, r7
 8000e38:	2200      	movs	r2, #0
 8000e3a:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000e3c:	003b      	movs	r3, r7
 8000e3e:	2200      	movs	r2, #0
 8000e40:	611a      	str	r2, [r3, #16]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000e42:	003b      	movs	r3, r7
 8000e44:	2280      	movs	r2, #128	@ 0x80
 8000e46:	0292      	lsls	r2, r2, #10
 8000e48:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e4a:	003b      	movs	r3, r7
 8000e4c:	0018      	movs	r0, r3
 8000e4e:	f003 f815 	bl	8003e7c <HAL_RCCEx_PeriphCLKConfig>
 8000e52:	1e03      	subs	r3, r0, #0
 8000e54:	d001      	beq.n	8000e5a <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000e56:	f000 fac5 	bl	80013e4 <Error_Handler>
  }
}
 8000e5a:	46c0      	nop			@ (mov r8, r8)
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	b019      	add	sp, #100	@ 0x64
 8000e60:	bd90      	pop	{r4, r7, pc}
 8000e62:	46c0      	nop			@ (mov r8, r8)
 8000e64:	40007000 	.word	0x40007000
 8000e68:	ffffe7ff 	.word	0xffffe7ff

08000e6c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e70:	4b1b      	ldr	r3, [pc, #108]	@ (8000ee0 <MX_I2C1_Init+0x74>)
 8000e72:	4a1c      	ldr	r2, [pc, #112]	@ (8000ee4 <MX_I2C1_Init+0x78>)
 8000e74:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000e76:	4b1a      	ldr	r3, [pc, #104]	@ (8000ee0 <MX_I2C1_Init+0x74>)
 8000e78:	4a1b      	ldr	r2, [pc, #108]	@ (8000ee8 <MX_I2C1_Init+0x7c>)
 8000e7a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000e7c:	4b18      	ldr	r3, [pc, #96]	@ (8000ee0 <MX_I2C1_Init+0x74>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e82:	4b17      	ldr	r3, [pc, #92]	@ (8000ee0 <MX_I2C1_Init+0x74>)
 8000e84:	2201      	movs	r2, #1
 8000e86:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e88:	4b15      	ldr	r3, [pc, #84]	@ (8000ee0 <MX_I2C1_Init+0x74>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e8e:	4b14      	ldr	r3, [pc, #80]	@ (8000ee0 <MX_I2C1_Init+0x74>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e94:	4b12      	ldr	r3, [pc, #72]	@ (8000ee0 <MX_I2C1_Init+0x74>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e9a:	4b11      	ldr	r3, [pc, #68]	@ (8000ee0 <MX_I2C1_Init+0x74>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ea0:	4b0f      	ldr	r3, [pc, #60]	@ (8000ee0 <MX_I2C1_Init+0x74>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ea6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee0 <MX_I2C1_Init+0x74>)
 8000ea8:	0018      	movs	r0, r3
 8000eaa:	f001 fc5b 	bl	8002764 <HAL_I2C_Init>
 8000eae:	1e03      	subs	r3, r0, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000eb2:	f000 fa97 	bl	80013e4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000eb6:	4b0a      	ldr	r3, [pc, #40]	@ (8000ee0 <MX_I2C1_Init+0x74>)
 8000eb8:	2100      	movs	r1, #0
 8000eba:	0018      	movs	r0, r3
 8000ebc:	f002 f9a6 	bl	800320c <HAL_I2CEx_ConfigAnalogFilter>
 8000ec0:	1e03      	subs	r3, r0, #0
 8000ec2:	d001      	beq.n	8000ec8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ec4:	f000 fa8e 	bl	80013e4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ec8:	4b05      	ldr	r3, [pc, #20]	@ (8000ee0 <MX_I2C1_Init+0x74>)
 8000eca:	2100      	movs	r1, #0
 8000ecc:	0018      	movs	r0, r3
 8000ece:	f002 f9e9 	bl	80032a4 <HAL_I2CEx_ConfigDigitalFilter>
 8000ed2:	1e03      	subs	r3, r0, #0
 8000ed4:	d001      	beq.n	8000eda <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000ed6:	f000 fa85 	bl	80013e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000eda:	46c0      	nop			@ (mov r8, r8)
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	20000600 	.word	0x20000600
 8000ee4:	40005400 	.word	0x40005400
 8000ee8:	00707cbb 	.word	0x00707cbb

08000eec <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000ef0:	4b13      	ldr	r3, [pc, #76]	@ (8000f40 <MX_LPUART1_UART_Init+0x54>)
 8000ef2:	4a14      	ldr	r2, [pc, #80]	@ (8000f44 <MX_LPUART1_UART_Init+0x58>)
 8000ef4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000ef6:	4b12      	ldr	r3, [pc, #72]	@ (8000f40 <MX_LPUART1_UART_Init+0x54>)
 8000ef8:	4a13      	ldr	r2, [pc, #76]	@ (8000f48 <MX_LPUART1_UART_Init+0x5c>)
 8000efa:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8000efc:	4b10      	ldr	r3, [pc, #64]	@ (8000f40 <MX_LPUART1_UART_Init+0x54>)
 8000efe:	2280      	movs	r2, #128	@ 0x80
 8000f00:	0552      	lsls	r2, r2, #21
 8000f02:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000f04:	4b0e      	ldr	r3, [pc, #56]	@ (8000f40 <MX_LPUART1_UART_Init+0x54>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000f0a:	4b0d      	ldr	r3, [pc, #52]	@ (8000f40 <MX_LPUART1_UART_Init+0x54>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000f10:	4b0b      	ldr	r3, [pc, #44]	@ (8000f40 <MX_LPUART1_UART_Init+0x54>)
 8000f12:	220c      	movs	r2, #12
 8000f14:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f16:	4b0a      	ldr	r3, [pc, #40]	@ (8000f40 <MX_LPUART1_UART_Init+0x54>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f1c:	4b08      	ldr	r3, [pc, #32]	@ (8000f40 <MX_LPUART1_UART_Init+0x54>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f22:	4b07      	ldr	r3, [pc, #28]	@ (8000f40 <MX_LPUART1_UART_Init+0x54>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000f28:	4b05      	ldr	r3, [pc, #20]	@ (8000f40 <MX_LPUART1_UART_Init+0x54>)
 8000f2a:	0018      	movs	r0, r3
 8000f2c:	f004 fb2c 	bl	8005588 <HAL_UART_Init>
 8000f30:	1e03      	subs	r3, r0, #0
 8000f32:	d001      	beq.n	8000f38 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000f34:	f000 fa56 	bl	80013e4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000f38:	46c0      	nop			@ (mov r8, r8)
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	46c0      	nop			@ (mov r8, r8)
 8000f40:	20000654 	.word	0x20000654
 8000f44:	40004800 	.word	0x40004800
 8000f48:	00033324 	.word	0x00033324

08000f4c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f50:	4b14      	ldr	r3, [pc, #80]	@ (8000fa4 <MX_USART2_UART_Init+0x58>)
 8000f52:	4a15      	ldr	r2, [pc, #84]	@ (8000fa8 <MX_USART2_UART_Init+0x5c>)
 8000f54:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f56:	4b13      	ldr	r3, [pc, #76]	@ (8000fa4 <MX_USART2_UART_Init+0x58>)
 8000f58:	22e1      	movs	r2, #225	@ 0xe1
 8000f5a:	0252      	lsls	r2, r2, #9
 8000f5c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f5e:	4b11      	ldr	r3, [pc, #68]	@ (8000fa4 <MX_USART2_UART_Init+0x58>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f64:	4b0f      	ldr	r3, [pc, #60]	@ (8000fa4 <MX_USART2_UART_Init+0x58>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000fa4 <MX_USART2_UART_Init+0x58>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f70:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa4 <MX_USART2_UART_Init+0x58>)
 8000f72:	220c      	movs	r2, #12
 8000f74:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f76:	4b0b      	ldr	r3, [pc, #44]	@ (8000fa4 <MX_USART2_UART_Init+0x58>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f7c:	4b09      	ldr	r3, [pc, #36]	@ (8000fa4 <MX_USART2_UART_Init+0x58>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f82:	4b08      	ldr	r3, [pc, #32]	@ (8000fa4 <MX_USART2_UART_Init+0x58>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f88:	4b06      	ldr	r3, [pc, #24]	@ (8000fa4 <MX_USART2_UART_Init+0x58>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f8e:	4b05      	ldr	r3, [pc, #20]	@ (8000fa4 <MX_USART2_UART_Init+0x58>)
 8000f90:	0018      	movs	r0, r3
 8000f92:	f004 faf9 	bl	8005588 <HAL_UART_Init>
 8000f96:	1e03      	subs	r3, r0, #0
 8000f98:	d001      	beq.n	8000f9e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000f9a:	f000 fa23 	bl	80013e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f9e:	46c0      	nop			@ (mov r8, r8)
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	200006dc 	.word	0x200006dc
 8000fa8:	40004400 	.word	0x40004400

08000fac <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000fb0:	4b11      	ldr	r3, [pc, #68]	@ (8000ff8 <MX_RTC_Init+0x4c>)
 8000fb2:	4a12      	ldr	r2, [pc, #72]	@ (8000ffc <MX_RTC_Init+0x50>)
 8000fb4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000fb6:	4b10      	ldr	r3, [pc, #64]	@ (8000ff8 <MX_RTC_Init+0x4c>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000fbc:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff8 <MX_RTC_Init+0x4c>)
 8000fbe:	227f      	movs	r2, #127	@ 0x7f
 8000fc0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000fc2:	4b0d      	ldr	r3, [pc, #52]	@ (8000ff8 <MX_RTC_Init+0x4c>)
 8000fc4:	22ff      	movs	r2, #255	@ 0xff
 8000fc6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000fc8:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff8 <MX_RTC_Init+0x4c>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000fce:	4b0a      	ldr	r3, [pc, #40]	@ (8000ff8 <MX_RTC_Init+0x4c>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000fd4:	4b08      	ldr	r3, [pc, #32]	@ (8000ff8 <MX_RTC_Init+0x4c>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000fda:	4b07      	ldr	r3, [pc, #28]	@ (8000ff8 <MX_RTC_Init+0x4c>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000fe0:	4b05      	ldr	r3, [pc, #20]	@ (8000ff8 <MX_RTC_Init+0x4c>)
 8000fe2:	0018      	movs	r0, r3
 8000fe4:	f003 f876 	bl	80040d4 <HAL_RTC_Init>
 8000fe8:	1e03      	subs	r3, r0, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000fec:	f000 f9fa 	bl	80013e4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000ff0:	46c0      	nop			@ (mov r8, r8)
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	46c0      	nop			@ (mov r8, r8)
 8000ff8:	20000764 	.word	0x20000764
 8000ffc:	40002800 	.word	0x40002800

08001000 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b08a      	sub	sp, #40	@ 0x28
 8001004:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001006:	2318      	movs	r3, #24
 8001008:	18fb      	adds	r3, r7, r3
 800100a:	0018      	movs	r0, r3
 800100c:	2310      	movs	r3, #16
 800100e:	001a      	movs	r2, r3
 8001010:	2100      	movs	r1, #0
 8001012:	f004 ff81 	bl	8005f18 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001016:	2310      	movs	r3, #16
 8001018:	18fb      	adds	r3, r7, r3
 800101a:	0018      	movs	r0, r3
 800101c:	2308      	movs	r3, #8
 800101e:	001a      	movs	r2, r3
 8001020:	2100      	movs	r1, #0
 8001022:	f004 ff79 	bl	8005f18 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001026:	003b      	movs	r3, r7
 8001028:	0018      	movs	r0, r3
 800102a:	2310      	movs	r3, #16
 800102c:	001a      	movs	r2, r3
 800102e:	2100      	movs	r1, #0
 8001030:	f004 ff72 	bl	8005f18 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001034:	4b3d      	ldr	r3, [pc, #244]	@ (800112c <MX_TIM2_Init+0x12c>)
 8001036:	2280      	movs	r2, #128	@ 0x80
 8001038:	05d2      	lsls	r2, r2, #23
 800103a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3200-1;
 800103c:	4b3b      	ldr	r3, [pc, #236]	@ (800112c <MX_TIM2_Init+0x12c>)
 800103e:	4a3c      	ldr	r2, [pc, #240]	@ (8001130 <MX_TIM2_Init+0x130>)
 8001040:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001042:	4b3a      	ldr	r3, [pc, #232]	@ (800112c <MX_TIM2_Init+0x12c>)
 8001044:	2200      	movs	r2, #0
 8001046:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8001048:	4b38      	ldr	r3, [pc, #224]	@ (800112c <MX_TIM2_Init+0x12c>)
 800104a:	2263      	movs	r2, #99	@ 0x63
 800104c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800104e:	4b37      	ldr	r3, [pc, #220]	@ (800112c <MX_TIM2_Init+0x12c>)
 8001050:	2200      	movs	r2, #0
 8001052:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001054:	4b35      	ldr	r3, [pc, #212]	@ (800112c <MX_TIM2_Init+0x12c>)
 8001056:	2200      	movs	r2, #0
 8001058:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800105a:	4b34      	ldr	r3, [pc, #208]	@ (800112c <MX_TIM2_Init+0x12c>)
 800105c:	0018      	movs	r0, r3
 800105e:	f003 f96b 	bl	8004338 <HAL_TIM_Base_Init>
 8001062:	1e03      	subs	r3, r0, #0
 8001064:	d001      	beq.n	800106a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001066:	f000 f9bd 	bl	80013e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800106a:	2118      	movs	r1, #24
 800106c:	187b      	adds	r3, r7, r1
 800106e:	2280      	movs	r2, #128	@ 0x80
 8001070:	0152      	lsls	r2, r2, #5
 8001072:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001074:	187a      	adds	r2, r7, r1
 8001076:	4b2d      	ldr	r3, [pc, #180]	@ (800112c <MX_TIM2_Init+0x12c>)
 8001078:	0011      	movs	r1, r2
 800107a:	0018      	movs	r0, r3
 800107c:	f003 fe3a 	bl	8004cf4 <HAL_TIM_ConfigClockSource>
 8001080:	1e03      	subs	r3, r0, #0
 8001082:	d001      	beq.n	8001088 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8001084:	f000 f9ae 	bl	80013e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001088:	4b28      	ldr	r3, [pc, #160]	@ (800112c <MX_TIM2_Init+0x12c>)
 800108a:	0018      	movs	r0, r3
 800108c:	f003 f9e0 	bl	8004450 <HAL_TIM_PWM_Init>
 8001090:	1e03      	subs	r3, r0, #0
 8001092:	d001      	beq.n	8001098 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001094:	f000 f9a6 	bl	80013e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001098:	2110      	movs	r1, #16
 800109a:	187b      	adds	r3, r7, r1
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010a0:	187b      	adds	r3, r7, r1
 80010a2:	2200      	movs	r2, #0
 80010a4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010a6:	187a      	adds	r2, r7, r1
 80010a8:	4b20      	ldr	r3, [pc, #128]	@ (800112c <MX_TIM2_Init+0x12c>)
 80010aa:	0011      	movs	r1, r2
 80010ac:	0018      	movs	r0, r3
 80010ae:	f004 fa13 	bl	80054d8 <HAL_TIMEx_MasterConfigSynchronization>
 80010b2:	1e03      	subs	r3, r0, #0
 80010b4:	d001      	beq.n	80010ba <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 80010b6:	f000 f995 	bl	80013e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010ba:	003b      	movs	r3, r7
 80010bc:	2260      	movs	r2, #96	@ 0x60
 80010be:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80010c0:	003b      	movs	r3, r7
 80010c2:	2200      	movs	r2, #0
 80010c4:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010c6:	003b      	movs	r3, r7
 80010c8:	2200      	movs	r2, #0
 80010ca:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010cc:	003b      	movs	r3, r7
 80010ce:	2200      	movs	r2, #0
 80010d0:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010d2:	0039      	movs	r1, r7
 80010d4:	4b15      	ldr	r3, [pc, #84]	@ (800112c <MX_TIM2_Init+0x12c>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	0018      	movs	r0, r3
 80010da:	f003 fd45 	bl	8004b68 <HAL_TIM_PWM_ConfigChannel>
 80010de:	1e03      	subs	r3, r0, #0
 80010e0:	d001      	beq.n	80010e6 <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 80010e2:	f000 f97f 	bl	80013e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010e6:	0039      	movs	r1, r7
 80010e8:	4b10      	ldr	r3, [pc, #64]	@ (800112c <MX_TIM2_Init+0x12c>)
 80010ea:	2204      	movs	r2, #4
 80010ec:	0018      	movs	r0, r3
 80010ee:	f003 fd3b 	bl	8004b68 <HAL_TIM_PWM_ConfigChannel>
 80010f2:	1e03      	subs	r3, r0, #0
 80010f4:	d001      	beq.n	80010fa <MX_TIM2_Init+0xfa>
  {
    Error_Handler();
 80010f6:	f000 f975 	bl	80013e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80010fa:	0039      	movs	r1, r7
 80010fc:	4b0b      	ldr	r3, [pc, #44]	@ (800112c <MX_TIM2_Init+0x12c>)
 80010fe:	2208      	movs	r2, #8
 8001100:	0018      	movs	r0, r3
 8001102:	f003 fd31 	bl	8004b68 <HAL_TIM_PWM_ConfigChannel>
 8001106:	1e03      	subs	r3, r0, #0
 8001108:	d001      	beq.n	800110e <MX_TIM2_Init+0x10e>
  {
    Error_Handler();
 800110a:	f000 f96b 	bl	80013e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800110e:	0039      	movs	r1, r7
 8001110:	4b06      	ldr	r3, [pc, #24]	@ (800112c <MX_TIM2_Init+0x12c>)
 8001112:	220c      	movs	r2, #12
 8001114:	0018      	movs	r0, r3
 8001116:	f003 fd27 	bl	8004b68 <HAL_TIM_PWM_ConfigChannel>
 800111a:	1e03      	subs	r3, r0, #0
 800111c:	d001      	beq.n	8001122 <MX_TIM2_Init+0x122>
  {
    Error_Handler();
 800111e:	f000 f961 	bl	80013e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001122:	46c0      	nop			@ (mov r8, r8)
 8001124:	46bd      	mov	sp, r7
 8001126:	b00a      	add	sp, #40	@ 0x28
 8001128:	bd80      	pop	{r7, pc}
 800112a:	46c0      	nop			@ (mov r8, r8)
 800112c:	20000788 	.word	0x20000788
 8001130:	00000c7f 	.word	0x00000c7f

08001134 <MX_TIM21_Init>:
  * @brief TIM21 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM21_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b086      	sub	sp, #24
 8001138:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800113a:	2308      	movs	r3, #8
 800113c:	18fb      	adds	r3, r7, r3
 800113e:	0018      	movs	r0, r3
 8001140:	2310      	movs	r3, #16
 8001142:	001a      	movs	r2, r3
 8001144:	2100      	movs	r1, #0
 8001146:	f004 fee7 	bl	8005f18 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800114a:	003b      	movs	r3, r7
 800114c:	0018      	movs	r0, r3
 800114e:	2308      	movs	r3, #8
 8001150:	001a      	movs	r2, r3
 8001152:	2100      	movs	r1, #0
 8001154:	f004 fee0 	bl	8005f18 <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 8001158:	4b1e      	ldr	r3, [pc, #120]	@ (80011d4 <MX_TIM21_Init+0xa0>)
 800115a:	4a1f      	ldr	r2, [pc, #124]	@ (80011d8 <MX_TIM21_Init+0xa4>)
 800115c:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 32000-1;
 800115e:	4b1d      	ldr	r3, [pc, #116]	@ (80011d4 <MX_TIM21_Init+0xa0>)
 8001160:	4a1e      	ldr	r2, [pc, #120]	@ (80011dc <MX_TIM21_Init+0xa8>)
 8001162:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001164:	4b1b      	ldr	r3, [pc, #108]	@ (80011d4 <MX_TIM21_Init+0xa0>)
 8001166:	2200      	movs	r2, #0
 8001168:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 50-1;
 800116a:	4b1a      	ldr	r3, [pc, #104]	@ (80011d4 <MX_TIM21_Init+0xa0>)
 800116c:	2231      	movs	r2, #49	@ 0x31
 800116e:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001170:	4b18      	ldr	r3, [pc, #96]	@ (80011d4 <MX_TIM21_Init+0xa0>)
 8001172:	2200      	movs	r2, #0
 8001174:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001176:	4b17      	ldr	r3, [pc, #92]	@ (80011d4 <MX_TIM21_Init+0xa0>)
 8001178:	2200      	movs	r2, #0
 800117a:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 800117c:	4b15      	ldr	r3, [pc, #84]	@ (80011d4 <MX_TIM21_Init+0xa0>)
 800117e:	0018      	movs	r0, r3
 8001180:	f003 f8da 	bl	8004338 <HAL_TIM_Base_Init>
 8001184:	1e03      	subs	r3, r0, #0
 8001186:	d001      	beq.n	800118c <MX_TIM21_Init+0x58>
  {
    Error_Handler();
 8001188:	f000 f92c 	bl	80013e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800118c:	2108      	movs	r1, #8
 800118e:	187b      	adds	r3, r7, r1
 8001190:	2280      	movs	r2, #128	@ 0x80
 8001192:	0152      	lsls	r2, r2, #5
 8001194:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 8001196:	187a      	adds	r2, r7, r1
 8001198:	4b0e      	ldr	r3, [pc, #56]	@ (80011d4 <MX_TIM21_Init+0xa0>)
 800119a:	0011      	movs	r1, r2
 800119c:	0018      	movs	r0, r3
 800119e:	f003 fda9 	bl	8004cf4 <HAL_TIM_ConfigClockSource>
 80011a2:	1e03      	subs	r3, r0, #0
 80011a4:	d001      	beq.n	80011aa <MX_TIM21_Init+0x76>
  {
    Error_Handler();
 80011a6:	f000 f91d 	bl	80013e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011aa:	003b      	movs	r3, r7
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011b0:	003b      	movs	r3, r7
 80011b2:	2200      	movs	r2, #0
 80011b4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 80011b6:	003a      	movs	r2, r7
 80011b8:	4b06      	ldr	r3, [pc, #24]	@ (80011d4 <MX_TIM21_Init+0xa0>)
 80011ba:	0011      	movs	r1, r2
 80011bc:	0018      	movs	r0, r3
 80011be:	f004 f98b 	bl	80054d8 <HAL_TIMEx_MasterConfigSynchronization>
 80011c2:	1e03      	subs	r3, r0, #0
 80011c4:	d001      	beq.n	80011ca <MX_TIM21_Init+0x96>
  {
    Error_Handler();
 80011c6:	f000 f90d 	bl	80013e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */

}
 80011ca:	46c0      	nop			@ (mov r8, r8)
 80011cc:	46bd      	mov	sp, r7
 80011ce:	b006      	add	sp, #24
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	46c0      	nop			@ (mov r8, r8)
 80011d4:	200007c8 	.word	0x200007c8
 80011d8:	40010800 	.word	0x40010800
 80011dc:	00007cff 	.word	0x00007cff

080011e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011e6:	4b14      	ldr	r3, [pc, #80]	@ (8001238 <MX_DMA_Init+0x58>)
 80011e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80011ea:	4b13      	ldr	r3, [pc, #76]	@ (8001238 <MX_DMA_Init+0x58>)
 80011ec:	2101      	movs	r1, #1
 80011ee:	430a      	orrs	r2, r1
 80011f0:	631a      	str	r2, [r3, #48]	@ 0x30
 80011f2:	4b11      	ldr	r3, [pc, #68]	@ (8001238 <MX_DMA_Init+0x58>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f6:	2201      	movs	r2, #1
 80011f8:	4013      	ands	r3, r2
 80011fa:	607b      	str	r3, [r7, #4]
 80011fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 80011fe:	2200      	movs	r2, #0
 8001200:	2101      	movs	r1, #1
 8001202:	2009      	movs	r0, #9
 8001204:	f000 ff1a 	bl	800203c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001208:	2009      	movs	r0, #9
 800120a:	f000 ff2c 	bl	8002066 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 1, 0);
 800120e:	2200      	movs	r2, #0
 8001210:	2101      	movs	r1, #1
 8001212:	200a      	movs	r0, #10
 8001214:	f000 ff12 	bl	800203c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8001218:	200a      	movs	r0, #10
 800121a:	f000 ff24 	bl	8002066 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 1, 0);
 800121e:	2200      	movs	r2, #0
 8001220:	2101      	movs	r1, #1
 8001222:	200b      	movs	r0, #11
 8001224:	f000 ff0a 	bl	800203c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8001228:	200b      	movs	r0, #11
 800122a:	f000 ff1c 	bl	8002066 <HAL_NVIC_EnableIRQ>

}
 800122e:	46c0      	nop			@ (mov r8, r8)
 8001230:	46bd      	mov	sp, r7
 8001232:	b002      	add	sp, #8
 8001234:	bd80      	pop	{r7, pc}
 8001236:	46c0      	nop			@ (mov r8, r8)
 8001238:	40021000 	.word	0x40021000

0800123c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800123c:	b590      	push	{r4, r7, lr}
 800123e:	b089      	sub	sp, #36	@ 0x24
 8001240:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001242:	240c      	movs	r4, #12
 8001244:	193b      	adds	r3, r7, r4
 8001246:	0018      	movs	r0, r3
 8001248:	2314      	movs	r3, #20
 800124a:	001a      	movs	r2, r3
 800124c:	2100      	movs	r1, #0
 800124e:	f004 fe63 	bl	8005f18 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001252:	4b60      	ldr	r3, [pc, #384]	@ (80013d4 <MX_GPIO_Init+0x198>)
 8001254:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001256:	4b5f      	ldr	r3, [pc, #380]	@ (80013d4 <MX_GPIO_Init+0x198>)
 8001258:	2104      	movs	r1, #4
 800125a:	430a      	orrs	r2, r1
 800125c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800125e:	4b5d      	ldr	r3, [pc, #372]	@ (80013d4 <MX_GPIO_Init+0x198>)
 8001260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001262:	2204      	movs	r2, #4
 8001264:	4013      	ands	r3, r2
 8001266:	60bb      	str	r3, [r7, #8]
 8001268:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800126a:	4b5a      	ldr	r3, [pc, #360]	@ (80013d4 <MX_GPIO_Init+0x198>)
 800126c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800126e:	4b59      	ldr	r3, [pc, #356]	@ (80013d4 <MX_GPIO_Init+0x198>)
 8001270:	2101      	movs	r1, #1
 8001272:	430a      	orrs	r2, r1
 8001274:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001276:	4b57      	ldr	r3, [pc, #348]	@ (80013d4 <MX_GPIO_Init+0x198>)
 8001278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800127a:	2201      	movs	r2, #1
 800127c:	4013      	ands	r3, r2
 800127e:	607b      	str	r3, [r7, #4]
 8001280:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001282:	4b54      	ldr	r3, [pc, #336]	@ (80013d4 <MX_GPIO_Init+0x198>)
 8001284:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001286:	4b53      	ldr	r3, [pc, #332]	@ (80013d4 <MX_GPIO_Init+0x198>)
 8001288:	2102      	movs	r1, #2
 800128a:	430a      	orrs	r2, r1
 800128c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800128e:	4b51      	ldr	r3, [pc, #324]	@ (80013d4 <MX_GPIO_Init+0x198>)
 8001290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001292:	2202      	movs	r2, #2
 8001294:	4013      	ands	r3, r2
 8001296:	603b      	str	r3, [r7, #0]
 8001298:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DIMM_LED_1_Pin|DIMM_LED_2_Pin, GPIO_PIN_RESET);
 800129a:	23c0      	movs	r3, #192	@ 0xc0
 800129c:	021b      	lsls	r3, r3, #8
 800129e:	484e      	ldr	r0, [pc, #312]	@ (80013d8 <MX_GPIO_Init+0x19c>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	0019      	movs	r1, r3
 80012a4:	f001 fa41 	bl	800272a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TXS_OE_GPIO_Port, TXS_OE_Pin, GPIO_PIN_SET);
 80012a8:	23a0      	movs	r3, #160	@ 0xa0
 80012aa:	05db      	lsls	r3, r3, #23
 80012ac:	2201      	movs	r2, #1
 80012ae:	2102      	movs	r1, #2
 80012b0:	0018      	movs	r0, r3
 80012b2:	f001 fa3a 	bl	800272a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SHDN_170V_3V3_Pin|INS_EN_3V3_Pin|DIN_3V3_Pin|OE_3V3_Pin, GPIO_PIN_RESET);
 80012b6:	23a0      	movs	r3, #160	@ 0xa0
 80012b8:	05db      	lsls	r3, r3, #23
 80012ba:	2200      	movs	r2, #0
 80012bc:	21f0      	movs	r1, #240	@ 0xf0
 80012be:	0018      	movs	r0, r3
 80012c0:	f001 fa33 	bl	800272a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RCK_3V3_Pin|SCK_3V3_Pin, GPIO_PIN_RESET);
 80012c4:	4b45      	ldr	r3, [pc, #276]	@ (80013dc <MX_GPIO_Init+0x1a0>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	2103      	movs	r1, #3
 80012ca:	0018      	movs	r0, r3
 80012cc:	f001 fa2d 	bl	800272a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIMM_LED_1_Pin DIMM_LED_2_Pin */
  GPIO_InitStruct.Pin = DIMM_LED_1_Pin|DIMM_LED_2_Pin;
 80012d0:	193b      	adds	r3, r7, r4
 80012d2:	22c0      	movs	r2, #192	@ 0xc0
 80012d4:	0212      	lsls	r2, r2, #8
 80012d6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d8:	193b      	adds	r3, r7, r4
 80012da:	2201      	movs	r2, #1
 80012dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	193b      	adds	r3, r7, r4
 80012e0:	2200      	movs	r2, #0
 80012e2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e4:	193b      	adds	r3, r7, r4
 80012e6:	2200      	movs	r2, #0
 80012e8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012ea:	193b      	adds	r3, r7, r4
 80012ec:	4a3a      	ldr	r2, [pc, #232]	@ (80013d8 <MX_GPIO_Init+0x19c>)
 80012ee:	0019      	movs	r1, r3
 80012f0:	0010      	movs	r0, r2
 80012f2:	f001 f88f 	bl	8002414 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_4_Pin INT_SQW_Pin INT_OPT_Pin JDY_STAT_Pin
                           JDY_PWRC_Pin */
  GPIO_InitStruct.Pin = BTN_4_Pin|INT_SQW_Pin|INT_OPT_Pin|JDY_STAT_Pin
 80012f6:	193b      	adds	r3, r7, r4
 80012f8:	4a39      	ldr	r2, [pc, #228]	@ (80013e0 <MX_GPIO_Init+0x1a4>)
 80012fa:	601a      	str	r2, [r3, #0]
                          |JDY_PWRC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012fc:	193b      	adds	r3, r7, r4
 80012fe:	2200      	movs	r2, #0
 8001300:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	193b      	adds	r3, r7, r4
 8001304:	2200      	movs	r2, #0
 8001306:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001308:	193a      	adds	r2, r7, r4
 800130a:	23a0      	movs	r3, #160	@ 0xa0
 800130c:	05db      	lsls	r3, r3, #23
 800130e:	0011      	movs	r1, r2
 8001310:	0018      	movs	r0, r3
 8001312:	f001 f87f 	bl	8002414 <HAL_GPIO_Init>

  /*Configure GPIO pin : TXS_OE_Pin */
  GPIO_InitStruct.Pin = TXS_OE_Pin;
 8001316:	193b      	adds	r3, r7, r4
 8001318:	2202      	movs	r2, #2
 800131a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800131c:	193b      	adds	r3, r7, r4
 800131e:	2201      	movs	r2, #1
 8001320:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001322:	193b      	adds	r3, r7, r4
 8001324:	2201      	movs	r2, #1
 8001326:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001328:	193b      	adds	r3, r7, r4
 800132a:	2200      	movs	r2, #0
 800132c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(TXS_OE_GPIO_Port, &GPIO_InitStruct);
 800132e:	193a      	adds	r2, r7, r4
 8001330:	23a0      	movs	r3, #160	@ 0xa0
 8001332:	05db      	lsls	r3, r3, #23
 8001334:	0011      	movs	r1, r2
 8001336:	0018      	movs	r0, r3
 8001338:	f001 f86c 	bl	8002414 <HAL_GPIO_Init>

  /*Configure GPIO pin : SHDN_170V_3V3_Pin */
  GPIO_InitStruct.Pin = SHDN_170V_3V3_Pin;
 800133c:	193b      	adds	r3, r7, r4
 800133e:	2210      	movs	r2, #16
 8001340:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001342:	193b      	adds	r3, r7, r4
 8001344:	2201      	movs	r2, #1
 8001346:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001348:	193b      	adds	r3, r7, r4
 800134a:	2202      	movs	r2, #2
 800134c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134e:	193b      	adds	r3, r7, r4
 8001350:	2200      	movs	r2, #0
 8001352:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SHDN_170V_3V3_GPIO_Port, &GPIO_InitStruct);
 8001354:	193a      	adds	r2, r7, r4
 8001356:	23a0      	movs	r3, #160	@ 0xa0
 8001358:	05db      	lsls	r3, r3, #23
 800135a:	0011      	movs	r1, r2
 800135c:	0018      	movs	r0, r3
 800135e:	f001 f859 	bl	8002414 <HAL_GPIO_Init>

  /*Configure GPIO pins : INS_EN_3V3_Pin DIN_3V3_Pin OE_3V3_Pin */
  GPIO_InitStruct.Pin = INS_EN_3V3_Pin|DIN_3V3_Pin|OE_3V3_Pin;
 8001362:	193b      	adds	r3, r7, r4
 8001364:	22e0      	movs	r2, #224	@ 0xe0
 8001366:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001368:	193b      	adds	r3, r7, r4
 800136a:	2201      	movs	r2, #1
 800136c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136e:	193b      	adds	r3, r7, r4
 8001370:	2200      	movs	r2, #0
 8001372:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001374:	193b      	adds	r3, r7, r4
 8001376:	2203      	movs	r2, #3
 8001378:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137a:	193a      	adds	r2, r7, r4
 800137c:	23a0      	movs	r3, #160	@ 0xa0
 800137e:	05db      	lsls	r3, r3, #23
 8001380:	0011      	movs	r1, r2
 8001382:	0018      	movs	r0, r3
 8001384:	f001 f846 	bl	8002414 <HAL_GPIO_Init>

  /*Configure GPIO pins : RCK_3V3_Pin SCK_3V3_Pin */
  GPIO_InitStruct.Pin = RCK_3V3_Pin|SCK_3V3_Pin;
 8001388:	193b      	adds	r3, r7, r4
 800138a:	2203      	movs	r2, #3
 800138c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138e:	193b      	adds	r3, r7, r4
 8001390:	2201      	movs	r2, #1
 8001392:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	193b      	adds	r3, r7, r4
 8001396:	2200      	movs	r2, #0
 8001398:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800139a:	193b      	adds	r3, r7, r4
 800139c:	2203      	movs	r2, #3
 800139e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a0:	193b      	adds	r3, r7, r4
 80013a2:	4a0e      	ldr	r2, [pc, #56]	@ (80013dc <MX_GPIO_Init+0x1a0>)
 80013a4:	0019      	movs	r1, r3
 80013a6:	0010      	movs	r0, r2
 80013a8:	f001 f834 	bl	8002414 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_3_Pin BTN_2_Pin BTN_1_Pin */
  GPIO_InitStruct.Pin = BTN_3_Pin|BTN_2_Pin|BTN_1_Pin;
 80013ac:	0021      	movs	r1, r4
 80013ae:	187b      	adds	r3, r7, r1
 80013b0:	2238      	movs	r2, #56	@ 0x38
 80013b2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013b4:	187b      	adds	r3, r7, r1
 80013b6:	2200      	movs	r2, #0
 80013b8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ba:	187b      	adds	r3, r7, r1
 80013bc:	2200      	movs	r2, #0
 80013be:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013c0:	187b      	adds	r3, r7, r1
 80013c2:	4a06      	ldr	r2, [pc, #24]	@ (80013dc <MX_GPIO_Init+0x1a0>)
 80013c4:	0019      	movs	r1, r3
 80013c6:	0010      	movs	r0, r2
 80013c8:	f001 f824 	bl	8002414 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013cc:	46c0      	nop			@ (mov r8, r8)
 80013ce:	46bd      	mov	sp, r7
 80013d0:	b009      	add	sp, #36	@ 0x24
 80013d2:	bd90      	pop	{r4, r7, pc}
 80013d4:	40021000 	.word	0x40021000
 80013d8:	50000800 	.word	0x50000800
 80013dc:	50000400 	.word	0x50000400
 80013e0:	00009901 	.word	0x00009901

080013e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013e8:	b672      	cpsid	i
}
 80013ea:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013ec:	46c0      	nop			@ (mov r8, r8)
 80013ee:	e7fd      	b.n	80013ec <Error_Handler+0x8>

080013f0 <init_items_hierarchy_horizontal>:
//	} else {
//		item_goto(PREVIOUS);
//	}
}

static inline void init_items_hierarchy_horizontal(uint16_t num_of_menus) {
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	0002      	movs	r2, r0
 80013f8:	1dbb      	adds	r3, r7, #6
 80013fa:	801a      	strh	r2, [r3, #0]
	ItemType current 	= 1;
 80013fc:	230f      	movs	r3, #15
 80013fe:	18fb      	adds	r3, r7, r3
 8001400:	2201      	movs	r2, #1
 8001402:	701a      	strb	r2, [r3, #0]
	ItemType first_item = 0;
 8001404:	230e      	movs	r3, #14
 8001406:	18fb      	adds	r3, r7, r3
 8001408:	2200      	movs	r2, #0
 800140a:	701a      	strb	r2, [r3, #0]
//		for(ItemType prev = 1; prev < num_of_items; ++prev) {
//			if(item_next[prev] == current)
//				item_prev[current] = prev;
//		}
//	}
}
 800140c:	46c0      	nop			@ (mov r8, r8)
 800140e:	46bd      	mov	sp, r7
 8001410:	b004      	add	sp, #16
 8001412:	bd80      	pop	{r7, pc}

08001414 <init_items_hierarchy_vertical>:

static inline void init_items_hierarchy_vertical(void) {
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
//	item_parent[ITEM_GRID_7] 				= ITEM_MARK_TYPE;
//	item_parent[ITEM_GRID_8] 				= ITEM_MARK_TYPE;
//	item_parent[ITEM_GRID_9] 				= ITEM_MARK_TYPE;
//	item_parent[ITEM_BAD_PIXELS_FIX_AUTO] 	= ITEM_BAD_PIXELS_FIX_ENTER;
//	item_parent[ITEM_SETTINGS_EXIT] 		= ITEM_SETTINGS_ENTER;
}
 8001418:	46c0      	nop			@ (mov r8, r8)
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
	...

08001420 <init_menu_items>:

void init_menu_items(Menu_HandleTypeDef* user_hmenu, Item_TypeDef* user_items, uint16_t number_of_items) {
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	60b9      	str	r1, [r7, #8]
 800142a:	1dbb      	adds	r3, r7, #6
 800142c:	801a      	strh	r2, [r3, #0]
	assert_param(user_hmenu == NULL);
	assert_param(user_items == NULL);

	menu 				= user_hmenu;
 800142e:	4b08      	ldr	r3, [pc, #32]	@ (8001450 <init_menu_items+0x30>)
 8001430:	68fa      	ldr	r2, [r7, #12]
 8001432:	601a      	str	r2, [r3, #0]
	menu->items 		= user_items;
 8001434:	4b06      	ldr	r3, [pc, #24]	@ (8001450 <init_menu_items+0x30>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	68ba      	ldr	r2, [r7, #8]
 800143a:	601a      	str	r2, [r3, #0]
//	num_of_items		= number_of_items;

//	menu->current_item 	= user_hmenu->items[FW_VERSION]; // Show FW version and compile date on start

	init_items_hierarchy_vertical	();
 800143c:	f7ff ffea 	bl	8001414 <init_items_hierarchy_vertical>
	init_items_hierarchy_horizontal	(NUM_OF_MENUS);
 8001440:	2003      	movs	r0, #3
 8001442:	f7ff ffd5 	bl	80013f0 <init_items_hierarchy_horizontal>
}
 8001446:	46c0      	nop			@ (mov r8, r8)
 8001448:	46bd      	mov	sp, r7
 800144a:	b004      	add	sp, #16
 800144c:	bd80      	pop	{r7, pc}
 800144e:	46c0      	nop			@ (mov r8, r8)
 8001450:	20000b24 	.word	0x20000b24

08001454 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001458:	4b07      	ldr	r3, [pc, #28]	@ (8001478 <HAL_MspInit+0x24>)
 800145a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800145c:	4b06      	ldr	r3, [pc, #24]	@ (8001478 <HAL_MspInit+0x24>)
 800145e:	2101      	movs	r1, #1
 8001460:	430a      	orrs	r2, r1
 8001462:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001464:	4b04      	ldr	r3, [pc, #16]	@ (8001478 <HAL_MspInit+0x24>)
 8001466:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001468:	4b03      	ldr	r3, [pc, #12]	@ (8001478 <HAL_MspInit+0x24>)
 800146a:	2180      	movs	r1, #128	@ 0x80
 800146c:	0549      	lsls	r1, r1, #21
 800146e:	430a      	orrs	r2, r1
 8001470:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001472:	46c0      	nop			@ (mov r8, r8)
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	40021000 	.word	0x40021000

0800147c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800147c:	b590      	push	{r4, r7, lr}
 800147e:	b089      	sub	sp, #36	@ 0x24
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001484:	240c      	movs	r4, #12
 8001486:	193b      	adds	r3, r7, r4
 8001488:	0018      	movs	r0, r3
 800148a:	2314      	movs	r3, #20
 800148c:	001a      	movs	r2, r3
 800148e:	2100      	movs	r1, #0
 8001490:	f004 fd42 	bl	8005f18 <memset>
  if(hi2c->Instance==I2C1)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a18      	ldr	r2, [pc, #96]	@ (80014fc <HAL_I2C_MspInit+0x80>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d12a      	bne.n	80014f4 <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800149e:	4b18      	ldr	r3, [pc, #96]	@ (8001500 <HAL_I2C_MspInit+0x84>)
 80014a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014a2:	4b17      	ldr	r3, [pc, #92]	@ (8001500 <HAL_I2C_MspInit+0x84>)
 80014a4:	2101      	movs	r1, #1
 80014a6:	430a      	orrs	r2, r1
 80014a8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80014aa:	4b15      	ldr	r3, [pc, #84]	@ (8001500 <HAL_I2C_MspInit+0x84>)
 80014ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014ae:	2201      	movs	r2, #1
 80014b0:	4013      	ands	r3, r2
 80014b2:	60bb      	str	r3, [r7, #8]
 80014b4:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80014b6:	193b      	adds	r3, r7, r4
 80014b8:	22c0      	movs	r2, #192	@ 0xc0
 80014ba:	00d2      	lsls	r2, r2, #3
 80014bc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014be:	0021      	movs	r1, r4
 80014c0:	187b      	adds	r3, r7, r1
 80014c2:	2212      	movs	r2, #18
 80014c4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c6:	187b      	adds	r3, r7, r1
 80014c8:	2200      	movs	r2, #0
 80014ca:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014cc:	187b      	adds	r3, r7, r1
 80014ce:	2203      	movs	r2, #3
 80014d0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80014d2:	187b      	adds	r3, r7, r1
 80014d4:	2201      	movs	r2, #1
 80014d6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d8:	187a      	adds	r2, r7, r1
 80014da:	23a0      	movs	r3, #160	@ 0xa0
 80014dc:	05db      	lsls	r3, r3, #23
 80014de:	0011      	movs	r1, r2
 80014e0:	0018      	movs	r0, r3
 80014e2:	f000 ff97 	bl	8002414 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014e6:	4b06      	ldr	r3, [pc, #24]	@ (8001500 <HAL_I2C_MspInit+0x84>)
 80014e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80014ea:	4b05      	ldr	r3, [pc, #20]	@ (8001500 <HAL_I2C_MspInit+0x84>)
 80014ec:	2180      	movs	r1, #128	@ 0x80
 80014ee:	0389      	lsls	r1, r1, #14
 80014f0:	430a      	orrs	r2, r1
 80014f2:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80014f4:	46c0      	nop			@ (mov r8, r8)
 80014f6:	46bd      	mov	sp, r7
 80014f8:	b009      	add	sp, #36	@ 0x24
 80014fa:	bd90      	pop	{r4, r7, pc}
 80014fc:	40005400 	.word	0x40005400
 8001500:	40021000 	.word	0x40021000

08001504 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001504:	b590      	push	{r4, r7, lr}
 8001506:	b08b      	sub	sp, #44	@ 0x2c
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800150c:	2414      	movs	r4, #20
 800150e:	193b      	adds	r3, r7, r4
 8001510:	0018      	movs	r0, r3
 8001512:	2314      	movs	r3, #20
 8001514:	001a      	movs	r2, r3
 8001516:	2100      	movs	r1, #0
 8001518:	f004 fcfe 	bl	8005f18 <memset>
  if(huart->Instance==LPUART1)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a2f      	ldr	r2, [pc, #188]	@ (80015e0 <HAL_UART_MspInit+0xdc>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d12a      	bne.n	800157c <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001526:	4b2f      	ldr	r3, [pc, #188]	@ (80015e4 <HAL_UART_MspInit+0xe0>)
 8001528:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800152a:	4b2e      	ldr	r3, [pc, #184]	@ (80015e4 <HAL_UART_MspInit+0xe0>)
 800152c:	2180      	movs	r1, #128	@ 0x80
 800152e:	02c9      	lsls	r1, r1, #11
 8001530:	430a      	orrs	r2, r1
 8001532:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001534:	4b2b      	ldr	r3, [pc, #172]	@ (80015e4 <HAL_UART_MspInit+0xe0>)
 8001536:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001538:	4b2a      	ldr	r3, [pc, #168]	@ (80015e4 <HAL_UART_MspInit+0xe0>)
 800153a:	2101      	movs	r1, #1
 800153c:	430a      	orrs	r2, r1
 800153e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001540:	4b28      	ldr	r3, [pc, #160]	@ (80015e4 <HAL_UART_MspInit+0xe0>)
 8001542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001544:	2201      	movs	r2, #1
 8001546:	4013      	ands	r3, r2
 8001548:	613b      	str	r3, [r7, #16]
 800154a:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800154c:	0021      	movs	r1, r4
 800154e:	187b      	adds	r3, r7, r1
 8001550:	220c      	movs	r2, #12
 8001552:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001554:	187b      	adds	r3, r7, r1
 8001556:	2202      	movs	r2, #2
 8001558:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155a:	187b      	adds	r3, r7, r1
 800155c:	2200      	movs	r2, #0
 800155e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001560:	187b      	adds	r3, r7, r1
 8001562:	2203      	movs	r2, #3
 8001564:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8001566:	187b      	adds	r3, r7, r1
 8001568:	2206      	movs	r2, #6
 800156a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156c:	187a      	adds	r2, r7, r1
 800156e:	23a0      	movs	r3, #160	@ 0xa0
 8001570:	05db      	lsls	r3, r3, #23
 8001572:	0011      	movs	r1, r2
 8001574:	0018      	movs	r0, r3
 8001576:	f000 ff4d 	bl	8002414 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800157a:	e02d      	b.n	80015d8 <HAL_UART_MspInit+0xd4>
  else if(huart->Instance==USART2)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a19      	ldr	r2, [pc, #100]	@ (80015e8 <HAL_UART_MspInit+0xe4>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d128      	bne.n	80015d8 <HAL_UART_MspInit+0xd4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001586:	4b17      	ldr	r3, [pc, #92]	@ (80015e4 <HAL_UART_MspInit+0xe0>)
 8001588:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800158a:	4b16      	ldr	r3, [pc, #88]	@ (80015e4 <HAL_UART_MspInit+0xe0>)
 800158c:	2180      	movs	r1, #128	@ 0x80
 800158e:	0289      	lsls	r1, r1, #10
 8001590:	430a      	orrs	r2, r1
 8001592:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001594:	4b13      	ldr	r3, [pc, #76]	@ (80015e4 <HAL_UART_MspInit+0xe0>)
 8001596:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001598:	4b12      	ldr	r3, [pc, #72]	@ (80015e4 <HAL_UART_MspInit+0xe0>)
 800159a:	2102      	movs	r1, #2
 800159c:	430a      	orrs	r2, r1
 800159e:	62da      	str	r2, [r3, #44]	@ 0x2c
 80015a0:	4b10      	ldr	r3, [pc, #64]	@ (80015e4 <HAL_UART_MspInit+0xe0>)
 80015a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015a4:	2202      	movs	r2, #2
 80015a6:	4013      	ands	r3, r2
 80015a8:	60fb      	str	r3, [r7, #12]
 80015aa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015ac:	2114      	movs	r1, #20
 80015ae:	187b      	adds	r3, r7, r1
 80015b0:	22c0      	movs	r2, #192	@ 0xc0
 80015b2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b4:	187b      	adds	r3, r7, r1
 80015b6:	2202      	movs	r2, #2
 80015b8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ba:	187b      	adds	r3, r7, r1
 80015bc:	2200      	movs	r2, #0
 80015be:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c0:	187b      	adds	r3, r7, r1
 80015c2:	2203      	movs	r2, #3
 80015c4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART2;
 80015c6:	187b      	adds	r3, r7, r1
 80015c8:	2200      	movs	r2, #0
 80015ca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015cc:	187b      	adds	r3, r7, r1
 80015ce:	4a07      	ldr	r2, [pc, #28]	@ (80015ec <HAL_UART_MspInit+0xe8>)
 80015d0:	0019      	movs	r1, r3
 80015d2:	0010      	movs	r0, r2
 80015d4:	f000 ff1e 	bl	8002414 <HAL_GPIO_Init>
}
 80015d8:	46c0      	nop			@ (mov r8, r8)
 80015da:	46bd      	mov	sp, r7
 80015dc:	b00b      	add	sp, #44	@ 0x2c
 80015de:	bd90      	pop	{r4, r7, pc}
 80015e0:	40004800 	.word	0x40004800
 80015e4:	40021000 	.word	0x40021000
 80015e8:	40004400 	.word	0x40004400
 80015ec:	50000400 	.word	0x50000400

080015f0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a06      	ldr	r2, [pc, #24]	@ (8001618 <HAL_RTC_MspInit+0x28>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d106      	bne.n	8001610 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001602:	4b06      	ldr	r3, [pc, #24]	@ (800161c <HAL_RTC_MspInit+0x2c>)
 8001604:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001606:	4b05      	ldr	r3, [pc, #20]	@ (800161c <HAL_RTC_MspInit+0x2c>)
 8001608:	2180      	movs	r1, #128	@ 0x80
 800160a:	02c9      	lsls	r1, r1, #11
 800160c:	430a      	orrs	r2, r1
 800160e:	651a      	str	r2, [r3, #80]	@ 0x50
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001610:	46c0      	nop			@ (mov r8, r8)
 8001612:	46bd      	mov	sp, r7
 8001614:	b002      	add	sp, #8
 8001616:	bd80      	pop	{r7, pc}
 8001618:	40002800 	.word	0x40002800
 800161c:	40021000 	.word	0x40021000

08001620 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	2380      	movs	r3, #128	@ 0x80
 800162e:	05db      	lsls	r3, r3, #23
 8001630:	429a      	cmp	r2, r3
 8001632:	d000      	beq.n	8001636 <HAL_TIM_Base_MspInit+0x16>
 8001634:	e0ba      	b.n	80017ac <HAL_TIM_Base_MspInit+0x18c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001636:	4b69      	ldr	r3, [pc, #420]	@ (80017dc <HAL_TIM_Base_MspInit+0x1bc>)
 8001638:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800163a:	4b68      	ldr	r3, [pc, #416]	@ (80017dc <HAL_TIM_Base_MspInit+0x1bc>)
 800163c:	2101      	movs	r1, #1
 800163e:	430a      	orrs	r2, r1
 8001640:	639a      	str	r2, [r3, #56]	@ 0x38

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 8001642:	4b67      	ldr	r3, [pc, #412]	@ (80017e0 <HAL_TIM_Base_MspInit+0x1c0>)
 8001644:	4a67      	ldr	r2, [pc, #412]	@ (80017e4 <HAL_TIM_Base_MspInit+0x1c4>)
 8001646:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_8;
 8001648:	4b65      	ldr	r3, [pc, #404]	@ (80017e0 <HAL_TIM_Base_MspInit+0x1c0>)
 800164a:	2208      	movs	r2, #8
 800164c:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800164e:	4b64      	ldr	r3, [pc, #400]	@ (80017e0 <HAL_TIM_Base_MspInit+0x1c0>)
 8001650:	2210      	movs	r2, #16
 8001652:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001654:	4b62      	ldr	r3, [pc, #392]	@ (80017e0 <HAL_TIM_Base_MspInit+0x1c0>)
 8001656:	2200      	movs	r2, #0
 8001658:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_DISABLE;
 800165a:	4b61      	ldr	r3, [pc, #388]	@ (80017e0 <HAL_TIM_Base_MspInit+0x1c0>)
 800165c:	2200      	movs	r2, #0
 800165e:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001660:	4b5f      	ldr	r3, [pc, #380]	@ (80017e0 <HAL_TIM_Base_MspInit+0x1c0>)
 8001662:	2280      	movs	r2, #128	@ 0x80
 8001664:	0052      	lsls	r2, r2, #1
 8001666:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001668:	4b5d      	ldr	r3, [pc, #372]	@ (80017e0 <HAL_TIM_Base_MspInit+0x1c0>)
 800166a:	2280      	movs	r2, #128	@ 0x80
 800166c:	00d2      	lsls	r2, r2, #3
 800166e:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8001670:	4b5b      	ldr	r3, [pc, #364]	@ (80017e0 <HAL_TIM_Base_MspInit+0x1c0>)
 8001672:	2220      	movs	r2, #32
 8001674:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001676:	4b5a      	ldr	r3, [pc, #360]	@ (80017e0 <HAL_TIM_Base_MspInit+0x1c0>)
 8001678:	2200      	movs	r2, #0
 800167a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 800167c:	4b58      	ldr	r3, [pc, #352]	@ (80017e0 <HAL_TIM_Base_MspInit+0x1c0>)
 800167e:	0018      	movs	r0, r3
 8001680:	f000 fd0e 	bl	80020a0 <HAL_DMA_Init>
 8001684:	1e03      	subs	r3, r0, #0
 8001686:	d001      	beq.n	800168c <HAL_TIM_Base_MspInit+0x6c>
    {
      Error_Handler();
 8001688:	f7ff feac 	bl	80013e4 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	4a54      	ldr	r2, [pc, #336]	@ (80017e0 <HAL_TIM_Base_MspInit+0x1c0>)
 8001690:	621a      	str	r2, [r3, #32]
 8001692:	4b53      	ldr	r3, [pc, #332]	@ (80017e0 <HAL_TIM_Base_MspInit+0x1c0>)
 8001694:	687a      	ldr	r2, [r7, #4]
 8001696:	629a      	str	r2, [r3, #40]	@ 0x28

    /* TIM2_CH2 Init */
    hdma_tim2_ch2.Instance = DMA1_Channel3;
 8001698:	4b53      	ldr	r3, [pc, #332]	@ (80017e8 <HAL_TIM_Base_MspInit+0x1c8>)
 800169a:	4a54      	ldr	r2, [pc, #336]	@ (80017ec <HAL_TIM_Base_MspInit+0x1cc>)
 800169c:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2.Init.Request = DMA_REQUEST_8;
 800169e:	4b52      	ldr	r3, [pc, #328]	@ (80017e8 <HAL_TIM_Base_MspInit+0x1c8>)
 80016a0:	2208      	movs	r2, #8
 80016a2:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016a4:	4b50      	ldr	r3, [pc, #320]	@ (80017e8 <HAL_TIM_Base_MspInit+0x1c8>)
 80016a6:	2210      	movs	r2, #16
 80016a8:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80016aa:	4b4f      	ldr	r3, [pc, #316]	@ (80017e8 <HAL_TIM_Base_MspInit+0x1c8>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80016b0:	4b4d      	ldr	r3, [pc, #308]	@ (80017e8 <HAL_TIM_Base_MspInit+0x1c8>)
 80016b2:	2280      	movs	r2, #128	@ 0x80
 80016b4:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80016b6:	4b4c      	ldr	r3, [pc, #304]	@ (80017e8 <HAL_TIM_Base_MspInit+0x1c8>)
 80016b8:	2280      	movs	r2, #128	@ 0x80
 80016ba:	0052      	lsls	r2, r2, #1
 80016bc:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80016be:	4b4a      	ldr	r3, [pc, #296]	@ (80017e8 <HAL_TIM_Base_MspInit+0x1c8>)
 80016c0:	2280      	movs	r2, #128	@ 0x80
 80016c2:	00d2      	lsls	r2, r2, #3
 80016c4:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2.Init.Mode = DMA_NORMAL;
 80016c6:	4b48      	ldr	r3, [pc, #288]	@ (80017e8 <HAL_TIM_Base_MspInit+0x1c8>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch2.Init.Priority = DMA_PRIORITY_LOW;
 80016cc:	4b46      	ldr	r3, [pc, #280]	@ (80017e8 <HAL_TIM_Base_MspInit+0x1c8>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch2) != HAL_OK)
 80016d2:	4b45      	ldr	r3, [pc, #276]	@ (80017e8 <HAL_TIM_Base_MspInit+0x1c8>)
 80016d4:	0018      	movs	r0, r3
 80016d6:	f000 fce3 	bl	80020a0 <HAL_DMA_Init>
 80016da:	1e03      	subs	r3, r0, #0
 80016dc:	d001      	beq.n	80016e2 <HAL_TIM_Base_MspInit+0xc2>
    {
      Error_Handler();
 80016de:	f7ff fe81 	bl	80013e4 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4a40      	ldr	r2, [pc, #256]	@ (80017e8 <HAL_TIM_Base_MspInit+0x1c8>)
 80016e6:	625a      	str	r2, [r3, #36]	@ 0x24
 80016e8:	4b3f      	ldr	r3, [pc, #252]	@ (80017e8 <HAL_TIM_Base_MspInit+0x1c8>)
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	629a      	str	r2, [r3, #40]	@ 0x28

    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Channel1;
 80016ee:	4b40      	ldr	r3, [pc, #256]	@ (80017f0 <HAL_TIM_Base_MspInit+0x1d0>)
 80016f0:	4a40      	ldr	r2, [pc, #256]	@ (80017f4 <HAL_TIM_Base_MspInit+0x1d4>)
 80016f2:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_8;
 80016f4:	4b3e      	ldr	r3, [pc, #248]	@ (80017f0 <HAL_TIM_Base_MspInit+0x1d0>)
 80016f6:	2208      	movs	r2, #8
 80016f8:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016fa:	4b3d      	ldr	r3, [pc, #244]	@ (80017f0 <HAL_TIM_Base_MspInit+0x1d0>)
 80016fc:	2210      	movs	r2, #16
 80016fe:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001700:	4b3b      	ldr	r3, [pc, #236]	@ (80017f0 <HAL_TIM_Base_MspInit+0x1d0>)
 8001702:	2200      	movs	r2, #0
 8001704:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8001706:	4b3a      	ldr	r3, [pc, #232]	@ (80017f0 <HAL_TIM_Base_MspInit+0x1d0>)
 8001708:	2280      	movs	r2, #128	@ 0x80
 800170a:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800170c:	4b38      	ldr	r3, [pc, #224]	@ (80017f0 <HAL_TIM_Base_MspInit+0x1d0>)
 800170e:	2280      	movs	r2, #128	@ 0x80
 8001710:	0052      	lsls	r2, r2, #1
 8001712:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001714:	4b36      	ldr	r3, [pc, #216]	@ (80017f0 <HAL_TIM_Base_MspInit+0x1d0>)
 8001716:	2280      	movs	r2, #128	@ 0x80
 8001718:	00d2      	lsls	r2, r2, #3
 800171a:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 800171c:	4b34      	ldr	r3, [pc, #208]	@ (80017f0 <HAL_TIM_Base_MspInit+0x1d0>)
 800171e:	2200      	movs	r2, #0
 8001720:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8001722:	4b33      	ldr	r3, [pc, #204]	@ (80017f0 <HAL_TIM_Base_MspInit+0x1d0>)
 8001724:	2200      	movs	r2, #0
 8001726:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 8001728:	4b31      	ldr	r3, [pc, #196]	@ (80017f0 <HAL_TIM_Base_MspInit+0x1d0>)
 800172a:	0018      	movs	r0, r3
 800172c:	f000 fcb8 	bl	80020a0 <HAL_DMA_Init>
 8001730:	1e03      	subs	r3, r0, #0
 8001732:	d001      	beq.n	8001738 <HAL_TIM_Base_MspInit+0x118>
    {
      Error_Handler();
 8001734:	f7ff fe56 	bl	80013e4 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	4a2d      	ldr	r2, [pc, #180]	@ (80017f0 <HAL_TIM_Base_MspInit+0x1d0>)
 800173c:	629a      	str	r2, [r3, #40]	@ 0x28
 800173e:	4b2c      	ldr	r3, [pc, #176]	@ (80017f0 <HAL_TIM_Base_MspInit+0x1d0>)
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	629a      	str	r2, [r3, #40]	@ 0x28

    /* TIM2_CH4 Init */
    hdma_tim2_ch4.Instance = DMA1_Channel4;
 8001744:	4b2c      	ldr	r3, [pc, #176]	@ (80017f8 <HAL_TIM_Base_MspInit+0x1d8>)
 8001746:	4a2d      	ldr	r2, [pc, #180]	@ (80017fc <HAL_TIM_Base_MspInit+0x1dc>)
 8001748:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch4.Init.Request = DMA_REQUEST_8;
 800174a:	4b2b      	ldr	r3, [pc, #172]	@ (80017f8 <HAL_TIM_Base_MspInit+0x1d8>)
 800174c:	2208      	movs	r2, #8
 800174e:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001750:	4b29      	ldr	r3, [pc, #164]	@ (80017f8 <HAL_TIM_Base_MspInit+0x1d8>)
 8001752:	2210      	movs	r2, #16
 8001754:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8001756:	4b28      	ldr	r3, [pc, #160]	@ (80017f8 <HAL_TIM_Base_MspInit+0x1d8>)
 8001758:	2200      	movs	r2, #0
 800175a:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 800175c:	4b26      	ldr	r3, [pc, #152]	@ (80017f8 <HAL_TIM_Base_MspInit+0x1d8>)
 800175e:	2280      	movs	r2, #128	@ 0x80
 8001760:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001762:	4b25      	ldr	r3, [pc, #148]	@ (80017f8 <HAL_TIM_Base_MspInit+0x1d8>)
 8001764:	2280      	movs	r2, #128	@ 0x80
 8001766:	0052      	lsls	r2, r2, #1
 8001768:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800176a:	4b23      	ldr	r3, [pc, #140]	@ (80017f8 <HAL_TIM_Base_MspInit+0x1d8>)
 800176c:	2280      	movs	r2, #128	@ 0x80
 800176e:	00d2      	lsls	r2, r2, #3
 8001770:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch4.Init.Mode = DMA_NORMAL;
 8001772:	4b21      	ldr	r3, [pc, #132]	@ (80017f8 <HAL_TIM_Base_MspInit+0x1d8>)
 8001774:	2200      	movs	r2, #0
 8001776:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8001778:	4b1f      	ldr	r3, [pc, #124]	@ (80017f8 <HAL_TIM_Base_MspInit+0x1d8>)
 800177a:	2200      	movs	r2, #0
 800177c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch4) != HAL_OK)
 800177e:	4b1e      	ldr	r3, [pc, #120]	@ (80017f8 <HAL_TIM_Base_MspInit+0x1d8>)
 8001780:	0018      	movs	r0, r3
 8001782:	f000 fc8d 	bl	80020a0 <HAL_DMA_Init>
 8001786:	1e03      	subs	r3, r0, #0
 8001788:	d001      	beq.n	800178e <HAL_TIM_Base_MspInit+0x16e>
    {
      Error_Handler();
 800178a:	f7ff fe2b 	bl	80013e4 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch4);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a19      	ldr	r2, [pc, #100]	@ (80017f8 <HAL_TIM_Base_MspInit+0x1d8>)
 8001792:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001794:	4b18      	ldr	r3, [pc, #96]	@ (80017f8 <HAL_TIM_Base_MspInit+0x1d8>)
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	629a      	str	r2, [r3, #40]	@ 0x28

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800179a:	2200      	movs	r2, #0
 800179c:	2100      	movs	r1, #0
 800179e:	200f      	movs	r0, #15
 80017a0:	f000 fc4c 	bl	800203c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80017a4:	200f      	movs	r0, #15
 80017a6:	f000 fc5e 	bl	8002066 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM21_MspInit 1 */

  /* USER CODE END TIM21_MspInit 1 */
  }

}
 80017aa:	e012      	b.n	80017d2 <HAL_TIM_Base_MspInit+0x1b2>
  else if(htim_base->Instance==TIM21)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a13      	ldr	r2, [pc, #76]	@ (8001800 <HAL_TIM_Base_MspInit+0x1e0>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d10d      	bne.n	80017d2 <HAL_TIM_Base_MspInit+0x1b2>
    __HAL_RCC_TIM21_CLK_ENABLE();
 80017b6:	4b09      	ldr	r3, [pc, #36]	@ (80017dc <HAL_TIM_Base_MspInit+0x1bc>)
 80017b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80017ba:	4b08      	ldr	r3, [pc, #32]	@ (80017dc <HAL_TIM_Base_MspInit+0x1bc>)
 80017bc:	2104      	movs	r1, #4
 80017be:	430a      	orrs	r2, r1
 80017c0:	635a      	str	r2, [r3, #52]	@ 0x34
    HAL_NVIC_SetPriority(TIM21_IRQn, 0, 0);
 80017c2:	2200      	movs	r2, #0
 80017c4:	2100      	movs	r1, #0
 80017c6:	2014      	movs	r0, #20
 80017c8:	f000 fc38 	bl	800203c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
 80017cc:	2014      	movs	r0, #20
 80017ce:	f000 fc4a 	bl	8002066 <HAL_NVIC_EnableIRQ>
}
 80017d2:	46c0      	nop			@ (mov r8, r8)
 80017d4:	46bd      	mov	sp, r7
 80017d6:	b002      	add	sp, #8
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	46c0      	nop			@ (mov r8, r8)
 80017dc:	40021000 	.word	0x40021000
 80017e0:	20000808 	.word	0x20000808
 80017e4:	40020058 	.word	0x40020058
 80017e8:	20000850 	.word	0x20000850
 80017ec:	40020030 	.word	0x40020030
 80017f0:	20000898 	.word	0x20000898
 80017f4:	40020008 	.word	0x40020008
 80017f8:	200008e0 	.word	0x200008e0
 80017fc:	40020044 	.word	0x40020044
 8001800:	40010800 	.word	0x40010800

08001804 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001808:	46c0      	nop			@ (mov r8, r8)
 800180a:	e7fd      	b.n	8001808 <NMI_Handler+0x4>

0800180c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001810:	46c0      	nop			@ (mov r8, r8)
 8001812:	e7fd      	b.n	8001810 <HardFault_Handler+0x4>

08001814 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001818:	46c0      	nop			@ (mov r8, r8)
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800181e:	b580      	push	{r7, lr}
 8001820:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001822:	46c0      	nop			@ (mov r8, r8)
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}

08001828 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800182c:	f000 fb1a 	bl	8001e64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001830:	46c0      	nop			@ (mov r8, r8)
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
	...

08001838 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 800183c:	4b03      	ldr	r3, [pc, #12]	@ (800184c <DMA1_Channel1_IRQHandler+0x14>)
 800183e:	0018      	movs	r0, r3
 8001840:	f000 fd0c 	bl	800225c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001844:	46c0      	nop			@ (mov r8, r8)
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	46c0      	nop			@ (mov r8, r8)
 800184c:	20000898 	.word	0x20000898

08001850 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2);
 8001854:	4b03      	ldr	r3, [pc, #12]	@ (8001864 <DMA1_Channel2_3_IRQHandler+0x14>)
 8001856:	0018      	movs	r0, r3
 8001858:	f000 fd00 	bl	800225c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800185c:	46c0      	nop			@ (mov r8, r8)
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	46c0      	nop			@ (mov r8, r8)
 8001864:	20000850 	.word	0x20000850

08001868 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch4);
 800186c:	4b05      	ldr	r3, [pc, #20]	@ (8001884 <DMA1_Channel4_5_6_7_IRQHandler+0x1c>)
 800186e:	0018      	movs	r0, r3
 8001870:	f000 fcf4 	bl	800225c <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8001874:	4b04      	ldr	r3, [pc, #16]	@ (8001888 <DMA1_Channel4_5_6_7_IRQHandler+0x20>)
 8001876:	0018      	movs	r0, r3
 8001878:	f000 fcf0 	bl	800225c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 800187c:	46c0      	nop			@ (mov r8, r8)
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	46c0      	nop			@ (mov r8, r8)
 8001884:	200008e0 	.word	0x200008e0
 8001888:	20000808 	.word	0x20000808

0800188c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001890:	4b03      	ldr	r3, [pc, #12]	@ (80018a0 <TIM2_IRQHandler+0x14>)
 8001892:	0018      	movs	r0, r3
 8001894:	f003 f880 	bl	8004998 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001898:	46c0      	nop			@ (mov r8, r8)
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	46c0      	nop			@ (mov r8, r8)
 80018a0:	20000788 	.word	0x20000788

080018a4 <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM21_IRQn 0 */

  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
 80018a8:	4b03      	ldr	r3, [pc, #12]	@ (80018b8 <TIM21_IRQHandler+0x14>)
 80018aa:	0018      	movs	r0, r3
 80018ac:	f003 f874 	bl	8004998 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 80018b0:	46c0      	nop			@ (mov r8, r8)
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	46c0      	nop			@ (mov r8, r8)
 80018b8:	200007c8 	.word	0x200007c8

080018bc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018c0:	46c0      	nop			@ (mov r8, r8)
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
	...

080018c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80018c8:	480d      	ldr	r0, [pc, #52]	@ (8001900 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80018ca:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 80018cc:	f7ff fff6 	bl	80018bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018d0:	480c      	ldr	r0, [pc, #48]	@ (8001904 <LoopForever+0x6>)
  ldr r1, =_edata
 80018d2:	490d      	ldr	r1, [pc, #52]	@ (8001908 <LoopForever+0xa>)
  ldr r2, =_sidata
 80018d4:	4a0d      	ldr	r2, [pc, #52]	@ (800190c <LoopForever+0xe>)
  movs r3, #0
 80018d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018d8:	e002      	b.n	80018e0 <LoopCopyDataInit>

080018da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018de:	3304      	adds	r3, #4

080018e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018e4:	d3f9      	bcc.n	80018da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001910 <LoopForever+0x12>)
  ldr r4, =_ebss
 80018e8:	4c0a      	ldr	r4, [pc, #40]	@ (8001914 <LoopForever+0x16>)
  movs r3, #0
 80018ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018ec:	e001      	b.n	80018f2 <LoopFillZerobss>

080018ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018f0:	3204      	adds	r2, #4

080018f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018f4:	d3fb      	bcc.n	80018ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018f6:	f004 fb17 	bl	8005f28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018fa:	f7ff f973 	bl	8000be4 <main>

080018fe <LoopForever>:

LoopForever:
    b LoopForever
 80018fe:	e7fe      	b.n	80018fe <LoopForever>
   ldr   r0, =_estack
 8001900:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001904:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001908:	2000057c 	.word	0x2000057c
  ldr r2, =_sidata
 800190c:	08006120 	.word	0x08006120
  ldr r2, =_sbss
 8001910:	20000580 	.word	0x20000580
  ldr r4, =_ebss
 8001914:	20000b30 	.word	0x20000b30

08001918 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001918:	e7fe      	b.n	8001918 <ADC1_COMP_IRQHandler>
	...

0800191c <DS3231_Init>:

/**
 * @brief Initializes the DS3231 module. Set clock halt bit to 0 to start timing.
 * @param hi2c User I2C handle pointer.
 */
void DS3231_Init(I2C_HandleTypeDef *hi2c) {
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
	_ds3231_ui2c = hi2c;
 8001924:	4b09      	ldr	r3, [pc, #36]	@ (800194c <DS3231_Init+0x30>)
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	601a      	str	r2, [r3, #0]
	DS3231_EnableAlarm1(DS3231_DISABLED);
 800192a:	2000      	movs	r0, #0
 800192c:	f000 f8e3 	bl	8001af6 <DS3231_EnableAlarm1>
	DS3231_EnableAlarm2(DS3231_DISABLED);
 8001930:	2000      	movs	r0, #0
 8001932:	f000 f89e 	bl	8001a72 <DS3231_EnableAlarm2>
	DS3231_ClearAlarm1Flag();
 8001936:	f000 f905 	bl	8001b44 <DS3231_ClearAlarm1Flag>
	DS3231_ClearAlarm2Flag();
 800193a:	f000 f8c2 	bl	8001ac2 <DS3231_ClearAlarm2Flag>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 800193e:	2001      	movs	r0, #1
 8001940:	f000 f84c 	bl	80019dc <DS3231_SetInterruptMode>
}
 8001944:	46c0      	nop			@ (mov r8, r8)
 8001946:	46bd      	mov	sp, r7
 8001948:	b002      	add	sp, #8
 800194a:	bd80      	pop	{r7, pc}
 800194c:	20000b28 	.word	0x20000b28

08001950 <DS3231_SetRegByte>:
/**
 * @brief Set the byte in the designated DS3231 register to value.
 * @param regAddr Register address to write.
 * @param val Value to set, 0 to 255.
 */
void DS3231_SetRegByte(uint8_t regAddr, uint8_t val) {
 8001950:	b580      	push	{r7, lr}
 8001952:	b086      	sub	sp, #24
 8001954:	af02      	add	r7, sp, #8
 8001956:	0002      	movs	r2, r0
 8001958:	1dfb      	adds	r3, r7, #7
 800195a:	701a      	strb	r2, [r3, #0]
 800195c:	1dbb      	adds	r3, r7, #6
 800195e:	1c0a      	adds	r2, r1, #0
 8001960:	701a      	strb	r2, [r3, #0]
	uint8_t bytes[2] = { regAddr, val };
 8001962:	210c      	movs	r1, #12
 8001964:	187b      	adds	r3, r7, r1
 8001966:	1dfa      	adds	r2, r7, #7
 8001968:	7812      	ldrb	r2, [r2, #0]
 800196a:	701a      	strb	r2, [r3, #0]
 800196c:	187b      	adds	r3, r7, r1
 800196e:	1dba      	adds	r2, r7, #6
 8001970:	7812      	ldrb	r2, [r2, #0]
 8001972:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, bytes, 2, DS3231_TIMEOUT);
 8001974:	4b06      	ldr	r3, [pc, #24]	@ (8001990 <DS3231_SetRegByte+0x40>)
 8001976:	6818      	ldr	r0, [r3, #0]
 8001978:	187a      	adds	r2, r7, r1
 800197a:	2301      	movs	r3, #1
 800197c:	425b      	negs	r3, r3
 800197e:	9300      	str	r3, [sp, #0]
 8001980:	2302      	movs	r3, #2
 8001982:	21d0      	movs	r1, #208	@ 0xd0
 8001984:	f000 ff84 	bl	8002890 <HAL_I2C_Master_Transmit>
}
 8001988:	46c0      	nop			@ (mov r8, r8)
 800198a:	46bd      	mov	sp, r7
 800198c:	b004      	add	sp, #16
 800198e:	bd80      	pop	{r7, pc}
 8001990:	20000b28 	.word	0x20000b28

08001994 <DS3231_GetRegByte>:
/**
 * @brief Gets the byte in the designated DS3231 register.
 * @param regAddr Register address to read.
 * @return Value stored in the register, 0 to 255.
 */
uint8_t DS3231_GetRegByte(uint8_t regAddr) {
 8001994:	b590      	push	{r4, r7, lr}
 8001996:	b087      	sub	sp, #28
 8001998:	af02      	add	r7, sp, #8
 800199a:	0002      	movs	r2, r0
 800199c:	1dfb      	adds	r3, r7, #7
 800199e:	701a      	strb	r2, [r3, #0]
	uint8_t val;
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &regAddr, 1, DS3231_TIMEOUT);
 80019a0:	4b0d      	ldr	r3, [pc, #52]	@ (80019d8 <DS3231_GetRegByte+0x44>)
 80019a2:	6818      	ldr	r0, [r3, #0]
 80019a4:	1dfa      	adds	r2, r7, #7
 80019a6:	2301      	movs	r3, #1
 80019a8:	425b      	negs	r3, r3
 80019aa:	9300      	str	r3, [sp, #0]
 80019ac:	2301      	movs	r3, #1
 80019ae:	21d0      	movs	r1, #208	@ 0xd0
 80019b0:	f000 ff6e 	bl	8002890 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &val, 1, DS3231_TIMEOUT);
 80019b4:	4b08      	ldr	r3, [pc, #32]	@ (80019d8 <DS3231_GetRegByte+0x44>)
 80019b6:	6818      	ldr	r0, [r3, #0]
 80019b8:	240f      	movs	r4, #15
 80019ba:	193a      	adds	r2, r7, r4
 80019bc:	2301      	movs	r3, #1
 80019be:	425b      	negs	r3, r3
 80019c0:	9300      	str	r3, [sp, #0]
 80019c2:	2301      	movs	r3, #1
 80019c4:	21d0      	movs	r1, #208	@ 0xd0
 80019c6:	f001 f86b 	bl	8002aa0 <HAL_I2C_Master_Receive>
	return val;
 80019ca:	193b      	adds	r3, r7, r4
 80019cc:	781b      	ldrb	r3, [r3, #0]
}
 80019ce:	0018      	movs	r0, r3
 80019d0:	46bd      	mov	sp, r7
 80019d2:	b005      	add	sp, #20
 80019d4:	bd90      	pop	{r4, r7, pc}
 80019d6:	46c0      	nop			@ (mov r8, r8)
 80019d8:	20000b28 	.word	0x20000b28

080019dc <DS3231_SetInterruptMode>:

/**
 * @brief Set the interrupt mode to either alarm interrupt or square wave interrupt.
 * @param mode Interrupt mode to set, DS3231_ALARM_INTERRUPT or DS3231_SQUARE_WAVE_INTERRUPT.
 */
void DS3231_SetInterruptMode(DS3231_InterruptMode mode){
 80019dc:	b5b0      	push	{r4, r5, r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	0002      	movs	r2, r0
 80019e4:	1dfb      	adds	r3, r7, #7
 80019e6:	701a      	strb	r2, [r3, #0]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 80019e8:	250f      	movs	r5, #15
 80019ea:	197c      	adds	r4, r7, r5
 80019ec:	200e      	movs	r0, #14
 80019ee:	f7ff ffd1 	bl	8001994 <DS3231_GetRegByte>
 80019f2:	0003      	movs	r3, r0
 80019f4:	7023      	strb	r3, [r4, #0]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfb) | ((mode & 0x01) << DS3231_INTCN));
 80019f6:	197b      	adds	r3, r7, r5
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	b25b      	sxtb	r3, r3
 80019fc:	2204      	movs	r2, #4
 80019fe:	4393      	bics	r3, r2
 8001a00:	b25a      	sxtb	r2, r3
 8001a02:	1dfb      	adds	r3, r7, #7
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	b25b      	sxtb	r3, r3
 8001a0a:	2104      	movs	r1, #4
 8001a0c:	400b      	ands	r3, r1
 8001a0e:	b25b      	sxtb	r3, r3
 8001a10:	4313      	orrs	r3, r2
 8001a12:	b25b      	sxtb	r3, r3
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	0019      	movs	r1, r3
 8001a18:	200e      	movs	r0, #14
 8001a1a:	f7ff ff99 	bl	8001950 <DS3231_SetRegByte>
}
 8001a1e:	46c0      	nop			@ (mov r8, r8)
 8001a20:	46bd      	mov	sp, r7
 8001a22:	b004      	add	sp, #16
 8001a24:	bdb0      	pop	{r4, r5, r7, pc}

08001a26 <DS3231_EnableOscillator>:

/**
 * @brief Enables clock oscillator.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableOscillator(DS3231_State enable){
 8001a26:	b5b0      	push	{r4, r5, r7, lr}
 8001a28:	b084      	sub	sp, #16
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	0002      	movs	r2, r0
 8001a2e:	1dfb      	adds	r3, r7, #7
 8001a30:	701a      	strb	r2, [r3, #0]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8001a32:	250f      	movs	r5, #15
 8001a34:	197c      	adds	r4, r7, r5
 8001a36:	200e      	movs	r0, #14
 8001a38:	f7ff ffac 	bl	8001994 <DS3231_GetRegByte>
 8001a3c:	0003      	movs	r3, r0
 8001a3e:	7023      	strb	r3, [r4, #0]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0x7f) | ((!enable & 0x01) << DS3231_EOSC));
 8001a40:	197b      	adds	r3, r7, r5
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	b25b      	sxtb	r3, r3
 8001a46:	227f      	movs	r2, #127	@ 0x7f
 8001a48:	4013      	ands	r3, r2
 8001a4a:	b25a      	sxtb	r2, r3
 8001a4c:	1dfb      	adds	r3, r7, #7
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d102      	bne.n	8001a5a <DS3231_EnableOscillator+0x34>
 8001a54:	2380      	movs	r3, #128	@ 0x80
 8001a56:	425b      	negs	r3, r3
 8001a58:	e000      	b.n	8001a5c <DS3231_EnableOscillator+0x36>
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	b25b      	sxtb	r3, r3
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	0019      	movs	r1, r3
 8001a64:	200e      	movs	r0, #14
 8001a66:	f7ff ff73 	bl	8001950 <DS3231_SetRegByte>
}
 8001a6a:	46c0      	nop			@ (mov r8, r8)
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	b004      	add	sp, #16
 8001a70:	bdb0      	pop	{r4, r5, r7, pc}

08001a72 <DS3231_EnableAlarm2>:

/**
 * @brief Enables alarm 2.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableAlarm2(DS3231_State enable){
 8001a72:	b5b0      	push	{r4, r5, r7, lr}
 8001a74:	b084      	sub	sp, #16
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	0002      	movs	r2, r0
 8001a7a:	1dfb      	adds	r3, r7, #7
 8001a7c:	701a      	strb	r2, [r3, #0]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8001a7e:	250f      	movs	r5, #15
 8001a80:	197c      	adds	r4, r7, r5
 8001a82:	200e      	movs	r0, #14
 8001a84:	f7ff ff86 	bl	8001994 <DS3231_GetRegByte>
 8001a88:	0003      	movs	r3, r0
 8001a8a:	7023      	strb	r3, [r4, #0]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfd) | ((enable & 0x01) << DS3231_A2IE));
 8001a8c:	197b      	adds	r3, r7, r5
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	b25b      	sxtb	r3, r3
 8001a92:	2202      	movs	r2, #2
 8001a94:	4393      	bics	r3, r2
 8001a96:	b25a      	sxtb	r2, r3
 8001a98:	1dfb      	adds	r3, r7, #7
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	b25b      	sxtb	r3, r3
 8001aa0:	2102      	movs	r1, #2
 8001aa2:	400b      	ands	r3, r1
 8001aa4:	b25b      	sxtb	r3, r3
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	b25b      	sxtb	r3, r3
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	0019      	movs	r1, r3
 8001aae:	200e      	movs	r0, #14
 8001ab0:	f7ff ff4e 	bl	8001950 <DS3231_SetRegByte>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 8001ab4:	2001      	movs	r0, #1
 8001ab6:	f7ff ff91 	bl	80019dc <DS3231_SetInterruptMode>
}
 8001aba:	46c0      	nop			@ (mov r8, r8)
 8001abc:	46bd      	mov	sp, r7
 8001abe:	b004      	add	sp, #16
 8001ac0:	bdb0      	pop	{r4, r5, r7, pc}

08001ac2 <DS3231_ClearAlarm2Flag>:

/**
 * @brief Clears alarm 2 matched flag. Matched flags must be cleared before the next match or the next interrupt will be masked.
 */
void DS3231_ClearAlarm2Flag(){
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	b082      	sub	sp, #8
 8001ac6:	af00      	add	r7, sp, #0
	uint8_t status = DS3231_GetRegByte(DS3231_REG_STATUS) & 0xfd;
 8001ac8:	200f      	movs	r0, #15
 8001aca:	f7ff ff63 	bl	8001994 <DS3231_GetRegByte>
 8001ace:	0003      	movs	r3, r0
 8001ad0:	0019      	movs	r1, r3
 8001ad2:	1dfb      	adds	r3, r7, #7
 8001ad4:	2202      	movs	r2, #2
 8001ad6:	4391      	bics	r1, r2
 8001ad8:	000a      	movs	r2, r1
 8001ada:	701a      	strb	r2, [r3, #0]
	DS3231_SetRegByte(DS3231_REG_STATUS, status & ~(0x01 << DS3231_A2F));
 8001adc:	1dfb      	adds	r3, r7, #7
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	2202      	movs	r2, #2
 8001ae2:	4393      	bics	r3, r2
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	0019      	movs	r1, r3
 8001ae8:	200f      	movs	r0, #15
 8001aea:	f7ff ff31 	bl	8001950 <DS3231_SetRegByte>
}
 8001aee:	46c0      	nop			@ (mov r8, r8)
 8001af0:	46bd      	mov	sp, r7
 8001af2:	b002      	add	sp, #8
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <DS3231_EnableAlarm1>:

/**
 * @brief Enables alarm 1.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableAlarm1(DS3231_State enable){
 8001af6:	b5b0      	push	{r4, r5, r7, lr}
 8001af8:	b084      	sub	sp, #16
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	0002      	movs	r2, r0
 8001afe:	1dfb      	adds	r3, r7, #7
 8001b00:	701a      	strb	r2, [r3, #0]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8001b02:	250f      	movs	r5, #15
 8001b04:	197c      	adds	r4, r7, r5
 8001b06:	200e      	movs	r0, #14
 8001b08:	f7ff ff44 	bl	8001994 <DS3231_GetRegByte>
 8001b0c:	0003      	movs	r3, r0
 8001b0e:	7023      	strb	r3, [r4, #0]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfe) | ((enable & 0x01) << DS3231_A1IE));
 8001b10:	197b      	adds	r3, r7, r5
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	b25b      	sxtb	r3, r3
 8001b16:	2201      	movs	r2, #1
 8001b18:	4393      	bics	r3, r2
 8001b1a:	b25a      	sxtb	r2, r3
 8001b1c:	1dfb      	adds	r3, r7, #7
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	b25b      	sxtb	r3, r3
 8001b22:	2101      	movs	r1, #1
 8001b24:	400b      	ands	r3, r1
 8001b26:	b25b      	sxtb	r3, r3
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	b25b      	sxtb	r3, r3
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	0019      	movs	r1, r3
 8001b30:	200e      	movs	r0, #14
 8001b32:	f7ff ff0d 	bl	8001950 <DS3231_SetRegByte>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 8001b36:	2001      	movs	r0, #1
 8001b38:	f7ff ff50 	bl	80019dc <DS3231_SetInterruptMode>
}
 8001b3c:	46c0      	nop			@ (mov r8, r8)
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	b004      	add	sp, #16
 8001b42:	bdb0      	pop	{r4, r5, r7, pc}

08001b44 <DS3231_ClearAlarm1Flag>:

/**
 * @brief Clears alarm 1 matched flag. Matched flags must be cleared before the next match or the next interrupt will be masked.
 */
void DS3231_ClearAlarm1Flag(){
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
	uint8_t status = DS3231_GetRegByte(DS3231_REG_STATUS) & 0xfe;
 8001b4a:	200f      	movs	r0, #15
 8001b4c:	f7ff ff22 	bl	8001994 <DS3231_GetRegByte>
 8001b50:	0003      	movs	r3, r0
 8001b52:	0019      	movs	r1, r3
 8001b54:	1dfb      	adds	r3, r7, #7
 8001b56:	2201      	movs	r2, #1
 8001b58:	4391      	bics	r1, r2
 8001b5a:	000a      	movs	r2, r1
 8001b5c:	701a      	strb	r2, [r3, #0]
	DS3231_SetRegByte(DS3231_REG_STATUS, status & ~(0x01 << DS3231_A1F));
 8001b5e:	1dfb      	adds	r3, r7, #7
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	2201      	movs	r2, #1
 8001b64:	4393      	bics	r3, r2
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	0019      	movs	r1, r3
 8001b6a:	200f      	movs	r0, #15
 8001b6c:	f7ff fef0 	bl	8001950 <DS3231_SetRegByte>
}
 8001b70:	46c0      	nop			@ (mov r8, r8)
 8001b72:	46bd      	mov	sp, r7
 8001b74:	b002      	add	sp, #8
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <DS3231_IsOscillatorStopped>:

/**
 * @brief Check whether the clock oscillator is stopped.
 * @return Oscillator stopped flag (OSF) bit, 0 or 1.
 */
uint8_t DS3231_IsOscillatorStopped(){
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
	return (DS3231_GetRegByte(DS3231_REG_STATUS) >> DS3231_OSF) & 0x01;
 8001b7c:	200f      	movs	r0, #15
 8001b7e:	f7ff ff09 	bl	8001994 <DS3231_GetRegByte>
 8001b82:	0003      	movs	r3, r0
 8001b84:	09db      	lsrs	r3, r3, #7
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	2201      	movs	r2, #1
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	b2db      	uxtb	r3, r3
}
 8001b8e:	0018      	movs	r0, r3
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <DS3231_GetDayOfWeek>:

/**
 * @brief Gets the current day of week.
 * @return Days from last Sunday, 0 to 6.
 */
uint8_t DS3231_GetDayOfWeek(void) {
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_DOW));
 8001b98:	2003      	movs	r0, #3
 8001b9a:	f7ff fefb 	bl	8001994 <DS3231_GetRegByte>
 8001b9e:	0003      	movs	r3, r0
 8001ba0:	0018      	movs	r0, r3
 8001ba2:	f000 f8d2 	bl	8001d4a <DS3231_DecodeBCD>
 8001ba6:	0003      	movs	r3, r0
}
 8001ba8:	0018      	movs	r0, r3
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}

08001bae <DS3231_GetDate>:

/**
 * @brief Gets the current day of month.
 * @return Day of month, 1 to 31.
 */
uint8_t DS3231_GetDate(void) {
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_DATE));
 8001bb2:	2004      	movs	r0, #4
 8001bb4:	f7ff feee 	bl	8001994 <DS3231_GetRegByte>
 8001bb8:	0003      	movs	r3, r0
 8001bba:	0018      	movs	r0, r3
 8001bbc:	f000 f8c5 	bl	8001d4a <DS3231_DecodeBCD>
 8001bc0:	0003      	movs	r3, r0
}
 8001bc2:	0018      	movs	r0, r3
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <DS3231_GetMonth>:

/**
 * @brief Gets the current month.
 * @return Month, 1 to 12.
 */
uint8_t DS3231_GetMonth(void) {
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_MONTH) & 0x7f);
 8001bcc:	2005      	movs	r0, #5
 8001bce:	f7ff fee1 	bl	8001994 <DS3231_GetRegByte>
 8001bd2:	0003      	movs	r3, r0
 8001bd4:	001a      	movs	r2, r3
 8001bd6:	237f      	movs	r3, #127	@ 0x7f
 8001bd8:	4013      	ands	r3, r2
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	0018      	movs	r0, r3
 8001bde:	f000 f8b4 	bl	8001d4a <DS3231_DecodeBCD>
 8001be2:	0003      	movs	r3, r0
}
 8001be4:	0018      	movs	r0, r3
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <DS3231_GetYear>:

/**
 * @brief Gets the current year.
 * @return Year, 2000 to 2199.
 */
uint16_t DS3231_GetYear(void) {
 8001bea:	b590      	push	{r4, r7, lr}
 8001bec:	b083      	sub	sp, #12
 8001bee:	af00      	add	r7, sp, #0
	uint8_t decYear = DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_YEAR));
 8001bf0:	2006      	movs	r0, #6
 8001bf2:	f7ff fecf 	bl	8001994 <DS3231_GetRegByte>
 8001bf6:	0003      	movs	r3, r0
 8001bf8:	1dfc      	adds	r4, r7, #7
 8001bfa:	0018      	movs	r0, r3
 8001bfc:	f000 f8a5 	bl	8001d4a <DS3231_DecodeBCD>
 8001c00:	0003      	movs	r3, r0
 8001c02:	7023      	strb	r3, [r4, #0]
	uint16_t century = (DS3231_GetRegByte(DS3231_REG_MONTH) >> DS3231_CENTURY) * 100 + 2000;
 8001c04:	2005      	movs	r0, #5
 8001c06:	f7ff fec5 	bl	8001994 <DS3231_GetRegByte>
 8001c0a:	0003      	movs	r3, r0
 8001c0c:	09db      	lsrs	r3, r3, #7
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	001a      	movs	r2, r3
 8001c12:	2364      	movs	r3, #100	@ 0x64
 8001c14:	4353      	muls	r3, r2
 8001c16:	b29a      	uxth	r2, r3
 8001c18:	1d3b      	adds	r3, r7, #4
 8001c1a:	21fa      	movs	r1, #250	@ 0xfa
 8001c1c:	00c9      	lsls	r1, r1, #3
 8001c1e:	468c      	mov	ip, r1
 8001c20:	4462      	add	r2, ip
 8001c22:	801a      	strh	r2, [r3, #0]
	return century + decYear;
 8001c24:	1dfb      	adds	r3, r7, #7
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	b29a      	uxth	r2, r3
 8001c2a:	1d3b      	adds	r3, r7, #4
 8001c2c:	881b      	ldrh	r3, [r3, #0]
 8001c2e:	18d3      	adds	r3, r2, r3
 8001c30:	b29b      	uxth	r3, r3
}
 8001c32:	0018      	movs	r0, r3
 8001c34:	46bd      	mov	sp, r7
 8001c36:	b003      	add	sp, #12
 8001c38:	bd90      	pop	{r4, r7, pc}

08001c3a <DS3231_GetHour>:

/**
 * @brief Gets the current hour in 24h format.
 * @return Hour in 24h format, 0 to 23.
 */
uint8_t DS3231_GetHour(void) {
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_HOUR));
 8001c3e:	2002      	movs	r0, #2
 8001c40:	f7ff fea8 	bl	8001994 <DS3231_GetRegByte>
 8001c44:	0003      	movs	r3, r0
 8001c46:	0018      	movs	r0, r3
 8001c48:	f000 f87f 	bl	8001d4a <DS3231_DecodeBCD>
 8001c4c:	0003      	movs	r3, r0
}
 8001c4e:	0018      	movs	r0, r3
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <DS3231_GetMinute>:

/**
 * @brief Gets the current minute.
 * @return Minute, 0 to 59.
 */
uint8_t DS3231_GetMinute(void) {
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_MINUTE));
 8001c58:	2001      	movs	r0, #1
 8001c5a:	f7ff fe9b 	bl	8001994 <DS3231_GetRegByte>
 8001c5e:	0003      	movs	r3, r0
 8001c60:	0018      	movs	r0, r3
 8001c62:	f000 f872 	bl	8001d4a <DS3231_DecodeBCD>
 8001c66:	0003      	movs	r3, r0
}
 8001c68:	0018      	movs	r0, r3
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <DS3231_GetSecond>:

/**
 * @brief Gets the current second. Clock halt bit not included.
 * @return Second, 0 to 59.
 */
uint8_t DS3231_GetSecond(void) {
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_SECOND));
 8001c72:	2000      	movs	r0, #0
 8001c74:	f7ff fe8e 	bl	8001994 <DS3231_GetRegByte>
 8001c78:	0003      	movs	r3, r0
 8001c7a:	0018      	movs	r0, r3
 8001c7c:	f000 f865 	bl	8001d4a <DS3231_DecodeBCD>
 8001c80:	0003      	movs	r3, r0
}
 8001c82:	0018      	movs	r0, r3
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <DS3231_SetHour>:

/**
 * @brief Set the current hour, in 24h format.
 * @param hour_24mode Hour in 24h format, 0 to 23.
 */
void DS3231_SetHour(uint8_t hour_24mode) {
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	0002      	movs	r2, r0
 8001c90:	1dfb      	adds	r3, r7, #7
 8001c92:	701a      	strb	r2, [r3, #0]
	DS3231_SetRegByte(DS3231_REG_HOUR, DS3231_EncodeBCD(hour_24mode & 0x3f));
 8001c94:	1dfb      	adds	r3, r7, #7
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	223f      	movs	r2, #63	@ 0x3f
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	0018      	movs	r0, r3
 8001ca0:	f000 f86d 	bl	8001d7e <DS3231_EncodeBCD>
 8001ca4:	0003      	movs	r3, r0
 8001ca6:	0019      	movs	r1, r3
 8001ca8:	2002      	movs	r0, #2
 8001caa:	f7ff fe51 	bl	8001950 <DS3231_SetRegByte>
}
 8001cae:	46c0      	nop			@ (mov r8, r8)
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	b002      	add	sp, #8
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <DS3231_SetMinute>:

/**
 * @brief Set the current minute.
 * @param minute Minute, 0 to 59.
 */
void DS3231_SetMinute(uint8_t minute) {
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b082      	sub	sp, #8
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	0002      	movs	r2, r0
 8001cbe:	1dfb      	adds	r3, r7, #7
 8001cc0:	701a      	strb	r2, [r3, #0]
	DS3231_SetRegByte(DS3231_REG_MINUTE, DS3231_EncodeBCD(minute));
 8001cc2:	1dfb      	adds	r3, r7, #7
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	0018      	movs	r0, r3
 8001cc8:	f000 f859 	bl	8001d7e <DS3231_EncodeBCD>
 8001ccc:	0003      	movs	r3, r0
 8001cce:	0019      	movs	r1, r3
 8001cd0:	2001      	movs	r0, #1
 8001cd2:	f7ff fe3d 	bl	8001950 <DS3231_SetRegByte>
}
 8001cd6:	46c0      	nop			@ (mov r8, r8)
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	b002      	add	sp, #8
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <DS3231_SetSecond>:

/**
 * @brief Set the current second.
 * @param second Second, 0 to 59.
 */
void DS3231_SetSecond(uint8_t second) {
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b082      	sub	sp, #8
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	0002      	movs	r2, r0
 8001ce6:	1dfb      	adds	r3, r7, #7
 8001ce8:	701a      	strb	r2, [r3, #0]
	DS3231_SetRegByte(DS3231_REG_SECOND, DS3231_EncodeBCD(second));
 8001cea:	1dfb      	adds	r3, r7, #7
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	0018      	movs	r0, r3
 8001cf0:	f000 f845 	bl	8001d7e <DS3231_EncodeBCD>
 8001cf4:	0003      	movs	r3, r0
 8001cf6:	0019      	movs	r1, r3
 8001cf8:	2000      	movs	r0, #0
 8001cfa:	f7ff fe29 	bl	8001950 <DS3231_SetRegByte>
}
 8001cfe:	46c0      	nop			@ (mov r8, r8)
 8001d00:	46bd      	mov	sp, r7
 8001d02:	b002      	add	sp, #8
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <DS3231_SetFullTime>:
 * @brief Set the current time.
 * @param hour_24mode Hour in 24h format, 0 to 23.
 * @param minute  Minute, 0 to 59.
 * @param second Second, 0 to 59.
 */
void DS3231_SetFullTime(uint8_t  hour_24mode, uint8_t minute, uint8_t second){
 8001d06:	b590      	push	{r4, r7, lr}
 8001d08:	b083      	sub	sp, #12
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	0004      	movs	r4, r0
 8001d0e:	0008      	movs	r0, r1
 8001d10:	0011      	movs	r1, r2
 8001d12:	1dfb      	adds	r3, r7, #7
 8001d14:	1c22      	adds	r2, r4, #0
 8001d16:	701a      	strb	r2, [r3, #0]
 8001d18:	1dbb      	adds	r3, r7, #6
 8001d1a:	1c02      	adds	r2, r0, #0
 8001d1c:	701a      	strb	r2, [r3, #0]
 8001d1e:	1d7b      	adds	r3, r7, #5
 8001d20:	1c0a      	adds	r2, r1, #0
 8001d22:	701a      	strb	r2, [r3, #0]
	DS3231_SetHour(hour_24mode);
 8001d24:	1dfb      	adds	r3, r7, #7
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	0018      	movs	r0, r3
 8001d2a:	f7ff ffad 	bl	8001c88 <DS3231_SetHour>
	DS3231_SetMinute(minute);
 8001d2e:	1dbb      	adds	r3, r7, #6
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	0018      	movs	r0, r3
 8001d34:	f7ff ffbf 	bl	8001cb6 <DS3231_SetMinute>
	DS3231_SetSecond(second);
 8001d38:	1d7b      	adds	r3, r7, #5
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	0018      	movs	r0, r3
 8001d3e:	f7ff ffce 	bl	8001cde <DS3231_SetSecond>
}
 8001d42:	46c0      	nop			@ (mov r8, r8)
 8001d44:	46bd      	mov	sp, r7
 8001d46:	b003      	add	sp, #12
 8001d48:	bd90      	pop	{r4, r7, pc}

08001d4a <DS3231_DecodeBCD>:
/**
 * @brief Decodes the raw binary value stored in registers to decimal format.
 * @param bin Binary-coded decimal value retrieved from register, 0 to 255.
 * @return Decoded decimal value.
 */
uint8_t DS3231_DecodeBCD(uint8_t bin) {
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b082      	sub	sp, #8
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	0002      	movs	r2, r0
 8001d52:	1dfb      	adds	r3, r7, #7
 8001d54:	701a      	strb	r2, [r3, #0]
	return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
 8001d56:	1dfb      	adds	r3, r7, #7
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	091b      	lsrs	r3, r3, #4
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	1c1a      	adds	r2, r3, #0
 8001d60:	0092      	lsls	r2, r2, #2
 8001d62:	18d3      	adds	r3, r2, r3
 8001d64:	18db      	adds	r3, r3, r3
 8001d66:	b2da      	uxtb	r2, r3
 8001d68:	1dfb      	adds	r3, r7, #7
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	210f      	movs	r1, #15
 8001d6e:	400b      	ands	r3, r1
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	18d3      	adds	r3, r2, r3
 8001d74:	b2db      	uxtb	r3, r3
}
 8001d76:	0018      	movs	r0, r3
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	b002      	add	sp, #8
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <DS3231_EncodeBCD>:
/**
 * @brief Encodes a decimal number to binaty-coded decimal for storage in registers.
 * @param dec Decimal number to encode.
 * @return Encoded binary-coded decimal value.
 */
uint8_t DS3231_EncodeBCD(uint8_t dec) {
 8001d7e:	b590      	push	{r4, r7, lr}
 8001d80:	b083      	sub	sp, #12
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	0002      	movs	r2, r0
 8001d86:	1dfb      	adds	r3, r7, #7
 8001d88:	701a      	strb	r2, [r3, #0]
	return (dec % 10 + ((dec / 10) << 4));
 8001d8a:	1dfb      	adds	r3, r7, #7
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	210a      	movs	r1, #10
 8001d90:	0018      	movs	r0, r3
 8001d92:	f7fe fa3f 	bl	8000214 <__aeabi_uidivmod>
 8001d96:	000b      	movs	r3, r1
 8001d98:	b2dc      	uxtb	r4, r3
 8001d9a:	1dfb      	adds	r3, r7, #7
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	210a      	movs	r1, #10
 8001da0:	0018      	movs	r0, r3
 8001da2:	f7fe f9b1 	bl	8000108 <__udivsi3>
 8001da6:	0003      	movs	r3, r0
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	011b      	lsls	r3, r3, #4
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	18e3      	adds	r3, r4, r3
 8001db0:	b2db      	uxtb	r3, r3
}
 8001db2:	0018      	movs	r0, r3
 8001db4:	46bd      	mov	sp, r7
 8001db6:	b003      	add	sp, #12
 8001db8:	bd90      	pop	{r4, r7, pc}
	...

08001dbc <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001dc2:	1dfb      	adds	r3, r7, #7
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001dc8:	4b0b      	ldr	r3, [pc, #44]	@ (8001df8 <HAL_Init+0x3c>)
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	4b0a      	ldr	r3, [pc, #40]	@ (8001df8 <HAL_Init+0x3c>)
 8001dce:	2140      	movs	r1, #64	@ 0x40
 8001dd0:	430a      	orrs	r2, r1
 8001dd2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001dd4:	2003      	movs	r0, #3
 8001dd6:	f000 f811 	bl	8001dfc <HAL_InitTick>
 8001dda:	1e03      	subs	r3, r0, #0
 8001ddc:	d003      	beq.n	8001de6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001dde:	1dfb      	adds	r3, r7, #7
 8001de0:	2201      	movs	r2, #1
 8001de2:	701a      	strb	r2, [r3, #0]
 8001de4:	e001      	b.n	8001dea <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001de6:	f7ff fb35 	bl	8001454 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001dea:	1dfb      	adds	r3, r7, #7
 8001dec:	781b      	ldrb	r3, [r3, #0]
}
 8001dee:	0018      	movs	r0, r3
 8001df0:	46bd      	mov	sp, r7
 8001df2:	b002      	add	sp, #8
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	46c0      	nop			@ (mov r8, r8)
 8001df8:	40022000 	.word	0x40022000

08001dfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dfc:	b590      	push	{r4, r7, lr}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e04:	4b14      	ldr	r3, [pc, #80]	@ (8001e58 <HAL_InitTick+0x5c>)
 8001e06:	681c      	ldr	r4, [r3, #0]
 8001e08:	4b14      	ldr	r3, [pc, #80]	@ (8001e5c <HAL_InitTick+0x60>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	0019      	movs	r1, r3
 8001e0e:	23fa      	movs	r3, #250	@ 0xfa
 8001e10:	0098      	lsls	r0, r3, #2
 8001e12:	f7fe f979 	bl	8000108 <__udivsi3>
 8001e16:	0003      	movs	r3, r0
 8001e18:	0019      	movs	r1, r3
 8001e1a:	0020      	movs	r0, r4
 8001e1c:	f7fe f974 	bl	8000108 <__udivsi3>
 8001e20:	0003      	movs	r3, r0
 8001e22:	0018      	movs	r0, r3
 8001e24:	f000 f92f 	bl	8002086 <HAL_SYSTICK_Config>
 8001e28:	1e03      	subs	r3, r0, #0
 8001e2a:	d001      	beq.n	8001e30 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e00f      	b.n	8001e50 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2b03      	cmp	r3, #3
 8001e34:	d80b      	bhi.n	8001e4e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e36:	6879      	ldr	r1, [r7, #4]
 8001e38:	2301      	movs	r3, #1
 8001e3a:	425b      	negs	r3, r3
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	0018      	movs	r0, r3
 8001e40:	f000 f8fc 	bl	800203c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e44:	4b06      	ldr	r3, [pc, #24]	@ (8001e60 <HAL_InitTick+0x64>)
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	e000      	b.n	8001e50 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
}
 8001e50:	0018      	movs	r0, r3
 8001e52:	46bd      	mov	sp, r7
 8001e54:	b003      	add	sp, #12
 8001e56:	bd90      	pop	{r4, r7, pc}
 8001e58:	20000570 	.word	0x20000570
 8001e5c:	20000578 	.word	0x20000578
 8001e60:	20000574 	.word	0x20000574

08001e64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e68:	4b05      	ldr	r3, [pc, #20]	@ (8001e80 <HAL_IncTick+0x1c>)
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	001a      	movs	r2, r3
 8001e6e:	4b05      	ldr	r3, [pc, #20]	@ (8001e84 <HAL_IncTick+0x20>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	18d2      	adds	r2, r2, r3
 8001e74:	4b03      	ldr	r3, [pc, #12]	@ (8001e84 <HAL_IncTick+0x20>)
 8001e76:	601a      	str	r2, [r3, #0]
}
 8001e78:	46c0      	nop			@ (mov r8, r8)
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	46c0      	nop			@ (mov r8, r8)
 8001e80:	20000578 	.word	0x20000578
 8001e84:	20000b2c 	.word	0x20000b2c

08001e88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e8c:	4b02      	ldr	r3, [pc, #8]	@ (8001e98 <HAL_GetTick+0x10>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
}
 8001e90:	0018      	movs	r0, r3
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	46c0      	nop			@ (mov r8, r8)
 8001e98:	20000b2c 	.word	0x20000b2c

08001e9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ea4:	f7ff fff0 	bl	8001e88 <HAL_GetTick>
 8001ea8:	0003      	movs	r3, r0
 8001eaa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	d005      	beq.n	8001ec2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001eb6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ee0 <HAL_Delay+0x44>)
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	001a      	movs	r2, r3
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	189b      	adds	r3, r3, r2
 8001ec0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ec2:	46c0      	nop			@ (mov r8, r8)
 8001ec4:	f7ff ffe0 	bl	8001e88 <HAL_GetTick>
 8001ec8:	0002      	movs	r2, r0
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	68fa      	ldr	r2, [r7, #12]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d8f7      	bhi.n	8001ec4 <HAL_Delay+0x28>
  {
  }
}
 8001ed4:	46c0      	nop			@ (mov r8, r8)
 8001ed6:	46c0      	nop			@ (mov r8, r8)
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	b004      	add	sp, #16
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	46c0      	nop			@ (mov r8, r8)
 8001ee0:	20000578 	.word	0x20000578

08001ee4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	0002      	movs	r2, r0
 8001eec:	1dfb      	adds	r3, r7, #7
 8001eee:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001ef0:	1dfb      	adds	r3, r7, #7
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	2b7f      	cmp	r3, #127	@ 0x7f
 8001ef6:	d809      	bhi.n	8001f0c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ef8:	1dfb      	adds	r3, r7, #7
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	001a      	movs	r2, r3
 8001efe:	231f      	movs	r3, #31
 8001f00:	401a      	ands	r2, r3
 8001f02:	4b04      	ldr	r3, [pc, #16]	@ (8001f14 <__NVIC_EnableIRQ+0x30>)
 8001f04:	2101      	movs	r1, #1
 8001f06:	4091      	lsls	r1, r2
 8001f08:	000a      	movs	r2, r1
 8001f0a:	601a      	str	r2, [r3, #0]
  }
}
 8001f0c:	46c0      	nop			@ (mov r8, r8)
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	b002      	add	sp, #8
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	e000e100 	.word	0xe000e100

08001f18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f18:	b590      	push	{r4, r7, lr}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	0002      	movs	r2, r0
 8001f20:	6039      	str	r1, [r7, #0]
 8001f22:	1dfb      	adds	r3, r7, #7
 8001f24:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001f26:	1dfb      	adds	r3, r7, #7
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	2b7f      	cmp	r3, #127	@ 0x7f
 8001f2c:	d828      	bhi.n	8001f80 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f2e:	4a2f      	ldr	r2, [pc, #188]	@ (8001fec <__NVIC_SetPriority+0xd4>)
 8001f30:	1dfb      	adds	r3, r7, #7
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	b25b      	sxtb	r3, r3
 8001f36:	089b      	lsrs	r3, r3, #2
 8001f38:	33c0      	adds	r3, #192	@ 0xc0
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	589b      	ldr	r3, [r3, r2]
 8001f3e:	1dfa      	adds	r2, r7, #7
 8001f40:	7812      	ldrb	r2, [r2, #0]
 8001f42:	0011      	movs	r1, r2
 8001f44:	2203      	movs	r2, #3
 8001f46:	400a      	ands	r2, r1
 8001f48:	00d2      	lsls	r2, r2, #3
 8001f4a:	21ff      	movs	r1, #255	@ 0xff
 8001f4c:	4091      	lsls	r1, r2
 8001f4e:	000a      	movs	r2, r1
 8001f50:	43d2      	mvns	r2, r2
 8001f52:	401a      	ands	r2, r3
 8001f54:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	019b      	lsls	r3, r3, #6
 8001f5a:	22ff      	movs	r2, #255	@ 0xff
 8001f5c:	401a      	ands	r2, r3
 8001f5e:	1dfb      	adds	r3, r7, #7
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	0018      	movs	r0, r3
 8001f64:	2303      	movs	r3, #3
 8001f66:	4003      	ands	r3, r0
 8001f68:	00db      	lsls	r3, r3, #3
 8001f6a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f6c:	481f      	ldr	r0, [pc, #124]	@ (8001fec <__NVIC_SetPriority+0xd4>)
 8001f6e:	1dfb      	adds	r3, r7, #7
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	b25b      	sxtb	r3, r3
 8001f74:	089b      	lsrs	r3, r3, #2
 8001f76:	430a      	orrs	r2, r1
 8001f78:	33c0      	adds	r3, #192	@ 0xc0
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001f7e:	e031      	b.n	8001fe4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f80:	4a1b      	ldr	r2, [pc, #108]	@ (8001ff0 <__NVIC_SetPriority+0xd8>)
 8001f82:	1dfb      	adds	r3, r7, #7
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	0019      	movs	r1, r3
 8001f88:	230f      	movs	r3, #15
 8001f8a:	400b      	ands	r3, r1
 8001f8c:	3b08      	subs	r3, #8
 8001f8e:	089b      	lsrs	r3, r3, #2
 8001f90:	3306      	adds	r3, #6
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	18d3      	adds	r3, r2, r3
 8001f96:	3304      	adds	r3, #4
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	1dfa      	adds	r2, r7, #7
 8001f9c:	7812      	ldrb	r2, [r2, #0]
 8001f9e:	0011      	movs	r1, r2
 8001fa0:	2203      	movs	r2, #3
 8001fa2:	400a      	ands	r2, r1
 8001fa4:	00d2      	lsls	r2, r2, #3
 8001fa6:	21ff      	movs	r1, #255	@ 0xff
 8001fa8:	4091      	lsls	r1, r2
 8001faa:	000a      	movs	r2, r1
 8001fac:	43d2      	mvns	r2, r2
 8001fae:	401a      	ands	r2, r3
 8001fb0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	019b      	lsls	r3, r3, #6
 8001fb6:	22ff      	movs	r2, #255	@ 0xff
 8001fb8:	401a      	ands	r2, r3
 8001fba:	1dfb      	adds	r3, r7, #7
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	0018      	movs	r0, r3
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	4003      	ands	r3, r0
 8001fc4:	00db      	lsls	r3, r3, #3
 8001fc6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fc8:	4809      	ldr	r0, [pc, #36]	@ (8001ff0 <__NVIC_SetPriority+0xd8>)
 8001fca:	1dfb      	adds	r3, r7, #7
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	001c      	movs	r4, r3
 8001fd0:	230f      	movs	r3, #15
 8001fd2:	4023      	ands	r3, r4
 8001fd4:	3b08      	subs	r3, #8
 8001fd6:	089b      	lsrs	r3, r3, #2
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	3306      	adds	r3, #6
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	18c3      	adds	r3, r0, r3
 8001fe0:	3304      	adds	r3, #4
 8001fe2:	601a      	str	r2, [r3, #0]
}
 8001fe4:	46c0      	nop			@ (mov r8, r8)
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	b003      	add	sp, #12
 8001fea:	bd90      	pop	{r4, r7, pc}
 8001fec:	e000e100 	.word	0xe000e100
 8001ff0:	e000ed00 	.word	0xe000ed00

08001ff4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	1e5a      	subs	r2, r3, #1
 8002000:	2380      	movs	r3, #128	@ 0x80
 8002002:	045b      	lsls	r3, r3, #17
 8002004:	429a      	cmp	r2, r3
 8002006:	d301      	bcc.n	800200c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002008:	2301      	movs	r3, #1
 800200a:	e010      	b.n	800202e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800200c:	4b0a      	ldr	r3, [pc, #40]	@ (8002038 <SysTick_Config+0x44>)
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	3a01      	subs	r2, #1
 8002012:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002014:	2301      	movs	r3, #1
 8002016:	425b      	negs	r3, r3
 8002018:	2103      	movs	r1, #3
 800201a:	0018      	movs	r0, r3
 800201c:	f7ff ff7c 	bl	8001f18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002020:	4b05      	ldr	r3, [pc, #20]	@ (8002038 <SysTick_Config+0x44>)
 8002022:	2200      	movs	r2, #0
 8002024:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002026:	4b04      	ldr	r3, [pc, #16]	@ (8002038 <SysTick_Config+0x44>)
 8002028:	2207      	movs	r2, #7
 800202a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800202c:	2300      	movs	r3, #0
}
 800202e:	0018      	movs	r0, r3
 8002030:	46bd      	mov	sp, r7
 8002032:	b002      	add	sp, #8
 8002034:	bd80      	pop	{r7, pc}
 8002036:	46c0      	nop			@ (mov r8, r8)
 8002038:	e000e010 	.word	0xe000e010

0800203c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	60b9      	str	r1, [r7, #8]
 8002044:	607a      	str	r2, [r7, #4]
 8002046:	210f      	movs	r1, #15
 8002048:	187b      	adds	r3, r7, r1
 800204a:	1c02      	adds	r2, r0, #0
 800204c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800204e:	68ba      	ldr	r2, [r7, #8]
 8002050:	187b      	adds	r3, r7, r1
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	b25b      	sxtb	r3, r3
 8002056:	0011      	movs	r1, r2
 8002058:	0018      	movs	r0, r3
 800205a:	f7ff ff5d 	bl	8001f18 <__NVIC_SetPriority>
}
 800205e:	46c0      	nop			@ (mov r8, r8)
 8002060:	46bd      	mov	sp, r7
 8002062:	b004      	add	sp, #16
 8002064:	bd80      	pop	{r7, pc}

08002066 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002066:	b580      	push	{r7, lr}
 8002068:	b082      	sub	sp, #8
 800206a:	af00      	add	r7, sp, #0
 800206c:	0002      	movs	r2, r0
 800206e:	1dfb      	adds	r3, r7, #7
 8002070:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002072:	1dfb      	adds	r3, r7, #7
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	b25b      	sxtb	r3, r3
 8002078:	0018      	movs	r0, r3
 800207a:	f7ff ff33 	bl	8001ee4 <__NVIC_EnableIRQ>
}
 800207e:	46c0      	nop			@ (mov r8, r8)
 8002080:	46bd      	mov	sp, r7
 8002082:	b002      	add	sp, #8
 8002084:	bd80      	pop	{r7, pc}

08002086 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002086:	b580      	push	{r7, lr}
 8002088:	b082      	sub	sp, #8
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	0018      	movs	r0, r3
 8002092:	f7ff ffaf 	bl	8001ff4 <SysTick_Config>
 8002096:	0003      	movs	r3, r0
}
 8002098:	0018      	movs	r0, r3
 800209a:	46bd      	mov	sp, r7
 800209c:	b002      	add	sp, #8
 800209e:	bd80      	pop	{r7, pc}

080020a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d101      	bne.n	80020b2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e061      	b.n	8002176 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a32      	ldr	r2, [pc, #200]	@ (8002180 <HAL_DMA_Init+0xe0>)
 80020b8:	4694      	mov	ip, r2
 80020ba:	4463      	add	r3, ip
 80020bc:	2114      	movs	r1, #20
 80020be:	0018      	movs	r0, r3
 80020c0:	f7fe f822 	bl	8000108 <__udivsi3>
 80020c4:	0003      	movs	r3, r0
 80020c6:	009a      	lsls	r2, r3, #2
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	4a2d      	ldr	r2, [pc, #180]	@ (8002184 <HAL_DMA_Init+0xe4>)
 80020d0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2225      	movs	r2, #37	@ 0x25
 80020d6:	2102      	movs	r1, #2
 80020d8:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	4a28      	ldr	r2, [pc, #160]	@ (8002188 <HAL_DMA_Init+0xe8>)
 80020e6:	4013      	ands	r3, r2
 80020e8:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80020f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	691b      	ldr	r3, [r3, #16]
 80020f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	699b      	ldr	r3, [r3, #24]
 8002104:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800210a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6a1b      	ldr	r3, [r3, #32]
 8002110:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002112:	68fa      	ldr	r2, [r7, #12]
 8002114:	4313      	orrs	r3, r2
 8002116:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	68fa      	ldr	r2, [r7, #12]
 800211e:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	689a      	ldr	r2, [r3, #8]
 8002124:	2380      	movs	r3, #128	@ 0x80
 8002126:	01db      	lsls	r3, r3, #7
 8002128:	429a      	cmp	r2, r3
 800212a:	d018      	beq.n	800215e <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800212c:	4b17      	ldr	r3, [pc, #92]	@ (800218c <HAL_DMA_Init+0xec>)
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002134:	211c      	movs	r1, #28
 8002136:	400b      	ands	r3, r1
 8002138:	210f      	movs	r1, #15
 800213a:	4099      	lsls	r1, r3
 800213c:	000b      	movs	r3, r1
 800213e:	43d9      	mvns	r1, r3
 8002140:	4b12      	ldr	r3, [pc, #72]	@ (800218c <HAL_DMA_Init+0xec>)
 8002142:	400a      	ands	r2, r1
 8002144:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002146:	4b11      	ldr	r3, [pc, #68]	@ (800218c <HAL_DMA_Init+0xec>)
 8002148:	6819      	ldr	r1, [r3, #0]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685a      	ldr	r2, [r3, #4]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002152:	201c      	movs	r0, #28
 8002154:	4003      	ands	r3, r0
 8002156:	409a      	lsls	r2, r3
 8002158:	4b0c      	ldr	r3, [pc, #48]	@ (800218c <HAL_DMA_Init+0xec>)
 800215a:	430a      	orrs	r2, r1
 800215c:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2225      	movs	r2, #37	@ 0x25
 8002168:	2101      	movs	r1, #1
 800216a:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2224      	movs	r2, #36	@ 0x24
 8002170:	2100      	movs	r1, #0
 8002172:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002174:	2300      	movs	r3, #0
}
 8002176:	0018      	movs	r0, r3
 8002178:	46bd      	mov	sp, r7
 800217a:	b004      	add	sp, #16
 800217c:	bd80      	pop	{r7, pc}
 800217e:	46c0      	nop			@ (mov r8, r8)
 8002180:	bffdfff8 	.word	0xbffdfff8
 8002184:	40020000 	.word	0x40020000
 8002188:	ffff800f 	.word	0xffff800f
 800218c:	400200a8 	.word	0x400200a8

08002190 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b086      	sub	sp, #24
 8002194:	af00      	add	r7, sp, #0
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	60b9      	str	r1, [r7, #8]
 800219a:	607a      	str	r2, [r7, #4]
 800219c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800219e:	2317      	movs	r3, #23
 80021a0:	18fb      	adds	r3, r7, r3
 80021a2:	2200      	movs	r2, #0
 80021a4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2224      	movs	r2, #36	@ 0x24
 80021aa:	5c9b      	ldrb	r3, [r3, r2]
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d101      	bne.n	80021b4 <HAL_DMA_Start_IT+0x24>
 80021b0:	2302      	movs	r3, #2
 80021b2:	e04f      	b.n	8002254 <HAL_DMA_Start_IT+0xc4>
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2224      	movs	r2, #36	@ 0x24
 80021b8:	2101      	movs	r1, #1
 80021ba:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2225      	movs	r2, #37	@ 0x25
 80021c0:	5c9b      	ldrb	r3, [r3, r2]
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d13a      	bne.n	800223e <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2225      	movs	r2, #37	@ 0x25
 80021cc:	2102      	movs	r1, #2
 80021ce:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2200      	movs	r2, #0
 80021d4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2101      	movs	r1, #1
 80021e2:	438a      	bics	r2, r1
 80021e4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	68b9      	ldr	r1, [r7, #8]
 80021ec:	68f8      	ldr	r0, [r7, #12]
 80021ee:	f000 f8e3 	bl	80023b8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d008      	beq.n	800220c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	210e      	movs	r1, #14
 8002206:	430a      	orrs	r2, r1
 8002208:	601a      	str	r2, [r3, #0]
 800220a:	e00f      	b.n	800222c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2104      	movs	r1, #4
 8002218:	438a      	bics	r2, r1
 800221a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	210a      	movs	r1, #10
 8002228:	430a      	orrs	r2, r1
 800222a:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	2101      	movs	r1, #1
 8002238:	430a      	orrs	r2, r1
 800223a:	601a      	str	r2, [r3, #0]
 800223c:	e007      	b.n	800224e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2224      	movs	r2, #36	@ 0x24
 8002242:	2100      	movs	r1, #0
 8002244:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002246:	2317      	movs	r3, #23
 8002248:	18fb      	adds	r3, r7, r3
 800224a:	2202      	movs	r2, #2
 800224c:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800224e:	2317      	movs	r3, #23
 8002250:	18fb      	adds	r3, r7, r3
 8002252:	781b      	ldrb	r3, [r3, #0]
}
 8002254:	0018      	movs	r0, r3
 8002256:	46bd      	mov	sp, r7
 8002258:	b006      	add	sp, #24
 800225a:	bd80      	pop	{r7, pc}

0800225c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002278:	221c      	movs	r2, #28
 800227a:	4013      	ands	r3, r2
 800227c:	2204      	movs	r2, #4
 800227e:	409a      	lsls	r2, r3
 8002280:	0013      	movs	r3, r2
 8002282:	68fa      	ldr	r2, [r7, #12]
 8002284:	4013      	ands	r3, r2
 8002286:	d026      	beq.n	80022d6 <HAL_DMA_IRQHandler+0x7a>
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	2204      	movs	r2, #4
 800228c:	4013      	ands	r3, r2
 800228e:	d022      	beq.n	80022d6 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2220      	movs	r2, #32
 8002298:	4013      	ands	r3, r2
 800229a:	d107      	bne.n	80022ac <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	2104      	movs	r1, #4
 80022a8:	438a      	bics	r2, r1
 80022aa:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022b0:	221c      	movs	r2, #28
 80022b2:	401a      	ands	r2, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b8:	2104      	movs	r1, #4
 80022ba:	4091      	lsls	r1, r2
 80022bc:	000a      	movs	r2, r1
 80022be:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d100      	bne.n	80022ca <HAL_DMA_IRQHandler+0x6e>
 80022c8:	e071      	b.n	80023ae <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	0010      	movs	r0, r2
 80022d2:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 80022d4:	e06b      	b.n	80023ae <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022da:	221c      	movs	r2, #28
 80022dc:	4013      	ands	r3, r2
 80022de:	2202      	movs	r2, #2
 80022e0:	409a      	lsls	r2, r3
 80022e2:	0013      	movs	r3, r2
 80022e4:	68fa      	ldr	r2, [r7, #12]
 80022e6:	4013      	ands	r3, r2
 80022e8:	d02d      	beq.n	8002346 <HAL_DMA_IRQHandler+0xea>
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	2202      	movs	r2, #2
 80022ee:	4013      	ands	r3, r2
 80022f0:	d029      	beq.n	8002346 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2220      	movs	r2, #32
 80022fa:	4013      	ands	r3, r2
 80022fc:	d10b      	bne.n	8002316 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	210a      	movs	r1, #10
 800230a:	438a      	bics	r2, r1
 800230c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2225      	movs	r2, #37	@ 0x25
 8002312:	2101      	movs	r1, #1
 8002314:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800231a:	221c      	movs	r2, #28
 800231c:	401a      	ands	r2, r3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002322:	2102      	movs	r1, #2
 8002324:	4091      	lsls	r1, r2
 8002326:	000a      	movs	r2, r1
 8002328:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2224      	movs	r2, #36	@ 0x24
 800232e:	2100      	movs	r1, #0
 8002330:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002336:	2b00      	cmp	r3, #0
 8002338:	d039      	beq.n	80023ae <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	0010      	movs	r0, r2
 8002342:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002344:	e033      	b.n	80023ae <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800234a:	221c      	movs	r2, #28
 800234c:	4013      	ands	r3, r2
 800234e:	2208      	movs	r2, #8
 8002350:	409a      	lsls	r2, r3
 8002352:	0013      	movs	r3, r2
 8002354:	68fa      	ldr	r2, [r7, #12]
 8002356:	4013      	ands	r3, r2
 8002358:	d02a      	beq.n	80023b0 <HAL_DMA_IRQHandler+0x154>
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	2208      	movs	r2, #8
 800235e:	4013      	ands	r3, r2
 8002360:	d026      	beq.n	80023b0 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	210e      	movs	r1, #14
 800236e:	438a      	bics	r2, r1
 8002370:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002376:	221c      	movs	r2, #28
 8002378:	401a      	ands	r2, r3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800237e:	2101      	movs	r1, #1
 8002380:	4091      	lsls	r1, r2
 8002382:	000a      	movs	r2, r1
 8002384:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2201      	movs	r2, #1
 800238a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2225      	movs	r2, #37	@ 0x25
 8002390:	2101      	movs	r1, #1
 8002392:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2224      	movs	r2, #36	@ 0x24
 8002398:	2100      	movs	r1, #0
 800239a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d005      	beq.n	80023b0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	0010      	movs	r0, r2
 80023ac:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80023ae:	46c0      	nop			@ (mov r8, r8)
 80023b0:	46c0      	nop			@ (mov r8, r8)
}
 80023b2:	46bd      	mov	sp, r7
 80023b4:	b004      	add	sp, #16
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	60b9      	str	r1, [r7, #8]
 80023c2:	607a      	str	r2, [r7, #4]
 80023c4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ca:	221c      	movs	r2, #28
 80023cc:	401a      	ands	r2, r3
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d2:	2101      	movs	r1, #1
 80023d4:	4091      	lsls	r1, r2
 80023d6:	000a      	movs	r2, r1
 80023d8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	683a      	ldr	r2, [r7, #0]
 80023e0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	2b10      	cmp	r3, #16
 80023e8:	d108      	bne.n	80023fc <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	68ba      	ldr	r2, [r7, #8]
 80023f8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80023fa:	e007      	b.n	800240c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	68ba      	ldr	r2, [r7, #8]
 8002402:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	60da      	str	r2, [r3, #12]
}
 800240c:	46c0      	nop			@ (mov r8, r8)
 800240e:	46bd      	mov	sp, r7
 8002410:	b004      	add	sp, #16
 8002412:	bd80      	pop	{r7, pc}

08002414 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b086      	sub	sp, #24
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800241e:	2300      	movs	r3, #0
 8002420:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002422:	2300      	movs	r3, #0
 8002424:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8002426:	2300      	movs	r3, #0
 8002428:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800242a:	e149      	b.n	80026c0 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2101      	movs	r1, #1
 8002432:	697a      	ldr	r2, [r7, #20]
 8002434:	4091      	lsls	r1, r2
 8002436:	000a      	movs	r2, r1
 8002438:	4013      	ands	r3, r2
 800243a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d100      	bne.n	8002444 <HAL_GPIO_Init+0x30>
 8002442:	e13a      	b.n	80026ba <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	2203      	movs	r2, #3
 800244a:	4013      	ands	r3, r2
 800244c:	2b01      	cmp	r3, #1
 800244e:	d005      	beq.n	800245c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	2203      	movs	r2, #3
 8002456:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002458:	2b02      	cmp	r3, #2
 800245a:	d130      	bne.n	80024be <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	2203      	movs	r2, #3
 8002468:	409a      	lsls	r2, r3
 800246a:	0013      	movs	r3, r2
 800246c:	43da      	mvns	r2, r3
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	4013      	ands	r3, r2
 8002472:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	68da      	ldr	r2, [r3, #12]
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	005b      	lsls	r3, r3, #1
 800247c:	409a      	lsls	r2, r3
 800247e:	0013      	movs	r3, r2
 8002480:	693a      	ldr	r2, [r7, #16]
 8002482:	4313      	orrs	r3, r2
 8002484:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	693a      	ldr	r2, [r7, #16]
 800248a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002492:	2201      	movs	r2, #1
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	409a      	lsls	r2, r3
 8002498:	0013      	movs	r3, r2
 800249a:	43da      	mvns	r2, r3
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	4013      	ands	r3, r2
 80024a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	091b      	lsrs	r3, r3, #4
 80024a8:	2201      	movs	r2, #1
 80024aa:	401a      	ands	r2, r3
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	409a      	lsls	r2, r3
 80024b0:	0013      	movs	r3, r2
 80024b2:	693a      	ldr	r2, [r7, #16]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	2203      	movs	r2, #3
 80024c4:	4013      	ands	r3, r2
 80024c6:	2b03      	cmp	r3, #3
 80024c8:	d017      	beq.n	80024fa <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	005b      	lsls	r3, r3, #1
 80024d4:	2203      	movs	r2, #3
 80024d6:	409a      	lsls	r2, r3
 80024d8:	0013      	movs	r3, r2
 80024da:	43da      	mvns	r2, r3
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	4013      	ands	r3, r2
 80024e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	689a      	ldr	r2, [r3, #8]
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	005b      	lsls	r3, r3, #1
 80024ea:	409a      	lsls	r2, r3
 80024ec:	0013      	movs	r3, r2
 80024ee:	693a      	ldr	r2, [r7, #16]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	693a      	ldr	r2, [r7, #16]
 80024f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	2203      	movs	r2, #3
 8002500:	4013      	ands	r3, r2
 8002502:	2b02      	cmp	r3, #2
 8002504:	d123      	bne.n	800254e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	08da      	lsrs	r2, r3, #3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	3208      	adds	r2, #8
 800250e:	0092      	lsls	r2, r2, #2
 8002510:	58d3      	ldr	r3, [r2, r3]
 8002512:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	2207      	movs	r2, #7
 8002518:	4013      	ands	r3, r2
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	220f      	movs	r2, #15
 800251e:	409a      	lsls	r2, r3
 8002520:	0013      	movs	r3, r2
 8002522:	43da      	mvns	r2, r3
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	4013      	ands	r3, r2
 8002528:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	691a      	ldr	r2, [r3, #16]
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	2107      	movs	r1, #7
 8002532:	400b      	ands	r3, r1
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	409a      	lsls	r2, r3
 8002538:	0013      	movs	r3, r2
 800253a:	693a      	ldr	r2, [r7, #16]
 800253c:	4313      	orrs	r3, r2
 800253e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	08da      	lsrs	r2, r3, #3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	3208      	adds	r2, #8
 8002548:	0092      	lsls	r2, r2, #2
 800254a:	6939      	ldr	r1, [r7, #16]
 800254c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	005b      	lsls	r3, r3, #1
 8002558:	2203      	movs	r2, #3
 800255a:	409a      	lsls	r2, r3
 800255c:	0013      	movs	r3, r2
 800255e:	43da      	mvns	r2, r3
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	4013      	ands	r3, r2
 8002564:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	2203      	movs	r2, #3
 800256c:	401a      	ands	r2, r3
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	005b      	lsls	r3, r3, #1
 8002572:	409a      	lsls	r2, r3
 8002574:	0013      	movs	r3, r2
 8002576:	693a      	ldr	r2, [r7, #16]
 8002578:	4313      	orrs	r3, r2
 800257a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	693a      	ldr	r2, [r7, #16]
 8002580:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	685a      	ldr	r2, [r3, #4]
 8002586:	23c0      	movs	r3, #192	@ 0xc0
 8002588:	029b      	lsls	r3, r3, #10
 800258a:	4013      	ands	r3, r2
 800258c:	d100      	bne.n	8002590 <HAL_GPIO_Init+0x17c>
 800258e:	e094      	b.n	80026ba <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002590:	4b51      	ldr	r3, [pc, #324]	@ (80026d8 <HAL_GPIO_Init+0x2c4>)
 8002592:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002594:	4b50      	ldr	r3, [pc, #320]	@ (80026d8 <HAL_GPIO_Init+0x2c4>)
 8002596:	2101      	movs	r1, #1
 8002598:	430a      	orrs	r2, r1
 800259a:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800259c:	4a4f      	ldr	r2, [pc, #316]	@ (80026dc <HAL_GPIO_Init+0x2c8>)
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	089b      	lsrs	r3, r3, #2
 80025a2:	3302      	adds	r3, #2
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	589b      	ldr	r3, [r3, r2]
 80025a8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	2203      	movs	r2, #3
 80025ae:	4013      	ands	r3, r2
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	220f      	movs	r2, #15
 80025b4:	409a      	lsls	r2, r3
 80025b6:	0013      	movs	r3, r2
 80025b8:	43da      	mvns	r2, r3
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	4013      	ands	r3, r2
 80025be:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	23a0      	movs	r3, #160	@ 0xa0
 80025c4:	05db      	lsls	r3, r3, #23
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d013      	beq.n	80025f2 <HAL_GPIO_Init+0x1de>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a44      	ldr	r2, [pc, #272]	@ (80026e0 <HAL_GPIO_Init+0x2cc>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d00d      	beq.n	80025ee <HAL_GPIO_Init+0x1da>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a43      	ldr	r2, [pc, #268]	@ (80026e4 <HAL_GPIO_Init+0x2d0>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d007      	beq.n	80025ea <HAL_GPIO_Init+0x1d6>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a42      	ldr	r2, [pc, #264]	@ (80026e8 <HAL_GPIO_Init+0x2d4>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d101      	bne.n	80025e6 <HAL_GPIO_Init+0x1d2>
 80025e2:	2305      	movs	r3, #5
 80025e4:	e006      	b.n	80025f4 <HAL_GPIO_Init+0x1e0>
 80025e6:	2306      	movs	r3, #6
 80025e8:	e004      	b.n	80025f4 <HAL_GPIO_Init+0x1e0>
 80025ea:	2302      	movs	r3, #2
 80025ec:	e002      	b.n	80025f4 <HAL_GPIO_Init+0x1e0>
 80025ee:	2301      	movs	r3, #1
 80025f0:	e000      	b.n	80025f4 <HAL_GPIO_Init+0x1e0>
 80025f2:	2300      	movs	r3, #0
 80025f4:	697a      	ldr	r2, [r7, #20]
 80025f6:	2103      	movs	r1, #3
 80025f8:	400a      	ands	r2, r1
 80025fa:	0092      	lsls	r2, r2, #2
 80025fc:	4093      	lsls	r3, r2
 80025fe:	693a      	ldr	r2, [r7, #16]
 8002600:	4313      	orrs	r3, r2
 8002602:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002604:	4935      	ldr	r1, [pc, #212]	@ (80026dc <HAL_GPIO_Init+0x2c8>)
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	089b      	lsrs	r3, r3, #2
 800260a:	3302      	adds	r3, #2
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	693a      	ldr	r2, [r7, #16]
 8002610:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002612:	4b36      	ldr	r3, [pc, #216]	@ (80026ec <HAL_GPIO_Init+0x2d8>)
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	43da      	mvns	r2, r3
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	4013      	ands	r3, r2
 8002620:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	685a      	ldr	r2, [r3, #4]
 8002626:	2380      	movs	r3, #128	@ 0x80
 8002628:	035b      	lsls	r3, r3, #13
 800262a:	4013      	ands	r3, r2
 800262c:	d003      	beq.n	8002636 <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 800262e:	693a      	ldr	r2, [r7, #16]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	4313      	orrs	r3, r2
 8002634:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002636:	4b2d      	ldr	r3, [pc, #180]	@ (80026ec <HAL_GPIO_Init+0x2d8>)
 8002638:	693a      	ldr	r2, [r7, #16]
 800263a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800263c:	4b2b      	ldr	r3, [pc, #172]	@ (80026ec <HAL_GPIO_Init+0x2d8>)
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	43da      	mvns	r2, r3
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	4013      	ands	r3, r2
 800264a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	685a      	ldr	r2, [r3, #4]
 8002650:	2380      	movs	r3, #128	@ 0x80
 8002652:	039b      	lsls	r3, r3, #14
 8002654:	4013      	ands	r3, r2
 8002656:	d003      	beq.n	8002660 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 8002658:	693a      	ldr	r2, [r7, #16]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	4313      	orrs	r3, r2
 800265e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002660:	4b22      	ldr	r3, [pc, #136]	@ (80026ec <HAL_GPIO_Init+0x2d8>)
 8002662:	693a      	ldr	r2, [r7, #16]
 8002664:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8002666:	4b21      	ldr	r3, [pc, #132]	@ (80026ec <HAL_GPIO_Init+0x2d8>)
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	43da      	mvns	r2, r3
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	4013      	ands	r3, r2
 8002674:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	685a      	ldr	r2, [r3, #4]
 800267a:	2380      	movs	r3, #128	@ 0x80
 800267c:	029b      	lsls	r3, r3, #10
 800267e:	4013      	ands	r3, r2
 8002680:	d003      	beq.n	800268a <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8002682:	693a      	ldr	r2, [r7, #16]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	4313      	orrs	r3, r2
 8002688:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800268a:	4b18      	ldr	r3, [pc, #96]	@ (80026ec <HAL_GPIO_Init+0x2d8>)
 800268c:	693a      	ldr	r2, [r7, #16]
 800268e:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002690:	4b16      	ldr	r3, [pc, #88]	@ (80026ec <HAL_GPIO_Init+0x2d8>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	43da      	mvns	r2, r3
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	4013      	ands	r3, r2
 800269e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	685a      	ldr	r2, [r3, #4]
 80026a4:	2380      	movs	r3, #128	@ 0x80
 80026a6:	025b      	lsls	r3, r3, #9
 80026a8:	4013      	ands	r3, r2
 80026aa:	d003      	beq.n	80026b4 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 80026ac:	693a      	ldr	r2, [r7, #16]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80026b4:	4b0d      	ldr	r3, [pc, #52]	@ (80026ec <HAL_GPIO_Init+0x2d8>)
 80026b6:	693a      	ldr	r2, [r7, #16]
 80026b8:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	3301      	adds	r3, #1
 80026be:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	40da      	lsrs	r2, r3
 80026c8:	1e13      	subs	r3, r2, #0
 80026ca:	d000      	beq.n	80026ce <HAL_GPIO_Init+0x2ba>
 80026cc:	e6ae      	b.n	800242c <HAL_GPIO_Init+0x18>
  }
}
 80026ce:	46c0      	nop			@ (mov r8, r8)
 80026d0:	46c0      	nop			@ (mov r8, r8)
 80026d2:	46bd      	mov	sp, r7
 80026d4:	b006      	add	sp, #24
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	40021000 	.word	0x40021000
 80026dc:	40010000 	.word	0x40010000
 80026e0:	50000400 	.word	0x50000400
 80026e4:	50000800 	.word	0x50000800
 80026e8:	50001c00 	.word	0x50001c00
 80026ec:	40010400 	.word	0x40010400

080026f0 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	000a      	movs	r2, r1
 80026fa:	1cbb      	adds	r3, r7, #2
 80026fc:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	691b      	ldr	r3, [r3, #16]
 8002702:	1cba      	adds	r2, r7, #2
 8002704:	8812      	ldrh	r2, [r2, #0]
 8002706:	4013      	ands	r3, r2
 8002708:	d004      	beq.n	8002714 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800270a:	230f      	movs	r3, #15
 800270c:	18fb      	adds	r3, r7, r3
 800270e:	2201      	movs	r2, #1
 8002710:	701a      	strb	r2, [r3, #0]
 8002712:	e003      	b.n	800271c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002714:	230f      	movs	r3, #15
 8002716:	18fb      	adds	r3, r7, r3
 8002718:	2200      	movs	r2, #0
 800271a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800271c:	230f      	movs	r3, #15
 800271e:	18fb      	adds	r3, r7, r3
 8002720:	781b      	ldrb	r3, [r3, #0]
}
 8002722:	0018      	movs	r0, r3
 8002724:	46bd      	mov	sp, r7
 8002726:	b004      	add	sp, #16
 8002728:	bd80      	pop	{r7, pc}

0800272a <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800272a:	b580      	push	{r7, lr}
 800272c:	b082      	sub	sp, #8
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
 8002732:	0008      	movs	r0, r1
 8002734:	0011      	movs	r1, r2
 8002736:	1cbb      	adds	r3, r7, #2
 8002738:	1c02      	adds	r2, r0, #0
 800273a:	801a      	strh	r2, [r3, #0]
 800273c:	1c7b      	adds	r3, r7, #1
 800273e:	1c0a      	adds	r2, r1, #0
 8002740:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002742:	1c7b      	adds	r3, r7, #1
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d004      	beq.n	8002754 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800274a:	1cbb      	adds	r3, r7, #2
 800274c:	881a      	ldrh	r2, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002752:	e003      	b.n	800275c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8002754:	1cbb      	adds	r3, r7, #2
 8002756:	881a      	ldrh	r2, [r3, #0]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800275c:	46c0      	nop			@ (mov r8, r8)
 800275e:	46bd      	mov	sp, r7
 8002760:	b002      	add	sp, #8
 8002762:	bd80      	pop	{r7, pc}

08002764 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d101      	bne.n	8002776 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e082      	b.n	800287c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2241      	movs	r2, #65	@ 0x41
 800277a:	5c9b      	ldrb	r3, [r3, r2]
 800277c:	b2db      	uxtb	r3, r3
 800277e:	2b00      	cmp	r3, #0
 8002780:	d107      	bne.n	8002792 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2240      	movs	r2, #64	@ 0x40
 8002786:	2100      	movs	r1, #0
 8002788:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	0018      	movs	r0, r3
 800278e:	f7fe fe75 	bl	800147c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2241      	movs	r2, #65	@ 0x41
 8002796:	2124      	movs	r1, #36	@ 0x24
 8002798:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2101      	movs	r1, #1
 80027a6:	438a      	bics	r2, r1
 80027a8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685a      	ldr	r2, [r3, #4]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4934      	ldr	r1, [pc, #208]	@ (8002884 <HAL_I2C_Init+0x120>)
 80027b4:	400a      	ands	r2, r1
 80027b6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	689a      	ldr	r2, [r3, #8]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4931      	ldr	r1, [pc, #196]	@ (8002888 <HAL_I2C_Init+0x124>)
 80027c4:	400a      	ands	r2, r1
 80027c6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d108      	bne.n	80027e2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	689a      	ldr	r2, [r3, #8]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2180      	movs	r1, #128	@ 0x80
 80027da:	0209      	lsls	r1, r1, #8
 80027dc:	430a      	orrs	r2, r1
 80027de:	609a      	str	r2, [r3, #8]
 80027e0:	e007      	b.n	80027f2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	689a      	ldr	r2, [r3, #8]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	2184      	movs	r1, #132	@ 0x84
 80027ec:	0209      	lsls	r1, r1, #8
 80027ee:	430a      	orrs	r2, r1
 80027f0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d104      	bne.n	8002804 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	2280      	movs	r2, #128	@ 0x80
 8002800:	0112      	lsls	r2, r2, #4
 8002802:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	685a      	ldr	r2, [r3, #4]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	491f      	ldr	r1, [pc, #124]	@ (800288c <HAL_I2C_Init+0x128>)
 8002810:	430a      	orrs	r2, r1
 8002812:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	68da      	ldr	r2, [r3, #12]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	491a      	ldr	r1, [pc, #104]	@ (8002888 <HAL_I2C_Init+0x124>)
 8002820:	400a      	ands	r2, r1
 8002822:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	691a      	ldr	r2, [r3, #16]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	695b      	ldr	r3, [r3, #20]
 800282c:	431a      	orrs	r2, r3
 800282e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	699b      	ldr	r3, [r3, #24]
 8002834:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	430a      	orrs	r2, r1
 800283c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	69d9      	ldr	r1, [r3, #28]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6a1a      	ldr	r2, [r3, #32]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	430a      	orrs	r2, r1
 800284c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2101      	movs	r1, #1
 800285a:	430a      	orrs	r2, r1
 800285c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2241      	movs	r2, #65	@ 0x41
 8002868:	2120      	movs	r1, #32
 800286a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2242      	movs	r2, #66	@ 0x42
 8002876:	2100      	movs	r1, #0
 8002878:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800287a:	2300      	movs	r3, #0
}
 800287c:	0018      	movs	r0, r3
 800287e:	46bd      	mov	sp, r7
 8002880:	b002      	add	sp, #8
 8002882:	bd80      	pop	{r7, pc}
 8002884:	f0ffffff 	.word	0xf0ffffff
 8002888:	ffff7fff 	.word	0xffff7fff
 800288c:	02008000 	.word	0x02008000

08002890 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002890:	b590      	push	{r4, r7, lr}
 8002892:	b089      	sub	sp, #36	@ 0x24
 8002894:	af02      	add	r7, sp, #8
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	0008      	movs	r0, r1
 800289a:	607a      	str	r2, [r7, #4]
 800289c:	0019      	movs	r1, r3
 800289e:	230a      	movs	r3, #10
 80028a0:	18fb      	adds	r3, r7, r3
 80028a2:	1c02      	adds	r2, r0, #0
 80028a4:	801a      	strh	r2, [r3, #0]
 80028a6:	2308      	movs	r3, #8
 80028a8:	18fb      	adds	r3, r7, r3
 80028aa:	1c0a      	adds	r2, r1, #0
 80028ac:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2241      	movs	r2, #65	@ 0x41
 80028b2:	5c9b      	ldrb	r3, [r3, r2]
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	2b20      	cmp	r3, #32
 80028b8:	d000      	beq.n	80028bc <HAL_I2C_Master_Transmit+0x2c>
 80028ba:	e0e7      	b.n	8002a8c <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2240      	movs	r2, #64	@ 0x40
 80028c0:	5c9b      	ldrb	r3, [r3, r2]
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d101      	bne.n	80028ca <HAL_I2C_Master_Transmit+0x3a>
 80028c6:	2302      	movs	r3, #2
 80028c8:	e0e1      	b.n	8002a8e <HAL_I2C_Master_Transmit+0x1fe>
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2240      	movs	r2, #64	@ 0x40
 80028ce:	2101      	movs	r1, #1
 80028d0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80028d2:	f7ff fad9 	bl	8001e88 <HAL_GetTick>
 80028d6:	0003      	movs	r3, r0
 80028d8:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80028da:	2380      	movs	r3, #128	@ 0x80
 80028dc:	0219      	lsls	r1, r3, #8
 80028de:	68f8      	ldr	r0, [r7, #12]
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	9300      	str	r3, [sp, #0]
 80028e4:	2319      	movs	r3, #25
 80028e6:	2201      	movs	r2, #1
 80028e8:	f000 fa04 	bl	8002cf4 <I2C_WaitOnFlagUntilTimeout>
 80028ec:	1e03      	subs	r3, r0, #0
 80028ee:	d001      	beq.n	80028f4 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e0cc      	b.n	8002a8e <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2241      	movs	r2, #65	@ 0x41
 80028f8:	2121      	movs	r1, #33	@ 0x21
 80028fa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2242      	movs	r2, #66	@ 0x42
 8002900:	2110      	movs	r1, #16
 8002902:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2200      	movs	r2, #0
 8002908:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2208      	movs	r2, #8
 8002914:	18ba      	adds	r2, r7, r2
 8002916:	8812      	ldrh	r2, [r2, #0]
 8002918:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2200      	movs	r2, #0
 800291e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002924:	b29b      	uxth	r3, r3
 8002926:	2bff      	cmp	r3, #255	@ 0xff
 8002928:	d911      	bls.n	800294e <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	22ff      	movs	r2, #255	@ 0xff
 800292e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002934:	b2da      	uxtb	r2, r3
 8002936:	2380      	movs	r3, #128	@ 0x80
 8002938:	045c      	lsls	r4, r3, #17
 800293a:	230a      	movs	r3, #10
 800293c:	18fb      	adds	r3, r7, r3
 800293e:	8819      	ldrh	r1, [r3, #0]
 8002940:	68f8      	ldr	r0, [r7, #12]
 8002942:	4b55      	ldr	r3, [pc, #340]	@ (8002a98 <HAL_I2C_Master_Transmit+0x208>)
 8002944:	9300      	str	r3, [sp, #0]
 8002946:	0023      	movs	r3, r4
 8002948:	f000 fc26 	bl	8003198 <I2C_TransferConfig>
 800294c:	e075      	b.n	8002a3a <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002952:	b29a      	uxth	r2, r3
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800295c:	b2da      	uxtb	r2, r3
 800295e:	2380      	movs	r3, #128	@ 0x80
 8002960:	049c      	lsls	r4, r3, #18
 8002962:	230a      	movs	r3, #10
 8002964:	18fb      	adds	r3, r7, r3
 8002966:	8819      	ldrh	r1, [r3, #0]
 8002968:	68f8      	ldr	r0, [r7, #12]
 800296a:	4b4b      	ldr	r3, [pc, #300]	@ (8002a98 <HAL_I2C_Master_Transmit+0x208>)
 800296c:	9300      	str	r3, [sp, #0]
 800296e:	0023      	movs	r3, r4
 8002970:	f000 fc12 	bl	8003198 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002974:	e061      	b.n	8002a3a <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002976:	697a      	ldr	r2, [r7, #20]
 8002978:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	0018      	movs	r0, r3
 800297e:	f000 fa07 	bl	8002d90 <I2C_WaitOnTXISFlagUntilTimeout>
 8002982:	1e03      	subs	r3, r0, #0
 8002984:	d001      	beq.n	800298a <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e081      	b.n	8002a8e <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800298e:	781a      	ldrb	r2, [r3, #0]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800299a:	1c5a      	adds	r2, r3, #1
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	3b01      	subs	r3, #1
 80029a8:	b29a      	uxth	r2, r3
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029b2:	3b01      	subs	r3, #1
 80029b4:	b29a      	uxth	r2, r3
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029be:	b29b      	uxth	r3, r3
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d03a      	beq.n	8002a3a <HAL_I2C_Master_Transmit+0x1aa>
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d136      	bne.n	8002a3a <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80029cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80029ce:	68f8      	ldr	r0, [r7, #12]
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	9300      	str	r3, [sp, #0]
 80029d4:	0013      	movs	r3, r2
 80029d6:	2200      	movs	r2, #0
 80029d8:	2180      	movs	r1, #128	@ 0x80
 80029da:	f000 f98b 	bl	8002cf4 <I2C_WaitOnFlagUntilTimeout>
 80029de:	1e03      	subs	r3, r0, #0
 80029e0:	d001      	beq.n	80029e6 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e053      	b.n	8002a8e <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	2bff      	cmp	r3, #255	@ 0xff
 80029ee:	d911      	bls.n	8002a14 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	22ff      	movs	r2, #255	@ 0xff
 80029f4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029fa:	b2da      	uxtb	r2, r3
 80029fc:	2380      	movs	r3, #128	@ 0x80
 80029fe:	045c      	lsls	r4, r3, #17
 8002a00:	230a      	movs	r3, #10
 8002a02:	18fb      	adds	r3, r7, r3
 8002a04:	8819      	ldrh	r1, [r3, #0]
 8002a06:	68f8      	ldr	r0, [r7, #12]
 8002a08:	2300      	movs	r3, #0
 8002a0a:	9300      	str	r3, [sp, #0]
 8002a0c:	0023      	movs	r3, r4
 8002a0e:	f000 fbc3 	bl	8003198 <I2C_TransferConfig>
 8002a12:	e012      	b.n	8002a3a <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a18:	b29a      	uxth	r2, r3
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a22:	b2da      	uxtb	r2, r3
 8002a24:	2380      	movs	r3, #128	@ 0x80
 8002a26:	049c      	lsls	r4, r3, #18
 8002a28:	230a      	movs	r3, #10
 8002a2a:	18fb      	adds	r3, r7, r3
 8002a2c:	8819      	ldrh	r1, [r3, #0]
 8002a2e:	68f8      	ldr	r0, [r7, #12]
 8002a30:	2300      	movs	r3, #0
 8002a32:	9300      	str	r3, [sp, #0]
 8002a34:	0023      	movs	r3, r4
 8002a36:	f000 fbaf 	bl	8003198 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d198      	bne.n	8002976 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a44:	697a      	ldr	r2, [r7, #20]
 8002a46:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	0018      	movs	r0, r3
 8002a4c:	f000 f9e6 	bl	8002e1c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002a50:	1e03      	subs	r3, r0, #0
 8002a52:	d001      	beq.n	8002a58 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e01a      	b.n	8002a8e <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2220      	movs	r2, #32
 8002a5e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	685a      	ldr	r2, [r3, #4]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	490c      	ldr	r1, [pc, #48]	@ (8002a9c <HAL_I2C_Master_Transmit+0x20c>)
 8002a6c:	400a      	ands	r2, r1
 8002a6e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2241      	movs	r2, #65	@ 0x41
 8002a74:	2120      	movs	r1, #32
 8002a76:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2242      	movs	r2, #66	@ 0x42
 8002a7c:	2100      	movs	r1, #0
 8002a7e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2240      	movs	r2, #64	@ 0x40
 8002a84:	2100      	movs	r1, #0
 8002a86:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	e000      	b.n	8002a8e <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8002a8c:	2302      	movs	r3, #2
  }
}
 8002a8e:	0018      	movs	r0, r3
 8002a90:	46bd      	mov	sp, r7
 8002a92:	b007      	add	sp, #28
 8002a94:	bd90      	pop	{r4, r7, pc}
 8002a96:	46c0      	nop			@ (mov r8, r8)
 8002a98:	80002000 	.word	0x80002000
 8002a9c:	fe00e800 	.word	0xfe00e800

08002aa0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002aa0:	b590      	push	{r4, r7, lr}
 8002aa2:	b089      	sub	sp, #36	@ 0x24
 8002aa4:	af02      	add	r7, sp, #8
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	0008      	movs	r0, r1
 8002aaa:	607a      	str	r2, [r7, #4]
 8002aac:	0019      	movs	r1, r3
 8002aae:	230a      	movs	r3, #10
 8002ab0:	18fb      	adds	r3, r7, r3
 8002ab2:	1c02      	adds	r2, r0, #0
 8002ab4:	801a      	strh	r2, [r3, #0]
 8002ab6:	2308      	movs	r3, #8
 8002ab8:	18fb      	adds	r3, r7, r3
 8002aba:	1c0a      	adds	r2, r1, #0
 8002abc:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2241      	movs	r2, #65	@ 0x41
 8002ac2:	5c9b      	ldrb	r3, [r3, r2]
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	2b20      	cmp	r3, #32
 8002ac8:	d000      	beq.n	8002acc <HAL_I2C_Master_Receive+0x2c>
 8002aca:	e0e8      	b.n	8002c9e <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2240      	movs	r2, #64	@ 0x40
 8002ad0:	5c9b      	ldrb	r3, [r3, r2]
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d101      	bne.n	8002ada <HAL_I2C_Master_Receive+0x3a>
 8002ad6:	2302      	movs	r3, #2
 8002ad8:	e0e2      	b.n	8002ca0 <HAL_I2C_Master_Receive+0x200>
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2240      	movs	r2, #64	@ 0x40
 8002ade:	2101      	movs	r1, #1
 8002ae0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002ae2:	f7ff f9d1 	bl	8001e88 <HAL_GetTick>
 8002ae6:	0003      	movs	r3, r0
 8002ae8:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002aea:	2380      	movs	r3, #128	@ 0x80
 8002aec:	0219      	lsls	r1, r3, #8
 8002aee:	68f8      	ldr	r0, [r7, #12]
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	9300      	str	r3, [sp, #0]
 8002af4:	2319      	movs	r3, #25
 8002af6:	2201      	movs	r2, #1
 8002af8:	f000 f8fc 	bl	8002cf4 <I2C_WaitOnFlagUntilTimeout>
 8002afc:	1e03      	subs	r3, r0, #0
 8002afe:	d001      	beq.n	8002b04 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e0cd      	b.n	8002ca0 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2241      	movs	r2, #65	@ 0x41
 8002b08:	2122      	movs	r1, #34	@ 0x22
 8002b0a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2242      	movs	r2, #66	@ 0x42
 8002b10:	2110      	movs	r1, #16
 8002b12:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2200      	movs	r2, #0
 8002b18:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2208      	movs	r2, #8
 8002b24:	18ba      	adds	r2, r7, r2
 8002b26:	8812      	ldrh	r2, [r2, #0]
 8002b28:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	2bff      	cmp	r3, #255	@ 0xff
 8002b38:	d911      	bls.n	8002b5e <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	22ff      	movs	r2, #255	@ 0xff
 8002b3e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b44:	b2da      	uxtb	r2, r3
 8002b46:	2380      	movs	r3, #128	@ 0x80
 8002b48:	045c      	lsls	r4, r3, #17
 8002b4a:	230a      	movs	r3, #10
 8002b4c:	18fb      	adds	r3, r7, r3
 8002b4e:	8819      	ldrh	r1, [r3, #0]
 8002b50:	68f8      	ldr	r0, [r7, #12]
 8002b52:	4b55      	ldr	r3, [pc, #340]	@ (8002ca8 <HAL_I2C_Master_Receive+0x208>)
 8002b54:	9300      	str	r3, [sp, #0]
 8002b56:	0023      	movs	r3, r4
 8002b58:	f000 fb1e 	bl	8003198 <I2C_TransferConfig>
 8002b5c:	e076      	b.n	8002c4c <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b62:	b29a      	uxth	r2, r3
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b6c:	b2da      	uxtb	r2, r3
 8002b6e:	2380      	movs	r3, #128	@ 0x80
 8002b70:	049c      	lsls	r4, r3, #18
 8002b72:	230a      	movs	r3, #10
 8002b74:	18fb      	adds	r3, r7, r3
 8002b76:	8819      	ldrh	r1, [r3, #0]
 8002b78:	68f8      	ldr	r0, [r7, #12]
 8002b7a:	4b4b      	ldr	r3, [pc, #300]	@ (8002ca8 <HAL_I2C_Master_Receive+0x208>)
 8002b7c:	9300      	str	r3, [sp, #0]
 8002b7e:	0023      	movs	r3, r4
 8002b80:	f000 fb0a 	bl	8003198 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002b84:	e062      	b.n	8002c4c <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b86:	697a      	ldr	r2, [r7, #20]
 8002b88:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	0018      	movs	r0, r3
 8002b8e:	f000 f989 	bl	8002ea4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b92:	1e03      	subs	r3, r0, #0
 8002b94:	d001      	beq.n	8002b9a <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e082      	b.n	8002ca0 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba4:	b2d2      	uxtb	r2, r2
 8002ba6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bac:	1c5a      	adds	r2, r3, #1
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	b29a      	uxth	r2, r3
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	3b01      	subs	r3, #1
 8002bc6:	b29a      	uxth	r2, r3
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d03a      	beq.n	8002c4c <HAL_I2C_Master_Receive+0x1ac>
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d136      	bne.n	8002c4c <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002bde:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002be0:	68f8      	ldr	r0, [r7, #12]
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	9300      	str	r3, [sp, #0]
 8002be6:	0013      	movs	r3, r2
 8002be8:	2200      	movs	r2, #0
 8002bea:	2180      	movs	r1, #128	@ 0x80
 8002bec:	f000 f882 	bl	8002cf4 <I2C_WaitOnFlagUntilTimeout>
 8002bf0:	1e03      	subs	r3, r0, #0
 8002bf2:	d001      	beq.n	8002bf8 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e053      	b.n	8002ca0 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	2bff      	cmp	r3, #255	@ 0xff
 8002c00:	d911      	bls.n	8002c26 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	22ff      	movs	r2, #255	@ 0xff
 8002c06:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c0c:	b2da      	uxtb	r2, r3
 8002c0e:	2380      	movs	r3, #128	@ 0x80
 8002c10:	045c      	lsls	r4, r3, #17
 8002c12:	230a      	movs	r3, #10
 8002c14:	18fb      	adds	r3, r7, r3
 8002c16:	8819      	ldrh	r1, [r3, #0]
 8002c18:	68f8      	ldr	r0, [r7, #12]
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	9300      	str	r3, [sp, #0]
 8002c1e:	0023      	movs	r3, r4
 8002c20:	f000 faba 	bl	8003198 <I2C_TransferConfig>
 8002c24:	e012      	b.n	8002c4c <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c2a:	b29a      	uxth	r2, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c34:	b2da      	uxtb	r2, r3
 8002c36:	2380      	movs	r3, #128	@ 0x80
 8002c38:	049c      	lsls	r4, r3, #18
 8002c3a:	230a      	movs	r3, #10
 8002c3c:	18fb      	adds	r3, r7, r3
 8002c3e:	8819      	ldrh	r1, [r3, #0]
 8002c40:	68f8      	ldr	r0, [r7, #12]
 8002c42:	2300      	movs	r3, #0
 8002c44:	9300      	str	r3, [sp, #0]
 8002c46:	0023      	movs	r3, r4
 8002c48:	f000 faa6 	bl	8003198 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d197      	bne.n	8002b86 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c56:	697a      	ldr	r2, [r7, #20]
 8002c58:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	0018      	movs	r0, r3
 8002c5e:	f000 f8dd 	bl	8002e1c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002c62:	1e03      	subs	r3, r0, #0
 8002c64:	d001      	beq.n	8002c6a <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e01a      	b.n	8002ca0 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	2220      	movs	r2, #32
 8002c70:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	685a      	ldr	r2, [r3, #4]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	490b      	ldr	r1, [pc, #44]	@ (8002cac <HAL_I2C_Master_Receive+0x20c>)
 8002c7e:	400a      	ands	r2, r1
 8002c80:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2241      	movs	r2, #65	@ 0x41
 8002c86:	2120      	movs	r1, #32
 8002c88:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2242      	movs	r2, #66	@ 0x42
 8002c8e:	2100      	movs	r1, #0
 8002c90:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2240      	movs	r2, #64	@ 0x40
 8002c96:	2100      	movs	r1, #0
 8002c98:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	e000      	b.n	8002ca0 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8002c9e:	2302      	movs	r3, #2
  }
}
 8002ca0:	0018      	movs	r0, r3
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	b007      	add	sp, #28
 8002ca6:	bd90      	pop	{r4, r7, pc}
 8002ca8:	80002400 	.word	0x80002400
 8002cac:	fe00e800 	.word	0xfe00e800

08002cb0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	2202      	movs	r2, #2
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d103      	bne.n	8002cce <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	699b      	ldr	r3, [r3, #24]
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d007      	beq.n	8002cec <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	699a      	ldr	r2, [r3, #24]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	2101      	movs	r1, #1
 8002ce8:	430a      	orrs	r2, r1
 8002cea:	619a      	str	r2, [r3, #24]
  }
}
 8002cec:	46c0      	nop			@ (mov r8, r8)
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	b002      	add	sp, #8
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	603b      	str	r3, [r7, #0]
 8002d00:	1dfb      	adds	r3, r7, #7
 8002d02:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d04:	e030      	b.n	8002d68 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	3301      	adds	r3, #1
 8002d0a:	d02d      	beq.n	8002d68 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d0c:	f7ff f8bc 	bl	8001e88 <HAL_GetTick>
 8002d10:	0002      	movs	r2, r0
 8002d12:	69bb      	ldr	r3, [r7, #24]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	683a      	ldr	r2, [r7, #0]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d302      	bcc.n	8002d22 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d122      	bne.n	8002d68 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	699b      	ldr	r3, [r3, #24]
 8002d28:	68ba      	ldr	r2, [r7, #8]
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	68ba      	ldr	r2, [r7, #8]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	425a      	negs	r2, r3
 8002d32:	4153      	adcs	r3, r2
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	001a      	movs	r2, r3
 8002d38:	1dfb      	adds	r3, r7, #7
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d113      	bne.n	8002d68 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d44:	2220      	movs	r2, #32
 8002d46:	431a      	orrs	r2, r3
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2241      	movs	r2, #65	@ 0x41
 8002d50:	2120      	movs	r1, #32
 8002d52:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2242      	movs	r2, #66	@ 0x42
 8002d58:	2100      	movs	r1, #0
 8002d5a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2240      	movs	r2, #64	@ 0x40
 8002d60:	2100      	movs	r1, #0
 8002d62:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e00f      	b.n	8002d88 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	699b      	ldr	r3, [r3, #24]
 8002d6e:	68ba      	ldr	r2, [r7, #8]
 8002d70:	4013      	ands	r3, r2
 8002d72:	68ba      	ldr	r2, [r7, #8]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	425a      	negs	r2, r3
 8002d78:	4153      	adcs	r3, r2
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	001a      	movs	r2, r3
 8002d7e:	1dfb      	adds	r3, r7, #7
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d0bf      	beq.n	8002d06 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d86:	2300      	movs	r3, #0
}
 8002d88:	0018      	movs	r0, r3
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	b004      	add	sp, #16
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002d9c:	e032      	b.n	8002e04 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	68b9      	ldr	r1, [r7, #8]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	0018      	movs	r0, r3
 8002da6:	f000 f8ff 	bl	8002fa8 <I2C_IsErrorOccurred>
 8002daa:	1e03      	subs	r3, r0, #0
 8002dac:	d001      	beq.n	8002db2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e030      	b.n	8002e14 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	3301      	adds	r3, #1
 8002db6:	d025      	beq.n	8002e04 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002db8:	f7ff f866 	bl	8001e88 <HAL_GetTick>
 8002dbc:	0002      	movs	r2, r0
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	68ba      	ldr	r2, [r7, #8]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d302      	bcc.n	8002dce <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d11a      	bne.n	8002e04 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	699b      	ldr	r3, [r3, #24]
 8002dd4:	2202      	movs	r2, #2
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d013      	beq.n	8002e04 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002de0:	2220      	movs	r2, #32
 8002de2:	431a      	orrs	r2, r3
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2241      	movs	r2, #65	@ 0x41
 8002dec:	2120      	movs	r1, #32
 8002dee:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2242      	movs	r2, #66	@ 0x42
 8002df4:	2100      	movs	r1, #0
 8002df6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2240      	movs	r2, #64	@ 0x40
 8002dfc:	2100      	movs	r1, #0
 8002dfe:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e007      	b.n	8002e14 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	699b      	ldr	r3, [r3, #24]
 8002e0a:	2202      	movs	r2, #2
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d1c5      	bne.n	8002d9e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002e12:	2300      	movs	r3, #0
}
 8002e14:	0018      	movs	r0, r3
 8002e16:	46bd      	mov	sp, r7
 8002e18:	b004      	add	sp, #16
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	60b9      	str	r1, [r7, #8]
 8002e26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e28:	e02f      	b.n	8002e8a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	68b9      	ldr	r1, [r7, #8]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	0018      	movs	r0, r3
 8002e32:	f000 f8b9 	bl	8002fa8 <I2C_IsErrorOccurred>
 8002e36:	1e03      	subs	r3, r0, #0
 8002e38:	d001      	beq.n	8002e3e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e02d      	b.n	8002e9a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e3e:	f7ff f823 	bl	8001e88 <HAL_GetTick>
 8002e42:	0002      	movs	r2, r0
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	68ba      	ldr	r2, [r7, #8]
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d302      	bcc.n	8002e54 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d11a      	bne.n	8002e8a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	699b      	ldr	r3, [r3, #24]
 8002e5a:	2220      	movs	r2, #32
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	2b20      	cmp	r3, #32
 8002e60:	d013      	beq.n	8002e8a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e66:	2220      	movs	r2, #32
 8002e68:	431a      	orrs	r2, r3
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2241      	movs	r2, #65	@ 0x41
 8002e72:	2120      	movs	r1, #32
 8002e74:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2242      	movs	r2, #66	@ 0x42
 8002e7a:	2100      	movs	r1, #0
 8002e7c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2240      	movs	r2, #64	@ 0x40
 8002e82:	2100      	movs	r1, #0
 8002e84:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e007      	b.n	8002e9a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	699b      	ldr	r3, [r3, #24]
 8002e90:	2220      	movs	r2, #32
 8002e92:	4013      	ands	r3, r2
 8002e94:	2b20      	cmp	r3, #32
 8002e96:	d1c8      	bne.n	8002e2a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	0018      	movs	r0, r3
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	b004      	add	sp, #16
 8002ea0:	bd80      	pop	{r7, pc}
	...

08002ea4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	60b9      	str	r1, [r7, #8]
 8002eae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002eb0:	e06b      	b.n	8002f8a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	68b9      	ldr	r1, [r7, #8]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	0018      	movs	r0, r3
 8002eba:	f000 f875 	bl	8002fa8 <I2C_IsErrorOccurred>
 8002ebe:	1e03      	subs	r3, r0, #0
 8002ec0:	d001      	beq.n	8002ec6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e069      	b.n	8002f9a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	699b      	ldr	r3, [r3, #24]
 8002ecc:	2220      	movs	r2, #32
 8002ece:	4013      	ands	r3, r2
 8002ed0:	2b20      	cmp	r3, #32
 8002ed2:	d138      	bne.n	8002f46 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	699b      	ldr	r3, [r3, #24]
 8002eda:	2204      	movs	r2, #4
 8002edc:	4013      	ands	r3, r2
 8002ede:	2b04      	cmp	r3, #4
 8002ee0:	d105      	bne.n	8002eee <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d001      	beq.n	8002eee <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002eea:	2300      	movs	r3, #0
 8002eec:	e055      	b.n	8002f9a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	699b      	ldr	r3, [r3, #24]
 8002ef4:	2210      	movs	r2, #16
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	2b10      	cmp	r3, #16
 8002efa:	d107      	bne.n	8002f0c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2210      	movs	r2, #16
 8002f02:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2204      	movs	r2, #4
 8002f08:	645a      	str	r2, [r3, #68]	@ 0x44
 8002f0a:	e002      	b.n	8002f12 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	2220      	movs	r2, #32
 8002f18:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	685a      	ldr	r2, [r3, #4]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	491f      	ldr	r1, [pc, #124]	@ (8002fa4 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8002f26:	400a      	ands	r2, r1
 8002f28:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2241      	movs	r2, #65	@ 0x41
 8002f2e:	2120      	movs	r1, #32
 8002f30:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2242      	movs	r2, #66	@ 0x42
 8002f36:	2100      	movs	r1, #0
 8002f38:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2240      	movs	r2, #64	@ 0x40
 8002f3e:	2100      	movs	r1, #0
 8002f40:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e029      	b.n	8002f9a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f46:	f7fe ff9f 	bl	8001e88 <HAL_GetTick>
 8002f4a:	0002      	movs	r2, r0
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	68ba      	ldr	r2, [r7, #8]
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d302      	bcc.n	8002f5c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d116      	bne.n	8002f8a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	699b      	ldr	r3, [r3, #24]
 8002f62:	2204      	movs	r2, #4
 8002f64:	4013      	ands	r3, r2
 8002f66:	2b04      	cmp	r3, #4
 8002f68:	d00f      	beq.n	8002f8a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f6e:	2220      	movs	r2, #32
 8002f70:	431a      	orrs	r2, r3
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2241      	movs	r2, #65	@ 0x41
 8002f7a:	2120      	movs	r1, #32
 8002f7c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2240      	movs	r2, #64	@ 0x40
 8002f82:	2100      	movs	r1, #0
 8002f84:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e007      	b.n	8002f9a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	699b      	ldr	r3, [r3, #24]
 8002f90:	2204      	movs	r2, #4
 8002f92:	4013      	ands	r3, r2
 8002f94:	2b04      	cmp	r3, #4
 8002f96:	d18c      	bne.n	8002eb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f98:	2300      	movs	r3, #0
}
 8002f9a:	0018      	movs	r0, r3
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	b004      	add	sp, #16
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	46c0      	nop			@ (mov r8, r8)
 8002fa4:	fe00e800 	.word	0xfe00e800

08002fa8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b08a      	sub	sp, #40	@ 0x28
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	60b9      	str	r1, [r7, #8]
 8002fb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fb4:	2327      	movs	r3, #39	@ 0x27
 8002fb6:	18fb      	adds	r3, r7, r3
 8002fb8:	2200      	movs	r2, #0
 8002fba:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	699b      	ldr	r3, [r3, #24]
 8002fc2:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	2210      	movs	r2, #16
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	d100      	bne.n	8002fd6 <I2C_IsErrorOccurred+0x2e>
 8002fd4:	e079      	b.n	80030ca <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	2210      	movs	r2, #16
 8002fdc:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002fde:	e057      	b.n	8003090 <I2C_IsErrorOccurred+0xe8>
 8002fe0:	2227      	movs	r2, #39	@ 0x27
 8002fe2:	18bb      	adds	r3, r7, r2
 8002fe4:	18ba      	adds	r2, r7, r2
 8002fe6:	7812      	ldrb	r2, [r2, #0]
 8002fe8:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	3301      	adds	r3, #1
 8002fee:	d04f      	beq.n	8003090 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002ff0:	f7fe ff4a 	bl	8001e88 <HAL_GetTick>
 8002ff4:	0002      	movs	r2, r0
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	68ba      	ldr	r2, [r7, #8]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d302      	bcc.n	8003006 <I2C_IsErrorOccurred+0x5e>
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d144      	bne.n	8003090 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	685a      	ldr	r2, [r3, #4]
 800300c:	2380      	movs	r3, #128	@ 0x80
 800300e:	01db      	lsls	r3, r3, #7
 8003010:	4013      	ands	r3, r2
 8003012:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003014:	2013      	movs	r0, #19
 8003016:	183b      	adds	r3, r7, r0
 8003018:	68fa      	ldr	r2, [r7, #12]
 800301a:	2142      	movs	r1, #66	@ 0x42
 800301c:	5c52      	ldrb	r2, [r2, r1]
 800301e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	699a      	ldr	r2, [r3, #24]
 8003026:	2380      	movs	r3, #128	@ 0x80
 8003028:	021b      	lsls	r3, r3, #8
 800302a:	401a      	ands	r2, r3
 800302c:	2380      	movs	r3, #128	@ 0x80
 800302e:	021b      	lsls	r3, r3, #8
 8003030:	429a      	cmp	r2, r3
 8003032:	d126      	bne.n	8003082 <I2C_IsErrorOccurred+0xda>
 8003034:	697a      	ldr	r2, [r7, #20]
 8003036:	2380      	movs	r3, #128	@ 0x80
 8003038:	01db      	lsls	r3, r3, #7
 800303a:	429a      	cmp	r2, r3
 800303c:	d021      	beq.n	8003082 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 800303e:	183b      	adds	r3, r7, r0
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	2b20      	cmp	r3, #32
 8003044:	d01d      	beq.n	8003082 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	685a      	ldr	r2, [r3, #4]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2180      	movs	r1, #128	@ 0x80
 8003052:	01c9      	lsls	r1, r1, #7
 8003054:	430a      	orrs	r2, r1
 8003056:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003058:	f7fe ff16 	bl	8001e88 <HAL_GetTick>
 800305c:	0003      	movs	r3, r0
 800305e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003060:	e00f      	b.n	8003082 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003062:	f7fe ff11 	bl	8001e88 <HAL_GetTick>
 8003066:	0002      	movs	r2, r0
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	2b19      	cmp	r3, #25
 800306e:	d908      	bls.n	8003082 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003070:	6a3b      	ldr	r3, [r7, #32]
 8003072:	2220      	movs	r2, #32
 8003074:	4313      	orrs	r3, r2
 8003076:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003078:	2327      	movs	r3, #39	@ 0x27
 800307a:	18fb      	adds	r3, r7, r3
 800307c:	2201      	movs	r2, #1
 800307e:	701a      	strb	r2, [r3, #0]

              break;
 8003080:	e006      	b.n	8003090 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	699b      	ldr	r3, [r3, #24]
 8003088:	2220      	movs	r2, #32
 800308a:	4013      	ands	r3, r2
 800308c:	2b20      	cmp	r3, #32
 800308e:	d1e8      	bne.n	8003062 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	699b      	ldr	r3, [r3, #24]
 8003096:	2220      	movs	r2, #32
 8003098:	4013      	ands	r3, r2
 800309a:	2b20      	cmp	r3, #32
 800309c:	d004      	beq.n	80030a8 <I2C_IsErrorOccurred+0x100>
 800309e:	2327      	movs	r3, #39	@ 0x27
 80030a0:	18fb      	adds	r3, r7, r3
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d09b      	beq.n	8002fe0 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80030a8:	2327      	movs	r3, #39	@ 0x27
 80030aa:	18fb      	adds	r3, r7, r3
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d103      	bne.n	80030ba <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2220      	movs	r2, #32
 80030b8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80030ba:	6a3b      	ldr	r3, [r7, #32]
 80030bc:	2204      	movs	r2, #4
 80030be:	4313      	orrs	r3, r2
 80030c0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80030c2:	2327      	movs	r3, #39	@ 0x27
 80030c4:	18fb      	adds	r3, r7, r3
 80030c6:	2201      	movs	r2, #1
 80030c8:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	699b      	ldr	r3, [r3, #24]
 80030d0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80030d2:	69ba      	ldr	r2, [r7, #24]
 80030d4:	2380      	movs	r3, #128	@ 0x80
 80030d6:	005b      	lsls	r3, r3, #1
 80030d8:	4013      	ands	r3, r2
 80030da:	d00c      	beq.n	80030f6 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80030dc:	6a3b      	ldr	r3, [r7, #32]
 80030de:	2201      	movs	r2, #1
 80030e0:	4313      	orrs	r3, r2
 80030e2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	2280      	movs	r2, #128	@ 0x80
 80030ea:	0052      	lsls	r2, r2, #1
 80030ec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80030ee:	2327      	movs	r3, #39	@ 0x27
 80030f0:	18fb      	adds	r3, r7, r3
 80030f2:	2201      	movs	r2, #1
 80030f4:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80030f6:	69ba      	ldr	r2, [r7, #24]
 80030f8:	2380      	movs	r3, #128	@ 0x80
 80030fa:	00db      	lsls	r3, r3, #3
 80030fc:	4013      	ands	r3, r2
 80030fe:	d00c      	beq.n	800311a <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003100:	6a3b      	ldr	r3, [r7, #32]
 8003102:	2208      	movs	r2, #8
 8003104:	4313      	orrs	r3, r2
 8003106:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2280      	movs	r2, #128	@ 0x80
 800310e:	00d2      	lsls	r2, r2, #3
 8003110:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003112:	2327      	movs	r3, #39	@ 0x27
 8003114:	18fb      	adds	r3, r7, r3
 8003116:	2201      	movs	r2, #1
 8003118:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800311a:	69ba      	ldr	r2, [r7, #24]
 800311c:	2380      	movs	r3, #128	@ 0x80
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	4013      	ands	r3, r2
 8003122:	d00c      	beq.n	800313e <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003124:	6a3b      	ldr	r3, [r7, #32]
 8003126:	2202      	movs	r2, #2
 8003128:	4313      	orrs	r3, r2
 800312a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2280      	movs	r2, #128	@ 0x80
 8003132:	0092      	lsls	r2, r2, #2
 8003134:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003136:	2327      	movs	r3, #39	@ 0x27
 8003138:	18fb      	adds	r3, r7, r3
 800313a:	2201      	movs	r2, #1
 800313c:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800313e:	2327      	movs	r3, #39	@ 0x27
 8003140:	18fb      	adds	r3, r7, r3
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d01d      	beq.n	8003184 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	0018      	movs	r0, r3
 800314c:	f7ff fdb0 	bl	8002cb0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	685a      	ldr	r2, [r3, #4]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	490e      	ldr	r1, [pc, #56]	@ (8003194 <I2C_IsErrorOccurred+0x1ec>)
 800315c:	400a      	ands	r2, r1
 800315e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003164:	6a3b      	ldr	r3, [r7, #32]
 8003166:	431a      	orrs	r2, r3
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2241      	movs	r2, #65	@ 0x41
 8003170:	2120      	movs	r1, #32
 8003172:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2242      	movs	r2, #66	@ 0x42
 8003178:	2100      	movs	r1, #0
 800317a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2240      	movs	r2, #64	@ 0x40
 8003180:	2100      	movs	r1, #0
 8003182:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8003184:	2327      	movs	r3, #39	@ 0x27
 8003186:	18fb      	adds	r3, r7, r3
 8003188:	781b      	ldrb	r3, [r3, #0]
}
 800318a:	0018      	movs	r0, r3
 800318c:	46bd      	mov	sp, r7
 800318e:	b00a      	add	sp, #40	@ 0x28
 8003190:	bd80      	pop	{r7, pc}
 8003192:	46c0      	nop			@ (mov r8, r8)
 8003194:	fe00e800 	.word	0xfe00e800

08003198 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003198:	b590      	push	{r4, r7, lr}
 800319a:	b087      	sub	sp, #28
 800319c:	af00      	add	r7, sp, #0
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	0008      	movs	r0, r1
 80031a2:	0011      	movs	r1, r2
 80031a4:	607b      	str	r3, [r7, #4]
 80031a6:	240a      	movs	r4, #10
 80031a8:	193b      	adds	r3, r7, r4
 80031aa:	1c02      	adds	r2, r0, #0
 80031ac:	801a      	strh	r2, [r3, #0]
 80031ae:	2009      	movs	r0, #9
 80031b0:	183b      	adds	r3, r7, r0
 80031b2:	1c0a      	adds	r2, r1, #0
 80031b4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80031b6:	193b      	adds	r3, r7, r4
 80031b8:	881b      	ldrh	r3, [r3, #0]
 80031ba:	059b      	lsls	r3, r3, #22
 80031bc:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80031be:	183b      	adds	r3, r7, r0
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	0419      	lsls	r1, r3, #16
 80031c4:	23ff      	movs	r3, #255	@ 0xff
 80031c6:	041b      	lsls	r3, r3, #16
 80031c8:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80031ca:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80031d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031d2:	4313      	orrs	r3, r2
 80031d4:	005b      	lsls	r3, r3, #1
 80031d6:	085b      	lsrs	r3, r3, #1
 80031d8:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80031e2:	0d51      	lsrs	r1, r2, #21
 80031e4:	2280      	movs	r2, #128	@ 0x80
 80031e6:	00d2      	lsls	r2, r2, #3
 80031e8:	400a      	ands	r2, r1
 80031ea:	4907      	ldr	r1, [pc, #28]	@ (8003208 <I2C_TransferConfig+0x70>)
 80031ec:	430a      	orrs	r2, r1
 80031ee:	43d2      	mvns	r2, r2
 80031f0:	401a      	ands	r2, r3
 80031f2:	0011      	movs	r1, r2
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	697a      	ldr	r2, [r7, #20]
 80031fa:	430a      	orrs	r2, r1
 80031fc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80031fe:	46c0      	nop			@ (mov r8, r8)
 8003200:	46bd      	mov	sp, r7
 8003202:	b007      	add	sp, #28
 8003204:	bd90      	pop	{r4, r7, pc}
 8003206:	46c0      	nop			@ (mov r8, r8)
 8003208:	03ff63ff 	.word	0x03ff63ff

0800320c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2241      	movs	r2, #65	@ 0x41
 800321a:	5c9b      	ldrb	r3, [r3, r2]
 800321c:	b2db      	uxtb	r3, r3
 800321e:	2b20      	cmp	r3, #32
 8003220:	d138      	bne.n	8003294 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2240      	movs	r2, #64	@ 0x40
 8003226:	5c9b      	ldrb	r3, [r3, r2]
 8003228:	2b01      	cmp	r3, #1
 800322a:	d101      	bne.n	8003230 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800322c:	2302      	movs	r3, #2
 800322e:	e032      	b.n	8003296 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2240      	movs	r2, #64	@ 0x40
 8003234:	2101      	movs	r1, #1
 8003236:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2241      	movs	r2, #65	@ 0x41
 800323c:	2124      	movs	r1, #36	@ 0x24
 800323e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	2101      	movs	r1, #1
 800324c:	438a      	bics	r2, r1
 800324e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4911      	ldr	r1, [pc, #68]	@ (80032a0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800325c:	400a      	ands	r2, r1
 800325e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	6819      	ldr	r1, [r3, #0]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	683a      	ldr	r2, [r7, #0]
 800326c:	430a      	orrs	r2, r1
 800326e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2101      	movs	r1, #1
 800327c:	430a      	orrs	r2, r1
 800327e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2241      	movs	r2, #65	@ 0x41
 8003284:	2120      	movs	r1, #32
 8003286:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2240      	movs	r2, #64	@ 0x40
 800328c:	2100      	movs	r1, #0
 800328e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003290:	2300      	movs	r3, #0
 8003292:	e000      	b.n	8003296 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003294:	2302      	movs	r3, #2
  }
}
 8003296:	0018      	movs	r0, r3
 8003298:	46bd      	mov	sp, r7
 800329a:	b002      	add	sp, #8
 800329c:	bd80      	pop	{r7, pc}
 800329e:	46c0      	nop			@ (mov r8, r8)
 80032a0:	ffffefff 	.word	0xffffefff

080032a4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2241      	movs	r2, #65	@ 0x41
 80032b2:	5c9b      	ldrb	r3, [r3, r2]
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	2b20      	cmp	r3, #32
 80032b8:	d139      	bne.n	800332e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2240      	movs	r2, #64	@ 0x40
 80032be:	5c9b      	ldrb	r3, [r3, r2]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d101      	bne.n	80032c8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80032c4:	2302      	movs	r3, #2
 80032c6:	e033      	b.n	8003330 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2240      	movs	r2, #64	@ 0x40
 80032cc:	2101      	movs	r1, #1
 80032ce:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2241      	movs	r2, #65	@ 0x41
 80032d4:	2124      	movs	r1, #36	@ 0x24
 80032d6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	2101      	movs	r1, #1
 80032e4:	438a      	bics	r2, r1
 80032e6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	4a11      	ldr	r2, [pc, #68]	@ (8003338 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80032f4:	4013      	ands	r3, r2
 80032f6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	021b      	lsls	r3, r3, #8
 80032fc:	68fa      	ldr	r2, [r7, #12]
 80032fe:	4313      	orrs	r3, r2
 8003300:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	68fa      	ldr	r2, [r7, #12]
 8003308:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2101      	movs	r1, #1
 8003316:	430a      	orrs	r2, r1
 8003318:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2241      	movs	r2, #65	@ 0x41
 800331e:	2120      	movs	r1, #32
 8003320:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2240      	movs	r2, #64	@ 0x40
 8003326:	2100      	movs	r1, #0
 8003328:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800332a:	2300      	movs	r3, #0
 800332c:	e000      	b.n	8003330 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800332e:	2302      	movs	r3, #2
  }
}
 8003330:	0018      	movs	r0, r3
 8003332:	46bd      	mov	sp, r7
 8003334:	b004      	add	sp, #16
 8003336:	bd80      	pop	{r7, pc}
 8003338:	fffff0ff 	.word	0xfffff0ff

0800333c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800333c:	b5b0      	push	{r4, r5, r7, lr}
 800333e:	b08a      	sub	sp, #40	@ 0x28
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d102      	bne.n	8003350 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	f000 fb6c 	bl	8003a28 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003350:	4bc8      	ldr	r3, [pc, #800]	@ (8003674 <HAL_RCC_OscConfig+0x338>)
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	220c      	movs	r2, #12
 8003356:	4013      	ands	r3, r2
 8003358:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800335a:	4bc6      	ldr	r3, [pc, #792]	@ (8003674 <HAL_RCC_OscConfig+0x338>)
 800335c:	68da      	ldr	r2, [r3, #12]
 800335e:	2380      	movs	r3, #128	@ 0x80
 8003360:	025b      	lsls	r3, r3, #9
 8003362:	4013      	ands	r3, r2
 8003364:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2201      	movs	r2, #1
 800336c:	4013      	ands	r3, r2
 800336e:	d100      	bne.n	8003372 <HAL_RCC_OscConfig+0x36>
 8003370:	e07d      	b.n	800346e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	2b08      	cmp	r3, #8
 8003376:	d007      	beq.n	8003388 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	2b0c      	cmp	r3, #12
 800337c:	d112      	bne.n	80033a4 <HAL_RCC_OscConfig+0x68>
 800337e:	69ba      	ldr	r2, [r7, #24]
 8003380:	2380      	movs	r3, #128	@ 0x80
 8003382:	025b      	lsls	r3, r3, #9
 8003384:	429a      	cmp	r2, r3
 8003386:	d10d      	bne.n	80033a4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003388:	4bba      	ldr	r3, [pc, #744]	@ (8003674 <HAL_RCC_OscConfig+0x338>)
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	2380      	movs	r3, #128	@ 0x80
 800338e:	029b      	lsls	r3, r3, #10
 8003390:	4013      	ands	r3, r2
 8003392:	d100      	bne.n	8003396 <HAL_RCC_OscConfig+0x5a>
 8003394:	e06a      	b.n	800346c <HAL_RCC_OscConfig+0x130>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d166      	bne.n	800346c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	f000 fb42 	bl	8003a28 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685a      	ldr	r2, [r3, #4]
 80033a8:	2380      	movs	r3, #128	@ 0x80
 80033aa:	025b      	lsls	r3, r3, #9
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d107      	bne.n	80033c0 <HAL_RCC_OscConfig+0x84>
 80033b0:	4bb0      	ldr	r3, [pc, #704]	@ (8003674 <HAL_RCC_OscConfig+0x338>)
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	4baf      	ldr	r3, [pc, #700]	@ (8003674 <HAL_RCC_OscConfig+0x338>)
 80033b6:	2180      	movs	r1, #128	@ 0x80
 80033b8:	0249      	lsls	r1, r1, #9
 80033ba:	430a      	orrs	r2, r1
 80033bc:	601a      	str	r2, [r3, #0]
 80033be:	e027      	b.n	8003410 <HAL_RCC_OscConfig+0xd4>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	685a      	ldr	r2, [r3, #4]
 80033c4:	23a0      	movs	r3, #160	@ 0xa0
 80033c6:	02db      	lsls	r3, r3, #11
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d10e      	bne.n	80033ea <HAL_RCC_OscConfig+0xae>
 80033cc:	4ba9      	ldr	r3, [pc, #676]	@ (8003674 <HAL_RCC_OscConfig+0x338>)
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	4ba8      	ldr	r3, [pc, #672]	@ (8003674 <HAL_RCC_OscConfig+0x338>)
 80033d2:	2180      	movs	r1, #128	@ 0x80
 80033d4:	02c9      	lsls	r1, r1, #11
 80033d6:	430a      	orrs	r2, r1
 80033d8:	601a      	str	r2, [r3, #0]
 80033da:	4ba6      	ldr	r3, [pc, #664]	@ (8003674 <HAL_RCC_OscConfig+0x338>)
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	4ba5      	ldr	r3, [pc, #660]	@ (8003674 <HAL_RCC_OscConfig+0x338>)
 80033e0:	2180      	movs	r1, #128	@ 0x80
 80033e2:	0249      	lsls	r1, r1, #9
 80033e4:	430a      	orrs	r2, r1
 80033e6:	601a      	str	r2, [r3, #0]
 80033e8:	e012      	b.n	8003410 <HAL_RCC_OscConfig+0xd4>
 80033ea:	4ba2      	ldr	r3, [pc, #648]	@ (8003674 <HAL_RCC_OscConfig+0x338>)
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	4ba1      	ldr	r3, [pc, #644]	@ (8003674 <HAL_RCC_OscConfig+0x338>)
 80033f0:	49a1      	ldr	r1, [pc, #644]	@ (8003678 <HAL_RCC_OscConfig+0x33c>)
 80033f2:	400a      	ands	r2, r1
 80033f4:	601a      	str	r2, [r3, #0]
 80033f6:	4b9f      	ldr	r3, [pc, #636]	@ (8003674 <HAL_RCC_OscConfig+0x338>)
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	2380      	movs	r3, #128	@ 0x80
 80033fc:	025b      	lsls	r3, r3, #9
 80033fe:	4013      	ands	r3, r2
 8003400:	60fb      	str	r3, [r7, #12]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	4b9b      	ldr	r3, [pc, #620]	@ (8003674 <HAL_RCC_OscConfig+0x338>)
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	4b9a      	ldr	r3, [pc, #616]	@ (8003674 <HAL_RCC_OscConfig+0x338>)
 800340a:	499c      	ldr	r1, [pc, #624]	@ (800367c <HAL_RCC_OscConfig+0x340>)
 800340c:	400a      	ands	r2, r1
 800340e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d014      	beq.n	8003442 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003418:	f7fe fd36 	bl	8001e88 <HAL_GetTick>
 800341c:	0003      	movs	r3, r0
 800341e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003420:	e008      	b.n	8003434 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003422:	f7fe fd31 	bl	8001e88 <HAL_GetTick>
 8003426:	0002      	movs	r2, r0
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	1ad3      	subs	r3, r2, r3
 800342c:	2b64      	cmp	r3, #100	@ 0x64
 800342e:	d901      	bls.n	8003434 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8003430:	2303      	movs	r3, #3
 8003432:	e2f9      	b.n	8003a28 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003434:	4b8f      	ldr	r3, [pc, #572]	@ (8003674 <HAL_RCC_OscConfig+0x338>)
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	2380      	movs	r3, #128	@ 0x80
 800343a:	029b      	lsls	r3, r3, #10
 800343c:	4013      	ands	r3, r2
 800343e:	d0f0      	beq.n	8003422 <HAL_RCC_OscConfig+0xe6>
 8003440:	e015      	b.n	800346e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003442:	f7fe fd21 	bl	8001e88 <HAL_GetTick>
 8003446:	0003      	movs	r3, r0
 8003448:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800344a:	e008      	b.n	800345e <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800344c:	f7fe fd1c 	bl	8001e88 <HAL_GetTick>
 8003450:	0002      	movs	r2, r0
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b64      	cmp	r3, #100	@ 0x64
 8003458:	d901      	bls.n	800345e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e2e4      	b.n	8003a28 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800345e:	4b85      	ldr	r3, [pc, #532]	@ (8003674 <HAL_RCC_OscConfig+0x338>)
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	2380      	movs	r3, #128	@ 0x80
 8003464:	029b      	lsls	r3, r3, #10
 8003466:	4013      	ands	r3, r2
 8003468:	d1f0      	bne.n	800344c <HAL_RCC_OscConfig+0x110>
 800346a:	e000      	b.n	800346e <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800346c:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2202      	movs	r2, #2
 8003474:	4013      	ands	r3, r2
 8003476:	d100      	bne.n	800347a <HAL_RCC_OscConfig+0x13e>
 8003478:	e099      	b.n	80035ae <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8003480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003482:	2220      	movs	r2, #32
 8003484:	4013      	ands	r3, r2
 8003486:	d009      	beq.n	800349c <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8003488:	4b7a      	ldr	r3, [pc, #488]	@ (8003674 <HAL_RCC_OscConfig+0x338>)
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	4b79      	ldr	r3, [pc, #484]	@ (8003674 <HAL_RCC_OscConfig+0x338>)
 800348e:	2120      	movs	r1, #32
 8003490:	430a      	orrs	r2, r1
 8003492:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8003494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003496:	2220      	movs	r2, #32
 8003498:	4393      	bics	r3, r2
 800349a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	2b04      	cmp	r3, #4
 80034a0:	d005      	beq.n	80034ae <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	2b0c      	cmp	r3, #12
 80034a6:	d13e      	bne.n	8003526 <HAL_RCC_OscConfig+0x1ea>
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d13b      	bne.n	8003526 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80034ae:	4b71      	ldr	r3, [pc, #452]	@ (8003674 <HAL_RCC_OscConfig+0x338>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2204      	movs	r2, #4
 80034b4:	4013      	ands	r3, r2
 80034b6:	d004      	beq.n	80034c2 <HAL_RCC_OscConfig+0x186>
 80034b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d101      	bne.n	80034c2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e2b2      	b.n	8003a28 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034c2:	4b6c      	ldr	r3, [pc, #432]	@ (8003674 <HAL_RCC_OscConfig+0x338>)
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	4a6e      	ldr	r2, [pc, #440]	@ (8003680 <HAL_RCC_OscConfig+0x344>)
 80034c8:	4013      	ands	r3, r2
 80034ca:	0019      	movs	r1, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	691b      	ldr	r3, [r3, #16]
 80034d0:	021a      	lsls	r2, r3, #8
 80034d2:	4b68      	ldr	r3, [pc, #416]	@ (8003674 <HAL_RCC_OscConfig+0x338>)
 80034d4:	430a      	orrs	r2, r1
 80034d6:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80034d8:	4b66      	ldr	r3, [pc, #408]	@ (8003674 <HAL_RCC_OscConfig+0x338>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2209      	movs	r2, #9
 80034de:	4393      	bics	r3, r2
 80034e0:	0019      	movs	r1, r3
 80034e2:	4b64      	ldr	r3, [pc, #400]	@ (8003674 <HAL_RCC_OscConfig+0x338>)
 80034e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034e6:	430a      	orrs	r2, r1
 80034e8:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80034ea:	f000 fbeb 	bl	8003cc4 <HAL_RCC_GetSysClockFreq>
 80034ee:	0001      	movs	r1, r0
 80034f0:	4b60      	ldr	r3, [pc, #384]	@ (8003674 <HAL_RCC_OscConfig+0x338>)
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	091b      	lsrs	r3, r3, #4
 80034f6:	220f      	movs	r2, #15
 80034f8:	4013      	ands	r3, r2
 80034fa:	4a62      	ldr	r2, [pc, #392]	@ (8003684 <HAL_RCC_OscConfig+0x348>)
 80034fc:	5cd3      	ldrb	r3, [r2, r3]
 80034fe:	000a      	movs	r2, r1
 8003500:	40da      	lsrs	r2, r3
 8003502:	4b61      	ldr	r3, [pc, #388]	@ (8003688 <HAL_RCC_OscConfig+0x34c>)
 8003504:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8003506:	4b61      	ldr	r3, [pc, #388]	@ (800368c <HAL_RCC_OscConfig+0x350>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	2513      	movs	r5, #19
 800350c:	197c      	adds	r4, r7, r5
 800350e:	0018      	movs	r0, r3
 8003510:	f7fe fc74 	bl	8001dfc <HAL_InitTick>
 8003514:	0003      	movs	r3, r0
 8003516:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8003518:	197b      	adds	r3, r7, r5
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d046      	beq.n	80035ae <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8003520:	197b      	adds	r3, r7, r5
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	e280      	b.n	8003a28 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8003526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003528:	2b00      	cmp	r3, #0
 800352a:	d027      	beq.n	800357c <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800352c:	4b51      	ldr	r3, [pc, #324]	@ (8003674 <HAL_RCC_OscConfig+0x338>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	2209      	movs	r2, #9
 8003532:	4393      	bics	r3, r2
 8003534:	0019      	movs	r1, r3
 8003536:	4b4f      	ldr	r3, [pc, #316]	@ (8003674 <HAL_RCC_OscConfig+0x338>)
 8003538:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800353a:	430a      	orrs	r2, r1
 800353c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800353e:	f7fe fca3 	bl	8001e88 <HAL_GetTick>
 8003542:	0003      	movs	r3, r0
 8003544:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003546:	e008      	b.n	800355a <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003548:	f7fe fc9e 	bl	8001e88 <HAL_GetTick>
 800354c:	0002      	movs	r2, r0
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	2b02      	cmp	r3, #2
 8003554:	d901      	bls.n	800355a <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e266      	b.n	8003a28 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800355a:	4b46      	ldr	r3, [pc, #280]	@ (8003674 <HAL_RCC_OscConfig+0x338>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	2204      	movs	r2, #4
 8003560:	4013      	ands	r3, r2
 8003562:	d0f1      	beq.n	8003548 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003564:	4b43      	ldr	r3, [pc, #268]	@ (8003674 <HAL_RCC_OscConfig+0x338>)
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	4a45      	ldr	r2, [pc, #276]	@ (8003680 <HAL_RCC_OscConfig+0x344>)
 800356a:	4013      	ands	r3, r2
 800356c:	0019      	movs	r1, r3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	021a      	lsls	r2, r3, #8
 8003574:	4b3f      	ldr	r3, [pc, #252]	@ (8003674 <HAL_RCC_OscConfig+0x338>)
 8003576:	430a      	orrs	r2, r1
 8003578:	605a      	str	r2, [r3, #4]
 800357a:	e018      	b.n	80035ae <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800357c:	4b3d      	ldr	r3, [pc, #244]	@ (8003674 <HAL_RCC_OscConfig+0x338>)
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	4b3c      	ldr	r3, [pc, #240]	@ (8003674 <HAL_RCC_OscConfig+0x338>)
 8003582:	2101      	movs	r1, #1
 8003584:	438a      	bics	r2, r1
 8003586:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003588:	f7fe fc7e 	bl	8001e88 <HAL_GetTick>
 800358c:	0003      	movs	r3, r0
 800358e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003590:	e008      	b.n	80035a4 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003592:	f7fe fc79 	bl	8001e88 <HAL_GetTick>
 8003596:	0002      	movs	r2, r0
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	2b02      	cmp	r3, #2
 800359e:	d901      	bls.n	80035a4 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80035a0:	2303      	movs	r3, #3
 80035a2:	e241      	b.n	8003a28 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80035a4:	4b33      	ldr	r3, [pc, #204]	@ (8003674 <HAL_RCC_OscConfig+0x338>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2204      	movs	r2, #4
 80035aa:	4013      	ands	r3, r2
 80035ac:	d1f1      	bne.n	8003592 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	2210      	movs	r2, #16
 80035b4:	4013      	ands	r3, r2
 80035b6:	d100      	bne.n	80035ba <HAL_RCC_OscConfig+0x27e>
 80035b8:	e0a1      	b.n	80036fe <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d140      	bne.n	8003642 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80035c0:	4b2c      	ldr	r3, [pc, #176]	@ (8003674 <HAL_RCC_OscConfig+0x338>)
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	2380      	movs	r3, #128	@ 0x80
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	4013      	ands	r3, r2
 80035ca:	d005      	beq.n	80035d8 <HAL_RCC_OscConfig+0x29c>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	699b      	ldr	r3, [r3, #24]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d101      	bne.n	80035d8 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e227      	b.n	8003a28 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035d8:	4b26      	ldr	r3, [pc, #152]	@ (8003674 <HAL_RCC_OscConfig+0x338>)
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	4a2c      	ldr	r2, [pc, #176]	@ (8003690 <HAL_RCC_OscConfig+0x354>)
 80035de:	4013      	ands	r3, r2
 80035e0:	0019      	movs	r1, r3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a1a      	ldr	r2, [r3, #32]
 80035e6:	4b23      	ldr	r3, [pc, #140]	@ (8003674 <HAL_RCC_OscConfig+0x338>)
 80035e8:	430a      	orrs	r2, r1
 80035ea:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035ec:	4b21      	ldr	r3, [pc, #132]	@ (8003674 <HAL_RCC_OscConfig+0x338>)
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	021b      	lsls	r3, r3, #8
 80035f2:	0a19      	lsrs	r1, r3, #8
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	69db      	ldr	r3, [r3, #28]
 80035f8:	061a      	lsls	r2, r3, #24
 80035fa:	4b1e      	ldr	r3, [pc, #120]	@ (8003674 <HAL_RCC_OscConfig+0x338>)
 80035fc:	430a      	orrs	r2, r1
 80035fe:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6a1b      	ldr	r3, [r3, #32]
 8003604:	0b5b      	lsrs	r3, r3, #13
 8003606:	3301      	adds	r3, #1
 8003608:	2280      	movs	r2, #128	@ 0x80
 800360a:	0212      	lsls	r2, r2, #8
 800360c:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800360e:	4b19      	ldr	r3, [pc, #100]	@ (8003674 <HAL_RCC_OscConfig+0x338>)
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	091b      	lsrs	r3, r3, #4
 8003614:	210f      	movs	r1, #15
 8003616:	400b      	ands	r3, r1
 8003618:	491a      	ldr	r1, [pc, #104]	@ (8003684 <HAL_RCC_OscConfig+0x348>)
 800361a:	5ccb      	ldrb	r3, [r1, r3]
 800361c:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800361e:	4b1a      	ldr	r3, [pc, #104]	@ (8003688 <HAL_RCC_OscConfig+0x34c>)
 8003620:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8003622:	4b1a      	ldr	r3, [pc, #104]	@ (800368c <HAL_RCC_OscConfig+0x350>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	2513      	movs	r5, #19
 8003628:	197c      	adds	r4, r7, r5
 800362a:	0018      	movs	r0, r3
 800362c:	f7fe fbe6 	bl	8001dfc <HAL_InitTick>
 8003630:	0003      	movs	r3, r0
 8003632:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8003634:	197b      	adds	r3, r7, r5
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d060      	beq.n	80036fe <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 800363c:	197b      	adds	r3, r7, r5
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	e1f2      	b.n	8003a28 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	699b      	ldr	r3, [r3, #24]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d03f      	beq.n	80036ca <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800364a:	4b0a      	ldr	r3, [pc, #40]	@ (8003674 <HAL_RCC_OscConfig+0x338>)
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	4b09      	ldr	r3, [pc, #36]	@ (8003674 <HAL_RCC_OscConfig+0x338>)
 8003650:	2180      	movs	r1, #128	@ 0x80
 8003652:	0049      	lsls	r1, r1, #1
 8003654:	430a      	orrs	r2, r1
 8003656:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003658:	f7fe fc16 	bl	8001e88 <HAL_GetTick>
 800365c:	0003      	movs	r3, r0
 800365e:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003660:	e018      	b.n	8003694 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003662:	f7fe fc11 	bl	8001e88 <HAL_GetTick>
 8003666:	0002      	movs	r2, r0
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	2b02      	cmp	r3, #2
 800366e:	d911      	bls.n	8003694 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	e1d9      	b.n	8003a28 <HAL_RCC_OscConfig+0x6ec>
 8003674:	40021000 	.word	0x40021000
 8003678:	fffeffff 	.word	0xfffeffff
 800367c:	fffbffff 	.word	0xfffbffff
 8003680:	ffffe0ff 	.word	0xffffe0ff
 8003684:	080060a4 	.word	0x080060a4
 8003688:	20000570 	.word	0x20000570
 800368c:	20000574 	.word	0x20000574
 8003690:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003694:	4bc9      	ldr	r3, [pc, #804]	@ (80039bc <HAL_RCC_OscConfig+0x680>)
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	2380      	movs	r3, #128	@ 0x80
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	4013      	ands	r3, r2
 800369e:	d0e0      	beq.n	8003662 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036a0:	4bc6      	ldr	r3, [pc, #792]	@ (80039bc <HAL_RCC_OscConfig+0x680>)
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	4ac6      	ldr	r2, [pc, #792]	@ (80039c0 <HAL_RCC_OscConfig+0x684>)
 80036a6:	4013      	ands	r3, r2
 80036a8:	0019      	movs	r1, r3
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a1a      	ldr	r2, [r3, #32]
 80036ae:	4bc3      	ldr	r3, [pc, #780]	@ (80039bc <HAL_RCC_OscConfig+0x680>)
 80036b0:	430a      	orrs	r2, r1
 80036b2:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036b4:	4bc1      	ldr	r3, [pc, #772]	@ (80039bc <HAL_RCC_OscConfig+0x680>)
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	021b      	lsls	r3, r3, #8
 80036ba:	0a19      	lsrs	r1, r3, #8
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	69db      	ldr	r3, [r3, #28]
 80036c0:	061a      	lsls	r2, r3, #24
 80036c2:	4bbe      	ldr	r3, [pc, #760]	@ (80039bc <HAL_RCC_OscConfig+0x680>)
 80036c4:	430a      	orrs	r2, r1
 80036c6:	605a      	str	r2, [r3, #4]
 80036c8:	e019      	b.n	80036fe <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80036ca:	4bbc      	ldr	r3, [pc, #752]	@ (80039bc <HAL_RCC_OscConfig+0x680>)
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	4bbb      	ldr	r3, [pc, #748]	@ (80039bc <HAL_RCC_OscConfig+0x680>)
 80036d0:	49bc      	ldr	r1, [pc, #752]	@ (80039c4 <HAL_RCC_OscConfig+0x688>)
 80036d2:	400a      	ands	r2, r1
 80036d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036d6:	f7fe fbd7 	bl	8001e88 <HAL_GetTick>
 80036da:	0003      	movs	r3, r0
 80036dc:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80036de:	e008      	b.n	80036f2 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80036e0:	f7fe fbd2 	bl	8001e88 <HAL_GetTick>
 80036e4:	0002      	movs	r2, r0
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d901      	bls.n	80036f2 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e19a      	b.n	8003a28 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80036f2:	4bb2      	ldr	r3, [pc, #712]	@ (80039bc <HAL_RCC_OscConfig+0x680>)
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	2380      	movs	r3, #128	@ 0x80
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	4013      	ands	r3, r2
 80036fc:	d1f0      	bne.n	80036e0 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	2208      	movs	r2, #8
 8003704:	4013      	ands	r3, r2
 8003706:	d036      	beq.n	8003776 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	695b      	ldr	r3, [r3, #20]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d019      	beq.n	8003744 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003710:	4baa      	ldr	r3, [pc, #680]	@ (80039bc <HAL_RCC_OscConfig+0x680>)
 8003712:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003714:	4ba9      	ldr	r3, [pc, #676]	@ (80039bc <HAL_RCC_OscConfig+0x680>)
 8003716:	2101      	movs	r1, #1
 8003718:	430a      	orrs	r2, r1
 800371a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800371c:	f7fe fbb4 	bl	8001e88 <HAL_GetTick>
 8003720:	0003      	movs	r3, r0
 8003722:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003724:	e008      	b.n	8003738 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003726:	f7fe fbaf 	bl	8001e88 <HAL_GetTick>
 800372a:	0002      	movs	r2, r0
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	2b02      	cmp	r3, #2
 8003732:	d901      	bls.n	8003738 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	e177      	b.n	8003a28 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003738:	4ba0      	ldr	r3, [pc, #640]	@ (80039bc <HAL_RCC_OscConfig+0x680>)
 800373a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800373c:	2202      	movs	r2, #2
 800373e:	4013      	ands	r3, r2
 8003740:	d0f1      	beq.n	8003726 <HAL_RCC_OscConfig+0x3ea>
 8003742:	e018      	b.n	8003776 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003744:	4b9d      	ldr	r3, [pc, #628]	@ (80039bc <HAL_RCC_OscConfig+0x680>)
 8003746:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003748:	4b9c      	ldr	r3, [pc, #624]	@ (80039bc <HAL_RCC_OscConfig+0x680>)
 800374a:	2101      	movs	r1, #1
 800374c:	438a      	bics	r2, r1
 800374e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003750:	f7fe fb9a 	bl	8001e88 <HAL_GetTick>
 8003754:	0003      	movs	r3, r0
 8003756:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003758:	e008      	b.n	800376c <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800375a:	f7fe fb95 	bl	8001e88 <HAL_GetTick>
 800375e:	0002      	movs	r2, r0
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	2b02      	cmp	r3, #2
 8003766:	d901      	bls.n	800376c <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8003768:	2303      	movs	r3, #3
 800376a:	e15d      	b.n	8003a28 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800376c:	4b93      	ldr	r3, [pc, #588]	@ (80039bc <HAL_RCC_OscConfig+0x680>)
 800376e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003770:	2202      	movs	r2, #2
 8003772:	4013      	ands	r3, r2
 8003774:	d1f1      	bne.n	800375a <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	2204      	movs	r2, #4
 800377c:	4013      	ands	r3, r2
 800377e:	d100      	bne.n	8003782 <HAL_RCC_OscConfig+0x446>
 8003780:	e0ae      	b.n	80038e0 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003782:	2023      	movs	r0, #35	@ 0x23
 8003784:	183b      	adds	r3, r7, r0
 8003786:	2200      	movs	r2, #0
 8003788:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800378a:	4b8c      	ldr	r3, [pc, #560]	@ (80039bc <HAL_RCC_OscConfig+0x680>)
 800378c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800378e:	2380      	movs	r3, #128	@ 0x80
 8003790:	055b      	lsls	r3, r3, #21
 8003792:	4013      	ands	r3, r2
 8003794:	d109      	bne.n	80037aa <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003796:	4b89      	ldr	r3, [pc, #548]	@ (80039bc <HAL_RCC_OscConfig+0x680>)
 8003798:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800379a:	4b88      	ldr	r3, [pc, #544]	@ (80039bc <HAL_RCC_OscConfig+0x680>)
 800379c:	2180      	movs	r1, #128	@ 0x80
 800379e:	0549      	lsls	r1, r1, #21
 80037a0:	430a      	orrs	r2, r1
 80037a2:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80037a4:	183b      	adds	r3, r7, r0
 80037a6:	2201      	movs	r2, #1
 80037a8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037aa:	4b87      	ldr	r3, [pc, #540]	@ (80039c8 <HAL_RCC_OscConfig+0x68c>)
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	2380      	movs	r3, #128	@ 0x80
 80037b0:	005b      	lsls	r3, r3, #1
 80037b2:	4013      	ands	r3, r2
 80037b4:	d11a      	bne.n	80037ec <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037b6:	4b84      	ldr	r3, [pc, #528]	@ (80039c8 <HAL_RCC_OscConfig+0x68c>)
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	4b83      	ldr	r3, [pc, #524]	@ (80039c8 <HAL_RCC_OscConfig+0x68c>)
 80037bc:	2180      	movs	r1, #128	@ 0x80
 80037be:	0049      	lsls	r1, r1, #1
 80037c0:	430a      	orrs	r2, r1
 80037c2:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037c4:	f7fe fb60 	bl	8001e88 <HAL_GetTick>
 80037c8:	0003      	movs	r3, r0
 80037ca:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037cc:	e008      	b.n	80037e0 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037ce:	f7fe fb5b 	bl	8001e88 <HAL_GetTick>
 80037d2:	0002      	movs	r2, r0
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	2b64      	cmp	r3, #100	@ 0x64
 80037da:	d901      	bls.n	80037e0 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e123      	b.n	8003a28 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037e0:	4b79      	ldr	r3, [pc, #484]	@ (80039c8 <HAL_RCC_OscConfig+0x68c>)
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	2380      	movs	r3, #128	@ 0x80
 80037e6:	005b      	lsls	r3, r3, #1
 80037e8:	4013      	ands	r3, r2
 80037ea:	d0f0      	beq.n	80037ce <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	689a      	ldr	r2, [r3, #8]
 80037f0:	2380      	movs	r3, #128	@ 0x80
 80037f2:	005b      	lsls	r3, r3, #1
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d107      	bne.n	8003808 <HAL_RCC_OscConfig+0x4cc>
 80037f8:	4b70      	ldr	r3, [pc, #448]	@ (80039bc <HAL_RCC_OscConfig+0x680>)
 80037fa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80037fc:	4b6f      	ldr	r3, [pc, #444]	@ (80039bc <HAL_RCC_OscConfig+0x680>)
 80037fe:	2180      	movs	r1, #128	@ 0x80
 8003800:	0049      	lsls	r1, r1, #1
 8003802:	430a      	orrs	r2, r1
 8003804:	651a      	str	r2, [r3, #80]	@ 0x50
 8003806:	e031      	b.n	800386c <HAL_RCC_OscConfig+0x530>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d10c      	bne.n	800382a <HAL_RCC_OscConfig+0x4ee>
 8003810:	4b6a      	ldr	r3, [pc, #424]	@ (80039bc <HAL_RCC_OscConfig+0x680>)
 8003812:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003814:	4b69      	ldr	r3, [pc, #420]	@ (80039bc <HAL_RCC_OscConfig+0x680>)
 8003816:	496b      	ldr	r1, [pc, #428]	@ (80039c4 <HAL_RCC_OscConfig+0x688>)
 8003818:	400a      	ands	r2, r1
 800381a:	651a      	str	r2, [r3, #80]	@ 0x50
 800381c:	4b67      	ldr	r3, [pc, #412]	@ (80039bc <HAL_RCC_OscConfig+0x680>)
 800381e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003820:	4b66      	ldr	r3, [pc, #408]	@ (80039bc <HAL_RCC_OscConfig+0x680>)
 8003822:	496a      	ldr	r1, [pc, #424]	@ (80039cc <HAL_RCC_OscConfig+0x690>)
 8003824:	400a      	ands	r2, r1
 8003826:	651a      	str	r2, [r3, #80]	@ 0x50
 8003828:	e020      	b.n	800386c <HAL_RCC_OscConfig+0x530>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	689a      	ldr	r2, [r3, #8]
 800382e:	23a0      	movs	r3, #160	@ 0xa0
 8003830:	00db      	lsls	r3, r3, #3
 8003832:	429a      	cmp	r2, r3
 8003834:	d10e      	bne.n	8003854 <HAL_RCC_OscConfig+0x518>
 8003836:	4b61      	ldr	r3, [pc, #388]	@ (80039bc <HAL_RCC_OscConfig+0x680>)
 8003838:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800383a:	4b60      	ldr	r3, [pc, #384]	@ (80039bc <HAL_RCC_OscConfig+0x680>)
 800383c:	2180      	movs	r1, #128	@ 0x80
 800383e:	00c9      	lsls	r1, r1, #3
 8003840:	430a      	orrs	r2, r1
 8003842:	651a      	str	r2, [r3, #80]	@ 0x50
 8003844:	4b5d      	ldr	r3, [pc, #372]	@ (80039bc <HAL_RCC_OscConfig+0x680>)
 8003846:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003848:	4b5c      	ldr	r3, [pc, #368]	@ (80039bc <HAL_RCC_OscConfig+0x680>)
 800384a:	2180      	movs	r1, #128	@ 0x80
 800384c:	0049      	lsls	r1, r1, #1
 800384e:	430a      	orrs	r2, r1
 8003850:	651a      	str	r2, [r3, #80]	@ 0x50
 8003852:	e00b      	b.n	800386c <HAL_RCC_OscConfig+0x530>
 8003854:	4b59      	ldr	r3, [pc, #356]	@ (80039bc <HAL_RCC_OscConfig+0x680>)
 8003856:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003858:	4b58      	ldr	r3, [pc, #352]	@ (80039bc <HAL_RCC_OscConfig+0x680>)
 800385a:	495a      	ldr	r1, [pc, #360]	@ (80039c4 <HAL_RCC_OscConfig+0x688>)
 800385c:	400a      	ands	r2, r1
 800385e:	651a      	str	r2, [r3, #80]	@ 0x50
 8003860:	4b56      	ldr	r3, [pc, #344]	@ (80039bc <HAL_RCC_OscConfig+0x680>)
 8003862:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003864:	4b55      	ldr	r3, [pc, #340]	@ (80039bc <HAL_RCC_OscConfig+0x680>)
 8003866:	4959      	ldr	r1, [pc, #356]	@ (80039cc <HAL_RCC_OscConfig+0x690>)
 8003868:	400a      	ands	r2, r1
 800386a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d015      	beq.n	80038a0 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003874:	f7fe fb08 	bl	8001e88 <HAL_GetTick>
 8003878:	0003      	movs	r3, r0
 800387a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800387c:	e009      	b.n	8003892 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800387e:	f7fe fb03 	bl	8001e88 <HAL_GetTick>
 8003882:	0002      	movs	r2, r0
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	4a51      	ldr	r2, [pc, #324]	@ (80039d0 <HAL_RCC_OscConfig+0x694>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d901      	bls.n	8003892 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e0ca      	b.n	8003a28 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003892:	4b4a      	ldr	r3, [pc, #296]	@ (80039bc <HAL_RCC_OscConfig+0x680>)
 8003894:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003896:	2380      	movs	r3, #128	@ 0x80
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	4013      	ands	r3, r2
 800389c:	d0ef      	beq.n	800387e <HAL_RCC_OscConfig+0x542>
 800389e:	e014      	b.n	80038ca <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038a0:	f7fe faf2 	bl	8001e88 <HAL_GetTick>
 80038a4:	0003      	movs	r3, r0
 80038a6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80038a8:	e009      	b.n	80038be <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038aa:	f7fe faed 	bl	8001e88 <HAL_GetTick>
 80038ae:	0002      	movs	r2, r0
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	4a46      	ldr	r2, [pc, #280]	@ (80039d0 <HAL_RCC_OscConfig+0x694>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d901      	bls.n	80038be <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e0b4      	b.n	8003a28 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80038be:	4b3f      	ldr	r3, [pc, #252]	@ (80039bc <HAL_RCC_OscConfig+0x680>)
 80038c0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80038c2:	2380      	movs	r3, #128	@ 0x80
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	4013      	ands	r3, r2
 80038c8:	d1ef      	bne.n	80038aa <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80038ca:	2323      	movs	r3, #35	@ 0x23
 80038cc:	18fb      	adds	r3, r7, r3
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d105      	bne.n	80038e0 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038d4:	4b39      	ldr	r3, [pc, #228]	@ (80039bc <HAL_RCC_OscConfig+0x680>)
 80038d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80038d8:	4b38      	ldr	r3, [pc, #224]	@ (80039bc <HAL_RCC_OscConfig+0x680>)
 80038da:	493e      	ldr	r1, [pc, #248]	@ (80039d4 <HAL_RCC_OscConfig+0x698>)
 80038dc:	400a      	ands	r2, r1
 80038de:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d100      	bne.n	80038ea <HAL_RCC_OscConfig+0x5ae>
 80038e8:	e09d      	b.n	8003a26 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	2b0c      	cmp	r3, #12
 80038ee:	d100      	bne.n	80038f2 <HAL_RCC_OscConfig+0x5b6>
 80038f0:	e076      	b.n	80039e0 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d145      	bne.n	8003986 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038fa:	4b30      	ldr	r3, [pc, #192]	@ (80039bc <HAL_RCC_OscConfig+0x680>)
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	4b2f      	ldr	r3, [pc, #188]	@ (80039bc <HAL_RCC_OscConfig+0x680>)
 8003900:	4935      	ldr	r1, [pc, #212]	@ (80039d8 <HAL_RCC_OscConfig+0x69c>)
 8003902:	400a      	ands	r2, r1
 8003904:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003906:	f7fe fabf 	bl	8001e88 <HAL_GetTick>
 800390a:	0003      	movs	r3, r0
 800390c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800390e:	e008      	b.n	8003922 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003910:	f7fe faba 	bl	8001e88 <HAL_GetTick>
 8003914:	0002      	movs	r2, r0
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	2b02      	cmp	r3, #2
 800391c:	d901      	bls.n	8003922 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e082      	b.n	8003a28 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003922:	4b26      	ldr	r3, [pc, #152]	@ (80039bc <HAL_RCC_OscConfig+0x680>)
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	2380      	movs	r3, #128	@ 0x80
 8003928:	049b      	lsls	r3, r3, #18
 800392a:	4013      	ands	r3, r2
 800392c:	d1f0      	bne.n	8003910 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800392e:	4b23      	ldr	r3, [pc, #140]	@ (80039bc <HAL_RCC_OscConfig+0x680>)
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	4a2a      	ldr	r2, [pc, #168]	@ (80039dc <HAL_RCC_OscConfig+0x6a0>)
 8003934:	4013      	ands	r3, r2
 8003936:	0019      	movs	r1, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003940:	431a      	orrs	r2, r3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003946:	431a      	orrs	r2, r3
 8003948:	4b1c      	ldr	r3, [pc, #112]	@ (80039bc <HAL_RCC_OscConfig+0x680>)
 800394a:	430a      	orrs	r2, r1
 800394c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800394e:	4b1b      	ldr	r3, [pc, #108]	@ (80039bc <HAL_RCC_OscConfig+0x680>)
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	4b1a      	ldr	r3, [pc, #104]	@ (80039bc <HAL_RCC_OscConfig+0x680>)
 8003954:	2180      	movs	r1, #128	@ 0x80
 8003956:	0449      	lsls	r1, r1, #17
 8003958:	430a      	orrs	r2, r1
 800395a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800395c:	f7fe fa94 	bl	8001e88 <HAL_GetTick>
 8003960:	0003      	movs	r3, r0
 8003962:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003964:	e008      	b.n	8003978 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003966:	f7fe fa8f 	bl	8001e88 <HAL_GetTick>
 800396a:	0002      	movs	r2, r0
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	2b02      	cmp	r3, #2
 8003972:	d901      	bls.n	8003978 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	e057      	b.n	8003a28 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003978:	4b10      	ldr	r3, [pc, #64]	@ (80039bc <HAL_RCC_OscConfig+0x680>)
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	2380      	movs	r3, #128	@ 0x80
 800397e:	049b      	lsls	r3, r3, #18
 8003980:	4013      	ands	r3, r2
 8003982:	d0f0      	beq.n	8003966 <HAL_RCC_OscConfig+0x62a>
 8003984:	e04f      	b.n	8003a26 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003986:	4b0d      	ldr	r3, [pc, #52]	@ (80039bc <HAL_RCC_OscConfig+0x680>)
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	4b0c      	ldr	r3, [pc, #48]	@ (80039bc <HAL_RCC_OscConfig+0x680>)
 800398c:	4912      	ldr	r1, [pc, #72]	@ (80039d8 <HAL_RCC_OscConfig+0x69c>)
 800398e:	400a      	ands	r2, r1
 8003990:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003992:	f7fe fa79 	bl	8001e88 <HAL_GetTick>
 8003996:	0003      	movs	r3, r0
 8003998:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800399a:	e008      	b.n	80039ae <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800399c:	f7fe fa74 	bl	8001e88 <HAL_GetTick>
 80039a0:	0002      	movs	r2, r0
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d901      	bls.n	80039ae <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e03c      	b.n	8003a28 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80039ae:	4b03      	ldr	r3, [pc, #12]	@ (80039bc <HAL_RCC_OscConfig+0x680>)
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	2380      	movs	r3, #128	@ 0x80
 80039b4:	049b      	lsls	r3, r3, #18
 80039b6:	4013      	ands	r3, r2
 80039b8:	d1f0      	bne.n	800399c <HAL_RCC_OscConfig+0x660>
 80039ba:	e034      	b.n	8003a26 <HAL_RCC_OscConfig+0x6ea>
 80039bc:	40021000 	.word	0x40021000
 80039c0:	ffff1fff 	.word	0xffff1fff
 80039c4:	fffffeff 	.word	0xfffffeff
 80039c8:	40007000 	.word	0x40007000
 80039cc:	fffffbff 	.word	0xfffffbff
 80039d0:	00001388 	.word	0x00001388
 80039d4:	efffffff 	.word	0xefffffff
 80039d8:	feffffff 	.word	0xfeffffff
 80039dc:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d101      	bne.n	80039ec <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e01d      	b.n	8003a28 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80039ec:	4b10      	ldr	r3, [pc, #64]	@ (8003a30 <HAL_RCC_OscConfig+0x6f4>)
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039f2:	69ba      	ldr	r2, [r7, #24]
 80039f4:	2380      	movs	r3, #128	@ 0x80
 80039f6:	025b      	lsls	r3, r3, #9
 80039f8:	401a      	ands	r2, r3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d10f      	bne.n	8003a22 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003a02:	69ba      	ldr	r2, [r7, #24]
 8003a04:	23f0      	movs	r3, #240	@ 0xf0
 8003a06:	039b      	lsls	r3, r3, #14
 8003a08:	401a      	ands	r2, r3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d107      	bne.n	8003a22 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003a12:	69ba      	ldr	r2, [r7, #24]
 8003a14:	23c0      	movs	r3, #192	@ 0xc0
 8003a16:	041b      	lsls	r3, r3, #16
 8003a18:	401a      	ands	r2, r3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d001      	beq.n	8003a26 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e000      	b.n	8003a28 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8003a26:	2300      	movs	r3, #0
}
 8003a28:	0018      	movs	r0, r3
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	b00a      	add	sp, #40	@ 0x28
 8003a2e:	bdb0      	pop	{r4, r5, r7, pc}
 8003a30:	40021000 	.word	0x40021000

08003a34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a34:	b5b0      	push	{r4, r5, r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d101      	bne.n	8003a48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e128      	b.n	8003c9a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a48:	4b96      	ldr	r3, [pc, #600]	@ (8003ca4 <HAL_RCC_ClockConfig+0x270>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	4013      	ands	r3, r2
 8003a50:	683a      	ldr	r2, [r7, #0]
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d91e      	bls.n	8003a94 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a56:	4b93      	ldr	r3, [pc, #588]	@ (8003ca4 <HAL_RCC_ClockConfig+0x270>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	4393      	bics	r3, r2
 8003a5e:	0019      	movs	r1, r3
 8003a60:	4b90      	ldr	r3, [pc, #576]	@ (8003ca4 <HAL_RCC_ClockConfig+0x270>)
 8003a62:	683a      	ldr	r2, [r7, #0]
 8003a64:	430a      	orrs	r2, r1
 8003a66:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003a68:	f7fe fa0e 	bl	8001e88 <HAL_GetTick>
 8003a6c:	0003      	movs	r3, r0
 8003a6e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a70:	e009      	b.n	8003a86 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a72:	f7fe fa09 	bl	8001e88 <HAL_GetTick>
 8003a76:	0002      	movs	r2, r0
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	4a8a      	ldr	r2, [pc, #552]	@ (8003ca8 <HAL_RCC_ClockConfig+0x274>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d901      	bls.n	8003a86 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e109      	b.n	8003c9a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a86:	4b87      	ldr	r3, [pc, #540]	@ (8003ca4 <HAL_RCC_ClockConfig+0x270>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	683a      	ldr	r2, [r7, #0]
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d1ee      	bne.n	8003a72 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2202      	movs	r2, #2
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	d009      	beq.n	8003ab2 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a9e:	4b83      	ldr	r3, [pc, #524]	@ (8003cac <HAL_RCC_ClockConfig+0x278>)
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	22f0      	movs	r2, #240	@ 0xf0
 8003aa4:	4393      	bics	r3, r2
 8003aa6:	0019      	movs	r1, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	689a      	ldr	r2, [r3, #8]
 8003aac:	4b7f      	ldr	r3, [pc, #508]	@ (8003cac <HAL_RCC_ClockConfig+0x278>)
 8003aae:	430a      	orrs	r2, r1
 8003ab0:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	4013      	ands	r3, r2
 8003aba:	d100      	bne.n	8003abe <HAL_RCC_ClockConfig+0x8a>
 8003abc:	e089      	b.n	8003bd2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	2b02      	cmp	r3, #2
 8003ac4:	d107      	bne.n	8003ad6 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003ac6:	4b79      	ldr	r3, [pc, #484]	@ (8003cac <HAL_RCC_ClockConfig+0x278>)
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	2380      	movs	r3, #128	@ 0x80
 8003acc:	029b      	lsls	r3, r3, #10
 8003ace:	4013      	ands	r3, r2
 8003ad0:	d120      	bne.n	8003b14 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e0e1      	b.n	8003c9a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	2b03      	cmp	r3, #3
 8003adc:	d107      	bne.n	8003aee <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003ade:	4b73      	ldr	r3, [pc, #460]	@ (8003cac <HAL_RCC_ClockConfig+0x278>)
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	2380      	movs	r3, #128	@ 0x80
 8003ae4:	049b      	lsls	r3, r3, #18
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	d114      	bne.n	8003b14 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e0d5      	b.n	8003c9a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d106      	bne.n	8003b04 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003af6:	4b6d      	ldr	r3, [pc, #436]	@ (8003cac <HAL_RCC_ClockConfig+0x278>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	2204      	movs	r2, #4
 8003afc:	4013      	ands	r3, r2
 8003afe:	d109      	bne.n	8003b14 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e0ca      	b.n	8003c9a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003b04:	4b69      	ldr	r3, [pc, #420]	@ (8003cac <HAL_RCC_ClockConfig+0x278>)
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	2380      	movs	r3, #128	@ 0x80
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	d101      	bne.n	8003b14 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e0c2      	b.n	8003c9a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b14:	4b65      	ldr	r3, [pc, #404]	@ (8003cac <HAL_RCC_ClockConfig+0x278>)
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	2203      	movs	r2, #3
 8003b1a:	4393      	bics	r3, r2
 8003b1c:	0019      	movs	r1, r3
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685a      	ldr	r2, [r3, #4]
 8003b22:	4b62      	ldr	r3, [pc, #392]	@ (8003cac <HAL_RCC_ClockConfig+0x278>)
 8003b24:	430a      	orrs	r2, r1
 8003b26:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b28:	f7fe f9ae 	bl	8001e88 <HAL_GetTick>
 8003b2c:	0003      	movs	r3, r0
 8003b2e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	2b02      	cmp	r3, #2
 8003b36:	d111      	bne.n	8003b5c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b38:	e009      	b.n	8003b4e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b3a:	f7fe f9a5 	bl	8001e88 <HAL_GetTick>
 8003b3e:	0002      	movs	r2, r0
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	4a58      	ldr	r2, [pc, #352]	@ (8003ca8 <HAL_RCC_ClockConfig+0x274>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d901      	bls.n	8003b4e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e0a5      	b.n	8003c9a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b4e:	4b57      	ldr	r3, [pc, #348]	@ (8003cac <HAL_RCC_ClockConfig+0x278>)
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	220c      	movs	r2, #12
 8003b54:	4013      	ands	r3, r2
 8003b56:	2b08      	cmp	r3, #8
 8003b58:	d1ef      	bne.n	8003b3a <HAL_RCC_ClockConfig+0x106>
 8003b5a:	e03a      	b.n	8003bd2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	2b03      	cmp	r3, #3
 8003b62:	d111      	bne.n	8003b88 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b64:	e009      	b.n	8003b7a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b66:	f7fe f98f 	bl	8001e88 <HAL_GetTick>
 8003b6a:	0002      	movs	r2, r0
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	4a4d      	ldr	r2, [pc, #308]	@ (8003ca8 <HAL_RCC_ClockConfig+0x274>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d901      	bls.n	8003b7a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e08f      	b.n	8003c9a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b7a:	4b4c      	ldr	r3, [pc, #304]	@ (8003cac <HAL_RCC_ClockConfig+0x278>)
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	220c      	movs	r2, #12
 8003b80:	4013      	ands	r3, r2
 8003b82:	2b0c      	cmp	r3, #12
 8003b84:	d1ef      	bne.n	8003b66 <HAL_RCC_ClockConfig+0x132>
 8003b86:	e024      	b.n	8003bd2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d11b      	bne.n	8003bc8 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b90:	e009      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b92:	f7fe f979 	bl	8001e88 <HAL_GetTick>
 8003b96:	0002      	movs	r2, r0
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	4a42      	ldr	r2, [pc, #264]	@ (8003ca8 <HAL_RCC_ClockConfig+0x274>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d901      	bls.n	8003ba6 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e079      	b.n	8003c9a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ba6:	4b41      	ldr	r3, [pc, #260]	@ (8003cac <HAL_RCC_ClockConfig+0x278>)
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	220c      	movs	r2, #12
 8003bac:	4013      	ands	r3, r2
 8003bae:	2b04      	cmp	r3, #4
 8003bb0:	d1ef      	bne.n	8003b92 <HAL_RCC_ClockConfig+0x15e>
 8003bb2:	e00e      	b.n	8003bd2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bb4:	f7fe f968 	bl	8001e88 <HAL_GetTick>
 8003bb8:	0002      	movs	r2, r0
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	4a3a      	ldr	r2, [pc, #232]	@ (8003ca8 <HAL_RCC_ClockConfig+0x274>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d901      	bls.n	8003bc8 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	e068      	b.n	8003c9a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003bc8:	4b38      	ldr	r3, [pc, #224]	@ (8003cac <HAL_RCC_ClockConfig+0x278>)
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	220c      	movs	r2, #12
 8003bce:	4013      	ands	r3, r2
 8003bd0:	d1f0      	bne.n	8003bb4 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003bd2:	4b34      	ldr	r3, [pc, #208]	@ (8003ca4 <HAL_RCC_ClockConfig+0x270>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	4013      	ands	r3, r2
 8003bda:	683a      	ldr	r2, [r7, #0]
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d21e      	bcs.n	8003c1e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003be0:	4b30      	ldr	r3, [pc, #192]	@ (8003ca4 <HAL_RCC_ClockConfig+0x270>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	2201      	movs	r2, #1
 8003be6:	4393      	bics	r3, r2
 8003be8:	0019      	movs	r1, r3
 8003bea:	4b2e      	ldr	r3, [pc, #184]	@ (8003ca4 <HAL_RCC_ClockConfig+0x270>)
 8003bec:	683a      	ldr	r2, [r7, #0]
 8003bee:	430a      	orrs	r2, r1
 8003bf0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003bf2:	f7fe f949 	bl	8001e88 <HAL_GetTick>
 8003bf6:	0003      	movs	r3, r0
 8003bf8:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bfa:	e009      	b.n	8003c10 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bfc:	f7fe f944 	bl	8001e88 <HAL_GetTick>
 8003c00:	0002      	movs	r2, r0
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	4a28      	ldr	r2, [pc, #160]	@ (8003ca8 <HAL_RCC_ClockConfig+0x274>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d901      	bls.n	8003c10 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8003c0c:	2303      	movs	r3, #3
 8003c0e:	e044      	b.n	8003c9a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c10:	4b24      	ldr	r3, [pc, #144]	@ (8003ca4 <HAL_RCC_ClockConfig+0x270>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	2201      	movs	r2, #1
 8003c16:	4013      	ands	r3, r2
 8003c18:	683a      	ldr	r2, [r7, #0]
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d1ee      	bne.n	8003bfc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	2204      	movs	r2, #4
 8003c24:	4013      	ands	r3, r2
 8003c26:	d009      	beq.n	8003c3c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c28:	4b20      	ldr	r3, [pc, #128]	@ (8003cac <HAL_RCC_ClockConfig+0x278>)
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	4a20      	ldr	r2, [pc, #128]	@ (8003cb0 <HAL_RCC_ClockConfig+0x27c>)
 8003c2e:	4013      	ands	r3, r2
 8003c30:	0019      	movs	r1, r3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	68da      	ldr	r2, [r3, #12]
 8003c36:	4b1d      	ldr	r3, [pc, #116]	@ (8003cac <HAL_RCC_ClockConfig+0x278>)
 8003c38:	430a      	orrs	r2, r1
 8003c3a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	2208      	movs	r2, #8
 8003c42:	4013      	ands	r3, r2
 8003c44:	d00a      	beq.n	8003c5c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003c46:	4b19      	ldr	r3, [pc, #100]	@ (8003cac <HAL_RCC_ClockConfig+0x278>)
 8003c48:	68db      	ldr	r3, [r3, #12]
 8003c4a:	4a1a      	ldr	r2, [pc, #104]	@ (8003cb4 <HAL_RCC_ClockConfig+0x280>)
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	0019      	movs	r1, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	691b      	ldr	r3, [r3, #16]
 8003c54:	00da      	lsls	r2, r3, #3
 8003c56:	4b15      	ldr	r3, [pc, #84]	@ (8003cac <HAL_RCC_ClockConfig+0x278>)
 8003c58:	430a      	orrs	r2, r1
 8003c5a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c5c:	f000 f832 	bl	8003cc4 <HAL_RCC_GetSysClockFreq>
 8003c60:	0001      	movs	r1, r0
 8003c62:	4b12      	ldr	r3, [pc, #72]	@ (8003cac <HAL_RCC_ClockConfig+0x278>)
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	091b      	lsrs	r3, r3, #4
 8003c68:	220f      	movs	r2, #15
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	4a12      	ldr	r2, [pc, #72]	@ (8003cb8 <HAL_RCC_ClockConfig+0x284>)
 8003c6e:	5cd3      	ldrb	r3, [r2, r3]
 8003c70:	000a      	movs	r2, r1
 8003c72:	40da      	lsrs	r2, r3
 8003c74:	4b11      	ldr	r3, [pc, #68]	@ (8003cbc <HAL_RCC_ClockConfig+0x288>)
 8003c76:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003c78:	4b11      	ldr	r3, [pc, #68]	@ (8003cc0 <HAL_RCC_ClockConfig+0x28c>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	250b      	movs	r5, #11
 8003c7e:	197c      	adds	r4, r7, r5
 8003c80:	0018      	movs	r0, r3
 8003c82:	f7fe f8bb 	bl	8001dfc <HAL_InitTick>
 8003c86:	0003      	movs	r3, r0
 8003c88:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8003c8a:	197b      	adds	r3, r7, r5
 8003c8c:	781b      	ldrb	r3, [r3, #0]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d002      	beq.n	8003c98 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8003c92:	197b      	adds	r3, r7, r5
 8003c94:	781b      	ldrb	r3, [r3, #0]
 8003c96:	e000      	b.n	8003c9a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8003c98:	2300      	movs	r3, #0
}
 8003c9a:	0018      	movs	r0, r3
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	b004      	add	sp, #16
 8003ca0:	bdb0      	pop	{r4, r5, r7, pc}
 8003ca2:	46c0      	nop			@ (mov r8, r8)
 8003ca4:	40022000 	.word	0x40022000
 8003ca8:	00001388 	.word	0x00001388
 8003cac:	40021000 	.word	0x40021000
 8003cb0:	fffff8ff 	.word	0xfffff8ff
 8003cb4:	ffffc7ff 	.word	0xffffc7ff
 8003cb8:	080060a4 	.word	0x080060a4
 8003cbc:	20000570 	.word	0x20000570
 8003cc0:	20000574 	.word	0x20000574

08003cc4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cc4:	b5b0      	push	{r4, r5, r7, lr}
 8003cc6:	b08e      	sub	sp, #56	@ 0x38
 8003cc8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8003cca:	4b4c      	ldr	r3, [pc, #304]	@ (8003dfc <HAL_RCC_GetSysClockFreq+0x138>)
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003cd0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003cd2:	230c      	movs	r3, #12
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	2b0c      	cmp	r3, #12
 8003cd8:	d014      	beq.n	8003d04 <HAL_RCC_GetSysClockFreq+0x40>
 8003cda:	d900      	bls.n	8003cde <HAL_RCC_GetSysClockFreq+0x1a>
 8003cdc:	e07b      	b.n	8003dd6 <HAL_RCC_GetSysClockFreq+0x112>
 8003cde:	2b04      	cmp	r3, #4
 8003ce0:	d002      	beq.n	8003ce8 <HAL_RCC_GetSysClockFreq+0x24>
 8003ce2:	2b08      	cmp	r3, #8
 8003ce4:	d00b      	beq.n	8003cfe <HAL_RCC_GetSysClockFreq+0x3a>
 8003ce6:	e076      	b.n	8003dd6 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003ce8:	4b44      	ldr	r3, [pc, #272]	@ (8003dfc <HAL_RCC_GetSysClockFreq+0x138>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2210      	movs	r2, #16
 8003cee:	4013      	ands	r3, r2
 8003cf0:	d002      	beq.n	8003cf8 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8003cf2:	4b43      	ldr	r3, [pc, #268]	@ (8003e00 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003cf4:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8003cf6:	e07c      	b.n	8003df2 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8003cf8:	4b42      	ldr	r3, [pc, #264]	@ (8003e04 <HAL_RCC_GetSysClockFreq+0x140>)
 8003cfa:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8003cfc:	e079      	b.n	8003df2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003cfe:	4b42      	ldr	r3, [pc, #264]	@ (8003e08 <HAL_RCC_GetSysClockFreq+0x144>)
 8003d00:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8003d02:	e076      	b.n	8003df2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003d04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d06:	0c9a      	lsrs	r2, r3, #18
 8003d08:	230f      	movs	r3, #15
 8003d0a:	401a      	ands	r2, r3
 8003d0c:	4b3f      	ldr	r3, [pc, #252]	@ (8003e0c <HAL_RCC_GetSysClockFreq+0x148>)
 8003d0e:	5c9b      	ldrb	r3, [r3, r2]
 8003d10:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003d12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d14:	0d9a      	lsrs	r2, r3, #22
 8003d16:	2303      	movs	r3, #3
 8003d18:	4013      	ands	r3, r2
 8003d1a:	3301      	adds	r3, #1
 8003d1c:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d1e:	4b37      	ldr	r3, [pc, #220]	@ (8003dfc <HAL_RCC_GetSysClockFreq+0x138>)
 8003d20:	68da      	ldr	r2, [r3, #12]
 8003d22:	2380      	movs	r3, #128	@ 0x80
 8003d24:	025b      	lsls	r3, r3, #9
 8003d26:	4013      	ands	r3, r2
 8003d28:	d01a      	beq.n	8003d60 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003d2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d2c:	61bb      	str	r3, [r7, #24]
 8003d2e:	2300      	movs	r3, #0
 8003d30:	61fb      	str	r3, [r7, #28]
 8003d32:	4a35      	ldr	r2, [pc, #212]	@ (8003e08 <HAL_RCC_GetSysClockFreq+0x144>)
 8003d34:	2300      	movs	r3, #0
 8003d36:	69b8      	ldr	r0, [r7, #24]
 8003d38:	69f9      	ldr	r1, [r7, #28]
 8003d3a:	f7fc fa91 	bl	8000260 <__aeabi_lmul>
 8003d3e:	0002      	movs	r2, r0
 8003d40:	000b      	movs	r3, r1
 8003d42:	0010      	movs	r0, r2
 8003d44:	0019      	movs	r1, r3
 8003d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d48:	613b      	str	r3, [r7, #16]
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	617b      	str	r3, [r7, #20]
 8003d4e:	693a      	ldr	r2, [r7, #16]
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	f7fc fa65 	bl	8000220 <__aeabi_uldivmod>
 8003d56:	0002      	movs	r2, r0
 8003d58:	000b      	movs	r3, r1
 8003d5a:	0013      	movs	r3, r2
 8003d5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d5e:	e037      	b.n	8003dd0 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003d60:	4b26      	ldr	r3, [pc, #152]	@ (8003dfc <HAL_RCC_GetSysClockFreq+0x138>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2210      	movs	r2, #16
 8003d66:	4013      	ands	r3, r2
 8003d68:	d01a      	beq.n	8003da0 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8003d6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d6c:	60bb      	str	r3, [r7, #8]
 8003d6e:	2300      	movs	r3, #0
 8003d70:	60fb      	str	r3, [r7, #12]
 8003d72:	4a23      	ldr	r2, [pc, #140]	@ (8003e00 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003d74:	2300      	movs	r3, #0
 8003d76:	68b8      	ldr	r0, [r7, #8]
 8003d78:	68f9      	ldr	r1, [r7, #12]
 8003d7a:	f7fc fa71 	bl	8000260 <__aeabi_lmul>
 8003d7e:	0002      	movs	r2, r0
 8003d80:	000b      	movs	r3, r1
 8003d82:	0010      	movs	r0, r2
 8003d84:	0019      	movs	r1, r3
 8003d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d88:	603b      	str	r3, [r7, #0]
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	607b      	str	r3, [r7, #4]
 8003d8e:	683a      	ldr	r2, [r7, #0]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f7fc fa45 	bl	8000220 <__aeabi_uldivmod>
 8003d96:	0002      	movs	r2, r0
 8003d98:	000b      	movs	r3, r1
 8003d9a:	0013      	movs	r3, r2
 8003d9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d9e:	e017      	b.n	8003dd0 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003da0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003da2:	0018      	movs	r0, r3
 8003da4:	2300      	movs	r3, #0
 8003da6:	0019      	movs	r1, r3
 8003da8:	4a16      	ldr	r2, [pc, #88]	@ (8003e04 <HAL_RCC_GetSysClockFreq+0x140>)
 8003daa:	2300      	movs	r3, #0
 8003dac:	f7fc fa58 	bl	8000260 <__aeabi_lmul>
 8003db0:	0002      	movs	r2, r0
 8003db2:	000b      	movs	r3, r1
 8003db4:	0010      	movs	r0, r2
 8003db6:	0019      	movs	r1, r3
 8003db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dba:	001c      	movs	r4, r3
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	001d      	movs	r5, r3
 8003dc0:	0022      	movs	r2, r4
 8003dc2:	002b      	movs	r3, r5
 8003dc4:	f7fc fa2c 	bl	8000220 <__aeabi_uldivmod>
 8003dc8:	0002      	movs	r2, r0
 8003dca:	000b      	movs	r3, r1
 8003dcc:	0013      	movs	r3, r2
 8003dce:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8003dd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dd2:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8003dd4:	e00d      	b.n	8003df2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003dd6:	4b09      	ldr	r3, [pc, #36]	@ (8003dfc <HAL_RCC_GetSysClockFreq+0x138>)
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	0b5b      	lsrs	r3, r3, #13
 8003ddc:	2207      	movs	r2, #7
 8003dde:	4013      	ands	r3, r2
 8003de0:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003de2:	6a3b      	ldr	r3, [r7, #32]
 8003de4:	3301      	adds	r3, #1
 8003de6:	2280      	movs	r2, #128	@ 0x80
 8003de8:	0212      	lsls	r2, r2, #8
 8003dea:	409a      	lsls	r2, r3
 8003dec:	0013      	movs	r3, r2
 8003dee:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8003df0:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8003df4:	0018      	movs	r0, r3
 8003df6:	46bd      	mov	sp, r7
 8003df8:	b00e      	add	sp, #56	@ 0x38
 8003dfa:	bdb0      	pop	{r4, r5, r7, pc}
 8003dfc:	40021000 	.word	0x40021000
 8003e00:	003d0900 	.word	0x003d0900
 8003e04:	00f42400 	.word	0x00f42400
 8003e08:	007a1200 	.word	0x007a1200
 8003e0c:	080060bc 	.word	0x080060bc

08003e10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e14:	4b02      	ldr	r3, [pc, #8]	@ (8003e20 <HAL_RCC_GetHCLKFreq+0x10>)
 8003e16:	681b      	ldr	r3, [r3, #0]
}
 8003e18:	0018      	movs	r0, r3
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	46c0      	nop			@ (mov r8, r8)
 8003e20:	20000570 	.word	0x20000570

08003e24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e28:	f7ff fff2 	bl	8003e10 <HAL_RCC_GetHCLKFreq>
 8003e2c:	0001      	movs	r1, r0
 8003e2e:	4b06      	ldr	r3, [pc, #24]	@ (8003e48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	0a1b      	lsrs	r3, r3, #8
 8003e34:	2207      	movs	r2, #7
 8003e36:	4013      	ands	r3, r2
 8003e38:	4a04      	ldr	r2, [pc, #16]	@ (8003e4c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003e3a:	5cd3      	ldrb	r3, [r2, r3]
 8003e3c:	40d9      	lsrs	r1, r3
 8003e3e:	000b      	movs	r3, r1
}
 8003e40:	0018      	movs	r0, r3
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	46c0      	nop			@ (mov r8, r8)
 8003e48:	40021000 	.word	0x40021000
 8003e4c:	080060b4 	.word	0x080060b4

08003e50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003e54:	f7ff ffdc 	bl	8003e10 <HAL_RCC_GetHCLKFreq>
 8003e58:	0001      	movs	r1, r0
 8003e5a:	4b06      	ldr	r3, [pc, #24]	@ (8003e74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	0adb      	lsrs	r3, r3, #11
 8003e60:	2207      	movs	r2, #7
 8003e62:	4013      	ands	r3, r2
 8003e64:	4a04      	ldr	r2, [pc, #16]	@ (8003e78 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003e66:	5cd3      	ldrb	r3, [r2, r3]
 8003e68:	40d9      	lsrs	r1, r3
 8003e6a:	000b      	movs	r3, r1
}
 8003e6c:	0018      	movs	r0, r3
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	46c0      	nop			@ (mov r8, r8)
 8003e74:	40021000 	.word	0x40021000
 8003e78:	080060b4 	.word	0x080060b4

08003e7c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b086      	sub	sp, #24
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8003e84:	2017      	movs	r0, #23
 8003e86:	183b      	adds	r3, r7, r0
 8003e88:	2200      	movs	r2, #0
 8003e8a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	2220      	movs	r2, #32
 8003e92:	4013      	ands	r3, r2
 8003e94:	d100      	bne.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8003e96:	e0c7      	b.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e98:	4b84      	ldr	r3, [pc, #528]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003e9a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e9c:	2380      	movs	r3, #128	@ 0x80
 8003e9e:	055b      	lsls	r3, r3, #21
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	d109      	bne.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ea4:	4b81      	ldr	r3, [pc, #516]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003ea6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ea8:	4b80      	ldr	r3, [pc, #512]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003eaa:	2180      	movs	r1, #128	@ 0x80
 8003eac:	0549      	lsls	r1, r1, #21
 8003eae:	430a      	orrs	r2, r1
 8003eb0:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8003eb2:	183b      	adds	r3, r7, r0
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eb8:	4b7d      	ldr	r3, [pc, #500]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	2380      	movs	r3, #128	@ 0x80
 8003ebe:	005b      	lsls	r3, r3, #1
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	d11a      	bne.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ec4:	4b7a      	ldr	r3, [pc, #488]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	4b79      	ldr	r3, [pc, #484]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003eca:	2180      	movs	r1, #128	@ 0x80
 8003ecc:	0049      	lsls	r1, r1, #1
 8003ece:	430a      	orrs	r2, r1
 8003ed0:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ed2:	f7fd ffd9 	bl	8001e88 <HAL_GetTick>
 8003ed6:	0003      	movs	r3, r0
 8003ed8:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eda:	e008      	b.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003edc:	f7fd ffd4 	bl	8001e88 <HAL_GetTick>
 8003ee0:	0002      	movs	r2, r0
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	2b64      	cmp	r3, #100	@ 0x64
 8003ee8:	d901      	bls.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e0d9      	b.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eee:	4b70      	ldr	r3, [pc, #448]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	2380      	movs	r3, #128	@ 0x80
 8003ef4:	005b      	lsls	r3, r3, #1
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	d0f0      	beq.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003efa:	4b6c      	ldr	r3, [pc, #432]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	23c0      	movs	r3, #192	@ 0xc0
 8003f00:	039b      	lsls	r3, r3, #14
 8003f02:	4013      	ands	r3, r2
 8003f04:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	685a      	ldr	r2, [r3, #4]
 8003f0a:	23c0      	movs	r3, #192	@ 0xc0
 8003f0c:	039b      	lsls	r3, r3, #14
 8003f0e:	4013      	ands	r3, r2
 8003f10:	68fa      	ldr	r2, [r7, #12]
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d013      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	685a      	ldr	r2, [r3, #4]
 8003f1a:	23c0      	movs	r3, #192	@ 0xc0
 8003f1c:	029b      	lsls	r3, r3, #10
 8003f1e:	401a      	ands	r2, r3
 8003f20:	23c0      	movs	r3, #192	@ 0xc0
 8003f22:	029b      	lsls	r3, r3, #10
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d10a      	bne.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003f28:	4b60      	ldr	r3, [pc, #384]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	2380      	movs	r3, #128	@ 0x80
 8003f2e:	029b      	lsls	r3, r3, #10
 8003f30:	401a      	ands	r2, r3
 8003f32:	2380      	movs	r3, #128	@ 0x80
 8003f34:	029b      	lsls	r3, r3, #10
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d101      	bne.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e0b1      	b.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003f3e:	4b5b      	ldr	r3, [pc, #364]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003f40:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003f42:	23c0      	movs	r3, #192	@ 0xc0
 8003f44:	029b      	lsls	r3, r3, #10
 8003f46:	4013      	ands	r3, r2
 8003f48:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d03b      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	685a      	ldr	r2, [r3, #4]
 8003f54:	23c0      	movs	r3, #192	@ 0xc0
 8003f56:	029b      	lsls	r3, r3, #10
 8003f58:	4013      	ands	r3, r2
 8003f5a:	68fa      	ldr	r2, [r7, #12]
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d033      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2220      	movs	r2, #32
 8003f66:	4013      	ands	r3, r2
 8003f68:	d02e      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003f6a:	4b50      	ldr	r3, [pc, #320]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003f6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f6e:	4a51      	ldr	r2, [pc, #324]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8003f70:	4013      	ands	r3, r2
 8003f72:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f74:	4b4d      	ldr	r3, [pc, #308]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003f76:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003f78:	4b4c      	ldr	r3, [pc, #304]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003f7a:	2180      	movs	r1, #128	@ 0x80
 8003f7c:	0309      	lsls	r1, r1, #12
 8003f7e:	430a      	orrs	r2, r1
 8003f80:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f82:	4b4a      	ldr	r3, [pc, #296]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003f84:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003f86:	4b49      	ldr	r3, [pc, #292]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003f88:	494b      	ldr	r1, [pc, #300]	@ (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003f8a:	400a      	ands	r2, r1
 8003f8c:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003f8e:	4b47      	ldr	r3, [pc, #284]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003f90:	68fa      	ldr	r2, [r7, #12]
 8003f92:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003f94:	68fa      	ldr	r2, [r7, #12]
 8003f96:	2380      	movs	r3, #128	@ 0x80
 8003f98:	005b      	lsls	r3, r3, #1
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	d014      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f9e:	f7fd ff73 	bl	8001e88 <HAL_GetTick>
 8003fa2:	0003      	movs	r3, r0
 8003fa4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003fa6:	e009      	b.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fa8:	f7fd ff6e 	bl	8001e88 <HAL_GetTick>
 8003fac:	0002      	movs	r2, r0
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	4a42      	ldr	r2, [pc, #264]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d901      	bls.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e072      	b.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003fbc:	4b3b      	ldr	r3, [pc, #236]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003fbe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003fc0:	2380      	movs	r3, #128	@ 0x80
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	d0ef      	beq.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	2220      	movs	r2, #32
 8003fce:	4013      	ands	r3, r2
 8003fd0:	d01f      	beq.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685a      	ldr	r2, [r3, #4]
 8003fd6:	23c0      	movs	r3, #192	@ 0xc0
 8003fd8:	029b      	lsls	r3, r3, #10
 8003fda:	401a      	ands	r2, r3
 8003fdc:	23c0      	movs	r3, #192	@ 0xc0
 8003fde:	029b      	lsls	r3, r3, #10
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d10c      	bne.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x182>
 8003fe4:	4b31      	ldr	r3, [pc, #196]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a35      	ldr	r2, [pc, #212]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003fea:	4013      	ands	r3, r2
 8003fec:	0019      	movs	r1, r3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	685a      	ldr	r2, [r3, #4]
 8003ff2:	23c0      	movs	r3, #192	@ 0xc0
 8003ff4:	039b      	lsls	r3, r3, #14
 8003ff6:	401a      	ands	r2, r3
 8003ff8:	4b2c      	ldr	r3, [pc, #176]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003ffa:	430a      	orrs	r2, r1
 8003ffc:	601a      	str	r2, [r3, #0]
 8003ffe:	4b2b      	ldr	r3, [pc, #172]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004000:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685a      	ldr	r2, [r3, #4]
 8004006:	23c0      	movs	r3, #192	@ 0xc0
 8004008:	029b      	lsls	r3, r3, #10
 800400a:	401a      	ands	r2, r3
 800400c:	4b27      	ldr	r3, [pc, #156]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800400e:	430a      	orrs	r2, r1
 8004010:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004012:	2317      	movs	r3, #23
 8004014:	18fb      	adds	r3, r7, r3
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	2b01      	cmp	r3, #1
 800401a:	d105      	bne.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800401c:	4b23      	ldr	r3, [pc, #140]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800401e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004020:	4b22      	ldr	r3, [pc, #136]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004022:	4928      	ldr	r1, [pc, #160]	@ (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004024:	400a      	ands	r2, r1
 8004026:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	2202      	movs	r2, #2
 800402e:	4013      	ands	r3, r2
 8004030:	d009      	beq.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004032:	4b1e      	ldr	r3, [pc, #120]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004034:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004036:	220c      	movs	r2, #12
 8004038:	4393      	bics	r3, r2
 800403a:	0019      	movs	r1, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	689a      	ldr	r2, [r3, #8]
 8004040:	4b1a      	ldr	r3, [pc, #104]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004042:	430a      	orrs	r2, r1
 8004044:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	2204      	movs	r2, #4
 800404c:	4013      	ands	r3, r2
 800404e:	d009      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004050:	4b16      	ldr	r3, [pc, #88]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004052:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004054:	4a1c      	ldr	r2, [pc, #112]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8004056:	4013      	ands	r3, r2
 8004058:	0019      	movs	r1, r3
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	68da      	ldr	r2, [r3, #12]
 800405e:	4b13      	ldr	r3, [pc, #76]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004060:	430a      	orrs	r2, r1
 8004062:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2208      	movs	r2, #8
 800406a:	4013      	ands	r3, r2
 800406c:	d009      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800406e:	4b0f      	ldr	r3, [pc, #60]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004070:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004072:	4a16      	ldr	r2, [pc, #88]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8004074:	4013      	ands	r3, r2
 8004076:	0019      	movs	r1, r3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	691a      	ldr	r2, [r3, #16]
 800407c:	4b0b      	ldr	r3, [pc, #44]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800407e:	430a      	orrs	r2, r1
 8004080:	64da      	str	r2, [r3, #76]	@ 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	2280      	movs	r2, #128	@ 0x80
 8004088:	4013      	ands	r3, r2
 800408a:	d009      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800408c:	4b07      	ldr	r3, [pc, #28]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800408e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004090:	4a0f      	ldr	r2, [pc, #60]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004092:	4013      	ands	r3, r2
 8004094:	0019      	movs	r1, r3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	695a      	ldr	r2, [r3, #20]
 800409a:	4b04      	ldr	r3, [pc, #16]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800409c:	430a      	orrs	r2, r1
 800409e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80040a0:	2300      	movs	r3, #0
}
 80040a2:	0018      	movs	r0, r3
 80040a4:	46bd      	mov	sp, r7
 80040a6:	b006      	add	sp, #24
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	46c0      	nop			@ (mov r8, r8)
 80040ac:	40021000 	.word	0x40021000
 80040b0:	40007000 	.word	0x40007000
 80040b4:	fffcffff 	.word	0xfffcffff
 80040b8:	fff7ffff 	.word	0xfff7ffff
 80040bc:	00001388 	.word	0x00001388
 80040c0:	ffcfffff 	.word	0xffcfffff
 80040c4:	efffffff 	.word	0xefffffff
 80040c8:	fffff3ff 	.word	0xfffff3ff
 80040cc:	ffffcfff 	.word	0xffffcfff
 80040d0:	fff3ffff 	.word	0xfff3ffff

080040d4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80040d4:	b5b0      	push	{r4, r5, r7, lr}
 80040d6:	b084      	sub	sp, #16
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80040dc:	230f      	movs	r3, #15
 80040de:	18fb      	adds	r3, r7, r3
 80040e0:	2201      	movs	r2, #1
 80040e2:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d101      	bne.n	80040ee <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e088      	b.n	8004200 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2221      	movs	r2, #33	@ 0x21
 80040f2:	5c9b      	ldrb	r3, [r3, r2]
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d107      	bne.n	800410a <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2220      	movs	r2, #32
 80040fe:	2100      	movs	r1, #0
 8004100:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	0018      	movs	r0, r3
 8004106:	f7fd fa73 	bl	80015f0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2221      	movs	r2, #33	@ 0x21
 800410e:	2102      	movs	r1, #2
 8004110:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	2210      	movs	r2, #16
 800411a:	4013      	ands	r3, r2
 800411c:	2b10      	cmp	r3, #16
 800411e:	d05f      	beq.n	80041e0 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	22ca      	movs	r2, #202	@ 0xca
 8004126:	625a      	str	r2, [r3, #36]	@ 0x24
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	2253      	movs	r2, #83	@ 0x53
 800412e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004130:	250f      	movs	r5, #15
 8004132:	197c      	adds	r4, r7, r5
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	0018      	movs	r0, r3
 8004138:	f000 f890 	bl	800425c <RTC_EnterInitMode>
 800413c:	0003      	movs	r3, r0
 800413e:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8004140:	0028      	movs	r0, r5
 8004142:	183b      	adds	r3, r7, r0
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d12c      	bne.n	80041a4 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	689a      	ldr	r2, [r3, #8]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	492c      	ldr	r1, [pc, #176]	@ (8004208 <HAL_RTC_Init+0x134>)
 8004156:	400a      	ands	r2, r1
 8004158:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	6899      	ldr	r1, [r3, #8]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	685a      	ldr	r2, [r3, #4]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	691b      	ldr	r3, [r3, #16]
 8004168:	431a      	orrs	r2, r3
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	699b      	ldr	r3, [r3, #24]
 800416e:	431a      	orrs	r2, r3
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	430a      	orrs	r2, r1
 8004176:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	68d2      	ldr	r2, [r2, #12]
 8004180:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	6919      	ldr	r1, [r3, #16]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	041a      	lsls	r2, r3, #16
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	430a      	orrs	r2, r1
 8004194:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004196:	183c      	adds	r4, r7, r0
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	0018      	movs	r0, r3
 800419c:	f000 f8a2 	bl	80042e4 <RTC_ExitInitMode>
 80041a0:	0003      	movs	r3, r0
 80041a2:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 80041a4:	230f      	movs	r3, #15
 80041a6:	18fb      	adds	r3, r7, r3
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d113      	bne.n	80041d6 <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	2103      	movs	r1, #3
 80041ba:	438a      	bics	r2, r1
 80041bc:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	69da      	ldr	r2, [r3, #28]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	695b      	ldr	r3, [r3, #20]
 80041cc:	431a      	orrs	r2, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	430a      	orrs	r2, r1
 80041d4:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	22ff      	movs	r2, #255	@ 0xff
 80041dc:	625a      	str	r2, [r3, #36]	@ 0x24
 80041de:	e003      	b.n	80041e8 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80041e0:	230f      	movs	r3, #15
 80041e2:	18fb      	adds	r3, r7, r3
 80041e4:	2200      	movs	r2, #0
 80041e6:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 80041e8:	230f      	movs	r3, #15
 80041ea:	18fb      	adds	r3, r7, r3
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d103      	bne.n	80041fa <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2221      	movs	r2, #33	@ 0x21
 80041f6:	2101      	movs	r1, #1
 80041f8:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80041fa:	230f      	movs	r3, #15
 80041fc:	18fb      	adds	r3, r7, r3
 80041fe:	781b      	ldrb	r3, [r3, #0]
}
 8004200:	0018      	movs	r0, r3
 8004202:	46bd      	mov	sp, r7
 8004204:	b004      	add	sp, #16
 8004206:	bdb0      	pop	{r4, r5, r7, pc}
 8004208:	ff8fffbf 	.word	0xff8fffbf

0800420c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b084      	sub	sp, #16
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004214:	2300      	movs	r3, #0
 8004216:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a0e      	ldr	r2, [pc, #56]	@ (8004258 <HAL_RTC_WaitForSynchro+0x4c>)
 800421e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004220:	f7fd fe32 	bl	8001e88 <HAL_GetTick>
 8004224:	0003      	movs	r3, r0
 8004226:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004228:	e00a      	b.n	8004240 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800422a:	f7fd fe2d 	bl	8001e88 <HAL_GetTick>
 800422e:	0002      	movs	r2, r0
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	1ad2      	subs	r2, r2, r3
 8004234:	23fa      	movs	r3, #250	@ 0xfa
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	429a      	cmp	r2, r3
 800423a:	d901      	bls.n	8004240 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800423c:	2303      	movs	r3, #3
 800423e:	e006      	b.n	800424e <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	2220      	movs	r2, #32
 8004248:	4013      	ands	r3, r2
 800424a:	d0ee      	beq.n	800422a <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 800424c:	2300      	movs	r3, #0
}
 800424e:	0018      	movs	r0, r3
 8004250:	46bd      	mov	sp, r7
 8004252:	b004      	add	sp, #16
 8004254:	bd80      	pop	{r7, pc}
 8004256:	46c0      	nop			@ (mov r8, r8)
 8004258:	0001ff5f 	.word	0x0001ff5f

0800425c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004264:	2300      	movs	r3, #0
 8004266:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004268:	230f      	movs	r3, #15
 800426a:	18fb      	adds	r3, r7, r3
 800426c:	2200      	movs	r2, #0
 800426e:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	2240      	movs	r2, #64	@ 0x40
 8004278:	4013      	ands	r3, r2
 800427a:	d12c      	bne.n	80042d6 <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	68da      	ldr	r2, [r3, #12]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	2180      	movs	r1, #128	@ 0x80
 8004288:	430a      	orrs	r2, r1
 800428a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800428c:	f7fd fdfc 	bl	8001e88 <HAL_GetTick>
 8004290:	0003      	movs	r3, r0
 8004292:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004294:	e014      	b.n	80042c0 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004296:	f7fd fdf7 	bl	8001e88 <HAL_GetTick>
 800429a:	0002      	movs	r2, r0
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	1ad2      	subs	r2, r2, r3
 80042a0:	200f      	movs	r0, #15
 80042a2:	183b      	adds	r3, r7, r0
 80042a4:	1839      	adds	r1, r7, r0
 80042a6:	7809      	ldrb	r1, [r1, #0]
 80042a8:	7019      	strb	r1, [r3, #0]
 80042aa:	23fa      	movs	r3, #250	@ 0xfa
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d906      	bls.n	80042c0 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2221      	movs	r2, #33	@ 0x21
 80042b6:	2104      	movs	r1, #4
 80042b8:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 80042ba:	183b      	adds	r3, r7, r0
 80042bc:	2201      	movs	r2, #1
 80042be:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	2240      	movs	r2, #64	@ 0x40
 80042c8:	4013      	ands	r3, r2
 80042ca:	d104      	bne.n	80042d6 <RTC_EnterInitMode+0x7a>
 80042cc:	230f      	movs	r3, #15
 80042ce:	18fb      	adds	r3, r7, r3
 80042d0:	781b      	ldrb	r3, [r3, #0]
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d1df      	bne.n	8004296 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 80042d6:	230f      	movs	r3, #15
 80042d8:	18fb      	adds	r3, r7, r3
 80042da:	781b      	ldrb	r3, [r3, #0]
}
 80042dc:	0018      	movs	r0, r3
 80042de:	46bd      	mov	sp, r7
 80042e0:	b004      	add	sp, #16
 80042e2:	bd80      	pop	{r7, pc}

080042e4 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80042e4:	b590      	push	{r4, r7, lr}
 80042e6:	b085      	sub	sp, #20
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042ec:	240f      	movs	r4, #15
 80042ee:	193b      	adds	r3, r7, r4
 80042f0:	2200      	movs	r2, #0
 80042f2:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	68da      	ldr	r2, [r3, #12]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	2180      	movs	r1, #128	@ 0x80
 8004300:	438a      	bics	r2, r1
 8004302:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	2220      	movs	r2, #32
 800430c:	4013      	ands	r3, r2
 800430e:	d10c      	bne.n	800432a <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	0018      	movs	r0, r3
 8004314:	f7ff ff7a 	bl	800420c <HAL_RTC_WaitForSynchro>
 8004318:	1e03      	subs	r3, r0, #0
 800431a:	d006      	beq.n	800432a <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2221      	movs	r2, #33	@ 0x21
 8004320:	2104      	movs	r1, #4
 8004322:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8004324:	193b      	adds	r3, r7, r4
 8004326:	2201      	movs	r2, #1
 8004328:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 800432a:	230f      	movs	r3, #15
 800432c:	18fb      	adds	r3, r7, r3
 800432e:	781b      	ldrb	r3, [r3, #0]
}
 8004330:	0018      	movs	r0, r3
 8004332:	46bd      	mov	sp, r7
 8004334:	b005      	add	sp, #20
 8004336:	bd90      	pop	{r4, r7, pc}

08004338 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b082      	sub	sp, #8
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d101      	bne.n	800434a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e032      	b.n	80043b0 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2239      	movs	r2, #57	@ 0x39
 800434e:	5c9b      	ldrb	r3, [r3, r2]
 8004350:	b2db      	uxtb	r3, r3
 8004352:	2b00      	cmp	r3, #0
 8004354:	d107      	bne.n	8004366 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2238      	movs	r2, #56	@ 0x38
 800435a:	2100      	movs	r1, #0
 800435c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	0018      	movs	r0, r3
 8004362:	f7fd f95d 	bl	8001620 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2239      	movs	r2, #57	@ 0x39
 800436a:	2102      	movs	r1, #2
 800436c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	3304      	adds	r3, #4
 8004376:	0019      	movs	r1, r3
 8004378:	0010      	movs	r0, r2
 800437a:	f000 fe97 	bl	80050ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	223e      	movs	r2, #62	@ 0x3e
 8004382:	2101      	movs	r1, #1
 8004384:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	223a      	movs	r2, #58	@ 0x3a
 800438a:	2101      	movs	r1, #1
 800438c:	5499      	strb	r1, [r3, r2]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	223b      	movs	r2, #59	@ 0x3b
 8004392:	2101      	movs	r1, #1
 8004394:	5499      	strb	r1, [r3, r2]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	223c      	movs	r2, #60	@ 0x3c
 800439a:	2101      	movs	r1, #1
 800439c:	5499      	strb	r1, [r3, r2]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	223d      	movs	r2, #61	@ 0x3d
 80043a2:	2101      	movs	r1, #1
 80043a4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2239      	movs	r2, #57	@ 0x39
 80043aa:	2101      	movs	r1, #1
 80043ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80043ae:	2300      	movs	r3, #0
}
 80043b0:	0018      	movs	r0, r3
 80043b2:	46bd      	mov	sp, r7
 80043b4:	b002      	add	sp, #8
 80043b6:	bd80      	pop	{r7, pc}

080043b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b084      	sub	sp, #16
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2239      	movs	r2, #57	@ 0x39
 80043c4:	5c9b      	ldrb	r3, [r3, r2]
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d001      	beq.n	80043d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	e036      	b.n	800443e <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2239      	movs	r2, #57	@ 0x39
 80043d4:	2102      	movs	r1, #2
 80043d6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	68da      	ldr	r2, [r3, #12]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	2101      	movs	r1, #1
 80043e4:	430a      	orrs	r2, r1
 80043e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	2380      	movs	r3, #128	@ 0x80
 80043ee:	05db      	lsls	r3, r3, #23
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d009      	beq.n	8004408 <HAL_TIM_Base_Start_IT+0x50>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a13      	ldr	r2, [pc, #76]	@ (8004448 <HAL_TIM_Base_Start_IT+0x90>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d004      	beq.n	8004408 <HAL_TIM_Base_Start_IT+0x50>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a12      	ldr	r2, [pc, #72]	@ (800444c <HAL_TIM_Base_Start_IT+0x94>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d111      	bne.n	800442c <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	2207      	movs	r2, #7
 8004410:	4013      	ands	r3, r2
 8004412:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2b06      	cmp	r3, #6
 8004418:	d010      	beq.n	800443c <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2101      	movs	r1, #1
 8004426:	430a      	orrs	r2, r1
 8004428:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800442a:	e007      	b.n	800443c <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	2101      	movs	r1, #1
 8004438:	430a      	orrs	r2, r1
 800443a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	0018      	movs	r0, r3
 8004440:	46bd      	mov	sp, r7
 8004442:	b004      	add	sp, #16
 8004444:	bd80      	pop	{r7, pc}
 8004446:	46c0      	nop			@ (mov r8, r8)
 8004448:	40010800 	.word	0x40010800
 800444c:	40011400 	.word	0x40011400

08004450 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b082      	sub	sp, #8
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d101      	bne.n	8004462 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e032      	b.n	80044c8 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2239      	movs	r2, #57	@ 0x39
 8004466:	5c9b      	ldrb	r3, [r3, r2]
 8004468:	b2db      	uxtb	r3, r3
 800446a:	2b00      	cmp	r3, #0
 800446c:	d107      	bne.n	800447e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2238      	movs	r2, #56	@ 0x38
 8004472:	2100      	movs	r1, #0
 8004474:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	0018      	movs	r0, r3
 800447a:	f000 f829 	bl	80044d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2239      	movs	r2, #57	@ 0x39
 8004482:	2102      	movs	r1, #2
 8004484:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	3304      	adds	r3, #4
 800448e:	0019      	movs	r1, r3
 8004490:	0010      	movs	r0, r2
 8004492:	f000 fe0b 	bl	80050ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	223e      	movs	r2, #62	@ 0x3e
 800449a:	2101      	movs	r1, #1
 800449c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	223a      	movs	r2, #58	@ 0x3a
 80044a2:	2101      	movs	r1, #1
 80044a4:	5499      	strb	r1, [r3, r2]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	223b      	movs	r2, #59	@ 0x3b
 80044aa:	2101      	movs	r1, #1
 80044ac:	5499      	strb	r1, [r3, r2]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	223c      	movs	r2, #60	@ 0x3c
 80044b2:	2101      	movs	r1, #1
 80044b4:	5499      	strb	r1, [r3, r2]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	223d      	movs	r2, #61	@ 0x3d
 80044ba:	2101      	movs	r1, #1
 80044bc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2239      	movs	r2, #57	@ 0x39
 80044c2:	2101      	movs	r1, #1
 80044c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80044c6:	2300      	movs	r3, #0
}
 80044c8:	0018      	movs	r0, r3
 80044ca:	46bd      	mov	sp, r7
 80044cc:	b002      	add	sp, #8
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b082      	sub	sp, #8
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80044d8:	46c0      	nop			@ (mov r8, r8)
 80044da:	46bd      	mov	sp, r7
 80044dc:	b002      	add	sp, #8
 80044de:	bd80      	pop	{r7, pc}

080044e0 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044ea:	230f      	movs	r3, #15
 80044ec:	18fb      	adds	r3, r7, r3
 80044ee:	2200      	movs	r2, #0
 80044f0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d108      	bne.n	800450a <HAL_TIM_PWM_Start_IT+0x2a>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	223a      	movs	r2, #58	@ 0x3a
 80044fc:	5c9b      	ldrb	r3, [r3, r2]
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	3b01      	subs	r3, #1
 8004502:	1e5a      	subs	r2, r3, #1
 8004504:	4193      	sbcs	r3, r2
 8004506:	b2db      	uxtb	r3, r3
 8004508:	e01f      	b.n	800454a <HAL_TIM_PWM_Start_IT+0x6a>
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	2b04      	cmp	r3, #4
 800450e:	d108      	bne.n	8004522 <HAL_TIM_PWM_Start_IT+0x42>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	223b      	movs	r2, #59	@ 0x3b
 8004514:	5c9b      	ldrb	r3, [r3, r2]
 8004516:	b2db      	uxtb	r3, r3
 8004518:	3b01      	subs	r3, #1
 800451a:	1e5a      	subs	r2, r3, #1
 800451c:	4193      	sbcs	r3, r2
 800451e:	b2db      	uxtb	r3, r3
 8004520:	e013      	b.n	800454a <HAL_TIM_PWM_Start_IT+0x6a>
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	2b08      	cmp	r3, #8
 8004526:	d108      	bne.n	800453a <HAL_TIM_PWM_Start_IT+0x5a>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	223c      	movs	r2, #60	@ 0x3c
 800452c:	5c9b      	ldrb	r3, [r3, r2]
 800452e:	b2db      	uxtb	r3, r3
 8004530:	3b01      	subs	r3, #1
 8004532:	1e5a      	subs	r2, r3, #1
 8004534:	4193      	sbcs	r3, r2
 8004536:	b2db      	uxtb	r3, r3
 8004538:	e007      	b.n	800454a <HAL_TIM_PWM_Start_IT+0x6a>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	223d      	movs	r2, #61	@ 0x3d
 800453e:	5c9b      	ldrb	r3, [r3, r2]
 8004540:	b2db      	uxtb	r3, r3
 8004542:	3b01      	subs	r3, #1
 8004544:	1e5a      	subs	r2, r3, #1
 8004546:	4193      	sbcs	r3, r2
 8004548:	b2db      	uxtb	r3, r3
 800454a:	2b00      	cmp	r3, #0
 800454c:	d001      	beq.n	8004552 <HAL_TIM_PWM_Start_IT+0x72>
  {
    return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e090      	b.n	8004674 <HAL_TIM_PWM_Start_IT+0x194>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d104      	bne.n	8004562 <HAL_TIM_PWM_Start_IT+0x82>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	223a      	movs	r2, #58	@ 0x3a
 800455c:	2102      	movs	r1, #2
 800455e:	5499      	strb	r1, [r3, r2]
 8004560:	e013      	b.n	800458a <HAL_TIM_PWM_Start_IT+0xaa>
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	2b04      	cmp	r3, #4
 8004566:	d104      	bne.n	8004572 <HAL_TIM_PWM_Start_IT+0x92>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	223b      	movs	r2, #59	@ 0x3b
 800456c:	2102      	movs	r1, #2
 800456e:	5499      	strb	r1, [r3, r2]
 8004570:	e00b      	b.n	800458a <HAL_TIM_PWM_Start_IT+0xaa>
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	2b08      	cmp	r3, #8
 8004576:	d104      	bne.n	8004582 <HAL_TIM_PWM_Start_IT+0xa2>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	223c      	movs	r2, #60	@ 0x3c
 800457c:	2102      	movs	r1, #2
 800457e:	5499      	strb	r1, [r3, r2]
 8004580:	e003      	b.n	800458a <HAL_TIM_PWM_Start_IT+0xaa>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	223d      	movs	r2, #61	@ 0x3d
 8004586:	2102      	movs	r1, #2
 8004588:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	2b0c      	cmp	r3, #12
 800458e:	d02a      	beq.n	80045e6 <HAL_TIM_PWM_Start_IT+0x106>
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	2b0c      	cmp	r3, #12
 8004594:	d830      	bhi.n	80045f8 <HAL_TIM_PWM_Start_IT+0x118>
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	2b08      	cmp	r3, #8
 800459a:	d01b      	beq.n	80045d4 <HAL_TIM_PWM_Start_IT+0xf4>
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	2b08      	cmp	r3, #8
 80045a0:	d82a      	bhi.n	80045f8 <HAL_TIM_PWM_Start_IT+0x118>
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d003      	beq.n	80045b0 <HAL_TIM_PWM_Start_IT+0xd0>
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	2b04      	cmp	r3, #4
 80045ac:	d009      	beq.n	80045c2 <HAL_TIM_PWM_Start_IT+0xe2>
 80045ae:	e023      	b.n	80045f8 <HAL_TIM_PWM_Start_IT+0x118>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	68da      	ldr	r2, [r3, #12]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	2102      	movs	r1, #2
 80045bc:	430a      	orrs	r2, r1
 80045be:	60da      	str	r2, [r3, #12]
      break;
 80045c0:	e01f      	b.n	8004602 <HAL_TIM_PWM_Start_IT+0x122>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	68da      	ldr	r2, [r3, #12]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	2104      	movs	r1, #4
 80045ce:	430a      	orrs	r2, r1
 80045d0:	60da      	str	r2, [r3, #12]
      break;
 80045d2:	e016      	b.n	8004602 <HAL_TIM_PWM_Start_IT+0x122>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	68da      	ldr	r2, [r3, #12]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	2108      	movs	r1, #8
 80045e0:	430a      	orrs	r2, r1
 80045e2:	60da      	str	r2, [r3, #12]
      break;
 80045e4:	e00d      	b.n	8004602 <HAL_TIM_PWM_Start_IT+0x122>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	68da      	ldr	r2, [r3, #12]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	2110      	movs	r1, #16
 80045f2:	430a      	orrs	r2, r1
 80045f4:	60da      	str	r2, [r3, #12]
      break;
 80045f6:	e004      	b.n	8004602 <HAL_TIM_PWM_Start_IT+0x122>
    }

    default:
      status = HAL_ERROR;
 80045f8:	230f      	movs	r3, #15
 80045fa:	18fb      	adds	r3, r7, r3
 80045fc:	2201      	movs	r2, #1
 80045fe:	701a      	strb	r2, [r3, #0]
      break;
 8004600:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 8004602:	230f      	movs	r3, #15
 8004604:	18fb      	adds	r3, r7, r3
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d130      	bne.n	800466e <HAL_TIM_PWM_Start_IT+0x18e>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	6839      	ldr	r1, [r7, #0]
 8004612:	2201      	movs	r2, #1
 8004614:	0018      	movs	r0, r3
 8004616:	f000 ff3b 	bl	8005490 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	2380      	movs	r3, #128	@ 0x80
 8004620:	05db      	lsls	r3, r3, #23
 8004622:	429a      	cmp	r2, r3
 8004624:	d009      	beq.n	800463a <HAL_TIM_PWM_Start_IT+0x15a>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a14      	ldr	r2, [pc, #80]	@ (800467c <HAL_TIM_PWM_Start_IT+0x19c>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d004      	beq.n	800463a <HAL_TIM_PWM_Start_IT+0x15a>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a12      	ldr	r2, [pc, #72]	@ (8004680 <HAL_TIM_PWM_Start_IT+0x1a0>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d111      	bne.n	800465e <HAL_TIM_PWM_Start_IT+0x17e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	2207      	movs	r2, #7
 8004642:	4013      	ands	r3, r2
 8004644:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	2b06      	cmp	r3, #6
 800464a:	d010      	beq.n	800466e <HAL_TIM_PWM_Start_IT+0x18e>
      {
        __HAL_TIM_ENABLE(htim);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	2101      	movs	r1, #1
 8004658:	430a      	orrs	r2, r1
 800465a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800465c:	e007      	b.n	800466e <HAL_TIM_PWM_Start_IT+0x18e>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	2101      	movs	r1, #1
 800466a:	430a      	orrs	r2, r1
 800466c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800466e:	230f      	movs	r3, #15
 8004670:	18fb      	adds	r3, r7, r3
 8004672:	781b      	ldrb	r3, [r3, #0]
}
 8004674:	0018      	movs	r0, r3
 8004676:	46bd      	mov	sp, r7
 8004678:	b004      	add	sp, #16
 800467a:	bd80      	pop	{r7, pc}
 800467c:	40010800 	.word	0x40010800
 8004680:	40011400 	.word	0x40011400

08004684 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b086      	sub	sp, #24
 8004688:	af00      	add	r7, sp, #0
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	607a      	str	r2, [r7, #4]
 8004690:	001a      	movs	r2, r3
 8004692:	1cbb      	adds	r3, r7, #2
 8004694:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004696:	2317      	movs	r3, #23
 8004698:	18fb      	adds	r3, r7, r3
 800469a:	2200      	movs	r2, #0
 800469c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d108      	bne.n	80046b6 <HAL_TIM_PWM_Start_DMA+0x32>
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	223a      	movs	r2, #58	@ 0x3a
 80046a8:	5c9b      	ldrb	r3, [r3, r2]
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	3b02      	subs	r3, #2
 80046ae:	425a      	negs	r2, r3
 80046b0:	4153      	adcs	r3, r2
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	e01f      	b.n	80046f6 <HAL_TIM_PWM_Start_DMA+0x72>
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	2b04      	cmp	r3, #4
 80046ba:	d108      	bne.n	80046ce <HAL_TIM_PWM_Start_DMA+0x4a>
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	223b      	movs	r2, #59	@ 0x3b
 80046c0:	5c9b      	ldrb	r3, [r3, r2]
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	3b02      	subs	r3, #2
 80046c6:	425a      	negs	r2, r3
 80046c8:	4153      	adcs	r3, r2
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	e013      	b.n	80046f6 <HAL_TIM_PWM_Start_DMA+0x72>
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	2b08      	cmp	r3, #8
 80046d2:	d108      	bne.n	80046e6 <HAL_TIM_PWM_Start_DMA+0x62>
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	223c      	movs	r2, #60	@ 0x3c
 80046d8:	5c9b      	ldrb	r3, [r3, r2]
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	3b02      	subs	r3, #2
 80046de:	425a      	negs	r2, r3
 80046e0:	4153      	adcs	r3, r2
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	e007      	b.n	80046f6 <HAL_TIM_PWM_Start_DMA+0x72>
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	223d      	movs	r2, #61	@ 0x3d
 80046ea:	5c9b      	ldrb	r3, [r3, r2]
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	3b02      	subs	r3, #2
 80046f0:	425a      	negs	r2, r3
 80046f2:	4153      	adcs	r3, r2
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d001      	beq.n	80046fe <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 80046fa:	2302      	movs	r3, #2
 80046fc:	e13d      	b.n	800497a <HAL_TIM_PWM_Start_DMA+0x2f6>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d108      	bne.n	8004716 <HAL_TIM_PWM_Start_DMA+0x92>
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	223a      	movs	r2, #58	@ 0x3a
 8004708:	5c9b      	ldrb	r3, [r3, r2]
 800470a:	b2db      	uxtb	r3, r3
 800470c:	3b01      	subs	r3, #1
 800470e:	425a      	negs	r2, r3
 8004710:	4153      	adcs	r3, r2
 8004712:	b2db      	uxtb	r3, r3
 8004714:	e01f      	b.n	8004756 <HAL_TIM_PWM_Start_DMA+0xd2>
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	2b04      	cmp	r3, #4
 800471a:	d108      	bne.n	800472e <HAL_TIM_PWM_Start_DMA+0xaa>
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	223b      	movs	r2, #59	@ 0x3b
 8004720:	5c9b      	ldrb	r3, [r3, r2]
 8004722:	b2db      	uxtb	r3, r3
 8004724:	3b01      	subs	r3, #1
 8004726:	425a      	negs	r2, r3
 8004728:	4153      	adcs	r3, r2
 800472a:	b2db      	uxtb	r3, r3
 800472c:	e013      	b.n	8004756 <HAL_TIM_PWM_Start_DMA+0xd2>
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	2b08      	cmp	r3, #8
 8004732:	d108      	bne.n	8004746 <HAL_TIM_PWM_Start_DMA+0xc2>
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	223c      	movs	r2, #60	@ 0x3c
 8004738:	5c9b      	ldrb	r3, [r3, r2]
 800473a:	b2db      	uxtb	r3, r3
 800473c:	3b01      	subs	r3, #1
 800473e:	425a      	negs	r2, r3
 8004740:	4153      	adcs	r3, r2
 8004742:	b2db      	uxtb	r3, r3
 8004744:	e007      	b.n	8004756 <HAL_TIM_PWM_Start_DMA+0xd2>
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	223d      	movs	r2, #61	@ 0x3d
 800474a:	5c9b      	ldrb	r3, [r3, r2]
 800474c:	b2db      	uxtb	r3, r3
 800474e:	3b01      	subs	r3, #1
 8004750:	425a      	negs	r2, r3
 8004752:	4153      	adcs	r3, r2
 8004754:	b2db      	uxtb	r3, r3
 8004756:	2b00      	cmp	r3, #0
 8004758:	d025      	beq.n	80047a6 <HAL_TIM_PWM_Start_DMA+0x122>
  {
    if ((pData == NULL) || (Length == 0U))
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d003      	beq.n	8004768 <HAL_TIM_PWM_Start_DMA+0xe4>
 8004760:	1cbb      	adds	r3, r7, #2
 8004762:	881b      	ldrh	r3, [r3, #0]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d101      	bne.n	800476c <HAL_TIM_PWM_Start_DMA+0xe8>
    {
      return HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	e106      	b.n	800497a <HAL_TIM_PWM_Start_DMA+0x2f6>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d104      	bne.n	800477c <HAL_TIM_PWM_Start_DMA+0xf8>
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	223a      	movs	r2, #58	@ 0x3a
 8004776:	2102      	movs	r1, #2
 8004778:	5499      	strb	r1, [r3, r2]
 800477a:	e016      	b.n	80047aa <HAL_TIM_PWM_Start_DMA+0x126>
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	2b04      	cmp	r3, #4
 8004780:	d104      	bne.n	800478c <HAL_TIM_PWM_Start_DMA+0x108>
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	223b      	movs	r2, #59	@ 0x3b
 8004786:	2102      	movs	r1, #2
 8004788:	5499      	strb	r1, [r3, r2]
 800478a:	e00e      	b.n	80047aa <HAL_TIM_PWM_Start_DMA+0x126>
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	2b08      	cmp	r3, #8
 8004790:	d104      	bne.n	800479c <HAL_TIM_PWM_Start_DMA+0x118>
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	223c      	movs	r2, #60	@ 0x3c
 8004796:	2102      	movs	r1, #2
 8004798:	5499      	strb	r1, [r3, r2]
 800479a:	e006      	b.n	80047aa <HAL_TIM_PWM_Start_DMA+0x126>
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	223d      	movs	r2, #61	@ 0x3d
 80047a0:	2102      	movs	r1, #2
 80047a2:	5499      	strb	r1, [r3, r2]
 80047a4:	e001      	b.n	80047aa <HAL_TIM_PWM_Start_DMA+0x126>
    }
  }
  else
  {
    return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e0e7      	b.n	800497a <HAL_TIM_PWM_Start_DMA+0x2f6>
  }

  switch (Channel)
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	2b0c      	cmp	r3, #12
 80047ae:	d100      	bne.n	80047b2 <HAL_TIM_PWM_Start_DMA+0x12e>
 80047b0:	e080      	b.n	80048b4 <HAL_TIM_PWM_Start_DMA+0x230>
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	2b0c      	cmp	r3, #12
 80047b6:	d900      	bls.n	80047ba <HAL_TIM_PWM_Start_DMA+0x136>
 80047b8:	e0a1      	b.n	80048fe <HAL_TIM_PWM_Start_DMA+0x27a>
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	2b08      	cmp	r3, #8
 80047be:	d054      	beq.n	800486a <HAL_TIM_PWM_Start_DMA+0x1e6>
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	2b08      	cmp	r3, #8
 80047c4:	d900      	bls.n	80047c8 <HAL_TIM_PWM_Start_DMA+0x144>
 80047c6:	e09a      	b.n	80048fe <HAL_TIM_PWM_Start_DMA+0x27a>
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d003      	beq.n	80047d6 <HAL_TIM_PWM_Start_DMA+0x152>
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	2b04      	cmp	r3, #4
 80047d2:	d025      	beq.n	8004820 <HAL_TIM_PWM_Start_DMA+0x19c>
 80047d4:	e093      	b.n	80048fe <HAL_TIM_PWM_Start_DMA+0x27a>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	6a1b      	ldr	r3, [r3, #32]
 80047da:	4a6a      	ldr	r2, [pc, #424]	@ (8004984 <HAL_TIM_PWM_Start_DMA+0x300>)
 80047dc:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	6a1b      	ldr	r3, [r3, #32]
 80047e2:	4a69      	ldr	r2, [pc, #420]	@ (8004988 <HAL_TIM_PWM_Start_DMA+0x304>)
 80047e4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6a1b      	ldr	r3, [r3, #32]
 80047ea:	4a68      	ldr	r2, [pc, #416]	@ (800498c <HAL_TIM_PWM_Start_DMA+0x308>)
 80047ec:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	6a18      	ldr	r0, [r3, #32]
 80047f2:	6879      	ldr	r1, [r7, #4]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	3334      	adds	r3, #52	@ 0x34
 80047fa:	001a      	movs	r2, r3
 80047fc:	1cbb      	adds	r3, r7, #2
 80047fe:	881b      	ldrh	r3, [r3, #0]
 8004800:	f7fd fcc6 	bl	8002190 <HAL_DMA_Start_IT>
 8004804:	1e03      	subs	r3, r0, #0
 8004806:	d001      	beq.n	800480c <HAL_TIM_PWM_Start_DMA+0x188>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e0b6      	b.n	800497a <HAL_TIM_PWM_Start_DMA+0x2f6>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	68da      	ldr	r2, [r3, #12]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2180      	movs	r1, #128	@ 0x80
 8004818:	0089      	lsls	r1, r1, #2
 800481a:	430a      	orrs	r2, r1
 800481c:	60da      	str	r2, [r3, #12]
      break;
 800481e:	e073      	b.n	8004908 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004824:	4a57      	ldr	r2, [pc, #348]	@ (8004984 <HAL_TIM_PWM_Start_DMA+0x300>)
 8004826:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800482c:	4a56      	ldr	r2, [pc, #344]	@ (8004988 <HAL_TIM_PWM_Start_DMA+0x304>)
 800482e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004834:	4a55      	ldr	r2, [pc, #340]	@ (800498c <HAL_TIM_PWM_Start_DMA+0x308>)
 8004836:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800483c:	6879      	ldr	r1, [r7, #4]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	3338      	adds	r3, #56	@ 0x38
 8004844:	001a      	movs	r2, r3
 8004846:	1cbb      	adds	r3, r7, #2
 8004848:	881b      	ldrh	r3, [r3, #0]
 800484a:	f7fd fca1 	bl	8002190 <HAL_DMA_Start_IT>
 800484e:	1e03      	subs	r3, r0, #0
 8004850:	d001      	beq.n	8004856 <HAL_TIM_PWM_Start_DMA+0x1d2>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e091      	b.n	800497a <HAL_TIM_PWM_Start_DMA+0x2f6>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	68da      	ldr	r2, [r3, #12]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2180      	movs	r1, #128	@ 0x80
 8004862:	00c9      	lsls	r1, r1, #3
 8004864:	430a      	orrs	r2, r1
 8004866:	60da      	str	r2, [r3, #12]
      break;
 8004868:	e04e      	b.n	8004908 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800486e:	4a45      	ldr	r2, [pc, #276]	@ (8004984 <HAL_TIM_PWM_Start_DMA+0x300>)
 8004870:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004876:	4a44      	ldr	r2, [pc, #272]	@ (8004988 <HAL_TIM_PWM_Start_DMA+0x304>)
 8004878:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800487e:	4a43      	ldr	r2, [pc, #268]	@ (800498c <HAL_TIM_PWM_Start_DMA+0x308>)
 8004880:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8004886:	6879      	ldr	r1, [r7, #4]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	333c      	adds	r3, #60	@ 0x3c
 800488e:	001a      	movs	r2, r3
 8004890:	1cbb      	adds	r3, r7, #2
 8004892:	881b      	ldrh	r3, [r3, #0]
 8004894:	f7fd fc7c 	bl	8002190 <HAL_DMA_Start_IT>
 8004898:	1e03      	subs	r3, r0, #0
 800489a:	d001      	beq.n	80048a0 <HAL_TIM_PWM_Start_DMA+0x21c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e06c      	b.n	800497a <HAL_TIM_PWM_Start_DMA+0x2f6>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	68da      	ldr	r2, [r3, #12]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	2180      	movs	r1, #128	@ 0x80
 80048ac:	0109      	lsls	r1, r1, #4
 80048ae:	430a      	orrs	r2, r1
 80048b0:	60da      	str	r2, [r3, #12]
      break;
 80048b2:	e029      	b.n	8004908 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048b8:	4a32      	ldr	r2, [pc, #200]	@ (8004984 <HAL_TIM_PWM_Start_DMA+0x300>)
 80048ba:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048c0:	4a31      	ldr	r2, [pc, #196]	@ (8004988 <HAL_TIM_PWM_Start_DMA+0x304>)
 80048c2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048c8:	4a30      	ldr	r2, [pc, #192]	@ (800498c <HAL_TIM_PWM_Start_DMA+0x308>)
 80048ca:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80048d0:	6879      	ldr	r1, [r7, #4]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	3340      	adds	r3, #64	@ 0x40
 80048d8:	001a      	movs	r2, r3
 80048da:	1cbb      	adds	r3, r7, #2
 80048dc:	881b      	ldrh	r3, [r3, #0]
 80048de:	f7fd fc57 	bl	8002190 <HAL_DMA_Start_IT>
 80048e2:	1e03      	subs	r3, r0, #0
 80048e4:	d001      	beq.n	80048ea <HAL_TIM_PWM_Start_DMA+0x266>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e047      	b.n	800497a <HAL_TIM_PWM_Start_DMA+0x2f6>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	68da      	ldr	r2, [r3, #12]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	2180      	movs	r1, #128	@ 0x80
 80048f6:	0149      	lsls	r1, r1, #5
 80048f8:	430a      	orrs	r2, r1
 80048fa:	60da      	str	r2, [r3, #12]
      break;
 80048fc:	e004      	b.n	8004908 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    default:
      status = HAL_ERROR;
 80048fe:	2317      	movs	r3, #23
 8004900:	18fb      	adds	r3, r7, r3
 8004902:	2201      	movs	r2, #1
 8004904:	701a      	strb	r2, [r3, #0]
      break;
 8004906:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 8004908:	2317      	movs	r3, #23
 800490a:	18fb      	adds	r3, r7, r3
 800490c:	781b      	ldrb	r3, [r3, #0]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d130      	bne.n	8004974 <HAL_TIM_PWM_Start_DMA+0x2f0>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	68b9      	ldr	r1, [r7, #8]
 8004918:	2201      	movs	r2, #1
 800491a:	0018      	movs	r0, r3
 800491c:	f000 fdb8 	bl	8005490 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	2380      	movs	r3, #128	@ 0x80
 8004926:	05db      	lsls	r3, r3, #23
 8004928:	429a      	cmp	r2, r3
 800492a:	d009      	beq.n	8004940 <HAL_TIM_PWM_Start_DMA+0x2bc>
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a17      	ldr	r2, [pc, #92]	@ (8004990 <HAL_TIM_PWM_Start_DMA+0x30c>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d004      	beq.n	8004940 <HAL_TIM_PWM_Start_DMA+0x2bc>
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a16      	ldr	r2, [pc, #88]	@ (8004994 <HAL_TIM_PWM_Start_DMA+0x310>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d111      	bne.n	8004964 <HAL_TIM_PWM_Start_DMA+0x2e0>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	2207      	movs	r2, #7
 8004948:	4013      	ands	r3, r2
 800494a:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	2b06      	cmp	r3, #6
 8004950:	d010      	beq.n	8004974 <HAL_TIM_PWM_Start_DMA+0x2f0>
      {
        __HAL_TIM_ENABLE(htim);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	2101      	movs	r1, #1
 800495e:	430a      	orrs	r2, r1
 8004960:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004962:	e007      	b.n	8004974 <HAL_TIM_PWM_Start_DMA+0x2f0>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	2101      	movs	r1, #1
 8004970:	430a      	orrs	r2, r1
 8004972:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004974:	2317      	movs	r3, #23
 8004976:	18fb      	adds	r3, r7, r3
 8004978:	781b      	ldrb	r3, [r3, #0]
}
 800497a:	0018      	movs	r0, r3
 800497c:	46bd      	mov	sp, r7
 800497e:	b006      	add	sp, #24
 8004980:	bd80      	pop	{r7, pc}
 8004982:	46c0      	nop			@ (mov r8, r8)
 8004984:	08004f99 	.word	0x08004f99
 8004988:	08005043 	.word	0x08005043
 800498c:	08004f05 	.word	0x08004f05
 8004990:	40010800 	.word	0x40010800
 8004994:	40011400 	.word	0x40011400

08004998 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b082      	sub	sp, #8
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	691b      	ldr	r3, [r3, #16]
 80049a6:	2202      	movs	r2, #2
 80049a8:	4013      	ands	r3, r2
 80049aa:	2b02      	cmp	r3, #2
 80049ac:	d124      	bne.n	80049f8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	2202      	movs	r2, #2
 80049b6:	4013      	ands	r3, r2
 80049b8:	2b02      	cmp	r3, #2
 80049ba:	d11d      	bne.n	80049f8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	2203      	movs	r2, #3
 80049c2:	4252      	negs	r2, r2
 80049c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2201      	movs	r2, #1
 80049ca:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	699b      	ldr	r3, [r3, #24]
 80049d2:	2203      	movs	r2, #3
 80049d4:	4013      	ands	r3, r2
 80049d6:	d004      	beq.n	80049e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	0018      	movs	r0, r3
 80049dc:	f000 fa66 	bl	8004eac <HAL_TIM_IC_CaptureCallback>
 80049e0:	e007      	b.n	80049f2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	0018      	movs	r0, r3
 80049e6:	f000 fa59 	bl	8004e9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	0018      	movs	r0, r3
 80049ee:	f7fc f8d7 	bl	8000ba0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	691b      	ldr	r3, [r3, #16]
 80049fe:	2204      	movs	r2, #4
 8004a00:	4013      	ands	r3, r2
 8004a02:	2b04      	cmp	r3, #4
 8004a04:	d125      	bne.n	8004a52 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	2204      	movs	r2, #4
 8004a0e:	4013      	ands	r3, r2
 8004a10:	2b04      	cmp	r3, #4
 8004a12:	d11e      	bne.n	8004a52 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	2205      	movs	r2, #5
 8004a1a:	4252      	negs	r2, r2
 8004a1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2202      	movs	r2, #2
 8004a22:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	699a      	ldr	r2, [r3, #24]
 8004a2a:	23c0      	movs	r3, #192	@ 0xc0
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	4013      	ands	r3, r2
 8004a30:	d004      	beq.n	8004a3c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	0018      	movs	r0, r3
 8004a36:	f000 fa39 	bl	8004eac <HAL_TIM_IC_CaptureCallback>
 8004a3a:	e007      	b.n	8004a4c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	0018      	movs	r0, r3
 8004a40:	f000 fa2c 	bl	8004e9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	0018      	movs	r0, r3
 8004a48:	f7fc f8aa 	bl	8000ba0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	691b      	ldr	r3, [r3, #16]
 8004a58:	2208      	movs	r2, #8
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	2b08      	cmp	r3, #8
 8004a5e:	d124      	bne.n	8004aaa <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	2208      	movs	r2, #8
 8004a68:	4013      	ands	r3, r2
 8004a6a:	2b08      	cmp	r3, #8
 8004a6c:	d11d      	bne.n	8004aaa <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	2209      	movs	r2, #9
 8004a74:	4252      	negs	r2, r2
 8004a76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2204      	movs	r2, #4
 8004a7c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	69db      	ldr	r3, [r3, #28]
 8004a84:	2203      	movs	r2, #3
 8004a86:	4013      	ands	r3, r2
 8004a88:	d004      	beq.n	8004a94 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	0018      	movs	r0, r3
 8004a8e:	f000 fa0d 	bl	8004eac <HAL_TIM_IC_CaptureCallback>
 8004a92:	e007      	b.n	8004aa4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	0018      	movs	r0, r3
 8004a98:	f000 fa00 	bl	8004e9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	0018      	movs	r0, r3
 8004aa0:	f7fc f87e 	bl	8000ba0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	691b      	ldr	r3, [r3, #16]
 8004ab0:	2210      	movs	r2, #16
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	2b10      	cmp	r3, #16
 8004ab6:	d125      	bne.n	8004b04 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	2210      	movs	r2, #16
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	2b10      	cmp	r3, #16
 8004ac4:	d11e      	bne.n	8004b04 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	2211      	movs	r2, #17
 8004acc:	4252      	negs	r2, r2
 8004ace:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2208      	movs	r2, #8
 8004ad4:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	69da      	ldr	r2, [r3, #28]
 8004adc:	23c0      	movs	r3, #192	@ 0xc0
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	d004      	beq.n	8004aee <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	0018      	movs	r0, r3
 8004ae8:	f000 f9e0 	bl	8004eac <HAL_TIM_IC_CaptureCallback>
 8004aec:	e007      	b.n	8004afe <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	0018      	movs	r0, r3
 8004af2:	f000 f9d3 	bl	8004e9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	0018      	movs	r0, r3
 8004afa:	f7fc f851 	bl	8000ba0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	691b      	ldr	r3, [r3, #16]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d10f      	bne.n	8004b32 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	2201      	movs	r2, #1
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d108      	bne.n	8004b32 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	2202      	movs	r2, #2
 8004b26:	4252      	negs	r2, r2
 8004b28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	0018      	movs	r0, r3
 8004b2e:	f7fb fff9 	bl	8000b24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	691b      	ldr	r3, [r3, #16]
 8004b38:	2240      	movs	r2, #64	@ 0x40
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	2b40      	cmp	r3, #64	@ 0x40
 8004b3e:	d10f      	bne.n	8004b60 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	68db      	ldr	r3, [r3, #12]
 8004b46:	2240      	movs	r2, #64	@ 0x40
 8004b48:	4013      	ands	r3, r2
 8004b4a:	2b40      	cmp	r3, #64	@ 0x40
 8004b4c:	d108      	bne.n	8004b60 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	2241      	movs	r2, #65	@ 0x41
 8004b54:	4252      	negs	r2, r2
 8004b56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	0018      	movs	r0, r3
 8004b5c:	f000 f9b6 	bl	8004ecc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b60:	46c0      	nop			@ (mov r8, r8)
 8004b62:	46bd      	mov	sp, r7
 8004b64:	b002      	add	sp, #8
 8004b66:	bd80      	pop	{r7, pc}

08004b68 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b086      	sub	sp, #24
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	60f8      	str	r0, [r7, #12]
 8004b70:	60b9      	str	r1, [r7, #8]
 8004b72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b74:	2317      	movs	r3, #23
 8004b76:	18fb      	adds	r3, r7, r3
 8004b78:	2200      	movs	r2, #0
 8004b7a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2238      	movs	r2, #56	@ 0x38
 8004b80:	5c9b      	ldrb	r3, [r3, r2]
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d101      	bne.n	8004b8a <HAL_TIM_PWM_ConfigChannel+0x22>
 8004b86:	2302      	movs	r3, #2
 8004b88:	e0ad      	b.n	8004ce6 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2238      	movs	r2, #56	@ 0x38
 8004b8e:	2101      	movs	r1, #1
 8004b90:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2b0c      	cmp	r3, #12
 8004b96:	d100      	bne.n	8004b9a <HAL_TIM_PWM_ConfigChannel+0x32>
 8004b98:	e076      	b.n	8004c88 <HAL_TIM_PWM_ConfigChannel+0x120>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2b0c      	cmp	r3, #12
 8004b9e:	d900      	bls.n	8004ba2 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8004ba0:	e095      	b.n	8004cce <HAL_TIM_PWM_ConfigChannel+0x166>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2b08      	cmp	r3, #8
 8004ba6:	d04e      	beq.n	8004c46 <HAL_TIM_PWM_ConfigChannel+0xde>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2b08      	cmp	r3, #8
 8004bac:	d900      	bls.n	8004bb0 <HAL_TIM_PWM_ConfigChannel+0x48>
 8004bae:	e08e      	b.n	8004cce <HAL_TIM_PWM_ConfigChannel+0x166>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d003      	beq.n	8004bbe <HAL_TIM_PWM_ConfigChannel+0x56>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2b04      	cmp	r3, #4
 8004bba:	d021      	beq.n	8004c00 <HAL_TIM_PWM_ConfigChannel+0x98>
 8004bbc:	e087      	b.n	8004cce <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	68ba      	ldr	r2, [r7, #8]
 8004bc4:	0011      	movs	r1, r2
 8004bc6:	0018      	movs	r0, r3
 8004bc8:	f000 fac4 	bl	8005154 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	699a      	ldr	r2, [r3, #24]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	2108      	movs	r1, #8
 8004bd8:	430a      	orrs	r2, r1
 8004bda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	699a      	ldr	r2, [r3, #24]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	2104      	movs	r1, #4
 8004be8:	438a      	bics	r2, r1
 8004bea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	6999      	ldr	r1, [r3, #24]
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	68da      	ldr	r2, [r3, #12]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	430a      	orrs	r2, r1
 8004bfc:	619a      	str	r2, [r3, #24]
      break;
 8004bfe:	e06b      	b.n	8004cd8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	68ba      	ldr	r2, [r7, #8]
 8004c06:	0011      	movs	r1, r2
 8004c08:	0018      	movs	r0, r3
 8004c0a:	f000 fadf 	bl	80051cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	699a      	ldr	r2, [r3, #24]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	2180      	movs	r1, #128	@ 0x80
 8004c1a:	0109      	lsls	r1, r1, #4
 8004c1c:	430a      	orrs	r2, r1
 8004c1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	699a      	ldr	r2, [r3, #24]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4931      	ldr	r1, [pc, #196]	@ (8004cf0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8004c2c:	400a      	ands	r2, r1
 8004c2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	6999      	ldr	r1, [r3, #24]
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	68db      	ldr	r3, [r3, #12]
 8004c3a:	021a      	lsls	r2, r3, #8
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	430a      	orrs	r2, r1
 8004c42:	619a      	str	r2, [r3, #24]
      break;
 8004c44:	e048      	b.n	8004cd8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	68ba      	ldr	r2, [r7, #8]
 8004c4c:	0011      	movs	r1, r2
 8004c4e:	0018      	movs	r0, r3
 8004c50:	f000 fafe 	bl	8005250 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	69da      	ldr	r2, [r3, #28]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	2108      	movs	r1, #8
 8004c60:	430a      	orrs	r2, r1
 8004c62:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	69da      	ldr	r2, [r3, #28]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	2104      	movs	r1, #4
 8004c70:	438a      	bics	r2, r1
 8004c72:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	69d9      	ldr	r1, [r3, #28]
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	68da      	ldr	r2, [r3, #12]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	430a      	orrs	r2, r1
 8004c84:	61da      	str	r2, [r3, #28]
      break;
 8004c86:	e027      	b.n	8004cd8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	68ba      	ldr	r2, [r7, #8]
 8004c8e:	0011      	movs	r1, r2
 8004c90:	0018      	movs	r0, r3
 8004c92:	f000 fb1d 	bl	80052d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	69da      	ldr	r2, [r3, #28]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2180      	movs	r1, #128	@ 0x80
 8004ca2:	0109      	lsls	r1, r1, #4
 8004ca4:	430a      	orrs	r2, r1
 8004ca6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	69da      	ldr	r2, [r3, #28]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	490f      	ldr	r1, [pc, #60]	@ (8004cf0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8004cb4:	400a      	ands	r2, r1
 8004cb6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	69d9      	ldr	r1, [r3, #28]
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	68db      	ldr	r3, [r3, #12]
 8004cc2:	021a      	lsls	r2, r3, #8
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	430a      	orrs	r2, r1
 8004cca:	61da      	str	r2, [r3, #28]
      break;
 8004ccc:	e004      	b.n	8004cd8 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8004cce:	2317      	movs	r3, #23
 8004cd0:	18fb      	adds	r3, r7, r3
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	701a      	strb	r2, [r3, #0]
      break;
 8004cd6:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2238      	movs	r2, #56	@ 0x38
 8004cdc:	2100      	movs	r1, #0
 8004cde:	5499      	strb	r1, [r3, r2]

  return status;
 8004ce0:	2317      	movs	r3, #23
 8004ce2:	18fb      	adds	r3, r7, r3
 8004ce4:	781b      	ldrb	r3, [r3, #0]
}
 8004ce6:	0018      	movs	r0, r3
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	b006      	add	sp, #24
 8004cec:	bd80      	pop	{r7, pc}
 8004cee:	46c0      	nop			@ (mov r8, r8)
 8004cf0:	fffffbff 	.word	0xfffffbff

08004cf4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b084      	sub	sp, #16
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cfe:	230f      	movs	r3, #15
 8004d00:	18fb      	adds	r3, r7, r3
 8004d02:	2200      	movs	r2, #0
 8004d04:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2238      	movs	r2, #56	@ 0x38
 8004d0a:	5c9b      	ldrb	r3, [r3, r2]
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d101      	bne.n	8004d14 <HAL_TIM_ConfigClockSource+0x20>
 8004d10:	2302      	movs	r3, #2
 8004d12:	e0bc      	b.n	8004e8e <HAL_TIM_ConfigClockSource+0x19a>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2238      	movs	r2, #56	@ 0x38
 8004d18:	2101      	movs	r1, #1
 8004d1a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2239      	movs	r2, #57	@ 0x39
 8004d20:	2102      	movs	r1, #2
 8004d22:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	2277      	movs	r2, #119	@ 0x77
 8004d30:	4393      	bics	r3, r2
 8004d32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	4a58      	ldr	r2, [pc, #352]	@ (8004e98 <HAL_TIM_ConfigClockSource+0x1a4>)
 8004d38:	4013      	ands	r3, r2
 8004d3a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	68ba      	ldr	r2, [r7, #8]
 8004d42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	2280      	movs	r2, #128	@ 0x80
 8004d4a:	0192      	lsls	r2, r2, #6
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d040      	beq.n	8004dd2 <HAL_TIM_ConfigClockSource+0xde>
 8004d50:	2280      	movs	r2, #128	@ 0x80
 8004d52:	0192      	lsls	r2, r2, #6
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d900      	bls.n	8004d5a <HAL_TIM_ConfigClockSource+0x66>
 8004d58:	e088      	b.n	8004e6c <HAL_TIM_ConfigClockSource+0x178>
 8004d5a:	2280      	movs	r2, #128	@ 0x80
 8004d5c:	0152      	lsls	r2, r2, #5
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d100      	bne.n	8004d64 <HAL_TIM_ConfigClockSource+0x70>
 8004d62:	e088      	b.n	8004e76 <HAL_TIM_ConfigClockSource+0x182>
 8004d64:	2280      	movs	r2, #128	@ 0x80
 8004d66:	0152      	lsls	r2, r2, #5
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d900      	bls.n	8004d6e <HAL_TIM_ConfigClockSource+0x7a>
 8004d6c:	e07e      	b.n	8004e6c <HAL_TIM_ConfigClockSource+0x178>
 8004d6e:	2b70      	cmp	r3, #112	@ 0x70
 8004d70:	d018      	beq.n	8004da4 <HAL_TIM_ConfigClockSource+0xb0>
 8004d72:	d900      	bls.n	8004d76 <HAL_TIM_ConfigClockSource+0x82>
 8004d74:	e07a      	b.n	8004e6c <HAL_TIM_ConfigClockSource+0x178>
 8004d76:	2b60      	cmp	r3, #96	@ 0x60
 8004d78:	d04f      	beq.n	8004e1a <HAL_TIM_ConfigClockSource+0x126>
 8004d7a:	d900      	bls.n	8004d7e <HAL_TIM_ConfigClockSource+0x8a>
 8004d7c:	e076      	b.n	8004e6c <HAL_TIM_ConfigClockSource+0x178>
 8004d7e:	2b50      	cmp	r3, #80	@ 0x50
 8004d80:	d03b      	beq.n	8004dfa <HAL_TIM_ConfigClockSource+0x106>
 8004d82:	d900      	bls.n	8004d86 <HAL_TIM_ConfigClockSource+0x92>
 8004d84:	e072      	b.n	8004e6c <HAL_TIM_ConfigClockSource+0x178>
 8004d86:	2b40      	cmp	r3, #64	@ 0x40
 8004d88:	d057      	beq.n	8004e3a <HAL_TIM_ConfigClockSource+0x146>
 8004d8a:	d900      	bls.n	8004d8e <HAL_TIM_ConfigClockSource+0x9a>
 8004d8c:	e06e      	b.n	8004e6c <HAL_TIM_ConfigClockSource+0x178>
 8004d8e:	2b30      	cmp	r3, #48	@ 0x30
 8004d90:	d063      	beq.n	8004e5a <HAL_TIM_ConfigClockSource+0x166>
 8004d92:	d86b      	bhi.n	8004e6c <HAL_TIM_ConfigClockSource+0x178>
 8004d94:	2b20      	cmp	r3, #32
 8004d96:	d060      	beq.n	8004e5a <HAL_TIM_ConfigClockSource+0x166>
 8004d98:	d868      	bhi.n	8004e6c <HAL_TIM_ConfigClockSource+0x178>
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d05d      	beq.n	8004e5a <HAL_TIM_ConfigClockSource+0x166>
 8004d9e:	2b10      	cmp	r3, #16
 8004da0:	d05b      	beq.n	8004e5a <HAL_TIM_ConfigClockSource+0x166>
 8004da2:	e063      	b.n	8004e6c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004db4:	f000 fb4c 	bl	8005450 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	2277      	movs	r2, #119	@ 0x77
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	68ba      	ldr	r2, [r7, #8]
 8004dce:	609a      	str	r2, [r3, #8]
      break;
 8004dd0:	e052      	b.n	8004e78 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004de2:	f000 fb35 	bl	8005450 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	689a      	ldr	r2, [r3, #8]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	2180      	movs	r1, #128	@ 0x80
 8004df2:	01c9      	lsls	r1, r1, #7
 8004df4:	430a      	orrs	r2, r1
 8004df6:	609a      	str	r2, [r3, #8]
      break;
 8004df8:	e03e      	b.n	8004e78 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e06:	001a      	movs	r2, r3
 8004e08:	f000 faa8 	bl	800535c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	2150      	movs	r1, #80	@ 0x50
 8004e12:	0018      	movs	r0, r3
 8004e14:	f000 fb02 	bl	800541c <TIM_ITRx_SetConfig>
      break;
 8004e18:	e02e      	b.n	8004e78 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e26:	001a      	movs	r2, r3
 8004e28:	f000 fac6 	bl	80053b8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	2160      	movs	r1, #96	@ 0x60
 8004e32:	0018      	movs	r0, r3
 8004e34:	f000 faf2 	bl	800541c <TIM_ITRx_SetConfig>
      break;
 8004e38:	e01e      	b.n	8004e78 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e46:	001a      	movs	r2, r3
 8004e48:	f000 fa88 	bl	800535c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	2140      	movs	r1, #64	@ 0x40
 8004e52:	0018      	movs	r0, r3
 8004e54:	f000 fae2 	bl	800541c <TIM_ITRx_SetConfig>
      break;
 8004e58:	e00e      	b.n	8004e78 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	0019      	movs	r1, r3
 8004e64:	0010      	movs	r0, r2
 8004e66:	f000 fad9 	bl	800541c <TIM_ITRx_SetConfig>
      break;
 8004e6a:	e005      	b.n	8004e78 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004e6c:	230f      	movs	r3, #15
 8004e6e:	18fb      	adds	r3, r7, r3
 8004e70:	2201      	movs	r2, #1
 8004e72:	701a      	strb	r2, [r3, #0]
      break;
 8004e74:	e000      	b.n	8004e78 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8004e76:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2239      	movs	r2, #57	@ 0x39
 8004e7c:	2101      	movs	r1, #1
 8004e7e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2238      	movs	r2, #56	@ 0x38
 8004e84:	2100      	movs	r1, #0
 8004e86:	5499      	strb	r1, [r3, r2]

  return status;
 8004e88:	230f      	movs	r3, #15
 8004e8a:	18fb      	adds	r3, r7, r3
 8004e8c:	781b      	ldrb	r3, [r3, #0]
}
 8004e8e:	0018      	movs	r0, r3
 8004e90:	46bd      	mov	sp, r7
 8004e92:	b004      	add	sp, #16
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	46c0      	nop			@ (mov r8, r8)
 8004e98:	ffff00ff 	.word	0xffff00ff

08004e9c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b082      	sub	sp, #8
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ea4:	46c0      	nop			@ (mov r8, r8)
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	b002      	add	sp, #8
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b082      	sub	sp, #8
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004eb4:	46c0      	nop			@ (mov r8, r8)
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	b002      	add	sp, #8
 8004eba:	bd80      	pop	{r7, pc}

08004ebc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b082      	sub	sp, #8
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004ec4:	46c0      	nop			@ (mov r8, r8)
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	b002      	add	sp, #8
 8004eca:	bd80      	pop	{r7, pc}

08004ecc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b082      	sub	sp, #8
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ed4:	46c0      	nop			@ (mov r8, r8)
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	b002      	add	sp, #8
 8004eda:	bd80      	pop	{r7, pc}

08004edc <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b082      	sub	sp, #8
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004ee4:	46c0      	nop			@ (mov r8, r8)
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	b002      	add	sp, #8
 8004eea:	bd80      	pop	{r7, pc}

08004eec <HAL_TIM_Base_GetState>:
  * @brief  Return the TIM Base handle state.
  * @param  htim TIM Base handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_Base_GetState(const TIM_HandleTypeDef *htim)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b082      	sub	sp, #8
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  return htim->State;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2239      	movs	r2, #57	@ 0x39
 8004ef8:	5c9b      	ldrb	r3, [r3, r2]
 8004efa:	b2db      	uxtb	r3, r3
}
 8004efc:	0018      	movs	r0, r3
 8004efe:	46bd      	mov	sp, r7
 8004f00:	b002      	add	sp, #8
 8004f02:	bd80      	pop	{r7, pc}

08004f04 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b084      	sub	sp, #16
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f10:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	6a1b      	ldr	r3, [r3, #32]
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d107      	bne.n	8004f2c <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	761a      	strb	r2, [r3, #24]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	223a      	movs	r2, #58	@ 0x3a
 8004f26:	2101      	movs	r1, #1
 8004f28:	5499      	strb	r1, [r3, r2]
 8004f2a:	e02a      	b.n	8004f82 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d107      	bne.n	8004f46 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2202      	movs	r2, #2
 8004f3a:	761a      	strb	r2, [r3, #24]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	223b      	movs	r2, #59	@ 0x3b
 8004f40:	2101      	movs	r1, #1
 8004f42:	5499      	strb	r1, [r3, r2]
 8004f44:	e01d      	b.n	8004f82 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d107      	bne.n	8004f60 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2204      	movs	r2, #4
 8004f54:	761a      	strb	r2, [r3, #24]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	223c      	movs	r2, #60	@ 0x3c
 8004f5a:	2101      	movs	r1, #1
 8004f5c:	5499      	strb	r1, [r3, r2]
 8004f5e:	e010      	b.n	8004f82 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d107      	bne.n	8004f7a <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2208      	movs	r2, #8
 8004f6e:	761a      	strb	r2, [r3, #24]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	223d      	movs	r2, #61	@ 0x3d
 8004f74:	2101      	movs	r1, #1
 8004f76:	5499      	strb	r1, [r3, r2]
 8004f78:	e003      	b.n	8004f82 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2239      	movs	r2, #57	@ 0x39
 8004f7e:	2101      	movs	r1, #1
 8004f80:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	0018      	movs	r0, r3
 8004f86:	f7ff ffa9 	bl	8004edc <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	761a      	strb	r2, [r3, #24]
}
 8004f90:	46c0      	nop			@ (mov r8, r8)
 8004f92:	46bd      	mov	sp, r7
 8004f94:	b004      	add	sp, #16
 8004f96:	bd80      	pop	{r7, pc}

08004f98 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b084      	sub	sp, #16
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fa4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6a1b      	ldr	r3, [r3, #32]
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d10b      	bne.n	8004fc8 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	761a      	strb	r2, [r3, #24]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	69db      	ldr	r3, [r3, #28]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d136      	bne.n	800502c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	223a      	movs	r2, #58	@ 0x3a
 8004fc2:	2101      	movs	r1, #1
 8004fc4:	5499      	strb	r1, [r3, r2]
 8004fc6:	e031      	b.n	800502c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d10b      	bne.n	8004fea <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2202      	movs	r2, #2
 8004fd6:	761a      	strb	r2, [r3, #24]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	69db      	ldr	r3, [r3, #28]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d125      	bne.n	800502c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	223b      	movs	r2, #59	@ 0x3b
 8004fe4:	2101      	movs	r1, #1
 8004fe6:	5499      	strb	r1, [r3, r2]
 8004fe8:	e020      	b.n	800502c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d10b      	bne.n	800500c <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2204      	movs	r2, #4
 8004ff8:	761a      	strb	r2, [r3, #24]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	69db      	ldr	r3, [r3, #28]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d114      	bne.n	800502c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	223c      	movs	r2, #60	@ 0x3c
 8005006:	2101      	movs	r1, #1
 8005008:	5499      	strb	r1, [r3, r2]
 800500a:	e00f      	b.n	800502c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	429a      	cmp	r2, r3
 8005014:	d10a      	bne.n	800502c <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2208      	movs	r2, #8
 800501a:	761a      	strb	r2, [r3, #24]

    if (hdma->Init.Mode == DMA_NORMAL)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	69db      	ldr	r3, [r3, #28]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d103      	bne.n	800502c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	223d      	movs	r2, #61	@ 0x3d
 8005028:	2101      	movs	r1, #1
 800502a:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	0018      	movs	r0, r3
 8005030:	f7fb fdb6 	bl	8000ba0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2200      	movs	r2, #0
 8005038:	761a      	strb	r2, [r3, #24]
}
 800503a:	46c0      	nop			@ (mov r8, r8)
 800503c:	46bd      	mov	sp, r7
 800503e:	b004      	add	sp, #16
 8005040:	bd80      	pop	{r7, pc}

08005042 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005042:	b580      	push	{r7, lr}
 8005044:	b084      	sub	sp, #16
 8005046:	af00      	add	r7, sp, #0
 8005048:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800504e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	6a1b      	ldr	r3, [r3, #32]
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	429a      	cmp	r2, r3
 8005058:	d103      	bne.n	8005062 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2201      	movs	r2, #1
 800505e:	761a      	strb	r2, [r3, #24]
 8005060:	e019      	b.n	8005096 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	429a      	cmp	r2, r3
 800506a:	d103      	bne.n	8005074 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2202      	movs	r2, #2
 8005070:	761a      	strb	r2, [r3, #24]
 8005072:	e010      	b.n	8005096 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	429a      	cmp	r2, r3
 800507c:	d103      	bne.n	8005086 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2204      	movs	r2, #4
 8005082:	761a      	strb	r2, [r3, #24]
 8005084:	e007      	b.n	8005096 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	429a      	cmp	r2, r3
 800508e:	d102      	bne.n	8005096 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2208      	movs	r2, #8
 8005094:	761a      	strb	r2, [r3, #24]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	0018      	movs	r0, r3
 800509a:	f7ff ff0f 	bl	8004ebc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2200      	movs	r2, #0
 80050a2:	761a      	strb	r2, [r3, #24]
}
 80050a4:	46c0      	nop			@ (mov r8, r8)
 80050a6:	46bd      	mov	sp, r7
 80050a8:	b004      	add	sp, #16
 80050aa:	bd80      	pop	{r7, pc}

080050ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b084      	sub	sp, #16
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	2380      	movs	r3, #128	@ 0x80
 80050c0:	05db      	lsls	r3, r3, #23
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d007      	beq.n	80050d6 <TIM_Base_SetConfig+0x2a>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	4a1f      	ldr	r2, [pc, #124]	@ (8005148 <TIM_Base_SetConfig+0x9c>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d003      	beq.n	80050d6 <TIM_Base_SetConfig+0x2a>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4a1e      	ldr	r2, [pc, #120]	@ (800514c <TIM_Base_SetConfig+0xa0>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d108      	bne.n	80050e8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2270      	movs	r2, #112	@ 0x70
 80050da:	4393      	bics	r3, r2
 80050dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	68fa      	ldr	r2, [r7, #12]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	2380      	movs	r3, #128	@ 0x80
 80050ec:	05db      	lsls	r3, r3, #23
 80050ee:	429a      	cmp	r2, r3
 80050f0:	d007      	beq.n	8005102 <TIM_Base_SetConfig+0x56>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4a14      	ldr	r2, [pc, #80]	@ (8005148 <TIM_Base_SetConfig+0x9c>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d003      	beq.n	8005102 <TIM_Base_SetConfig+0x56>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4a13      	ldr	r2, [pc, #76]	@ (800514c <TIM_Base_SetConfig+0xa0>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d108      	bne.n	8005114 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	4a12      	ldr	r2, [pc, #72]	@ (8005150 <TIM_Base_SetConfig+0xa4>)
 8005106:	4013      	ands	r3, r2
 8005108:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	68db      	ldr	r3, [r3, #12]
 800510e:	68fa      	ldr	r2, [r7, #12]
 8005110:	4313      	orrs	r3, r2
 8005112:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2280      	movs	r2, #128	@ 0x80
 8005118:	4393      	bics	r3, r2
 800511a:	001a      	movs	r2, r3
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	691b      	ldr	r3, [r3, #16]
 8005120:	4313      	orrs	r3, r2
 8005122:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	68fa      	ldr	r2, [r7, #12]
 8005128:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	689a      	ldr	r2, [r3, #8]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2201      	movs	r2, #1
 800513e:	615a      	str	r2, [r3, #20]
}
 8005140:	46c0      	nop			@ (mov r8, r8)
 8005142:	46bd      	mov	sp, r7
 8005144:	b004      	add	sp, #16
 8005146:	bd80      	pop	{r7, pc}
 8005148:	40010800 	.word	0x40010800
 800514c:	40011400 	.word	0x40011400
 8005150:	fffffcff 	.word	0xfffffcff

08005154 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b086      	sub	sp, #24
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6a1b      	ldr	r3, [r3, #32]
 8005162:	2201      	movs	r2, #1
 8005164:	4393      	bics	r3, r2
 8005166:	001a      	movs	r2, r3
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6a1b      	ldr	r3, [r3, #32]
 8005170:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	699b      	ldr	r3, [r3, #24]
 800517c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2270      	movs	r2, #112	@ 0x70
 8005182:	4393      	bics	r3, r2
 8005184:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2203      	movs	r2, #3
 800518a:	4393      	bics	r3, r2
 800518c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	68fa      	ldr	r2, [r7, #12]
 8005194:	4313      	orrs	r3, r2
 8005196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	2202      	movs	r2, #2
 800519c:	4393      	bics	r3, r2
 800519e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	697a      	ldr	r2, [r7, #20]
 80051a6:	4313      	orrs	r3, r2
 80051a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	693a      	ldr	r2, [r7, #16]
 80051ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	68fa      	ldr	r2, [r7, #12]
 80051b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	685a      	ldr	r2, [r3, #4]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	697a      	ldr	r2, [r7, #20]
 80051c2:	621a      	str	r2, [r3, #32]
}
 80051c4:	46c0      	nop			@ (mov r8, r8)
 80051c6:	46bd      	mov	sp, r7
 80051c8:	b006      	add	sp, #24
 80051ca:	bd80      	pop	{r7, pc}

080051cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b086      	sub	sp, #24
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6a1b      	ldr	r3, [r3, #32]
 80051da:	2210      	movs	r2, #16
 80051dc:	4393      	bics	r3, r2
 80051de:	001a      	movs	r2, r3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6a1b      	ldr	r3, [r3, #32]
 80051e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	699b      	ldr	r3, [r3, #24]
 80051f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	4a13      	ldr	r2, [pc, #76]	@ (8005248 <TIM_OC2_SetConfig+0x7c>)
 80051fa:	4013      	ands	r3, r2
 80051fc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	4a12      	ldr	r2, [pc, #72]	@ (800524c <TIM_OC2_SetConfig+0x80>)
 8005202:	4013      	ands	r3, r2
 8005204:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	021b      	lsls	r3, r3, #8
 800520c:	68fa      	ldr	r2, [r7, #12]
 800520e:	4313      	orrs	r3, r2
 8005210:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	2220      	movs	r2, #32
 8005216:	4393      	bics	r3, r2
 8005218:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	011b      	lsls	r3, r3, #4
 8005220:	697a      	ldr	r2, [r7, #20]
 8005222:	4313      	orrs	r3, r2
 8005224:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	693a      	ldr	r2, [r7, #16]
 800522a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	68fa      	ldr	r2, [r7, #12]
 8005230:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	685a      	ldr	r2, [r3, #4]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	697a      	ldr	r2, [r7, #20]
 800523e:	621a      	str	r2, [r3, #32]
}
 8005240:	46c0      	nop			@ (mov r8, r8)
 8005242:	46bd      	mov	sp, r7
 8005244:	b006      	add	sp, #24
 8005246:	bd80      	pop	{r7, pc}
 8005248:	ffff8fff 	.word	0xffff8fff
 800524c:	fffffcff 	.word	0xfffffcff

08005250 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b086      	sub	sp, #24
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a1b      	ldr	r3, [r3, #32]
 800525e:	4a1a      	ldr	r2, [pc, #104]	@ (80052c8 <TIM_OC3_SetConfig+0x78>)
 8005260:	401a      	ands	r2, r3
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6a1b      	ldr	r3, [r3, #32]
 800526a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	69db      	ldr	r3, [r3, #28]
 8005276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2270      	movs	r2, #112	@ 0x70
 800527c:	4393      	bics	r3, r2
 800527e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2203      	movs	r2, #3
 8005284:	4393      	bics	r3, r2
 8005286:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	68fa      	ldr	r2, [r7, #12]
 800528e:	4313      	orrs	r3, r2
 8005290:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	4a0d      	ldr	r2, [pc, #52]	@ (80052cc <TIM_OC3_SetConfig+0x7c>)
 8005296:	4013      	ands	r3, r2
 8005298:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	021b      	lsls	r3, r3, #8
 80052a0:	697a      	ldr	r2, [r7, #20]
 80052a2:	4313      	orrs	r3, r2
 80052a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	693a      	ldr	r2, [r7, #16]
 80052aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	68fa      	ldr	r2, [r7, #12]
 80052b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	685a      	ldr	r2, [r3, #4]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	697a      	ldr	r2, [r7, #20]
 80052be:	621a      	str	r2, [r3, #32]
}
 80052c0:	46c0      	nop			@ (mov r8, r8)
 80052c2:	46bd      	mov	sp, r7
 80052c4:	b006      	add	sp, #24
 80052c6:	bd80      	pop	{r7, pc}
 80052c8:	fffffeff 	.word	0xfffffeff
 80052cc:	fffffdff 	.word	0xfffffdff

080052d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b086      	sub	sp, #24
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6a1b      	ldr	r3, [r3, #32]
 80052de:	4a1b      	ldr	r2, [pc, #108]	@ (800534c <TIM_OC4_SetConfig+0x7c>)
 80052e0:	401a      	ands	r2, r3
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6a1b      	ldr	r3, [r3, #32]
 80052ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	69db      	ldr	r3, [r3, #28]
 80052f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	4a15      	ldr	r2, [pc, #84]	@ (8005350 <TIM_OC4_SetConfig+0x80>)
 80052fc:	4013      	ands	r3, r2
 80052fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	4a14      	ldr	r2, [pc, #80]	@ (8005354 <TIM_OC4_SetConfig+0x84>)
 8005304:	4013      	ands	r3, r2
 8005306:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	021b      	lsls	r3, r3, #8
 800530e:	68fa      	ldr	r2, [r7, #12]
 8005310:	4313      	orrs	r3, r2
 8005312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	4a10      	ldr	r2, [pc, #64]	@ (8005358 <TIM_OC4_SetConfig+0x88>)
 8005318:	4013      	ands	r3, r2
 800531a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	031b      	lsls	r3, r3, #12
 8005322:	697a      	ldr	r2, [r7, #20]
 8005324:	4313      	orrs	r3, r2
 8005326:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	693a      	ldr	r2, [r7, #16]
 800532c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	68fa      	ldr	r2, [r7, #12]
 8005332:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	685a      	ldr	r2, [r3, #4]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	697a      	ldr	r2, [r7, #20]
 8005340:	621a      	str	r2, [r3, #32]
}
 8005342:	46c0      	nop			@ (mov r8, r8)
 8005344:	46bd      	mov	sp, r7
 8005346:	b006      	add	sp, #24
 8005348:	bd80      	pop	{r7, pc}
 800534a:	46c0      	nop			@ (mov r8, r8)
 800534c:	ffffefff 	.word	0xffffefff
 8005350:	ffff8fff 	.word	0xffff8fff
 8005354:	fffffcff 	.word	0xfffffcff
 8005358:	ffffdfff 	.word	0xffffdfff

0800535c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b086      	sub	sp, #24
 8005360:	af00      	add	r7, sp, #0
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	60b9      	str	r1, [r7, #8]
 8005366:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6a1b      	ldr	r3, [r3, #32]
 800536c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	6a1b      	ldr	r3, [r3, #32]
 8005372:	2201      	movs	r2, #1
 8005374:	4393      	bics	r3, r2
 8005376:	001a      	movs	r2, r3
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	699b      	ldr	r3, [r3, #24]
 8005380:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	22f0      	movs	r2, #240	@ 0xf0
 8005386:	4393      	bics	r3, r2
 8005388:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	011b      	lsls	r3, r3, #4
 800538e:	693a      	ldr	r2, [r7, #16]
 8005390:	4313      	orrs	r3, r2
 8005392:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	220a      	movs	r2, #10
 8005398:	4393      	bics	r3, r2
 800539a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800539c:	697a      	ldr	r2, [r7, #20]
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	4313      	orrs	r3, r2
 80053a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	693a      	ldr	r2, [r7, #16]
 80053a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	697a      	ldr	r2, [r7, #20]
 80053ae:	621a      	str	r2, [r3, #32]
}
 80053b0:	46c0      	nop			@ (mov r8, r8)
 80053b2:	46bd      	mov	sp, r7
 80053b4:	b006      	add	sp, #24
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b086      	sub	sp, #24
 80053bc:	af00      	add	r7, sp, #0
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	6a1b      	ldr	r3, [r3, #32]
 80053c8:	2210      	movs	r2, #16
 80053ca:	4393      	bics	r3, r2
 80053cc:	001a      	movs	r2, r3
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	699b      	ldr	r3, [r3, #24]
 80053d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6a1b      	ldr	r3, [r3, #32]
 80053dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	4a0d      	ldr	r2, [pc, #52]	@ (8005418 <TIM_TI2_ConfigInputStage+0x60>)
 80053e2:	4013      	ands	r3, r2
 80053e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	031b      	lsls	r3, r3, #12
 80053ea:	697a      	ldr	r2, [r7, #20]
 80053ec:	4313      	orrs	r3, r2
 80053ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	22a0      	movs	r2, #160	@ 0xa0
 80053f4:	4393      	bics	r3, r2
 80053f6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	011b      	lsls	r3, r3, #4
 80053fc:	693a      	ldr	r2, [r7, #16]
 80053fe:	4313      	orrs	r3, r2
 8005400:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	697a      	ldr	r2, [r7, #20]
 8005406:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	693a      	ldr	r2, [r7, #16]
 800540c:	621a      	str	r2, [r3, #32]
}
 800540e:	46c0      	nop			@ (mov r8, r8)
 8005410:	46bd      	mov	sp, r7
 8005412:	b006      	add	sp, #24
 8005414:	bd80      	pop	{r7, pc}
 8005416:	46c0      	nop			@ (mov r8, r8)
 8005418:	ffff0fff 	.word	0xffff0fff

0800541c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b084      	sub	sp, #16
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2270      	movs	r2, #112	@ 0x70
 8005430:	4393      	bics	r3, r2
 8005432:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005434:	683a      	ldr	r2, [r7, #0]
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	4313      	orrs	r3, r2
 800543a:	2207      	movs	r2, #7
 800543c:	4313      	orrs	r3, r2
 800543e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	68fa      	ldr	r2, [r7, #12]
 8005444:	609a      	str	r2, [r3, #8]
}
 8005446:	46c0      	nop			@ (mov r8, r8)
 8005448:	46bd      	mov	sp, r7
 800544a:	b004      	add	sp, #16
 800544c:	bd80      	pop	{r7, pc}
	...

08005450 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b086      	sub	sp, #24
 8005454:	af00      	add	r7, sp, #0
 8005456:	60f8      	str	r0, [r7, #12]
 8005458:	60b9      	str	r1, [r7, #8]
 800545a:	607a      	str	r2, [r7, #4]
 800545c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	4a09      	ldr	r2, [pc, #36]	@ (800548c <TIM_ETR_SetConfig+0x3c>)
 8005468:	4013      	ands	r3, r2
 800546a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	021a      	lsls	r2, r3, #8
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	431a      	orrs	r2, r3
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	4313      	orrs	r3, r2
 8005478:	697a      	ldr	r2, [r7, #20]
 800547a:	4313      	orrs	r3, r2
 800547c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	697a      	ldr	r2, [r7, #20]
 8005482:	609a      	str	r2, [r3, #8]
}
 8005484:	46c0      	nop			@ (mov r8, r8)
 8005486:	46bd      	mov	sp, r7
 8005488:	b006      	add	sp, #24
 800548a:	bd80      	pop	{r7, pc}
 800548c:	ffff00ff 	.word	0xffff00ff

08005490 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b086      	sub	sp, #24
 8005494:	af00      	add	r7, sp, #0
 8005496:	60f8      	str	r0, [r7, #12]
 8005498:	60b9      	str	r1, [r7, #8]
 800549a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	221f      	movs	r2, #31
 80054a0:	4013      	ands	r3, r2
 80054a2:	2201      	movs	r2, #1
 80054a4:	409a      	lsls	r2, r3
 80054a6:	0013      	movs	r3, r2
 80054a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	6a1b      	ldr	r3, [r3, #32]
 80054ae:	697a      	ldr	r2, [r7, #20]
 80054b0:	43d2      	mvns	r2, r2
 80054b2:	401a      	ands	r2, r3
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	6a1a      	ldr	r2, [r3, #32]
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	211f      	movs	r1, #31
 80054c0:	400b      	ands	r3, r1
 80054c2:	6879      	ldr	r1, [r7, #4]
 80054c4:	4099      	lsls	r1, r3
 80054c6:	000b      	movs	r3, r1
 80054c8:	431a      	orrs	r2, r3
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	621a      	str	r2, [r3, #32]
}
 80054ce:	46c0      	nop			@ (mov r8, r8)
 80054d0:	46bd      	mov	sp, r7
 80054d2:	b006      	add	sp, #24
 80054d4:	bd80      	pop	{r7, pc}
	...

080054d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b084      	sub	sp, #16
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2238      	movs	r2, #56	@ 0x38
 80054e6:	5c9b      	ldrb	r3, [r3, r2]
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d101      	bne.n	80054f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80054ec:	2302      	movs	r3, #2
 80054ee:	e042      	b.n	8005576 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2238      	movs	r2, #56	@ 0x38
 80054f4:	2101      	movs	r1, #1
 80054f6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2239      	movs	r2, #57	@ 0x39
 80054fc:	2102      	movs	r1, #2
 80054fe:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2270      	movs	r2, #112	@ 0x70
 8005514:	4393      	bics	r3, r2
 8005516:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	68fa      	ldr	r2, [r7, #12]
 800551e:	4313      	orrs	r3, r2
 8005520:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	68fa      	ldr	r2, [r7, #12]
 8005528:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	2380      	movs	r3, #128	@ 0x80
 8005530:	05db      	lsls	r3, r3, #23
 8005532:	429a      	cmp	r2, r3
 8005534:	d009      	beq.n	800554a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a11      	ldr	r2, [pc, #68]	@ (8005580 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d004      	beq.n	800554a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a0f      	ldr	r2, [pc, #60]	@ (8005584 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d10c      	bne.n	8005564 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	2280      	movs	r2, #128	@ 0x80
 800554e:	4393      	bics	r3, r2
 8005550:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	68ba      	ldr	r2, [r7, #8]
 8005558:	4313      	orrs	r3, r2
 800555a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	68ba      	ldr	r2, [r7, #8]
 8005562:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2239      	movs	r2, #57	@ 0x39
 8005568:	2101      	movs	r1, #1
 800556a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2238      	movs	r2, #56	@ 0x38
 8005570:	2100      	movs	r1, #0
 8005572:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005574:	2300      	movs	r3, #0
}
 8005576:	0018      	movs	r0, r3
 8005578:	46bd      	mov	sp, r7
 800557a:	b004      	add	sp, #16
 800557c:	bd80      	pop	{r7, pc}
 800557e:	46c0      	nop			@ (mov r8, r8)
 8005580:	40010800 	.word	0x40010800
 8005584:	40011400 	.word	0x40011400

08005588 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b082      	sub	sp, #8
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d101      	bne.n	800559a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e044      	b.n	8005624 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d107      	bne.n	80055b2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2278      	movs	r2, #120	@ 0x78
 80055a6:	2100      	movs	r1, #0
 80055a8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	0018      	movs	r0, r3
 80055ae:	f7fb ffa9 	bl	8001504 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2224      	movs	r2, #36	@ 0x24
 80055b6:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	2101      	movs	r1, #1
 80055c4:	438a      	bics	r2, r1
 80055c6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	0018      	movs	r0, r3
 80055cc:	f000 f830 	bl	8005630 <UART_SetConfig>
 80055d0:	0003      	movs	r3, r0
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	d101      	bne.n	80055da <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e024      	b.n	8005624 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d003      	beq.n	80055ea <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	0018      	movs	r0, r3
 80055e6:	f000 fa6d 	bl	8005ac4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	685a      	ldr	r2, [r3, #4]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	490d      	ldr	r1, [pc, #52]	@ (800562c <HAL_UART_Init+0xa4>)
 80055f6:	400a      	ands	r2, r1
 80055f8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	689a      	ldr	r2, [r3, #8]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	212a      	movs	r1, #42	@ 0x2a
 8005606:	438a      	bics	r2, r1
 8005608:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	2101      	movs	r1, #1
 8005616:	430a      	orrs	r2, r1
 8005618:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	0018      	movs	r0, r3
 800561e:	f000 fb05 	bl	8005c2c <UART_CheckIdleState>
 8005622:	0003      	movs	r3, r0
}
 8005624:	0018      	movs	r0, r3
 8005626:	46bd      	mov	sp, r7
 8005628:	b002      	add	sp, #8
 800562a:	bd80      	pop	{r7, pc}
 800562c:	ffffb7ff 	.word	0xffffb7ff

08005630 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005630:	b5b0      	push	{r4, r5, r7, lr}
 8005632:	b08e      	sub	sp, #56	@ 0x38
 8005634:	af00      	add	r7, sp, #0
 8005636:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005638:	231a      	movs	r3, #26
 800563a:	2218      	movs	r2, #24
 800563c:	189b      	adds	r3, r3, r2
 800563e:	19db      	adds	r3, r3, r7
 8005640:	2200      	movs	r2, #0
 8005642:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005644:	69fb      	ldr	r3, [r7, #28]
 8005646:	689a      	ldr	r2, [r3, #8]
 8005648:	69fb      	ldr	r3, [r7, #28]
 800564a:	691b      	ldr	r3, [r3, #16]
 800564c:	431a      	orrs	r2, r3
 800564e:	69fb      	ldr	r3, [r7, #28]
 8005650:	695b      	ldr	r3, [r3, #20]
 8005652:	431a      	orrs	r2, r3
 8005654:	69fb      	ldr	r3, [r7, #28]
 8005656:	69db      	ldr	r3, [r3, #28]
 8005658:	4313      	orrs	r3, r2
 800565a:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800565c:	69fb      	ldr	r3, [r7, #28]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4ab4      	ldr	r2, [pc, #720]	@ (8005934 <UART_SetConfig+0x304>)
 8005664:	4013      	ands	r3, r2
 8005666:	0019      	movs	r1, r3
 8005668:	69fb      	ldr	r3, [r7, #28]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800566e:	430a      	orrs	r2, r1
 8005670:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005672:	69fb      	ldr	r3, [r7, #28]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	4aaf      	ldr	r2, [pc, #700]	@ (8005938 <UART_SetConfig+0x308>)
 800567a:	4013      	ands	r3, r2
 800567c:	0019      	movs	r1, r3
 800567e:	69fb      	ldr	r3, [r7, #28]
 8005680:	68da      	ldr	r2, [r3, #12]
 8005682:	69fb      	ldr	r3, [r7, #28]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	430a      	orrs	r2, r1
 8005688:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800568a:	69fb      	ldr	r3, [r7, #28]
 800568c:	699b      	ldr	r3, [r3, #24]
 800568e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005690:	69fb      	ldr	r3, [r7, #28]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4aa9      	ldr	r2, [pc, #676]	@ (800593c <UART_SetConfig+0x30c>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d004      	beq.n	80056a4 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800569a:	69fb      	ldr	r3, [r7, #28]
 800569c:	6a1b      	ldr	r3, [r3, #32]
 800569e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80056a0:	4313      	orrs	r3, r2
 80056a2:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80056a4:	69fb      	ldr	r3, [r7, #28]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	4aa5      	ldr	r2, [pc, #660]	@ (8005940 <UART_SetConfig+0x310>)
 80056ac:	4013      	ands	r3, r2
 80056ae:	0019      	movs	r1, r3
 80056b0:	69fb      	ldr	r3, [r7, #28]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80056b6:	430a      	orrs	r2, r1
 80056b8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80056ba:	69fb      	ldr	r3, [r7, #28]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4aa1      	ldr	r2, [pc, #644]	@ (8005944 <UART_SetConfig+0x314>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d131      	bne.n	8005728 <UART_SetConfig+0xf8>
 80056c4:	4ba0      	ldr	r3, [pc, #640]	@ (8005948 <UART_SetConfig+0x318>)
 80056c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056c8:	220c      	movs	r2, #12
 80056ca:	4013      	ands	r3, r2
 80056cc:	2b0c      	cmp	r3, #12
 80056ce:	d01d      	beq.n	800570c <UART_SetConfig+0xdc>
 80056d0:	d823      	bhi.n	800571a <UART_SetConfig+0xea>
 80056d2:	2b08      	cmp	r3, #8
 80056d4:	d00c      	beq.n	80056f0 <UART_SetConfig+0xc0>
 80056d6:	d820      	bhi.n	800571a <UART_SetConfig+0xea>
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d002      	beq.n	80056e2 <UART_SetConfig+0xb2>
 80056dc:	2b04      	cmp	r3, #4
 80056de:	d00e      	beq.n	80056fe <UART_SetConfig+0xce>
 80056e0:	e01b      	b.n	800571a <UART_SetConfig+0xea>
 80056e2:	231b      	movs	r3, #27
 80056e4:	2218      	movs	r2, #24
 80056e6:	189b      	adds	r3, r3, r2
 80056e8:	19db      	adds	r3, r3, r7
 80056ea:	2200      	movs	r2, #0
 80056ec:	701a      	strb	r2, [r3, #0]
 80056ee:	e065      	b.n	80057bc <UART_SetConfig+0x18c>
 80056f0:	231b      	movs	r3, #27
 80056f2:	2218      	movs	r2, #24
 80056f4:	189b      	adds	r3, r3, r2
 80056f6:	19db      	adds	r3, r3, r7
 80056f8:	2202      	movs	r2, #2
 80056fa:	701a      	strb	r2, [r3, #0]
 80056fc:	e05e      	b.n	80057bc <UART_SetConfig+0x18c>
 80056fe:	231b      	movs	r3, #27
 8005700:	2218      	movs	r2, #24
 8005702:	189b      	adds	r3, r3, r2
 8005704:	19db      	adds	r3, r3, r7
 8005706:	2204      	movs	r2, #4
 8005708:	701a      	strb	r2, [r3, #0]
 800570a:	e057      	b.n	80057bc <UART_SetConfig+0x18c>
 800570c:	231b      	movs	r3, #27
 800570e:	2218      	movs	r2, #24
 8005710:	189b      	adds	r3, r3, r2
 8005712:	19db      	adds	r3, r3, r7
 8005714:	2208      	movs	r2, #8
 8005716:	701a      	strb	r2, [r3, #0]
 8005718:	e050      	b.n	80057bc <UART_SetConfig+0x18c>
 800571a:	231b      	movs	r3, #27
 800571c:	2218      	movs	r2, #24
 800571e:	189b      	adds	r3, r3, r2
 8005720:	19db      	adds	r3, r3, r7
 8005722:	2210      	movs	r2, #16
 8005724:	701a      	strb	r2, [r3, #0]
 8005726:	e049      	b.n	80057bc <UART_SetConfig+0x18c>
 8005728:	69fb      	ldr	r3, [r7, #28]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a83      	ldr	r2, [pc, #524]	@ (800593c <UART_SetConfig+0x30c>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d13e      	bne.n	80057b0 <UART_SetConfig+0x180>
 8005732:	4b85      	ldr	r3, [pc, #532]	@ (8005948 <UART_SetConfig+0x318>)
 8005734:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005736:	23c0      	movs	r3, #192	@ 0xc0
 8005738:	011b      	lsls	r3, r3, #4
 800573a:	4013      	ands	r3, r2
 800573c:	22c0      	movs	r2, #192	@ 0xc0
 800573e:	0112      	lsls	r2, r2, #4
 8005740:	4293      	cmp	r3, r2
 8005742:	d027      	beq.n	8005794 <UART_SetConfig+0x164>
 8005744:	22c0      	movs	r2, #192	@ 0xc0
 8005746:	0112      	lsls	r2, r2, #4
 8005748:	4293      	cmp	r3, r2
 800574a:	d82a      	bhi.n	80057a2 <UART_SetConfig+0x172>
 800574c:	2280      	movs	r2, #128	@ 0x80
 800574e:	0112      	lsls	r2, r2, #4
 8005750:	4293      	cmp	r3, r2
 8005752:	d011      	beq.n	8005778 <UART_SetConfig+0x148>
 8005754:	2280      	movs	r2, #128	@ 0x80
 8005756:	0112      	lsls	r2, r2, #4
 8005758:	4293      	cmp	r3, r2
 800575a:	d822      	bhi.n	80057a2 <UART_SetConfig+0x172>
 800575c:	2b00      	cmp	r3, #0
 800575e:	d004      	beq.n	800576a <UART_SetConfig+0x13a>
 8005760:	2280      	movs	r2, #128	@ 0x80
 8005762:	00d2      	lsls	r2, r2, #3
 8005764:	4293      	cmp	r3, r2
 8005766:	d00e      	beq.n	8005786 <UART_SetConfig+0x156>
 8005768:	e01b      	b.n	80057a2 <UART_SetConfig+0x172>
 800576a:	231b      	movs	r3, #27
 800576c:	2218      	movs	r2, #24
 800576e:	189b      	adds	r3, r3, r2
 8005770:	19db      	adds	r3, r3, r7
 8005772:	2200      	movs	r2, #0
 8005774:	701a      	strb	r2, [r3, #0]
 8005776:	e021      	b.n	80057bc <UART_SetConfig+0x18c>
 8005778:	231b      	movs	r3, #27
 800577a:	2218      	movs	r2, #24
 800577c:	189b      	adds	r3, r3, r2
 800577e:	19db      	adds	r3, r3, r7
 8005780:	2202      	movs	r2, #2
 8005782:	701a      	strb	r2, [r3, #0]
 8005784:	e01a      	b.n	80057bc <UART_SetConfig+0x18c>
 8005786:	231b      	movs	r3, #27
 8005788:	2218      	movs	r2, #24
 800578a:	189b      	adds	r3, r3, r2
 800578c:	19db      	adds	r3, r3, r7
 800578e:	2204      	movs	r2, #4
 8005790:	701a      	strb	r2, [r3, #0]
 8005792:	e013      	b.n	80057bc <UART_SetConfig+0x18c>
 8005794:	231b      	movs	r3, #27
 8005796:	2218      	movs	r2, #24
 8005798:	189b      	adds	r3, r3, r2
 800579a:	19db      	adds	r3, r3, r7
 800579c:	2208      	movs	r2, #8
 800579e:	701a      	strb	r2, [r3, #0]
 80057a0:	e00c      	b.n	80057bc <UART_SetConfig+0x18c>
 80057a2:	231b      	movs	r3, #27
 80057a4:	2218      	movs	r2, #24
 80057a6:	189b      	adds	r3, r3, r2
 80057a8:	19db      	adds	r3, r3, r7
 80057aa:	2210      	movs	r2, #16
 80057ac:	701a      	strb	r2, [r3, #0]
 80057ae:	e005      	b.n	80057bc <UART_SetConfig+0x18c>
 80057b0:	231b      	movs	r3, #27
 80057b2:	2218      	movs	r2, #24
 80057b4:	189b      	adds	r3, r3, r2
 80057b6:	19db      	adds	r3, r3, r7
 80057b8:	2210      	movs	r2, #16
 80057ba:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80057bc:	69fb      	ldr	r3, [r7, #28]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a5e      	ldr	r2, [pc, #376]	@ (800593c <UART_SetConfig+0x30c>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d000      	beq.n	80057c8 <UART_SetConfig+0x198>
 80057c6:	e084      	b.n	80058d2 <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80057c8:	231b      	movs	r3, #27
 80057ca:	2218      	movs	r2, #24
 80057cc:	189b      	adds	r3, r3, r2
 80057ce:	19db      	adds	r3, r3, r7
 80057d0:	781b      	ldrb	r3, [r3, #0]
 80057d2:	2b08      	cmp	r3, #8
 80057d4:	d01d      	beq.n	8005812 <UART_SetConfig+0x1e2>
 80057d6:	dc20      	bgt.n	800581a <UART_SetConfig+0x1ea>
 80057d8:	2b04      	cmp	r3, #4
 80057da:	d015      	beq.n	8005808 <UART_SetConfig+0x1d8>
 80057dc:	dc1d      	bgt.n	800581a <UART_SetConfig+0x1ea>
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d002      	beq.n	80057e8 <UART_SetConfig+0x1b8>
 80057e2:	2b02      	cmp	r3, #2
 80057e4:	d005      	beq.n	80057f2 <UART_SetConfig+0x1c2>
 80057e6:	e018      	b.n	800581a <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057e8:	f7fe fb1c 	bl	8003e24 <HAL_RCC_GetPCLK1Freq>
 80057ec:	0003      	movs	r3, r0
 80057ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80057f0:	e01c      	b.n	800582c <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80057f2:	4b55      	ldr	r3, [pc, #340]	@ (8005948 <UART_SetConfig+0x318>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	2210      	movs	r2, #16
 80057f8:	4013      	ands	r3, r2
 80057fa:	d002      	beq.n	8005802 <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80057fc:	4b53      	ldr	r3, [pc, #332]	@ (800594c <UART_SetConfig+0x31c>)
 80057fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005800:	e014      	b.n	800582c <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 8005802:	4b53      	ldr	r3, [pc, #332]	@ (8005950 <UART_SetConfig+0x320>)
 8005804:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005806:	e011      	b.n	800582c <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005808:	f7fe fa5c 	bl	8003cc4 <HAL_RCC_GetSysClockFreq>
 800580c:	0003      	movs	r3, r0
 800580e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005810:	e00c      	b.n	800582c <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005812:	2380      	movs	r3, #128	@ 0x80
 8005814:	021b      	lsls	r3, r3, #8
 8005816:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005818:	e008      	b.n	800582c <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 800581a:	2300      	movs	r3, #0
 800581c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800581e:	231a      	movs	r3, #26
 8005820:	2218      	movs	r2, #24
 8005822:	189b      	adds	r3, r3, r2
 8005824:	19db      	adds	r3, r3, r7
 8005826:	2201      	movs	r2, #1
 8005828:	701a      	strb	r2, [r3, #0]
        break;
 800582a:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800582c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800582e:	2b00      	cmp	r3, #0
 8005830:	d100      	bne.n	8005834 <UART_SetConfig+0x204>
 8005832:	e12f      	b.n	8005a94 <UART_SetConfig+0x464>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005834:	69fb      	ldr	r3, [r7, #28]
 8005836:	685a      	ldr	r2, [r3, #4]
 8005838:	0013      	movs	r3, r2
 800583a:	005b      	lsls	r3, r3, #1
 800583c:	189b      	adds	r3, r3, r2
 800583e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005840:	429a      	cmp	r2, r3
 8005842:	d305      	bcc.n	8005850 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005844:	69fb      	ldr	r3, [r7, #28]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800584a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800584c:	429a      	cmp	r2, r3
 800584e:	d906      	bls.n	800585e <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 8005850:	231a      	movs	r3, #26
 8005852:	2218      	movs	r2, #24
 8005854:	189b      	adds	r3, r3, r2
 8005856:	19db      	adds	r3, r3, r7
 8005858:	2201      	movs	r2, #1
 800585a:	701a      	strb	r2, [r3, #0]
 800585c:	e11a      	b.n	8005a94 <UART_SetConfig+0x464>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800585e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005860:	613b      	str	r3, [r7, #16]
 8005862:	2300      	movs	r3, #0
 8005864:	617b      	str	r3, [r7, #20]
 8005866:	6939      	ldr	r1, [r7, #16]
 8005868:	697a      	ldr	r2, [r7, #20]
 800586a:	000b      	movs	r3, r1
 800586c:	0e1b      	lsrs	r3, r3, #24
 800586e:	0010      	movs	r0, r2
 8005870:	0205      	lsls	r5, r0, #8
 8005872:	431d      	orrs	r5, r3
 8005874:	000b      	movs	r3, r1
 8005876:	021c      	lsls	r4, r3, #8
 8005878:	69fb      	ldr	r3, [r7, #28]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	085b      	lsrs	r3, r3, #1
 800587e:	60bb      	str	r3, [r7, #8]
 8005880:	2300      	movs	r3, #0
 8005882:	60fb      	str	r3, [r7, #12]
 8005884:	68b8      	ldr	r0, [r7, #8]
 8005886:	68f9      	ldr	r1, [r7, #12]
 8005888:	1900      	adds	r0, r0, r4
 800588a:	4169      	adcs	r1, r5
 800588c:	69fb      	ldr	r3, [r7, #28]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	603b      	str	r3, [r7, #0]
 8005892:	2300      	movs	r3, #0
 8005894:	607b      	str	r3, [r7, #4]
 8005896:	683a      	ldr	r2, [r7, #0]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f7fa fcc1 	bl	8000220 <__aeabi_uldivmod>
 800589e:	0002      	movs	r2, r0
 80058a0:	000b      	movs	r3, r1
 80058a2:	0013      	movs	r3, r2
 80058a4:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80058a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80058a8:	23c0      	movs	r3, #192	@ 0xc0
 80058aa:	009b      	lsls	r3, r3, #2
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d309      	bcc.n	80058c4 <UART_SetConfig+0x294>
 80058b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80058b2:	2380      	movs	r3, #128	@ 0x80
 80058b4:	035b      	lsls	r3, r3, #13
 80058b6:	429a      	cmp	r2, r3
 80058b8:	d204      	bcs.n	80058c4 <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 80058ba:	69fb      	ldr	r3, [r7, #28]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80058c0:	60da      	str	r2, [r3, #12]
 80058c2:	e0e7      	b.n	8005a94 <UART_SetConfig+0x464>
        }
        else
        {
          ret = HAL_ERROR;
 80058c4:	231a      	movs	r3, #26
 80058c6:	2218      	movs	r2, #24
 80058c8:	189b      	adds	r3, r3, r2
 80058ca:	19db      	adds	r3, r3, r7
 80058cc:	2201      	movs	r2, #1
 80058ce:	701a      	strb	r2, [r3, #0]
 80058d0:	e0e0      	b.n	8005a94 <UART_SetConfig+0x464>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	69da      	ldr	r2, [r3, #28]
 80058d6:	2380      	movs	r3, #128	@ 0x80
 80058d8:	021b      	lsls	r3, r3, #8
 80058da:	429a      	cmp	r2, r3
 80058dc:	d000      	beq.n	80058e0 <UART_SetConfig+0x2b0>
 80058de:	e082      	b.n	80059e6 <UART_SetConfig+0x3b6>
  {
    switch (clocksource)
 80058e0:	231b      	movs	r3, #27
 80058e2:	2218      	movs	r2, #24
 80058e4:	189b      	adds	r3, r3, r2
 80058e6:	19db      	adds	r3, r3, r7
 80058e8:	781b      	ldrb	r3, [r3, #0]
 80058ea:	2b08      	cmp	r3, #8
 80058ec:	d834      	bhi.n	8005958 <UART_SetConfig+0x328>
 80058ee:	009a      	lsls	r2, r3, #2
 80058f0:	4b18      	ldr	r3, [pc, #96]	@ (8005954 <UART_SetConfig+0x324>)
 80058f2:	18d3      	adds	r3, r2, r3
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058f8:	f7fe fa94 	bl	8003e24 <HAL_RCC_GetPCLK1Freq>
 80058fc:	0003      	movs	r3, r0
 80058fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005900:	e033      	b.n	800596a <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005902:	f7fe faa5 	bl	8003e50 <HAL_RCC_GetPCLK2Freq>
 8005906:	0003      	movs	r3, r0
 8005908:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800590a:	e02e      	b.n	800596a <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800590c:	4b0e      	ldr	r3, [pc, #56]	@ (8005948 <UART_SetConfig+0x318>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	2210      	movs	r2, #16
 8005912:	4013      	ands	r3, r2
 8005914:	d002      	beq.n	800591c <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005916:	4b0d      	ldr	r3, [pc, #52]	@ (800594c <UART_SetConfig+0x31c>)
 8005918:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800591a:	e026      	b.n	800596a <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 800591c:	4b0c      	ldr	r3, [pc, #48]	@ (8005950 <UART_SetConfig+0x320>)
 800591e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005920:	e023      	b.n	800596a <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005922:	f7fe f9cf 	bl	8003cc4 <HAL_RCC_GetSysClockFreq>
 8005926:	0003      	movs	r3, r0
 8005928:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800592a:	e01e      	b.n	800596a <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800592c:	2380      	movs	r3, #128	@ 0x80
 800592e:	021b      	lsls	r3, r3, #8
 8005930:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005932:	e01a      	b.n	800596a <UART_SetConfig+0x33a>
 8005934:	efff69f3 	.word	0xefff69f3
 8005938:	ffffcfff 	.word	0xffffcfff
 800593c:	40004800 	.word	0x40004800
 8005940:	fffff4ff 	.word	0xfffff4ff
 8005944:	40004400 	.word	0x40004400
 8005948:	40021000 	.word	0x40021000
 800594c:	003d0900 	.word	0x003d0900
 8005950:	00f42400 	.word	0x00f42400
 8005954:	080060c8 	.word	0x080060c8
      default:
        pclk = 0U;
 8005958:	2300      	movs	r3, #0
 800595a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800595c:	231a      	movs	r3, #26
 800595e:	2218      	movs	r2, #24
 8005960:	189b      	adds	r3, r3, r2
 8005962:	19db      	adds	r3, r3, r7
 8005964:	2201      	movs	r2, #1
 8005966:	701a      	strb	r2, [r3, #0]
        break;
 8005968:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800596a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800596c:	2b00      	cmp	r3, #0
 800596e:	d100      	bne.n	8005972 <UART_SetConfig+0x342>
 8005970:	e090      	b.n	8005a94 <UART_SetConfig+0x464>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005972:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005974:	005a      	lsls	r2, r3, #1
 8005976:	69fb      	ldr	r3, [r7, #28]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	085b      	lsrs	r3, r3, #1
 800597c:	18d2      	adds	r2, r2, r3
 800597e:	69fb      	ldr	r3, [r7, #28]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	0019      	movs	r1, r3
 8005984:	0010      	movs	r0, r2
 8005986:	f7fa fbbf 	bl	8000108 <__udivsi3>
 800598a:	0003      	movs	r3, r0
 800598c:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800598e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005990:	2b0f      	cmp	r3, #15
 8005992:	d921      	bls.n	80059d8 <UART_SetConfig+0x3a8>
 8005994:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005996:	2380      	movs	r3, #128	@ 0x80
 8005998:	025b      	lsls	r3, r3, #9
 800599a:	429a      	cmp	r2, r3
 800599c:	d21c      	bcs.n	80059d8 <UART_SetConfig+0x3a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800599e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059a0:	b29a      	uxth	r2, r3
 80059a2:	200e      	movs	r0, #14
 80059a4:	2418      	movs	r4, #24
 80059a6:	1903      	adds	r3, r0, r4
 80059a8:	19db      	adds	r3, r3, r7
 80059aa:	210f      	movs	r1, #15
 80059ac:	438a      	bics	r2, r1
 80059ae:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80059b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059b2:	085b      	lsrs	r3, r3, #1
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	2207      	movs	r2, #7
 80059b8:	4013      	ands	r3, r2
 80059ba:	b299      	uxth	r1, r3
 80059bc:	1903      	adds	r3, r0, r4
 80059be:	19db      	adds	r3, r3, r7
 80059c0:	1902      	adds	r2, r0, r4
 80059c2:	19d2      	adds	r2, r2, r7
 80059c4:	8812      	ldrh	r2, [r2, #0]
 80059c6:	430a      	orrs	r2, r1
 80059c8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80059ca:	69fb      	ldr	r3, [r7, #28]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	1902      	adds	r2, r0, r4
 80059d0:	19d2      	adds	r2, r2, r7
 80059d2:	8812      	ldrh	r2, [r2, #0]
 80059d4:	60da      	str	r2, [r3, #12]
 80059d6:	e05d      	b.n	8005a94 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 80059d8:	231a      	movs	r3, #26
 80059da:	2218      	movs	r2, #24
 80059dc:	189b      	adds	r3, r3, r2
 80059de:	19db      	adds	r3, r3, r7
 80059e0:	2201      	movs	r2, #1
 80059e2:	701a      	strb	r2, [r3, #0]
 80059e4:	e056      	b.n	8005a94 <UART_SetConfig+0x464>
      }
    }
  }
  else
  {
    switch (clocksource)
 80059e6:	231b      	movs	r3, #27
 80059e8:	2218      	movs	r2, #24
 80059ea:	189b      	adds	r3, r3, r2
 80059ec:	19db      	adds	r3, r3, r7
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	2b08      	cmp	r3, #8
 80059f2:	d822      	bhi.n	8005a3a <UART_SetConfig+0x40a>
 80059f4:	009a      	lsls	r2, r3, #2
 80059f6:	4b2f      	ldr	r3, [pc, #188]	@ (8005ab4 <UART_SetConfig+0x484>)
 80059f8:	18d3      	adds	r3, r2, r3
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059fe:	f7fe fa11 	bl	8003e24 <HAL_RCC_GetPCLK1Freq>
 8005a02:	0003      	movs	r3, r0
 8005a04:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005a06:	e021      	b.n	8005a4c <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a08:	f7fe fa22 	bl	8003e50 <HAL_RCC_GetPCLK2Freq>
 8005a0c:	0003      	movs	r3, r0
 8005a0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005a10:	e01c      	b.n	8005a4c <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a12:	4b29      	ldr	r3, [pc, #164]	@ (8005ab8 <UART_SetConfig+0x488>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	2210      	movs	r2, #16
 8005a18:	4013      	ands	r3, r2
 8005a1a:	d002      	beq.n	8005a22 <UART_SetConfig+0x3f2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005a1c:	4b27      	ldr	r3, [pc, #156]	@ (8005abc <UART_SetConfig+0x48c>)
 8005a1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005a20:	e014      	b.n	8005a4c <UART_SetConfig+0x41c>
          pclk = (uint32_t) HSI_VALUE;
 8005a22:	4b27      	ldr	r3, [pc, #156]	@ (8005ac0 <UART_SetConfig+0x490>)
 8005a24:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005a26:	e011      	b.n	8005a4c <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a28:	f7fe f94c 	bl	8003cc4 <HAL_RCC_GetSysClockFreq>
 8005a2c:	0003      	movs	r3, r0
 8005a2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005a30:	e00c      	b.n	8005a4c <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a32:	2380      	movs	r3, #128	@ 0x80
 8005a34:	021b      	lsls	r3, r3, #8
 8005a36:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005a38:	e008      	b.n	8005a4c <UART_SetConfig+0x41c>
      default:
        pclk = 0U;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8005a3e:	231a      	movs	r3, #26
 8005a40:	2218      	movs	r2, #24
 8005a42:	189b      	adds	r3, r3, r2
 8005a44:	19db      	adds	r3, r3, r7
 8005a46:	2201      	movs	r2, #1
 8005a48:	701a      	strb	r2, [r3, #0]
        break;
 8005a4a:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8005a4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d020      	beq.n	8005a94 <UART_SetConfig+0x464>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005a52:	69fb      	ldr	r3, [r7, #28]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	085a      	lsrs	r2, r3, #1
 8005a58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a5a:	18d2      	adds	r2, r2, r3
 8005a5c:	69fb      	ldr	r3, [r7, #28]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	0019      	movs	r1, r3
 8005a62:	0010      	movs	r0, r2
 8005a64:	f7fa fb50 	bl	8000108 <__udivsi3>
 8005a68:	0003      	movs	r3, r0
 8005a6a:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a6e:	2b0f      	cmp	r3, #15
 8005a70:	d90a      	bls.n	8005a88 <UART_SetConfig+0x458>
 8005a72:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005a74:	2380      	movs	r3, #128	@ 0x80
 8005a76:	025b      	lsls	r3, r3, #9
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d205      	bcs.n	8005a88 <UART_SetConfig+0x458>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005a7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a7e:	b29a      	uxth	r2, r3
 8005a80:	69fb      	ldr	r3, [r7, #28]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	60da      	str	r2, [r3, #12]
 8005a86:	e005      	b.n	8005a94 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8005a88:	231a      	movs	r3, #26
 8005a8a:	2218      	movs	r2, #24
 8005a8c:	189b      	adds	r3, r3, r2
 8005a8e:	19db      	adds	r3, r3, r7
 8005a90:	2201      	movs	r2, #1
 8005a92:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005a94:	69fb      	ldr	r3, [r7, #28]
 8005a96:	2200      	movs	r2, #0
 8005a98:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005a9a:	69fb      	ldr	r3, [r7, #28]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005aa0:	231a      	movs	r3, #26
 8005aa2:	2218      	movs	r2, #24
 8005aa4:	189b      	adds	r3, r3, r2
 8005aa6:	19db      	adds	r3, r3, r7
 8005aa8:	781b      	ldrb	r3, [r3, #0]
}
 8005aaa:	0018      	movs	r0, r3
 8005aac:	46bd      	mov	sp, r7
 8005aae:	b00e      	add	sp, #56	@ 0x38
 8005ab0:	bdb0      	pop	{r4, r5, r7, pc}
 8005ab2:	46c0      	nop			@ (mov r8, r8)
 8005ab4:	080060ec 	.word	0x080060ec
 8005ab8:	40021000 	.word	0x40021000
 8005abc:	003d0900 	.word	0x003d0900
 8005ac0:	00f42400 	.word	0x00f42400

08005ac4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b082      	sub	sp, #8
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	4013      	ands	r3, r2
 8005ad4:	d00b      	beq.n	8005aee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	4a4a      	ldr	r2, [pc, #296]	@ (8005c08 <UART_AdvFeatureConfig+0x144>)
 8005ade:	4013      	ands	r3, r2
 8005ae0:	0019      	movs	r1, r3
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	430a      	orrs	r2, r1
 8005aec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005af2:	2202      	movs	r2, #2
 8005af4:	4013      	ands	r3, r2
 8005af6:	d00b      	beq.n	8005b10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	4a43      	ldr	r2, [pc, #268]	@ (8005c0c <UART_AdvFeatureConfig+0x148>)
 8005b00:	4013      	ands	r3, r2
 8005b02:	0019      	movs	r1, r3
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	430a      	orrs	r2, r1
 8005b0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b14:	2204      	movs	r2, #4
 8005b16:	4013      	ands	r3, r2
 8005b18:	d00b      	beq.n	8005b32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	4a3b      	ldr	r2, [pc, #236]	@ (8005c10 <UART_AdvFeatureConfig+0x14c>)
 8005b22:	4013      	ands	r3, r2
 8005b24:	0019      	movs	r1, r3
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	430a      	orrs	r2, r1
 8005b30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b36:	2208      	movs	r2, #8
 8005b38:	4013      	ands	r3, r2
 8005b3a:	d00b      	beq.n	8005b54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	4a34      	ldr	r2, [pc, #208]	@ (8005c14 <UART_AdvFeatureConfig+0x150>)
 8005b44:	4013      	ands	r3, r2
 8005b46:	0019      	movs	r1, r3
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	430a      	orrs	r2, r1
 8005b52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b58:	2210      	movs	r2, #16
 8005b5a:	4013      	ands	r3, r2
 8005b5c:	d00b      	beq.n	8005b76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	4a2c      	ldr	r2, [pc, #176]	@ (8005c18 <UART_AdvFeatureConfig+0x154>)
 8005b66:	4013      	ands	r3, r2
 8005b68:	0019      	movs	r1, r3
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	430a      	orrs	r2, r1
 8005b74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b7a:	2220      	movs	r2, #32
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	d00b      	beq.n	8005b98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	4a25      	ldr	r2, [pc, #148]	@ (8005c1c <UART_AdvFeatureConfig+0x158>)
 8005b88:	4013      	ands	r3, r2
 8005b8a:	0019      	movs	r1, r3
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	430a      	orrs	r2, r1
 8005b96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b9c:	2240      	movs	r2, #64	@ 0x40
 8005b9e:	4013      	ands	r3, r2
 8005ba0:	d01d      	beq.n	8005bde <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	4a1d      	ldr	r2, [pc, #116]	@ (8005c20 <UART_AdvFeatureConfig+0x15c>)
 8005baa:	4013      	ands	r3, r2
 8005bac:	0019      	movs	r1, r3
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	430a      	orrs	r2, r1
 8005bb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005bbe:	2380      	movs	r3, #128	@ 0x80
 8005bc0:	035b      	lsls	r3, r3, #13
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	d10b      	bne.n	8005bde <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	4a15      	ldr	r2, [pc, #84]	@ (8005c24 <UART_AdvFeatureConfig+0x160>)
 8005bce:	4013      	ands	r3, r2
 8005bd0:	0019      	movs	r1, r3
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	430a      	orrs	r2, r1
 8005bdc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005be2:	2280      	movs	r2, #128	@ 0x80
 8005be4:	4013      	ands	r3, r2
 8005be6:	d00b      	beq.n	8005c00 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	4a0e      	ldr	r2, [pc, #56]	@ (8005c28 <UART_AdvFeatureConfig+0x164>)
 8005bf0:	4013      	ands	r3, r2
 8005bf2:	0019      	movs	r1, r3
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	430a      	orrs	r2, r1
 8005bfe:	605a      	str	r2, [r3, #4]
  }
}
 8005c00:	46c0      	nop			@ (mov r8, r8)
 8005c02:	46bd      	mov	sp, r7
 8005c04:	b002      	add	sp, #8
 8005c06:	bd80      	pop	{r7, pc}
 8005c08:	fffdffff 	.word	0xfffdffff
 8005c0c:	fffeffff 	.word	0xfffeffff
 8005c10:	fffbffff 	.word	0xfffbffff
 8005c14:	ffff7fff 	.word	0xffff7fff
 8005c18:	ffffefff 	.word	0xffffefff
 8005c1c:	ffffdfff 	.word	0xffffdfff
 8005c20:	ffefffff 	.word	0xffefffff
 8005c24:	ff9fffff 	.word	0xff9fffff
 8005c28:	fff7ffff 	.word	0xfff7ffff

08005c2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b092      	sub	sp, #72	@ 0x48
 8005c30:	af02      	add	r7, sp, #8
 8005c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2284      	movs	r2, #132	@ 0x84
 8005c38:	2100      	movs	r1, #0
 8005c3a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005c3c:	f7fc f924 	bl	8001e88 <HAL_GetTick>
 8005c40:	0003      	movs	r3, r0
 8005c42:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	2208      	movs	r2, #8
 8005c4c:	4013      	ands	r3, r2
 8005c4e:	2b08      	cmp	r3, #8
 8005c50:	d12c      	bne.n	8005cac <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c54:	2280      	movs	r2, #128	@ 0x80
 8005c56:	0391      	lsls	r1, r2, #14
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	4a46      	ldr	r2, [pc, #280]	@ (8005d74 <UART_CheckIdleState+0x148>)
 8005c5c:	9200      	str	r2, [sp, #0]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	f000 f88c 	bl	8005d7c <UART_WaitOnFlagUntilTimeout>
 8005c64:	1e03      	subs	r3, r0, #0
 8005c66:	d021      	beq.n	8005cac <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c68:	f3ef 8310 	mrs	r3, PRIMASK
 8005c6c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005c70:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005c72:	2301      	movs	r3, #1
 8005c74:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c78:	f383 8810 	msr	PRIMASK, r3
}
 8005c7c:	46c0      	nop			@ (mov r8, r8)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	681a      	ldr	r2, [r3, #0]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	2180      	movs	r1, #128	@ 0x80
 8005c8a:	438a      	bics	r2, r1
 8005c8c:	601a      	str	r2, [r3, #0]
 8005c8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c94:	f383 8810 	msr	PRIMASK, r3
}
 8005c98:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2220      	movs	r2, #32
 8005c9e:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2278      	movs	r2, #120	@ 0x78
 8005ca4:	2100      	movs	r1, #0
 8005ca6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ca8:	2303      	movs	r3, #3
 8005caa:	e05f      	b.n	8005d6c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	2204      	movs	r2, #4
 8005cb4:	4013      	ands	r3, r2
 8005cb6:	2b04      	cmp	r3, #4
 8005cb8:	d146      	bne.n	8005d48 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005cba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005cbc:	2280      	movs	r2, #128	@ 0x80
 8005cbe:	03d1      	lsls	r1, r2, #15
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	4a2c      	ldr	r2, [pc, #176]	@ (8005d74 <UART_CheckIdleState+0x148>)
 8005cc4:	9200      	str	r2, [sp, #0]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	f000 f858 	bl	8005d7c <UART_WaitOnFlagUntilTimeout>
 8005ccc:	1e03      	subs	r3, r0, #0
 8005cce:	d03b      	beq.n	8005d48 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cd0:	f3ef 8310 	mrs	r3, PRIMASK
 8005cd4:	60fb      	str	r3, [r7, #12]
  return(result);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8005cda:	2301      	movs	r3, #1
 8005cdc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	f383 8810 	msr	PRIMASK, r3
}
 8005ce4:	46c0      	nop			@ (mov r8, r8)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4921      	ldr	r1, [pc, #132]	@ (8005d78 <UART_CheckIdleState+0x14c>)
 8005cf2:	400a      	ands	r2, r1
 8005cf4:	601a      	str	r2, [r3, #0]
 8005cf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cf8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	f383 8810 	msr	PRIMASK, r3
}
 8005d00:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d02:	f3ef 8310 	mrs	r3, PRIMASK
 8005d06:	61bb      	str	r3, [r7, #24]
  return(result);
 8005d08:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d0a:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d10:	69fb      	ldr	r3, [r7, #28]
 8005d12:	f383 8810 	msr	PRIMASK, r3
}
 8005d16:	46c0      	nop			@ (mov r8, r8)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	689a      	ldr	r2, [r3, #8]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	2101      	movs	r1, #1
 8005d24:	438a      	bics	r2, r1
 8005d26:	609a      	str	r2, [r3, #8]
 8005d28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d2a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d2c:	6a3b      	ldr	r3, [r7, #32]
 8005d2e:	f383 8810 	msr	PRIMASK, r3
}
 8005d32:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2280      	movs	r2, #128	@ 0x80
 8005d38:	2120      	movs	r1, #32
 8005d3a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2278      	movs	r2, #120	@ 0x78
 8005d40:	2100      	movs	r1, #0
 8005d42:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d44:	2303      	movs	r3, #3
 8005d46:	e011      	b.n	8005d6c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2220      	movs	r2, #32
 8005d4c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2280      	movs	r2, #128	@ 0x80
 8005d52:	2120      	movs	r1, #32
 8005d54:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2278      	movs	r2, #120	@ 0x78
 8005d66:	2100      	movs	r1, #0
 8005d68:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005d6a:	2300      	movs	r3, #0
}
 8005d6c:	0018      	movs	r0, r3
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	b010      	add	sp, #64	@ 0x40
 8005d72:	bd80      	pop	{r7, pc}
 8005d74:	01ffffff 	.word	0x01ffffff
 8005d78:	fffffedf 	.word	0xfffffedf

08005d7c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b084      	sub	sp, #16
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	60f8      	str	r0, [r7, #12]
 8005d84:	60b9      	str	r1, [r7, #8]
 8005d86:	603b      	str	r3, [r7, #0]
 8005d88:	1dfb      	adds	r3, r7, #7
 8005d8a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d8c:	e04b      	b.n	8005e26 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d8e:	69bb      	ldr	r3, [r7, #24]
 8005d90:	3301      	adds	r3, #1
 8005d92:	d048      	beq.n	8005e26 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d94:	f7fc f878 	bl	8001e88 <HAL_GetTick>
 8005d98:	0002      	movs	r2, r0
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	1ad3      	subs	r3, r2, r3
 8005d9e:	69ba      	ldr	r2, [r7, #24]
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d302      	bcc.n	8005daa <UART_WaitOnFlagUntilTimeout+0x2e>
 8005da4:	69bb      	ldr	r3, [r7, #24]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d101      	bne.n	8005dae <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005daa:	2303      	movs	r3, #3
 8005dac:	e04b      	b.n	8005e46 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	2204      	movs	r2, #4
 8005db6:	4013      	ands	r3, r2
 8005db8:	d035      	beq.n	8005e26 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	69db      	ldr	r3, [r3, #28]
 8005dc0:	2208      	movs	r2, #8
 8005dc2:	4013      	ands	r3, r2
 8005dc4:	2b08      	cmp	r3, #8
 8005dc6:	d111      	bne.n	8005dec <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	2208      	movs	r2, #8
 8005dce:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	0018      	movs	r0, r3
 8005dd4:	f000 f83c 	bl	8005e50 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2284      	movs	r2, #132	@ 0x84
 8005ddc:	2108      	movs	r1, #8
 8005dde:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2278      	movs	r2, #120	@ 0x78
 8005de4:	2100      	movs	r1, #0
 8005de6:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8005de8:	2301      	movs	r3, #1
 8005dea:	e02c      	b.n	8005e46 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	69da      	ldr	r2, [r3, #28]
 8005df2:	2380      	movs	r3, #128	@ 0x80
 8005df4:	011b      	lsls	r3, r3, #4
 8005df6:	401a      	ands	r2, r3
 8005df8:	2380      	movs	r3, #128	@ 0x80
 8005dfa:	011b      	lsls	r3, r3, #4
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	d112      	bne.n	8005e26 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	2280      	movs	r2, #128	@ 0x80
 8005e06:	0112      	lsls	r2, r2, #4
 8005e08:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	0018      	movs	r0, r3
 8005e0e:	f000 f81f 	bl	8005e50 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2284      	movs	r2, #132	@ 0x84
 8005e16:	2120      	movs	r1, #32
 8005e18:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2278      	movs	r2, #120	@ 0x78
 8005e1e:	2100      	movs	r1, #0
 8005e20:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005e22:	2303      	movs	r3, #3
 8005e24:	e00f      	b.n	8005e46 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	69db      	ldr	r3, [r3, #28]
 8005e2c:	68ba      	ldr	r2, [r7, #8]
 8005e2e:	4013      	ands	r3, r2
 8005e30:	68ba      	ldr	r2, [r7, #8]
 8005e32:	1ad3      	subs	r3, r2, r3
 8005e34:	425a      	negs	r2, r3
 8005e36:	4153      	adcs	r3, r2
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	001a      	movs	r2, r3
 8005e3c:	1dfb      	adds	r3, r7, #7
 8005e3e:	781b      	ldrb	r3, [r3, #0]
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d0a4      	beq.n	8005d8e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e44:	2300      	movs	r3, #0
}
 8005e46:	0018      	movs	r0, r3
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	b004      	add	sp, #16
 8005e4c:	bd80      	pop	{r7, pc}
	...

08005e50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b08e      	sub	sp, #56	@ 0x38
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e58:	f3ef 8310 	mrs	r3, PRIMASK
 8005e5c:	617b      	str	r3, [r7, #20]
  return(result);
 8005e5e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e60:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e62:	2301      	movs	r3, #1
 8005e64:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e66:	69bb      	ldr	r3, [r7, #24]
 8005e68:	f383 8810 	msr	PRIMASK, r3
}
 8005e6c:	46c0      	nop			@ (mov r8, r8)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4926      	ldr	r1, [pc, #152]	@ (8005f14 <UART_EndRxTransfer+0xc4>)
 8005e7a:	400a      	ands	r2, r1
 8005e7c:	601a      	str	r2, [r3, #0]
 8005e7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e80:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e82:	69fb      	ldr	r3, [r7, #28]
 8005e84:	f383 8810 	msr	PRIMASK, r3
}
 8005e88:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e8a:	f3ef 8310 	mrs	r3, PRIMASK
 8005e8e:	623b      	str	r3, [r7, #32]
  return(result);
 8005e90:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e92:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e94:	2301      	movs	r3, #1
 8005e96:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e9a:	f383 8810 	msr	PRIMASK, r3
}
 8005e9e:	46c0      	nop			@ (mov r8, r8)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	689a      	ldr	r2, [r3, #8]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	2101      	movs	r1, #1
 8005eac:	438a      	bics	r2, r1
 8005eae:	609a      	str	r2, [r3, #8]
 8005eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eb2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005eb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eb6:	f383 8810 	msr	PRIMASK, r3
}
 8005eba:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d118      	bne.n	8005ef6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ec4:	f3ef 8310 	mrs	r3, PRIMASK
 8005ec8:	60bb      	str	r3, [r7, #8]
  return(result);
 8005eca:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ecc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ece:	2301      	movs	r3, #1
 8005ed0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	f383 8810 	msr	PRIMASK, r3
}
 8005ed8:	46c0      	nop			@ (mov r8, r8)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	2110      	movs	r1, #16
 8005ee6:	438a      	bics	r2, r1
 8005ee8:	601a      	str	r2, [r3, #0]
 8005eea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	f383 8810 	msr	PRIMASK, r3
}
 8005ef4:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2280      	movs	r2, #128	@ 0x80
 8005efa:	2120      	movs	r1, #32
 8005efc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2200      	movs	r2, #0
 8005f08:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005f0a:	46c0      	nop			@ (mov r8, r8)
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	b00e      	add	sp, #56	@ 0x38
 8005f10:	bd80      	pop	{r7, pc}
 8005f12:	46c0      	nop			@ (mov r8, r8)
 8005f14:	fffffedf 	.word	0xfffffedf

08005f18 <memset>:
 8005f18:	0003      	movs	r3, r0
 8005f1a:	1882      	adds	r2, r0, r2
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d100      	bne.n	8005f22 <memset+0xa>
 8005f20:	4770      	bx	lr
 8005f22:	7019      	strb	r1, [r3, #0]
 8005f24:	3301      	adds	r3, #1
 8005f26:	e7f9      	b.n	8005f1c <memset+0x4>

08005f28 <__libc_init_array>:
 8005f28:	b570      	push	{r4, r5, r6, lr}
 8005f2a:	2600      	movs	r6, #0
 8005f2c:	4c0c      	ldr	r4, [pc, #48]	@ (8005f60 <__libc_init_array+0x38>)
 8005f2e:	4d0d      	ldr	r5, [pc, #52]	@ (8005f64 <__libc_init_array+0x3c>)
 8005f30:	1b64      	subs	r4, r4, r5
 8005f32:	10a4      	asrs	r4, r4, #2
 8005f34:	42a6      	cmp	r6, r4
 8005f36:	d109      	bne.n	8005f4c <__libc_init_array+0x24>
 8005f38:	2600      	movs	r6, #0
 8005f3a:	f000 f821 	bl	8005f80 <_init>
 8005f3e:	4c0a      	ldr	r4, [pc, #40]	@ (8005f68 <__libc_init_array+0x40>)
 8005f40:	4d0a      	ldr	r5, [pc, #40]	@ (8005f6c <__libc_init_array+0x44>)
 8005f42:	1b64      	subs	r4, r4, r5
 8005f44:	10a4      	asrs	r4, r4, #2
 8005f46:	42a6      	cmp	r6, r4
 8005f48:	d105      	bne.n	8005f56 <__libc_init_array+0x2e>
 8005f4a:	bd70      	pop	{r4, r5, r6, pc}
 8005f4c:	00b3      	lsls	r3, r6, #2
 8005f4e:	58eb      	ldr	r3, [r5, r3]
 8005f50:	4798      	blx	r3
 8005f52:	3601      	adds	r6, #1
 8005f54:	e7ee      	b.n	8005f34 <__libc_init_array+0xc>
 8005f56:	00b3      	lsls	r3, r6, #2
 8005f58:	58eb      	ldr	r3, [r5, r3]
 8005f5a:	4798      	blx	r3
 8005f5c:	3601      	adds	r6, #1
 8005f5e:	e7f2      	b.n	8005f46 <__libc_init_array+0x1e>
 8005f60:	08006118 	.word	0x08006118
 8005f64:	08006118 	.word	0x08006118
 8005f68:	0800611c 	.word	0x0800611c
 8005f6c:	08006118 	.word	0x08006118

08005f70 <strcpy>:
 8005f70:	0003      	movs	r3, r0
 8005f72:	780a      	ldrb	r2, [r1, #0]
 8005f74:	3101      	adds	r1, #1
 8005f76:	701a      	strb	r2, [r3, #0]
 8005f78:	3301      	adds	r3, #1
 8005f7a:	2a00      	cmp	r2, #0
 8005f7c:	d1f9      	bne.n	8005f72 <strcpy+0x2>
 8005f7e:	4770      	bx	lr

08005f80 <_init>:
 8005f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f82:	46c0      	nop			@ (mov r8, r8)
 8005f84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f86:	bc08      	pop	{r3}
 8005f88:	469e      	mov	lr, r3
 8005f8a:	4770      	bx	lr

08005f8c <_fini>:
 8005f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f8e:	46c0      	nop			@ (mov r8, r8)
 8005f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f92:	bc08      	pop	{r3}
 8005f94:	469e      	mov	lr, r3
 8005f96:	4770      	bx	lr
