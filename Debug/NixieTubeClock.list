
NixieTubeClock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006558  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08006618  08006618  00016618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006698  08006698  00020958  2**0
                  CONTENTS
  4 .ARM          00000008  08006698  08006698  00016698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080066a0  080066a0  00020958  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066a0  080066a0  000166a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080066a4  080066a4  000166a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000958  20000000  080066a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000df4  20000958  08007000  00020958  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000174c  08007000  0002174c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020958  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014962  00000000  00000000  00020980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e2f  00000000  00000000  000352e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011d0  00000000  00000000  00038118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010a8  00000000  00000000  000392e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000141f4  00000000  00000000  0003a390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018349  00000000  00000000  0004e584  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00076191  00000000  00000000  000668cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dca5e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000405c  00000000  00000000  000dcab0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000958 	.word	0x20000958
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006600 	.word	0x08006600

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000095c 	.word	0x2000095c
 8000104:	08006600 	.word	0x08006600

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4647      	mov	r7, r8
 8000266:	b580      	push	{r7, lr}
 8000268:	0007      	movs	r7, r0
 800026a:	4699      	mov	r9, r3
 800026c:	0c3b      	lsrs	r3, r7, #16
 800026e:	469c      	mov	ip, r3
 8000270:	0413      	lsls	r3, r2, #16
 8000272:	0c1b      	lsrs	r3, r3, #16
 8000274:	001d      	movs	r5, r3
 8000276:	000e      	movs	r6, r1
 8000278:	4661      	mov	r1, ip
 800027a:	0400      	lsls	r0, r0, #16
 800027c:	0c14      	lsrs	r4, r2, #16
 800027e:	0c00      	lsrs	r0, r0, #16
 8000280:	4345      	muls	r5, r0
 8000282:	434b      	muls	r3, r1
 8000284:	4360      	muls	r0, r4
 8000286:	4361      	muls	r1, r4
 8000288:	18c0      	adds	r0, r0, r3
 800028a:	0c2c      	lsrs	r4, r5, #16
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4372      	muls	r2, r6
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	4463      	add	r3, ip
 80002a6:	042d      	lsls	r5, r5, #16
 80002a8:	0c2d      	lsrs	r5, r5, #16
 80002aa:	18c9      	adds	r1, r1, r3
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	1889      	adds	r1, r1, r2
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	469b      	mov	fp, r3
 80002f2:	d433      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f4:	465a      	mov	r2, fp
 80002f6:	4653      	mov	r3, sl
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83a      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e078      	b.n	8000400 <__udivmoddi4+0x144>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e075      	b.n	8000406 <__udivmoddi4+0x14a>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e028      	b.n	8000386 <__udivmoddi4+0xca>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	2320      	movs	r3, #32
 8000360:	1a9b      	subs	r3, r3, r2
 8000362:	4652      	mov	r2, sl
 8000364:	40da      	lsrs	r2, r3
 8000366:	4641      	mov	r1, r8
 8000368:	0013      	movs	r3, r2
 800036a:	464a      	mov	r2, r9
 800036c:	408a      	lsls	r2, r1
 800036e:	0017      	movs	r7, r2
 8000370:	4642      	mov	r2, r8
 8000372:	431f      	orrs	r7, r3
 8000374:	4653      	mov	r3, sl
 8000376:	4093      	lsls	r3, r2
 8000378:	001e      	movs	r6, r3
 800037a:	42af      	cmp	r7, r5
 800037c:	d9c4      	bls.n	8000308 <__udivmoddi4+0x4c>
 800037e:	2200      	movs	r2, #0
 8000380:	2300      	movs	r3, #0
 8000382:	9200      	str	r2, [sp, #0]
 8000384:	9301      	str	r3, [sp, #4]
 8000386:	4643      	mov	r3, r8
 8000388:	2b00      	cmp	r3, #0
 800038a:	d0d9      	beq.n	8000340 <__udivmoddi4+0x84>
 800038c:	07fb      	lsls	r3, r7, #31
 800038e:	0872      	lsrs	r2, r6, #1
 8000390:	431a      	orrs	r2, r3
 8000392:	4646      	mov	r6, r8
 8000394:	087b      	lsrs	r3, r7, #1
 8000396:	e00e      	b.n	80003b6 <__udivmoddi4+0xfa>
 8000398:	42ab      	cmp	r3, r5
 800039a:	d101      	bne.n	80003a0 <__udivmoddi4+0xe4>
 800039c:	42a2      	cmp	r2, r4
 800039e:	d80c      	bhi.n	80003ba <__udivmoddi4+0xfe>
 80003a0:	1aa4      	subs	r4, r4, r2
 80003a2:	419d      	sbcs	r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	1924      	adds	r4, r4, r4
 80003a8:	416d      	adcs	r5, r5
 80003aa:	2100      	movs	r1, #0
 80003ac:	3e01      	subs	r6, #1
 80003ae:	1824      	adds	r4, r4, r0
 80003b0:	414d      	adcs	r5, r1
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	d006      	beq.n	80003c4 <__udivmoddi4+0x108>
 80003b6:	42ab      	cmp	r3, r5
 80003b8:	d9ee      	bls.n	8000398 <__udivmoddi4+0xdc>
 80003ba:	3e01      	subs	r6, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2e00      	cmp	r6, #0
 80003c2:	d1f8      	bne.n	80003b6 <__udivmoddi4+0xfa>
 80003c4:	9800      	ldr	r0, [sp, #0]
 80003c6:	9901      	ldr	r1, [sp, #4]
 80003c8:	465b      	mov	r3, fp
 80003ca:	1900      	adds	r0, r0, r4
 80003cc:	4169      	adcs	r1, r5
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	db24      	blt.n	800041c <__udivmoddi4+0x160>
 80003d2:	002b      	movs	r3, r5
 80003d4:	465a      	mov	r2, fp
 80003d6:	4644      	mov	r4, r8
 80003d8:	40d3      	lsrs	r3, r2
 80003da:	002a      	movs	r2, r5
 80003dc:	40e2      	lsrs	r2, r4
 80003de:	001c      	movs	r4, r3
 80003e0:	465b      	mov	r3, fp
 80003e2:	0015      	movs	r5, r2
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db2a      	blt.n	800043e <__udivmoddi4+0x182>
 80003e8:	0026      	movs	r6, r4
 80003ea:	409e      	lsls	r6, r3
 80003ec:	0033      	movs	r3, r6
 80003ee:	0026      	movs	r6, r4
 80003f0:	4647      	mov	r7, r8
 80003f2:	40be      	lsls	r6, r7
 80003f4:	0032      	movs	r2, r6
 80003f6:	1a80      	subs	r0, r0, r2
 80003f8:	4199      	sbcs	r1, r3
 80003fa:	9000      	str	r0, [sp, #0]
 80003fc:	9101      	str	r1, [sp, #4]
 80003fe:	e79f      	b.n	8000340 <__udivmoddi4+0x84>
 8000400:	42a3      	cmp	r3, r4
 8000402:	d8bc      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000404:	e783      	b.n	800030e <__udivmoddi4+0x52>
 8000406:	4642      	mov	r2, r8
 8000408:	2320      	movs	r3, #32
 800040a:	2100      	movs	r1, #0
 800040c:	1a9b      	subs	r3, r3, r2
 800040e:	2200      	movs	r2, #0
 8000410:	9100      	str	r1, [sp, #0]
 8000412:	9201      	str	r2, [sp, #4]
 8000414:	2201      	movs	r2, #1
 8000416:	40da      	lsrs	r2, r3
 8000418:	9201      	str	r2, [sp, #4]
 800041a:	e786      	b.n	800032a <__udivmoddi4+0x6e>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	1a9b      	subs	r3, r3, r2
 8000422:	002a      	movs	r2, r5
 8000424:	4646      	mov	r6, r8
 8000426:	409a      	lsls	r2, r3
 8000428:	0023      	movs	r3, r4
 800042a:	40f3      	lsrs	r3, r6
 800042c:	4644      	mov	r4, r8
 800042e:	4313      	orrs	r3, r2
 8000430:	002a      	movs	r2, r5
 8000432:	40e2      	lsrs	r2, r4
 8000434:	001c      	movs	r4, r3
 8000436:	465b      	mov	r3, fp
 8000438:	0015      	movs	r5, r2
 800043a:	2b00      	cmp	r3, #0
 800043c:	dad4      	bge.n	80003e8 <__udivmoddi4+0x12c>
 800043e:	4642      	mov	r2, r8
 8000440:	002f      	movs	r7, r5
 8000442:	2320      	movs	r3, #32
 8000444:	0026      	movs	r6, r4
 8000446:	4097      	lsls	r7, r2
 8000448:	1a9b      	subs	r3, r3, r2
 800044a:	40de      	lsrs	r6, r3
 800044c:	003b      	movs	r3, r7
 800044e:	4333      	orrs	r3, r6
 8000450:	e7cd      	b.n	80003ee <__udivmoddi4+0x132>
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <shift_reg_pulse_srclk>:
	0b0010000000,	// 7
	0b0100000000,	// 8
	0b1000000000 	// 9
};

static void shift_reg_pulse_srclk(uint32_t delay_ms) {
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
	SHIFT_REG_SET(1);
 80004b0:	4b0f      	ldr	r3, [pc, #60]	; (80004f0 <shift_reg_pulse_srclk+0x48>)
 80004b2:	2201      	movs	r2, #1
 80004b4:	2102      	movs	r1, #2
 80004b6:	0018      	movs	r0, r3
 80004b8:	f002 fc53 	bl	8002d62 <HAL_GPIO_WritePin>
	if (delay_ms > 0) HAL_Delay(delay_ms - 1);
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d004      	beq.n	80004cc <shift_reg_pulse_srclk+0x24>
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	3b01      	subs	r3, #1
 80004c6:	0018      	movs	r0, r3
 80004c8:	f002 f804 	bl	80024d4 <HAL_Delay>
	SHIFT_REG_SET(0);
 80004cc:	4b08      	ldr	r3, [pc, #32]	; (80004f0 <shift_reg_pulse_srclk+0x48>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	2102      	movs	r1, #2
 80004d2:	0018      	movs	r0, r3
 80004d4:	f002 fc45 	bl	8002d62 <HAL_GPIO_WritePin>
	if (delay_ms > 0) HAL_Delay(delay_ms - 1);
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d004      	beq.n	80004e8 <shift_reg_pulse_srclk+0x40>
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	3b01      	subs	r3, #1
 80004e2:	0018      	movs	r0, r3
 80004e4:	f001 fff6 	bl	80024d4 <HAL_Delay>
}
 80004e8:	46c0      	nop			; (mov r8, r8)
 80004ea:	46bd      	mov	sp, r7
 80004ec:	b002      	add	sp, #8
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	50000400 	.word	0x50000400

080004f4 <shift_reg_pulse_rclk>:
static void shift_reg_pulse_rclk(uint32_t delay_ms) {
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
	STORAGE_REG_SET(1);
 80004fc:	4b0f      	ldr	r3, [pc, #60]	; (800053c <shift_reg_pulse_rclk+0x48>)
 80004fe:	2201      	movs	r2, #1
 8000500:	2101      	movs	r1, #1
 8000502:	0018      	movs	r0, r3
 8000504:	f002 fc2d 	bl	8002d62 <HAL_GPIO_WritePin>
	if (delay_ms > 0) HAL_Delay(delay_ms - 1);
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	2b00      	cmp	r3, #0
 800050c:	d004      	beq.n	8000518 <shift_reg_pulse_rclk+0x24>
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	3b01      	subs	r3, #1
 8000512:	0018      	movs	r0, r3
 8000514:	f001 ffde 	bl	80024d4 <HAL_Delay>
	STORAGE_REG_SET(0);
 8000518:	4b08      	ldr	r3, [pc, #32]	; (800053c <shift_reg_pulse_rclk+0x48>)
 800051a:	2200      	movs	r2, #0
 800051c:	2101      	movs	r1, #1
 800051e:	0018      	movs	r0, r3
 8000520:	f002 fc1f 	bl	8002d62 <HAL_GPIO_WritePin>
	if (delay_ms > 0) HAL_Delay(delay_ms - 1);
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	2b00      	cmp	r3, #0
 8000528:	d004      	beq.n	8000534 <shift_reg_pulse_rclk+0x40>
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	3b01      	subs	r3, #1
 800052e:	0018      	movs	r0, r3
 8000530:	f001 ffd0 	bl	80024d4 <HAL_Delay>
}
 8000534:	46c0      	nop			; (mov r8, r8)
 8000536:	46bd      	mov	sp, r7
 8000538:	b002      	add	sp, #8
 800053a:	bd80      	pop	{r7, pc}
 800053c:	50000400 	.word	0x50000400

08000540 <shift_reg_send>:


// data size is 16 bit, but only 10 are actually connected to a nixie lamp
static void shift_reg_send(uint64_t data) {
 8000540:	b5b0      	push	{r4, r5, r7, lr}
 8000542:	b084      	sub	sp, #16
 8000544:	af00      	add	r7, sp, #0
 8000546:	6038      	str	r0, [r7, #0]
 8000548:	6079      	str	r1, [r7, #4]
	for (int8_t bit = 63; bit >= 0; --bit) {	// Send least significant bit first
 800054a:	230f      	movs	r3, #15
 800054c:	18fb      	adds	r3, r7, r3
 800054e:	223f      	movs	r2, #63	; 0x3f
 8000550:	701a      	strb	r2, [r3, #0]
 8000552:	e02b      	b.n	80005ac <shift_reg_send+0x6c>
		/*
		 * Push data into shift register
		 */
		DATA_SET((data >> bit) & 1);
 8000554:	230f      	movs	r3, #15
 8000556:	18fb      	adds	r3, r7, r3
 8000558:	781b      	ldrb	r3, [r3, #0]
 800055a:	b25b      	sxtb	r3, r3
 800055c:	001a      	movs	r2, r3
 800055e:	3a20      	subs	r2, #32
 8000560:	2a00      	cmp	r2, #0
 8000562:	db03      	blt.n	800056c <shift_reg_send+0x2c>
 8000564:	6879      	ldr	r1, [r7, #4]
 8000566:	40d1      	lsrs	r1, r2
 8000568:	000c      	movs	r4, r1
 800056a:	e008      	b.n	800057e <shift_reg_send+0x3e>
 800056c:	2220      	movs	r2, #32
 800056e:	1ad2      	subs	r2, r2, r3
 8000570:	6879      	ldr	r1, [r7, #4]
 8000572:	4091      	lsls	r1, r2
 8000574:	000a      	movs	r2, r1
 8000576:	6839      	ldr	r1, [r7, #0]
 8000578:	40d9      	lsrs	r1, r3
 800057a:	000c      	movs	r4, r1
 800057c:	4314      	orrs	r4, r2
 800057e:	687a      	ldr	r2, [r7, #4]
 8000580:	40da      	lsrs	r2, r3
 8000582:	0015      	movs	r5, r2
 8000584:	b2e3      	uxtb	r3, r4
 8000586:	2201      	movs	r2, #1
 8000588:	4013      	ands	r3, r2
 800058a:	b2da      	uxtb	r2, r3
 800058c:	23a0      	movs	r3, #160	; 0xa0
 800058e:	05db      	lsls	r3, r3, #23
 8000590:	2140      	movs	r1, #64	; 0x40
 8000592:	0018      	movs	r0, r3
 8000594:	f002 fbe5 	bl	8002d62 <HAL_GPIO_WritePin>

		/*
		 * Set SER pin according to currently transmitted bit
		 * Toggle clock n times to set all N bits
		 */
		shift_reg_pulse_srclk(PULSE_DURATION_MS);
 8000598:	2000      	movs	r0, #0
 800059a:	f7ff ff85 	bl	80004a8 <shift_reg_pulse_srclk>
	for (int8_t bit = 63; bit >= 0; --bit) {	// Send least significant bit first
 800059e:	210f      	movs	r1, #15
 80005a0:	187b      	adds	r3, r7, r1
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	3b01      	subs	r3, #1
 80005a6:	b2da      	uxtb	r2, r3
 80005a8:	187b      	adds	r3, r7, r1
 80005aa:	701a      	strb	r2, [r3, #0]
 80005ac:	230f      	movs	r3, #15
 80005ae:	18fb      	adds	r3, r7, r3
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	2b7f      	cmp	r3, #127	; 0x7f
 80005b4:	d9ce      	bls.n	8000554 <shift_reg_send+0x14>
	}
}
 80005b6:	46c0      	nop			; (mov r8, r8)
 80005b8:	46c0      	nop			; (mov r8, r8)
 80005ba:	46bd      	mov	sp, r7
 80005bc:	b004      	add	sp, #16
 80005be:	bdb0      	pop	{r4, r5, r7, pc}

080005c0 <IN12_set>:

//void IN12_set_digit_pairs(uint16_t first_number, uint16_t second_number) {
//	IN12_set(first_number/10, first_number%10, second_number/10, second_number%10);
//}

void IN12_set(void) {
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
	OUTPUT_DISABLE();
 80005c4:	23a0      	movs	r3, #160	; 0xa0
 80005c6:	05db      	lsls	r3, r3, #23
 80005c8:	2201      	movs	r2, #1
 80005ca:	2180      	movs	r1, #128	; 0x80
 80005cc:	0018      	movs	r0, r3
 80005ce:	f002 fbc8 	bl	8002d62 <HAL_GPIO_WritePin>

//	shift_reg_send(clock_data.bitmask.tube[3]);
//	shift_reg_send(clock_data.bitmask.tube[2]);
//	shift_reg_send(clock_data.bitmask.tube[1]);
//	shift_reg_send(clock_data.bitmask.tube[0]);
	shift_reg_send(clock_data.bitmask.fused);
 80005d2:	4b0a      	ldr	r3, [pc, #40]	; (80005fc <IN12_set+0x3c>)
 80005d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005d8:	0010      	movs	r0, r2
 80005da:	0019      	movs	r1, r3
 80005dc:	f7ff ffb0 	bl	8000540 <shift_reg_send>

	/*
	 * Toggle latch
	 */
	shift_reg_pulse_rclk(PULSE_DURATION_MS);
 80005e0:	2000      	movs	r0, #0
 80005e2:	f7ff ff87 	bl	80004f4 <shift_reg_pulse_rclk>

	OUTPUT_ENABLE();
 80005e6:	23a0      	movs	r3, #160	; 0xa0
 80005e8:	05db      	lsls	r3, r3, #23
 80005ea:	2200      	movs	r2, #0
 80005ec:	2180      	movs	r1, #128	; 0x80
 80005ee:	0018      	movs	r0, r3
 80005f0:	f002 fbb7 	bl	8002d62 <HAL_GPIO_WritePin>
}
 80005f4:	46c0      	nop			; (mov r8, r8)
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	46c0      	nop			; (mov r8, r8)
 80005fc:	20000990 	.word	0x20000990

08000600 <bitmask_set>:

void bitmask_set(void) {
 8000600:	b590      	push	{r4, r7, lr}
 8000602:	b083      	sub	sp, #12
 8000604:	af00      	add	r7, sp, #0
	memset(clock_data.is_digit_on, 0, sizeof(bool)*NUM_OF_TUBES*NUM_OF_DIGITS);
 8000606:	4b40      	ldr	r3, [pc, #256]	; (8000708 <bitmask_set+0x108>)
 8000608:	2228      	movs	r2, #40	; 0x28
 800060a:	2100      	movs	r1, #0
 800060c:	0018      	movs	r0, r3
 800060e:	f005 ffe7 	bl	80065e0 <memset>
	clock_data.bitmask.fused = 0;
 8000612:	493e      	ldr	r1, [pc, #248]	; (800070c <bitmask_set+0x10c>)
 8000614:	2200      	movs	r2, #0
 8000616:	2300      	movs	r3, #0
 8000618:	630a      	str	r2, [r1, #48]	; 0x30
 800061a:	634b      	str	r3, [r1, #52]	; 0x34
//	digit[4] = {
//			*clock_data.first_number,
//			*clock_data.first_number,
//	};

	clock_data.is_digit_on[0][GET_MOST_SIGNIFICANT_DIGIT(*clock_data.first_number)] 	= true;
 800061c:	4b3b      	ldr	r3, [pc, #236]	; (800070c <bitmask_set+0x10c>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	881b      	ldrh	r3, [r3, #0]
 8000622:	210a      	movs	r1, #10
 8000624:	0018      	movs	r0, r3
 8000626:	f7ff fd6f 	bl	8000108 <__udivsi3>
 800062a:	0003      	movs	r3, r0
 800062c:	b29b      	uxth	r3, r3
 800062e:	b2db      	uxtb	r3, r3
 8000630:	001a      	movs	r2, r3
 8000632:	4b36      	ldr	r3, [pc, #216]	; (800070c <bitmask_set+0x10c>)
 8000634:	189b      	adds	r3, r3, r2
 8000636:	2201      	movs	r2, #1
 8000638:	721a      	strb	r2, [r3, #8]
	clock_data.is_digit_on[1][GET_LEAST_SIGNIFICANT_DIGIT(*clock_data.first_number)] 	= true;
 800063a:	4b34      	ldr	r3, [pc, #208]	; (800070c <bitmask_set+0x10c>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	881b      	ldrh	r3, [r3, #0]
 8000640:	210a      	movs	r1, #10
 8000642:	0018      	movs	r0, r3
 8000644:	f7ff fde6 	bl	8000214 <__aeabi_uidivmod>
 8000648:	000b      	movs	r3, r1
 800064a:	b29b      	uxth	r3, r3
 800064c:	b2db      	uxtb	r3, r3
 800064e:	001a      	movs	r2, r3
 8000650:	4b2e      	ldr	r3, [pc, #184]	; (800070c <bitmask_set+0x10c>)
 8000652:	189b      	adds	r3, r3, r2
 8000654:	2201      	movs	r2, #1
 8000656:	749a      	strb	r2, [r3, #18]
	clock_data.is_digit_on[2][GET_MOST_SIGNIFICANT_DIGIT(*clock_data.second_number)] 	= true;
 8000658:	4b2c      	ldr	r3, [pc, #176]	; (800070c <bitmask_set+0x10c>)
 800065a:	685b      	ldr	r3, [r3, #4]
 800065c:	881b      	ldrh	r3, [r3, #0]
 800065e:	210a      	movs	r1, #10
 8000660:	0018      	movs	r0, r3
 8000662:	f7ff fd51 	bl	8000108 <__udivsi3>
 8000666:	0003      	movs	r3, r0
 8000668:	b29b      	uxth	r3, r3
 800066a:	b2db      	uxtb	r3, r3
 800066c:	001a      	movs	r2, r3
 800066e:	4b27      	ldr	r3, [pc, #156]	; (800070c <bitmask_set+0x10c>)
 8000670:	189b      	adds	r3, r3, r2
 8000672:	2201      	movs	r2, #1
 8000674:	771a      	strb	r2, [r3, #28]
	clock_data.is_digit_on[3][GET_LEAST_SIGNIFICANT_DIGIT(*clock_data.second_number)] 	= true;
 8000676:	4b25      	ldr	r3, [pc, #148]	; (800070c <bitmask_set+0x10c>)
 8000678:	685b      	ldr	r3, [r3, #4]
 800067a:	881b      	ldrh	r3, [r3, #0]
 800067c:	210a      	movs	r1, #10
 800067e:	0018      	movs	r0, r3
 8000680:	f7ff fdc8 	bl	8000214 <__aeabi_uidivmod>
 8000684:	000b      	movs	r3, r1
 8000686:	b29b      	uxth	r3, r3
 8000688:	b2db      	uxtb	r3, r3
 800068a:	0019      	movs	r1, r3
 800068c:	4b1f      	ldr	r3, [pc, #124]	; (800070c <bitmask_set+0x10c>)
 800068e:	2226      	movs	r2, #38	; 0x26
 8000690:	185b      	adds	r3, r3, r1
 8000692:	189b      	adds	r3, r3, r2
 8000694:	2201      	movs	r2, #1
 8000696:	701a      	strb	r2, [r3, #0]

	for (int t = 0; t < NUM_OF_TUBES; ++t) {
 8000698:	2300      	movs	r3, #0
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	e02c      	b.n	80006f8 <bitmask_set+0xf8>
		for (int d = 0; d < NUM_OF_DIGITS; ++d) {
 800069e:	2300      	movs	r3, #0
 80006a0:	603b      	str	r3, [r7, #0]
 80006a2:	e023      	b.n	80006ec <bitmask_set+0xec>
			clock_data.bitmask.tube[t] |= digit_bitmask[d]*clock_data.is_digit_on[t][d];
 80006a4:	4b19      	ldr	r3, [pc, #100]	; (800070c <bitmask_set+0x10c>)
 80006a6:	687a      	ldr	r2, [r7, #4]
 80006a8:	3218      	adds	r2, #24
 80006aa:	0052      	lsls	r2, r2, #1
 80006ac:	5ad3      	ldrh	r3, [r2, r3]
 80006ae:	b219      	sxth	r1, r3
 80006b0:	4b17      	ldr	r3, [pc, #92]	; (8000710 <bitmask_set+0x110>)
 80006b2:	683a      	ldr	r2, [r7, #0]
 80006b4:	0052      	lsls	r2, r2, #1
 80006b6:	5ad0      	ldrh	r0, [r2, r3]
 80006b8:	4c14      	ldr	r4, [pc, #80]	; (800070c <bitmask_set+0x10c>)
 80006ba:	687a      	ldr	r2, [r7, #4]
 80006bc:	0013      	movs	r3, r2
 80006be:	009b      	lsls	r3, r3, #2
 80006c0:	189b      	adds	r3, r3, r2
 80006c2:	005b      	lsls	r3, r3, #1
 80006c4:	18e2      	adds	r2, r4, r3
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	18d3      	adds	r3, r2, r3
 80006ca:	3308      	adds	r3, #8
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	b29b      	uxth	r3, r3
 80006d0:	4343      	muls	r3, r0
 80006d2:	b29b      	uxth	r3, r3
 80006d4:	b21b      	sxth	r3, r3
 80006d6:	430b      	orrs	r3, r1
 80006d8:	b21b      	sxth	r3, r3
 80006da:	b299      	uxth	r1, r3
 80006dc:	4b0b      	ldr	r3, [pc, #44]	; (800070c <bitmask_set+0x10c>)
 80006de:	687a      	ldr	r2, [r7, #4]
 80006e0:	3218      	adds	r2, #24
 80006e2:	0052      	lsls	r2, r2, #1
 80006e4:	52d1      	strh	r1, [r2, r3]
		for (int d = 0; d < NUM_OF_DIGITS; ++d) {
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	3301      	adds	r3, #1
 80006ea:	603b      	str	r3, [r7, #0]
 80006ec:	683b      	ldr	r3, [r7, #0]
 80006ee:	2b09      	cmp	r3, #9
 80006f0:	ddd8      	ble.n	80006a4 <bitmask_set+0xa4>
	for (int t = 0; t < NUM_OF_TUBES; ++t) {
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	3301      	adds	r3, #1
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	2b03      	cmp	r3, #3
 80006fc:	ddcf      	ble.n	800069e <bitmask_set+0x9e>
		}
	}
}
 80006fe:	46c0      	nop			; (mov r8, r8)
 8000700:	46c0      	nop			; (mov r8, r8)
 8000702:	46bd      	mov	sp, r7
 8000704:	b003      	add	sp, #12
 8000706:	bd90      	pop	{r4, r7, pc}
 8000708:	20000998 	.word	0x20000998
 800070c:	20000990 	.word	0x20000990
 8000710:	08006618 	.word	0x08006618

08000714 <time_update>:

void time_update(void) {
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
	// Need to stop PWM first so there is no flickering
	rtc_time.Hours 		= DS3231_GetHour();
 8000718:	f001 fdab 	bl	8002272 <DS3231_GetHour>
 800071c:	0003      	movs	r3, r0
 800071e:	001a      	movs	r2, r3
 8000720:	4b08      	ldr	r3, [pc, #32]	; (8000744 <time_update+0x30>)
 8000722:	701a      	strb	r2, [r3, #0]
	rtc_time.Minutes 	= DS3231_GetMinute();
 8000724:	f001 fdb2 	bl	800228c <DS3231_GetMinute>
 8000728:	0003      	movs	r3, r0
 800072a:	001a      	movs	r2, r3
 800072c:	4b05      	ldr	r3, [pc, #20]	; (8000744 <time_update+0x30>)
 800072e:	705a      	strb	r2, [r3, #1]
	rtc_time.Seconds 	= DS3231_GetSecond();
 8000730:	f001 fdb9 	bl	80022a6 <DS3231_GetSecond>
 8000734:	0003      	movs	r3, r0
 8000736:	001a      	movs	r2, r3
 8000738:	4b02      	ldr	r3, [pc, #8]	; (8000744 <time_update+0x30>)
 800073a:	709a      	strb	r2, [r3, #2]


}
 800073c:	46c0      	nop			; (mov r8, r8)
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	46c0      	nop			; (mov r8, r8)
 8000744:	20000974 	.word	0x20000974

08000748 <date_update>:

static void date_update(void) {
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
	rtc_date.Year 		= DS3231_GetYear();
 800074c:	f001 fd69 	bl	8002222 <DS3231_GetYear>
 8000750:	0003      	movs	r3, r0
 8000752:	b2da      	uxtb	r2, r3
 8000754:	4b0b      	ldr	r3, [pc, #44]	; (8000784 <date_update+0x3c>)
 8000756:	70da      	strb	r2, [r3, #3]
	rtc_date.Month 		= DS3231_GetMonth();
 8000758:	f001 fd52 	bl	8002200 <DS3231_GetMonth>
 800075c:	0003      	movs	r3, r0
 800075e:	001a      	movs	r2, r3
 8000760:	4b08      	ldr	r3, [pc, #32]	; (8000784 <date_update+0x3c>)
 8000762:	705a      	strb	r2, [r3, #1]
	rtc_date.Date 		= DS3231_GetDate();
 8000764:	f001 fd3f 	bl	80021e6 <DS3231_GetDate>
 8000768:	0003      	movs	r3, r0
 800076a:	001a      	movs	r2, r3
 800076c:	4b05      	ldr	r3, [pc, #20]	; (8000784 <date_update+0x3c>)
 800076e:	709a      	strb	r2, [r3, #2]
	rtc_date.WeekDay 	= DS3231_GetDayOfWeek();
 8000770:	f001 fd2c 	bl	80021cc <DS3231_GetDayOfWeek>
 8000774:	0003      	movs	r3, r0
 8000776:	001a      	movs	r2, r3
 8000778:	4b02      	ldr	r3, [pc, #8]	; (8000784 <date_update+0x3c>)
 800077a:	701a      	strb	r2, [r3, #0]
}
 800077c:	46c0      	nop			; (mov r8, r8)
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	46c0      	nop			; (mov r8, r8)
 8000784:	20000988 	.word	0x20000988

08000788 <IN12_init>:

void IN12_init(void) {
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
	if(DS3231_IsOscillatorStopped()) {
 800078c:	f001 fd10 	bl	80021b0 <DS3231_IsOscillatorStopped>
 8000790:	1e03      	subs	r3, r0, #0
 8000792:	d007      	beq.n	80007a4 <IN12_init+0x1c>
		// todo: go to the "time set mode" automaticaly
		DS3231_SetFullTime(12, 34, 56);
 8000794:	2238      	movs	r2, #56	; 0x38
 8000796:	2122      	movs	r1, #34	; 0x22
 8000798:	200c      	movs	r0, #12
 800079a:	f001 fdd0 	bl	800233e <DS3231_SetFullTime>
		DS3231_EnableOscillator(DS3231_ENABLED);
 800079e:	2001      	movs	r0, #1
 80007a0:	f001 fc5d 	bl	800205e <DS3231_EnableOscillator>
	}

	time_update();
 80007a4:	f7ff ffb6 	bl	8000714 <time_update>
	date_update();
 80007a8:	f7ff ffce 	bl	8000748 <date_update>
}
 80007ac:	46c0      	nop			; (mov r8, r8)
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
	...

080007b4 <tubes_data_source_set>:

void tubes_data_source_set(uint16_t* first_number_src, uint16_t* second_number_src) {
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
 80007bc:	6039      	str	r1, [r7, #0]
	clock_data.first_number = first_number_src;
 80007be:	4b05      	ldr	r3, [pc, #20]	; (80007d4 <tubes_data_source_set+0x20>)
 80007c0:	687a      	ldr	r2, [r7, #4]
 80007c2:	601a      	str	r2, [r3, #0]
	clock_data.second_number = second_number_src;
 80007c4:	4b03      	ldr	r3, [pc, #12]	; (80007d4 <tubes_data_source_set+0x20>)
 80007c6:	683a      	ldr	r2, [r7, #0]
 80007c8:	605a      	str	r2, [r3, #4]
}
 80007ca:	46c0      	nop			; (mov r8, r8)
 80007cc:	46bd      	mov	sp, r7
 80007ce:	b002      	add	sp, #8
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	46c0      	nop			; (mov r8, r8)
 80007d4:	20000990 	.word	0x20000990

080007d8 <btns_state_get>:
 * 			and adds corresponding mask to the handle.
 * 			State equals to "PRESSED"
 * 			(to 0, RESET state) if
 * 			any of the buttons have been pressed.
 */
static void btns_state_get(Buttons_HandleTypeDef *hbtns) {
 80007d8:	b5b0      	push	{r4, r5, r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
	GPIO_PinState gpio_state;
	hbtns->state_current = RELEASED;
 80007e0:	687a      	ldr	r2, [r7, #4]
 80007e2:	23f2      	movs	r3, #242	; 0xf2
 80007e4:	005b      	lsls	r3, r3, #1
 80007e6:	2100      	movs	r1, #0
 80007e8:	54d1      	strb	r1, [r2, r3]

	for(int i = 0; i < hbtns->num_of_buttons; ++i) {
 80007ea:	2300      	movs	r3, #0
 80007ec:	60fb      	str	r3, [r7, #12]
 80007ee:	e034      	b.n	800085a <btns_state_get+0x82>
		gpio_state = HAL_GPIO_ReadPin(hbtns->list[i].port, hbtns->list[i].pin);
 80007f0:	687a      	ldr	r2, [r7, #4]
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	015b      	lsls	r3, r3, #5
 80007f6:	18d3      	adds	r3, r2, r3
 80007f8:	3318      	adds	r3, #24
 80007fa:	6818      	ldr	r0, [r3, #0]
 80007fc:	687a      	ldr	r2, [r7, #4]
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	015b      	lsls	r3, r3, #5
 8000802:	18d3      	adds	r3, r2, r3
 8000804:	331c      	adds	r3, #28
 8000806:	881b      	ldrh	r3, [r3, #0]
 8000808:	250b      	movs	r5, #11
 800080a:	197c      	adds	r4, r7, r5
 800080c:	0019      	movs	r1, r3
 800080e:	f002 fa8b 	bl	8002d28 <HAL_GPIO_ReadPin>
 8000812:	0003      	movs	r3, r0
 8000814:	7023      	strb	r3, [r4, #0]

		if(gpio_state == hbtns->list[i].state_active) {
 8000816:	687a      	ldr	r2, [r7, #4]
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	015b      	lsls	r3, r3, #5
 800081c:	18d3      	adds	r3, r2, r3
 800081e:	331e      	adds	r3, #30
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	197a      	adds	r2, r7, r5
 8000824:	7812      	ldrb	r2, [r2, #0]
 8000826:	429a      	cmp	r2, r3
 8000828:	d114      	bne.n	8000854 <btns_state_get+0x7c>
			hbtns->pressed_btns_mask |= hbtns->list[i].mask;
 800082a:	687a      	ldr	r2, [r7, #4]
 800082c:	23f1      	movs	r3, #241	; 0xf1
 800082e:	005b      	lsls	r3, r3, #1
 8000830:	5ad2      	ldrh	r2, [r2, r3]
 8000832:	6879      	ldr	r1, [r7, #4]
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	015b      	lsls	r3, r3, #5
 8000838:	18cb      	adds	r3, r1, r3
 800083a:	3314      	adds	r3, #20
 800083c:	881b      	ldrh	r3, [r3, #0]
 800083e:	4313      	orrs	r3, r2
 8000840:	b299      	uxth	r1, r3
 8000842:	687a      	ldr	r2, [r7, #4]
 8000844:	23f1      	movs	r3, #241	; 0xf1
 8000846:	005b      	lsls	r3, r3, #1
 8000848:	52d1      	strh	r1, [r2, r3]
			hbtns->state_current = PRESSED;
 800084a:	687a      	ldr	r2, [r7, #4]
 800084c:	23f2      	movs	r3, #242	; 0xf2
 800084e:	005b      	lsls	r3, r3, #1
 8000850:	2101      	movs	r1, #1
 8000852:	54d1      	strb	r1, [r2, r3]
	for(int i = 0; i < hbtns->num_of_buttons; ++i) {
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	3301      	adds	r3, #1
 8000858:	60fb      	str	r3, [r7, #12]
 800085a:	687a      	ldr	r2, [r7, #4]
 800085c:	23f0      	movs	r3, #240	; 0xf0
 800085e:	005b      	lsls	r3, r3, #1
 8000860:	5cd3      	ldrb	r3, [r2, r3]
 8000862:	001a      	movs	r2, r3
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	4293      	cmp	r3, r2
 8000868:	dbc2      	blt.n	80007f0 <btns_state_get+0x18>
		}
	}
}
 800086a:	46c0      	nop			; (mov r8, r8)
 800086c:	46c0      	nop			; (mov r8, r8)
 800086e:	46bd      	mov	sp, r7
 8000870:	b004      	add	sp, #16
 8000872:	bdb0      	pop	{r4, r5, r7, pc}

08000874 <btns_state_set>:

/*
 * Define current state (usually power button is pressed when this function is called)
 *
 */
static void btns_state_set(Buttons_HandleTypeDef *hbtns, State_TypeDef new_state) {
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
 800087c:	000a      	movs	r2, r1
 800087e:	1cfb      	adds	r3, r7, #3
 8000880:	701a      	strb	r2, [r3, #0]
	hbtns->pressed_btns_mask	= 0; 			// Reset buttons mask
 8000882:	687a      	ldr	r2, [r7, #4]
 8000884:	23f1      	movs	r3, #241	; 0xf1
 8000886:	005b      	lsls	r3, r3, #1
 8000888:	2100      	movs	r1, #0
 800088a:	52d1      	strh	r1, [r2, r3]
	hbtns->state_current		= new_state;
 800088c:	687a      	ldr	r2, [r7, #4]
 800088e:	1cf9      	adds	r1, r7, #3
 8000890:	23f2      	movs	r3, #242	; 0xf2
 8000892:	005b      	lsls	r3, r3, #1
 8000894:	7809      	ldrb	r1, [r1, #0]
 8000896:	54d1      	strb	r1, [r2, r3]
	hbtns->state_previous		= new_state;
 8000898:	687a      	ldr	r2, [r7, #4]
 800089a:	1cf9      	adds	r1, r7, #3
 800089c:	23e6      	movs	r3, #230	; 0xe6
 800089e:	33ff      	adds	r3, #255	; 0xff
 80008a0:	7809      	ldrb	r1, [r1, #0]
 80008a2:	54d1      	strb	r1, [r2, r3]
	hbtns->hold_s		= 0;
 80008a4:	687a      	ldr	r2, [r7, #4]
 80008a6:	23f3      	movs	r3, #243	; 0xf3
 80008a8:	005b      	lsls	r3, r3, #1
 80008aa:	2100      	movs	r1, #0
 80008ac:	54d1      	strb	r1, [r2, r3]
}
 80008ae:	46c0      	nop			; (mov r8, r8)
 80008b0:	46bd      	mov	sp, r7
 80008b2:	b002      	add	sp, #8
 80008b4:	bd80      	pop	{r7, pc}

080008b6 <btns_timer_start>:

static HAL_StatusTypeDef btns_timer_start(Buttons_HandleTypeDef *hbtns) {
 80008b6:	b5b0      	push	{r4, r5, r7, lr}
 80008b8:	b084      	sub	sp, #16
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	6078      	str	r0, [r7, #4]
	HAL_TIM_StateTypeDef timer_status = HAL_TIM_Base_GetState(hbtns->htim);
 80008be:	687a      	ldr	r2, [r7, #4]
 80008c0:	23f4      	movs	r3, #244	; 0xf4
 80008c2:	005b      	lsls	r3, r3, #1
 80008c4:	58d3      	ldr	r3, [r2, r3]
 80008c6:	250f      	movs	r5, #15
 80008c8:	197c      	adds	r4, r7, r5
 80008ca:	0018      	movs	r0, r3
 80008cc:	f004 fe4e 	bl	800556c <HAL_TIM_Base_GetState>
 80008d0:	0003      	movs	r3, r0
 80008d2:	7023      	strb	r3, [r4, #0]

	/*
	 * Start the timer if it hasn't been started yet
	 */
	if (timer_status == HAL_TIM_STATE_READY) {
 80008d4:	002c      	movs	r4, r5
 80008d6:	193b      	adds	r3, r7, r4
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	2b01      	cmp	r3, #1
 80008dc:	d124      	bne.n	8000928 <btns_timer_start+0x72>
		/*
		 * Clear pending interrupt flag first
		 * otherwise IT would occur immediately after the start
		 */
		FIX_TIMER_TRIGGER(hbtns->htim);
 80008de:	687a      	ldr	r2, [r7, #4]
 80008e0:	23f4      	movs	r3, #244	; 0xf4
 80008e2:	005b      	lsls	r3, r3, #1
 80008e4:	58d3      	ldr	r3, [r2, r3]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	2202      	movs	r2, #2
 80008ea:	4252      	negs	r2, r2
 80008ec:	611a      	str	r2, [r3, #16]
		timer_status += HAL_TIM_Base_Start_IT(hbtns->htim);
 80008ee:	687a      	ldr	r2, [r7, #4]
 80008f0:	23f4      	movs	r3, #244	; 0xf4
 80008f2:	005b      	lsls	r3, r3, #1
 80008f4:	58d3      	ldr	r3, [r2, r3]
 80008f6:	0018      	movs	r0, r3
 80008f8:	f004 f89e 	bl	8004a38 <HAL_TIM_Base_Start_IT>
 80008fc:	0003      	movs	r3, r0
 80008fe:	0019      	movs	r1, r3
 8000900:	193b      	adds	r3, r7, r4
 8000902:	193a      	adds	r2, r7, r4
 8000904:	7812      	ldrb	r2, [r2, #0]
 8000906:	188a      	adds	r2, r1, r2
 8000908:	701a      	strb	r2, [r3, #0]

		timer_status += HAL_TIM_OC_Start_IT(hbtns->htim, TIM_CHANNEL_1);
 800090a:	687a      	ldr	r2, [r7, #4]
 800090c:	23f4      	movs	r3, #244	; 0xf4
 800090e:	005b      	lsls	r3, r3, #1
 8000910:	58d3      	ldr	r3, [r2, r3]
 8000912:	2100      	movs	r1, #0
 8000914:	0018      	movs	r0, r3
 8000916:	f004 f8db 	bl	8004ad0 <HAL_TIM_OC_Start_IT>
 800091a:	0003      	movs	r3, r0
 800091c:	0019      	movs	r1, r3
 800091e:	193b      	adds	r3, r7, r4
 8000920:	193a      	adds	r2, r7, r4
 8000922:	7812      	ldrb	r2, [r2, #0]
 8000924:	188a      	adds	r2, r1, r2
 8000926:	701a      	strb	r2, [r3, #0]
	}

	return (HAL_StatusTypeDef)timer_status;
 8000928:	230f      	movs	r3, #15
 800092a:	18fb      	adds	r3, r7, r3
 800092c:	781b      	ldrb	r3, [r3, #0]
}
 800092e:	0018      	movs	r0, r3
 8000930:	46bd      	mov	sp, r7
 8000932:	b004      	add	sp, #16
 8000934:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000938 <btns_check>:

void btns_check(Buttons_HandleTypeDef *hbtns) {
 8000938:	b580      	push	{r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
	uint8_t cnt = 0;
 8000940:	230f      	movs	r3, #15
 8000942:	18fb      	adds	r3, r7, r3
 8000944:	2200      	movs	r2, #0
 8000946:	701a      	strb	r2, [r3, #0]
	/*
	 * Get buttons' masks and current state
	 */
	btns_state_get(hbtns);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	0018      	movs	r0, r3
 800094c:	f7ff ff44 	bl	80007d8 <btns_state_get>
	/*
	 * Check whether a button state has changed
	 * 1. If changed to active then just notice that (update previous state)
	 * 2. If changed to idle when no long presses were detected - execute "click callback"
	 */
	if (hbtns->state_current != hbtns->state_previous) {
 8000950:	687a      	ldr	r2, [r7, #4]
 8000952:	23f2      	movs	r3, #242	; 0xf2
 8000954:	005b      	lsls	r3, r3, #1
 8000956:	5cd2      	ldrb	r2, [r2, r3]
 8000958:	6879      	ldr	r1, [r7, #4]
 800095a:	23e6      	movs	r3, #230	; 0xe6
 800095c:	33ff      	adds	r3, #255	; 0xff
 800095e:	5ccb      	ldrb	r3, [r1, r3]
 8000960:	429a      	cmp	r2, r3
 8000962:	d022      	beq.n	80009aa <btns_check+0x72>
		if (hbtns->state_current == PRESSED) {
 8000964:	687a      	ldr	r2, [r7, #4]
 8000966:	23f2      	movs	r3, #242	; 0xf2
 8000968:	005b      	lsls	r3, r3, #1
 800096a:	5cd3      	ldrb	r3, [r2, r3]
 800096c:	2b01      	cmp	r3, #1
 800096e:	d105      	bne.n	800097c <btns_check+0x44>
			btns_state_set(hbtns, PRESSED);
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	2101      	movs	r1, #1
 8000974:	0018      	movs	r0, r3
 8000976:	f7ff ff7d 	bl	8000874 <btns_state_set>
				++hbtns->hold_s;
				btns_callback(hbtns->pressed_btns_mask, hbtns->hold_s);
			}
		}
	}
}
 800097a:	e040      	b.n	80009fe <btns_check+0xc6>
			if (hbtns->hold_s < 2) {
 800097c:	687a      	ldr	r2, [r7, #4]
 800097e:	23f3      	movs	r3, #243	; 0xf3
 8000980:	005b      	lsls	r3, r3, #1
 8000982:	5cd3      	ldrb	r3, [r2, r3]
 8000984:	2b01      	cmp	r3, #1
 8000986:	d80a      	bhi.n	800099e <btns_check+0x66>
				btns_callback(hbtns->pressed_btns_mask, hbtns->hold_s);
 8000988:	687a      	ldr	r2, [r7, #4]
 800098a:	23f1      	movs	r3, #241	; 0xf1
 800098c:	005b      	lsls	r3, r3, #1
 800098e:	5ad0      	ldrh	r0, [r2, r3]
 8000990:	687a      	ldr	r2, [r7, #4]
 8000992:	23f3      	movs	r3, #243	; 0xf3
 8000994:	005b      	lsls	r3, r3, #1
 8000996:	5cd3      	ldrb	r3, [r2, r3]
 8000998:	0019      	movs	r1, r3
 800099a:	f000 f8db 	bl	8000b54 <btns_callback>
			btns_state_set(hbtns, RELEASED);
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	2100      	movs	r1, #0
 80009a2:	0018      	movs	r0, r3
 80009a4:	f7ff ff66 	bl	8000874 <btns_state_set>
}
 80009a8:	e029      	b.n	80009fe <btns_check+0xc6>
		if(hbtns->state_previous == PRESSED) {
 80009aa:	687a      	ldr	r2, [r7, #4]
 80009ac:	23e6      	movs	r3, #230	; 0xe6
 80009ae:	33ff      	adds	r3, #255	; 0xff
 80009b0:	5cd3      	ldrb	r3, [r2, r3]
 80009b2:	2b01      	cmp	r3, #1
 80009b4:	d123      	bne.n	80009fe <btns_check+0xc6>
			if(++cnt > hold_1s_cnt) {
 80009b6:	210f      	movs	r1, #15
 80009b8:	187b      	adds	r3, r7, r1
 80009ba:	187a      	adds	r2, r7, r1
 80009bc:	7812      	ldrb	r2, [r2, #0]
 80009be:	3201      	adds	r2, #1
 80009c0:	701a      	strb	r2, [r3, #0]
 80009c2:	4b11      	ldr	r3, [pc, #68]	; (8000a08 <btns_check+0xd0>)
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	187a      	adds	r2, r7, r1
 80009c8:	7812      	ldrb	r2, [r2, #0]
 80009ca:	429a      	cmp	r2, r3
 80009cc:	d917      	bls.n	80009fe <btns_check+0xc6>
				cnt = 0;
 80009ce:	187b      	adds	r3, r7, r1
 80009d0:	2200      	movs	r2, #0
 80009d2:	701a      	strb	r2, [r3, #0]
				++hbtns->hold_s;
 80009d4:	687a      	ldr	r2, [r7, #4]
 80009d6:	23f3      	movs	r3, #243	; 0xf3
 80009d8:	005b      	lsls	r3, r3, #1
 80009da:	5cd3      	ldrb	r3, [r2, r3]
 80009dc:	3301      	adds	r3, #1
 80009de:	b2d9      	uxtb	r1, r3
 80009e0:	687a      	ldr	r2, [r7, #4]
 80009e2:	23f3      	movs	r3, #243	; 0xf3
 80009e4:	005b      	lsls	r3, r3, #1
 80009e6:	54d1      	strb	r1, [r2, r3]
				btns_callback(hbtns->pressed_btns_mask, hbtns->hold_s);
 80009e8:	687a      	ldr	r2, [r7, #4]
 80009ea:	23f1      	movs	r3, #241	; 0xf1
 80009ec:	005b      	lsls	r3, r3, #1
 80009ee:	5ad0      	ldrh	r0, [r2, r3]
 80009f0:	687a      	ldr	r2, [r7, #4]
 80009f2:	23f3      	movs	r3, #243	; 0xf3
 80009f4:	005b      	lsls	r3, r3, #1
 80009f6:	5cd3      	ldrb	r3, [r2, r3]
 80009f8:	0019      	movs	r1, r3
 80009fa:	f000 f8ab 	bl	8000b54 <btns_callback>
}
 80009fe:	46c0      	nop			; (mov r8, r8)
 8000a00:	46bd      	mov	sp, r7
 8000a02:	b004      	add	sp, #16
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	46c0      	nop			; (mov r8, r8)
 8000a08:	200009d0 	.word	0x200009d0

08000a0c <btns_init>:


/*
 * @brief	Set defaults, add timer handle and start it
 */
HAL_StatusTypeDef btns_init(Buttons_HandleTypeDef *hbtns, Button_InitTypeDef user_buttons[], uint8_t num_of_buttons, TIM_HandleTypeDef *htim, State_TypeDef default_state) {
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b086      	sub	sp, #24
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	60f8      	str	r0, [r7, #12]
 8000a14:	60b9      	str	r1, [r7, #8]
 8000a16:	603b      	str	r3, [r7, #0]
 8000a18:	1dfb      	adds	r3, r7, #7
 8000a1a:	701a      	strb	r2, [r3, #0]
	assert_param(hbtns 			== NULL);
	assert_param(user_buttons 	== NULL);
	assert_param(htim 			== NULL);

	if(num_of_buttons > MAX_NUMBER_OF_BUTTONS)
 8000a1c:	1dfb      	adds	r3, r7, #7
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	2b0f      	cmp	r3, #15
 8000a22:	d901      	bls.n	8000a28 <btns_init+0x1c>
		return HAL_ERROR;
 8000a24:	2301      	movs	r3, #1
 8000a26:	e08f      	b.n	8000b48 <btns_init+0x13c>

	hbtns->num_of_buttons	= num_of_buttons;
 8000a28:	68fa      	ldr	r2, [r7, #12]
 8000a2a:	1df9      	adds	r1, r7, #7
 8000a2c:	23f0      	movs	r3, #240	; 0xf0
 8000a2e:	005b      	lsls	r3, r3, #1
 8000a30:	7809      	ldrb	r1, [r1, #0]
 8000a32:	54d1      	strb	r1, [r2, r3]
	hbtns->htim 			= htim;										// Set dedicated to buttons timer
 8000a34:	68fa      	ldr	r2, [r7, #12]
 8000a36:	23f4      	movs	r3, #244	; 0xf4
 8000a38:	005b      	lsls	r3, r3, #1
 8000a3a:	6839      	ldr	r1, [r7, #0]
 8000a3c:	50d1      	str	r1, [r2, r3]

	/*
	 * Register button parameters and fill additional fields
	 */
	for(int id = 0; id < num_of_buttons; ++id) {
 8000a3e:	2300      	movs	r3, #0
 8000a40:	617b      	str	r3, [r7, #20]
 8000a42:	e061      	b.n	8000b08 <btns_init+0xfc>
		strcpy(hbtns->list[id].name, user_buttons[id].name);		// Copy name
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	015b      	lsls	r3, r3, #5
 8000a48:	68fa      	ldr	r2, [r7, #12]
 8000a4a:	18d0      	adds	r0, r2, r3
 8000a4c:	697a      	ldr	r2, [r7, #20]
 8000a4e:	0013      	movs	r3, r2
 8000a50:	00db      	lsls	r3, r3, #3
 8000a52:	1a9b      	subs	r3, r3, r2
 8000a54:	009b      	lsls	r3, r3, #2
 8000a56:	001a      	movs	r2, r3
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	189b      	adds	r3, r3, r2
 8000a5c:	0019      	movs	r1, r3
 8000a5e:	f005 fdc7 	bl	80065f0 <strcpy>
		hbtns->list[id].mask			= 1 << id;					// Create unique bitmask
 8000a62:	2201      	movs	r2, #1
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	409a      	lsls	r2, r3
 8000a68:	0013      	movs	r3, r2
 8000a6a:	b299      	uxth	r1, r3
 8000a6c:	68fa      	ldr	r2, [r7, #12]
 8000a6e:	697b      	ldr	r3, [r7, #20]
 8000a70:	015b      	lsls	r3, r3, #5
 8000a72:	18d3      	adds	r3, r2, r3
 8000a74:	3314      	adds	r3, #20
 8000a76:	1c0a      	adds	r2, r1, #0
 8000a78:	801a      	strh	r2, [r3, #0]
		hbtns->list[id].port 			= user_buttons[id].port;
 8000a7a:	697a      	ldr	r2, [r7, #20]
 8000a7c:	0013      	movs	r3, r2
 8000a7e:	00db      	lsls	r3, r3, #3
 8000a80:	1a9b      	subs	r3, r3, r2
 8000a82:	009b      	lsls	r3, r3, #2
 8000a84:	001a      	movs	r2, r3
 8000a86:	68bb      	ldr	r3, [r7, #8]
 8000a88:	189b      	adds	r3, r3, r2
 8000a8a:	695a      	ldr	r2, [r3, #20]
 8000a8c:	68f9      	ldr	r1, [r7, #12]
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	015b      	lsls	r3, r3, #5
 8000a92:	18cb      	adds	r3, r1, r3
 8000a94:	3318      	adds	r3, #24
 8000a96:	601a      	str	r2, [r3, #0]
		hbtns->list[id].pin 			= user_buttons[id].pin;
 8000a98:	697a      	ldr	r2, [r7, #20]
 8000a9a:	0013      	movs	r3, r2
 8000a9c:	00db      	lsls	r3, r3, #3
 8000a9e:	1a9b      	subs	r3, r3, r2
 8000aa0:	009b      	lsls	r3, r3, #2
 8000aa2:	001a      	movs	r2, r3
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	189b      	adds	r3, r3, r2
 8000aa8:	8b19      	ldrh	r1, [r3, #24]
 8000aaa:	68fa      	ldr	r2, [r7, #12]
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	015b      	lsls	r3, r3, #5
 8000ab0:	18d3      	adds	r3, r2, r3
 8000ab2:	331c      	adds	r3, #28
 8000ab4:	1c0a      	adds	r2, r1, #0
 8000ab6:	801a      	strh	r2, [r3, #0]
		hbtns->list[id].state_active 	= user_buttons[id].state_active;
 8000ab8:	697a      	ldr	r2, [r7, #20]
 8000aba:	0013      	movs	r3, r2
 8000abc:	00db      	lsls	r3, r3, #3
 8000abe:	1a9b      	subs	r3, r3, r2
 8000ac0:	009b      	lsls	r3, r3, #2
 8000ac2:	001a      	movs	r2, r3
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	189b      	adds	r3, r3, r2
 8000ac8:	7e99      	ldrb	r1, [r3, #26]
 8000aca:	68fa      	ldr	r2, [r7, #12]
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	015b      	lsls	r3, r3, #5
 8000ad0:	18d3      	adds	r3, r2, r3
 8000ad2:	331e      	adds	r3, #30
 8000ad4:	1c0a      	adds	r2, r1, #0
 8000ad6:	701a      	strb	r2, [r3, #0]
		hbtns->list[id].state 			= user_buttons[id].state_active == GPIO_PIN_SET ? GPIO_PIN_RESET : GPIO_PIN_SET; // By default lvl_en is opposite of active
 8000ad8:	697a      	ldr	r2, [r7, #20]
 8000ada:	0013      	movs	r3, r2
 8000adc:	00db      	lsls	r3, r3, #3
 8000ade:	1a9b      	subs	r3, r3, r2
 8000ae0:	009b      	lsls	r3, r3, #2
 8000ae2:	001a      	movs	r2, r3
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	189b      	adds	r3, r3, r2
 8000ae8:	7e9b      	ldrb	r3, [r3, #26]
 8000aea:	3b01      	subs	r3, #1
 8000aec:	1e5a      	subs	r2, r3, #1
 8000aee:	4193      	sbcs	r3, r2
 8000af0:	b2db      	uxtb	r3, r3
 8000af2:	0019      	movs	r1, r3
 8000af4:	68fa      	ldr	r2, [r7, #12]
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	015b      	lsls	r3, r3, #5
 8000afa:	18d3      	adds	r3, r2, r3
 8000afc:	331f      	adds	r3, #31
 8000afe:	1c0a      	adds	r2, r1, #0
 8000b00:	701a      	strb	r2, [r3, #0]
	for(int id = 0; id < num_of_buttons; ++id) {
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	3301      	adds	r3, #1
 8000b06:	617b      	str	r3, [r7, #20]
 8000b08:	1dfb      	adds	r3, r7, #7
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	697a      	ldr	r2, [r7, #20]
 8000b0e:	429a      	cmp	r2, r3
 8000b10:	db98      	blt.n	8000a44 <btns_init+0x38>

	/*
	 * Set default state to prevent false detection on start.
	 * For example, when buttons are initialized with power button pressed.
	 */
	btns_state_set(hbtns, default_state);
 8000b12:	2320      	movs	r3, #32
 8000b14:	18fb      	adds	r3, r7, r3
 8000b16:	781a      	ldrb	r2, [r3, #0]
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	0011      	movs	r1, r2
 8000b1c:	0018      	movs	r0, r3
 8000b1e:	f7ff fea9 	bl	8000874 <btns_state_set>

	/*
	 * Set max count for long presses, e.g. 1000ms/50ms = 20
	 */
	hold_1s_cnt 	= 1000/hbtns->htim->Init.Period;
 8000b22:	68fa      	ldr	r2, [r7, #12]
 8000b24:	23f4      	movs	r3, #244	; 0xf4
 8000b26:	005b      	lsls	r3, r3, #1
 8000b28:	58d3      	ldr	r3, [r2, r3]
 8000b2a:	68db      	ldr	r3, [r3, #12]
 8000b2c:	0019      	movs	r1, r3
 8000b2e:	23fa      	movs	r3, #250	; 0xfa
 8000b30:	0098      	lsls	r0, r3, #2
 8000b32:	f7ff fae9 	bl	8000108 <__udivsi3>
 8000b36:	0003      	movs	r3, r0
 8000b38:	b2da      	uxtb	r2, r3
 8000b3a:	4b05      	ldr	r3, [pc, #20]	; (8000b50 <btns_init+0x144>)
 8000b3c:	701a      	strb	r2, [r3, #0]
//	hold_10s_count 			= 10000/hbtns->htim->Init.Period;

	/*
	 * Start the timer
	 */
	return btns_timer_start(hbtns);
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	0018      	movs	r0, r3
 8000b42:	f7ff feb8 	bl	80008b6 <btns_timer_start>
 8000b46:	0003      	movs	r3, r0
}
 8000b48:	0018      	movs	r0, r3
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	b006      	add	sp, #24
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	200009d0 	.word	0x200009d0

08000b54 <btns_callback>:
extern Buttons_HandleTypeDef 	hbtns;

extern uint8_t duty_cycles[4];


void btns_callback(uint16_t mask, PressType_TypeDef press_type) {
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	0002      	movs	r2, r0
 8000b5c:	1dbb      	adds	r3, r7, #6
 8000b5e:	801a      	strh	r2, [r3, #0]
 8000b60:	1d7b      	adds	r3, r7, #5
 8000b62:	1c0a      	adds	r2, r1, #0
 8000b64:	701a      	strb	r2, [r3, #0]
	shared_mask 		= mask;
 8000b66:	1dbb      	adds	r3, r7, #6
 8000b68:	881a      	ldrh	r2, [r3, #0]
 8000b6a:	4b05      	ldr	r3, [pc, #20]	; (8000b80 <btns_callback+0x2c>)
 8000b6c:	601a      	str	r2, [r3, #0]
	shared_press_type 	= press_type;
 8000b6e:	1d7b      	adds	r3, r7, #5
 8000b70:	781a      	ldrb	r2, [r3, #0]
 8000b72:	4b04      	ldr	r3, [pc, #16]	; (8000b84 <btns_callback+0x30>)
 8000b74:	601a      	str	r2, [r3, #0]
}
 8000b76:	46c0      	nop			; (mov r8, r8)
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	b002      	add	sp, #8
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	46c0      	nop			; (mov r8, r8)
 8000b80:	200009d4 	.word	0x200009d4
 8000b84:	200009d8 	.word	0x200009d8

08000b88 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
	static uint8_t count_50_ms = 0;
	if(htim == &htim2) {
 8000b90:	687a      	ldr	r2, [r7, #4]
 8000b92:	4b18      	ldr	r3, [pc, #96]	; (8000bf4 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000b94:	429a      	cmp	r2, r3
 8000b96:	d108      	bne.n	8000baa <HAL_TIM_PeriodElapsedCallback+0x22>
		bitmask_set(); // restore values
 8000b98:	f7ff fd32 	bl	8000600 <bitmask_set>
		if(!flag_upd_tubes)
 8000b9c:	4b16      	ldr	r3, [pc, #88]	; (8000bf8 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d102      	bne.n	8000baa <HAL_TIM_PeriodElapsedCallback+0x22>
			flag_upd_tubes = 1;
 8000ba4:	4b14      	ldr	r3, [pc, #80]	; (8000bf8 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	701a      	strb	r2, [r3, #0]
	}

	if(htim == &htim21) {
 8000baa:	687a      	ldr	r2, [r7, #4]
 8000bac:	4b13      	ldr	r3, [pc, #76]	; (8000bfc <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000bae:	429a      	cmp	r2, r3
 8000bb0:	d11c      	bne.n	8000bec <HAL_TIM_PeriodElapsedCallback+0x64>
		++count_50_ms;
 8000bb2:	4b13      	ldr	r3, [pc, #76]	; (8000c00 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	b2da      	uxtb	r2, r3
 8000bba:	4b11      	ldr	r3, [pc, #68]	; (8000c00 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000bbc:	701a      	strb	r2, [r3, #0]
		if (count_50_ms >= 20) {
 8000bbe:	4b10      	ldr	r3, [pc, #64]	; (8000c00 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	2b13      	cmp	r3, #19
 8000bc4:	d908      	bls.n	8000bd8 <HAL_TIM_PeriodElapsedCallback+0x50>
			flag_upd_time = 1;
 8000bc6:	4b0f      	ldr	r3, [pc, #60]	; (8000c04 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000bc8:	2201      	movs	r2, #1
 8000bca:	701a      	strb	r2, [r3, #0]
			flag_upd_dots = 1;
 8000bcc:	4b0e      	ldr	r3, [pc, #56]	; (8000c08 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000bce:	2201      	movs	r2, #1
 8000bd0:	701a      	strb	r2, [r3, #0]
			count_50_ms = 0;
 8000bd2:	4b0b      	ldr	r3, [pc, #44]	; (8000c00 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	701a      	strb	r2, [r3, #0]
		}
		if (count_50_ms % 10 == 0) {
 8000bd8:	4b09      	ldr	r3, [pc, #36]	; (8000c00 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	210a      	movs	r1, #10
 8000bde:	0018      	movs	r0, r3
 8000be0:	f7ff fb18 	bl	8000214 <__aeabi_uidivmod>
		}
		btns_check(&hbtns);
 8000be4:	4b09      	ldr	r3, [pc, #36]	; (8000c0c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000be6:	0018      	movs	r0, r3
 8000be8:	f7ff fea6 	bl	8000938 <btns_check>
	}
}
 8000bec:	46c0      	nop			; (mov r8, r8)
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	b002      	add	sp, #8
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	20000b68 	.word	0x20000b68
 8000bf8:	2000098c 	.word	0x2000098c
 8000bfc:	20000ba8 	.word	0x20000ba8
 8000c00:	200009dc 	.word	0x200009dc
 8000c04:	2000098d 	.word	0x2000098d
 8000c08:	2000098e 	.word	0x2000098e
 8000c0c:	20000d10 	.word	0x20000d10

08000c10 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
	if(htim == &htim2) {
 8000c18:	687a      	ldr	r2, [r7, #4]
 8000c1a:	4b16      	ldr	r3, [pc, #88]	; (8000c74 <HAL_TIM_PWM_PulseFinishedCallback+0x64>)
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	d124      	bne.n	8000c6a <HAL_TIM_PWM_PulseFinishedCallback+0x5a>
		switch (htim->Channel) {
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	7e1b      	ldrb	r3, [r3, #24]
 8000c24:	2b08      	cmp	r3, #8
 8000c26:	d014      	beq.n	8000c52 <HAL_TIM_PWM_PulseFinishedCallback+0x42>
 8000c28:	dc17      	bgt.n	8000c5a <HAL_TIM_PWM_PulseFinishedCallback+0x4a>
 8000c2a:	2b04      	cmp	r3, #4
 8000c2c:	d00d      	beq.n	8000c4a <HAL_TIM_PWM_PulseFinishedCallback+0x3a>
 8000c2e:	dc14      	bgt.n	8000c5a <HAL_TIM_PWM_PulseFinishedCallback+0x4a>
 8000c30:	2b01      	cmp	r3, #1
 8000c32:	d002      	beq.n	8000c3a <HAL_TIM_PWM_PulseFinishedCallback+0x2a>
 8000c34:	2b02      	cmp	r3, #2
 8000c36:	d004      	beq.n	8000c42 <HAL_TIM_PWM_PulseFinishedCallback+0x32>
			case HAL_TIM_ACTIVE_CHANNEL_1: clock_data.bitmask.tube[0] = 0; break;// E.g. "if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {...}"
			case HAL_TIM_ACTIVE_CHANNEL_2: clock_data.bitmask.tube[1] = 0; break;
			case HAL_TIM_ACTIVE_CHANNEL_3: clock_data.bitmask.tube[2] = 0; break;
			case HAL_TIM_ACTIVE_CHANNEL_4: clock_data.bitmask.tube[3] = 0; break;
			default: break;
 8000c38:	e00f      	b.n	8000c5a <HAL_TIM_PWM_PulseFinishedCallback+0x4a>
			case HAL_TIM_ACTIVE_CHANNEL_1: clock_data.bitmask.tube[0] = 0; break;// E.g. "if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {...}"
 8000c3a:	4b0f      	ldr	r3, [pc, #60]	; (8000c78 <HAL_TIM_PWM_PulseFinishedCallback+0x68>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	861a      	strh	r2, [r3, #48]	; 0x30
 8000c40:	e00c      	b.n	8000c5c <HAL_TIM_PWM_PulseFinishedCallback+0x4c>
			case HAL_TIM_ACTIVE_CHANNEL_2: clock_data.bitmask.tube[1] = 0; break;
 8000c42:	4b0d      	ldr	r3, [pc, #52]	; (8000c78 <HAL_TIM_PWM_PulseFinishedCallback+0x68>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	865a      	strh	r2, [r3, #50]	; 0x32
 8000c48:	e008      	b.n	8000c5c <HAL_TIM_PWM_PulseFinishedCallback+0x4c>
			case HAL_TIM_ACTIVE_CHANNEL_3: clock_data.bitmask.tube[2] = 0; break;
 8000c4a:	4b0b      	ldr	r3, [pc, #44]	; (8000c78 <HAL_TIM_PWM_PulseFinishedCallback+0x68>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	869a      	strh	r2, [r3, #52]	; 0x34
 8000c50:	e004      	b.n	8000c5c <HAL_TIM_PWM_PulseFinishedCallback+0x4c>
			case HAL_TIM_ACTIVE_CHANNEL_4: clock_data.bitmask.tube[3] = 0; break;
 8000c52:	4b09      	ldr	r3, [pc, #36]	; (8000c78 <HAL_TIM_PWM_PulseFinishedCallback+0x68>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	86da      	strh	r2, [r3, #54]	; 0x36
 8000c58:	e000      	b.n	8000c5c <HAL_TIM_PWM_PulseFinishedCallback+0x4c>
			default: break;
 8000c5a:	46c0      	nop			; (mov r8, r8)
		}
		if(!flag_upd_tubes)
 8000c5c:	4b07      	ldr	r3, [pc, #28]	; (8000c7c <HAL_TIM_PWM_PulseFinishedCallback+0x6c>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d102      	bne.n	8000c6a <HAL_TIM_PWM_PulseFinishedCallback+0x5a>
			flag_upd_tubes = 1;
 8000c64:	4b05      	ldr	r3, [pc, #20]	; (8000c7c <HAL_TIM_PWM_PulseFinishedCallback+0x6c>)
 8000c66:	2201      	movs	r2, #1
 8000c68:	701a      	strb	r2, [r3, #0]
	}
}
 8000c6a:	46c0      	nop			; (mov r8, r8)
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	b002      	add	sp, #8
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	46c0      	nop			; (mov r8, r8)
 8000c74:	20000b68 	.word	0x20000b68
 8000c78:	20000990 	.word	0x20000990
 8000c7c:	2000098c 	.word	0x2000098c

08000c80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c80:	b5b0      	push	{r4, r5, r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c86:	f001 fbb5 	bl	80023f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c8a:	f000 f8d9 	bl	8000e40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c8e:	f000 fb3f 	bl	8001310 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c92:	f000 fb0f 	bl	80012b4 <MX_DMA_Init>
  MX_I2C1_Init();
 8000c96:	f000 f953 	bl	8000f40 <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 8000c9a:	f000 f991 	bl	8000fc0 <MX_LPUART1_UART_Init>
  MX_USART2_UART_Init();
 8000c9e:	f000 f9bf 	bl	8001020 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8000ca2:	f000 f9ed 	bl	8001080 <MX_RTC_Init>
  MX_TIM21_Init();
 8000ca6:	f000 faaf 	bl	8001208 <MX_TIM21_Init>
  MX_TIM2_Init();
 8000caa:	f000 fa13 	bl	80010d4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
//  settings_init(s_ptr, settings_size);
  IN12_init();
 8000cae:	f7ff fd6b 	bl	8000788 <IN12_init>
  DS3231_Init(&hi2c1);
 8000cb2:	4b52      	ldr	r3, [pc, #328]	; (8000dfc <main+0x17c>)
 8000cb4:	0018      	movs	r0, r3
 8000cb6:	f001 f94d 	bl	8001f54 <DS3231_Init>

  init_menu_items(&hmenu, items_list, NUM_OF_MENUS, NUM_OF_ITEMS);
 8000cba:	4951      	ldr	r1, [pc, #324]	; (8000e00 <main+0x180>)
 8000cbc:	4851      	ldr	r0, [pc, #324]	; (8000e04 <main+0x184>)
 8000cbe:	230b      	movs	r3, #11
 8000cc0:	2203      	movs	r2, #3
 8000cc2:	f000 fc97 	bl	80015f4 <init_menu_items>
  btns_init(&hbtns, btns_list, num_of_btns, &htim21, PRESSED);
 8000cc6:	4b50      	ldr	r3, [pc, #320]	; (8000e08 <main+0x188>)
 8000cc8:	781a      	ldrb	r2, [r3, #0]
 8000cca:	4b50      	ldr	r3, [pc, #320]	; (8000e0c <main+0x18c>)
 8000ccc:	4950      	ldr	r1, [pc, #320]	; (8000e10 <main+0x190>)
 8000cce:	4851      	ldr	r0, [pc, #324]	; (8000e14 <main+0x194>)
 8000cd0:	2401      	movs	r4, #1
 8000cd2:	9400      	str	r4, [sp, #0]
 8000cd4:	f7ff fe9a 	bl	8000a0c <btns_init>
//  status = HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);

  while (1)
  {
	  // must update when digits are active
	  if(flag_upd_time) {
 8000cd8:	4b4f      	ldr	r3, [pc, #316]	; (8000e18 <main+0x198>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d01f      	beq.n	8000d20 <main+0xa0>
		  time_update();
 8000ce0:	f7ff fd18 	bl	8000714 <time_update>
		  items_list[HOURS_MINUTES].numbers[0] = DS3231_GetHour();
 8000ce4:	f001 fac5 	bl	8002272 <DS3231_GetHour>
 8000ce8:	0003      	movs	r3, r0
 8000cea:	b299      	uxth	r1, r3
 8000cec:	4b44      	ldr	r3, [pc, #272]	; (8000e00 <main+0x180>)
 8000cee:	4a4b      	ldr	r2, [pc, #300]	; (8000e1c <main+0x19c>)
 8000cf0:	5299      	strh	r1, [r3, r2]
		  items_list[HOURS_MINUTES].numbers[1] = DS3231_GetMinute();
 8000cf2:	f001 facb 	bl	800228c <DS3231_GetMinute>
 8000cf6:	0003      	movs	r3, r0
 8000cf8:	b299      	uxth	r1, r3
 8000cfa:	4b41      	ldr	r3, [pc, #260]	; (8000e00 <main+0x180>)
 8000cfc:	4a48      	ldr	r2, [pc, #288]	; (8000e20 <main+0x1a0>)
 8000cfe:	5299      	strh	r1, [r3, r2]
		  items_list[MINUTES_SECONDS].numbers[0] = items_list[HOURS_MINUTES].numbers[1];
 8000d00:	4b3f      	ldr	r3, [pc, #252]	; (8000e00 <main+0x180>)
 8000d02:	4a47      	ldr	r2, [pc, #284]	; (8000e20 <main+0x1a0>)
 8000d04:	5a99      	ldrh	r1, [r3, r2]
 8000d06:	4b3e      	ldr	r3, [pc, #248]	; (8000e00 <main+0x180>)
 8000d08:	4a46      	ldr	r2, [pc, #280]	; (8000e24 <main+0x1a4>)
 8000d0a:	5299      	strh	r1, [r3, r2]
		  items_list[MINUTES_SECONDS].numbers[1] = DS3231_GetSecond();
 8000d0c:	f001 facb 	bl	80022a6 <DS3231_GetSecond>
 8000d10:	0003      	movs	r3, r0
 8000d12:	b299      	uxth	r1, r3
 8000d14:	4b3a      	ldr	r3, [pc, #232]	; (8000e00 <main+0x180>)
 8000d16:	4a44      	ldr	r2, [pc, #272]	; (8000e28 <main+0x1a8>)
 8000d18:	5299      	strh	r1, [r3, r2]
		  flag_upd_time = 0;
 8000d1a:	4b3f      	ldr	r3, [pc, #252]	; (8000e18 <main+0x198>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	701a      	strb	r2, [r3, #0]
	  }

	  if(flag_upd_tubes) {
 8000d20:	4b42      	ldr	r3, [pc, #264]	; (8000e2c <main+0x1ac>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d004      	beq.n	8000d32 <main+0xb2>
		  IN12_set();
 8000d28:	f7ff fc4a 	bl	80005c0 <IN12_set>
		  flag_upd_tubes = 0;
 8000d2c:	4b3f      	ldr	r3, [pc, #252]	; (8000e2c <main+0x1ac>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	701a      	strb	r2, [r3, #0]
	  }

	  if(flag_upd_dots) {
 8000d32:	4b3f      	ldr	r3, [pc, #252]	; (8000e30 <main+0x1b0>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d008      	beq.n	8000d4c <main+0xcc>
		  flag_upd_dots = 0;
 8000d3a:	4b3d      	ldr	r3, [pc, #244]	; (8000e30 <main+0x1b0>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_TogglePin(INS_EN_3V3_GPIO_Port, INS_EN_3V3_Pin);
 8000d40:	23a0      	movs	r3, #160	; 0xa0
 8000d42:	05db      	lsls	r3, r3, #23
 8000d44:	2120      	movs	r1, #32
 8000d46:	0018      	movs	r0, r3
 8000d48:	f002 f828 	bl	8002d9c <HAL_GPIO_TogglePin>
////		  DS3231_SetFullTime(rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds);
////		  DS3231_EnableOscillator(DS3231_ENABLED);
//		  shared_mask = 0;
//	  }

	  if(logic[hmenu.current_item][shared_mask][shared_press_type][hmenu.is_selected] != NULL) {
 8000d4c:	4b2d      	ldr	r3, [pc, #180]	; (8000e04 <main+0x184>)
 8000d4e:	791b      	ldrb	r3, [r3, #4]
 8000d50:	001c      	movs	r4, r3
 8000d52:	4b38      	ldr	r3, [pc, #224]	; (8000e34 <main+0x1b4>)
 8000d54:	6819      	ldr	r1, [r3, #0]
 8000d56:	4b38      	ldr	r3, [pc, #224]	; (8000e38 <main+0x1b8>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a2a      	ldr	r2, [pc, #168]	; (8000e04 <main+0x184>)
 8000d5c:	7952      	ldrb	r2, [r2, #5]
 8000d5e:	0015      	movs	r5, r2
 8000d60:	4836      	ldr	r0, [pc, #216]	; (8000e3c <main+0x1bc>)
 8000d62:	001a      	movs	r2, r3
 8000d64:	0052      	lsls	r2, r2, #1
 8000d66:	18d2      	adds	r2, r2, r3
 8000d68:	0023      	movs	r3, r4
 8000d6a:	005b      	lsls	r3, r3, #1
 8000d6c:	191b      	adds	r3, r3, r4
 8000d6e:	011b      	lsls	r3, r3, #4
 8000d70:	18d2      	adds	r2, r2, r3
 8000d72:	000b      	movs	r3, r1
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	185b      	adds	r3, r3, r1
 8000d78:	005b      	lsls	r3, r3, #1
 8000d7a:	18d3      	adds	r3, r2, r3
 8000d7c:	195b      	adds	r3, r3, r5
 8000d7e:	009b      	lsls	r3, r3, #2
 8000d80:	581b      	ldr	r3, [r3, r0]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d0a8      	beq.n	8000cd8 <main+0x58>
		  (*logic[hmenu.current_item][shared_mask][shared_press_type][hmenu.is_selected])();
 8000d86:	4b1f      	ldr	r3, [pc, #124]	; (8000e04 <main+0x184>)
 8000d88:	791b      	ldrb	r3, [r3, #4]
 8000d8a:	001c      	movs	r4, r3
 8000d8c:	4b29      	ldr	r3, [pc, #164]	; (8000e34 <main+0x1b4>)
 8000d8e:	6819      	ldr	r1, [r3, #0]
 8000d90:	4b29      	ldr	r3, [pc, #164]	; (8000e38 <main+0x1b8>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a1b      	ldr	r2, [pc, #108]	; (8000e04 <main+0x184>)
 8000d96:	7952      	ldrb	r2, [r2, #5]
 8000d98:	0015      	movs	r5, r2
 8000d9a:	4828      	ldr	r0, [pc, #160]	; (8000e3c <main+0x1bc>)
 8000d9c:	001a      	movs	r2, r3
 8000d9e:	0052      	lsls	r2, r2, #1
 8000da0:	18d2      	adds	r2, r2, r3
 8000da2:	0023      	movs	r3, r4
 8000da4:	005b      	lsls	r3, r3, #1
 8000da6:	191b      	adds	r3, r3, r4
 8000da8:	011b      	lsls	r3, r3, #4
 8000daa:	18d2      	adds	r2, r2, r3
 8000dac:	000b      	movs	r3, r1
 8000dae:	005b      	lsls	r3, r3, #1
 8000db0:	185b      	adds	r3, r3, r1
 8000db2:	005b      	lsls	r3, r3, #1
 8000db4:	18d3      	adds	r3, r2, r3
 8000db6:	195b      	adds	r3, r3, r5
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	581b      	ldr	r3, [r3, r0]
 8000dbc:	4798      	blx	r3
		  tubes_data_source_set(&(items_list[hmenu.current_item].numbers[0]), &(items_list[hmenu.current_item].numbers[1]));
 8000dbe:	4b11      	ldr	r3, [pc, #68]	; (8000e04 <main+0x184>)
 8000dc0:	791b      	ldrb	r3, [r3, #4]
 8000dc2:	001a      	movs	r2, r3
 8000dc4:	23d0      	movs	r3, #208	; 0xd0
 8000dc6:	4353      	muls	r3, r2
 8000dc8:	3308      	adds	r3, #8
 8000dca:	001a      	movs	r2, r3
 8000dcc:	4b0c      	ldr	r3, [pc, #48]	; (8000e00 <main+0x180>)
 8000dce:	18d3      	adds	r3, r2, r3
 8000dd0:	1c98      	adds	r0, r3, #2
 8000dd2:	4b0c      	ldr	r3, [pc, #48]	; (8000e04 <main+0x184>)
 8000dd4:	791b      	ldrb	r3, [r3, #4]
 8000dd6:	001a      	movs	r2, r3
 8000dd8:	23d0      	movs	r3, #208	; 0xd0
 8000dda:	4353      	muls	r3, r2
 8000ddc:	330a      	adds	r3, #10
 8000dde:	001a      	movs	r2, r3
 8000de0:	4b07      	ldr	r3, [pc, #28]	; (8000e00 <main+0x180>)
 8000de2:	18d3      	adds	r3, r2, r3
 8000de4:	3302      	adds	r3, #2
 8000de6:	0019      	movs	r1, r3
 8000de8:	f7ff fce4 	bl	80007b4 <tubes_data_source_set>
		  shared_mask = 0;
 8000dec:	4b11      	ldr	r3, [pc, #68]	; (8000e34 <main+0x1b4>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]
		  shared_press_type = 0;
 8000df2:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <main+0x1b8>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
	  if(flag_upd_time) {
 8000df8:	e76e      	b.n	8000cd8 <main+0x58>
 8000dfa:	46c0      	nop			; (mov r8, r8)
 8000dfc:	200009e0 	.word	0x200009e0
 8000e00:	20000054 	.word	0x20000054
 8000e04:	20000d08 	.word	0x20000d08
 8000e08:	20000944 	.word	0x20000944
 8000e0c:	20000ba8 	.word	0x20000ba8
 8000e10:	20000000 	.word	0x20000000
 8000e14:	20000d10 	.word	0x20000d10
 8000e18:	2000098d 	.word	0x2000098d
 8000e1c:	0000041a 	.word	0x0000041a
 8000e20:	0000041c 	.word	0x0000041c
 8000e24:	000004ea 	.word	0x000004ea
 8000e28:	000004ec 	.word	0x000004ec
 8000e2c:	2000098c 	.word	0x2000098c
 8000e30:	2000098e 	.word	0x2000098e
 8000e34:	200009d4 	.word	0x200009d4
 8000e38:	200009d8 	.word	0x200009d8
 8000e3c:	20000f04 	.word	0x20000f04

08000e40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e40:	b590      	push	{r4, r7, lr}
 8000e42:	b099      	sub	sp, #100	; 0x64
 8000e44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e46:	242c      	movs	r4, #44	; 0x2c
 8000e48:	193b      	adds	r3, r7, r4
 8000e4a:	0018      	movs	r0, r3
 8000e4c:	2334      	movs	r3, #52	; 0x34
 8000e4e:	001a      	movs	r2, r3
 8000e50:	2100      	movs	r1, #0
 8000e52:	f005 fbc5 	bl	80065e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e56:	2318      	movs	r3, #24
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	0018      	movs	r0, r3
 8000e5c:	2314      	movs	r3, #20
 8000e5e:	001a      	movs	r2, r3
 8000e60:	2100      	movs	r1, #0
 8000e62:	f005 fbbd 	bl	80065e0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e66:	003b      	movs	r3, r7
 8000e68:	0018      	movs	r0, r3
 8000e6a:	2318      	movs	r3, #24
 8000e6c:	001a      	movs	r2, r3
 8000e6e:	2100      	movs	r1, #0
 8000e70:	f005 fbb6 	bl	80065e0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e74:	4b30      	ldr	r3, [pc, #192]	; (8000f38 <SystemClock_Config+0xf8>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a30      	ldr	r2, [pc, #192]	; (8000f3c <SystemClock_Config+0xfc>)
 8000e7a:	401a      	ands	r2, r3
 8000e7c:	4b2e      	ldr	r3, [pc, #184]	; (8000f38 <SystemClock_Config+0xf8>)
 8000e7e:	2180      	movs	r1, #128	; 0x80
 8000e80:	0109      	lsls	r1, r1, #4
 8000e82:	430a      	orrs	r2, r1
 8000e84:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000e86:	0021      	movs	r1, r4
 8000e88:	187b      	adds	r3, r7, r1
 8000e8a:	220a      	movs	r2, #10
 8000e8c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e8e:	187b      	adds	r3, r7, r1
 8000e90:	2201      	movs	r2, #1
 8000e92:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e94:	187b      	adds	r3, r7, r1
 8000e96:	2210      	movs	r2, #16
 8000e98:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000e9a:	187b      	adds	r3, r7, r1
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ea0:	187b      	adds	r3, r7, r1
 8000ea2:	2202      	movs	r2, #2
 8000ea4:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ea6:	187b      	adds	r3, r7, r1
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8000eac:	187b      	adds	r3, r7, r1
 8000eae:	2280      	movs	r2, #128	; 0x80
 8000eb0:	02d2      	lsls	r2, r2, #11
 8000eb2:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000eb4:	187b      	adds	r3, r7, r1
 8000eb6:	2280      	movs	r2, #128	; 0x80
 8000eb8:	03d2      	lsls	r2, r2, #15
 8000eba:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ebc:	187b      	adds	r3, r7, r1
 8000ebe:	0018      	movs	r0, r3
 8000ec0:	f002 fd7c 	bl	80039bc <HAL_RCC_OscConfig>
 8000ec4:	1e03      	subs	r3, r0, #0
 8000ec6:	d001      	beq.n	8000ecc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000ec8:	f000 faf6 	bl	80014b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ecc:	2118      	movs	r1, #24
 8000ece:	187b      	adds	r3, r7, r1
 8000ed0:	220f      	movs	r2, #15
 8000ed2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ed4:	187b      	adds	r3, r7, r1
 8000ed6:	2203      	movs	r2, #3
 8000ed8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eda:	187b      	adds	r3, r7, r1
 8000edc:	2200      	movs	r2, #0
 8000ede:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ee0:	187b      	adds	r3, r7, r1
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ee6:	187b      	adds	r3, r7, r1
 8000ee8:	2200      	movs	r2, #0
 8000eea:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000eec:	187b      	adds	r3, r7, r1
 8000eee:	2101      	movs	r1, #1
 8000ef0:	0018      	movs	r0, r3
 8000ef2:	f003 f8df 	bl	80040b4 <HAL_RCC_ClockConfig>
 8000ef6:	1e03      	subs	r3, r0, #0
 8000ef8:	d001      	beq.n	8000efe <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000efa:	f000 fadd 	bl	80014b8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_LPUART1
 8000efe:	003b      	movs	r3, r7
 8000f00:	222e      	movs	r2, #46	; 0x2e
 8000f02:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f04:	003b      	movs	r3, r7
 8000f06:	2200      	movs	r2, #0
 8000f08:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000f0a:	003b      	movs	r3, r7
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000f10:	003b      	movs	r3, r7
 8000f12:	2200      	movs	r2, #0
 8000f14:	611a      	str	r2, [r3, #16]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000f16:	003b      	movs	r3, r7
 8000f18:	2280      	movs	r2, #128	; 0x80
 8000f1a:	0292      	lsls	r2, r2, #10
 8000f1c:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f1e:	003b      	movs	r3, r7
 8000f20:	0018      	movs	r0, r3
 8000f22:	f003 faeb 	bl	80044fc <HAL_RCCEx_PeriphCLKConfig>
 8000f26:	1e03      	subs	r3, r0, #0
 8000f28:	d001      	beq.n	8000f2e <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000f2a:	f000 fac5 	bl	80014b8 <Error_Handler>
  }
}
 8000f2e:	46c0      	nop			; (mov r8, r8)
 8000f30:	46bd      	mov	sp, r7
 8000f32:	b019      	add	sp, #100	; 0x64
 8000f34:	bd90      	pop	{r4, r7, pc}
 8000f36:	46c0      	nop			; (mov r8, r8)
 8000f38:	40007000 	.word	0x40007000
 8000f3c:	ffffe7ff 	.word	0xffffe7ff

08000f40 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f44:	4b1b      	ldr	r3, [pc, #108]	; (8000fb4 <MX_I2C1_Init+0x74>)
 8000f46:	4a1c      	ldr	r2, [pc, #112]	; (8000fb8 <MX_I2C1_Init+0x78>)
 8000f48:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000f4a:	4b1a      	ldr	r3, [pc, #104]	; (8000fb4 <MX_I2C1_Init+0x74>)
 8000f4c:	4a1b      	ldr	r2, [pc, #108]	; (8000fbc <MX_I2C1_Init+0x7c>)
 8000f4e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000f50:	4b18      	ldr	r3, [pc, #96]	; (8000fb4 <MX_I2C1_Init+0x74>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f56:	4b17      	ldr	r3, [pc, #92]	; (8000fb4 <MX_I2C1_Init+0x74>)
 8000f58:	2201      	movs	r2, #1
 8000f5a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f5c:	4b15      	ldr	r3, [pc, #84]	; (8000fb4 <MX_I2C1_Init+0x74>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f62:	4b14      	ldr	r3, [pc, #80]	; (8000fb4 <MX_I2C1_Init+0x74>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f68:	4b12      	ldr	r3, [pc, #72]	; (8000fb4 <MX_I2C1_Init+0x74>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f6e:	4b11      	ldr	r3, [pc, #68]	; (8000fb4 <MX_I2C1_Init+0x74>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f74:	4b0f      	ldr	r3, [pc, #60]	; (8000fb4 <MX_I2C1_Init+0x74>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f7a:	4b0e      	ldr	r3, [pc, #56]	; (8000fb4 <MX_I2C1_Init+0x74>)
 8000f7c:	0018      	movs	r0, r3
 8000f7e:	f001 ff29 	bl	8002dd4 <HAL_I2C_Init>
 8000f82:	1e03      	subs	r3, r0, #0
 8000f84:	d001      	beq.n	8000f8a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000f86:	f000 fa97 	bl	80014b8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f8a:	4b0a      	ldr	r3, [pc, #40]	; (8000fb4 <MX_I2C1_Init+0x74>)
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	0018      	movs	r0, r3
 8000f90:	f002 fc7c 	bl	800388c <HAL_I2CEx_ConfigAnalogFilter>
 8000f94:	1e03      	subs	r3, r0, #0
 8000f96:	d001      	beq.n	8000f9c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000f98:	f000 fa8e 	bl	80014b8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f9c:	4b05      	ldr	r3, [pc, #20]	; (8000fb4 <MX_I2C1_Init+0x74>)
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	0018      	movs	r0, r3
 8000fa2:	f002 fcbf 	bl	8003924 <HAL_I2CEx_ConfigDigitalFilter>
 8000fa6:	1e03      	subs	r3, r0, #0
 8000fa8:	d001      	beq.n	8000fae <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000faa:	f000 fa85 	bl	80014b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fae:	46c0      	nop			; (mov r8, r8)
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	200009e0 	.word	0x200009e0
 8000fb8:	40005400 	.word	0x40005400
 8000fbc:	00707cbb 	.word	0x00707cbb

08000fc0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000fc4:	4b13      	ldr	r3, [pc, #76]	; (8001014 <MX_LPUART1_UART_Init+0x54>)
 8000fc6:	4a14      	ldr	r2, [pc, #80]	; (8001018 <MX_LPUART1_UART_Init+0x58>)
 8000fc8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000fca:	4b12      	ldr	r3, [pc, #72]	; (8001014 <MX_LPUART1_UART_Init+0x54>)
 8000fcc:	4a13      	ldr	r2, [pc, #76]	; (800101c <MX_LPUART1_UART_Init+0x5c>)
 8000fce:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8000fd0:	4b10      	ldr	r3, [pc, #64]	; (8001014 <MX_LPUART1_UART_Init+0x54>)
 8000fd2:	2280      	movs	r2, #128	; 0x80
 8000fd4:	0552      	lsls	r2, r2, #21
 8000fd6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000fd8:	4b0e      	ldr	r3, [pc, #56]	; (8001014 <MX_LPUART1_UART_Init+0x54>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000fde:	4b0d      	ldr	r3, [pc, #52]	; (8001014 <MX_LPUART1_UART_Init+0x54>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000fe4:	4b0b      	ldr	r3, [pc, #44]	; (8001014 <MX_LPUART1_UART_Init+0x54>)
 8000fe6:	220c      	movs	r2, #12
 8000fe8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fea:	4b0a      	ldr	r3, [pc, #40]	; (8001014 <MX_LPUART1_UART_Init+0x54>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ff0:	4b08      	ldr	r3, [pc, #32]	; (8001014 <MX_LPUART1_UART_Init+0x54>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ff6:	4b07      	ldr	r3, [pc, #28]	; (8001014 <MX_LPUART1_UART_Init+0x54>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000ffc:	4b05      	ldr	r3, [pc, #20]	; (8001014 <MX_LPUART1_UART_Init+0x54>)
 8000ffe:	0018      	movs	r0, r3
 8001000:	f004 fe02 	bl	8005c08 <HAL_UART_Init>
 8001004:	1e03      	subs	r3, r0, #0
 8001006:	d001      	beq.n	800100c <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8001008:	f000 fa56 	bl	80014b8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800100c:	46c0      	nop			; (mov r8, r8)
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	46c0      	nop			; (mov r8, r8)
 8001014:	20000a34 	.word	0x20000a34
 8001018:	40004800 	.word	0x40004800
 800101c:	00033324 	.word	0x00033324

08001020 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001024:	4b14      	ldr	r3, [pc, #80]	; (8001078 <MX_USART2_UART_Init+0x58>)
 8001026:	4a15      	ldr	r2, [pc, #84]	; (800107c <MX_USART2_UART_Init+0x5c>)
 8001028:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800102a:	4b13      	ldr	r3, [pc, #76]	; (8001078 <MX_USART2_UART_Init+0x58>)
 800102c:	22e1      	movs	r2, #225	; 0xe1
 800102e:	0252      	lsls	r2, r2, #9
 8001030:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001032:	4b11      	ldr	r3, [pc, #68]	; (8001078 <MX_USART2_UART_Init+0x58>)
 8001034:	2200      	movs	r2, #0
 8001036:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001038:	4b0f      	ldr	r3, [pc, #60]	; (8001078 <MX_USART2_UART_Init+0x58>)
 800103a:	2200      	movs	r2, #0
 800103c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800103e:	4b0e      	ldr	r3, [pc, #56]	; (8001078 <MX_USART2_UART_Init+0x58>)
 8001040:	2200      	movs	r2, #0
 8001042:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001044:	4b0c      	ldr	r3, [pc, #48]	; (8001078 <MX_USART2_UART_Init+0x58>)
 8001046:	220c      	movs	r2, #12
 8001048:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800104a:	4b0b      	ldr	r3, [pc, #44]	; (8001078 <MX_USART2_UART_Init+0x58>)
 800104c:	2200      	movs	r2, #0
 800104e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001050:	4b09      	ldr	r3, [pc, #36]	; (8001078 <MX_USART2_UART_Init+0x58>)
 8001052:	2200      	movs	r2, #0
 8001054:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001056:	4b08      	ldr	r3, [pc, #32]	; (8001078 <MX_USART2_UART_Init+0x58>)
 8001058:	2200      	movs	r2, #0
 800105a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800105c:	4b06      	ldr	r3, [pc, #24]	; (8001078 <MX_USART2_UART_Init+0x58>)
 800105e:	2200      	movs	r2, #0
 8001060:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001062:	4b05      	ldr	r3, [pc, #20]	; (8001078 <MX_USART2_UART_Init+0x58>)
 8001064:	0018      	movs	r0, r3
 8001066:	f004 fdcf 	bl	8005c08 <HAL_UART_Init>
 800106a:	1e03      	subs	r3, r0, #0
 800106c:	d001      	beq.n	8001072 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800106e:	f000 fa23 	bl	80014b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001072:	46c0      	nop			; (mov r8, r8)
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	20000abc 	.word	0x20000abc
 800107c:	40004400 	.word	0x40004400

08001080 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001084:	4b11      	ldr	r3, [pc, #68]	; (80010cc <MX_RTC_Init+0x4c>)
 8001086:	4a12      	ldr	r2, [pc, #72]	; (80010d0 <MX_RTC_Init+0x50>)
 8001088:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800108a:	4b10      	ldr	r3, [pc, #64]	; (80010cc <MX_RTC_Init+0x4c>)
 800108c:	2200      	movs	r2, #0
 800108e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001090:	4b0e      	ldr	r3, [pc, #56]	; (80010cc <MX_RTC_Init+0x4c>)
 8001092:	227f      	movs	r2, #127	; 0x7f
 8001094:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001096:	4b0d      	ldr	r3, [pc, #52]	; (80010cc <MX_RTC_Init+0x4c>)
 8001098:	22ff      	movs	r2, #255	; 0xff
 800109a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800109c:	4b0b      	ldr	r3, [pc, #44]	; (80010cc <MX_RTC_Init+0x4c>)
 800109e:	2200      	movs	r2, #0
 80010a0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80010a2:	4b0a      	ldr	r3, [pc, #40]	; (80010cc <MX_RTC_Init+0x4c>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80010a8:	4b08      	ldr	r3, [pc, #32]	; (80010cc <MX_RTC_Init+0x4c>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80010ae:	4b07      	ldr	r3, [pc, #28]	; (80010cc <MX_RTC_Init+0x4c>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80010b4:	4b05      	ldr	r3, [pc, #20]	; (80010cc <MX_RTC_Init+0x4c>)
 80010b6:	0018      	movs	r0, r3
 80010b8:	f003 fb4c 	bl	8004754 <HAL_RTC_Init>
 80010bc:	1e03      	subs	r3, r0, #0
 80010be:	d001      	beq.n	80010c4 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 80010c0:	f000 f9fa 	bl	80014b8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80010c4:	46c0      	nop			; (mov r8, r8)
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	46c0      	nop			; (mov r8, r8)
 80010cc:	20000b44 	.word	0x20000b44
 80010d0:	40002800 	.word	0x40002800

080010d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b08a      	sub	sp, #40	; 0x28
 80010d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010da:	2318      	movs	r3, #24
 80010dc:	18fb      	adds	r3, r7, r3
 80010de:	0018      	movs	r0, r3
 80010e0:	2310      	movs	r3, #16
 80010e2:	001a      	movs	r2, r3
 80010e4:	2100      	movs	r1, #0
 80010e6:	f005 fa7b 	bl	80065e0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010ea:	2310      	movs	r3, #16
 80010ec:	18fb      	adds	r3, r7, r3
 80010ee:	0018      	movs	r0, r3
 80010f0:	2308      	movs	r3, #8
 80010f2:	001a      	movs	r2, r3
 80010f4:	2100      	movs	r1, #0
 80010f6:	f005 fa73 	bl	80065e0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010fa:	003b      	movs	r3, r7
 80010fc:	0018      	movs	r0, r3
 80010fe:	2310      	movs	r3, #16
 8001100:	001a      	movs	r2, r3
 8001102:	2100      	movs	r1, #0
 8001104:	f005 fa6c 	bl	80065e0 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001108:	4b3d      	ldr	r3, [pc, #244]	; (8001200 <MX_TIM2_Init+0x12c>)
 800110a:	2280      	movs	r2, #128	; 0x80
 800110c:	05d2      	lsls	r2, r2, #23
 800110e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3200-1;
 8001110:	4b3b      	ldr	r3, [pc, #236]	; (8001200 <MX_TIM2_Init+0x12c>)
 8001112:	4a3c      	ldr	r2, [pc, #240]	; (8001204 <MX_TIM2_Init+0x130>)
 8001114:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001116:	4b3a      	ldr	r3, [pc, #232]	; (8001200 <MX_TIM2_Init+0x12c>)
 8001118:	2200      	movs	r2, #0
 800111a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 800111c:	4b38      	ldr	r3, [pc, #224]	; (8001200 <MX_TIM2_Init+0x12c>)
 800111e:	2263      	movs	r2, #99	; 0x63
 8001120:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001122:	4b37      	ldr	r3, [pc, #220]	; (8001200 <MX_TIM2_Init+0x12c>)
 8001124:	2200      	movs	r2, #0
 8001126:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001128:	4b35      	ldr	r3, [pc, #212]	; (8001200 <MX_TIM2_Init+0x12c>)
 800112a:	2200      	movs	r2, #0
 800112c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800112e:	4b34      	ldr	r3, [pc, #208]	; (8001200 <MX_TIM2_Init+0x12c>)
 8001130:	0018      	movs	r0, r3
 8001132:	f003 fc41 	bl	80049b8 <HAL_TIM_Base_Init>
 8001136:	1e03      	subs	r3, r0, #0
 8001138:	d001      	beq.n	800113e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800113a:	f000 f9bd 	bl	80014b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800113e:	2118      	movs	r1, #24
 8001140:	187b      	adds	r3, r7, r1
 8001142:	2280      	movs	r2, #128	; 0x80
 8001144:	0152      	lsls	r2, r2, #5
 8001146:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001148:	187a      	adds	r2, r7, r1
 800114a:	4b2d      	ldr	r3, [pc, #180]	; (8001200 <MX_TIM2_Init+0x12c>)
 800114c:	0011      	movs	r1, r2
 800114e:	0018      	movs	r0, r3
 8001150:	f004 f910 	bl	8005374 <HAL_TIM_ConfigClockSource>
 8001154:	1e03      	subs	r3, r0, #0
 8001156:	d001      	beq.n	800115c <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8001158:	f000 f9ae 	bl	80014b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800115c:	4b28      	ldr	r3, [pc, #160]	; (8001200 <MX_TIM2_Init+0x12c>)
 800115e:	0018      	movs	r0, r3
 8001160:	f003 fd88 	bl	8004c74 <HAL_TIM_PWM_Init>
 8001164:	1e03      	subs	r3, r0, #0
 8001166:	d001      	beq.n	800116c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001168:	f000 f9a6 	bl	80014b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800116c:	2110      	movs	r1, #16
 800116e:	187b      	adds	r3, r7, r1
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001174:	187b      	adds	r3, r7, r1
 8001176:	2200      	movs	r2, #0
 8001178:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800117a:	187a      	adds	r2, r7, r1
 800117c:	4b20      	ldr	r3, [pc, #128]	; (8001200 <MX_TIM2_Init+0x12c>)
 800117e:	0011      	movs	r1, r2
 8001180:	0018      	movs	r0, r3
 8001182:	f004 fce9 	bl	8005b58 <HAL_TIMEx_MasterConfigSynchronization>
 8001186:	1e03      	subs	r3, r0, #0
 8001188:	d001      	beq.n	800118e <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 800118a:	f000 f995 	bl	80014b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800118e:	003b      	movs	r3, r7
 8001190:	2260      	movs	r2, #96	; 0x60
 8001192:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001194:	003b      	movs	r3, r7
 8001196:	2200      	movs	r2, #0
 8001198:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800119a:	003b      	movs	r3, r7
 800119c:	2200      	movs	r2, #0
 800119e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011a0:	003b      	movs	r3, r7
 80011a2:	2200      	movs	r2, #0
 80011a4:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011a6:	0039      	movs	r1, r7
 80011a8:	4b15      	ldr	r3, [pc, #84]	; (8001200 <MX_TIM2_Init+0x12c>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	0018      	movs	r0, r3
 80011ae:	f004 f81b 	bl	80051e8 <HAL_TIM_PWM_ConfigChannel>
 80011b2:	1e03      	subs	r3, r0, #0
 80011b4:	d001      	beq.n	80011ba <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 80011b6:	f000 f97f 	bl	80014b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80011ba:	0039      	movs	r1, r7
 80011bc:	4b10      	ldr	r3, [pc, #64]	; (8001200 <MX_TIM2_Init+0x12c>)
 80011be:	2204      	movs	r2, #4
 80011c0:	0018      	movs	r0, r3
 80011c2:	f004 f811 	bl	80051e8 <HAL_TIM_PWM_ConfigChannel>
 80011c6:	1e03      	subs	r3, r0, #0
 80011c8:	d001      	beq.n	80011ce <MX_TIM2_Init+0xfa>
  {
    Error_Handler();
 80011ca:	f000 f975 	bl	80014b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80011ce:	0039      	movs	r1, r7
 80011d0:	4b0b      	ldr	r3, [pc, #44]	; (8001200 <MX_TIM2_Init+0x12c>)
 80011d2:	2208      	movs	r2, #8
 80011d4:	0018      	movs	r0, r3
 80011d6:	f004 f807 	bl	80051e8 <HAL_TIM_PWM_ConfigChannel>
 80011da:	1e03      	subs	r3, r0, #0
 80011dc:	d001      	beq.n	80011e2 <MX_TIM2_Init+0x10e>
  {
    Error_Handler();
 80011de:	f000 f96b 	bl	80014b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80011e2:	0039      	movs	r1, r7
 80011e4:	4b06      	ldr	r3, [pc, #24]	; (8001200 <MX_TIM2_Init+0x12c>)
 80011e6:	220c      	movs	r2, #12
 80011e8:	0018      	movs	r0, r3
 80011ea:	f003 fffd 	bl	80051e8 <HAL_TIM_PWM_ConfigChannel>
 80011ee:	1e03      	subs	r3, r0, #0
 80011f0:	d001      	beq.n	80011f6 <MX_TIM2_Init+0x122>
  {
    Error_Handler();
 80011f2:	f000 f961 	bl	80014b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011f6:	46c0      	nop			; (mov r8, r8)
 80011f8:	46bd      	mov	sp, r7
 80011fa:	b00a      	add	sp, #40	; 0x28
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	46c0      	nop			; (mov r8, r8)
 8001200:	20000b68 	.word	0x20000b68
 8001204:	00000c7f 	.word	0x00000c7f

08001208 <MX_TIM21_Init>:
  * @brief TIM21 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM21_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800120e:	2308      	movs	r3, #8
 8001210:	18fb      	adds	r3, r7, r3
 8001212:	0018      	movs	r0, r3
 8001214:	2310      	movs	r3, #16
 8001216:	001a      	movs	r2, r3
 8001218:	2100      	movs	r1, #0
 800121a:	f005 f9e1 	bl	80065e0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800121e:	003b      	movs	r3, r7
 8001220:	0018      	movs	r0, r3
 8001222:	2308      	movs	r3, #8
 8001224:	001a      	movs	r2, r3
 8001226:	2100      	movs	r1, #0
 8001228:	f005 f9da 	bl	80065e0 <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 800122c:	4b1e      	ldr	r3, [pc, #120]	; (80012a8 <MX_TIM21_Init+0xa0>)
 800122e:	4a1f      	ldr	r2, [pc, #124]	; (80012ac <MX_TIM21_Init+0xa4>)
 8001230:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 32000-1;
 8001232:	4b1d      	ldr	r3, [pc, #116]	; (80012a8 <MX_TIM21_Init+0xa0>)
 8001234:	4a1e      	ldr	r2, [pc, #120]	; (80012b0 <MX_TIM21_Init+0xa8>)
 8001236:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001238:	4b1b      	ldr	r3, [pc, #108]	; (80012a8 <MX_TIM21_Init+0xa0>)
 800123a:	2200      	movs	r2, #0
 800123c:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 50-1;
 800123e:	4b1a      	ldr	r3, [pc, #104]	; (80012a8 <MX_TIM21_Init+0xa0>)
 8001240:	2231      	movs	r2, #49	; 0x31
 8001242:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001244:	4b18      	ldr	r3, [pc, #96]	; (80012a8 <MX_TIM21_Init+0xa0>)
 8001246:	2200      	movs	r2, #0
 8001248:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800124a:	4b17      	ldr	r3, [pc, #92]	; (80012a8 <MX_TIM21_Init+0xa0>)
 800124c:	2200      	movs	r2, #0
 800124e:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 8001250:	4b15      	ldr	r3, [pc, #84]	; (80012a8 <MX_TIM21_Init+0xa0>)
 8001252:	0018      	movs	r0, r3
 8001254:	f003 fbb0 	bl	80049b8 <HAL_TIM_Base_Init>
 8001258:	1e03      	subs	r3, r0, #0
 800125a:	d001      	beq.n	8001260 <MX_TIM21_Init+0x58>
  {
    Error_Handler();
 800125c:	f000 f92c 	bl	80014b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001260:	2108      	movs	r1, #8
 8001262:	187b      	adds	r3, r7, r1
 8001264:	2280      	movs	r2, #128	; 0x80
 8001266:	0152      	lsls	r2, r2, #5
 8001268:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 800126a:	187a      	adds	r2, r7, r1
 800126c:	4b0e      	ldr	r3, [pc, #56]	; (80012a8 <MX_TIM21_Init+0xa0>)
 800126e:	0011      	movs	r1, r2
 8001270:	0018      	movs	r0, r3
 8001272:	f004 f87f 	bl	8005374 <HAL_TIM_ConfigClockSource>
 8001276:	1e03      	subs	r3, r0, #0
 8001278:	d001      	beq.n	800127e <MX_TIM21_Init+0x76>
  {
    Error_Handler();
 800127a:	f000 f91d 	bl	80014b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800127e:	003b      	movs	r3, r7
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001284:	003b      	movs	r3, r7
 8001286:	2200      	movs	r2, #0
 8001288:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 800128a:	003a      	movs	r2, r7
 800128c:	4b06      	ldr	r3, [pc, #24]	; (80012a8 <MX_TIM21_Init+0xa0>)
 800128e:	0011      	movs	r1, r2
 8001290:	0018      	movs	r0, r3
 8001292:	f004 fc61 	bl	8005b58 <HAL_TIMEx_MasterConfigSynchronization>
 8001296:	1e03      	subs	r3, r0, #0
 8001298:	d001      	beq.n	800129e <MX_TIM21_Init+0x96>
  {
    Error_Handler();
 800129a:	f000 f90d 	bl	80014b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */

}
 800129e:	46c0      	nop			; (mov r8, r8)
 80012a0:	46bd      	mov	sp, r7
 80012a2:	b006      	add	sp, #24
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	46c0      	nop			; (mov r8, r8)
 80012a8:	20000ba8 	.word	0x20000ba8
 80012ac:	40010800 	.word	0x40010800
 80012b0:	00007cff 	.word	0x00007cff

080012b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012ba:	4b14      	ldr	r3, [pc, #80]	; (800130c <MX_DMA_Init+0x58>)
 80012bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012be:	4b13      	ldr	r3, [pc, #76]	; (800130c <MX_DMA_Init+0x58>)
 80012c0:	2101      	movs	r1, #1
 80012c2:	430a      	orrs	r2, r1
 80012c4:	631a      	str	r2, [r3, #48]	; 0x30
 80012c6:	4b11      	ldr	r3, [pc, #68]	; (800130c <MX_DMA_Init+0x58>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	2201      	movs	r2, #1
 80012cc:	4013      	ands	r3, r2
 80012ce:	607b      	str	r3, [r7, #4]
 80012d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 80012d2:	2200      	movs	r2, #0
 80012d4:	2102      	movs	r1, #2
 80012d6:	2009      	movs	r0, #9
 80012d8:	f001 f9cc 	bl	8002674 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80012dc:	2009      	movs	r0, #9
 80012de:	f001 f9de 	bl	800269e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 2, 0);
 80012e2:	2200      	movs	r2, #0
 80012e4:	2102      	movs	r1, #2
 80012e6:	200a      	movs	r0, #10
 80012e8:	f001 f9c4 	bl	8002674 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80012ec:	200a      	movs	r0, #10
 80012ee:	f001 f9d6 	bl	800269e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 2, 0);
 80012f2:	2200      	movs	r2, #0
 80012f4:	2102      	movs	r1, #2
 80012f6:	200b      	movs	r0, #11
 80012f8:	f001 f9bc 	bl	8002674 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 80012fc:	200b      	movs	r0, #11
 80012fe:	f001 f9ce 	bl	800269e <HAL_NVIC_EnableIRQ>

}
 8001302:	46c0      	nop			; (mov r8, r8)
 8001304:	46bd      	mov	sp, r7
 8001306:	b002      	add	sp, #8
 8001308:	bd80      	pop	{r7, pc}
 800130a:	46c0      	nop			; (mov r8, r8)
 800130c:	40021000 	.word	0x40021000

08001310 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001310:	b590      	push	{r4, r7, lr}
 8001312:	b089      	sub	sp, #36	; 0x24
 8001314:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001316:	240c      	movs	r4, #12
 8001318:	193b      	adds	r3, r7, r4
 800131a:	0018      	movs	r0, r3
 800131c:	2314      	movs	r3, #20
 800131e:	001a      	movs	r2, r3
 8001320:	2100      	movs	r1, #0
 8001322:	f005 f95d 	bl	80065e0 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001326:	4b60      	ldr	r3, [pc, #384]	; (80014a8 <MX_GPIO_Init+0x198>)
 8001328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800132a:	4b5f      	ldr	r3, [pc, #380]	; (80014a8 <MX_GPIO_Init+0x198>)
 800132c:	2104      	movs	r1, #4
 800132e:	430a      	orrs	r2, r1
 8001330:	62da      	str	r2, [r3, #44]	; 0x2c
 8001332:	4b5d      	ldr	r3, [pc, #372]	; (80014a8 <MX_GPIO_Init+0x198>)
 8001334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001336:	2204      	movs	r2, #4
 8001338:	4013      	ands	r3, r2
 800133a:	60bb      	str	r3, [r7, #8]
 800133c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800133e:	4b5a      	ldr	r3, [pc, #360]	; (80014a8 <MX_GPIO_Init+0x198>)
 8001340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001342:	4b59      	ldr	r3, [pc, #356]	; (80014a8 <MX_GPIO_Init+0x198>)
 8001344:	2101      	movs	r1, #1
 8001346:	430a      	orrs	r2, r1
 8001348:	62da      	str	r2, [r3, #44]	; 0x2c
 800134a:	4b57      	ldr	r3, [pc, #348]	; (80014a8 <MX_GPIO_Init+0x198>)
 800134c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800134e:	2201      	movs	r2, #1
 8001350:	4013      	ands	r3, r2
 8001352:	607b      	str	r3, [r7, #4]
 8001354:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001356:	4b54      	ldr	r3, [pc, #336]	; (80014a8 <MX_GPIO_Init+0x198>)
 8001358:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800135a:	4b53      	ldr	r3, [pc, #332]	; (80014a8 <MX_GPIO_Init+0x198>)
 800135c:	2102      	movs	r1, #2
 800135e:	430a      	orrs	r2, r1
 8001360:	62da      	str	r2, [r3, #44]	; 0x2c
 8001362:	4b51      	ldr	r3, [pc, #324]	; (80014a8 <MX_GPIO_Init+0x198>)
 8001364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001366:	2202      	movs	r2, #2
 8001368:	4013      	ands	r3, r2
 800136a:	603b      	str	r3, [r7, #0]
 800136c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DIMM_LED_1_Pin|DIMM_LED_2_Pin, GPIO_PIN_RESET);
 800136e:	23c0      	movs	r3, #192	; 0xc0
 8001370:	021b      	lsls	r3, r3, #8
 8001372:	484e      	ldr	r0, [pc, #312]	; (80014ac <MX_GPIO_Init+0x19c>)
 8001374:	2200      	movs	r2, #0
 8001376:	0019      	movs	r1, r3
 8001378:	f001 fcf3 	bl	8002d62 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TXS_OE_GPIO_Port, TXS_OE_Pin, GPIO_PIN_SET);
 800137c:	23a0      	movs	r3, #160	; 0xa0
 800137e:	05db      	lsls	r3, r3, #23
 8001380:	2201      	movs	r2, #1
 8001382:	2102      	movs	r1, #2
 8001384:	0018      	movs	r0, r3
 8001386:	f001 fcec 	bl	8002d62 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SHDN_170V_3V3_Pin|INS_EN_3V3_Pin|DIN_3V3_Pin|OE_3V3_Pin, GPIO_PIN_RESET);
 800138a:	23a0      	movs	r3, #160	; 0xa0
 800138c:	05db      	lsls	r3, r3, #23
 800138e:	2200      	movs	r2, #0
 8001390:	21f0      	movs	r1, #240	; 0xf0
 8001392:	0018      	movs	r0, r3
 8001394:	f001 fce5 	bl	8002d62 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RCK_3V3_Pin|SCK_3V3_Pin, GPIO_PIN_RESET);
 8001398:	4b45      	ldr	r3, [pc, #276]	; (80014b0 <MX_GPIO_Init+0x1a0>)
 800139a:	2200      	movs	r2, #0
 800139c:	2103      	movs	r1, #3
 800139e:	0018      	movs	r0, r3
 80013a0:	f001 fcdf 	bl	8002d62 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIMM_LED_1_Pin DIMM_LED_2_Pin */
  GPIO_InitStruct.Pin = DIMM_LED_1_Pin|DIMM_LED_2_Pin;
 80013a4:	193b      	adds	r3, r7, r4
 80013a6:	22c0      	movs	r2, #192	; 0xc0
 80013a8:	0212      	lsls	r2, r2, #8
 80013aa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ac:	193b      	adds	r3, r7, r4
 80013ae:	2201      	movs	r2, #1
 80013b0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	193b      	adds	r3, r7, r4
 80013b4:	2200      	movs	r2, #0
 80013b6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b8:	193b      	adds	r3, r7, r4
 80013ba:	2200      	movs	r2, #0
 80013bc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013be:	193b      	adds	r3, r7, r4
 80013c0:	4a3a      	ldr	r2, [pc, #232]	; (80014ac <MX_GPIO_Init+0x19c>)
 80013c2:	0019      	movs	r1, r3
 80013c4:	0010      	movs	r0, r2
 80013c6:	f001 fb41 	bl	8002a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_4_Pin INT_SQW_Pin INT_OPT_Pin JDY_STAT_Pin
                           JDY_PWRC_Pin */
  GPIO_InitStruct.Pin = BTN_4_Pin|INT_SQW_Pin|INT_OPT_Pin|JDY_STAT_Pin
 80013ca:	193b      	adds	r3, r7, r4
 80013cc:	4a39      	ldr	r2, [pc, #228]	; (80014b4 <MX_GPIO_Init+0x1a4>)
 80013ce:	601a      	str	r2, [r3, #0]
                          |JDY_PWRC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013d0:	193b      	adds	r3, r7, r4
 80013d2:	2200      	movs	r2, #0
 80013d4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d6:	193b      	adds	r3, r7, r4
 80013d8:	2200      	movs	r2, #0
 80013da:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013dc:	193a      	adds	r2, r7, r4
 80013de:	23a0      	movs	r3, #160	; 0xa0
 80013e0:	05db      	lsls	r3, r3, #23
 80013e2:	0011      	movs	r1, r2
 80013e4:	0018      	movs	r0, r3
 80013e6:	f001 fb31 	bl	8002a4c <HAL_GPIO_Init>

  /*Configure GPIO pin : TXS_OE_Pin */
  GPIO_InitStruct.Pin = TXS_OE_Pin;
 80013ea:	193b      	adds	r3, r7, r4
 80013ec:	2202      	movs	r2, #2
 80013ee:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f0:	193b      	adds	r3, r7, r4
 80013f2:	2201      	movs	r2, #1
 80013f4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013f6:	193b      	adds	r3, r7, r4
 80013f8:	2201      	movs	r2, #1
 80013fa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fc:	193b      	adds	r3, r7, r4
 80013fe:	2200      	movs	r2, #0
 8001400:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(TXS_OE_GPIO_Port, &GPIO_InitStruct);
 8001402:	193a      	adds	r2, r7, r4
 8001404:	23a0      	movs	r3, #160	; 0xa0
 8001406:	05db      	lsls	r3, r3, #23
 8001408:	0011      	movs	r1, r2
 800140a:	0018      	movs	r0, r3
 800140c:	f001 fb1e 	bl	8002a4c <HAL_GPIO_Init>

  /*Configure GPIO pin : SHDN_170V_3V3_Pin */
  GPIO_InitStruct.Pin = SHDN_170V_3V3_Pin;
 8001410:	193b      	adds	r3, r7, r4
 8001412:	2210      	movs	r2, #16
 8001414:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001416:	193b      	adds	r3, r7, r4
 8001418:	2201      	movs	r2, #1
 800141a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800141c:	193b      	adds	r3, r7, r4
 800141e:	2202      	movs	r2, #2
 8001420:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001422:	193b      	adds	r3, r7, r4
 8001424:	2200      	movs	r2, #0
 8001426:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SHDN_170V_3V3_GPIO_Port, &GPIO_InitStruct);
 8001428:	193a      	adds	r2, r7, r4
 800142a:	23a0      	movs	r3, #160	; 0xa0
 800142c:	05db      	lsls	r3, r3, #23
 800142e:	0011      	movs	r1, r2
 8001430:	0018      	movs	r0, r3
 8001432:	f001 fb0b 	bl	8002a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : INS_EN_3V3_Pin DIN_3V3_Pin OE_3V3_Pin */
  GPIO_InitStruct.Pin = INS_EN_3V3_Pin|DIN_3V3_Pin|OE_3V3_Pin;
 8001436:	193b      	adds	r3, r7, r4
 8001438:	22e0      	movs	r2, #224	; 0xe0
 800143a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800143c:	193b      	adds	r3, r7, r4
 800143e:	2201      	movs	r2, #1
 8001440:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001442:	193b      	adds	r3, r7, r4
 8001444:	2200      	movs	r2, #0
 8001446:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001448:	193b      	adds	r3, r7, r4
 800144a:	2203      	movs	r2, #3
 800144c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800144e:	193a      	adds	r2, r7, r4
 8001450:	23a0      	movs	r3, #160	; 0xa0
 8001452:	05db      	lsls	r3, r3, #23
 8001454:	0011      	movs	r1, r2
 8001456:	0018      	movs	r0, r3
 8001458:	f001 faf8 	bl	8002a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : RCK_3V3_Pin SCK_3V3_Pin */
  GPIO_InitStruct.Pin = RCK_3V3_Pin|SCK_3V3_Pin;
 800145c:	193b      	adds	r3, r7, r4
 800145e:	2203      	movs	r2, #3
 8001460:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001462:	193b      	adds	r3, r7, r4
 8001464:	2201      	movs	r2, #1
 8001466:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001468:	193b      	adds	r3, r7, r4
 800146a:	2200      	movs	r2, #0
 800146c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800146e:	193b      	adds	r3, r7, r4
 8001470:	2203      	movs	r2, #3
 8001472:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001474:	193b      	adds	r3, r7, r4
 8001476:	4a0e      	ldr	r2, [pc, #56]	; (80014b0 <MX_GPIO_Init+0x1a0>)
 8001478:	0019      	movs	r1, r3
 800147a:	0010      	movs	r0, r2
 800147c:	f001 fae6 	bl	8002a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_3_Pin BTN_2_Pin BTN_1_Pin */
  GPIO_InitStruct.Pin = BTN_3_Pin|BTN_2_Pin|BTN_1_Pin;
 8001480:	0021      	movs	r1, r4
 8001482:	187b      	adds	r3, r7, r1
 8001484:	2238      	movs	r2, #56	; 0x38
 8001486:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001488:	187b      	adds	r3, r7, r1
 800148a:	2200      	movs	r2, #0
 800148c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148e:	187b      	adds	r3, r7, r1
 8001490:	2200      	movs	r2, #0
 8001492:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001494:	187b      	adds	r3, r7, r1
 8001496:	4a06      	ldr	r2, [pc, #24]	; (80014b0 <MX_GPIO_Init+0x1a0>)
 8001498:	0019      	movs	r1, r3
 800149a:	0010      	movs	r0, r2
 800149c:	f001 fad6 	bl	8002a4c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014a0:	46c0      	nop			; (mov r8, r8)
 80014a2:	46bd      	mov	sp, r7
 80014a4:	b009      	add	sp, #36	; 0x24
 80014a6:	bd90      	pop	{r4, r7, pc}
 80014a8:	40021000 	.word	0x40021000
 80014ac:	50000800 	.word	0x50000800
 80014b0:	50000400 	.word	0x50000400
 80014b4:	00009901 	.word	0x00009901

080014b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014bc:	b672      	cpsid	i
}
 80014be:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014c0:	e7fe      	b.n	80014c0 <Error_Handler+0x8>
	...

080014c4 <init_items_hierarchy_horizontal>:
//		item_goto(PREVIOUS);
//	}
}


static inline void init_items_hierarchy_horizontal(void) {
 80014c4:	b590      	push	{r4, r7, lr}
 80014c6:	b085      	sub	sp, #20
 80014c8:	af00      	add	r7, sp, #0
	ItemType selected 	= 1;
 80014ca:	230f      	movs	r3, #15
 80014cc:	18fb      	adds	r3, r7, r3
 80014ce:	2201      	movs	r2, #1
 80014d0:	701a      	strb	r2, [r3, #0]
	ItemType first_item = 0;
 80014d2:	230e      	movs	r3, #14
 80014d4:	18fb      	adds	r3, r7, r3
 80014d6:	2200      	movs	r2, #0
 80014d8:	701a      	strb	r2, [r3, #0]
	/*
	 * For each menu we need to find ID of the next item
	 * We iterate through each item and compare it's menu type with selected menu type
	 * If it's a match, then write this item as the next
	 */
	for(MenuType target_menu = 0; target_menu < NUM_OF_MENUS; ++target_menu) {
 80014da:	230d      	movs	r3, #13
 80014dc:	18fb      	adds	r3, r7, r3
 80014de:	2200      	movs	r2, #0
 80014e0:	701a      	strb	r2, [r3, #0]
 80014e2:	e055      	b.n	8001590 <init_items_hierarchy_horizontal+0xcc>
		for(ItemType i = 0; i < NUM_OF_ITEMS; ++i) {
 80014e4:	230c      	movs	r3, #12
 80014e6:	18fb      	adds	r3, r7, r3
 80014e8:	2200      	movs	r2, #0
 80014ea:	701a      	strb	r2, [r3, #0]
 80014ec:	e032      	b.n	8001554 <init_items_hierarchy_horizontal+0x90>
			if(items[i].menu == target_menu) {
 80014ee:	4b40      	ldr	r3, [pc, #256]	; (80015f0 <init_items_hierarchy_horizontal+0x12c>)
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	200c      	movs	r0, #12
 80014f4:	183b      	adds	r3, r7, r0
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	21d0      	movs	r1, #208	; 0xd0
 80014fa:	434b      	muls	r3, r1
 80014fc:	18d3      	adds	r3, r2, r3
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	220d      	movs	r2, #13
 8001502:	18ba      	adds	r2, r7, r2
 8001504:	7812      	ldrb	r2, [r2, #0]
 8001506:	429a      	cmp	r2, r3
 8001508:	d11e      	bne.n	8001548 <init_items_hierarchy_horizontal+0x84>
				/*
				 * Find the first item in list
				 * if it was not set earlier (item == 0)
				 * And break the current iteration of the cycle
				 */
				if(first_item == 0) {
 800150a:	210e      	movs	r1, #14
 800150c:	187b      	adds	r3, r7, r1
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d109      	bne.n	8001528 <init_items_hierarchy_horizontal+0x64>
					first_item = selected = i;
 8001514:	240f      	movs	r4, #15
 8001516:	193b      	adds	r3, r7, r4
 8001518:	183a      	adds	r2, r7, r0
 800151a:	7812      	ldrb	r2, [r2, #0]
 800151c:	701a      	strb	r2, [r3, #0]
 800151e:	187b      	adds	r3, r7, r1
 8001520:	193a      	adds	r2, r7, r4
 8001522:	7812      	ldrb	r2, [r2, #0]
 8001524:	701a      	strb	r2, [r3, #0]
					continue;
 8001526:	e00f      	b.n	8001548 <init_items_hierarchy_horizontal+0x84>
				}

				/*
				 * Find the next
				 */
				items[selected].next = i;
 8001528:	4b31      	ldr	r3, [pc, #196]	; (80015f0 <init_items_hierarchy_horizontal+0x12c>)
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	200f      	movs	r0, #15
 800152e:	183b      	adds	r3, r7, r0
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	21d0      	movs	r1, #208	; 0xd0
 8001534:	434b      	muls	r3, r1
 8001536:	18d3      	adds	r3, r2, r3
 8001538:	210c      	movs	r1, #12
 800153a:	187a      	adds	r2, r7, r1
 800153c:	7812      	ldrb	r2, [r2, #0]
 800153e:	725a      	strb	r2, [r3, #9]
				selected = i;
 8001540:	183b      	adds	r3, r7, r0
 8001542:	187a      	adds	r2, r7, r1
 8001544:	7812      	ldrb	r2, [r2, #0]
 8001546:	701a      	strb	r2, [r3, #0]
		for(ItemType i = 0; i < NUM_OF_ITEMS; ++i) {
 8001548:	220c      	movs	r2, #12
 800154a:	18bb      	adds	r3, r7, r2
 800154c:	18ba      	adds	r2, r7, r2
 800154e:	7812      	ldrb	r2, [r2, #0]
 8001550:	3201      	adds	r2, #1
 8001552:	701a      	strb	r2, [r3, #0]
 8001554:	230c      	movs	r3, #12
 8001556:	18fb      	adds	r3, r7, r3
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	2b0a      	cmp	r3, #10
 800155c:	d9c7      	bls.n	80014ee <init_items_hierarchy_horizontal+0x2a>
			}
		}
		/*
		 * Also assign the last value to be the first one
		 */
		items[selected].next = first_item;
 800155e:	4b24      	ldr	r3, [pc, #144]	; (80015f0 <init_items_hierarchy_horizontal+0x12c>)
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	200f      	movs	r0, #15
 8001564:	183b      	adds	r3, r7, r0
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	21d0      	movs	r1, #208	; 0xd0
 800156a:	434b      	muls	r3, r1
 800156c:	18d3      	adds	r3, r2, r3
 800156e:	210e      	movs	r1, #14
 8001570:	187a      	adds	r2, r7, r1
 8001572:	7812      	ldrb	r2, [r2, #0]
 8001574:	725a      	strb	r2, [r3, #9]

		/*
		 * Reset values before searching in the next menu
		 */
		selected = first_item = 0;
 8001576:	187b      	adds	r3, r7, r1
 8001578:	2200      	movs	r2, #0
 800157a:	701a      	strb	r2, [r3, #0]
 800157c:	183b      	adds	r3, r7, r0
 800157e:	187a      	adds	r2, r7, r1
 8001580:	7812      	ldrb	r2, [r2, #0]
 8001582:	701a      	strb	r2, [r3, #0]
	for(MenuType target_menu = 0; target_menu < NUM_OF_MENUS; ++target_menu) {
 8001584:	220d      	movs	r2, #13
 8001586:	18bb      	adds	r3, r7, r2
 8001588:	18ba      	adds	r2, r7, r2
 800158a:	7812      	ldrb	r2, [r2, #0]
 800158c:	3201      	adds	r2, #1
 800158e:	701a      	strb	r2, [r3, #0]
 8001590:	230d      	movs	r3, #13
 8001592:	18fb      	adds	r3, r7, r3
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	2b02      	cmp	r3, #2
 8001598:	d9a4      	bls.n	80014e4 <init_items_hierarchy_horizontal+0x20>
	}

	/*
	 * To find previous item we need to simply find the array index
	 */
	for(int current = 1; current < NUM_OF_ITEMS; ++current) {
 800159a:	2301      	movs	r3, #1
 800159c:	60bb      	str	r3, [r7, #8]
 800159e:	e01f      	b.n	80015e0 <init_items_hierarchy_horizontal+0x11c>
		for(int prev = 1; prev < NUM_OF_ITEMS; ++prev) {
 80015a0:	2301      	movs	r3, #1
 80015a2:	607b      	str	r3, [r7, #4]
 80015a4:	e016      	b.n	80015d4 <init_items_hierarchy_horizontal+0x110>
			if(items[prev].next == current)
 80015a6:	4b12      	ldr	r3, [pc, #72]	; (80015f0 <init_items_hierarchy_horizontal+0x12c>)
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	21d0      	movs	r1, #208	; 0xd0
 80015ae:	434b      	muls	r3, r1
 80015b0:	18d3      	adds	r3, r2, r3
 80015b2:	7a5b      	ldrb	r3, [r3, #9]
 80015b4:	001a      	movs	r2, r3
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d108      	bne.n	80015ce <init_items_hierarchy_horizontal+0x10a>
				items[current].prev = prev;
 80015bc:	4b0c      	ldr	r3, [pc, #48]	; (80015f0 <init_items_hierarchy_horizontal+0x12c>)
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	21d0      	movs	r1, #208	; 0xd0
 80015c4:	434b      	muls	r3, r1
 80015c6:	18d3      	adds	r3, r2, r3
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	b2d2      	uxtb	r2, r2
 80015cc:	721a      	strb	r2, [r3, #8]
		for(int prev = 1; prev < NUM_OF_ITEMS; ++prev) {
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	3301      	adds	r3, #1
 80015d2:	607b      	str	r3, [r7, #4]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2b0a      	cmp	r3, #10
 80015d8:	dde5      	ble.n	80015a6 <init_items_hierarchy_horizontal+0xe2>
	for(int current = 1; current < NUM_OF_ITEMS; ++current) {
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	3301      	adds	r3, #1
 80015de:	60bb      	str	r3, [r7, #8]
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	2b0a      	cmp	r3, #10
 80015e4:	dddc      	ble.n	80015a0 <init_items_hierarchy_horizontal+0xdc>
		}
	}
}
 80015e6:	46c0      	nop			; (mov r8, r8)
 80015e8:	46c0      	nop			; (mov r8, r8)
 80015ea:	46bd      	mov	sp, r7
 80015ec:	b005      	add	sp, #20
 80015ee:	bd90      	pop	{r4, r7, pc}
 80015f0:	20000f00 	.word	0x20000f00

080015f4 <init_menu_items>:
////	item_parent[ITEM_GRID_9] 				= ITEM_MARK_TYPE;
////	item_parent[ITEM_BAD_PIXELS_FIX_AUTO] 	= ITEM_BAD_PIXELS_FIX_ENTER;
////	item_parent[ITEM_SETTINGS_EXIT] 		= ITEM_SETTINGS_ENTER;
//}

void init_menu_items(Menu_HandleTypeDef* user_menu, Item_TypeDef* user_items, uint16_t number_of_menus, uint16_t number_of_items) {
 80015f4:	b590      	push	{r4, r7, lr}
 80015f6:	b087      	sub	sp, #28
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	60b9      	str	r1, [r7, #8]
 80015fe:	0019      	movs	r1, r3
 8001600:	1dbb      	adds	r3, r7, #6
 8001602:	801a      	strh	r2, [r3, #0]
 8001604:	1d3b      	adds	r3, r7, #4
 8001606:	1c0a      	adds	r2, r1, #0
 8001608:	801a      	strh	r2, [r3, #0]
	assert_param(user_hmenu == NULL);
	assert_param(user_items == NULL);

	menu 				= user_menu;
 800160a:	4b2f      	ldr	r3, [pc, #188]	; (80016c8 <init_menu_items+0xd4>)
 800160c:	68fa      	ldr	r2, [r7, #12]
 800160e:	601a      	str	r2, [r3, #0]
	items 				= user_items;
 8001610:	4b2e      	ldr	r3, [pc, #184]	; (80016cc <init_menu_items+0xd8>)
 8001612:	68ba      	ldr	r2, [r7, #8]
 8001614:	601a      	str	r2, [r3, #0]
//	num_of_menus		= number_of_menus;

//	menu->current_item 	= FW_VERSION; // Show FW version and compile date on start

//	init_items_hierarchy_vertical	();
	init_items_hierarchy_horizontal	();
 8001616:	f7ff ff55 	bl	80014c4 <init_items_hierarchy_horizontal>

	init_menu_functions();
 800161a:	f000 f9a5 	bl	8001968 <init_menu_functions>

	volatile HAL_StatusTypeDef status = 0;
 800161e:	2417      	movs	r4, #23
 8001620:	193b      	adds	r3, r7, r4
 8001622:	2200      	movs	r2, #0
 8001624:	701a      	strb	r2, [r3, #0]
	status = HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t *)&duty_cycles[0], 1);
 8001626:	4a2a      	ldr	r2, [pc, #168]	; (80016d0 <init_menu_items+0xdc>)
 8001628:	482a      	ldr	r0, [pc, #168]	; (80016d4 <init_menu_items+0xe0>)
 800162a:	2301      	movs	r3, #1
 800162c:	2100      	movs	r1, #0
 800162e:	f003 fb69 	bl	8004d04 <HAL_TIM_PWM_Start_DMA>
 8001632:	0003      	movs	r3, r0
 8001634:	001a      	movs	r2, r3
 8001636:	193b      	adds	r3, r7, r4
 8001638:	701a      	strb	r2, [r3, #0]
	status = HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_2, (uint32_t *)&duty_cycles[1], 1);
 800163a:	4a27      	ldr	r2, [pc, #156]	; (80016d8 <init_menu_items+0xe4>)
 800163c:	4825      	ldr	r0, [pc, #148]	; (80016d4 <init_menu_items+0xe0>)
 800163e:	2301      	movs	r3, #1
 8001640:	2104      	movs	r1, #4
 8001642:	f003 fb5f 	bl	8004d04 <HAL_TIM_PWM_Start_DMA>
 8001646:	0003      	movs	r3, r0
 8001648:	001a      	movs	r2, r3
 800164a:	193b      	adds	r3, r7, r4
 800164c:	701a      	strb	r2, [r3, #0]
	status = HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_3, (uint32_t *)&duty_cycles[2], 1);
 800164e:	4a23      	ldr	r2, [pc, #140]	; (80016dc <init_menu_items+0xe8>)
 8001650:	4820      	ldr	r0, [pc, #128]	; (80016d4 <init_menu_items+0xe0>)
 8001652:	2301      	movs	r3, #1
 8001654:	2108      	movs	r1, #8
 8001656:	f003 fb55 	bl	8004d04 <HAL_TIM_PWM_Start_DMA>
 800165a:	0003      	movs	r3, r0
 800165c:	001a      	movs	r2, r3
 800165e:	193b      	adds	r3, r7, r4
 8001660:	701a      	strb	r2, [r3, #0]
	status = HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_4, (uint32_t *)&duty_cycles[3], 1);
 8001662:	4a1f      	ldr	r2, [pc, #124]	; (80016e0 <init_menu_items+0xec>)
 8001664:	481b      	ldr	r0, [pc, #108]	; (80016d4 <init_menu_items+0xe0>)
 8001666:	2301      	movs	r3, #1
 8001668:	210c      	movs	r1, #12
 800166a:	f003 fb4b 	bl	8004d04 <HAL_TIM_PWM_Start_DMA>
 800166e:	0003      	movs	r3, r0
 8001670:	001a      	movs	r2, r3
 8001672:	193b      	adds	r3, r7, r4
 8001674:	701a      	strb	r2, [r3, #0]

	status = HAL_TIM_Base_Start_IT(&htim2);
 8001676:	4b17      	ldr	r3, [pc, #92]	; (80016d4 <init_menu_items+0xe0>)
 8001678:	0018      	movs	r0, r3
 800167a:	f003 f9dd 	bl	8004a38 <HAL_TIM_Base_Start_IT>
 800167e:	0003      	movs	r3, r0
 8001680:	001a      	movs	r2, r3
 8001682:	193b      	adds	r3, r7, r4
 8001684:	701a      	strb	r2, [r3, #0]

	menu->current_item = HOURS_MINUTES;
 8001686:	4b10      	ldr	r3, [pc, #64]	; (80016c8 <init_menu_items+0xd4>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	2205      	movs	r2, #5
 800168c:	711a      	strb	r2, [r3, #4]

	 tubes_data_source_set(&(items[menu->current_item].numbers[0]), &(items[menu->current_item].numbers[1]));
 800168e:	4b0f      	ldr	r3, [pc, #60]	; (80016cc <init_menu_items+0xd8>)
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	4b0d      	ldr	r3, [pc, #52]	; (80016c8 <init_menu_items+0xd4>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	791b      	ldrb	r3, [r3, #4]
 8001698:	0019      	movs	r1, r3
 800169a:	23d0      	movs	r3, #208	; 0xd0
 800169c:	434b      	muls	r3, r1
 800169e:	18d3      	adds	r3, r2, r3
 80016a0:	330a      	adds	r3, #10
 80016a2:	0018      	movs	r0, r3
 80016a4:	4b09      	ldr	r3, [pc, #36]	; (80016cc <init_menu_items+0xd8>)
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	4b07      	ldr	r3, [pc, #28]	; (80016c8 <init_menu_items+0xd4>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	791b      	ldrb	r3, [r3, #4]
 80016ae:	0019      	movs	r1, r3
 80016b0:	23d0      	movs	r3, #208	; 0xd0
 80016b2:	434b      	muls	r3, r1
 80016b4:	18d3      	adds	r3, r2, r3
 80016b6:	330c      	adds	r3, #12
 80016b8:	0019      	movs	r1, r3
 80016ba:	f7ff f87b 	bl	80007b4 <tubes_data_source_set>
}
 80016be:	46c0      	nop			; (mov r8, r8)
 80016c0:	46bd      	mov	sp, r7
 80016c2:	b007      	add	sp, #28
 80016c4:	bd90      	pop	{r4, r7, pc}
 80016c6:	46c0      	nop			; (mov r8, r8)
 80016c8:	20000efc 	.word	0x20000efc
 80016cc:	20000f00 	.word	0x20000f00
 80016d0:	20000948 	.word	0x20000948
 80016d4:	20000b68 	.word	0x20000b68
 80016d8:	20000949 	.word	0x20000949
 80016dc:	2000094a 	.word	0x2000094a
 80016e0:	2000094b 	.word	0x2000094b

080016e4 <item_goto_prev>:

void item_goto_prev(void) {
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
	menu->current_item = items[menu->current_item].prev;
 80016e8:	4b07      	ldr	r3, [pc, #28]	; (8001708 <item_goto_prev+0x24>)
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	4b07      	ldr	r3, [pc, #28]	; (800170c <item_goto_prev+0x28>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	791b      	ldrb	r3, [r3, #4]
 80016f2:	0019      	movs	r1, r3
 80016f4:	23d0      	movs	r3, #208	; 0xd0
 80016f6:	434b      	muls	r3, r1
 80016f8:	18d2      	adds	r2, r2, r3
 80016fa:	4b04      	ldr	r3, [pc, #16]	; (800170c <item_goto_prev+0x28>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	7a12      	ldrb	r2, [r2, #8]
 8001700:	711a      	strb	r2, [r3, #4]
}
 8001702:	46c0      	nop			; (mov r8, r8)
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	20000f00 	.word	0x20000f00
 800170c:	20000efc 	.word	0x20000efc

08001710 <item_goto_next>:

void item_goto_next(void) {
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
	menu->current_item = items[menu->current_item].next;
 8001714:	4b07      	ldr	r3, [pc, #28]	; (8001734 <item_goto_next+0x24>)
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	4b07      	ldr	r3, [pc, #28]	; (8001738 <item_goto_next+0x28>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	791b      	ldrb	r3, [r3, #4]
 800171e:	0019      	movs	r1, r3
 8001720:	23d0      	movs	r3, #208	; 0xd0
 8001722:	434b      	muls	r3, r1
 8001724:	18d2      	adds	r2, r2, r3
 8001726:	4b04      	ldr	r3, [pc, #16]	; (8001738 <item_goto_next+0x28>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	7a52      	ldrb	r2, [r2, #9]
 800172c:	711a      	strb	r2, [r3, #4]
}
 800172e:	46c0      	nop			; (mov r8, r8)
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	20000f00 	.word	0x20000f00
 8001738:	20000efc 	.word	0x20000efc

0800173c <item_selection_cycle>:
void item_selection_cycle(void) {
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
	menu->is_selected = menu->is_selected < NUM_OF_SELECTIONS-1 ? menu->is_selected + 1 : 0;
 8001740:	4b2b      	ldr	r3, [pc, #172]	; (80017f0 <item_selection_cycle+0xb4>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	795b      	ldrb	r3, [r3, #5]
 8001746:	2b01      	cmp	r3, #1
 8001748:	d805      	bhi.n	8001756 <item_selection_cycle+0x1a>
 800174a:	4b29      	ldr	r3, [pc, #164]	; (80017f0 <item_selection_cycle+0xb4>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	795b      	ldrb	r3, [r3, #5]
 8001750:	3301      	adds	r3, #1
 8001752:	b2da      	uxtb	r2, r3
 8001754:	e000      	b.n	8001758 <item_selection_cycle+0x1c>
 8001756:	2200      	movs	r2, #0
 8001758:	4b25      	ldr	r3, [pc, #148]	; (80017f0 <item_selection_cycle+0xb4>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	715a      	strb	r2, [r3, #5]
	switch (menu->is_selected) {
 800175e:	4b24      	ldr	r3, [pc, #144]	; (80017f0 <item_selection_cycle+0xb4>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	795b      	ldrb	r3, [r3, #5]
 8001764:	2b02      	cmp	r3, #2
 8001766:	d02b      	beq.n	80017c0 <item_selection_cycle+0x84>
 8001768:	dc3d      	bgt.n	80017e6 <item_selection_cycle+0xaa>
 800176a:	2b00      	cmp	r3, #0
 800176c:	d002      	beq.n	8001774 <item_selection_cycle+0x38>
 800176e:	2b01      	cmp	r3, #1
 8001770:	d013      	beq.n	800179a <item_selection_cycle+0x5e>
			menu->is_selected = DESELECTED;
			duty_cycles[0] = duty_cycles[1] = 90;
			duty_cycles[2] = duty_cycles[3] = 90;
			break;
		default:
			break;
 8001772:	e038      	b.n	80017e6 <item_selection_cycle+0xaa>
			menu->is_selected = SELECTED_FIRST_NUM;
 8001774:	4b1e      	ldr	r3, [pc, #120]	; (80017f0 <item_selection_cycle+0xb4>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2201      	movs	r2, #1
 800177a:	715a      	strb	r2, [r3, #5]
			duty_cycles[0] = duty_cycles[1] = 90;
 800177c:	4b1d      	ldr	r3, [pc, #116]	; (80017f4 <item_selection_cycle+0xb8>)
 800177e:	225a      	movs	r2, #90	; 0x5a
 8001780:	705a      	strb	r2, [r3, #1]
 8001782:	4b1c      	ldr	r3, [pc, #112]	; (80017f4 <item_selection_cycle+0xb8>)
 8001784:	785a      	ldrb	r2, [r3, #1]
 8001786:	4b1b      	ldr	r3, [pc, #108]	; (80017f4 <item_selection_cycle+0xb8>)
 8001788:	701a      	strb	r2, [r3, #0]
			duty_cycles[2] = duty_cycles[3] = 30;
 800178a:	4b1a      	ldr	r3, [pc, #104]	; (80017f4 <item_selection_cycle+0xb8>)
 800178c:	221e      	movs	r2, #30
 800178e:	70da      	strb	r2, [r3, #3]
 8001790:	4b18      	ldr	r3, [pc, #96]	; (80017f4 <item_selection_cycle+0xb8>)
 8001792:	78da      	ldrb	r2, [r3, #3]
 8001794:	4b17      	ldr	r3, [pc, #92]	; (80017f4 <item_selection_cycle+0xb8>)
 8001796:	709a      	strb	r2, [r3, #2]
			break;
 8001798:	e026      	b.n	80017e8 <item_selection_cycle+0xac>
			menu->is_selected = SELECTED_SECOND_NUM;
 800179a:	4b15      	ldr	r3, [pc, #84]	; (80017f0 <item_selection_cycle+0xb4>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2202      	movs	r2, #2
 80017a0:	715a      	strb	r2, [r3, #5]
			duty_cycles[0] = duty_cycles[1] = 30;
 80017a2:	4b14      	ldr	r3, [pc, #80]	; (80017f4 <item_selection_cycle+0xb8>)
 80017a4:	221e      	movs	r2, #30
 80017a6:	705a      	strb	r2, [r3, #1]
 80017a8:	4b12      	ldr	r3, [pc, #72]	; (80017f4 <item_selection_cycle+0xb8>)
 80017aa:	785a      	ldrb	r2, [r3, #1]
 80017ac:	4b11      	ldr	r3, [pc, #68]	; (80017f4 <item_selection_cycle+0xb8>)
 80017ae:	701a      	strb	r2, [r3, #0]
			duty_cycles[2] = duty_cycles[3] = 90;
 80017b0:	4b10      	ldr	r3, [pc, #64]	; (80017f4 <item_selection_cycle+0xb8>)
 80017b2:	225a      	movs	r2, #90	; 0x5a
 80017b4:	70da      	strb	r2, [r3, #3]
 80017b6:	4b0f      	ldr	r3, [pc, #60]	; (80017f4 <item_selection_cycle+0xb8>)
 80017b8:	78da      	ldrb	r2, [r3, #3]
 80017ba:	4b0e      	ldr	r3, [pc, #56]	; (80017f4 <item_selection_cycle+0xb8>)
 80017bc:	709a      	strb	r2, [r3, #2]
			break;
 80017be:	e013      	b.n	80017e8 <item_selection_cycle+0xac>
			menu->is_selected = DESELECTED;
 80017c0:	4b0b      	ldr	r3, [pc, #44]	; (80017f0 <item_selection_cycle+0xb4>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2200      	movs	r2, #0
 80017c6:	715a      	strb	r2, [r3, #5]
			duty_cycles[0] = duty_cycles[1] = 90;
 80017c8:	4b0a      	ldr	r3, [pc, #40]	; (80017f4 <item_selection_cycle+0xb8>)
 80017ca:	225a      	movs	r2, #90	; 0x5a
 80017cc:	705a      	strb	r2, [r3, #1]
 80017ce:	4b09      	ldr	r3, [pc, #36]	; (80017f4 <item_selection_cycle+0xb8>)
 80017d0:	785a      	ldrb	r2, [r3, #1]
 80017d2:	4b08      	ldr	r3, [pc, #32]	; (80017f4 <item_selection_cycle+0xb8>)
 80017d4:	701a      	strb	r2, [r3, #0]
			duty_cycles[2] = duty_cycles[3] = 90;
 80017d6:	4b07      	ldr	r3, [pc, #28]	; (80017f4 <item_selection_cycle+0xb8>)
 80017d8:	225a      	movs	r2, #90	; 0x5a
 80017da:	70da      	strb	r2, [r3, #3]
 80017dc:	4b05      	ldr	r3, [pc, #20]	; (80017f4 <item_selection_cycle+0xb8>)
 80017de:	78da      	ldrb	r2, [r3, #3]
 80017e0:	4b04      	ldr	r3, [pc, #16]	; (80017f4 <item_selection_cycle+0xb8>)
 80017e2:	709a      	strb	r2, [r3, #2]
			break;
 80017e4:	e000      	b.n	80017e8 <item_selection_cycle+0xac>
			break;
 80017e6:	46c0      	nop			; (mov r8, r8)
	}
}
 80017e8:	46c0      	nop			; (mov r8, r8)
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	46c0      	nop			; (mov r8, r8)
 80017f0:	20000efc 	.word	0x20000efc
 80017f4:	20000948 	.word	0x20000948

080017f8 <hours_decrease>:

void hours_decrease(void) {
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
	items[HOURS_MINUTES].numbers[0] = items[HOURS_MINUTES].numbers[0] > 0 ? items[HOURS_MINUTES].numbers[0] - 1 : 23;
 80017fc:	4b14      	ldr	r3, [pc, #80]	; (8001850 <hours_decrease+0x58>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2282      	movs	r2, #130	; 0x82
 8001802:	00d2      	lsls	r2, r2, #3
 8001804:	4694      	mov	ip, r2
 8001806:	4463      	add	r3, ip
 8001808:	895b      	ldrh	r3, [r3, #10]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d009      	beq.n	8001822 <hours_decrease+0x2a>
 800180e:	4b10      	ldr	r3, [pc, #64]	; (8001850 <hours_decrease+0x58>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	2282      	movs	r2, #130	; 0x82
 8001814:	00d2      	lsls	r2, r2, #3
 8001816:	4694      	mov	ip, r2
 8001818:	4463      	add	r3, ip
 800181a:	895b      	ldrh	r3, [r3, #10]
 800181c:	3b01      	subs	r3, #1
 800181e:	b29a      	uxth	r2, r3
 8001820:	e000      	b.n	8001824 <hours_decrease+0x2c>
 8001822:	2217      	movs	r2, #23
 8001824:	4b0a      	ldr	r3, [pc, #40]	; (8001850 <hours_decrease+0x58>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2182      	movs	r1, #130	; 0x82
 800182a:	00c9      	lsls	r1, r1, #3
 800182c:	468c      	mov	ip, r1
 800182e:	4463      	add	r3, ip
 8001830:	815a      	strh	r2, [r3, #10]
	DS3231_SetHour((uint8_t)items[HOURS_MINUTES].numbers[0]);
 8001832:	4b07      	ldr	r3, [pc, #28]	; (8001850 <hours_decrease+0x58>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2282      	movs	r2, #130	; 0x82
 8001838:	00d2      	lsls	r2, r2, #3
 800183a:	4694      	mov	ip, r2
 800183c:	4463      	add	r3, ip
 800183e:	895b      	ldrh	r3, [r3, #10]
 8001840:	b2db      	uxtb	r3, r3
 8001842:	0018      	movs	r0, r3
 8001844:	f000 fd3c 	bl	80022c0 <DS3231_SetHour>
}
 8001848:	46c0      	nop			; (mov r8, r8)
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	46c0      	nop			; (mov r8, r8)
 8001850:	20000f00 	.word	0x20000f00

08001854 <hours_increase>:
void hours_increase(void) {
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
	items[HOURS_MINUTES].numbers[0] = items[HOURS_MINUTES].numbers[0] < 23 ? items[HOURS_MINUTES].numbers[0] + 1 : 0;
 8001858:	4b14      	ldr	r3, [pc, #80]	; (80018ac <hours_increase+0x58>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2282      	movs	r2, #130	; 0x82
 800185e:	00d2      	lsls	r2, r2, #3
 8001860:	4694      	mov	ip, r2
 8001862:	4463      	add	r3, ip
 8001864:	895b      	ldrh	r3, [r3, #10]
 8001866:	2b16      	cmp	r3, #22
 8001868:	d809      	bhi.n	800187e <hours_increase+0x2a>
 800186a:	4b10      	ldr	r3, [pc, #64]	; (80018ac <hours_increase+0x58>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	2282      	movs	r2, #130	; 0x82
 8001870:	00d2      	lsls	r2, r2, #3
 8001872:	4694      	mov	ip, r2
 8001874:	4463      	add	r3, ip
 8001876:	895b      	ldrh	r3, [r3, #10]
 8001878:	3301      	adds	r3, #1
 800187a:	b29a      	uxth	r2, r3
 800187c:	e000      	b.n	8001880 <hours_increase+0x2c>
 800187e:	2200      	movs	r2, #0
 8001880:	4b0a      	ldr	r3, [pc, #40]	; (80018ac <hours_increase+0x58>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2182      	movs	r1, #130	; 0x82
 8001886:	00c9      	lsls	r1, r1, #3
 8001888:	468c      	mov	ip, r1
 800188a:	4463      	add	r3, ip
 800188c:	815a      	strh	r2, [r3, #10]
	DS3231_SetHour((uint8_t)items[HOURS_MINUTES].numbers[0]);
 800188e:	4b07      	ldr	r3, [pc, #28]	; (80018ac <hours_increase+0x58>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	2282      	movs	r2, #130	; 0x82
 8001894:	00d2      	lsls	r2, r2, #3
 8001896:	4694      	mov	ip, r2
 8001898:	4463      	add	r3, ip
 800189a:	895b      	ldrh	r3, [r3, #10]
 800189c:	b2db      	uxtb	r3, r3
 800189e:	0018      	movs	r0, r3
 80018a0:	f000 fd0e 	bl	80022c0 <DS3231_SetHour>
}
 80018a4:	46c0      	nop			; (mov r8, r8)
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	46c0      	nop			; (mov r8, r8)
 80018ac:	20000f00 	.word	0x20000f00

080018b0 <minutes_decrease>:
void minutes_decrease(void) {
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
	items[HOURS_MINUTES].numbers[1] = items[HOURS_MINUTES].numbers[1] > 0 ? items[HOURS_MINUTES].numbers[1] - 1 : 59;
 80018b4:	4b14      	ldr	r3, [pc, #80]	; (8001908 <minutes_decrease+0x58>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2282      	movs	r2, #130	; 0x82
 80018ba:	00d2      	lsls	r2, r2, #3
 80018bc:	4694      	mov	ip, r2
 80018be:	4463      	add	r3, ip
 80018c0:	899b      	ldrh	r3, [r3, #12]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d009      	beq.n	80018da <minutes_decrease+0x2a>
 80018c6:	4b10      	ldr	r3, [pc, #64]	; (8001908 <minutes_decrease+0x58>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2282      	movs	r2, #130	; 0x82
 80018cc:	00d2      	lsls	r2, r2, #3
 80018ce:	4694      	mov	ip, r2
 80018d0:	4463      	add	r3, ip
 80018d2:	899b      	ldrh	r3, [r3, #12]
 80018d4:	3b01      	subs	r3, #1
 80018d6:	b29a      	uxth	r2, r3
 80018d8:	e000      	b.n	80018dc <minutes_decrease+0x2c>
 80018da:	223b      	movs	r2, #59	; 0x3b
 80018dc:	4b0a      	ldr	r3, [pc, #40]	; (8001908 <minutes_decrease+0x58>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2182      	movs	r1, #130	; 0x82
 80018e2:	00c9      	lsls	r1, r1, #3
 80018e4:	468c      	mov	ip, r1
 80018e6:	4463      	add	r3, ip
 80018e8:	819a      	strh	r2, [r3, #12]
	DS3231_SetMinute((uint8_t)items[HOURS_MINUTES].numbers[1]);
 80018ea:	4b07      	ldr	r3, [pc, #28]	; (8001908 <minutes_decrease+0x58>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2282      	movs	r2, #130	; 0x82
 80018f0:	00d2      	lsls	r2, r2, #3
 80018f2:	4694      	mov	ip, r2
 80018f4:	4463      	add	r3, ip
 80018f6:	899b      	ldrh	r3, [r3, #12]
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	0018      	movs	r0, r3
 80018fc:	f000 fcf7 	bl	80022ee <DS3231_SetMinute>
}
 8001900:	46c0      	nop			; (mov r8, r8)
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	46c0      	nop			; (mov r8, r8)
 8001908:	20000f00 	.word	0x20000f00

0800190c <minutes_increase>:
void minutes_increase(void) {
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
	items[HOURS_MINUTES].numbers[1] = items[HOURS_MINUTES].numbers[1] < 59 ? items[HOURS_MINUTES].numbers[1] + 1 : 0;
 8001910:	4b14      	ldr	r3, [pc, #80]	; (8001964 <minutes_increase+0x58>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	2282      	movs	r2, #130	; 0x82
 8001916:	00d2      	lsls	r2, r2, #3
 8001918:	4694      	mov	ip, r2
 800191a:	4463      	add	r3, ip
 800191c:	899b      	ldrh	r3, [r3, #12]
 800191e:	2b3a      	cmp	r3, #58	; 0x3a
 8001920:	d809      	bhi.n	8001936 <minutes_increase+0x2a>
 8001922:	4b10      	ldr	r3, [pc, #64]	; (8001964 <minutes_increase+0x58>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	2282      	movs	r2, #130	; 0x82
 8001928:	00d2      	lsls	r2, r2, #3
 800192a:	4694      	mov	ip, r2
 800192c:	4463      	add	r3, ip
 800192e:	899b      	ldrh	r3, [r3, #12]
 8001930:	3301      	adds	r3, #1
 8001932:	b29a      	uxth	r2, r3
 8001934:	e000      	b.n	8001938 <minutes_increase+0x2c>
 8001936:	2200      	movs	r2, #0
 8001938:	4b0a      	ldr	r3, [pc, #40]	; (8001964 <minutes_increase+0x58>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2182      	movs	r1, #130	; 0x82
 800193e:	00c9      	lsls	r1, r1, #3
 8001940:	468c      	mov	ip, r1
 8001942:	4463      	add	r3, ip
 8001944:	819a      	strh	r2, [r3, #12]
	DS3231_SetMinute((uint8_t)items[HOURS_MINUTES].numbers[1]);
 8001946:	4b07      	ldr	r3, [pc, #28]	; (8001964 <minutes_increase+0x58>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	2282      	movs	r2, #130	; 0x82
 800194c:	00d2      	lsls	r2, r2, #3
 800194e:	4694      	mov	ip, r2
 8001950:	4463      	add	r3, ip
 8001952:	899b      	ldrh	r3, [r3, #12]
 8001954:	b2db      	uxtb	r3, r3
 8001956:	0018      	movs	r0, r3
 8001958:	f000 fcc9 	bl	80022ee <DS3231_SetMinute>
}
 800195c:	46c0      	nop			; (mov r8, r8)
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	46c0      	nop			; (mov r8, r8)
 8001964:	20000f00 	.word	0x20000f00

08001968 <init_menu_functions>:

void init_menu_functions(void) {
 8001968:	b590      	push	{r4, r7, lr}
 800196a:	b085      	sub	sp, #20
 800196c:	af00      	add	r7, sp, #0
	for(int item = 0; item < NUM_OF_ITEMS; ++item) {
 800196e:	2300      	movs	r3, #0
 8001970:	60fb      	str	r3, [r7, #12]
 8001972:	e065      	b.n	8001a40 <init_menu_functions+0xd8>
		for(int mask = 0; mask < NUM_OF_BTN_COMBINATIONS; ++mask) {
 8001974:	2300      	movs	r3, #0
 8001976:	60bb      	str	r3, [r7, #8]
 8001978:	e02a      	b.n	80019d0 <init_menu_functions+0x68>
			for(int press = 0; press < NUM_OF_PRESS_TYPES; ++press) {
 800197a:	2300      	movs	r3, #0
 800197c:	607b      	str	r3, [r7, #4]
 800197e:	e021      	b.n	80019c4 <init_menu_functions+0x5c>
				for(int selection = 0; selection < NUM_OF_SELECTIONS; ++selection) {
 8001980:	2300      	movs	r3, #0
 8001982:	603b      	str	r3, [r7, #0]
 8001984:	e018      	b.n	80019b8 <init_menu_functions+0x50>
					logic[item][mask][press][selection] 	= NULL;
 8001986:	4c3b      	ldr	r4, [pc, #236]	; (8001a74 <init_menu_functions+0x10c>)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	68b9      	ldr	r1, [r7, #8]
 800198c:	68f8      	ldr	r0, [r7, #12]
 800198e:	001a      	movs	r2, r3
 8001990:	0052      	lsls	r2, r2, #1
 8001992:	18d2      	adds	r2, r2, r3
 8001994:	0003      	movs	r3, r0
 8001996:	005b      	lsls	r3, r3, #1
 8001998:	181b      	adds	r3, r3, r0
 800199a:	011b      	lsls	r3, r3, #4
 800199c:	18d2      	adds	r2, r2, r3
 800199e:	000b      	movs	r3, r1
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	185b      	adds	r3, r3, r1
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	18d2      	adds	r2, r2, r3
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	18d3      	adds	r3, r2, r3
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	2200      	movs	r2, #0
 80019b0:	511a      	str	r2, [r3, r4]
				for(int selection = 0; selection < NUM_OF_SELECTIONS; ++selection) {
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	3301      	adds	r3, #1
 80019b6:	603b      	str	r3, [r7, #0]
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	dde3      	ble.n	8001986 <init_menu_functions+0x1e>
			for(int press = 0; press < NUM_OF_PRESS_TYPES; ++press) {
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	3301      	adds	r3, #1
 80019c2:	607b      	str	r3, [r7, #4]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	ddda      	ble.n	8001980 <init_menu_functions+0x18>
		for(int mask = 0; mask < NUM_OF_BTN_COMBINATIONS; ++mask) {
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	3301      	adds	r3, #1
 80019ce:	60bb      	str	r3, [r7, #8]
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	2b07      	cmp	r3, #7
 80019d4:	ddd1      	ble.n	800197a <init_menu_functions+0x12>
				}
			}
		}

		logic[item][MASK_LEFT]	[CLICK][DESELECTED] = item_goto_prev; // Goes to a previous item when "is_selected == 0" and decreases parameter
 80019d6:	4927      	ldr	r1, [pc, #156]	; (8001a74 <init_menu_functions+0x10c>)
 80019d8:	68fa      	ldr	r2, [r7, #12]
 80019da:	0013      	movs	r3, r2
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	189b      	adds	r3, r3, r2
 80019e0:	019b      	lsls	r3, r3, #6
 80019e2:	18cb      	adds	r3, r1, r3
 80019e4:	3318      	adds	r3, #24
 80019e6:	4a24      	ldr	r2, [pc, #144]	; (8001a78 <init_menu_functions+0x110>)
 80019e8:	601a      	str	r2, [r3, #0]
		logic[item][MASK_RIGHT]	[CLICK][DESELECTED] = item_goto_next; // Goes to a previous item when "is_selected == 0" and decreases parameter
 80019ea:	4922      	ldr	r1, [pc, #136]	; (8001a74 <init_menu_functions+0x10c>)
 80019ec:	68fa      	ldr	r2, [r7, #12]
 80019ee:	0013      	movs	r3, r2
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	189b      	adds	r3, r3, r2
 80019f4:	019b      	lsls	r3, r3, #6
 80019f6:	18cb      	adds	r3, r1, r3
 80019f8:	3360      	adds	r3, #96	; 0x60
 80019fa:	4a20      	ldr	r2, [pc, #128]	; (8001a7c <init_menu_functions+0x114>)
 80019fc:	601a      	str	r2, [r3, #0]
//		logic[item][MASK_RIGHT]	[CLICK] = increase_parameter;
		logic[item][MASK_ENTER]	[CLICK][DESELECTED] = item_selection_cycle;
 80019fe:	491d      	ldr	r1, [pc, #116]	; (8001a74 <init_menu_functions+0x10c>)
 8001a00:	68fa      	ldr	r2, [r7, #12]
 8001a02:	0013      	movs	r3, r2
 8001a04:	005b      	lsls	r3, r3, #1
 8001a06:	189b      	adds	r3, r3, r2
 8001a08:	019b      	lsls	r3, r3, #6
 8001a0a:	18cb      	adds	r3, r1, r3
 8001a0c:	3330      	adds	r3, #48	; 0x30
 8001a0e:	4a1c      	ldr	r2, [pc, #112]	; (8001a80 <init_menu_functions+0x118>)
 8001a10:	601a      	str	r2, [r3, #0]
		logic[item][MASK_ENTER]	[CLICK][SELECTED_FIRST_NUM] = item_selection_cycle;
 8001a12:	4918      	ldr	r1, [pc, #96]	; (8001a74 <init_menu_functions+0x10c>)
 8001a14:	68fa      	ldr	r2, [r7, #12]
 8001a16:	0013      	movs	r3, r2
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	189b      	adds	r3, r3, r2
 8001a1c:	019b      	lsls	r3, r3, #6
 8001a1e:	18cb      	adds	r3, r1, r3
 8001a20:	3334      	adds	r3, #52	; 0x34
 8001a22:	4a17      	ldr	r2, [pc, #92]	; (8001a80 <init_menu_functions+0x118>)
 8001a24:	601a      	str	r2, [r3, #0]
		logic[item][MASK_ENTER]	[CLICK][SELECTED_SECOND_NUM] = item_selection_cycle;
 8001a26:	4913      	ldr	r1, [pc, #76]	; (8001a74 <init_menu_functions+0x10c>)
 8001a28:	68fa      	ldr	r2, [r7, #12]
 8001a2a:	0013      	movs	r3, r2
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	189b      	adds	r3, r3, r2
 8001a30:	019b      	lsls	r3, r3, #6
 8001a32:	18cb      	adds	r3, r1, r3
 8001a34:	3338      	adds	r3, #56	; 0x38
 8001a36:	4a12      	ldr	r2, [pc, #72]	; (8001a80 <init_menu_functions+0x118>)
 8001a38:	601a      	str	r2, [r3, #0]
	for(int item = 0; item < NUM_OF_ITEMS; ++item) {
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	60fb      	str	r3, [r7, #12]
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2b0a      	cmp	r3, #10
 8001a44:	dd96      	ble.n	8001974 <init_menu_functions+0xc>
//		logic[item][MASK_ENTER]	[HOLD] 	= confirm_parameter_value;
	}

	logic[HOURS_MINUTES][MASK_LEFT]	[CLICK][SELECTED_FIRST_NUM] = hours_decrease; // Goes to a previous item when "is_selected == 0" and decreases parameter
 8001a46:	4a0b      	ldr	r2, [pc, #44]	; (8001a74 <init_menu_functions+0x10c>)
 8001a48:	23f7      	movs	r3, #247	; 0xf7
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	490d      	ldr	r1, [pc, #52]	; (8001a84 <init_menu_functions+0x11c>)
 8001a4e:	50d1      	str	r1, [r2, r3]
	logic[HOURS_MINUTES][MASK_RIGHT][CLICK][SELECTED_FIRST_NUM] = hours_increase;
 8001a50:	4b08      	ldr	r3, [pc, #32]	; (8001a74 <init_menu_functions+0x10c>)
 8001a52:	490d      	ldr	r1, [pc, #52]	; (8001a88 <init_menu_functions+0x120>)
 8001a54:	4a0d      	ldr	r2, [pc, #52]	; (8001a8c <init_menu_functions+0x124>)
 8001a56:	505a      	str	r2, [r3, r1]
	logic[HOURS_MINUTES][MASK_LEFT]	[CLICK][SELECTED_SECOND_NUM] = minutes_decrease; // Goes to a previous item when "is_selected == 0" and decreases parameter
 8001a58:	4a06      	ldr	r2, [pc, #24]	; (8001a74 <init_menu_functions+0x10c>)
 8001a5a:	23f8      	movs	r3, #248	; 0xf8
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	490c      	ldr	r1, [pc, #48]	; (8001a90 <init_menu_functions+0x128>)
 8001a60:	50d1      	str	r1, [r2, r3]
	logic[HOURS_MINUTES][MASK_RIGHT][CLICK][SELECTED_SECOND_NUM] = minutes_increase;
 8001a62:	4a04      	ldr	r2, [pc, #16]	; (8001a74 <init_menu_functions+0x10c>)
 8001a64:	2385      	movs	r3, #133	; 0x85
 8001a66:	00db      	lsls	r3, r3, #3
 8001a68:	490a      	ldr	r1, [pc, #40]	; (8001a94 <init_menu_functions+0x12c>)
 8001a6a:	50d1      	str	r1, [r2, r3]
}
 8001a6c:	46c0      	nop			; (mov r8, r8)
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	b005      	add	sp, #20
 8001a72:	bd90      	pop	{r4, r7, pc}
 8001a74:	20000f04 	.word	0x20000f04
 8001a78:	080016e5 	.word	0x080016e5
 8001a7c:	08001711 	.word	0x08001711
 8001a80:	0800173d 	.word	0x0800173d
 8001a84:	080017f9 	.word	0x080017f9
 8001a88:	00000424 	.word	0x00000424
 8001a8c:	08001855 	.word	0x08001855
 8001a90:	080018b1 	.word	0x080018b1
 8001a94:	0800190d 	.word	0x0800190d

08001a98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a9c:	4b07      	ldr	r3, [pc, #28]	; (8001abc <HAL_MspInit+0x24>)
 8001a9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001aa0:	4b06      	ldr	r3, [pc, #24]	; (8001abc <HAL_MspInit+0x24>)
 8001aa2:	2101      	movs	r1, #1
 8001aa4:	430a      	orrs	r2, r1
 8001aa6:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aa8:	4b04      	ldr	r3, [pc, #16]	; (8001abc <HAL_MspInit+0x24>)
 8001aaa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001aac:	4b03      	ldr	r3, [pc, #12]	; (8001abc <HAL_MspInit+0x24>)
 8001aae:	2180      	movs	r1, #128	; 0x80
 8001ab0:	0549      	lsls	r1, r1, #21
 8001ab2:	430a      	orrs	r2, r1
 8001ab4:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ab6:	46c0      	nop			; (mov r8, r8)
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	40021000 	.word	0x40021000

08001ac0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ac0:	b590      	push	{r4, r7, lr}
 8001ac2:	b089      	sub	sp, #36	; 0x24
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac8:	240c      	movs	r4, #12
 8001aca:	193b      	adds	r3, r7, r4
 8001acc:	0018      	movs	r0, r3
 8001ace:	2314      	movs	r3, #20
 8001ad0:	001a      	movs	r2, r3
 8001ad2:	2100      	movs	r1, #0
 8001ad4:	f004 fd84 	bl	80065e0 <memset>
  if(hi2c->Instance==I2C1)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a18      	ldr	r2, [pc, #96]	; (8001b40 <HAL_I2C_MspInit+0x80>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d12a      	bne.n	8001b38 <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ae2:	4b18      	ldr	r3, [pc, #96]	; (8001b44 <HAL_I2C_MspInit+0x84>)
 8001ae4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ae6:	4b17      	ldr	r3, [pc, #92]	; (8001b44 <HAL_I2C_MspInit+0x84>)
 8001ae8:	2101      	movs	r1, #1
 8001aea:	430a      	orrs	r2, r1
 8001aec:	62da      	str	r2, [r3, #44]	; 0x2c
 8001aee:	4b15      	ldr	r3, [pc, #84]	; (8001b44 <HAL_I2C_MspInit+0x84>)
 8001af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af2:	2201      	movs	r2, #1
 8001af4:	4013      	ands	r3, r2
 8001af6:	60bb      	str	r3, [r7, #8]
 8001af8:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001afa:	193b      	adds	r3, r7, r4
 8001afc:	22c0      	movs	r2, #192	; 0xc0
 8001afe:	00d2      	lsls	r2, r2, #3
 8001b00:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b02:	0021      	movs	r1, r4
 8001b04:	187b      	adds	r3, r7, r1
 8001b06:	2212      	movs	r2, #18
 8001b08:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0a:	187b      	adds	r3, r7, r1
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b10:	187b      	adds	r3, r7, r1
 8001b12:	2203      	movs	r2, #3
 8001b14:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8001b16:	187b      	adds	r3, r7, r1
 8001b18:	2201      	movs	r2, #1
 8001b1a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b1c:	187a      	adds	r2, r7, r1
 8001b1e:	23a0      	movs	r3, #160	; 0xa0
 8001b20:	05db      	lsls	r3, r3, #23
 8001b22:	0011      	movs	r1, r2
 8001b24:	0018      	movs	r0, r3
 8001b26:	f000 ff91 	bl	8002a4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b2a:	4b06      	ldr	r3, [pc, #24]	; (8001b44 <HAL_I2C_MspInit+0x84>)
 8001b2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b2e:	4b05      	ldr	r3, [pc, #20]	; (8001b44 <HAL_I2C_MspInit+0x84>)
 8001b30:	2180      	movs	r1, #128	; 0x80
 8001b32:	0389      	lsls	r1, r1, #14
 8001b34:	430a      	orrs	r2, r1
 8001b36:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001b38:	46c0      	nop			; (mov r8, r8)
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	b009      	add	sp, #36	; 0x24
 8001b3e:	bd90      	pop	{r4, r7, pc}
 8001b40:	40005400 	.word	0x40005400
 8001b44:	40021000 	.word	0x40021000

08001b48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b48:	b590      	push	{r4, r7, lr}
 8001b4a:	b08b      	sub	sp, #44	; 0x2c
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b50:	2414      	movs	r4, #20
 8001b52:	193b      	adds	r3, r7, r4
 8001b54:	0018      	movs	r0, r3
 8001b56:	2314      	movs	r3, #20
 8001b58:	001a      	movs	r2, r3
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	f004 fd40 	bl	80065e0 <memset>
  if(huart->Instance==LPUART1)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a2f      	ldr	r2, [pc, #188]	; (8001c24 <HAL_UART_MspInit+0xdc>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d12a      	bne.n	8001bc0 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001b6a:	4b2f      	ldr	r3, [pc, #188]	; (8001c28 <HAL_UART_MspInit+0xe0>)
 8001b6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b6e:	4b2e      	ldr	r3, [pc, #184]	; (8001c28 <HAL_UART_MspInit+0xe0>)
 8001b70:	2180      	movs	r1, #128	; 0x80
 8001b72:	02c9      	lsls	r1, r1, #11
 8001b74:	430a      	orrs	r2, r1
 8001b76:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b78:	4b2b      	ldr	r3, [pc, #172]	; (8001c28 <HAL_UART_MspInit+0xe0>)
 8001b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b7c:	4b2a      	ldr	r3, [pc, #168]	; (8001c28 <HAL_UART_MspInit+0xe0>)
 8001b7e:	2101      	movs	r1, #1
 8001b80:	430a      	orrs	r2, r1
 8001b82:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b84:	4b28      	ldr	r3, [pc, #160]	; (8001c28 <HAL_UART_MspInit+0xe0>)
 8001b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b88:	2201      	movs	r2, #1
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	613b      	str	r3, [r7, #16]
 8001b8e:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001b90:	0021      	movs	r1, r4
 8001b92:	187b      	adds	r3, r7, r1
 8001b94:	220c      	movs	r2, #12
 8001b96:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b98:	187b      	adds	r3, r7, r1
 8001b9a:	2202      	movs	r2, #2
 8001b9c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9e:	187b      	adds	r3, r7, r1
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ba4:	187b      	adds	r3, r7, r1
 8001ba6:	2203      	movs	r2, #3
 8001ba8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8001baa:	187b      	adds	r3, r7, r1
 8001bac:	2206      	movs	r2, #6
 8001bae:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bb0:	187a      	adds	r2, r7, r1
 8001bb2:	23a0      	movs	r3, #160	; 0xa0
 8001bb4:	05db      	lsls	r3, r3, #23
 8001bb6:	0011      	movs	r1, r2
 8001bb8:	0018      	movs	r0, r3
 8001bba:	f000 ff47 	bl	8002a4c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001bbe:	e02d      	b.n	8001c1c <HAL_UART_MspInit+0xd4>
  else if(huart->Instance==USART2)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a19      	ldr	r2, [pc, #100]	; (8001c2c <HAL_UART_MspInit+0xe4>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d128      	bne.n	8001c1c <HAL_UART_MspInit+0xd4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bca:	4b17      	ldr	r3, [pc, #92]	; (8001c28 <HAL_UART_MspInit+0xe0>)
 8001bcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001bce:	4b16      	ldr	r3, [pc, #88]	; (8001c28 <HAL_UART_MspInit+0xe0>)
 8001bd0:	2180      	movs	r1, #128	; 0x80
 8001bd2:	0289      	lsls	r1, r1, #10
 8001bd4:	430a      	orrs	r2, r1
 8001bd6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bd8:	4b13      	ldr	r3, [pc, #76]	; (8001c28 <HAL_UART_MspInit+0xe0>)
 8001bda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bdc:	4b12      	ldr	r3, [pc, #72]	; (8001c28 <HAL_UART_MspInit+0xe0>)
 8001bde:	2102      	movs	r1, #2
 8001be0:	430a      	orrs	r2, r1
 8001be2:	62da      	str	r2, [r3, #44]	; 0x2c
 8001be4:	4b10      	ldr	r3, [pc, #64]	; (8001c28 <HAL_UART_MspInit+0xe0>)
 8001be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be8:	2202      	movs	r2, #2
 8001bea:	4013      	ands	r3, r2
 8001bec:	60fb      	str	r3, [r7, #12]
 8001bee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001bf0:	2114      	movs	r1, #20
 8001bf2:	187b      	adds	r3, r7, r1
 8001bf4:	22c0      	movs	r2, #192	; 0xc0
 8001bf6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf8:	187b      	adds	r3, r7, r1
 8001bfa:	2202      	movs	r2, #2
 8001bfc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfe:	187b      	adds	r3, r7, r1
 8001c00:	2200      	movs	r2, #0
 8001c02:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c04:	187b      	adds	r3, r7, r1
 8001c06:	2203      	movs	r2, #3
 8001c08:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART2;
 8001c0a:	187b      	adds	r3, r7, r1
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c10:	187b      	adds	r3, r7, r1
 8001c12:	4a07      	ldr	r2, [pc, #28]	; (8001c30 <HAL_UART_MspInit+0xe8>)
 8001c14:	0019      	movs	r1, r3
 8001c16:	0010      	movs	r0, r2
 8001c18:	f000 ff18 	bl	8002a4c <HAL_GPIO_Init>
}
 8001c1c:	46c0      	nop			; (mov r8, r8)
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	b00b      	add	sp, #44	; 0x2c
 8001c22:	bd90      	pop	{r4, r7, pc}
 8001c24:	40004800 	.word	0x40004800
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	40004400 	.word	0x40004400
 8001c30:	50000400 	.word	0x50000400

08001c34 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a06      	ldr	r2, [pc, #24]	; (8001c5c <HAL_RTC_MspInit+0x28>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d106      	bne.n	8001c54 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001c46:	4b06      	ldr	r3, [pc, #24]	; (8001c60 <HAL_RTC_MspInit+0x2c>)
 8001c48:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c4a:	4b05      	ldr	r3, [pc, #20]	; (8001c60 <HAL_RTC_MspInit+0x2c>)
 8001c4c:	2180      	movs	r1, #128	; 0x80
 8001c4e:	02c9      	lsls	r1, r1, #11
 8001c50:	430a      	orrs	r2, r1
 8001c52:	651a      	str	r2, [r3, #80]	; 0x50
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001c54:	46c0      	nop			; (mov r8, r8)
 8001c56:	46bd      	mov	sp, r7
 8001c58:	b002      	add	sp, #8
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	40002800 	.word	0x40002800
 8001c60:	40021000 	.word	0x40021000

08001c64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	2380      	movs	r3, #128	; 0x80
 8001c72:	05db      	lsls	r3, r3, #23
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d000      	beq.n	8001c7a <HAL_TIM_Base_MspInit+0x16>
 8001c78:	e0b6      	b.n	8001de8 <HAL_TIM_Base_MspInit+0x184>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c7a:	4b67      	ldr	r3, [pc, #412]	; (8001e18 <HAL_TIM_Base_MspInit+0x1b4>)
 8001c7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c7e:	4b66      	ldr	r3, [pc, #408]	; (8001e18 <HAL_TIM_Base_MspInit+0x1b4>)
 8001c80:	2101      	movs	r1, #1
 8001c82:	430a      	orrs	r2, r1
 8001c84:	639a      	str	r2, [r3, #56]	; 0x38

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 8001c86:	4b65      	ldr	r3, [pc, #404]	; (8001e1c <HAL_TIM_Base_MspInit+0x1b8>)
 8001c88:	4a65      	ldr	r2, [pc, #404]	; (8001e20 <HAL_TIM_Base_MspInit+0x1bc>)
 8001c8a:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_8;
 8001c8c:	4b63      	ldr	r3, [pc, #396]	; (8001e1c <HAL_TIM_Base_MspInit+0x1b8>)
 8001c8e:	2208      	movs	r2, #8
 8001c90:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c92:	4b62      	ldr	r3, [pc, #392]	; (8001e1c <HAL_TIM_Base_MspInit+0x1b8>)
 8001c94:	2210      	movs	r2, #16
 8001c96:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c98:	4b60      	ldr	r3, [pc, #384]	; (8001e1c <HAL_TIM_Base_MspInit+0x1b8>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_DISABLE;
 8001c9e:	4b5f      	ldr	r3, [pc, #380]	; (8001e1c <HAL_TIM_Base_MspInit+0x1b8>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ca4:	4b5d      	ldr	r3, [pc, #372]	; (8001e1c <HAL_TIM_Base_MspInit+0x1b8>)
 8001ca6:	2280      	movs	r2, #128	; 0x80
 8001ca8:	0052      	lsls	r2, r2, #1
 8001caa:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001cac:	4b5b      	ldr	r3, [pc, #364]	; (8001e1c <HAL_TIM_Base_MspInit+0x1b8>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8001cb2:	4b5a      	ldr	r3, [pc, #360]	; (8001e1c <HAL_TIM_Base_MspInit+0x1b8>)
 8001cb4:	2220      	movs	r2, #32
 8001cb6:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001cb8:	4b58      	ldr	r3, [pc, #352]	; (8001e1c <HAL_TIM_Base_MspInit+0x1b8>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8001cbe:	4b57      	ldr	r3, [pc, #348]	; (8001e1c <HAL_TIM_Base_MspInit+0x1b8>)
 8001cc0:	0018      	movs	r0, r3
 8001cc2:	f000 fd09 	bl	80026d8 <HAL_DMA_Init>
 8001cc6:	1e03      	subs	r3, r0, #0
 8001cc8:	d001      	beq.n	8001cce <HAL_TIM_Base_MspInit+0x6a>
    {
      Error_Handler();
 8001cca:	f7ff fbf5 	bl	80014b8 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a52      	ldr	r2, [pc, #328]	; (8001e1c <HAL_TIM_Base_MspInit+0x1b8>)
 8001cd2:	621a      	str	r2, [r3, #32]
 8001cd4:	4b51      	ldr	r3, [pc, #324]	; (8001e1c <HAL_TIM_Base_MspInit+0x1b8>)
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	629a      	str	r2, [r3, #40]	; 0x28

    /* TIM2_CH2 Init */
    hdma_tim2_ch2.Instance = DMA1_Channel3;
 8001cda:	4b52      	ldr	r3, [pc, #328]	; (8001e24 <HAL_TIM_Base_MspInit+0x1c0>)
 8001cdc:	4a52      	ldr	r2, [pc, #328]	; (8001e28 <HAL_TIM_Base_MspInit+0x1c4>)
 8001cde:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2.Init.Request = DMA_REQUEST_8;
 8001ce0:	4b50      	ldr	r3, [pc, #320]	; (8001e24 <HAL_TIM_Base_MspInit+0x1c0>)
 8001ce2:	2208      	movs	r2, #8
 8001ce4:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ce6:	4b4f      	ldr	r3, [pc, #316]	; (8001e24 <HAL_TIM_Base_MspInit+0x1c0>)
 8001ce8:	2210      	movs	r2, #16
 8001cea:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cec:	4b4d      	ldr	r3, [pc, #308]	; (8001e24 <HAL_TIM_Base_MspInit+0x1c0>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2.Init.MemInc = DMA_MINC_DISABLE;
 8001cf2:	4b4c      	ldr	r3, [pc, #304]	; (8001e24 <HAL_TIM_Base_MspInit+0x1c0>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001cf8:	4b4a      	ldr	r3, [pc, #296]	; (8001e24 <HAL_TIM_Base_MspInit+0x1c0>)
 8001cfa:	2280      	movs	r2, #128	; 0x80
 8001cfc:	0052      	lsls	r2, r2, #1
 8001cfe:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d00:	4b48      	ldr	r3, [pc, #288]	; (8001e24 <HAL_TIM_Base_MspInit+0x1c0>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2.Init.Mode = DMA_CIRCULAR;
 8001d06:	4b47      	ldr	r3, [pc, #284]	; (8001e24 <HAL_TIM_Base_MspInit+0x1c0>)
 8001d08:	2220      	movs	r2, #32
 8001d0a:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8001d0c:	4b45      	ldr	r3, [pc, #276]	; (8001e24 <HAL_TIM_Base_MspInit+0x1c0>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch2) != HAL_OK)
 8001d12:	4b44      	ldr	r3, [pc, #272]	; (8001e24 <HAL_TIM_Base_MspInit+0x1c0>)
 8001d14:	0018      	movs	r0, r3
 8001d16:	f000 fcdf 	bl	80026d8 <HAL_DMA_Init>
 8001d1a:	1e03      	subs	r3, r0, #0
 8001d1c:	d001      	beq.n	8001d22 <HAL_TIM_Base_MspInit+0xbe>
    {
      Error_Handler();
 8001d1e:	f7ff fbcb 	bl	80014b8 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a3f      	ldr	r2, [pc, #252]	; (8001e24 <HAL_TIM_Base_MspInit+0x1c0>)
 8001d26:	625a      	str	r2, [r3, #36]	; 0x24
 8001d28:	4b3e      	ldr	r3, [pc, #248]	; (8001e24 <HAL_TIM_Base_MspInit+0x1c0>)
 8001d2a:	687a      	ldr	r2, [r7, #4]
 8001d2c:	629a      	str	r2, [r3, #40]	; 0x28

    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Channel1;
 8001d2e:	4b3f      	ldr	r3, [pc, #252]	; (8001e2c <HAL_TIM_Base_MspInit+0x1c8>)
 8001d30:	4a3f      	ldr	r2, [pc, #252]	; (8001e30 <HAL_TIM_Base_MspInit+0x1cc>)
 8001d32:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_8;
 8001d34:	4b3d      	ldr	r3, [pc, #244]	; (8001e2c <HAL_TIM_Base_MspInit+0x1c8>)
 8001d36:	2208      	movs	r2, #8
 8001d38:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d3a:	4b3c      	ldr	r3, [pc, #240]	; (8001e2c <HAL_TIM_Base_MspInit+0x1c8>)
 8001d3c:	2210      	movs	r2, #16
 8001d3e:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d40:	4b3a      	ldr	r3, [pc, #232]	; (8001e2c <HAL_TIM_Base_MspInit+0x1c8>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_DISABLE;
 8001d46:	4b39      	ldr	r3, [pc, #228]	; (8001e2c <HAL_TIM_Base_MspInit+0x1c8>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001d4c:	4b37      	ldr	r3, [pc, #220]	; (8001e2c <HAL_TIM_Base_MspInit+0x1c8>)
 8001d4e:	2280      	movs	r2, #128	; 0x80
 8001d50:	0052      	lsls	r2, r2, #1
 8001d52:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d54:	4b35      	ldr	r3, [pc, #212]	; (8001e2c <HAL_TIM_Base_MspInit+0x1c8>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Mode = DMA_CIRCULAR;
 8001d5a:	4b34      	ldr	r3, [pc, #208]	; (8001e2c <HAL_TIM_Base_MspInit+0x1c8>)
 8001d5c:	2220      	movs	r2, #32
 8001d5e:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8001d60:	4b32      	ldr	r3, [pc, #200]	; (8001e2c <HAL_TIM_Base_MspInit+0x1c8>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 8001d66:	4b31      	ldr	r3, [pc, #196]	; (8001e2c <HAL_TIM_Base_MspInit+0x1c8>)
 8001d68:	0018      	movs	r0, r3
 8001d6a:	f000 fcb5 	bl	80026d8 <HAL_DMA_Init>
 8001d6e:	1e03      	subs	r3, r0, #0
 8001d70:	d001      	beq.n	8001d76 <HAL_TIM_Base_MspInit+0x112>
    {
      Error_Handler();
 8001d72:	f7ff fba1 	bl	80014b8 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a2c      	ldr	r2, [pc, #176]	; (8001e2c <HAL_TIM_Base_MspInit+0x1c8>)
 8001d7a:	629a      	str	r2, [r3, #40]	; 0x28
 8001d7c:	4b2b      	ldr	r3, [pc, #172]	; (8001e2c <HAL_TIM_Base_MspInit+0x1c8>)
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	629a      	str	r2, [r3, #40]	; 0x28

    /* TIM2_CH4 Init */
    hdma_tim2_ch4.Instance = DMA1_Channel4;
 8001d82:	4b2c      	ldr	r3, [pc, #176]	; (8001e34 <HAL_TIM_Base_MspInit+0x1d0>)
 8001d84:	4a2c      	ldr	r2, [pc, #176]	; (8001e38 <HAL_TIM_Base_MspInit+0x1d4>)
 8001d86:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch4.Init.Request = DMA_REQUEST_8;
 8001d88:	4b2a      	ldr	r3, [pc, #168]	; (8001e34 <HAL_TIM_Base_MspInit+0x1d0>)
 8001d8a:	2208      	movs	r2, #8
 8001d8c:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d8e:	4b29      	ldr	r3, [pc, #164]	; (8001e34 <HAL_TIM_Base_MspInit+0x1d0>)
 8001d90:	2210      	movs	r2, #16
 8001d92:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d94:	4b27      	ldr	r3, [pc, #156]	; (8001e34 <HAL_TIM_Base_MspInit+0x1d0>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch4.Init.MemInc = DMA_MINC_DISABLE;
 8001d9a:	4b26      	ldr	r3, [pc, #152]	; (8001e34 <HAL_TIM_Base_MspInit+0x1d0>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001da0:	4b24      	ldr	r3, [pc, #144]	; (8001e34 <HAL_TIM_Base_MspInit+0x1d0>)
 8001da2:	2280      	movs	r2, #128	; 0x80
 8001da4:	0052      	lsls	r2, r2, #1
 8001da6:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001da8:	4b22      	ldr	r3, [pc, #136]	; (8001e34 <HAL_TIM_Base_MspInit+0x1d0>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch4.Init.Mode = DMA_CIRCULAR;
 8001dae:	4b21      	ldr	r3, [pc, #132]	; (8001e34 <HAL_TIM_Base_MspInit+0x1d0>)
 8001db0:	2220      	movs	r2, #32
 8001db2:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8001db4:	4b1f      	ldr	r3, [pc, #124]	; (8001e34 <HAL_TIM_Base_MspInit+0x1d0>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch4) != HAL_OK)
 8001dba:	4b1e      	ldr	r3, [pc, #120]	; (8001e34 <HAL_TIM_Base_MspInit+0x1d0>)
 8001dbc:	0018      	movs	r0, r3
 8001dbe:	f000 fc8b 	bl	80026d8 <HAL_DMA_Init>
 8001dc2:	1e03      	subs	r3, r0, #0
 8001dc4:	d001      	beq.n	8001dca <HAL_TIM_Base_MspInit+0x166>
    {
      Error_Handler();
 8001dc6:	f7ff fb77 	bl	80014b8 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch4);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a19      	ldr	r2, [pc, #100]	; (8001e34 <HAL_TIM_Base_MspInit+0x1d0>)
 8001dce:	62da      	str	r2, [r3, #44]	; 0x2c
 8001dd0:	4b18      	ldr	r3, [pc, #96]	; (8001e34 <HAL_TIM_Base_MspInit+0x1d0>)
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	629a      	str	r2, [r3, #40]	; 0x28

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	2101      	movs	r1, #1
 8001dda:	200f      	movs	r0, #15
 8001ddc:	f000 fc4a 	bl	8002674 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001de0:	200f      	movs	r0, #15
 8001de2:	f000 fc5c 	bl	800269e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM21_MspInit 1 */

  /* USER CODE END TIM21_MspInit 1 */
  }

}
 8001de6:	e012      	b.n	8001e0e <HAL_TIM_Base_MspInit+0x1aa>
  else if(htim_base->Instance==TIM21)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a13      	ldr	r2, [pc, #76]	; (8001e3c <HAL_TIM_Base_MspInit+0x1d8>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d10d      	bne.n	8001e0e <HAL_TIM_Base_MspInit+0x1aa>
    __HAL_RCC_TIM21_CLK_ENABLE();
 8001df2:	4b09      	ldr	r3, [pc, #36]	; (8001e18 <HAL_TIM_Base_MspInit+0x1b4>)
 8001df4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001df6:	4b08      	ldr	r3, [pc, #32]	; (8001e18 <HAL_TIM_Base_MspInit+0x1b4>)
 8001df8:	2104      	movs	r1, #4
 8001dfa:	430a      	orrs	r2, r1
 8001dfc:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_NVIC_SetPriority(TIM21_IRQn, 3, 0);
 8001dfe:	2200      	movs	r2, #0
 8001e00:	2103      	movs	r1, #3
 8001e02:	2014      	movs	r0, #20
 8001e04:	f000 fc36 	bl	8002674 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
 8001e08:	2014      	movs	r0, #20
 8001e0a:	f000 fc48 	bl	800269e <HAL_NVIC_EnableIRQ>
}
 8001e0e:	46c0      	nop			; (mov r8, r8)
 8001e10:	46bd      	mov	sp, r7
 8001e12:	b002      	add	sp, #8
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	46c0      	nop			; (mov r8, r8)
 8001e18:	40021000 	.word	0x40021000
 8001e1c:	20000be8 	.word	0x20000be8
 8001e20:	40020058 	.word	0x40020058
 8001e24:	20000c30 	.word	0x20000c30
 8001e28:	40020030 	.word	0x40020030
 8001e2c:	20000c78 	.word	0x20000c78
 8001e30:	40020008 	.word	0x40020008
 8001e34:	20000cc0 	.word	0x20000cc0
 8001e38:	40020044 	.word	0x40020044
 8001e3c:	40010800 	.word	0x40010800

08001e40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e44:	e7fe      	b.n	8001e44 <NMI_Handler+0x4>

08001e46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e4a:	e7fe      	b.n	8001e4a <HardFault_Handler+0x4>

08001e4c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001e50:	46c0      	nop			; (mov r8, r8)
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}

08001e56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e56:	b580      	push	{r7, lr}
 8001e58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e5a:	46c0      	nop			; (mov r8, r8)
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e64:	f000 fb1a 	bl	800249c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e68:	46c0      	nop			; (mov r8, r8)
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
	...

08001e70 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 8001e74:	4b03      	ldr	r3, [pc, #12]	; (8001e84 <DMA1_Channel1_IRQHandler+0x14>)
 8001e76:	0018      	movs	r0, r3
 8001e78:	f000 fd0c 	bl	8002894 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001e7c:	46c0      	nop			; (mov r8, r8)
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	46c0      	nop			; (mov r8, r8)
 8001e84:	20000c78 	.word	0x20000c78

08001e88 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2);
 8001e8c:	4b03      	ldr	r3, [pc, #12]	; (8001e9c <DMA1_Channel2_3_IRQHandler+0x14>)
 8001e8e:	0018      	movs	r0, r3
 8001e90:	f000 fd00 	bl	8002894 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8001e94:	46c0      	nop			; (mov r8, r8)
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	46c0      	nop			; (mov r8, r8)
 8001e9c:	20000c30 	.word	0x20000c30

08001ea0 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch4);
 8001ea4:	4b05      	ldr	r3, [pc, #20]	; (8001ebc <DMA1_Channel4_5_6_7_IRQHandler+0x1c>)
 8001ea6:	0018      	movs	r0, r3
 8001ea8:	f000 fcf4 	bl	8002894 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8001eac:	4b04      	ldr	r3, [pc, #16]	; (8001ec0 <DMA1_Channel4_5_6_7_IRQHandler+0x20>)
 8001eae:	0018      	movs	r0, r3
 8001eb0:	f000 fcf0 	bl	8002894 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8001eb4:	46c0      	nop			; (mov r8, r8)
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	46c0      	nop			; (mov r8, r8)
 8001ebc:	20000cc0 	.word	0x20000cc0
 8001ec0:	20000be8 	.word	0x20000be8

08001ec4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ec8:	4b03      	ldr	r3, [pc, #12]	; (8001ed8 <TIM2_IRQHandler+0x14>)
 8001eca:	0018      	movs	r0, r3
 8001ecc:	f003 f8a4 	bl	8005018 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ed0:	46c0      	nop			; (mov r8, r8)
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	46c0      	nop			; (mov r8, r8)
 8001ed8:	20000b68 	.word	0x20000b68

08001edc <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM21_IRQn 0 */

  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
 8001ee0:	4b03      	ldr	r3, [pc, #12]	; (8001ef0 <TIM21_IRQHandler+0x14>)
 8001ee2:	0018      	movs	r0, r3
 8001ee4:	f003 f898 	bl	8005018 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 8001ee8:	46c0      	nop			; (mov r8, r8)
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	46c0      	nop			; (mov r8, r8)
 8001ef0:	20000ba8 	.word	0x20000ba8

08001ef4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ef8:	46c0      	nop			; (mov r8, r8)
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
	...

08001f00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001f00:	480d      	ldr	r0, [pc, #52]	; (8001f38 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8001f02:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001f04:	f7ff fff6 	bl	8001ef4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f08:	480c      	ldr	r0, [pc, #48]	; (8001f3c <LoopForever+0x6>)
  ldr r1, =_edata
 8001f0a:	490d      	ldr	r1, [pc, #52]	; (8001f40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f0c:	4a0d      	ldr	r2, [pc, #52]	; (8001f44 <LoopForever+0xe>)
  movs r3, #0
 8001f0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f10:	e002      	b.n	8001f18 <LoopCopyDataInit>

08001f12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f16:	3304      	adds	r3, #4

08001f18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f1c:	d3f9      	bcc.n	8001f12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f1e:	4a0a      	ldr	r2, [pc, #40]	; (8001f48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f20:	4c0a      	ldr	r4, [pc, #40]	; (8001f4c <LoopForever+0x16>)
  movs r3, #0
 8001f22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f24:	e001      	b.n	8001f2a <LoopFillZerobss>

08001f26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f28:	3204      	adds	r2, #4

08001f2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f2c:	d3fb      	bcc.n	8001f26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f2e:	f004 fb33 	bl	8006598 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f32:	f7fe fea5 	bl	8000c80 <main>

08001f36 <LoopForever>:

LoopForever:
    b LoopForever
 8001f36:	e7fe      	b.n	8001f36 <LoopForever>
   ldr   r0, =_estack
 8001f38:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001f3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f40:	20000958 	.word	0x20000958
  ldr r2, =_sidata
 8001f44:	080066a8 	.word	0x080066a8
  ldr r2, =_sbss
 8001f48:	20000958 	.word	0x20000958
  ldr r4, =_ebss
 8001f4c:	2000174c 	.word	0x2000174c

08001f50 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f50:	e7fe      	b.n	8001f50 <ADC1_COMP_IRQHandler>
	...

08001f54 <DS3231_Init>:

/**
 * @brief Initializes the DS3231 module. Set clock halt bit to 0 to start timing.
 * @param hi2c User I2C handle pointer.
 */
void DS3231_Init(I2C_HandleTypeDef *hi2c) {
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
	_ds3231_ui2c = hi2c;
 8001f5c:	4b09      	ldr	r3, [pc, #36]	; (8001f84 <DS3231_Init+0x30>)
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	601a      	str	r2, [r3, #0]
	DS3231_EnableAlarm1(DS3231_DISABLED);
 8001f62:	2000      	movs	r0, #0
 8001f64:	f000 f8e3 	bl	800212e <DS3231_EnableAlarm1>
	DS3231_EnableAlarm2(DS3231_DISABLED);
 8001f68:	2000      	movs	r0, #0
 8001f6a:	f000 f89e 	bl	80020aa <DS3231_EnableAlarm2>
	DS3231_ClearAlarm1Flag();
 8001f6e:	f000 f905 	bl	800217c <DS3231_ClearAlarm1Flag>
	DS3231_ClearAlarm2Flag();
 8001f72:	f000 f8c2 	bl	80020fa <DS3231_ClearAlarm2Flag>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 8001f76:	2001      	movs	r0, #1
 8001f78:	f000 f84c 	bl	8002014 <DS3231_SetInterruptMode>
}
 8001f7c:	46c0      	nop			; (mov r8, r8)
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	b002      	add	sp, #8
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	20001744 	.word	0x20001744

08001f88 <DS3231_SetRegByte>:
/**
 * @brief Set the byte in the designated DS3231 register to value.
 * @param regAddr Register address to write.
 * @param val Value to set, 0 to 255.
 */
void DS3231_SetRegByte(uint8_t regAddr, uint8_t val) {
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b086      	sub	sp, #24
 8001f8c:	af02      	add	r7, sp, #8
 8001f8e:	0002      	movs	r2, r0
 8001f90:	1dfb      	adds	r3, r7, #7
 8001f92:	701a      	strb	r2, [r3, #0]
 8001f94:	1dbb      	adds	r3, r7, #6
 8001f96:	1c0a      	adds	r2, r1, #0
 8001f98:	701a      	strb	r2, [r3, #0]
	uint8_t bytes[2] = { regAddr, val };
 8001f9a:	210c      	movs	r1, #12
 8001f9c:	187b      	adds	r3, r7, r1
 8001f9e:	1dfa      	adds	r2, r7, #7
 8001fa0:	7812      	ldrb	r2, [r2, #0]
 8001fa2:	701a      	strb	r2, [r3, #0]
 8001fa4:	187b      	adds	r3, r7, r1
 8001fa6:	1dba      	adds	r2, r7, #6
 8001fa8:	7812      	ldrb	r2, [r2, #0]
 8001faa:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, bytes, 2, DS3231_TIMEOUT);
 8001fac:	4b06      	ldr	r3, [pc, #24]	; (8001fc8 <DS3231_SetRegByte+0x40>)
 8001fae:	6818      	ldr	r0, [r3, #0]
 8001fb0:	187a      	adds	r2, r7, r1
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	425b      	negs	r3, r3
 8001fb6:	9300      	str	r3, [sp, #0]
 8001fb8:	2302      	movs	r3, #2
 8001fba:	21d0      	movs	r1, #208	; 0xd0
 8001fbc:	f000 ffa0 	bl	8002f00 <HAL_I2C_Master_Transmit>
}
 8001fc0:	46c0      	nop			; (mov r8, r8)
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	b004      	add	sp, #16
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	20001744 	.word	0x20001744

08001fcc <DS3231_GetRegByte>:
/**
 * @brief Gets the byte in the designated DS3231 register.
 * @param regAddr Register address to read.
 * @return Value stored in the register, 0 to 255.
 */
uint8_t DS3231_GetRegByte(uint8_t regAddr) {
 8001fcc:	b590      	push	{r4, r7, lr}
 8001fce:	b087      	sub	sp, #28
 8001fd0:	af02      	add	r7, sp, #8
 8001fd2:	0002      	movs	r2, r0
 8001fd4:	1dfb      	adds	r3, r7, #7
 8001fd6:	701a      	strb	r2, [r3, #0]
	uint8_t val;
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &regAddr, 1, DS3231_TIMEOUT);
 8001fd8:	4b0d      	ldr	r3, [pc, #52]	; (8002010 <DS3231_GetRegByte+0x44>)
 8001fda:	6818      	ldr	r0, [r3, #0]
 8001fdc:	1dfa      	adds	r2, r7, #7
 8001fde:	2301      	movs	r3, #1
 8001fe0:	425b      	negs	r3, r3
 8001fe2:	9300      	str	r3, [sp, #0]
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	21d0      	movs	r1, #208	; 0xd0
 8001fe8:	f000 ff8a 	bl	8002f00 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &val, 1, DS3231_TIMEOUT);
 8001fec:	4b08      	ldr	r3, [pc, #32]	; (8002010 <DS3231_GetRegByte+0x44>)
 8001fee:	6818      	ldr	r0, [r3, #0]
 8001ff0:	240f      	movs	r4, #15
 8001ff2:	193a      	adds	r2, r7, r4
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	425b      	negs	r3, r3
 8001ff8:	9300      	str	r3, [sp, #0]
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	21d0      	movs	r1, #208	; 0xd0
 8001ffe:	f001 f887 	bl	8003110 <HAL_I2C_Master_Receive>
	return val;
 8002002:	193b      	adds	r3, r7, r4
 8002004:	781b      	ldrb	r3, [r3, #0]
}
 8002006:	0018      	movs	r0, r3
 8002008:	46bd      	mov	sp, r7
 800200a:	b005      	add	sp, #20
 800200c:	bd90      	pop	{r4, r7, pc}
 800200e:	46c0      	nop			; (mov r8, r8)
 8002010:	20001744 	.word	0x20001744

08002014 <DS3231_SetInterruptMode>:

/**
 * @brief Set the interrupt mode to either alarm interrupt or square wave interrupt.
 * @param mode Interrupt mode to set, DS3231_ALARM_INTERRUPT or DS3231_SQUARE_WAVE_INTERRUPT.
 */
void DS3231_SetInterruptMode(DS3231_InterruptMode mode){
 8002014:	b5b0      	push	{r4, r5, r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	0002      	movs	r2, r0
 800201c:	1dfb      	adds	r3, r7, #7
 800201e:	701a      	strb	r2, [r3, #0]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8002020:	250f      	movs	r5, #15
 8002022:	197c      	adds	r4, r7, r5
 8002024:	200e      	movs	r0, #14
 8002026:	f7ff ffd1 	bl	8001fcc <DS3231_GetRegByte>
 800202a:	0003      	movs	r3, r0
 800202c:	7023      	strb	r3, [r4, #0]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfb) | ((mode & 0x01) << DS3231_INTCN));
 800202e:	197b      	adds	r3, r7, r5
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	b25b      	sxtb	r3, r3
 8002034:	2204      	movs	r2, #4
 8002036:	4393      	bics	r3, r2
 8002038:	b25a      	sxtb	r2, r3
 800203a:	1dfb      	adds	r3, r7, #7
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	b25b      	sxtb	r3, r3
 8002042:	2104      	movs	r1, #4
 8002044:	400b      	ands	r3, r1
 8002046:	b25b      	sxtb	r3, r3
 8002048:	4313      	orrs	r3, r2
 800204a:	b25b      	sxtb	r3, r3
 800204c:	b2db      	uxtb	r3, r3
 800204e:	0019      	movs	r1, r3
 8002050:	200e      	movs	r0, #14
 8002052:	f7ff ff99 	bl	8001f88 <DS3231_SetRegByte>
}
 8002056:	46c0      	nop			; (mov r8, r8)
 8002058:	46bd      	mov	sp, r7
 800205a:	b004      	add	sp, #16
 800205c:	bdb0      	pop	{r4, r5, r7, pc}

0800205e <DS3231_EnableOscillator>:

/**
 * @brief Enables clock oscillator.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableOscillator(DS3231_State enable){
 800205e:	b5b0      	push	{r4, r5, r7, lr}
 8002060:	b084      	sub	sp, #16
 8002062:	af00      	add	r7, sp, #0
 8002064:	0002      	movs	r2, r0
 8002066:	1dfb      	adds	r3, r7, #7
 8002068:	701a      	strb	r2, [r3, #0]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 800206a:	250f      	movs	r5, #15
 800206c:	197c      	adds	r4, r7, r5
 800206e:	200e      	movs	r0, #14
 8002070:	f7ff ffac 	bl	8001fcc <DS3231_GetRegByte>
 8002074:	0003      	movs	r3, r0
 8002076:	7023      	strb	r3, [r4, #0]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0x7f) | ((!enable & 0x01) << DS3231_EOSC));
 8002078:	197b      	adds	r3, r7, r5
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	b25b      	sxtb	r3, r3
 800207e:	227f      	movs	r2, #127	; 0x7f
 8002080:	4013      	ands	r3, r2
 8002082:	b25a      	sxtb	r2, r3
 8002084:	1dfb      	adds	r3, r7, #7
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d102      	bne.n	8002092 <DS3231_EnableOscillator+0x34>
 800208c:	2380      	movs	r3, #128	; 0x80
 800208e:	425b      	negs	r3, r3
 8002090:	e000      	b.n	8002094 <DS3231_EnableOscillator+0x36>
 8002092:	2300      	movs	r3, #0
 8002094:	4313      	orrs	r3, r2
 8002096:	b25b      	sxtb	r3, r3
 8002098:	b2db      	uxtb	r3, r3
 800209a:	0019      	movs	r1, r3
 800209c:	200e      	movs	r0, #14
 800209e:	f7ff ff73 	bl	8001f88 <DS3231_SetRegByte>
}
 80020a2:	46c0      	nop			; (mov r8, r8)
 80020a4:	46bd      	mov	sp, r7
 80020a6:	b004      	add	sp, #16
 80020a8:	bdb0      	pop	{r4, r5, r7, pc}

080020aa <DS3231_EnableAlarm2>:

/**
 * @brief Enables alarm 2.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableAlarm2(DS3231_State enable){
 80020aa:	b5b0      	push	{r4, r5, r7, lr}
 80020ac:	b084      	sub	sp, #16
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	0002      	movs	r2, r0
 80020b2:	1dfb      	adds	r3, r7, #7
 80020b4:	701a      	strb	r2, [r3, #0]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 80020b6:	250f      	movs	r5, #15
 80020b8:	197c      	adds	r4, r7, r5
 80020ba:	200e      	movs	r0, #14
 80020bc:	f7ff ff86 	bl	8001fcc <DS3231_GetRegByte>
 80020c0:	0003      	movs	r3, r0
 80020c2:	7023      	strb	r3, [r4, #0]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfd) | ((enable & 0x01) << DS3231_A2IE));
 80020c4:	197b      	adds	r3, r7, r5
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	b25b      	sxtb	r3, r3
 80020ca:	2202      	movs	r2, #2
 80020cc:	4393      	bics	r3, r2
 80020ce:	b25a      	sxtb	r2, r3
 80020d0:	1dfb      	adds	r3, r7, #7
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	b25b      	sxtb	r3, r3
 80020d8:	2102      	movs	r1, #2
 80020da:	400b      	ands	r3, r1
 80020dc:	b25b      	sxtb	r3, r3
 80020de:	4313      	orrs	r3, r2
 80020e0:	b25b      	sxtb	r3, r3
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	0019      	movs	r1, r3
 80020e6:	200e      	movs	r0, #14
 80020e8:	f7ff ff4e 	bl	8001f88 <DS3231_SetRegByte>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 80020ec:	2001      	movs	r0, #1
 80020ee:	f7ff ff91 	bl	8002014 <DS3231_SetInterruptMode>
}
 80020f2:	46c0      	nop			; (mov r8, r8)
 80020f4:	46bd      	mov	sp, r7
 80020f6:	b004      	add	sp, #16
 80020f8:	bdb0      	pop	{r4, r5, r7, pc}

080020fa <DS3231_ClearAlarm2Flag>:

/**
 * @brief Clears alarm 2 matched flag. Matched flags must be cleared before the next match or the next interrupt will be masked.
 */
void DS3231_ClearAlarm2Flag(){
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b082      	sub	sp, #8
 80020fe:	af00      	add	r7, sp, #0
	uint8_t status = DS3231_GetRegByte(DS3231_REG_STATUS) & 0xfd;
 8002100:	200f      	movs	r0, #15
 8002102:	f7ff ff63 	bl	8001fcc <DS3231_GetRegByte>
 8002106:	0003      	movs	r3, r0
 8002108:	0019      	movs	r1, r3
 800210a:	1dfb      	adds	r3, r7, #7
 800210c:	2202      	movs	r2, #2
 800210e:	4391      	bics	r1, r2
 8002110:	000a      	movs	r2, r1
 8002112:	701a      	strb	r2, [r3, #0]
	DS3231_SetRegByte(DS3231_REG_STATUS, status & ~(0x01 << DS3231_A2F));
 8002114:	1dfb      	adds	r3, r7, #7
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	2202      	movs	r2, #2
 800211a:	4393      	bics	r3, r2
 800211c:	b2db      	uxtb	r3, r3
 800211e:	0019      	movs	r1, r3
 8002120:	200f      	movs	r0, #15
 8002122:	f7ff ff31 	bl	8001f88 <DS3231_SetRegByte>
}
 8002126:	46c0      	nop			; (mov r8, r8)
 8002128:	46bd      	mov	sp, r7
 800212a:	b002      	add	sp, #8
 800212c:	bd80      	pop	{r7, pc}

0800212e <DS3231_EnableAlarm1>:

/**
 * @brief Enables alarm 1.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableAlarm1(DS3231_State enable){
 800212e:	b5b0      	push	{r4, r5, r7, lr}
 8002130:	b084      	sub	sp, #16
 8002132:	af00      	add	r7, sp, #0
 8002134:	0002      	movs	r2, r0
 8002136:	1dfb      	adds	r3, r7, #7
 8002138:	701a      	strb	r2, [r3, #0]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 800213a:	250f      	movs	r5, #15
 800213c:	197c      	adds	r4, r7, r5
 800213e:	200e      	movs	r0, #14
 8002140:	f7ff ff44 	bl	8001fcc <DS3231_GetRegByte>
 8002144:	0003      	movs	r3, r0
 8002146:	7023      	strb	r3, [r4, #0]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfe) | ((enable & 0x01) << DS3231_A1IE));
 8002148:	197b      	adds	r3, r7, r5
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	b25b      	sxtb	r3, r3
 800214e:	2201      	movs	r2, #1
 8002150:	4393      	bics	r3, r2
 8002152:	b25a      	sxtb	r2, r3
 8002154:	1dfb      	adds	r3, r7, #7
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	b25b      	sxtb	r3, r3
 800215a:	2101      	movs	r1, #1
 800215c:	400b      	ands	r3, r1
 800215e:	b25b      	sxtb	r3, r3
 8002160:	4313      	orrs	r3, r2
 8002162:	b25b      	sxtb	r3, r3
 8002164:	b2db      	uxtb	r3, r3
 8002166:	0019      	movs	r1, r3
 8002168:	200e      	movs	r0, #14
 800216a:	f7ff ff0d 	bl	8001f88 <DS3231_SetRegByte>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 800216e:	2001      	movs	r0, #1
 8002170:	f7ff ff50 	bl	8002014 <DS3231_SetInterruptMode>
}
 8002174:	46c0      	nop			; (mov r8, r8)
 8002176:	46bd      	mov	sp, r7
 8002178:	b004      	add	sp, #16
 800217a:	bdb0      	pop	{r4, r5, r7, pc}

0800217c <DS3231_ClearAlarm1Flag>:

/**
 * @brief Clears alarm 1 matched flag. Matched flags must be cleared before the next match or the next interrupt will be masked.
 */
void DS3231_ClearAlarm1Flag(){
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
	uint8_t status = DS3231_GetRegByte(DS3231_REG_STATUS) & 0xfe;
 8002182:	200f      	movs	r0, #15
 8002184:	f7ff ff22 	bl	8001fcc <DS3231_GetRegByte>
 8002188:	0003      	movs	r3, r0
 800218a:	0019      	movs	r1, r3
 800218c:	1dfb      	adds	r3, r7, #7
 800218e:	2201      	movs	r2, #1
 8002190:	4391      	bics	r1, r2
 8002192:	000a      	movs	r2, r1
 8002194:	701a      	strb	r2, [r3, #0]
	DS3231_SetRegByte(DS3231_REG_STATUS, status & ~(0x01 << DS3231_A1F));
 8002196:	1dfb      	adds	r3, r7, #7
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	2201      	movs	r2, #1
 800219c:	4393      	bics	r3, r2
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	0019      	movs	r1, r3
 80021a2:	200f      	movs	r0, #15
 80021a4:	f7ff fef0 	bl	8001f88 <DS3231_SetRegByte>
}
 80021a8:	46c0      	nop			; (mov r8, r8)
 80021aa:	46bd      	mov	sp, r7
 80021ac:	b002      	add	sp, #8
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <DS3231_IsOscillatorStopped>:

/**
 * @brief Check whether the clock oscillator is stopped.
 * @return Oscillator stopped flag (OSF) bit, 0 or 1.
 */
uint8_t DS3231_IsOscillatorStopped(){
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
	return (DS3231_GetRegByte(DS3231_REG_STATUS) >> DS3231_OSF) & 0x01;
 80021b4:	200f      	movs	r0, #15
 80021b6:	f7ff ff09 	bl	8001fcc <DS3231_GetRegByte>
 80021ba:	0003      	movs	r3, r0
 80021bc:	09db      	lsrs	r3, r3, #7
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	2201      	movs	r2, #1
 80021c2:	4013      	ands	r3, r2
 80021c4:	b2db      	uxtb	r3, r3
}
 80021c6:	0018      	movs	r0, r3
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <DS3231_GetDayOfWeek>:

/**
 * @brief Gets the current day of week.
 * @return Days from last Sunday, 0 to 6.
 */
uint8_t DS3231_GetDayOfWeek(void) {
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_DOW));
 80021d0:	2003      	movs	r0, #3
 80021d2:	f7ff fefb 	bl	8001fcc <DS3231_GetRegByte>
 80021d6:	0003      	movs	r3, r0
 80021d8:	0018      	movs	r0, r3
 80021da:	f000 f8d2 	bl	8002382 <DS3231_DecodeBCD>
 80021de:	0003      	movs	r3, r0
}
 80021e0:	0018      	movs	r0, r3
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <DS3231_GetDate>:

/**
 * @brief Gets the current day of month.
 * @return Day of month, 1 to 31.
 */
uint8_t DS3231_GetDate(void) {
 80021e6:	b580      	push	{r7, lr}
 80021e8:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_DATE));
 80021ea:	2004      	movs	r0, #4
 80021ec:	f7ff feee 	bl	8001fcc <DS3231_GetRegByte>
 80021f0:	0003      	movs	r3, r0
 80021f2:	0018      	movs	r0, r3
 80021f4:	f000 f8c5 	bl	8002382 <DS3231_DecodeBCD>
 80021f8:	0003      	movs	r3, r0
}
 80021fa:	0018      	movs	r0, r3
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}

08002200 <DS3231_GetMonth>:

/**
 * @brief Gets the current month.
 * @return Month, 1 to 12.
 */
uint8_t DS3231_GetMonth(void) {
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_MONTH) & 0x7f);
 8002204:	2005      	movs	r0, #5
 8002206:	f7ff fee1 	bl	8001fcc <DS3231_GetRegByte>
 800220a:	0003      	movs	r3, r0
 800220c:	001a      	movs	r2, r3
 800220e:	237f      	movs	r3, #127	; 0x7f
 8002210:	4013      	ands	r3, r2
 8002212:	b2db      	uxtb	r3, r3
 8002214:	0018      	movs	r0, r3
 8002216:	f000 f8b4 	bl	8002382 <DS3231_DecodeBCD>
 800221a:	0003      	movs	r3, r0
}
 800221c:	0018      	movs	r0, r3
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}

08002222 <DS3231_GetYear>:

/**
 * @brief Gets the current year.
 * @return Year, 2000 to 2199.
 */
uint16_t DS3231_GetYear(void) {
 8002222:	b590      	push	{r4, r7, lr}
 8002224:	b083      	sub	sp, #12
 8002226:	af00      	add	r7, sp, #0
	uint8_t decYear = DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_YEAR));
 8002228:	2006      	movs	r0, #6
 800222a:	f7ff fecf 	bl	8001fcc <DS3231_GetRegByte>
 800222e:	0003      	movs	r3, r0
 8002230:	1dfc      	adds	r4, r7, #7
 8002232:	0018      	movs	r0, r3
 8002234:	f000 f8a5 	bl	8002382 <DS3231_DecodeBCD>
 8002238:	0003      	movs	r3, r0
 800223a:	7023      	strb	r3, [r4, #0]
	uint16_t century = (DS3231_GetRegByte(DS3231_REG_MONTH) >> DS3231_CENTURY) * 100 + 2000;
 800223c:	2005      	movs	r0, #5
 800223e:	f7ff fec5 	bl	8001fcc <DS3231_GetRegByte>
 8002242:	0003      	movs	r3, r0
 8002244:	09db      	lsrs	r3, r3, #7
 8002246:	b2db      	uxtb	r3, r3
 8002248:	b29b      	uxth	r3, r3
 800224a:	2264      	movs	r2, #100	; 0x64
 800224c:	4353      	muls	r3, r2
 800224e:	b29a      	uxth	r2, r3
 8002250:	1d3b      	adds	r3, r7, #4
 8002252:	21fa      	movs	r1, #250	; 0xfa
 8002254:	00c9      	lsls	r1, r1, #3
 8002256:	468c      	mov	ip, r1
 8002258:	4462      	add	r2, ip
 800225a:	801a      	strh	r2, [r3, #0]
	return century + decYear;
 800225c:	1dfb      	adds	r3, r7, #7
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	b29a      	uxth	r2, r3
 8002262:	1d3b      	adds	r3, r7, #4
 8002264:	881b      	ldrh	r3, [r3, #0]
 8002266:	18d3      	adds	r3, r2, r3
 8002268:	b29b      	uxth	r3, r3
}
 800226a:	0018      	movs	r0, r3
 800226c:	46bd      	mov	sp, r7
 800226e:	b003      	add	sp, #12
 8002270:	bd90      	pop	{r4, r7, pc}

08002272 <DS3231_GetHour>:

/**
 * @brief Gets the current hour in 24h format.
 * @return Hour in 24h format, 0 to 23.
 */
uint8_t DS3231_GetHour(void) {
 8002272:	b580      	push	{r7, lr}
 8002274:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_HOUR));
 8002276:	2002      	movs	r0, #2
 8002278:	f7ff fea8 	bl	8001fcc <DS3231_GetRegByte>
 800227c:	0003      	movs	r3, r0
 800227e:	0018      	movs	r0, r3
 8002280:	f000 f87f 	bl	8002382 <DS3231_DecodeBCD>
 8002284:	0003      	movs	r3, r0
}
 8002286:	0018      	movs	r0, r3
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}

0800228c <DS3231_GetMinute>:

/**
 * @brief Gets the current minute.
 * @return Minute, 0 to 59.
 */
uint8_t DS3231_GetMinute(void) {
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_MINUTE));
 8002290:	2001      	movs	r0, #1
 8002292:	f7ff fe9b 	bl	8001fcc <DS3231_GetRegByte>
 8002296:	0003      	movs	r3, r0
 8002298:	0018      	movs	r0, r3
 800229a:	f000 f872 	bl	8002382 <DS3231_DecodeBCD>
 800229e:	0003      	movs	r3, r0
}
 80022a0:	0018      	movs	r0, r3
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <DS3231_GetSecond>:

/**
 * @brief Gets the current second. Clock halt bit not included.
 * @return Second, 0 to 59.
 */
uint8_t DS3231_GetSecond(void) {
 80022a6:	b580      	push	{r7, lr}
 80022a8:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_SECOND));
 80022aa:	2000      	movs	r0, #0
 80022ac:	f7ff fe8e 	bl	8001fcc <DS3231_GetRegByte>
 80022b0:	0003      	movs	r3, r0
 80022b2:	0018      	movs	r0, r3
 80022b4:	f000 f865 	bl	8002382 <DS3231_DecodeBCD>
 80022b8:	0003      	movs	r3, r0
}
 80022ba:	0018      	movs	r0, r3
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}

080022c0 <DS3231_SetHour>:

/**
 * @brief Set the current hour, in 24h format.
 * @param hour_24mode Hour in 24h format, 0 to 23.
 */
void DS3231_SetHour(uint8_t hour_24mode) {
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	0002      	movs	r2, r0
 80022c8:	1dfb      	adds	r3, r7, #7
 80022ca:	701a      	strb	r2, [r3, #0]
	DS3231_SetRegByte(DS3231_REG_HOUR, DS3231_EncodeBCD(hour_24mode & 0x3f));
 80022cc:	1dfb      	adds	r3, r7, #7
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	223f      	movs	r2, #63	; 0x3f
 80022d2:	4013      	ands	r3, r2
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	0018      	movs	r0, r3
 80022d8:	f000 f86d 	bl	80023b6 <DS3231_EncodeBCD>
 80022dc:	0003      	movs	r3, r0
 80022de:	0019      	movs	r1, r3
 80022e0:	2002      	movs	r0, #2
 80022e2:	f7ff fe51 	bl	8001f88 <DS3231_SetRegByte>
}
 80022e6:	46c0      	nop			; (mov r8, r8)
 80022e8:	46bd      	mov	sp, r7
 80022ea:	b002      	add	sp, #8
 80022ec:	bd80      	pop	{r7, pc}

080022ee <DS3231_SetMinute>:

/**
 * @brief Set the current minute.
 * @param minute Minute, 0 to 59.
 */
void DS3231_SetMinute(uint8_t minute) {
 80022ee:	b580      	push	{r7, lr}
 80022f0:	b082      	sub	sp, #8
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	0002      	movs	r2, r0
 80022f6:	1dfb      	adds	r3, r7, #7
 80022f8:	701a      	strb	r2, [r3, #0]
	DS3231_SetRegByte(DS3231_REG_MINUTE, DS3231_EncodeBCD(minute));
 80022fa:	1dfb      	adds	r3, r7, #7
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	0018      	movs	r0, r3
 8002300:	f000 f859 	bl	80023b6 <DS3231_EncodeBCD>
 8002304:	0003      	movs	r3, r0
 8002306:	0019      	movs	r1, r3
 8002308:	2001      	movs	r0, #1
 800230a:	f7ff fe3d 	bl	8001f88 <DS3231_SetRegByte>
}
 800230e:	46c0      	nop			; (mov r8, r8)
 8002310:	46bd      	mov	sp, r7
 8002312:	b002      	add	sp, #8
 8002314:	bd80      	pop	{r7, pc}

08002316 <DS3231_SetSecond>:

/**
 * @brief Set the current second.
 * @param second Second, 0 to 59.
 */
void DS3231_SetSecond(uint8_t second) {
 8002316:	b580      	push	{r7, lr}
 8002318:	b082      	sub	sp, #8
 800231a:	af00      	add	r7, sp, #0
 800231c:	0002      	movs	r2, r0
 800231e:	1dfb      	adds	r3, r7, #7
 8002320:	701a      	strb	r2, [r3, #0]
	DS3231_SetRegByte(DS3231_REG_SECOND, DS3231_EncodeBCD(second));
 8002322:	1dfb      	adds	r3, r7, #7
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	0018      	movs	r0, r3
 8002328:	f000 f845 	bl	80023b6 <DS3231_EncodeBCD>
 800232c:	0003      	movs	r3, r0
 800232e:	0019      	movs	r1, r3
 8002330:	2000      	movs	r0, #0
 8002332:	f7ff fe29 	bl	8001f88 <DS3231_SetRegByte>
}
 8002336:	46c0      	nop			; (mov r8, r8)
 8002338:	46bd      	mov	sp, r7
 800233a:	b002      	add	sp, #8
 800233c:	bd80      	pop	{r7, pc}

0800233e <DS3231_SetFullTime>:
 * @brief Set the current time.
 * @param hour_24mode Hour in 24h format, 0 to 23.
 * @param minute  Minute, 0 to 59.
 * @param second Second, 0 to 59.
 */
void DS3231_SetFullTime(uint8_t  hour_24mode, uint8_t minute, uint8_t second){
 800233e:	b590      	push	{r4, r7, lr}
 8002340:	b083      	sub	sp, #12
 8002342:	af00      	add	r7, sp, #0
 8002344:	0004      	movs	r4, r0
 8002346:	0008      	movs	r0, r1
 8002348:	0011      	movs	r1, r2
 800234a:	1dfb      	adds	r3, r7, #7
 800234c:	1c22      	adds	r2, r4, #0
 800234e:	701a      	strb	r2, [r3, #0]
 8002350:	1dbb      	adds	r3, r7, #6
 8002352:	1c02      	adds	r2, r0, #0
 8002354:	701a      	strb	r2, [r3, #0]
 8002356:	1d7b      	adds	r3, r7, #5
 8002358:	1c0a      	adds	r2, r1, #0
 800235a:	701a      	strb	r2, [r3, #0]
	DS3231_SetHour(hour_24mode);
 800235c:	1dfb      	adds	r3, r7, #7
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	0018      	movs	r0, r3
 8002362:	f7ff ffad 	bl	80022c0 <DS3231_SetHour>
	DS3231_SetMinute(minute);
 8002366:	1dbb      	adds	r3, r7, #6
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	0018      	movs	r0, r3
 800236c:	f7ff ffbf 	bl	80022ee <DS3231_SetMinute>
	DS3231_SetSecond(second);
 8002370:	1d7b      	adds	r3, r7, #5
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	0018      	movs	r0, r3
 8002376:	f7ff ffce 	bl	8002316 <DS3231_SetSecond>
}
 800237a:	46c0      	nop			; (mov r8, r8)
 800237c:	46bd      	mov	sp, r7
 800237e:	b003      	add	sp, #12
 8002380:	bd90      	pop	{r4, r7, pc}

08002382 <DS3231_DecodeBCD>:
/**
 * @brief Decodes the raw binary value stored in registers to decimal format.
 * @param bin Binary-coded decimal value retrieved from register, 0 to 255.
 * @return Decoded decimal value.
 */
uint8_t DS3231_DecodeBCD(uint8_t bin) {
 8002382:	b580      	push	{r7, lr}
 8002384:	b082      	sub	sp, #8
 8002386:	af00      	add	r7, sp, #0
 8002388:	0002      	movs	r2, r0
 800238a:	1dfb      	adds	r3, r7, #7
 800238c:	701a      	strb	r2, [r3, #0]
	return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
 800238e:	1dfb      	adds	r3, r7, #7
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	091b      	lsrs	r3, r3, #4
 8002394:	b2db      	uxtb	r3, r3
 8002396:	1c1a      	adds	r2, r3, #0
 8002398:	0092      	lsls	r2, r2, #2
 800239a:	18d3      	adds	r3, r2, r3
 800239c:	18db      	adds	r3, r3, r3
 800239e:	b2da      	uxtb	r2, r3
 80023a0:	1dfb      	adds	r3, r7, #7
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	210f      	movs	r1, #15
 80023a6:	400b      	ands	r3, r1
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	18d3      	adds	r3, r2, r3
 80023ac:	b2db      	uxtb	r3, r3
}
 80023ae:	0018      	movs	r0, r3
 80023b0:	46bd      	mov	sp, r7
 80023b2:	b002      	add	sp, #8
 80023b4:	bd80      	pop	{r7, pc}

080023b6 <DS3231_EncodeBCD>:
/**
 * @brief Encodes a decimal number to binaty-coded decimal for storage in registers.
 * @param dec Decimal number to encode.
 * @return Encoded binary-coded decimal value.
 */
uint8_t DS3231_EncodeBCD(uint8_t dec) {
 80023b6:	b590      	push	{r4, r7, lr}
 80023b8:	b083      	sub	sp, #12
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	0002      	movs	r2, r0
 80023be:	1dfb      	adds	r3, r7, #7
 80023c0:	701a      	strb	r2, [r3, #0]
	return (dec % 10 + ((dec / 10) << 4));
 80023c2:	1dfb      	adds	r3, r7, #7
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	210a      	movs	r1, #10
 80023c8:	0018      	movs	r0, r3
 80023ca:	f7fd ff23 	bl	8000214 <__aeabi_uidivmod>
 80023ce:	000b      	movs	r3, r1
 80023d0:	b2dc      	uxtb	r4, r3
 80023d2:	1dfb      	adds	r3, r7, #7
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	210a      	movs	r1, #10
 80023d8:	0018      	movs	r0, r3
 80023da:	f7fd fe95 	bl	8000108 <__udivsi3>
 80023de:	0003      	movs	r3, r0
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	011b      	lsls	r3, r3, #4
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	18e3      	adds	r3, r4, r3
 80023e8:	b2db      	uxtb	r3, r3
}
 80023ea:	0018      	movs	r0, r3
 80023ec:	46bd      	mov	sp, r7
 80023ee:	b003      	add	sp, #12
 80023f0:	bd90      	pop	{r4, r7, pc}
	...

080023f4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80023fa:	1dfb      	adds	r3, r7, #7
 80023fc:	2200      	movs	r2, #0
 80023fe:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002400:	4b0b      	ldr	r3, [pc, #44]	; (8002430 <HAL_Init+0x3c>)
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	4b0a      	ldr	r3, [pc, #40]	; (8002430 <HAL_Init+0x3c>)
 8002406:	2140      	movs	r1, #64	; 0x40
 8002408:	430a      	orrs	r2, r1
 800240a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800240c:	2003      	movs	r0, #3
 800240e:	f000 f811 	bl	8002434 <HAL_InitTick>
 8002412:	1e03      	subs	r3, r0, #0
 8002414:	d003      	beq.n	800241e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8002416:	1dfb      	adds	r3, r7, #7
 8002418:	2201      	movs	r2, #1
 800241a:	701a      	strb	r2, [r3, #0]
 800241c:	e001      	b.n	8002422 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800241e:	f7ff fb3b 	bl	8001a98 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002422:	1dfb      	adds	r3, r7, #7
 8002424:	781b      	ldrb	r3, [r3, #0]
}
 8002426:	0018      	movs	r0, r3
 8002428:	46bd      	mov	sp, r7
 800242a:	b002      	add	sp, #8
 800242c:	bd80      	pop	{r7, pc}
 800242e:	46c0      	nop			; (mov r8, r8)
 8002430:	40022000 	.word	0x40022000

08002434 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002434:	b590      	push	{r4, r7, lr}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800243c:	4b14      	ldr	r3, [pc, #80]	; (8002490 <HAL_InitTick+0x5c>)
 800243e:	681c      	ldr	r4, [r3, #0]
 8002440:	4b14      	ldr	r3, [pc, #80]	; (8002494 <HAL_InitTick+0x60>)
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	0019      	movs	r1, r3
 8002446:	23fa      	movs	r3, #250	; 0xfa
 8002448:	0098      	lsls	r0, r3, #2
 800244a:	f7fd fe5d 	bl	8000108 <__udivsi3>
 800244e:	0003      	movs	r3, r0
 8002450:	0019      	movs	r1, r3
 8002452:	0020      	movs	r0, r4
 8002454:	f7fd fe58 	bl	8000108 <__udivsi3>
 8002458:	0003      	movs	r3, r0
 800245a:	0018      	movs	r0, r3
 800245c:	f000 f92f 	bl	80026be <HAL_SYSTICK_Config>
 8002460:	1e03      	subs	r3, r0, #0
 8002462:	d001      	beq.n	8002468 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e00f      	b.n	8002488 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2b03      	cmp	r3, #3
 800246c:	d80b      	bhi.n	8002486 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800246e:	6879      	ldr	r1, [r7, #4]
 8002470:	2301      	movs	r3, #1
 8002472:	425b      	negs	r3, r3
 8002474:	2200      	movs	r2, #0
 8002476:	0018      	movs	r0, r3
 8002478:	f000 f8fc 	bl	8002674 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800247c:	4b06      	ldr	r3, [pc, #24]	; (8002498 <HAL_InitTick+0x64>)
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002482:	2300      	movs	r3, #0
 8002484:	e000      	b.n	8002488 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
}
 8002488:	0018      	movs	r0, r3
 800248a:	46bd      	mov	sp, r7
 800248c:	b003      	add	sp, #12
 800248e:	bd90      	pop	{r4, r7, pc}
 8002490:	2000094c 	.word	0x2000094c
 8002494:	20000954 	.word	0x20000954
 8002498:	20000950 	.word	0x20000950

0800249c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024a0:	4b05      	ldr	r3, [pc, #20]	; (80024b8 <HAL_IncTick+0x1c>)
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	001a      	movs	r2, r3
 80024a6:	4b05      	ldr	r3, [pc, #20]	; (80024bc <HAL_IncTick+0x20>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	18d2      	adds	r2, r2, r3
 80024ac:	4b03      	ldr	r3, [pc, #12]	; (80024bc <HAL_IncTick+0x20>)
 80024ae:	601a      	str	r2, [r3, #0]
}
 80024b0:	46c0      	nop			; (mov r8, r8)
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	46c0      	nop			; (mov r8, r8)
 80024b8:	20000954 	.word	0x20000954
 80024bc:	20001748 	.word	0x20001748

080024c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  return uwTick;
 80024c4:	4b02      	ldr	r3, [pc, #8]	; (80024d0 <HAL_GetTick+0x10>)
 80024c6:	681b      	ldr	r3, [r3, #0]
}
 80024c8:	0018      	movs	r0, r3
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	46c0      	nop			; (mov r8, r8)
 80024d0:	20001748 	.word	0x20001748

080024d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024dc:	f7ff fff0 	bl	80024c0 <HAL_GetTick>
 80024e0:	0003      	movs	r3, r0
 80024e2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	3301      	adds	r3, #1
 80024ec:	d005      	beq.n	80024fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024ee:	4b0a      	ldr	r3, [pc, #40]	; (8002518 <HAL_Delay+0x44>)
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	001a      	movs	r2, r3
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	189b      	adds	r3, r3, r2
 80024f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80024fa:	46c0      	nop			; (mov r8, r8)
 80024fc:	f7ff ffe0 	bl	80024c0 <HAL_GetTick>
 8002500:	0002      	movs	r2, r0
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	68fa      	ldr	r2, [r7, #12]
 8002508:	429a      	cmp	r2, r3
 800250a:	d8f7      	bhi.n	80024fc <HAL_Delay+0x28>
  {
  }
}
 800250c:	46c0      	nop			; (mov r8, r8)
 800250e:	46c0      	nop			; (mov r8, r8)
 8002510:	46bd      	mov	sp, r7
 8002512:	b004      	add	sp, #16
 8002514:	bd80      	pop	{r7, pc}
 8002516:	46c0      	nop			; (mov r8, r8)
 8002518:	20000954 	.word	0x20000954

0800251c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	0002      	movs	r2, r0
 8002524:	1dfb      	adds	r3, r7, #7
 8002526:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002528:	1dfb      	adds	r3, r7, #7
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	2b7f      	cmp	r3, #127	; 0x7f
 800252e:	d809      	bhi.n	8002544 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002530:	1dfb      	adds	r3, r7, #7
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	001a      	movs	r2, r3
 8002536:	231f      	movs	r3, #31
 8002538:	401a      	ands	r2, r3
 800253a:	4b04      	ldr	r3, [pc, #16]	; (800254c <__NVIC_EnableIRQ+0x30>)
 800253c:	2101      	movs	r1, #1
 800253e:	4091      	lsls	r1, r2
 8002540:	000a      	movs	r2, r1
 8002542:	601a      	str	r2, [r3, #0]
  }
}
 8002544:	46c0      	nop			; (mov r8, r8)
 8002546:	46bd      	mov	sp, r7
 8002548:	b002      	add	sp, #8
 800254a:	bd80      	pop	{r7, pc}
 800254c:	e000e100 	.word	0xe000e100

08002550 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002550:	b590      	push	{r4, r7, lr}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	0002      	movs	r2, r0
 8002558:	6039      	str	r1, [r7, #0]
 800255a:	1dfb      	adds	r3, r7, #7
 800255c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800255e:	1dfb      	adds	r3, r7, #7
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	2b7f      	cmp	r3, #127	; 0x7f
 8002564:	d828      	bhi.n	80025b8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002566:	4a2f      	ldr	r2, [pc, #188]	; (8002624 <__NVIC_SetPriority+0xd4>)
 8002568:	1dfb      	adds	r3, r7, #7
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	b25b      	sxtb	r3, r3
 800256e:	089b      	lsrs	r3, r3, #2
 8002570:	33c0      	adds	r3, #192	; 0xc0
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	589b      	ldr	r3, [r3, r2]
 8002576:	1dfa      	adds	r2, r7, #7
 8002578:	7812      	ldrb	r2, [r2, #0]
 800257a:	0011      	movs	r1, r2
 800257c:	2203      	movs	r2, #3
 800257e:	400a      	ands	r2, r1
 8002580:	00d2      	lsls	r2, r2, #3
 8002582:	21ff      	movs	r1, #255	; 0xff
 8002584:	4091      	lsls	r1, r2
 8002586:	000a      	movs	r2, r1
 8002588:	43d2      	mvns	r2, r2
 800258a:	401a      	ands	r2, r3
 800258c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	019b      	lsls	r3, r3, #6
 8002592:	22ff      	movs	r2, #255	; 0xff
 8002594:	401a      	ands	r2, r3
 8002596:	1dfb      	adds	r3, r7, #7
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	0018      	movs	r0, r3
 800259c:	2303      	movs	r3, #3
 800259e:	4003      	ands	r3, r0
 80025a0:	00db      	lsls	r3, r3, #3
 80025a2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80025a4:	481f      	ldr	r0, [pc, #124]	; (8002624 <__NVIC_SetPriority+0xd4>)
 80025a6:	1dfb      	adds	r3, r7, #7
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	b25b      	sxtb	r3, r3
 80025ac:	089b      	lsrs	r3, r3, #2
 80025ae:	430a      	orrs	r2, r1
 80025b0:	33c0      	adds	r3, #192	; 0xc0
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80025b6:	e031      	b.n	800261c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80025b8:	4a1b      	ldr	r2, [pc, #108]	; (8002628 <__NVIC_SetPriority+0xd8>)
 80025ba:	1dfb      	adds	r3, r7, #7
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	0019      	movs	r1, r3
 80025c0:	230f      	movs	r3, #15
 80025c2:	400b      	ands	r3, r1
 80025c4:	3b08      	subs	r3, #8
 80025c6:	089b      	lsrs	r3, r3, #2
 80025c8:	3306      	adds	r3, #6
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	18d3      	adds	r3, r2, r3
 80025ce:	3304      	adds	r3, #4
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	1dfa      	adds	r2, r7, #7
 80025d4:	7812      	ldrb	r2, [r2, #0]
 80025d6:	0011      	movs	r1, r2
 80025d8:	2203      	movs	r2, #3
 80025da:	400a      	ands	r2, r1
 80025dc:	00d2      	lsls	r2, r2, #3
 80025de:	21ff      	movs	r1, #255	; 0xff
 80025e0:	4091      	lsls	r1, r2
 80025e2:	000a      	movs	r2, r1
 80025e4:	43d2      	mvns	r2, r2
 80025e6:	401a      	ands	r2, r3
 80025e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	019b      	lsls	r3, r3, #6
 80025ee:	22ff      	movs	r2, #255	; 0xff
 80025f0:	401a      	ands	r2, r3
 80025f2:	1dfb      	adds	r3, r7, #7
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	0018      	movs	r0, r3
 80025f8:	2303      	movs	r3, #3
 80025fa:	4003      	ands	r3, r0
 80025fc:	00db      	lsls	r3, r3, #3
 80025fe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002600:	4809      	ldr	r0, [pc, #36]	; (8002628 <__NVIC_SetPriority+0xd8>)
 8002602:	1dfb      	adds	r3, r7, #7
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	001c      	movs	r4, r3
 8002608:	230f      	movs	r3, #15
 800260a:	4023      	ands	r3, r4
 800260c:	3b08      	subs	r3, #8
 800260e:	089b      	lsrs	r3, r3, #2
 8002610:	430a      	orrs	r2, r1
 8002612:	3306      	adds	r3, #6
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	18c3      	adds	r3, r0, r3
 8002618:	3304      	adds	r3, #4
 800261a:	601a      	str	r2, [r3, #0]
}
 800261c:	46c0      	nop			; (mov r8, r8)
 800261e:	46bd      	mov	sp, r7
 8002620:	b003      	add	sp, #12
 8002622:	bd90      	pop	{r4, r7, pc}
 8002624:	e000e100 	.word	0xe000e100
 8002628:	e000ed00 	.word	0xe000ed00

0800262c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	1e5a      	subs	r2, r3, #1
 8002638:	2380      	movs	r3, #128	; 0x80
 800263a:	045b      	lsls	r3, r3, #17
 800263c:	429a      	cmp	r2, r3
 800263e:	d301      	bcc.n	8002644 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002640:	2301      	movs	r3, #1
 8002642:	e010      	b.n	8002666 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002644:	4b0a      	ldr	r3, [pc, #40]	; (8002670 <SysTick_Config+0x44>)
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	3a01      	subs	r2, #1
 800264a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800264c:	2301      	movs	r3, #1
 800264e:	425b      	negs	r3, r3
 8002650:	2103      	movs	r1, #3
 8002652:	0018      	movs	r0, r3
 8002654:	f7ff ff7c 	bl	8002550 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002658:	4b05      	ldr	r3, [pc, #20]	; (8002670 <SysTick_Config+0x44>)
 800265a:	2200      	movs	r2, #0
 800265c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800265e:	4b04      	ldr	r3, [pc, #16]	; (8002670 <SysTick_Config+0x44>)
 8002660:	2207      	movs	r2, #7
 8002662:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002664:	2300      	movs	r3, #0
}
 8002666:	0018      	movs	r0, r3
 8002668:	46bd      	mov	sp, r7
 800266a:	b002      	add	sp, #8
 800266c:	bd80      	pop	{r7, pc}
 800266e:	46c0      	nop			; (mov r8, r8)
 8002670:	e000e010 	.word	0xe000e010

08002674 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	60b9      	str	r1, [r7, #8]
 800267c:	607a      	str	r2, [r7, #4]
 800267e:	210f      	movs	r1, #15
 8002680:	187b      	adds	r3, r7, r1
 8002682:	1c02      	adds	r2, r0, #0
 8002684:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002686:	68ba      	ldr	r2, [r7, #8]
 8002688:	187b      	adds	r3, r7, r1
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	b25b      	sxtb	r3, r3
 800268e:	0011      	movs	r1, r2
 8002690:	0018      	movs	r0, r3
 8002692:	f7ff ff5d 	bl	8002550 <__NVIC_SetPriority>
}
 8002696:	46c0      	nop			; (mov r8, r8)
 8002698:	46bd      	mov	sp, r7
 800269a:	b004      	add	sp, #16
 800269c:	bd80      	pop	{r7, pc}

0800269e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800269e:	b580      	push	{r7, lr}
 80026a0:	b082      	sub	sp, #8
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	0002      	movs	r2, r0
 80026a6:	1dfb      	adds	r3, r7, #7
 80026a8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026aa:	1dfb      	adds	r3, r7, #7
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	b25b      	sxtb	r3, r3
 80026b0:	0018      	movs	r0, r3
 80026b2:	f7ff ff33 	bl	800251c <__NVIC_EnableIRQ>
}
 80026b6:	46c0      	nop			; (mov r8, r8)
 80026b8:	46bd      	mov	sp, r7
 80026ba:	b002      	add	sp, #8
 80026bc:	bd80      	pop	{r7, pc}

080026be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026be:	b580      	push	{r7, lr}
 80026c0:	b082      	sub	sp, #8
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	0018      	movs	r0, r3
 80026ca:	f7ff ffaf 	bl	800262c <SysTick_Config>
 80026ce:	0003      	movs	r3, r0
}
 80026d0:	0018      	movs	r0, r3
 80026d2:	46bd      	mov	sp, r7
 80026d4:	b002      	add	sp, #8
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d101      	bne.n	80026ea <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e061      	b.n	80027ae <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a32      	ldr	r2, [pc, #200]	; (80027b8 <HAL_DMA_Init+0xe0>)
 80026f0:	4694      	mov	ip, r2
 80026f2:	4463      	add	r3, ip
 80026f4:	2114      	movs	r1, #20
 80026f6:	0018      	movs	r0, r3
 80026f8:	f7fd fd06 	bl	8000108 <__udivsi3>
 80026fc:	0003      	movs	r3, r0
 80026fe:	009a      	lsls	r2, r3, #2
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	4a2d      	ldr	r2, [pc, #180]	; (80027bc <HAL_DMA_Init+0xe4>)
 8002708:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2225      	movs	r2, #37	; 0x25
 800270e:	2102      	movs	r1, #2
 8002710:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	4a28      	ldr	r2, [pc, #160]	; (80027c0 <HAL_DMA_Init+0xe8>)
 800271e:	4013      	ands	r3, r2
 8002720:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800272a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	691b      	ldr	r3, [r3, #16]
 8002730:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002736:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	699b      	ldr	r3, [r3, #24]
 800273c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002742:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a1b      	ldr	r3, [r3, #32]
 8002748:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800274a:	68fa      	ldr	r2, [r7, #12]
 800274c:	4313      	orrs	r3, r2
 800274e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	68fa      	ldr	r2, [r7, #12]
 8002756:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	689a      	ldr	r2, [r3, #8]
 800275c:	2380      	movs	r3, #128	; 0x80
 800275e:	01db      	lsls	r3, r3, #7
 8002760:	429a      	cmp	r2, r3
 8002762:	d018      	beq.n	8002796 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002764:	4b17      	ldr	r3, [pc, #92]	; (80027c4 <HAL_DMA_Init+0xec>)
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276c:	211c      	movs	r1, #28
 800276e:	400b      	ands	r3, r1
 8002770:	210f      	movs	r1, #15
 8002772:	4099      	lsls	r1, r3
 8002774:	000b      	movs	r3, r1
 8002776:	43d9      	mvns	r1, r3
 8002778:	4b12      	ldr	r3, [pc, #72]	; (80027c4 <HAL_DMA_Init+0xec>)
 800277a:	400a      	ands	r2, r1
 800277c:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800277e:	4b11      	ldr	r3, [pc, #68]	; (80027c4 <HAL_DMA_Init+0xec>)
 8002780:	6819      	ldr	r1, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685a      	ldr	r2, [r3, #4]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800278a:	201c      	movs	r0, #28
 800278c:	4003      	ands	r3, r0
 800278e:	409a      	lsls	r2, r3
 8002790:	4b0c      	ldr	r3, [pc, #48]	; (80027c4 <HAL_DMA_Init+0xec>)
 8002792:	430a      	orrs	r2, r1
 8002794:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2225      	movs	r2, #37	; 0x25
 80027a0:	2101      	movs	r1, #1
 80027a2:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2224      	movs	r2, #36	; 0x24
 80027a8:	2100      	movs	r1, #0
 80027aa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80027ac:	2300      	movs	r3, #0
}
 80027ae:	0018      	movs	r0, r3
 80027b0:	46bd      	mov	sp, r7
 80027b2:	b004      	add	sp, #16
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	46c0      	nop			; (mov r8, r8)
 80027b8:	bffdfff8 	.word	0xbffdfff8
 80027bc:	40020000 	.word	0x40020000
 80027c0:	ffff800f 	.word	0xffff800f
 80027c4:	400200a8 	.word	0x400200a8

080027c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b086      	sub	sp, #24
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	607a      	str	r2, [r7, #4]
 80027d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027d6:	2317      	movs	r3, #23
 80027d8:	18fb      	adds	r3, r7, r3
 80027da:	2200      	movs	r2, #0
 80027dc:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2224      	movs	r2, #36	; 0x24
 80027e2:	5c9b      	ldrb	r3, [r3, r2]
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d101      	bne.n	80027ec <HAL_DMA_Start_IT+0x24>
 80027e8:	2302      	movs	r3, #2
 80027ea:	e04f      	b.n	800288c <HAL_DMA_Start_IT+0xc4>
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2224      	movs	r2, #36	; 0x24
 80027f0:	2101      	movs	r1, #1
 80027f2:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2225      	movs	r2, #37	; 0x25
 80027f8:	5c9b      	ldrb	r3, [r3, r2]
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d13a      	bne.n	8002876 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2225      	movs	r2, #37	; 0x25
 8002804:	2102      	movs	r1, #2
 8002806:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2200      	movs	r2, #0
 800280c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2101      	movs	r1, #1
 800281a:	438a      	bics	r2, r1
 800281c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	68b9      	ldr	r1, [r7, #8]
 8002824:	68f8      	ldr	r0, [r7, #12]
 8002826:	f000 f8e3 	bl	80029f0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282e:	2b00      	cmp	r3, #0
 8002830:	d008      	beq.n	8002844 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	210e      	movs	r1, #14
 800283e:	430a      	orrs	r2, r1
 8002840:	601a      	str	r2, [r3, #0]
 8002842:	e00f      	b.n	8002864 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2104      	movs	r1, #4
 8002850:	438a      	bics	r2, r1
 8002852:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	210a      	movs	r1, #10
 8002860:	430a      	orrs	r2, r1
 8002862:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	2101      	movs	r1, #1
 8002870:	430a      	orrs	r2, r1
 8002872:	601a      	str	r2, [r3, #0]
 8002874:	e007      	b.n	8002886 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2224      	movs	r2, #36	; 0x24
 800287a:	2100      	movs	r1, #0
 800287c:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800287e:	2317      	movs	r3, #23
 8002880:	18fb      	adds	r3, r7, r3
 8002882:	2202      	movs	r2, #2
 8002884:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8002886:	2317      	movs	r3, #23
 8002888:	18fb      	adds	r3, r7, r3
 800288a:	781b      	ldrb	r3, [r3, #0]
}
 800288c:	0018      	movs	r0, r3
 800288e:	46bd      	mov	sp, r7
 8002890:	b006      	add	sp, #24
 8002892:	bd80      	pop	{r7, pc}

08002894 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b0:	221c      	movs	r2, #28
 80028b2:	4013      	ands	r3, r2
 80028b4:	2204      	movs	r2, #4
 80028b6:	409a      	lsls	r2, r3
 80028b8:	0013      	movs	r3, r2
 80028ba:	68fa      	ldr	r2, [r7, #12]
 80028bc:	4013      	ands	r3, r2
 80028be:	d026      	beq.n	800290e <HAL_DMA_IRQHandler+0x7a>
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	2204      	movs	r2, #4
 80028c4:	4013      	ands	r3, r2
 80028c6:	d022      	beq.n	800290e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	2220      	movs	r2, #32
 80028d0:	4013      	ands	r3, r2
 80028d2:	d107      	bne.n	80028e4 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2104      	movs	r1, #4
 80028e0:	438a      	bics	r2, r1
 80028e2:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e8:	221c      	movs	r2, #28
 80028ea:	401a      	ands	r2, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f0:	2104      	movs	r1, #4
 80028f2:	4091      	lsls	r1, r2
 80028f4:	000a      	movs	r2, r1
 80028f6:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d100      	bne.n	8002902 <HAL_DMA_IRQHandler+0x6e>
 8002900:	e071      	b.n	80029e6 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	0010      	movs	r0, r2
 800290a:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 800290c:	e06b      	b.n	80029e6 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002912:	221c      	movs	r2, #28
 8002914:	4013      	ands	r3, r2
 8002916:	2202      	movs	r2, #2
 8002918:	409a      	lsls	r2, r3
 800291a:	0013      	movs	r3, r2
 800291c:	68fa      	ldr	r2, [r7, #12]
 800291e:	4013      	ands	r3, r2
 8002920:	d02d      	beq.n	800297e <HAL_DMA_IRQHandler+0xea>
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	2202      	movs	r2, #2
 8002926:	4013      	ands	r3, r2
 8002928:	d029      	beq.n	800297e <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2220      	movs	r2, #32
 8002932:	4013      	ands	r3, r2
 8002934:	d10b      	bne.n	800294e <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	210a      	movs	r1, #10
 8002942:	438a      	bics	r2, r1
 8002944:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2225      	movs	r2, #37	; 0x25
 800294a:	2101      	movs	r1, #1
 800294c:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002952:	221c      	movs	r2, #28
 8002954:	401a      	ands	r2, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295a:	2102      	movs	r1, #2
 800295c:	4091      	lsls	r1, r2
 800295e:	000a      	movs	r2, r1
 8002960:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2224      	movs	r2, #36	; 0x24
 8002966:	2100      	movs	r1, #0
 8002968:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800296e:	2b00      	cmp	r3, #0
 8002970:	d039      	beq.n	80029e6 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	0010      	movs	r0, r2
 800297a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800297c:	e033      	b.n	80029e6 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002982:	221c      	movs	r2, #28
 8002984:	4013      	ands	r3, r2
 8002986:	2208      	movs	r2, #8
 8002988:	409a      	lsls	r2, r3
 800298a:	0013      	movs	r3, r2
 800298c:	68fa      	ldr	r2, [r7, #12]
 800298e:	4013      	ands	r3, r2
 8002990:	d02a      	beq.n	80029e8 <HAL_DMA_IRQHandler+0x154>
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	2208      	movs	r2, #8
 8002996:	4013      	ands	r3, r2
 8002998:	d026      	beq.n	80029e8 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	210e      	movs	r1, #14
 80029a6:	438a      	bics	r2, r1
 80029a8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ae:	221c      	movs	r2, #28
 80029b0:	401a      	ands	r2, r3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b6:	2101      	movs	r1, #1
 80029b8:	4091      	lsls	r1, r2
 80029ba:	000a      	movs	r2, r1
 80029bc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2201      	movs	r2, #1
 80029c2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2225      	movs	r2, #37	; 0x25
 80029c8:	2101      	movs	r1, #1
 80029ca:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2224      	movs	r2, #36	; 0x24
 80029d0:	2100      	movs	r1, #0
 80029d2:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d005      	beq.n	80029e8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	0010      	movs	r0, r2
 80029e4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80029e6:	46c0      	nop			; (mov r8, r8)
 80029e8:	46c0      	nop			; (mov r8, r8)
}
 80029ea:	46bd      	mov	sp, r7
 80029ec:	b004      	add	sp, #16
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	607a      	str	r2, [r7, #4]
 80029fc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a02:	221c      	movs	r2, #28
 8002a04:	401a      	ands	r2, r3
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0a:	2101      	movs	r1, #1
 8002a0c:	4091      	lsls	r1, r2
 8002a0e:	000a      	movs	r2, r1
 8002a10:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	683a      	ldr	r2, [r7, #0]
 8002a18:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	2b10      	cmp	r3, #16
 8002a20:	d108      	bne.n	8002a34 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	68ba      	ldr	r2, [r7, #8]
 8002a30:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002a32:	e007      	b.n	8002a44 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	68ba      	ldr	r2, [r7, #8]
 8002a3a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	60da      	str	r2, [r3, #12]
}
 8002a44:	46c0      	nop			; (mov r8, r8)
 8002a46:	46bd      	mov	sp, r7
 8002a48:	b004      	add	sp, #16
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b086      	sub	sp, #24
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002a56:	2300      	movs	r3, #0
 8002a58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002a62:	e149      	b.n	8002cf8 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2101      	movs	r1, #1
 8002a6a:	697a      	ldr	r2, [r7, #20]
 8002a6c:	4091      	lsls	r1, r2
 8002a6e:	000a      	movs	r2, r1
 8002a70:	4013      	ands	r3, r2
 8002a72:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d100      	bne.n	8002a7c <HAL_GPIO_Init+0x30>
 8002a7a:	e13a      	b.n	8002cf2 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	2203      	movs	r2, #3
 8002a82:	4013      	ands	r3, r2
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d005      	beq.n	8002a94 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	2203      	movs	r2, #3
 8002a8e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d130      	bne.n	8002af6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	005b      	lsls	r3, r3, #1
 8002a9e:	2203      	movs	r2, #3
 8002aa0:	409a      	lsls	r2, r3
 8002aa2:	0013      	movs	r3, r2
 8002aa4:	43da      	mvns	r2, r3
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	68da      	ldr	r2, [r3, #12]
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	005b      	lsls	r3, r3, #1
 8002ab4:	409a      	lsls	r2, r3
 8002ab6:	0013      	movs	r3, r2
 8002ab8:	693a      	ldr	r2, [r7, #16]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	693a      	ldr	r2, [r7, #16]
 8002ac2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002aca:	2201      	movs	r2, #1
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	409a      	lsls	r2, r3
 8002ad0:	0013      	movs	r3, r2
 8002ad2:	43da      	mvns	r2, r3
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	091b      	lsrs	r3, r3, #4
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	401a      	ands	r2, r3
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	409a      	lsls	r2, r3
 8002ae8:	0013      	movs	r3, r2
 8002aea:	693a      	ldr	r2, [r7, #16]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	693a      	ldr	r2, [r7, #16]
 8002af4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	2203      	movs	r2, #3
 8002afc:	4013      	ands	r3, r2
 8002afe:	2b03      	cmp	r3, #3
 8002b00:	d017      	beq.n	8002b32 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	005b      	lsls	r3, r3, #1
 8002b0c:	2203      	movs	r2, #3
 8002b0e:	409a      	lsls	r2, r3
 8002b10:	0013      	movs	r3, r2
 8002b12:	43da      	mvns	r2, r3
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	4013      	ands	r3, r2
 8002b18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	689a      	ldr	r2, [r3, #8]
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	005b      	lsls	r3, r3, #1
 8002b22:	409a      	lsls	r2, r3
 8002b24:	0013      	movs	r3, r2
 8002b26:	693a      	ldr	r2, [r7, #16]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	693a      	ldr	r2, [r7, #16]
 8002b30:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	2203      	movs	r2, #3
 8002b38:	4013      	ands	r3, r2
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d123      	bne.n	8002b86 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	08da      	lsrs	r2, r3, #3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	3208      	adds	r2, #8
 8002b46:	0092      	lsls	r2, r2, #2
 8002b48:	58d3      	ldr	r3, [r2, r3]
 8002b4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	2207      	movs	r2, #7
 8002b50:	4013      	ands	r3, r2
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	220f      	movs	r2, #15
 8002b56:	409a      	lsls	r2, r3
 8002b58:	0013      	movs	r3, r2
 8002b5a:	43da      	mvns	r2, r3
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	4013      	ands	r3, r2
 8002b60:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	691a      	ldr	r2, [r3, #16]
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	2107      	movs	r1, #7
 8002b6a:	400b      	ands	r3, r1
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	409a      	lsls	r2, r3
 8002b70:	0013      	movs	r3, r2
 8002b72:	693a      	ldr	r2, [r7, #16]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	08da      	lsrs	r2, r3, #3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	3208      	adds	r2, #8
 8002b80:	0092      	lsls	r2, r2, #2
 8002b82:	6939      	ldr	r1, [r7, #16]
 8002b84:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	005b      	lsls	r3, r3, #1
 8002b90:	2203      	movs	r2, #3
 8002b92:	409a      	lsls	r2, r3
 8002b94:	0013      	movs	r3, r2
 8002b96:	43da      	mvns	r2, r3
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	2203      	movs	r2, #3
 8002ba4:	401a      	ands	r2, r3
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	005b      	lsls	r3, r3, #1
 8002baa:	409a      	lsls	r2, r3
 8002bac:	0013      	movs	r3, r2
 8002bae:	693a      	ldr	r2, [r7, #16]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	693a      	ldr	r2, [r7, #16]
 8002bb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	685a      	ldr	r2, [r3, #4]
 8002bbe:	23c0      	movs	r3, #192	; 0xc0
 8002bc0:	029b      	lsls	r3, r3, #10
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	d100      	bne.n	8002bc8 <HAL_GPIO_Init+0x17c>
 8002bc6:	e094      	b.n	8002cf2 <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bc8:	4b51      	ldr	r3, [pc, #324]	; (8002d10 <HAL_GPIO_Init+0x2c4>)
 8002bca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bcc:	4b50      	ldr	r3, [pc, #320]	; (8002d10 <HAL_GPIO_Init+0x2c4>)
 8002bce:	2101      	movs	r1, #1
 8002bd0:	430a      	orrs	r2, r1
 8002bd2:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bd4:	4a4f      	ldr	r2, [pc, #316]	; (8002d14 <HAL_GPIO_Init+0x2c8>)
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	089b      	lsrs	r3, r3, #2
 8002bda:	3302      	adds	r3, #2
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	589b      	ldr	r3, [r3, r2]
 8002be0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	2203      	movs	r2, #3
 8002be6:	4013      	ands	r3, r2
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	220f      	movs	r2, #15
 8002bec:	409a      	lsls	r2, r3
 8002bee:	0013      	movs	r3, r2
 8002bf0:	43da      	mvns	r2, r3
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	23a0      	movs	r3, #160	; 0xa0
 8002bfc:	05db      	lsls	r3, r3, #23
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d013      	beq.n	8002c2a <HAL_GPIO_Init+0x1de>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a44      	ldr	r2, [pc, #272]	; (8002d18 <HAL_GPIO_Init+0x2cc>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d00d      	beq.n	8002c26 <HAL_GPIO_Init+0x1da>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a43      	ldr	r2, [pc, #268]	; (8002d1c <HAL_GPIO_Init+0x2d0>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d007      	beq.n	8002c22 <HAL_GPIO_Init+0x1d6>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a42      	ldr	r2, [pc, #264]	; (8002d20 <HAL_GPIO_Init+0x2d4>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d101      	bne.n	8002c1e <HAL_GPIO_Init+0x1d2>
 8002c1a:	2305      	movs	r3, #5
 8002c1c:	e006      	b.n	8002c2c <HAL_GPIO_Init+0x1e0>
 8002c1e:	2306      	movs	r3, #6
 8002c20:	e004      	b.n	8002c2c <HAL_GPIO_Init+0x1e0>
 8002c22:	2302      	movs	r3, #2
 8002c24:	e002      	b.n	8002c2c <HAL_GPIO_Init+0x1e0>
 8002c26:	2301      	movs	r3, #1
 8002c28:	e000      	b.n	8002c2c <HAL_GPIO_Init+0x1e0>
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	697a      	ldr	r2, [r7, #20]
 8002c2e:	2103      	movs	r1, #3
 8002c30:	400a      	ands	r2, r1
 8002c32:	0092      	lsls	r2, r2, #2
 8002c34:	4093      	lsls	r3, r2
 8002c36:	693a      	ldr	r2, [r7, #16]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c3c:	4935      	ldr	r1, [pc, #212]	; (8002d14 <HAL_GPIO_Init+0x2c8>)
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	089b      	lsrs	r3, r3, #2
 8002c42:	3302      	adds	r3, #2
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	693a      	ldr	r2, [r7, #16]
 8002c48:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c4a:	4b36      	ldr	r3, [pc, #216]	; (8002d24 <HAL_GPIO_Init+0x2d8>)
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	43da      	mvns	r2, r3
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	4013      	ands	r3, r2
 8002c58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	685a      	ldr	r2, [r3, #4]
 8002c5e:	2380      	movs	r3, #128	; 0x80
 8002c60:	035b      	lsls	r3, r3, #13
 8002c62:	4013      	ands	r3, r2
 8002c64:	d003      	beq.n	8002c6e <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 8002c66:	693a      	ldr	r2, [r7, #16]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002c6e:	4b2d      	ldr	r3, [pc, #180]	; (8002d24 <HAL_GPIO_Init+0x2d8>)
 8002c70:	693a      	ldr	r2, [r7, #16]
 8002c72:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002c74:	4b2b      	ldr	r3, [pc, #172]	; (8002d24 <HAL_GPIO_Init+0x2d8>)
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	43da      	mvns	r2, r3
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	4013      	ands	r3, r2
 8002c82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	685a      	ldr	r2, [r3, #4]
 8002c88:	2380      	movs	r3, #128	; 0x80
 8002c8a:	039b      	lsls	r3, r3, #14
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	d003      	beq.n	8002c98 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 8002c90:	693a      	ldr	r2, [r7, #16]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002c98:	4b22      	ldr	r3, [pc, #136]	; (8002d24 <HAL_GPIO_Init+0x2d8>)
 8002c9a:	693a      	ldr	r2, [r7, #16]
 8002c9c:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8002c9e:	4b21      	ldr	r3, [pc, #132]	; (8002d24 <HAL_GPIO_Init+0x2d8>)
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	43da      	mvns	r2, r3
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	4013      	ands	r3, r2
 8002cac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	685a      	ldr	r2, [r3, #4]
 8002cb2:	2380      	movs	r3, #128	; 0x80
 8002cb4:	029b      	lsls	r3, r3, #10
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	d003      	beq.n	8002cc2 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8002cba:	693a      	ldr	r2, [r7, #16]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002cc2:	4b18      	ldr	r3, [pc, #96]	; (8002d24 <HAL_GPIO_Init+0x2d8>)
 8002cc4:	693a      	ldr	r2, [r7, #16]
 8002cc6:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cc8:	4b16      	ldr	r3, [pc, #88]	; (8002d24 <HAL_GPIO_Init+0x2d8>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	43da      	mvns	r2, r3
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	685a      	ldr	r2, [r3, #4]
 8002cdc:	2380      	movs	r3, #128	; 0x80
 8002cde:	025b      	lsls	r3, r3, #9
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	d003      	beq.n	8002cec <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8002ce4:	693a      	ldr	r2, [r7, #16]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002cec:	4b0d      	ldr	r3, [pc, #52]	; (8002d24 <HAL_GPIO_Init+0x2d8>)
 8002cee:	693a      	ldr	r2, [r7, #16]
 8002cf0:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	40da      	lsrs	r2, r3
 8002d00:	1e13      	subs	r3, r2, #0
 8002d02:	d000      	beq.n	8002d06 <HAL_GPIO_Init+0x2ba>
 8002d04:	e6ae      	b.n	8002a64 <HAL_GPIO_Init+0x18>
  }
}
 8002d06:	46c0      	nop			; (mov r8, r8)
 8002d08:	46c0      	nop			; (mov r8, r8)
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	b006      	add	sp, #24
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	40021000 	.word	0x40021000
 8002d14:	40010000 	.word	0x40010000
 8002d18:	50000400 	.word	0x50000400
 8002d1c:	50000800 	.word	0x50000800
 8002d20:	50001c00 	.word	0x50001c00
 8002d24:	40010400 	.word	0x40010400

08002d28 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	000a      	movs	r2, r1
 8002d32:	1cbb      	adds	r3, r7, #2
 8002d34:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	1cba      	adds	r2, r7, #2
 8002d3c:	8812      	ldrh	r2, [r2, #0]
 8002d3e:	4013      	ands	r3, r2
 8002d40:	d004      	beq.n	8002d4c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002d42:	230f      	movs	r3, #15
 8002d44:	18fb      	adds	r3, r7, r3
 8002d46:	2201      	movs	r2, #1
 8002d48:	701a      	strb	r2, [r3, #0]
 8002d4a:	e003      	b.n	8002d54 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d4c:	230f      	movs	r3, #15
 8002d4e:	18fb      	adds	r3, r7, r3
 8002d50:	2200      	movs	r2, #0
 8002d52:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002d54:	230f      	movs	r3, #15
 8002d56:	18fb      	adds	r3, r7, r3
 8002d58:	781b      	ldrb	r3, [r3, #0]
}
 8002d5a:	0018      	movs	r0, r3
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	b004      	add	sp, #16
 8002d60:	bd80      	pop	{r7, pc}

08002d62 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d62:	b580      	push	{r7, lr}
 8002d64:	b082      	sub	sp, #8
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	6078      	str	r0, [r7, #4]
 8002d6a:	0008      	movs	r0, r1
 8002d6c:	0011      	movs	r1, r2
 8002d6e:	1cbb      	adds	r3, r7, #2
 8002d70:	1c02      	adds	r2, r0, #0
 8002d72:	801a      	strh	r2, [r3, #0]
 8002d74:	1c7b      	adds	r3, r7, #1
 8002d76:	1c0a      	adds	r2, r1, #0
 8002d78:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d7a:	1c7b      	adds	r3, r7, #1
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d004      	beq.n	8002d8c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d82:	1cbb      	adds	r3, r7, #2
 8002d84:	881a      	ldrh	r2, [r3, #0]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002d8a:	e003      	b.n	8002d94 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8002d8c:	1cbb      	adds	r3, r7, #2
 8002d8e:	881a      	ldrh	r2, [r3, #0]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002d94:	46c0      	nop			; (mov r8, r8)
 8002d96:	46bd      	mov	sp, r7
 8002d98:	b002      	add	sp, #8
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	000a      	movs	r2, r1
 8002da6:	1cbb      	adds	r3, r7, #2
 8002da8:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	695b      	ldr	r3, [r3, #20]
 8002dae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002db0:	1cbb      	adds	r3, r7, #2
 8002db2:	881b      	ldrh	r3, [r3, #0]
 8002db4:	68fa      	ldr	r2, [r7, #12]
 8002db6:	4013      	ands	r3, r2
 8002db8:	041a      	lsls	r2, r3, #16
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	43db      	mvns	r3, r3
 8002dbe:	1cb9      	adds	r1, r7, #2
 8002dc0:	8809      	ldrh	r1, [r1, #0]
 8002dc2:	400b      	ands	r3, r1
 8002dc4:	431a      	orrs	r2, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	619a      	str	r2, [r3, #24]
}
 8002dca:	46c0      	nop			; (mov r8, r8)
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	b004      	add	sp, #16
 8002dd0:	bd80      	pop	{r7, pc}
	...

08002dd4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d101      	bne.n	8002de6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e082      	b.n	8002eec <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2241      	movs	r2, #65	; 0x41
 8002dea:	5c9b      	ldrb	r3, [r3, r2]
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d107      	bne.n	8002e02 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2240      	movs	r2, #64	; 0x40
 8002df6:	2100      	movs	r1, #0
 8002df8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	0018      	movs	r0, r3
 8002dfe:	f7fe fe5f 	bl	8001ac0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2241      	movs	r2, #65	; 0x41
 8002e06:	2124      	movs	r1, #36	; 0x24
 8002e08:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2101      	movs	r1, #1
 8002e16:	438a      	bics	r2, r1
 8002e18:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685a      	ldr	r2, [r3, #4]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4934      	ldr	r1, [pc, #208]	; (8002ef4 <HAL_I2C_Init+0x120>)
 8002e24:	400a      	ands	r2, r1
 8002e26:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	689a      	ldr	r2, [r3, #8]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4931      	ldr	r1, [pc, #196]	; (8002ef8 <HAL_I2C_Init+0x124>)
 8002e34:	400a      	ands	r2, r1
 8002e36:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d108      	bne.n	8002e52 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	689a      	ldr	r2, [r3, #8]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2180      	movs	r1, #128	; 0x80
 8002e4a:	0209      	lsls	r1, r1, #8
 8002e4c:	430a      	orrs	r2, r1
 8002e4e:	609a      	str	r2, [r3, #8]
 8002e50:	e007      	b.n	8002e62 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	689a      	ldr	r2, [r3, #8]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2184      	movs	r1, #132	; 0x84
 8002e5c:	0209      	lsls	r1, r1, #8
 8002e5e:	430a      	orrs	r2, r1
 8002e60:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d104      	bne.n	8002e74 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2280      	movs	r2, #128	; 0x80
 8002e70:	0112      	lsls	r2, r2, #4
 8002e72:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	685a      	ldr	r2, [r3, #4]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	491f      	ldr	r1, [pc, #124]	; (8002efc <HAL_I2C_Init+0x128>)
 8002e80:	430a      	orrs	r2, r1
 8002e82:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	68da      	ldr	r2, [r3, #12]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	491a      	ldr	r1, [pc, #104]	; (8002ef8 <HAL_I2C_Init+0x124>)
 8002e90:	400a      	ands	r2, r1
 8002e92:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	691a      	ldr	r2, [r3, #16]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	695b      	ldr	r3, [r3, #20]
 8002e9c:	431a      	orrs	r2, r3
 8002e9e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	699b      	ldr	r3, [r3, #24]
 8002ea4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	430a      	orrs	r2, r1
 8002eac:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	69d9      	ldr	r1, [r3, #28]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a1a      	ldr	r2, [r3, #32]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	430a      	orrs	r2, r1
 8002ebc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2101      	movs	r1, #1
 8002eca:	430a      	orrs	r2, r1
 8002ecc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2241      	movs	r2, #65	; 0x41
 8002ed8:	2120      	movs	r1, #32
 8002eda:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2242      	movs	r2, #66	; 0x42
 8002ee6:	2100      	movs	r1, #0
 8002ee8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002eea:	2300      	movs	r3, #0
}
 8002eec:	0018      	movs	r0, r3
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	b002      	add	sp, #8
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	f0ffffff 	.word	0xf0ffffff
 8002ef8:	ffff7fff 	.word	0xffff7fff
 8002efc:	02008000 	.word	0x02008000

08002f00 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002f00:	b590      	push	{r4, r7, lr}
 8002f02:	b089      	sub	sp, #36	; 0x24
 8002f04:	af02      	add	r7, sp, #8
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	0008      	movs	r0, r1
 8002f0a:	607a      	str	r2, [r7, #4]
 8002f0c:	0019      	movs	r1, r3
 8002f0e:	230a      	movs	r3, #10
 8002f10:	18fb      	adds	r3, r7, r3
 8002f12:	1c02      	adds	r2, r0, #0
 8002f14:	801a      	strh	r2, [r3, #0]
 8002f16:	2308      	movs	r3, #8
 8002f18:	18fb      	adds	r3, r7, r3
 8002f1a:	1c0a      	adds	r2, r1, #0
 8002f1c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2241      	movs	r2, #65	; 0x41
 8002f22:	5c9b      	ldrb	r3, [r3, r2]
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	2b20      	cmp	r3, #32
 8002f28:	d000      	beq.n	8002f2c <HAL_I2C_Master_Transmit+0x2c>
 8002f2a:	e0e7      	b.n	80030fc <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2240      	movs	r2, #64	; 0x40
 8002f30:	5c9b      	ldrb	r3, [r3, r2]
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d101      	bne.n	8002f3a <HAL_I2C_Master_Transmit+0x3a>
 8002f36:	2302      	movs	r3, #2
 8002f38:	e0e1      	b.n	80030fe <HAL_I2C_Master_Transmit+0x1fe>
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2240      	movs	r2, #64	; 0x40
 8002f3e:	2101      	movs	r1, #1
 8002f40:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002f42:	f7ff fabd 	bl	80024c0 <HAL_GetTick>
 8002f46:	0003      	movs	r3, r0
 8002f48:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f4a:	2380      	movs	r3, #128	; 0x80
 8002f4c:	0219      	lsls	r1, r3, #8
 8002f4e:	68f8      	ldr	r0, [r7, #12]
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	9300      	str	r3, [sp, #0]
 8002f54:	2319      	movs	r3, #25
 8002f56:	2201      	movs	r2, #1
 8002f58:	f000 fa04 	bl	8003364 <I2C_WaitOnFlagUntilTimeout>
 8002f5c:	1e03      	subs	r3, r0, #0
 8002f5e:	d001      	beq.n	8002f64 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e0cc      	b.n	80030fe <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2241      	movs	r2, #65	; 0x41
 8002f68:	2121      	movs	r1, #33	; 0x21
 8002f6a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2242      	movs	r2, #66	; 0x42
 8002f70:	2110      	movs	r1, #16
 8002f72:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2200      	movs	r2, #0
 8002f78:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2208      	movs	r2, #8
 8002f84:	18ba      	adds	r2, r7, r2
 8002f86:	8812      	ldrh	r2, [r2, #0]
 8002f88:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	2bff      	cmp	r3, #255	; 0xff
 8002f98:	d911      	bls.n	8002fbe <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	22ff      	movs	r2, #255	; 0xff
 8002f9e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fa4:	b2da      	uxtb	r2, r3
 8002fa6:	2380      	movs	r3, #128	; 0x80
 8002fa8:	045c      	lsls	r4, r3, #17
 8002faa:	230a      	movs	r3, #10
 8002fac:	18fb      	adds	r3, r7, r3
 8002fae:	8819      	ldrh	r1, [r3, #0]
 8002fb0:	68f8      	ldr	r0, [r7, #12]
 8002fb2:	4b55      	ldr	r3, [pc, #340]	; (8003108 <HAL_I2C_Master_Transmit+0x208>)
 8002fb4:	9300      	str	r3, [sp, #0]
 8002fb6:	0023      	movs	r3, r4
 8002fb8:	f000 fc2e 	bl	8003818 <I2C_TransferConfig>
 8002fbc:	e075      	b.n	80030aa <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fc2:	b29a      	uxth	r2, r3
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fcc:	b2da      	uxtb	r2, r3
 8002fce:	2380      	movs	r3, #128	; 0x80
 8002fd0:	049c      	lsls	r4, r3, #18
 8002fd2:	230a      	movs	r3, #10
 8002fd4:	18fb      	adds	r3, r7, r3
 8002fd6:	8819      	ldrh	r1, [r3, #0]
 8002fd8:	68f8      	ldr	r0, [r7, #12]
 8002fda:	4b4b      	ldr	r3, [pc, #300]	; (8003108 <HAL_I2C_Master_Transmit+0x208>)
 8002fdc:	9300      	str	r3, [sp, #0]
 8002fde:	0023      	movs	r3, r4
 8002fe0:	f000 fc1a 	bl	8003818 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002fe4:	e061      	b.n	80030aa <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fe6:	697a      	ldr	r2, [r7, #20]
 8002fe8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	0018      	movs	r0, r3
 8002fee:	f000 fa07 	bl	8003400 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ff2:	1e03      	subs	r3, r0, #0
 8002ff4:	d001      	beq.n	8002ffa <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e081      	b.n	80030fe <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffe:	781a      	ldrb	r2, [r3, #0]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300a:	1c5a      	adds	r2, r3, #1
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003014:	b29b      	uxth	r3, r3
 8003016:	3b01      	subs	r3, #1
 8003018:	b29a      	uxth	r2, r3
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003022:	3b01      	subs	r3, #1
 8003024:	b29a      	uxth	r2, r3
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800302e:	b29b      	uxth	r3, r3
 8003030:	2b00      	cmp	r3, #0
 8003032:	d03a      	beq.n	80030aa <HAL_I2C_Master_Transmit+0x1aa>
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003038:	2b00      	cmp	r3, #0
 800303a:	d136      	bne.n	80030aa <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800303c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800303e:	68f8      	ldr	r0, [r7, #12]
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	9300      	str	r3, [sp, #0]
 8003044:	0013      	movs	r3, r2
 8003046:	2200      	movs	r2, #0
 8003048:	2180      	movs	r1, #128	; 0x80
 800304a:	f000 f98b 	bl	8003364 <I2C_WaitOnFlagUntilTimeout>
 800304e:	1e03      	subs	r3, r0, #0
 8003050:	d001      	beq.n	8003056 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e053      	b.n	80030fe <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800305a:	b29b      	uxth	r3, r3
 800305c:	2bff      	cmp	r3, #255	; 0xff
 800305e:	d911      	bls.n	8003084 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	22ff      	movs	r2, #255	; 0xff
 8003064:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800306a:	b2da      	uxtb	r2, r3
 800306c:	2380      	movs	r3, #128	; 0x80
 800306e:	045c      	lsls	r4, r3, #17
 8003070:	230a      	movs	r3, #10
 8003072:	18fb      	adds	r3, r7, r3
 8003074:	8819      	ldrh	r1, [r3, #0]
 8003076:	68f8      	ldr	r0, [r7, #12]
 8003078:	2300      	movs	r3, #0
 800307a:	9300      	str	r3, [sp, #0]
 800307c:	0023      	movs	r3, r4
 800307e:	f000 fbcb 	bl	8003818 <I2C_TransferConfig>
 8003082:	e012      	b.n	80030aa <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003088:	b29a      	uxth	r2, r3
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003092:	b2da      	uxtb	r2, r3
 8003094:	2380      	movs	r3, #128	; 0x80
 8003096:	049c      	lsls	r4, r3, #18
 8003098:	230a      	movs	r3, #10
 800309a:	18fb      	adds	r3, r7, r3
 800309c:	8819      	ldrh	r1, [r3, #0]
 800309e:	68f8      	ldr	r0, [r7, #12]
 80030a0:	2300      	movs	r3, #0
 80030a2:	9300      	str	r3, [sp, #0]
 80030a4:	0023      	movs	r3, r4
 80030a6:	f000 fbb7 	bl	8003818 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d198      	bne.n	8002fe6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030b4:	697a      	ldr	r2, [r7, #20]
 80030b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	0018      	movs	r0, r3
 80030bc:	f000 f9e6 	bl	800348c <I2C_WaitOnSTOPFlagUntilTimeout>
 80030c0:	1e03      	subs	r3, r0, #0
 80030c2:	d001      	beq.n	80030c8 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e01a      	b.n	80030fe <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2220      	movs	r2, #32
 80030ce:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	685a      	ldr	r2, [r3, #4]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	490c      	ldr	r1, [pc, #48]	; (800310c <HAL_I2C_Master_Transmit+0x20c>)
 80030dc:	400a      	ands	r2, r1
 80030de:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2241      	movs	r2, #65	; 0x41
 80030e4:	2120      	movs	r1, #32
 80030e6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2242      	movs	r2, #66	; 0x42
 80030ec:	2100      	movs	r1, #0
 80030ee:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2240      	movs	r2, #64	; 0x40
 80030f4:	2100      	movs	r1, #0
 80030f6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80030f8:	2300      	movs	r3, #0
 80030fa:	e000      	b.n	80030fe <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80030fc:	2302      	movs	r3, #2
  }
}
 80030fe:	0018      	movs	r0, r3
 8003100:	46bd      	mov	sp, r7
 8003102:	b007      	add	sp, #28
 8003104:	bd90      	pop	{r4, r7, pc}
 8003106:	46c0      	nop			; (mov r8, r8)
 8003108:	80002000 	.word	0x80002000
 800310c:	fe00e800 	.word	0xfe00e800

08003110 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003110:	b590      	push	{r4, r7, lr}
 8003112:	b089      	sub	sp, #36	; 0x24
 8003114:	af02      	add	r7, sp, #8
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	0008      	movs	r0, r1
 800311a:	607a      	str	r2, [r7, #4]
 800311c:	0019      	movs	r1, r3
 800311e:	230a      	movs	r3, #10
 8003120:	18fb      	adds	r3, r7, r3
 8003122:	1c02      	adds	r2, r0, #0
 8003124:	801a      	strh	r2, [r3, #0]
 8003126:	2308      	movs	r3, #8
 8003128:	18fb      	adds	r3, r7, r3
 800312a:	1c0a      	adds	r2, r1, #0
 800312c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2241      	movs	r2, #65	; 0x41
 8003132:	5c9b      	ldrb	r3, [r3, r2]
 8003134:	b2db      	uxtb	r3, r3
 8003136:	2b20      	cmp	r3, #32
 8003138:	d000      	beq.n	800313c <HAL_I2C_Master_Receive+0x2c>
 800313a:	e0e8      	b.n	800330e <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2240      	movs	r2, #64	; 0x40
 8003140:	5c9b      	ldrb	r3, [r3, r2]
 8003142:	2b01      	cmp	r3, #1
 8003144:	d101      	bne.n	800314a <HAL_I2C_Master_Receive+0x3a>
 8003146:	2302      	movs	r3, #2
 8003148:	e0e2      	b.n	8003310 <HAL_I2C_Master_Receive+0x200>
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2240      	movs	r2, #64	; 0x40
 800314e:	2101      	movs	r1, #1
 8003150:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003152:	f7ff f9b5 	bl	80024c0 <HAL_GetTick>
 8003156:	0003      	movs	r3, r0
 8003158:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800315a:	2380      	movs	r3, #128	; 0x80
 800315c:	0219      	lsls	r1, r3, #8
 800315e:	68f8      	ldr	r0, [r7, #12]
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	9300      	str	r3, [sp, #0]
 8003164:	2319      	movs	r3, #25
 8003166:	2201      	movs	r2, #1
 8003168:	f000 f8fc 	bl	8003364 <I2C_WaitOnFlagUntilTimeout>
 800316c:	1e03      	subs	r3, r0, #0
 800316e:	d001      	beq.n	8003174 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e0cd      	b.n	8003310 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2241      	movs	r2, #65	; 0x41
 8003178:	2122      	movs	r1, #34	; 0x22
 800317a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2242      	movs	r2, #66	; 0x42
 8003180:	2110      	movs	r1, #16
 8003182:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2200      	movs	r2, #0
 8003188:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2208      	movs	r2, #8
 8003194:	18ba      	adds	r2, r7, r2
 8003196:	8812      	ldrh	r2, [r2, #0]
 8003198:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2200      	movs	r2, #0
 800319e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	2bff      	cmp	r3, #255	; 0xff
 80031a8:	d911      	bls.n	80031ce <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	22ff      	movs	r2, #255	; 0xff
 80031ae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031b4:	b2da      	uxtb	r2, r3
 80031b6:	2380      	movs	r3, #128	; 0x80
 80031b8:	045c      	lsls	r4, r3, #17
 80031ba:	230a      	movs	r3, #10
 80031bc:	18fb      	adds	r3, r7, r3
 80031be:	8819      	ldrh	r1, [r3, #0]
 80031c0:	68f8      	ldr	r0, [r7, #12]
 80031c2:	4b55      	ldr	r3, [pc, #340]	; (8003318 <HAL_I2C_Master_Receive+0x208>)
 80031c4:	9300      	str	r3, [sp, #0]
 80031c6:	0023      	movs	r3, r4
 80031c8:	f000 fb26 	bl	8003818 <I2C_TransferConfig>
 80031cc:	e076      	b.n	80032bc <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031d2:	b29a      	uxth	r2, r3
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031dc:	b2da      	uxtb	r2, r3
 80031de:	2380      	movs	r3, #128	; 0x80
 80031e0:	049c      	lsls	r4, r3, #18
 80031e2:	230a      	movs	r3, #10
 80031e4:	18fb      	adds	r3, r7, r3
 80031e6:	8819      	ldrh	r1, [r3, #0]
 80031e8:	68f8      	ldr	r0, [r7, #12]
 80031ea:	4b4b      	ldr	r3, [pc, #300]	; (8003318 <HAL_I2C_Master_Receive+0x208>)
 80031ec:	9300      	str	r3, [sp, #0]
 80031ee:	0023      	movs	r3, r4
 80031f0:	f000 fb12 	bl	8003818 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80031f4:	e062      	b.n	80032bc <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031f6:	697a      	ldr	r2, [r7, #20]
 80031f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	0018      	movs	r0, r3
 80031fe:	f000 f989 	bl	8003514 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003202:	1e03      	subs	r3, r0, #0
 8003204:	d001      	beq.n	800320a <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e082      	b.n	8003310 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003214:	b2d2      	uxtb	r2, r2
 8003216:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321c:	1c5a      	adds	r2, r3, #1
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003226:	3b01      	subs	r3, #1
 8003228:	b29a      	uxth	r2, r3
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003232:	b29b      	uxth	r3, r3
 8003234:	3b01      	subs	r3, #1
 8003236:	b29a      	uxth	r2, r3
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003240:	b29b      	uxth	r3, r3
 8003242:	2b00      	cmp	r3, #0
 8003244:	d03a      	beq.n	80032bc <HAL_I2C_Master_Receive+0x1ac>
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800324a:	2b00      	cmp	r3, #0
 800324c:	d136      	bne.n	80032bc <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800324e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003250:	68f8      	ldr	r0, [r7, #12]
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	9300      	str	r3, [sp, #0]
 8003256:	0013      	movs	r3, r2
 8003258:	2200      	movs	r2, #0
 800325a:	2180      	movs	r1, #128	; 0x80
 800325c:	f000 f882 	bl	8003364 <I2C_WaitOnFlagUntilTimeout>
 8003260:	1e03      	subs	r3, r0, #0
 8003262:	d001      	beq.n	8003268 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e053      	b.n	8003310 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800326c:	b29b      	uxth	r3, r3
 800326e:	2bff      	cmp	r3, #255	; 0xff
 8003270:	d911      	bls.n	8003296 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	22ff      	movs	r2, #255	; 0xff
 8003276:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800327c:	b2da      	uxtb	r2, r3
 800327e:	2380      	movs	r3, #128	; 0x80
 8003280:	045c      	lsls	r4, r3, #17
 8003282:	230a      	movs	r3, #10
 8003284:	18fb      	adds	r3, r7, r3
 8003286:	8819      	ldrh	r1, [r3, #0]
 8003288:	68f8      	ldr	r0, [r7, #12]
 800328a:	2300      	movs	r3, #0
 800328c:	9300      	str	r3, [sp, #0]
 800328e:	0023      	movs	r3, r4
 8003290:	f000 fac2 	bl	8003818 <I2C_TransferConfig>
 8003294:	e012      	b.n	80032bc <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800329a:	b29a      	uxth	r2, r3
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032a4:	b2da      	uxtb	r2, r3
 80032a6:	2380      	movs	r3, #128	; 0x80
 80032a8:	049c      	lsls	r4, r3, #18
 80032aa:	230a      	movs	r3, #10
 80032ac:	18fb      	adds	r3, r7, r3
 80032ae:	8819      	ldrh	r1, [r3, #0]
 80032b0:	68f8      	ldr	r0, [r7, #12]
 80032b2:	2300      	movs	r3, #0
 80032b4:	9300      	str	r3, [sp, #0]
 80032b6:	0023      	movs	r3, r4
 80032b8:	f000 faae 	bl	8003818 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d197      	bne.n	80031f6 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032c6:	697a      	ldr	r2, [r7, #20]
 80032c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	0018      	movs	r0, r3
 80032ce:	f000 f8dd 	bl	800348c <I2C_WaitOnSTOPFlagUntilTimeout>
 80032d2:	1e03      	subs	r3, r0, #0
 80032d4:	d001      	beq.n	80032da <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e01a      	b.n	8003310 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2220      	movs	r2, #32
 80032e0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	685a      	ldr	r2, [r3, #4]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	490b      	ldr	r1, [pc, #44]	; (800331c <HAL_I2C_Master_Receive+0x20c>)
 80032ee:	400a      	ands	r2, r1
 80032f0:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2241      	movs	r2, #65	; 0x41
 80032f6:	2120      	movs	r1, #32
 80032f8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2242      	movs	r2, #66	; 0x42
 80032fe:	2100      	movs	r1, #0
 8003300:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2240      	movs	r2, #64	; 0x40
 8003306:	2100      	movs	r1, #0
 8003308:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800330a:	2300      	movs	r3, #0
 800330c:	e000      	b.n	8003310 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 800330e:	2302      	movs	r3, #2
  }
}
 8003310:	0018      	movs	r0, r3
 8003312:	46bd      	mov	sp, r7
 8003314:	b007      	add	sp, #28
 8003316:	bd90      	pop	{r4, r7, pc}
 8003318:	80002400 	.word	0x80002400
 800331c:	fe00e800 	.word	0xfe00e800

08003320 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	699b      	ldr	r3, [r3, #24]
 800332e:	2202      	movs	r2, #2
 8003330:	4013      	ands	r3, r2
 8003332:	2b02      	cmp	r3, #2
 8003334:	d103      	bne.n	800333e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	2200      	movs	r2, #0
 800333c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	699b      	ldr	r3, [r3, #24]
 8003344:	2201      	movs	r2, #1
 8003346:	4013      	ands	r3, r2
 8003348:	2b01      	cmp	r3, #1
 800334a:	d007      	beq.n	800335c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	699a      	ldr	r2, [r3, #24]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	2101      	movs	r1, #1
 8003358:	430a      	orrs	r2, r1
 800335a:	619a      	str	r2, [r3, #24]
  }
}
 800335c:	46c0      	nop			; (mov r8, r8)
 800335e:	46bd      	mov	sp, r7
 8003360:	b002      	add	sp, #8
 8003362:	bd80      	pop	{r7, pc}

08003364 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	60b9      	str	r1, [r7, #8]
 800336e:	603b      	str	r3, [r7, #0]
 8003370:	1dfb      	adds	r3, r7, #7
 8003372:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003374:	e030      	b.n	80033d8 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	3301      	adds	r3, #1
 800337a:	d02d      	beq.n	80033d8 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800337c:	f7ff f8a0 	bl	80024c0 <HAL_GetTick>
 8003380:	0002      	movs	r2, r0
 8003382:	69bb      	ldr	r3, [r7, #24]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	683a      	ldr	r2, [r7, #0]
 8003388:	429a      	cmp	r2, r3
 800338a:	d302      	bcc.n	8003392 <I2C_WaitOnFlagUntilTimeout+0x2e>
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d122      	bne.n	80033d8 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	699b      	ldr	r3, [r3, #24]
 8003398:	68ba      	ldr	r2, [r7, #8]
 800339a:	4013      	ands	r3, r2
 800339c:	68ba      	ldr	r2, [r7, #8]
 800339e:	1ad3      	subs	r3, r2, r3
 80033a0:	425a      	negs	r2, r3
 80033a2:	4153      	adcs	r3, r2
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	001a      	movs	r2, r3
 80033a8:	1dfb      	adds	r3, r7, #7
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d113      	bne.n	80033d8 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033b4:	2220      	movs	r2, #32
 80033b6:	431a      	orrs	r2, r3
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2241      	movs	r2, #65	; 0x41
 80033c0:	2120      	movs	r1, #32
 80033c2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2242      	movs	r2, #66	; 0x42
 80033c8:	2100      	movs	r1, #0
 80033ca:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2240      	movs	r2, #64	; 0x40
 80033d0:	2100      	movs	r1, #0
 80033d2:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e00f      	b.n	80033f8 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	68ba      	ldr	r2, [r7, #8]
 80033e0:	4013      	ands	r3, r2
 80033e2:	68ba      	ldr	r2, [r7, #8]
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	425a      	negs	r2, r3
 80033e8:	4153      	adcs	r3, r2
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	001a      	movs	r2, r3
 80033ee:	1dfb      	adds	r3, r7, #7
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d0bf      	beq.n	8003376 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033f6:	2300      	movs	r3, #0
}
 80033f8:	0018      	movs	r0, r3
 80033fa:	46bd      	mov	sp, r7
 80033fc:	b004      	add	sp, #16
 80033fe:	bd80      	pop	{r7, pc}

08003400 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	60b9      	str	r1, [r7, #8]
 800340a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800340c:	e032      	b.n	8003474 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	68b9      	ldr	r1, [r7, #8]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	0018      	movs	r0, r3
 8003416:	f000 f8ff 	bl	8003618 <I2C_IsErrorOccurred>
 800341a:	1e03      	subs	r3, r0, #0
 800341c:	d001      	beq.n	8003422 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e030      	b.n	8003484 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	3301      	adds	r3, #1
 8003426:	d025      	beq.n	8003474 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003428:	f7ff f84a 	bl	80024c0 <HAL_GetTick>
 800342c:	0002      	movs	r2, r0
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	68ba      	ldr	r2, [r7, #8]
 8003434:	429a      	cmp	r2, r3
 8003436:	d302      	bcc.n	800343e <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d11a      	bne.n	8003474 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	699b      	ldr	r3, [r3, #24]
 8003444:	2202      	movs	r2, #2
 8003446:	4013      	ands	r3, r2
 8003448:	2b02      	cmp	r3, #2
 800344a:	d013      	beq.n	8003474 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003450:	2220      	movs	r2, #32
 8003452:	431a      	orrs	r2, r3
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2241      	movs	r2, #65	; 0x41
 800345c:	2120      	movs	r1, #32
 800345e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2242      	movs	r2, #66	; 0x42
 8003464:	2100      	movs	r1, #0
 8003466:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2240      	movs	r2, #64	; 0x40
 800346c:	2100      	movs	r1, #0
 800346e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e007      	b.n	8003484 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	2202      	movs	r2, #2
 800347c:	4013      	ands	r3, r2
 800347e:	2b02      	cmp	r3, #2
 8003480:	d1c5      	bne.n	800340e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003482:	2300      	movs	r3, #0
}
 8003484:	0018      	movs	r0, r3
 8003486:	46bd      	mov	sp, r7
 8003488:	b004      	add	sp, #16
 800348a:	bd80      	pop	{r7, pc}

0800348c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	60b9      	str	r1, [r7, #8]
 8003496:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003498:	e02f      	b.n	80034fa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	68b9      	ldr	r1, [r7, #8]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	0018      	movs	r0, r3
 80034a2:	f000 f8b9 	bl	8003618 <I2C_IsErrorOccurred>
 80034a6:	1e03      	subs	r3, r0, #0
 80034a8:	d001      	beq.n	80034ae <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e02d      	b.n	800350a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034ae:	f7ff f807 	bl	80024c0 <HAL_GetTick>
 80034b2:	0002      	movs	r2, r0
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	68ba      	ldr	r2, [r7, #8]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d302      	bcc.n	80034c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d11a      	bne.n	80034fa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	2220      	movs	r2, #32
 80034cc:	4013      	ands	r3, r2
 80034ce:	2b20      	cmp	r3, #32
 80034d0:	d013      	beq.n	80034fa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034d6:	2220      	movs	r2, #32
 80034d8:	431a      	orrs	r2, r3
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2241      	movs	r2, #65	; 0x41
 80034e2:	2120      	movs	r1, #32
 80034e4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2242      	movs	r2, #66	; 0x42
 80034ea:	2100      	movs	r1, #0
 80034ec:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2240      	movs	r2, #64	; 0x40
 80034f2:	2100      	movs	r1, #0
 80034f4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e007      	b.n	800350a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	699b      	ldr	r3, [r3, #24]
 8003500:	2220      	movs	r2, #32
 8003502:	4013      	ands	r3, r2
 8003504:	2b20      	cmp	r3, #32
 8003506:	d1c8      	bne.n	800349a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003508:	2300      	movs	r3, #0
}
 800350a:	0018      	movs	r0, r3
 800350c:	46bd      	mov	sp, r7
 800350e:	b004      	add	sp, #16
 8003510:	bd80      	pop	{r7, pc}
	...

08003514 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003520:	e06b      	b.n	80035fa <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	68b9      	ldr	r1, [r7, #8]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	0018      	movs	r0, r3
 800352a:	f000 f875 	bl	8003618 <I2C_IsErrorOccurred>
 800352e:	1e03      	subs	r3, r0, #0
 8003530:	d001      	beq.n	8003536 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e069      	b.n	800360a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	699b      	ldr	r3, [r3, #24]
 800353c:	2220      	movs	r2, #32
 800353e:	4013      	ands	r3, r2
 8003540:	2b20      	cmp	r3, #32
 8003542:	d138      	bne.n	80035b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	2204      	movs	r2, #4
 800354c:	4013      	ands	r3, r2
 800354e:	2b04      	cmp	r3, #4
 8003550:	d105      	bne.n	800355e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003556:	2b00      	cmp	r3, #0
 8003558:	d001      	beq.n	800355e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800355a:	2300      	movs	r3, #0
 800355c:	e055      	b.n	800360a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	699b      	ldr	r3, [r3, #24]
 8003564:	2210      	movs	r2, #16
 8003566:	4013      	ands	r3, r2
 8003568:	2b10      	cmp	r3, #16
 800356a:	d107      	bne.n	800357c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2210      	movs	r2, #16
 8003572:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2204      	movs	r2, #4
 8003578:	645a      	str	r2, [r3, #68]	; 0x44
 800357a:	e002      	b.n	8003582 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2200      	movs	r2, #0
 8003580:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	2220      	movs	r2, #32
 8003588:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	685a      	ldr	r2, [r3, #4]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	491f      	ldr	r1, [pc, #124]	; (8003614 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8003596:	400a      	ands	r2, r1
 8003598:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2241      	movs	r2, #65	; 0x41
 800359e:	2120      	movs	r1, #32
 80035a0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2242      	movs	r2, #66	; 0x42
 80035a6:	2100      	movs	r1, #0
 80035a8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2240      	movs	r2, #64	; 0x40
 80035ae:	2100      	movs	r1, #0
 80035b0:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e029      	b.n	800360a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035b6:	f7fe ff83 	bl	80024c0 <HAL_GetTick>
 80035ba:	0002      	movs	r2, r0
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	68ba      	ldr	r2, [r7, #8]
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d302      	bcc.n	80035cc <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d116      	bne.n	80035fa <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	699b      	ldr	r3, [r3, #24]
 80035d2:	2204      	movs	r2, #4
 80035d4:	4013      	ands	r3, r2
 80035d6:	2b04      	cmp	r3, #4
 80035d8:	d00f      	beq.n	80035fa <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035de:	2220      	movs	r2, #32
 80035e0:	431a      	orrs	r2, r3
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2241      	movs	r2, #65	; 0x41
 80035ea:	2120      	movs	r1, #32
 80035ec:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2240      	movs	r2, #64	; 0x40
 80035f2:	2100      	movs	r1, #0
 80035f4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e007      	b.n	800360a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	699b      	ldr	r3, [r3, #24]
 8003600:	2204      	movs	r2, #4
 8003602:	4013      	ands	r3, r2
 8003604:	2b04      	cmp	r3, #4
 8003606:	d18c      	bne.n	8003522 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003608:	2300      	movs	r3, #0
}
 800360a:	0018      	movs	r0, r3
 800360c:	46bd      	mov	sp, r7
 800360e:	b004      	add	sp, #16
 8003610:	bd80      	pop	{r7, pc}
 8003612:	46c0      	nop			; (mov r8, r8)
 8003614:	fe00e800 	.word	0xfe00e800

08003618 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003618:	b590      	push	{r4, r7, lr}
 800361a:	b08b      	sub	sp, #44	; 0x2c
 800361c:	af00      	add	r7, sp, #0
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	60b9      	str	r1, [r7, #8]
 8003622:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003624:	2327      	movs	r3, #39	; 0x27
 8003626:	18fb      	adds	r3, r7, r3
 8003628:	2200      	movs	r2, #0
 800362a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	699b      	ldr	r3, [r3, #24]
 8003632:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003634:	2300      	movs	r3, #0
 8003636:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	2210      	movs	r2, #16
 8003640:	4013      	ands	r3, r2
 8003642:	d100      	bne.n	8003646 <I2C_IsErrorOccurred+0x2e>
 8003644:	e082      	b.n	800374c <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	2210      	movs	r2, #16
 800364c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800364e:	e060      	b.n	8003712 <I2C_IsErrorOccurred+0xfa>
 8003650:	2427      	movs	r4, #39	; 0x27
 8003652:	193b      	adds	r3, r7, r4
 8003654:	193a      	adds	r2, r7, r4
 8003656:	7812      	ldrb	r2, [r2, #0]
 8003658:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	3301      	adds	r3, #1
 800365e:	d058      	beq.n	8003712 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003660:	f7fe ff2e 	bl	80024c0 <HAL_GetTick>
 8003664:	0002      	movs	r2, r0
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	68ba      	ldr	r2, [r7, #8]
 800366c:	429a      	cmp	r2, r3
 800366e:	d306      	bcc.n	800367e <I2C_IsErrorOccurred+0x66>
 8003670:	193b      	adds	r3, r7, r4
 8003672:	193a      	adds	r2, r7, r4
 8003674:	7812      	ldrb	r2, [r2, #0]
 8003676:	701a      	strb	r2, [r3, #0]
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d149      	bne.n	8003712 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	685a      	ldr	r2, [r3, #4]
 8003684:	2380      	movs	r3, #128	; 0x80
 8003686:	01db      	lsls	r3, r3, #7
 8003688:	4013      	ands	r3, r2
 800368a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800368c:	2013      	movs	r0, #19
 800368e:	183b      	adds	r3, r7, r0
 8003690:	68fa      	ldr	r2, [r7, #12]
 8003692:	2142      	movs	r1, #66	; 0x42
 8003694:	5c52      	ldrb	r2, [r2, r1]
 8003696:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	699a      	ldr	r2, [r3, #24]
 800369e:	2380      	movs	r3, #128	; 0x80
 80036a0:	021b      	lsls	r3, r3, #8
 80036a2:	401a      	ands	r2, r3
 80036a4:	2380      	movs	r3, #128	; 0x80
 80036a6:	021b      	lsls	r3, r3, #8
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d126      	bne.n	80036fa <I2C_IsErrorOccurred+0xe2>
 80036ac:	697a      	ldr	r2, [r7, #20]
 80036ae:	2380      	movs	r3, #128	; 0x80
 80036b0:	01db      	lsls	r3, r3, #7
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d021      	beq.n	80036fa <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 80036b6:	183b      	adds	r3, r7, r0
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	2b20      	cmp	r3, #32
 80036bc:	d01d      	beq.n	80036fa <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	685a      	ldr	r2, [r3, #4]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	2180      	movs	r1, #128	; 0x80
 80036ca:	01c9      	lsls	r1, r1, #7
 80036cc:	430a      	orrs	r2, r1
 80036ce:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80036d0:	f7fe fef6 	bl	80024c0 <HAL_GetTick>
 80036d4:	0003      	movs	r3, r0
 80036d6:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036d8:	e00f      	b.n	80036fa <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80036da:	f7fe fef1 	bl	80024c0 <HAL_GetTick>
 80036de:	0002      	movs	r2, r0
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	2b19      	cmp	r3, #25
 80036e6:	d908      	bls.n	80036fa <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80036e8:	6a3b      	ldr	r3, [r7, #32]
 80036ea:	2220      	movs	r2, #32
 80036ec:	4313      	orrs	r3, r2
 80036ee:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80036f0:	2327      	movs	r3, #39	; 0x27
 80036f2:	18fb      	adds	r3, r7, r3
 80036f4:	2201      	movs	r2, #1
 80036f6:	701a      	strb	r2, [r3, #0]

              break;
 80036f8:	e00b      	b.n	8003712 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	699b      	ldr	r3, [r3, #24]
 8003700:	2220      	movs	r2, #32
 8003702:	4013      	ands	r3, r2
 8003704:	2127      	movs	r1, #39	; 0x27
 8003706:	187a      	adds	r2, r7, r1
 8003708:	1879      	adds	r1, r7, r1
 800370a:	7809      	ldrb	r1, [r1, #0]
 800370c:	7011      	strb	r1, [r2, #0]
 800370e:	2b20      	cmp	r3, #32
 8003710:	d1e3      	bne.n	80036da <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	699b      	ldr	r3, [r3, #24]
 8003718:	2220      	movs	r2, #32
 800371a:	4013      	ands	r3, r2
 800371c:	2b20      	cmp	r3, #32
 800371e:	d004      	beq.n	800372a <I2C_IsErrorOccurred+0x112>
 8003720:	2327      	movs	r3, #39	; 0x27
 8003722:	18fb      	adds	r3, r7, r3
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d092      	beq.n	8003650 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800372a:	2327      	movs	r3, #39	; 0x27
 800372c:	18fb      	adds	r3, r7, r3
 800372e:	781b      	ldrb	r3, [r3, #0]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d103      	bne.n	800373c <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	2220      	movs	r2, #32
 800373a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800373c:	6a3b      	ldr	r3, [r7, #32]
 800373e:	2204      	movs	r2, #4
 8003740:	4313      	orrs	r3, r2
 8003742:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003744:	2327      	movs	r3, #39	; 0x27
 8003746:	18fb      	adds	r3, r7, r3
 8003748:	2201      	movs	r2, #1
 800374a:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	699b      	ldr	r3, [r3, #24]
 8003752:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003754:	69ba      	ldr	r2, [r7, #24]
 8003756:	2380      	movs	r3, #128	; 0x80
 8003758:	005b      	lsls	r3, r3, #1
 800375a:	4013      	ands	r3, r2
 800375c:	d00c      	beq.n	8003778 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800375e:	6a3b      	ldr	r3, [r7, #32]
 8003760:	2201      	movs	r2, #1
 8003762:	4313      	orrs	r3, r2
 8003764:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	2280      	movs	r2, #128	; 0x80
 800376c:	0052      	lsls	r2, r2, #1
 800376e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003770:	2327      	movs	r3, #39	; 0x27
 8003772:	18fb      	adds	r3, r7, r3
 8003774:	2201      	movs	r2, #1
 8003776:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003778:	69ba      	ldr	r2, [r7, #24]
 800377a:	2380      	movs	r3, #128	; 0x80
 800377c:	00db      	lsls	r3, r3, #3
 800377e:	4013      	ands	r3, r2
 8003780:	d00c      	beq.n	800379c <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003782:	6a3b      	ldr	r3, [r7, #32]
 8003784:	2208      	movs	r2, #8
 8003786:	4313      	orrs	r3, r2
 8003788:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2280      	movs	r2, #128	; 0x80
 8003790:	00d2      	lsls	r2, r2, #3
 8003792:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003794:	2327      	movs	r3, #39	; 0x27
 8003796:	18fb      	adds	r3, r7, r3
 8003798:	2201      	movs	r2, #1
 800379a:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800379c:	69ba      	ldr	r2, [r7, #24]
 800379e:	2380      	movs	r3, #128	; 0x80
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	4013      	ands	r3, r2
 80037a4:	d00c      	beq.n	80037c0 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80037a6:	6a3b      	ldr	r3, [r7, #32]
 80037a8:	2202      	movs	r2, #2
 80037aa:	4313      	orrs	r3, r2
 80037ac:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	2280      	movs	r2, #128	; 0x80
 80037b4:	0092      	lsls	r2, r2, #2
 80037b6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80037b8:	2327      	movs	r3, #39	; 0x27
 80037ba:	18fb      	adds	r3, r7, r3
 80037bc:	2201      	movs	r2, #1
 80037be:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80037c0:	2327      	movs	r3, #39	; 0x27
 80037c2:	18fb      	adds	r3, r7, r3
 80037c4:	781b      	ldrb	r3, [r3, #0]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d01d      	beq.n	8003806 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	0018      	movs	r0, r3
 80037ce:	f7ff fda7 	bl	8003320 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	685a      	ldr	r2, [r3, #4]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	490d      	ldr	r1, [pc, #52]	; (8003814 <I2C_IsErrorOccurred+0x1fc>)
 80037de:	400a      	ands	r2, r1
 80037e0:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037e6:	6a3b      	ldr	r3, [r7, #32]
 80037e8:	431a      	orrs	r2, r3
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2241      	movs	r2, #65	; 0x41
 80037f2:	2120      	movs	r1, #32
 80037f4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2242      	movs	r2, #66	; 0x42
 80037fa:	2100      	movs	r1, #0
 80037fc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2240      	movs	r2, #64	; 0x40
 8003802:	2100      	movs	r1, #0
 8003804:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8003806:	2327      	movs	r3, #39	; 0x27
 8003808:	18fb      	adds	r3, r7, r3
 800380a:	781b      	ldrb	r3, [r3, #0]
}
 800380c:	0018      	movs	r0, r3
 800380e:	46bd      	mov	sp, r7
 8003810:	b00b      	add	sp, #44	; 0x2c
 8003812:	bd90      	pop	{r4, r7, pc}
 8003814:	fe00e800 	.word	0xfe00e800

08003818 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003818:	b590      	push	{r4, r7, lr}
 800381a:	b087      	sub	sp, #28
 800381c:	af00      	add	r7, sp, #0
 800381e:	60f8      	str	r0, [r7, #12]
 8003820:	0008      	movs	r0, r1
 8003822:	0011      	movs	r1, r2
 8003824:	607b      	str	r3, [r7, #4]
 8003826:	240a      	movs	r4, #10
 8003828:	193b      	adds	r3, r7, r4
 800382a:	1c02      	adds	r2, r0, #0
 800382c:	801a      	strh	r2, [r3, #0]
 800382e:	2009      	movs	r0, #9
 8003830:	183b      	adds	r3, r7, r0
 8003832:	1c0a      	adds	r2, r1, #0
 8003834:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003836:	193b      	adds	r3, r7, r4
 8003838:	881b      	ldrh	r3, [r3, #0]
 800383a:	059b      	lsls	r3, r3, #22
 800383c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800383e:	183b      	adds	r3, r7, r0
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	0419      	lsls	r1, r3, #16
 8003844:	23ff      	movs	r3, #255	; 0xff
 8003846:	041b      	lsls	r3, r3, #16
 8003848:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800384a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003852:	4313      	orrs	r3, r2
 8003854:	005b      	lsls	r3, r3, #1
 8003856:	085b      	lsrs	r3, r3, #1
 8003858:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003862:	0d51      	lsrs	r1, r2, #21
 8003864:	2280      	movs	r2, #128	; 0x80
 8003866:	00d2      	lsls	r2, r2, #3
 8003868:	400a      	ands	r2, r1
 800386a:	4907      	ldr	r1, [pc, #28]	; (8003888 <I2C_TransferConfig+0x70>)
 800386c:	430a      	orrs	r2, r1
 800386e:	43d2      	mvns	r2, r2
 8003870:	401a      	ands	r2, r3
 8003872:	0011      	movs	r1, r2
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	697a      	ldr	r2, [r7, #20]
 800387a:	430a      	orrs	r2, r1
 800387c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800387e:	46c0      	nop			; (mov r8, r8)
 8003880:	46bd      	mov	sp, r7
 8003882:	b007      	add	sp, #28
 8003884:	bd90      	pop	{r4, r7, pc}
 8003886:	46c0      	nop			; (mov r8, r8)
 8003888:	03ff63ff 	.word	0x03ff63ff

0800388c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b082      	sub	sp, #8
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2241      	movs	r2, #65	; 0x41
 800389a:	5c9b      	ldrb	r3, [r3, r2]
 800389c:	b2db      	uxtb	r3, r3
 800389e:	2b20      	cmp	r3, #32
 80038a0:	d138      	bne.n	8003914 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2240      	movs	r2, #64	; 0x40
 80038a6:	5c9b      	ldrb	r3, [r3, r2]
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d101      	bne.n	80038b0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80038ac:	2302      	movs	r3, #2
 80038ae:	e032      	b.n	8003916 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2240      	movs	r2, #64	; 0x40
 80038b4:	2101      	movs	r1, #1
 80038b6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2241      	movs	r2, #65	; 0x41
 80038bc:	2124      	movs	r1, #36	; 0x24
 80038be:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	2101      	movs	r1, #1
 80038cc:	438a      	bics	r2, r1
 80038ce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4911      	ldr	r1, [pc, #68]	; (8003920 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80038dc:	400a      	ands	r2, r1
 80038de:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	6819      	ldr	r1, [r3, #0]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	683a      	ldr	r2, [r7, #0]
 80038ec:	430a      	orrs	r2, r1
 80038ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2101      	movs	r1, #1
 80038fc:	430a      	orrs	r2, r1
 80038fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2241      	movs	r2, #65	; 0x41
 8003904:	2120      	movs	r1, #32
 8003906:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2240      	movs	r2, #64	; 0x40
 800390c:	2100      	movs	r1, #0
 800390e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003910:	2300      	movs	r3, #0
 8003912:	e000      	b.n	8003916 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003914:	2302      	movs	r3, #2
  }
}
 8003916:	0018      	movs	r0, r3
 8003918:	46bd      	mov	sp, r7
 800391a:	b002      	add	sp, #8
 800391c:	bd80      	pop	{r7, pc}
 800391e:	46c0      	nop			; (mov r8, r8)
 8003920:	ffffefff 	.word	0xffffefff

08003924 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b084      	sub	sp, #16
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2241      	movs	r2, #65	; 0x41
 8003932:	5c9b      	ldrb	r3, [r3, r2]
 8003934:	b2db      	uxtb	r3, r3
 8003936:	2b20      	cmp	r3, #32
 8003938:	d139      	bne.n	80039ae <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2240      	movs	r2, #64	; 0x40
 800393e:	5c9b      	ldrb	r3, [r3, r2]
 8003940:	2b01      	cmp	r3, #1
 8003942:	d101      	bne.n	8003948 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003944:	2302      	movs	r3, #2
 8003946:	e033      	b.n	80039b0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2240      	movs	r2, #64	; 0x40
 800394c:	2101      	movs	r1, #1
 800394e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2241      	movs	r2, #65	; 0x41
 8003954:	2124      	movs	r1, #36	; 0x24
 8003956:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2101      	movs	r1, #1
 8003964:	438a      	bics	r2, r1
 8003966:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	4a11      	ldr	r2, [pc, #68]	; (80039b8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003974:	4013      	ands	r3, r2
 8003976:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	021b      	lsls	r3, r3, #8
 800397c:	68fa      	ldr	r2, [r7, #12]
 800397e:	4313      	orrs	r3, r2
 8003980:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	68fa      	ldr	r2, [r7, #12]
 8003988:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2101      	movs	r1, #1
 8003996:	430a      	orrs	r2, r1
 8003998:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2241      	movs	r2, #65	; 0x41
 800399e:	2120      	movs	r1, #32
 80039a0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2240      	movs	r2, #64	; 0x40
 80039a6:	2100      	movs	r1, #0
 80039a8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80039aa:	2300      	movs	r3, #0
 80039ac:	e000      	b.n	80039b0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80039ae:	2302      	movs	r3, #2
  }
}
 80039b0:	0018      	movs	r0, r3
 80039b2:	46bd      	mov	sp, r7
 80039b4:	b004      	add	sp, #16
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	fffff0ff 	.word	0xfffff0ff

080039bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039bc:	b5b0      	push	{r4, r5, r7, lr}
 80039be:	b08a      	sub	sp, #40	; 0x28
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d102      	bne.n	80039d0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	f000 fb6c 	bl	80040a8 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039d0:	4bc8      	ldr	r3, [pc, #800]	; (8003cf4 <HAL_RCC_OscConfig+0x338>)
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	220c      	movs	r2, #12
 80039d6:	4013      	ands	r3, r2
 80039d8:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039da:	4bc6      	ldr	r3, [pc, #792]	; (8003cf4 <HAL_RCC_OscConfig+0x338>)
 80039dc:	68da      	ldr	r2, [r3, #12]
 80039de:	2380      	movs	r3, #128	; 0x80
 80039e0:	025b      	lsls	r3, r3, #9
 80039e2:	4013      	ands	r3, r2
 80039e4:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2201      	movs	r2, #1
 80039ec:	4013      	ands	r3, r2
 80039ee:	d100      	bne.n	80039f2 <HAL_RCC_OscConfig+0x36>
 80039f0:	e07d      	b.n	8003aee <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	2b08      	cmp	r3, #8
 80039f6:	d007      	beq.n	8003a08 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	2b0c      	cmp	r3, #12
 80039fc:	d112      	bne.n	8003a24 <HAL_RCC_OscConfig+0x68>
 80039fe:	69ba      	ldr	r2, [r7, #24]
 8003a00:	2380      	movs	r3, #128	; 0x80
 8003a02:	025b      	lsls	r3, r3, #9
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d10d      	bne.n	8003a24 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a08:	4bba      	ldr	r3, [pc, #744]	; (8003cf4 <HAL_RCC_OscConfig+0x338>)
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	2380      	movs	r3, #128	; 0x80
 8003a0e:	029b      	lsls	r3, r3, #10
 8003a10:	4013      	ands	r3, r2
 8003a12:	d100      	bne.n	8003a16 <HAL_RCC_OscConfig+0x5a>
 8003a14:	e06a      	b.n	8003aec <HAL_RCC_OscConfig+0x130>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d166      	bne.n	8003aec <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	f000 fb42 	bl	80040a8 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685a      	ldr	r2, [r3, #4]
 8003a28:	2380      	movs	r3, #128	; 0x80
 8003a2a:	025b      	lsls	r3, r3, #9
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d107      	bne.n	8003a40 <HAL_RCC_OscConfig+0x84>
 8003a30:	4bb0      	ldr	r3, [pc, #704]	; (8003cf4 <HAL_RCC_OscConfig+0x338>)
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	4baf      	ldr	r3, [pc, #700]	; (8003cf4 <HAL_RCC_OscConfig+0x338>)
 8003a36:	2180      	movs	r1, #128	; 0x80
 8003a38:	0249      	lsls	r1, r1, #9
 8003a3a:	430a      	orrs	r2, r1
 8003a3c:	601a      	str	r2, [r3, #0]
 8003a3e:	e027      	b.n	8003a90 <HAL_RCC_OscConfig+0xd4>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	685a      	ldr	r2, [r3, #4]
 8003a44:	23a0      	movs	r3, #160	; 0xa0
 8003a46:	02db      	lsls	r3, r3, #11
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d10e      	bne.n	8003a6a <HAL_RCC_OscConfig+0xae>
 8003a4c:	4ba9      	ldr	r3, [pc, #676]	; (8003cf4 <HAL_RCC_OscConfig+0x338>)
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	4ba8      	ldr	r3, [pc, #672]	; (8003cf4 <HAL_RCC_OscConfig+0x338>)
 8003a52:	2180      	movs	r1, #128	; 0x80
 8003a54:	02c9      	lsls	r1, r1, #11
 8003a56:	430a      	orrs	r2, r1
 8003a58:	601a      	str	r2, [r3, #0]
 8003a5a:	4ba6      	ldr	r3, [pc, #664]	; (8003cf4 <HAL_RCC_OscConfig+0x338>)
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	4ba5      	ldr	r3, [pc, #660]	; (8003cf4 <HAL_RCC_OscConfig+0x338>)
 8003a60:	2180      	movs	r1, #128	; 0x80
 8003a62:	0249      	lsls	r1, r1, #9
 8003a64:	430a      	orrs	r2, r1
 8003a66:	601a      	str	r2, [r3, #0]
 8003a68:	e012      	b.n	8003a90 <HAL_RCC_OscConfig+0xd4>
 8003a6a:	4ba2      	ldr	r3, [pc, #648]	; (8003cf4 <HAL_RCC_OscConfig+0x338>)
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	4ba1      	ldr	r3, [pc, #644]	; (8003cf4 <HAL_RCC_OscConfig+0x338>)
 8003a70:	49a1      	ldr	r1, [pc, #644]	; (8003cf8 <HAL_RCC_OscConfig+0x33c>)
 8003a72:	400a      	ands	r2, r1
 8003a74:	601a      	str	r2, [r3, #0]
 8003a76:	4b9f      	ldr	r3, [pc, #636]	; (8003cf4 <HAL_RCC_OscConfig+0x338>)
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	2380      	movs	r3, #128	; 0x80
 8003a7c:	025b      	lsls	r3, r3, #9
 8003a7e:	4013      	ands	r3, r2
 8003a80:	60fb      	str	r3, [r7, #12]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	4b9b      	ldr	r3, [pc, #620]	; (8003cf4 <HAL_RCC_OscConfig+0x338>)
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	4b9a      	ldr	r3, [pc, #616]	; (8003cf4 <HAL_RCC_OscConfig+0x338>)
 8003a8a:	499c      	ldr	r1, [pc, #624]	; (8003cfc <HAL_RCC_OscConfig+0x340>)
 8003a8c:	400a      	ands	r2, r1
 8003a8e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d014      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a98:	f7fe fd12 	bl	80024c0 <HAL_GetTick>
 8003a9c:	0003      	movs	r3, r0
 8003a9e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003aa0:	e008      	b.n	8003ab4 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003aa2:	f7fe fd0d 	bl	80024c0 <HAL_GetTick>
 8003aa6:	0002      	movs	r2, r0
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	2b64      	cmp	r3, #100	; 0x64
 8003aae:	d901      	bls.n	8003ab4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	e2f9      	b.n	80040a8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003ab4:	4b8f      	ldr	r3, [pc, #572]	; (8003cf4 <HAL_RCC_OscConfig+0x338>)
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	2380      	movs	r3, #128	; 0x80
 8003aba:	029b      	lsls	r3, r3, #10
 8003abc:	4013      	ands	r3, r2
 8003abe:	d0f0      	beq.n	8003aa2 <HAL_RCC_OscConfig+0xe6>
 8003ac0:	e015      	b.n	8003aee <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ac2:	f7fe fcfd 	bl	80024c0 <HAL_GetTick>
 8003ac6:	0003      	movs	r3, r0
 8003ac8:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003aca:	e008      	b.n	8003ade <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003acc:	f7fe fcf8 	bl	80024c0 <HAL_GetTick>
 8003ad0:	0002      	movs	r2, r0
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	2b64      	cmp	r3, #100	; 0x64
 8003ad8:	d901      	bls.n	8003ade <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e2e4      	b.n	80040a8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003ade:	4b85      	ldr	r3, [pc, #532]	; (8003cf4 <HAL_RCC_OscConfig+0x338>)
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	2380      	movs	r3, #128	; 0x80
 8003ae4:	029b      	lsls	r3, r3, #10
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	d1f0      	bne.n	8003acc <HAL_RCC_OscConfig+0x110>
 8003aea:	e000      	b.n	8003aee <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aec:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	2202      	movs	r2, #2
 8003af4:	4013      	ands	r3, r2
 8003af6:	d100      	bne.n	8003afa <HAL_RCC_OscConfig+0x13e>
 8003af8:	e099      	b.n	8003c2e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8003b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b02:	2220      	movs	r2, #32
 8003b04:	4013      	ands	r3, r2
 8003b06:	d009      	beq.n	8003b1c <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8003b08:	4b7a      	ldr	r3, [pc, #488]	; (8003cf4 <HAL_RCC_OscConfig+0x338>)
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	4b79      	ldr	r3, [pc, #484]	; (8003cf4 <HAL_RCC_OscConfig+0x338>)
 8003b0e:	2120      	movs	r1, #32
 8003b10:	430a      	orrs	r2, r1
 8003b12:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8003b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b16:	2220      	movs	r2, #32
 8003b18:	4393      	bics	r3, r2
 8003b1a:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	2b04      	cmp	r3, #4
 8003b20:	d005      	beq.n	8003b2e <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	2b0c      	cmp	r3, #12
 8003b26:	d13e      	bne.n	8003ba6 <HAL_RCC_OscConfig+0x1ea>
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d13b      	bne.n	8003ba6 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8003b2e:	4b71      	ldr	r3, [pc, #452]	; (8003cf4 <HAL_RCC_OscConfig+0x338>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	2204      	movs	r2, #4
 8003b34:	4013      	ands	r3, r2
 8003b36:	d004      	beq.n	8003b42 <HAL_RCC_OscConfig+0x186>
 8003b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d101      	bne.n	8003b42 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e2b2      	b.n	80040a8 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b42:	4b6c      	ldr	r3, [pc, #432]	; (8003cf4 <HAL_RCC_OscConfig+0x338>)
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	4a6e      	ldr	r2, [pc, #440]	; (8003d00 <HAL_RCC_OscConfig+0x344>)
 8003b48:	4013      	ands	r3, r2
 8003b4a:	0019      	movs	r1, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	691b      	ldr	r3, [r3, #16]
 8003b50:	021a      	lsls	r2, r3, #8
 8003b52:	4b68      	ldr	r3, [pc, #416]	; (8003cf4 <HAL_RCC_OscConfig+0x338>)
 8003b54:	430a      	orrs	r2, r1
 8003b56:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003b58:	4b66      	ldr	r3, [pc, #408]	; (8003cf4 <HAL_RCC_OscConfig+0x338>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2209      	movs	r2, #9
 8003b5e:	4393      	bics	r3, r2
 8003b60:	0019      	movs	r1, r3
 8003b62:	4b64      	ldr	r3, [pc, #400]	; (8003cf4 <HAL_RCC_OscConfig+0x338>)
 8003b64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b66:	430a      	orrs	r2, r1
 8003b68:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b6a:	f000 fbeb 	bl	8004344 <HAL_RCC_GetSysClockFreq>
 8003b6e:	0001      	movs	r1, r0
 8003b70:	4b60      	ldr	r3, [pc, #384]	; (8003cf4 <HAL_RCC_OscConfig+0x338>)
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	091b      	lsrs	r3, r3, #4
 8003b76:	220f      	movs	r2, #15
 8003b78:	4013      	ands	r3, r2
 8003b7a:	4a62      	ldr	r2, [pc, #392]	; (8003d04 <HAL_RCC_OscConfig+0x348>)
 8003b7c:	5cd3      	ldrb	r3, [r2, r3]
 8003b7e:	000a      	movs	r2, r1
 8003b80:	40da      	lsrs	r2, r3
 8003b82:	4b61      	ldr	r3, [pc, #388]	; (8003d08 <HAL_RCC_OscConfig+0x34c>)
 8003b84:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8003b86:	4b61      	ldr	r3, [pc, #388]	; (8003d0c <HAL_RCC_OscConfig+0x350>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2513      	movs	r5, #19
 8003b8c:	197c      	adds	r4, r7, r5
 8003b8e:	0018      	movs	r0, r3
 8003b90:	f7fe fc50 	bl	8002434 <HAL_InitTick>
 8003b94:	0003      	movs	r3, r0
 8003b96:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8003b98:	197b      	adds	r3, r7, r5
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d046      	beq.n	8003c2e <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8003ba0:	197b      	adds	r3, r7, r5
 8003ba2:	781b      	ldrb	r3, [r3, #0]
 8003ba4:	e280      	b.n	80040a8 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8003ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d027      	beq.n	8003bfc <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003bac:	4b51      	ldr	r3, [pc, #324]	; (8003cf4 <HAL_RCC_OscConfig+0x338>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2209      	movs	r2, #9
 8003bb2:	4393      	bics	r3, r2
 8003bb4:	0019      	movs	r1, r3
 8003bb6:	4b4f      	ldr	r3, [pc, #316]	; (8003cf4 <HAL_RCC_OscConfig+0x338>)
 8003bb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bba:	430a      	orrs	r2, r1
 8003bbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bbe:	f7fe fc7f 	bl	80024c0 <HAL_GetTick>
 8003bc2:	0003      	movs	r3, r0
 8003bc4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003bc6:	e008      	b.n	8003bda <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bc8:	f7fe fc7a 	bl	80024c0 <HAL_GetTick>
 8003bcc:	0002      	movs	r2, r0
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	2b02      	cmp	r3, #2
 8003bd4:	d901      	bls.n	8003bda <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	e266      	b.n	80040a8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003bda:	4b46      	ldr	r3, [pc, #280]	; (8003cf4 <HAL_RCC_OscConfig+0x338>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	2204      	movs	r2, #4
 8003be0:	4013      	ands	r3, r2
 8003be2:	d0f1      	beq.n	8003bc8 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003be4:	4b43      	ldr	r3, [pc, #268]	; (8003cf4 <HAL_RCC_OscConfig+0x338>)
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	4a45      	ldr	r2, [pc, #276]	; (8003d00 <HAL_RCC_OscConfig+0x344>)
 8003bea:	4013      	ands	r3, r2
 8003bec:	0019      	movs	r1, r3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	691b      	ldr	r3, [r3, #16]
 8003bf2:	021a      	lsls	r2, r3, #8
 8003bf4:	4b3f      	ldr	r3, [pc, #252]	; (8003cf4 <HAL_RCC_OscConfig+0x338>)
 8003bf6:	430a      	orrs	r2, r1
 8003bf8:	605a      	str	r2, [r3, #4]
 8003bfa:	e018      	b.n	8003c2e <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bfc:	4b3d      	ldr	r3, [pc, #244]	; (8003cf4 <HAL_RCC_OscConfig+0x338>)
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	4b3c      	ldr	r3, [pc, #240]	; (8003cf4 <HAL_RCC_OscConfig+0x338>)
 8003c02:	2101      	movs	r1, #1
 8003c04:	438a      	bics	r2, r1
 8003c06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c08:	f7fe fc5a 	bl	80024c0 <HAL_GetTick>
 8003c0c:	0003      	movs	r3, r0
 8003c0e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003c10:	e008      	b.n	8003c24 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c12:	f7fe fc55 	bl	80024c0 <HAL_GetTick>
 8003c16:	0002      	movs	r2, r0
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d901      	bls.n	8003c24 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8003c20:	2303      	movs	r3, #3
 8003c22:	e241      	b.n	80040a8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003c24:	4b33      	ldr	r3, [pc, #204]	; (8003cf4 <HAL_RCC_OscConfig+0x338>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	2204      	movs	r2, #4
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	d1f1      	bne.n	8003c12 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	2210      	movs	r2, #16
 8003c34:	4013      	ands	r3, r2
 8003c36:	d100      	bne.n	8003c3a <HAL_RCC_OscConfig+0x27e>
 8003c38:	e0a1      	b.n	8003d7e <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d140      	bne.n	8003cc2 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003c40:	4b2c      	ldr	r3, [pc, #176]	; (8003cf4 <HAL_RCC_OscConfig+0x338>)
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	2380      	movs	r3, #128	; 0x80
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	4013      	ands	r3, r2
 8003c4a:	d005      	beq.n	8003c58 <HAL_RCC_OscConfig+0x29c>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	699b      	ldr	r3, [r3, #24]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d101      	bne.n	8003c58 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e227      	b.n	80040a8 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c58:	4b26      	ldr	r3, [pc, #152]	; (8003cf4 <HAL_RCC_OscConfig+0x338>)
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	4a2c      	ldr	r2, [pc, #176]	; (8003d10 <HAL_RCC_OscConfig+0x354>)
 8003c5e:	4013      	ands	r3, r2
 8003c60:	0019      	movs	r1, r3
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a1a      	ldr	r2, [r3, #32]
 8003c66:	4b23      	ldr	r3, [pc, #140]	; (8003cf4 <HAL_RCC_OscConfig+0x338>)
 8003c68:	430a      	orrs	r2, r1
 8003c6a:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c6c:	4b21      	ldr	r3, [pc, #132]	; (8003cf4 <HAL_RCC_OscConfig+0x338>)
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	021b      	lsls	r3, r3, #8
 8003c72:	0a19      	lsrs	r1, r3, #8
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	69db      	ldr	r3, [r3, #28]
 8003c78:	061a      	lsls	r2, r3, #24
 8003c7a:	4b1e      	ldr	r3, [pc, #120]	; (8003cf4 <HAL_RCC_OscConfig+0x338>)
 8003c7c:	430a      	orrs	r2, r1
 8003c7e:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6a1b      	ldr	r3, [r3, #32]
 8003c84:	0b5b      	lsrs	r3, r3, #13
 8003c86:	3301      	adds	r3, #1
 8003c88:	2280      	movs	r2, #128	; 0x80
 8003c8a:	0212      	lsls	r2, r2, #8
 8003c8c:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003c8e:	4b19      	ldr	r3, [pc, #100]	; (8003cf4 <HAL_RCC_OscConfig+0x338>)
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	091b      	lsrs	r3, r3, #4
 8003c94:	210f      	movs	r1, #15
 8003c96:	400b      	ands	r3, r1
 8003c98:	491a      	ldr	r1, [pc, #104]	; (8003d04 <HAL_RCC_OscConfig+0x348>)
 8003c9a:	5ccb      	ldrb	r3, [r1, r3]
 8003c9c:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003c9e:	4b1a      	ldr	r3, [pc, #104]	; (8003d08 <HAL_RCC_OscConfig+0x34c>)
 8003ca0:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8003ca2:	4b1a      	ldr	r3, [pc, #104]	; (8003d0c <HAL_RCC_OscConfig+0x350>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2513      	movs	r5, #19
 8003ca8:	197c      	adds	r4, r7, r5
 8003caa:	0018      	movs	r0, r3
 8003cac:	f7fe fbc2 	bl	8002434 <HAL_InitTick>
 8003cb0:	0003      	movs	r3, r0
 8003cb2:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8003cb4:	197b      	adds	r3, r7, r5
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d060      	beq.n	8003d7e <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8003cbc:	197b      	adds	r3, r7, r5
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	e1f2      	b.n	80040a8 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	699b      	ldr	r3, [r3, #24]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d03f      	beq.n	8003d4a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003cca:	4b0a      	ldr	r3, [pc, #40]	; (8003cf4 <HAL_RCC_OscConfig+0x338>)
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	4b09      	ldr	r3, [pc, #36]	; (8003cf4 <HAL_RCC_OscConfig+0x338>)
 8003cd0:	2180      	movs	r1, #128	; 0x80
 8003cd2:	0049      	lsls	r1, r1, #1
 8003cd4:	430a      	orrs	r2, r1
 8003cd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cd8:	f7fe fbf2 	bl	80024c0 <HAL_GetTick>
 8003cdc:	0003      	movs	r3, r0
 8003cde:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003ce0:	e018      	b.n	8003d14 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ce2:	f7fe fbed 	bl	80024c0 <HAL_GetTick>
 8003ce6:	0002      	movs	r2, r0
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	d911      	bls.n	8003d14 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	e1d9      	b.n	80040a8 <HAL_RCC_OscConfig+0x6ec>
 8003cf4:	40021000 	.word	0x40021000
 8003cf8:	fffeffff 	.word	0xfffeffff
 8003cfc:	fffbffff 	.word	0xfffbffff
 8003d00:	ffffe0ff 	.word	0xffffe0ff
 8003d04:	0800662c 	.word	0x0800662c
 8003d08:	2000094c 	.word	0x2000094c
 8003d0c:	20000950 	.word	0x20000950
 8003d10:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003d14:	4bc9      	ldr	r3, [pc, #804]	; (800403c <HAL_RCC_OscConfig+0x680>)
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	2380      	movs	r3, #128	; 0x80
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	d0e0      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d20:	4bc6      	ldr	r3, [pc, #792]	; (800403c <HAL_RCC_OscConfig+0x680>)
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	4ac6      	ldr	r2, [pc, #792]	; (8004040 <HAL_RCC_OscConfig+0x684>)
 8003d26:	4013      	ands	r3, r2
 8003d28:	0019      	movs	r1, r3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a1a      	ldr	r2, [r3, #32]
 8003d2e:	4bc3      	ldr	r3, [pc, #780]	; (800403c <HAL_RCC_OscConfig+0x680>)
 8003d30:	430a      	orrs	r2, r1
 8003d32:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d34:	4bc1      	ldr	r3, [pc, #772]	; (800403c <HAL_RCC_OscConfig+0x680>)
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	021b      	lsls	r3, r3, #8
 8003d3a:	0a19      	lsrs	r1, r3, #8
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	69db      	ldr	r3, [r3, #28]
 8003d40:	061a      	lsls	r2, r3, #24
 8003d42:	4bbe      	ldr	r3, [pc, #760]	; (800403c <HAL_RCC_OscConfig+0x680>)
 8003d44:	430a      	orrs	r2, r1
 8003d46:	605a      	str	r2, [r3, #4]
 8003d48:	e019      	b.n	8003d7e <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003d4a:	4bbc      	ldr	r3, [pc, #752]	; (800403c <HAL_RCC_OscConfig+0x680>)
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	4bbb      	ldr	r3, [pc, #748]	; (800403c <HAL_RCC_OscConfig+0x680>)
 8003d50:	49bc      	ldr	r1, [pc, #752]	; (8004044 <HAL_RCC_OscConfig+0x688>)
 8003d52:	400a      	ands	r2, r1
 8003d54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d56:	f7fe fbb3 	bl	80024c0 <HAL_GetTick>
 8003d5a:	0003      	movs	r3, r0
 8003d5c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003d5e:	e008      	b.n	8003d72 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d60:	f7fe fbae 	bl	80024c0 <HAL_GetTick>
 8003d64:	0002      	movs	r2, r0
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	d901      	bls.n	8003d72 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	e19a      	b.n	80040a8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003d72:	4bb2      	ldr	r3, [pc, #712]	; (800403c <HAL_RCC_OscConfig+0x680>)
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	2380      	movs	r3, #128	; 0x80
 8003d78:	009b      	lsls	r3, r3, #2
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	d1f0      	bne.n	8003d60 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2208      	movs	r2, #8
 8003d84:	4013      	ands	r3, r2
 8003d86:	d036      	beq.n	8003df6 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	695b      	ldr	r3, [r3, #20]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d019      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d90:	4baa      	ldr	r3, [pc, #680]	; (800403c <HAL_RCC_OscConfig+0x680>)
 8003d92:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003d94:	4ba9      	ldr	r3, [pc, #676]	; (800403c <HAL_RCC_OscConfig+0x680>)
 8003d96:	2101      	movs	r1, #1
 8003d98:	430a      	orrs	r2, r1
 8003d9a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d9c:	f7fe fb90 	bl	80024c0 <HAL_GetTick>
 8003da0:	0003      	movs	r3, r0
 8003da2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003da4:	e008      	b.n	8003db8 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003da6:	f7fe fb8b 	bl	80024c0 <HAL_GetTick>
 8003daa:	0002      	movs	r2, r0
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d901      	bls.n	8003db8 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8003db4:	2303      	movs	r3, #3
 8003db6:	e177      	b.n	80040a8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003db8:	4ba0      	ldr	r3, [pc, #640]	; (800403c <HAL_RCC_OscConfig+0x680>)
 8003dba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dbc:	2202      	movs	r2, #2
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	d0f1      	beq.n	8003da6 <HAL_RCC_OscConfig+0x3ea>
 8003dc2:	e018      	b.n	8003df6 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dc4:	4b9d      	ldr	r3, [pc, #628]	; (800403c <HAL_RCC_OscConfig+0x680>)
 8003dc6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003dc8:	4b9c      	ldr	r3, [pc, #624]	; (800403c <HAL_RCC_OscConfig+0x680>)
 8003dca:	2101      	movs	r1, #1
 8003dcc:	438a      	bics	r2, r1
 8003dce:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dd0:	f7fe fb76 	bl	80024c0 <HAL_GetTick>
 8003dd4:	0003      	movs	r3, r0
 8003dd6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003dd8:	e008      	b.n	8003dec <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dda:	f7fe fb71 	bl	80024c0 <HAL_GetTick>
 8003dde:	0002      	movs	r2, r0
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	d901      	bls.n	8003dec <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8003de8:	2303      	movs	r3, #3
 8003dea:	e15d      	b.n	80040a8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003dec:	4b93      	ldr	r3, [pc, #588]	; (800403c <HAL_RCC_OscConfig+0x680>)
 8003dee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003df0:	2202      	movs	r2, #2
 8003df2:	4013      	ands	r3, r2
 8003df4:	d1f1      	bne.n	8003dda <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	2204      	movs	r2, #4
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	d100      	bne.n	8003e02 <HAL_RCC_OscConfig+0x446>
 8003e00:	e0ae      	b.n	8003f60 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e02:	2023      	movs	r0, #35	; 0x23
 8003e04:	183b      	adds	r3, r7, r0
 8003e06:	2200      	movs	r2, #0
 8003e08:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e0a:	4b8c      	ldr	r3, [pc, #560]	; (800403c <HAL_RCC_OscConfig+0x680>)
 8003e0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e0e:	2380      	movs	r3, #128	; 0x80
 8003e10:	055b      	lsls	r3, r3, #21
 8003e12:	4013      	ands	r3, r2
 8003e14:	d109      	bne.n	8003e2a <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e16:	4b89      	ldr	r3, [pc, #548]	; (800403c <HAL_RCC_OscConfig+0x680>)
 8003e18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e1a:	4b88      	ldr	r3, [pc, #544]	; (800403c <HAL_RCC_OscConfig+0x680>)
 8003e1c:	2180      	movs	r1, #128	; 0x80
 8003e1e:	0549      	lsls	r1, r1, #21
 8003e20:	430a      	orrs	r2, r1
 8003e22:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003e24:	183b      	adds	r3, r7, r0
 8003e26:	2201      	movs	r2, #1
 8003e28:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e2a:	4b87      	ldr	r3, [pc, #540]	; (8004048 <HAL_RCC_OscConfig+0x68c>)
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	2380      	movs	r3, #128	; 0x80
 8003e30:	005b      	lsls	r3, r3, #1
 8003e32:	4013      	ands	r3, r2
 8003e34:	d11a      	bne.n	8003e6c <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e36:	4b84      	ldr	r3, [pc, #528]	; (8004048 <HAL_RCC_OscConfig+0x68c>)
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	4b83      	ldr	r3, [pc, #524]	; (8004048 <HAL_RCC_OscConfig+0x68c>)
 8003e3c:	2180      	movs	r1, #128	; 0x80
 8003e3e:	0049      	lsls	r1, r1, #1
 8003e40:	430a      	orrs	r2, r1
 8003e42:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e44:	f7fe fb3c 	bl	80024c0 <HAL_GetTick>
 8003e48:	0003      	movs	r3, r0
 8003e4a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e4c:	e008      	b.n	8003e60 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e4e:	f7fe fb37 	bl	80024c0 <HAL_GetTick>
 8003e52:	0002      	movs	r2, r0
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	2b64      	cmp	r3, #100	; 0x64
 8003e5a:	d901      	bls.n	8003e60 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	e123      	b.n	80040a8 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e60:	4b79      	ldr	r3, [pc, #484]	; (8004048 <HAL_RCC_OscConfig+0x68c>)
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	2380      	movs	r3, #128	; 0x80
 8003e66:	005b      	lsls	r3, r3, #1
 8003e68:	4013      	ands	r3, r2
 8003e6a:	d0f0      	beq.n	8003e4e <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	689a      	ldr	r2, [r3, #8]
 8003e70:	2380      	movs	r3, #128	; 0x80
 8003e72:	005b      	lsls	r3, r3, #1
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d107      	bne.n	8003e88 <HAL_RCC_OscConfig+0x4cc>
 8003e78:	4b70      	ldr	r3, [pc, #448]	; (800403c <HAL_RCC_OscConfig+0x680>)
 8003e7a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003e7c:	4b6f      	ldr	r3, [pc, #444]	; (800403c <HAL_RCC_OscConfig+0x680>)
 8003e7e:	2180      	movs	r1, #128	; 0x80
 8003e80:	0049      	lsls	r1, r1, #1
 8003e82:	430a      	orrs	r2, r1
 8003e84:	651a      	str	r2, [r3, #80]	; 0x50
 8003e86:	e031      	b.n	8003eec <HAL_RCC_OscConfig+0x530>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d10c      	bne.n	8003eaa <HAL_RCC_OscConfig+0x4ee>
 8003e90:	4b6a      	ldr	r3, [pc, #424]	; (800403c <HAL_RCC_OscConfig+0x680>)
 8003e92:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003e94:	4b69      	ldr	r3, [pc, #420]	; (800403c <HAL_RCC_OscConfig+0x680>)
 8003e96:	496b      	ldr	r1, [pc, #428]	; (8004044 <HAL_RCC_OscConfig+0x688>)
 8003e98:	400a      	ands	r2, r1
 8003e9a:	651a      	str	r2, [r3, #80]	; 0x50
 8003e9c:	4b67      	ldr	r3, [pc, #412]	; (800403c <HAL_RCC_OscConfig+0x680>)
 8003e9e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003ea0:	4b66      	ldr	r3, [pc, #408]	; (800403c <HAL_RCC_OscConfig+0x680>)
 8003ea2:	496a      	ldr	r1, [pc, #424]	; (800404c <HAL_RCC_OscConfig+0x690>)
 8003ea4:	400a      	ands	r2, r1
 8003ea6:	651a      	str	r2, [r3, #80]	; 0x50
 8003ea8:	e020      	b.n	8003eec <HAL_RCC_OscConfig+0x530>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	689a      	ldr	r2, [r3, #8]
 8003eae:	23a0      	movs	r3, #160	; 0xa0
 8003eb0:	00db      	lsls	r3, r3, #3
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d10e      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x518>
 8003eb6:	4b61      	ldr	r3, [pc, #388]	; (800403c <HAL_RCC_OscConfig+0x680>)
 8003eb8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003eba:	4b60      	ldr	r3, [pc, #384]	; (800403c <HAL_RCC_OscConfig+0x680>)
 8003ebc:	2180      	movs	r1, #128	; 0x80
 8003ebe:	00c9      	lsls	r1, r1, #3
 8003ec0:	430a      	orrs	r2, r1
 8003ec2:	651a      	str	r2, [r3, #80]	; 0x50
 8003ec4:	4b5d      	ldr	r3, [pc, #372]	; (800403c <HAL_RCC_OscConfig+0x680>)
 8003ec6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003ec8:	4b5c      	ldr	r3, [pc, #368]	; (800403c <HAL_RCC_OscConfig+0x680>)
 8003eca:	2180      	movs	r1, #128	; 0x80
 8003ecc:	0049      	lsls	r1, r1, #1
 8003ece:	430a      	orrs	r2, r1
 8003ed0:	651a      	str	r2, [r3, #80]	; 0x50
 8003ed2:	e00b      	b.n	8003eec <HAL_RCC_OscConfig+0x530>
 8003ed4:	4b59      	ldr	r3, [pc, #356]	; (800403c <HAL_RCC_OscConfig+0x680>)
 8003ed6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003ed8:	4b58      	ldr	r3, [pc, #352]	; (800403c <HAL_RCC_OscConfig+0x680>)
 8003eda:	495a      	ldr	r1, [pc, #360]	; (8004044 <HAL_RCC_OscConfig+0x688>)
 8003edc:	400a      	ands	r2, r1
 8003ede:	651a      	str	r2, [r3, #80]	; 0x50
 8003ee0:	4b56      	ldr	r3, [pc, #344]	; (800403c <HAL_RCC_OscConfig+0x680>)
 8003ee2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003ee4:	4b55      	ldr	r3, [pc, #340]	; (800403c <HAL_RCC_OscConfig+0x680>)
 8003ee6:	4959      	ldr	r1, [pc, #356]	; (800404c <HAL_RCC_OscConfig+0x690>)
 8003ee8:	400a      	ands	r2, r1
 8003eea:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d015      	beq.n	8003f20 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ef4:	f7fe fae4 	bl	80024c0 <HAL_GetTick>
 8003ef8:	0003      	movs	r3, r0
 8003efa:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003efc:	e009      	b.n	8003f12 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003efe:	f7fe fadf 	bl	80024c0 <HAL_GetTick>
 8003f02:	0002      	movs	r2, r0
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	4a51      	ldr	r2, [pc, #324]	; (8004050 <HAL_RCC_OscConfig+0x694>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d901      	bls.n	8003f12 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e0ca      	b.n	80040a8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f12:	4b4a      	ldr	r3, [pc, #296]	; (800403c <HAL_RCC_OscConfig+0x680>)
 8003f14:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003f16:	2380      	movs	r3, #128	; 0x80
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	d0ef      	beq.n	8003efe <HAL_RCC_OscConfig+0x542>
 8003f1e:	e014      	b.n	8003f4a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f20:	f7fe face 	bl	80024c0 <HAL_GetTick>
 8003f24:	0003      	movs	r3, r0
 8003f26:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003f28:	e009      	b.n	8003f3e <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f2a:	f7fe fac9 	bl	80024c0 <HAL_GetTick>
 8003f2e:	0002      	movs	r2, r0
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	4a46      	ldr	r2, [pc, #280]	; (8004050 <HAL_RCC_OscConfig+0x694>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d901      	bls.n	8003f3e <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e0b4      	b.n	80040a8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003f3e:	4b3f      	ldr	r3, [pc, #252]	; (800403c <HAL_RCC_OscConfig+0x680>)
 8003f40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003f42:	2380      	movs	r3, #128	; 0x80
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	4013      	ands	r3, r2
 8003f48:	d1ef      	bne.n	8003f2a <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003f4a:	2323      	movs	r3, #35	; 0x23
 8003f4c:	18fb      	adds	r3, r7, r3
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d105      	bne.n	8003f60 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f54:	4b39      	ldr	r3, [pc, #228]	; (800403c <HAL_RCC_OscConfig+0x680>)
 8003f56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f58:	4b38      	ldr	r3, [pc, #224]	; (800403c <HAL_RCC_OscConfig+0x680>)
 8003f5a:	493e      	ldr	r1, [pc, #248]	; (8004054 <HAL_RCC_OscConfig+0x698>)
 8003f5c:	400a      	ands	r2, r1
 8003f5e:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d100      	bne.n	8003f6a <HAL_RCC_OscConfig+0x5ae>
 8003f68:	e09d      	b.n	80040a6 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	2b0c      	cmp	r3, #12
 8003f6e:	d100      	bne.n	8003f72 <HAL_RCC_OscConfig+0x5b6>
 8003f70:	e076      	b.n	8004060 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d145      	bne.n	8004006 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f7a:	4b30      	ldr	r3, [pc, #192]	; (800403c <HAL_RCC_OscConfig+0x680>)
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	4b2f      	ldr	r3, [pc, #188]	; (800403c <HAL_RCC_OscConfig+0x680>)
 8003f80:	4935      	ldr	r1, [pc, #212]	; (8004058 <HAL_RCC_OscConfig+0x69c>)
 8003f82:	400a      	ands	r2, r1
 8003f84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f86:	f7fe fa9b 	bl	80024c0 <HAL_GetTick>
 8003f8a:	0003      	movs	r3, r0
 8003f8c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003f8e:	e008      	b.n	8003fa2 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f90:	f7fe fa96 	bl	80024c0 <HAL_GetTick>
 8003f94:	0002      	movs	r2, r0
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d901      	bls.n	8003fa2 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e082      	b.n	80040a8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003fa2:	4b26      	ldr	r3, [pc, #152]	; (800403c <HAL_RCC_OscConfig+0x680>)
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	2380      	movs	r3, #128	; 0x80
 8003fa8:	049b      	lsls	r3, r3, #18
 8003faa:	4013      	ands	r3, r2
 8003fac:	d1f0      	bne.n	8003f90 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fae:	4b23      	ldr	r3, [pc, #140]	; (800403c <HAL_RCC_OscConfig+0x680>)
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	4a2a      	ldr	r2, [pc, #168]	; (800405c <HAL_RCC_OscConfig+0x6a0>)
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	0019      	movs	r1, r3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc0:	431a      	orrs	r2, r3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc6:	431a      	orrs	r2, r3
 8003fc8:	4b1c      	ldr	r3, [pc, #112]	; (800403c <HAL_RCC_OscConfig+0x680>)
 8003fca:	430a      	orrs	r2, r1
 8003fcc:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fce:	4b1b      	ldr	r3, [pc, #108]	; (800403c <HAL_RCC_OscConfig+0x680>)
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	4b1a      	ldr	r3, [pc, #104]	; (800403c <HAL_RCC_OscConfig+0x680>)
 8003fd4:	2180      	movs	r1, #128	; 0x80
 8003fd6:	0449      	lsls	r1, r1, #17
 8003fd8:	430a      	orrs	r2, r1
 8003fda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fdc:	f7fe fa70 	bl	80024c0 <HAL_GetTick>
 8003fe0:	0003      	movs	r3, r0
 8003fe2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003fe4:	e008      	b.n	8003ff8 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fe6:	f7fe fa6b 	bl	80024c0 <HAL_GetTick>
 8003fea:	0002      	movs	r2, r0
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	d901      	bls.n	8003ff8 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	e057      	b.n	80040a8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003ff8:	4b10      	ldr	r3, [pc, #64]	; (800403c <HAL_RCC_OscConfig+0x680>)
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	2380      	movs	r3, #128	; 0x80
 8003ffe:	049b      	lsls	r3, r3, #18
 8004000:	4013      	ands	r3, r2
 8004002:	d0f0      	beq.n	8003fe6 <HAL_RCC_OscConfig+0x62a>
 8004004:	e04f      	b.n	80040a6 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004006:	4b0d      	ldr	r3, [pc, #52]	; (800403c <HAL_RCC_OscConfig+0x680>)
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	4b0c      	ldr	r3, [pc, #48]	; (800403c <HAL_RCC_OscConfig+0x680>)
 800400c:	4912      	ldr	r1, [pc, #72]	; (8004058 <HAL_RCC_OscConfig+0x69c>)
 800400e:	400a      	ands	r2, r1
 8004010:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004012:	f7fe fa55 	bl	80024c0 <HAL_GetTick>
 8004016:	0003      	movs	r3, r0
 8004018:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800401a:	e008      	b.n	800402e <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800401c:	f7fe fa50 	bl	80024c0 <HAL_GetTick>
 8004020:	0002      	movs	r2, r0
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	2b02      	cmp	r3, #2
 8004028:	d901      	bls.n	800402e <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 800402a:	2303      	movs	r3, #3
 800402c:	e03c      	b.n	80040a8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800402e:	4b03      	ldr	r3, [pc, #12]	; (800403c <HAL_RCC_OscConfig+0x680>)
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	2380      	movs	r3, #128	; 0x80
 8004034:	049b      	lsls	r3, r3, #18
 8004036:	4013      	ands	r3, r2
 8004038:	d1f0      	bne.n	800401c <HAL_RCC_OscConfig+0x660>
 800403a:	e034      	b.n	80040a6 <HAL_RCC_OscConfig+0x6ea>
 800403c:	40021000 	.word	0x40021000
 8004040:	ffff1fff 	.word	0xffff1fff
 8004044:	fffffeff 	.word	0xfffffeff
 8004048:	40007000 	.word	0x40007000
 800404c:	fffffbff 	.word	0xfffffbff
 8004050:	00001388 	.word	0x00001388
 8004054:	efffffff 	.word	0xefffffff
 8004058:	feffffff 	.word	0xfeffffff
 800405c:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004064:	2b01      	cmp	r3, #1
 8004066:	d101      	bne.n	800406c <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e01d      	b.n	80040a8 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800406c:	4b10      	ldr	r3, [pc, #64]	; (80040b0 <HAL_RCC_OscConfig+0x6f4>)
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004072:	69ba      	ldr	r2, [r7, #24]
 8004074:	2380      	movs	r3, #128	; 0x80
 8004076:	025b      	lsls	r3, r3, #9
 8004078:	401a      	ands	r2, r3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800407e:	429a      	cmp	r2, r3
 8004080:	d10f      	bne.n	80040a2 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004082:	69ba      	ldr	r2, [r7, #24]
 8004084:	23f0      	movs	r3, #240	; 0xf0
 8004086:	039b      	lsls	r3, r3, #14
 8004088:	401a      	ands	r2, r3
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800408e:	429a      	cmp	r2, r3
 8004090:	d107      	bne.n	80040a2 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004092:	69ba      	ldr	r2, [r7, #24]
 8004094:	23c0      	movs	r3, #192	; 0xc0
 8004096:	041b      	lsls	r3, r3, #16
 8004098:	401a      	ands	r2, r3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800409e:	429a      	cmp	r2, r3
 80040a0:	d001      	beq.n	80040a6 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e000      	b.n	80040a8 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 80040a6:	2300      	movs	r3, #0
}
 80040a8:	0018      	movs	r0, r3
 80040aa:	46bd      	mov	sp, r7
 80040ac:	b00a      	add	sp, #40	; 0x28
 80040ae:	bdb0      	pop	{r4, r5, r7, pc}
 80040b0:	40021000 	.word	0x40021000

080040b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040b4:	b5b0      	push	{r4, r5, r7, lr}
 80040b6:	b084      	sub	sp, #16
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d101      	bne.n	80040c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e128      	b.n	800431a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040c8:	4b96      	ldr	r3, [pc, #600]	; (8004324 <HAL_RCC_ClockConfig+0x270>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	2201      	movs	r2, #1
 80040ce:	4013      	ands	r3, r2
 80040d0:	683a      	ldr	r2, [r7, #0]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d91e      	bls.n	8004114 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040d6:	4b93      	ldr	r3, [pc, #588]	; (8004324 <HAL_RCC_ClockConfig+0x270>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	2201      	movs	r2, #1
 80040dc:	4393      	bics	r3, r2
 80040de:	0019      	movs	r1, r3
 80040e0:	4b90      	ldr	r3, [pc, #576]	; (8004324 <HAL_RCC_ClockConfig+0x270>)
 80040e2:	683a      	ldr	r2, [r7, #0]
 80040e4:	430a      	orrs	r2, r1
 80040e6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80040e8:	f7fe f9ea 	bl	80024c0 <HAL_GetTick>
 80040ec:	0003      	movs	r3, r0
 80040ee:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040f0:	e009      	b.n	8004106 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040f2:	f7fe f9e5 	bl	80024c0 <HAL_GetTick>
 80040f6:	0002      	movs	r2, r0
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	4a8a      	ldr	r2, [pc, #552]	; (8004328 <HAL_RCC_ClockConfig+0x274>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d901      	bls.n	8004106 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e109      	b.n	800431a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004106:	4b87      	ldr	r3, [pc, #540]	; (8004324 <HAL_RCC_ClockConfig+0x270>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2201      	movs	r2, #1
 800410c:	4013      	ands	r3, r2
 800410e:	683a      	ldr	r2, [r7, #0]
 8004110:	429a      	cmp	r2, r3
 8004112:	d1ee      	bne.n	80040f2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2202      	movs	r2, #2
 800411a:	4013      	ands	r3, r2
 800411c:	d009      	beq.n	8004132 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800411e:	4b83      	ldr	r3, [pc, #524]	; (800432c <HAL_RCC_ClockConfig+0x278>)
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	22f0      	movs	r2, #240	; 0xf0
 8004124:	4393      	bics	r3, r2
 8004126:	0019      	movs	r1, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	689a      	ldr	r2, [r3, #8]
 800412c:	4b7f      	ldr	r3, [pc, #508]	; (800432c <HAL_RCC_ClockConfig+0x278>)
 800412e:	430a      	orrs	r2, r1
 8004130:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	2201      	movs	r2, #1
 8004138:	4013      	ands	r3, r2
 800413a:	d100      	bne.n	800413e <HAL_RCC_ClockConfig+0x8a>
 800413c:	e089      	b.n	8004252 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	2b02      	cmp	r3, #2
 8004144:	d107      	bne.n	8004156 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004146:	4b79      	ldr	r3, [pc, #484]	; (800432c <HAL_RCC_ClockConfig+0x278>)
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	2380      	movs	r3, #128	; 0x80
 800414c:	029b      	lsls	r3, r3, #10
 800414e:	4013      	ands	r3, r2
 8004150:	d120      	bne.n	8004194 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e0e1      	b.n	800431a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	2b03      	cmp	r3, #3
 800415c:	d107      	bne.n	800416e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800415e:	4b73      	ldr	r3, [pc, #460]	; (800432c <HAL_RCC_ClockConfig+0x278>)
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	2380      	movs	r3, #128	; 0x80
 8004164:	049b      	lsls	r3, r3, #18
 8004166:	4013      	ands	r3, r2
 8004168:	d114      	bne.n	8004194 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e0d5      	b.n	800431a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	2b01      	cmp	r3, #1
 8004174:	d106      	bne.n	8004184 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004176:	4b6d      	ldr	r3, [pc, #436]	; (800432c <HAL_RCC_ClockConfig+0x278>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	2204      	movs	r2, #4
 800417c:	4013      	ands	r3, r2
 800417e:	d109      	bne.n	8004194 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e0ca      	b.n	800431a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004184:	4b69      	ldr	r3, [pc, #420]	; (800432c <HAL_RCC_ClockConfig+0x278>)
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	2380      	movs	r3, #128	; 0x80
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	4013      	ands	r3, r2
 800418e:	d101      	bne.n	8004194 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e0c2      	b.n	800431a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004194:	4b65      	ldr	r3, [pc, #404]	; (800432c <HAL_RCC_ClockConfig+0x278>)
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	2203      	movs	r2, #3
 800419a:	4393      	bics	r3, r2
 800419c:	0019      	movs	r1, r3
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	685a      	ldr	r2, [r3, #4]
 80041a2:	4b62      	ldr	r3, [pc, #392]	; (800432c <HAL_RCC_ClockConfig+0x278>)
 80041a4:	430a      	orrs	r2, r1
 80041a6:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041a8:	f7fe f98a 	bl	80024c0 <HAL_GetTick>
 80041ac:	0003      	movs	r3, r0
 80041ae:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	d111      	bne.n	80041dc <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80041b8:	e009      	b.n	80041ce <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041ba:	f7fe f981 	bl	80024c0 <HAL_GetTick>
 80041be:	0002      	movs	r2, r0
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	4a58      	ldr	r2, [pc, #352]	; (8004328 <HAL_RCC_ClockConfig+0x274>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d901      	bls.n	80041ce <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e0a5      	b.n	800431a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80041ce:	4b57      	ldr	r3, [pc, #348]	; (800432c <HAL_RCC_ClockConfig+0x278>)
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	220c      	movs	r2, #12
 80041d4:	4013      	ands	r3, r2
 80041d6:	2b08      	cmp	r3, #8
 80041d8:	d1ef      	bne.n	80041ba <HAL_RCC_ClockConfig+0x106>
 80041da:	e03a      	b.n	8004252 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	2b03      	cmp	r3, #3
 80041e2:	d111      	bne.n	8004208 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80041e4:	e009      	b.n	80041fa <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041e6:	f7fe f96b 	bl	80024c0 <HAL_GetTick>
 80041ea:	0002      	movs	r2, r0
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	4a4d      	ldr	r2, [pc, #308]	; (8004328 <HAL_RCC_ClockConfig+0x274>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d901      	bls.n	80041fa <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80041f6:	2303      	movs	r3, #3
 80041f8:	e08f      	b.n	800431a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80041fa:	4b4c      	ldr	r3, [pc, #304]	; (800432c <HAL_RCC_ClockConfig+0x278>)
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	220c      	movs	r2, #12
 8004200:	4013      	ands	r3, r2
 8004202:	2b0c      	cmp	r3, #12
 8004204:	d1ef      	bne.n	80041e6 <HAL_RCC_ClockConfig+0x132>
 8004206:	e024      	b.n	8004252 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	2b01      	cmp	r3, #1
 800420e:	d11b      	bne.n	8004248 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004210:	e009      	b.n	8004226 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004212:	f7fe f955 	bl	80024c0 <HAL_GetTick>
 8004216:	0002      	movs	r2, r0
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	4a42      	ldr	r2, [pc, #264]	; (8004328 <HAL_RCC_ClockConfig+0x274>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d901      	bls.n	8004226 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e079      	b.n	800431a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004226:	4b41      	ldr	r3, [pc, #260]	; (800432c <HAL_RCC_ClockConfig+0x278>)
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	220c      	movs	r2, #12
 800422c:	4013      	ands	r3, r2
 800422e:	2b04      	cmp	r3, #4
 8004230:	d1ef      	bne.n	8004212 <HAL_RCC_ClockConfig+0x15e>
 8004232:	e00e      	b.n	8004252 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004234:	f7fe f944 	bl	80024c0 <HAL_GetTick>
 8004238:	0002      	movs	r2, r0
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	4a3a      	ldr	r2, [pc, #232]	; (8004328 <HAL_RCC_ClockConfig+0x274>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d901      	bls.n	8004248 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8004244:	2303      	movs	r3, #3
 8004246:	e068      	b.n	800431a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004248:	4b38      	ldr	r3, [pc, #224]	; (800432c <HAL_RCC_ClockConfig+0x278>)
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	220c      	movs	r2, #12
 800424e:	4013      	ands	r3, r2
 8004250:	d1f0      	bne.n	8004234 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004252:	4b34      	ldr	r3, [pc, #208]	; (8004324 <HAL_RCC_ClockConfig+0x270>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	2201      	movs	r2, #1
 8004258:	4013      	ands	r3, r2
 800425a:	683a      	ldr	r2, [r7, #0]
 800425c:	429a      	cmp	r2, r3
 800425e:	d21e      	bcs.n	800429e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004260:	4b30      	ldr	r3, [pc, #192]	; (8004324 <HAL_RCC_ClockConfig+0x270>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2201      	movs	r2, #1
 8004266:	4393      	bics	r3, r2
 8004268:	0019      	movs	r1, r3
 800426a:	4b2e      	ldr	r3, [pc, #184]	; (8004324 <HAL_RCC_ClockConfig+0x270>)
 800426c:	683a      	ldr	r2, [r7, #0]
 800426e:	430a      	orrs	r2, r1
 8004270:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004272:	f7fe f925 	bl	80024c0 <HAL_GetTick>
 8004276:	0003      	movs	r3, r0
 8004278:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800427a:	e009      	b.n	8004290 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800427c:	f7fe f920 	bl	80024c0 <HAL_GetTick>
 8004280:	0002      	movs	r2, r0
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	4a28      	ldr	r2, [pc, #160]	; (8004328 <HAL_RCC_ClockConfig+0x274>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d901      	bls.n	8004290 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800428c:	2303      	movs	r3, #3
 800428e:	e044      	b.n	800431a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004290:	4b24      	ldr	r3, [pc, #144]	; (8004324 <HAL_RCC_ClockConfig+0x270>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	2201      	movs	r2, #1
 8004296:	4013      	ands	r3, r2
 8004298:	683a      	ldr	r2, [r7, #0]
 800429a:	429a      	cmp	r2, r3
 800429c:	d1ee      	bne.n	800427c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	2204      	movs	r2, #4
 80042a4:	4013      	ands	r3, r2
 80042a6:	d009      	beq.n	80042bc <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042a8:	4b20      	ldr	r3, [pc, #128]	; (800432c <HAL_RCC_ClockConfig+0x278>)
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	4a20      	ldr	r2, [pc, #128]	; (8004330 <HAL_RCC_ClockConfig+0x27c>)
 80042ae:	4013      	ands	r3, r2
 80042b0:	0019      	movs	r1, r3
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	68da      	ldr	r2, [r3, #12]
 80042b6:	4b1d      	ldr	r3, [pc, #116]	; (800432c <HAL_RCC_ClockConfig+0x278>)
 80042b8:	430a      	orrs	r2, r1
 80042ba:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2208      	movs	r2, #8
 80042c2:	4013      	ands	r3, r2
 80042c4:	d00a      	beq.n	80042dc <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80042c6:	4b19      	ldr	r3, [pc, #100]	; (800432c <HAL_RCC_ClockConfig+0x278>)
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	4a1a      	ldr	r2, [pc, #104]	; (8004334 <HAL_RCC_ClockConfig+0x280>)
 80042cc:	4013      	ands	r3, r2
 80042ce:	0019      	movs	r1, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	691b      	ldr	r3, [r3, #16]
 80042d4:	00da      	lsls	r2, r3, #3
 80042d6:	4b15      	ldr	r3, [pc, #84]	; (800432c <HAL_RCC_ClockConfig+0x278>)
 80042d8:	430a      	orrs	r2, r1
 80042da:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80042dc:	f000 f832 	bl	8004344 <HAL_RCC_GetSysClockFreq>
 80042e0:	0001      	movs	r1, r0
 80042e2:	4b12      	ldr	r3, [pc, #72]	; (800432c <HAL_RCC_ClockConfig+0x278>)
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	091b      	lsrs	r3, r3, #4
 80042e8:	220f      	movs	r2, #15
 80042ea:	4013      	ands	r3, r2
 80042ec:	4a12      	ldr	r2, [pc, #72]	; (8004338 <HAL_RCC_ClockConfig+0x284>)
 80042ee:	5cd3      	ldrb	r3, [r2, r3]
 80042f0:	000a      	movs	r2, r1
 80042f2:	40da      	lsrs	r2, r3
 80042f4:	4b11      	ldr	r3, [pc, #68]	; (800433c <HAL_RCC_ClockConfig+0x288>)
 80042f6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80042f8:	4b11      	ldr	r3, [pc, #68]	; (8004340 <HAL_RCC_ClockConfig+0x28c>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	250b      	movs	r5, #11
 80042fe:	197c      	adds	r4, r7, r5
 8004300:	0018      	movs	r0, r3
 8004302:	f7fe f897 	bl	8002434 <HAL_InitTick>
 8004306:	0003      	movs	r3, r0
 8004308:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800430a:	197b      	adds	r3, r7, r5
 800430c:	781b      	ldrb	r3, [r3, #0]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d002      	beq.n	8004318 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8004312:	197b      	adds	r3, r7, r5
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	e000      	b.n	800431a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	0018      	movs	r0, r3
 800431c:	46bd      	mov	sp, r7
 800431e:	b004      	add	sp, #16
 8004320:	bdb0      	pop	{r4, r5, r7, pc}
 8004322:	46c0      	nop			; (mov r8, r8)
 8004324:	40022000 	.word	0x40022000
 8004328:	00001388 	.word	0x00001388
 800432c:	40021000 	.word	0x40021000
 8004330:	fffff8ff 	.word	0xfffff8ff
 8004334:	ffffc7ff 	.word	0xffffc7ff
 8004338:	0800662c 	.word	0x0800662c
 800433c:	2000094c 	.word	0x2000094c
 8004340:	20000950 	.word	0x20000950

08004344 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004344:	b5b0      	push	{r4, r5, r7, lr}
 8004346:	b08e      	sub	sp, #56	; 0x38
 8004348:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800434a:	4b4c      	ldr	r3, [pc, #304]	; (800447c <HAL_RCC_GetSysClockFreq+0x138>)
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004350:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004352:	230c      	movs	r3, #12
 8004354:	4013      	ands	r3, r2
 8004356:	2b0c      	cmp	r3, #12
 8004358:	d014      	beq.n	8004384 <HAL_RCC_GetSysClockFreq+0x40>
 800435a:	d900      	bls.n	800435e <HAL_RCC_GetSysClockFreq+0x1a>
 800435c:	e07b      	b.n	8004456 <HAL_RCC_GetSysClockFreq+0x112>
 800435e:	2b04      	cmp	r3, #4
 8004360:	d002      	beq.n	8004368 <HAL_RCC_GetSysClockFreq+0x24>
 8004362:	2b08      	cmp	r3, #8
 8004364:	d00b      	beq.n	800437e <HAL_RCC_GetSysClockFreq+0x3a>
 8004366:	e076      	b.n	8004456 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004368:	4b44      	ldr	r3, [pc, #272]	; (800447c <HAL_RCC_GetSysClockFreq+0x138>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	2210      	movs	r2, #16
 800436e:	4013      	ands	r3, r2
 8004370:	d002      	beq.n	8004378 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8004372:	4b43      	ldr	r3, [pc, #268]	; (8004480 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004374:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8004376:	e07c      	b.n	8004472 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8004378:	4b42      	ldr	r3, [pc, #264]	; (8004484 <HAL_RCC_GetSysClockFreq+0x140>)
 800437a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800437c:	e079      	b.n	8004472 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800437e:	4b42      	ldr	r3, [pc, #264]	; (8004488 <HAL_RCC_GetSysClockFreq+0x144>)
 8004380:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004382:	e076      	b.n	8004472 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004386:	0c9a      	lsrs	r2, r3, #18
 8004388:	230f      	movs	r3, #15
 800438a:	401a      	ands	r2, r3
 800438c:	4b3f      	ldr	r3, [pc, #252]	; (800448c <HAL_RCC_GetSysClockFreq+0x148>)
 800438e:	5c9b      	ldrb	r3, [r3, r2]
 8004390:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004394:	0d9a      	lsrs	r2, r3, #22
 8004396:	2303      	movs	r3, #3
 8004398:	4013      	ands	r3, r2
 800439a:	3301      	adds	r3, #1
 800439c:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800439e:	4b37      	ldr	r3, [pc, #220]	; (800447c <HAL_RCC_GetSysClockFreq+0x138>)
 80043a0:	68da      	ldr	r2, [r3, #12]
 80043a2:	2380      	movs	r3, #128	; 0x80
 80043a4:	025b      	lsls	r3, r3, #9
 80043a6:	4013      	ands	r3, r2
 80043a8:	d01a      	beq.n	80043e0 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80043aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ac:	61bb      	str	r3, [r7, #24]
 80043ae:	2300      	movs	r3, #0
 80043b0:	61fb      	str	r3, [r7, #28]
 80043b2:	4a35      	ldr	r2, [pc, #212]	; (8004488 <HAL_RCC_GetSysClockFreq+0x144>)
 80043b4:	2300      	movs	r3, #0
 80043b6:	69b8      	ldr	r0, [r7, #24]
 80043b8:	69f9      	ldr	r1, [r7, #28]
 80043ba:	f7fb ff51 	bl	8000260 <__aeabi_lmul>
 80043be:	0002      	movs	r2, r0
 80043c0:	000b      	movs	r3, r1
 80043c2:	0010      	movs	r0, r2
 80043c4:	0019      	movs	r1, r3
 80043c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c8:	613b      	str	r3, [r7, #16]
 80043ca:	2300      	movs	r3, #0
 80043cc:	617b      	str	r3, [r7, #20]
 80043ce:	693a      	ldr	r2, [r7, #16]
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	f7fb ff25 	bl	8000220 <__aeabi_uldivmod>
 80043d6:	0002      	movs	r2, r0
 80043d8:	000b      	movs	r3, r1
 80043da:	0013      	movs	r3, r2
 80043dc:	637b      	str	r3, [r7, #52]	; 0x34
 80043de:	e037      	b.n	8004450 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80043e0:	4b26      	ldr	r3, [pc, #152]	; (800447c <HAL_RCC_GetSysClockFreq+0x138>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2210      	movs	r2, #16
 80043e6:	4013      	ands	r3, r2
 80043e8:	d01a      	beq.n	8004420 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80043ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ec:	60bb      	str	r3, [r7, #8]
 80043ee:	2300      	movs	r3, #0
 80043f0:	60fb      	str	r3, [r7, #12]
 80043f2:	4a23      	ldr	r2, [pc, #140]	; (8004480 <HAL_RCC_GetSysClockFreq+0x13c>)
 80043f4:	2300      	movs	r3, #0
 80043f6:	68b8      	ldr	r0, [r7, #8]
 80043f8:	68f9      	ldr	r1, [r7, #12]
 80043fa:	f7fb ff31 	bl	8000260 <__aeabi_lmul>
 80043fe:	0002      	movs	r2, r0
 8004400:	000b      	movs	r3, r1
 8004402:	0010      	movs	r0, r2
 8004404:	0019      	movs	r1, r3
 8004406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004408:	603b      	str	r3, [r7, #0]
 800440a:	2300      	movs	r3, #0
 800440c:	607b      	str	r3, [r7, #4]
 800440e:	683a      	ldr	r2, [r7, #0]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f7fb ff05 	bl	8000220 <__aeabi_uldivmod>
 8004416:	0002      	movs	r2, r0
 8004418:	000b      	movs	r3, r1
 800441a:	0013      	movs	r3, r2
 800441c:	637b      	str	r3, [r7, #52]	; 0x34
 800441e:	e017      	b.n	8004450 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004422:	0018      	movs	r0, r3
 8004424:	2300      	movs	r3, #0
 8004426:	0019      	movs	r1, r3
 8004428:	4a16      	ldr	r2, [pc, #88]	; (8004484 <HAL_RCC_GetSysClockFreq+0x140>)
 800442a:	2300      	movs	r3, #0
 800442c:	f7fb ff18 	bl	8000260 <__aeabi_lmul>
 8004430:	0002      	movs	r2, r0
 8004432:	000b      	movs	r3, r1
 8004434:	0010      	movs	r0, r2
 8004436:	0019      	movs	r1, r3
 8004438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443a:	001c      	movs	r4, r3
 800443c:	2300      	movs	r3, #0
 800443e:	001d      	movs	r5, r3
 8004440:	0022      	movs	r2, r4
 8004442:	002b      	movs	r3, r5
 8004444:	f7fb feec 	bl	8000220 <__aeabi_uldivmod>
 8004448:	0002      	movs	r2, r0
 800444a:	000b      	movs	r3, r1
 800444c:	0013      	movs	r3, r2
 800444e:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8004450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004452:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004454:	e00d      	b.n	8004472 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004456:	4b09      	ldr	r3, [pc, #36]	; (800447c <HAL_RCC_GetSysClockFreq+0x138>)
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	0b5b      	lsrs	r3, r3, #13
 800445c:	2207      	movs	r2, #7
 800445e:	4013      	ands	r3, r2
 8004460:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004462:	6a3b      	ldr	r3, [r7, #32]
 8004464:	3301      	adds	r3, #1
 8004466:	2280      	movs	r2, #128	; 0x80
 8004468:	0212      	lsls	r2, r2, #8
 800446a:	409a      	lsls	r2, r3
 800446c:	0013      	movs	r3, r2
 800446e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004470:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004474:	0018      	movs	r0, r3
 8004476:	46bd      	mov	sp, r7
 8004478:	b00e      	add	sp, #56	; 0x38
 800447a:	bdb0      	pop	{r4, r5, r7, pc}
 800447c:	40021000 	.word	0x40021000
 8004480:	003d0900 	.word	0x003d0900
 8004484:	00f42400 	.word	0x00f42400
 8004488:	007a1200 	.word	0x007a1200
 800448c:	08006644 	.word	0x08006644

08004490 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004494:	4b02      	ldr	r3, [pc, #8]	; (80044a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8004496:	681b      	ldr	r3, [r3, #0]
}
 8004498:	0018      	movs	r0, r3
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	46c0      	nop			; (mov r8, r8)
 80044a0:	2000094c 	.word	0x2000094c

080044a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80044a8:	f7ff fff2 	bl	8004490 <HAL_RCC_GetHCLKFreq>
 80044ac:	0001      	movs	r1, r0
 80044ae:	4b06      	ldr	r3, [pc, #24]	; (80044c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	0a1b      	lsrs	r3, r3, #8
 80044b4:	2207      	movs	r2, #7
 80044b6:	4013      	ands	r3, r2
 80044b8:	4a04      	ldr	r2, [pc, #16]	; (80044cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80044ba:	5cd3      	ldrb	r3, [r2, r3]
 80044bc:	40d9      	lsrs	r1, r3
 80044be:	000b      	movs	r3, r1
}
 80044c0:	0018      	movs	r0, r3
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	46c0      	nop			; (mov r8, r8)
 80044c8:	40021000 	.word	0x40021000
 80044cc:	0800663c 	.word	0x0800663c

080044d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80044d4:	f7ff ffdc 	bl	8004490 <HAL_RCC_GetHCLKFreq>
 80044d8:	0001      	movs	r1, r0
 80044da:	4b06      	ldr	r3, [pc, #24]	; (80044f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	0adb      	lsrs	r3, r3, #11
 80044e0:	2207      	movs	r2, #7
 80044e2:	4013      	ands	r3, r2
 80044e4:	4a04      	ldr	r2, [pc, #16]	; (80044f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80044e6:	5cd3      	ldrb	r3, [r2, r3]
 80044e8:	40d9      	lsrs	r1, r3
 80044ea:	000b      	movs	r3, r1
}
 80044ec:	0018      	movs	r0, r3
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	46c0      	nop			; (mov r8, r8)
 80044f4:	40021000 	.word	0x40021000
 80044f8:	0800663c 	.word	0x0800663c

080044fc <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b086      	sub	sp, #24
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8004504:	2017      	movs	r0, #23
 8004506:	183b      	adds	r3, r7, r0
 8004508:	2200      	movs	r2, #0
 800450a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	2220      	movs	r2, #32
 8004512:	4013      	ands	r3, r2
 8004514:	d100      	bne.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8004516:	e0c7      	b.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004518:	4b84      	ldr	r3, [pc, #528]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800451a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800451c:	2380      	movs	r3, #128	; 0x80
 800451e:	055b      	lsls	r3, r3, #21
 8004520:	4013      	ands	r3, r2
 8004522:	d109      	bne.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004524:	4b81      	ldr	r3, [pc, #516]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004526:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004528:	4b80      	ldr	r3, [pc, #512]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800452a:	2180      	movs	r1, #128	; 0x80
 800452c:	0549      	lsls	r1, r1, #21
 800452e:	430a      	orrs	r2, r1
 8004530:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8004532:	183b      	adds	r3, r7, r0
 8004534:	2201      	movs	r2, #1
 8004536:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004538:	4b7d      	ldr	r3, [pc, #500]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	2380      	movs	r3, #128	; 0x80
 800453e:	005b      	lsls	r3, r3, #1
 8004540:	4013      	ands	r3, r2
 8004542:	d11a      	bne.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004544:	4b7a      	ldr	r3, [pc, #488]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	4b79      	ldr	r3, [pc, #484]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800454a:	2180      	movs	r1, #128	; 0x80
 800454c:	0049      	lsls	r1, r1, #1
 800454e:	430a      	orrs	r2, r1
 8004550:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004552:	f7fd ffb5 	bl	80024c0 <HAL_GetTick>
 8004556:	0003      	movs	r3, r0
 8004558:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800455a:	e008      	b.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800455c:	f7fd ffb0 	bl	80024c0 <HAL_GetTick>
 8004560:	0002      	movs	r2, r0
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	2b64      	cmp	r3, #100	; 0x64
 8004568:	d901      	bls.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e0d9      	b.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800456e:	4b70      	ldr	r3, [pc, #448]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	2380      	movs	r3, #128	; 0x80
 8004574:	005b      	lsls	r3, r3, #1
 8004576:	4013      	ands	r3, r2
 8004578:	d0f0      	beq.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800457a:	4b6c      	ldr	r3, [pc, #432]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	23c0      	movs	r3, #192	; 0xc0
 8004580:	039b      	lsls	r3, r3, #14
 8004582:	4013      	ands	r3, r2
 8004584:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	685a      	ldr	r2, [r3, #4]
 800458a:	23c0      	movs	r3, #192	; 0xc0
 800458c:	039b      	lsls	r3, r3, #14
 800458e:	4013      	ands	r3, r2
 8004590:	68fa      	ldr	r2, [r7, #12]
 8004592:	429a      	cmp	r2, r3
 8004594:	d013      	beq.n	80045be <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	685a      	ldr	r2, [r3, #4]
 800459a:	23c0      	movs	r3, #192	; 0xc0
 800459c:	029b      	lsls	r3, r3, #10
 800459e:	401a      	ands	r2, r3
 80045a0:	23c0      	movs	r3, #192	; 0xc0
 80045a2:	029b      	lsls	r3, r3, #10
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d10a      	bne.n	80045be <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80045a8:	4b60      	ldr	r3, [pc, #384]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	2380      	movs	r3, #128	; 0x80
 80045ae:	029b      	lsls	r3, r3, #10
 80045b0:	401a      	ands	r2, r3
 80045b2:	2380      	movs	r3, #128	; 0x80
 80045b4:	029b      	lsls	r3, r3, #10
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d101      	bne.n	80045be <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e0b1      	b.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80045be:	4b5b      	ldr	r3, [pc, #364]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80045c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80045c2:	23c0      	movs	r3, #192	; 0xc0
 80045c4:	029b      	lsls	r3, r3, #10
 80045c6:	4013      	ands	r3, r2
 80045c8:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d03b      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	685a      	ldr	r2, [r3, #4]
 80045d4:	23c0      	movs	r3, #192	; 0xc0
 80045d6:	029b      	lsls	r3, r3, #10
 80045d8:	4013      	ands	r3, r2
 80045da:	68fa      	ldr	r2, [r7, #12]
 80045dc:	429a      	cmp	r2, r3
 80045de:	d033      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	2220      	movs	r2, #32
 80045e6:	4013      	ands	r3, r2
 80045e8:	d02e      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80045ea:	4b50      	ldr	r3, [pc, #320]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80045ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045ee:	4a51      	ldr	r2, [pc, #324]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 80045f0:	4013      	ands	r3, r2
 80045f2:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80045f4:	4b4d      	ldr	r3, [pc, #308]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80045f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80045f8:	4b4c      	ldr	r3, [pc, #304]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80045fa:	2180      	movs	r1, #128	; 0x80
 80045fc:	0309      	lsls	r1, r1, #12
 80045fe:	430a      	orrs	r2, r1
 8004600:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004602:	4b4a      	ldr	r3, [pc, #296]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004604:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004606:	4b49      	ldr	r3, [pc, #292]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004608:	494b      	ldr	r1, [pc, #300]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800460a:	400a      	ands	r2, r1
 800460c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800460e:	4b47      	ldr	r3, [pc, #284]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004610:	68fa      	ldr	r2, [r7, #12]
 8004612:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8004614:	68fa      	ldr	r2, [r7, #12]
 8004616:	2380      	movs	r3, #128	; 0x80
 8004618:	005b      	lsls	r3, r3, #1
 800461a:	4013      	ands	r3, r2
 800461c:	d014      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800461e:	f7fd ff4f 	bl	80024c0 <HAL_GetTick>
 8004622:	0003      	movs	r3, r0
 8004624:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004626:	e009      	b.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004628:	f7fd ff4a 	bl	80024c0 <HAL_GetTick>
 800462c:	0002      	movs	r2, r0
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	4a42      	ldr	r2, [pc, #264]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d901      	bls.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8004638:	2303      	movs	r3, #3
 800463a:	e072      	b.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800463c:	4b3b      	ldr	r3, [pc, #236]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800463e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004640:	2380      	movs	r3, #128	; 0x80
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	4013      	ands	r3, r2
 8004646:	d0ef      	beq.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2220      	movs	r2, #32
 800464e:	4013      	ands	r3, r2
 8004650:	d01f      	beq.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	685a      	ldr	r2, [r3, #4]
 8004656:	23c0      	movs	r3, #192	; 0xc0
 8004658:	029b      	lsls	r3, r3, #10
 800465a:	401a      	ands	r2, r3
 800465c:	23c0      	movs	r3, #192	; 0xc0
 800465e:	029b      	lsls	r3, r3, #10
 8004660:	429a      	cmp	r2, r3
 8004662:	d10c      	bne.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x182>
 8004664:	4b31      	ldr	r3, [pc, #196]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a35      	ldr	r2, [pc, #212]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800466a:	4013      	ands	r3, r2
 800466c:	0019      	movs	r1, r3
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	685a      	ldr	r2, [r3, #4]
 8004672:	23c0      	movs	r3, #192	; 0xc0
 8004674:	039b      	lsls	r3, r3, #14
 8004676:	401a      	ands	r2, r3
 8004678:	4b2c      	ldr	r3, [pc, #176]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800467a:	430a      	orrs	r2, r1
 800467c:	601a      	str	r2, [r3, #0]
 800467e:	4b2b      	ldr	r3, [pc, #172]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004680:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	685a      	ldr	r2, [r3, #4]
 8004686:	23c0      	movs	r3, #192	; 0xc0
 8004688:	029b      	lsls	r3, r3, #10
 800468a:	401a      	ands	r2, r3
 800468c:	4b27      	ldr	r3, [pc, #156]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800468e:	430a      	orrs	r2, r1
 8004690:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004692:	2317      	movs	r3, #23
 8004694:	18fb      	adds	r3, r7, r3
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	2b01      	cmp	r3, #1
 800469a:	d105      	bne.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800469c:	4b23      	ldr	r3, [pc, #140]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800469e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046a0:	4b22      	ldr	r3, [pc, #136]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80046a2:	4928      	ldr	r1, [pc, #160]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80046a4:	400a      	ands	r2, r1
 80046a6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	2202      	movs	r2, #2
 80046ae:	4013      	ands	r3, r2
 80046b0:	d009      	beq.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80046b2:	4b1e      	ldr	r3, [pc, #120]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80046b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046b6:	220c      	movs	r2, #12
 80046b8:	4393      	bics	r3, r2
 80046ba:	0019      	movs	r1, r3
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	689a      	ldr	r2, [r3, #8]
 80046c0:	4b1a      	ldr	r3, [pc, #104]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80046c2:	430a      	orrs	r2, r1
 80046c4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	2204      	movs	r2, #4
 80046cc:	4013      	ands	r3, r2
 80046ce:	d009      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80046d0:	4b16      	ldr	r3, [pc, #88]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80046d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046d4:	4a1c      	ldr	r2, [pc, #112]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80046d6:	4013      	ands	r3, r2
 80046d8:	0019      	movs	r1, r3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	68da      	ldr	r2, [r3, #12]
 80046de:	4b13      	ldr	r3, [pc, #76]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80046e0:	430a      	orrs	r2, r1
 80046e2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	2208      	movs	r2, #8
 80046ea:	4013      	ands	r3, r2
 80046ec:	d009      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80046ee:	4b0f      	ldr	r3, [pc, #60]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80046f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046f2:	4a16      	ldr	r2, [pc, #88]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80046f4:	4013      	ands	r3, r2
 80046f6:	0019      	movs	r1, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	691a      	ldr	r2, [r3, #16]
 80046fc:	4b0b      	ldr	r3, [pc, #44]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80046fe:	430a      	orrs	r2, r1
 8004700:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	2280      	movs	r2, #128	; 0x80
 8004708:	4013      	ands	r3, r2
 800470a:	d009      	beq.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800470c:	4b07      	ldr	r3, [pc, #28]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800470e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004710:	4a0f      	ldr	r2, [pc, #60]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004712:	4013      	ands	r3, r2
 8004714:	0019      	movs	r1, r3
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	695a      	ldr	r2, [r3, #20]
 800471a:	4b04      	ldr	r3, [pc, #16]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800471c:	430a      	orrs	r2, r1
 800471e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004720:	2300      	movs	r3, #0
}
 8004722:	0018      	movs	r0, r3
 8004724:	46bd      	mov	sp, r7
 8004726:	b006      	add	sp, #24
 8004728:	bd80      	pop	{r7, pc}
 800472a:	46c0      	nop			; (mov r8, r8)
 800472c:	40021000 	.word	0x40021000
 8004730:	40007000 	.word	0x40007000
 8004734:	fffcffff 	.word	0xfffcffff
 8004738:	fff7ffff 	.word	0xfff7ffff
 800473c:	00001388 	.word	0x00001388
 8004740:	ffcfffff 	.word	0xffcfffff
 8004744:	efffffff 	.word	0xefffffff
 8004748:	fffff3ff 	.word	0xfffff3ff
 800474c:	ffffcfff 	.word	0xffffcfff
 8004750:	fff3ffff 	.word	0xfff3ffff

08004754 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004754:	b5b0      	push	{r4, r5, r7, lr}
 8004756:	b084      	sub	sp, #16
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800475c:	230f      	movs	r3, #15
 800475e:	18fb      	adds	r3, r7, r3
 8004760:	2201      	movs	r2, #1
 8004762:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d101      	bne.n	800476e <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e088      	b.n	8004880 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2221      	movs	r2, #33	; 0x21
 8004772:	5c9b      	ldrb	r3, [r3, r2]
 8004774:	b2db      	uxtb	r3, r3
 8004776:	2b00      	cmp	r3, #0
 8004778:	d107      	bne.n	800478a <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2220      	movs	r2, #32
 800477e:	2100      	movs	r1, #0
 8004780:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	0018      	movs	r0, r3
 8004786:	f7fd fa55 	bl	8001c34 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2221      	movs	r2, #33	; 0x21
 800478e:	2102      	movs	r1, #2
 8004790:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	2210      	movs	r2, #16
 800479a:	4013      	ands	r3, r2
 800479c:	2b10      	cmp	r3, #16
 800479e:	d05f      	beq.n	8004860 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	22ca      	movs	r2, #202	; 0xca
 80047a6:	625a      	str	r2, [r3, #36]	; 0x24
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2253      	movs	r2, #83	; 0x53
 80047ae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80047b0:	250f      	movs	r5, #15
 80047b2:	197c      	adds	r4, r7, r5
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	0018      	movs	r0, r3
 80047b8:	f000 f890 	bl	80048dc <RTC_EnterInitMode>
 80047bc:	0003      	movs	r3, r0
 80047be:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 80047c0:	0028      	movs	r0, r5
 80047c2:	183b      	adds	r3, r7, r0
 80047c4:	781b      	ldrb	r3, [r3, #0]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d12c      	bne.n	8004824 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	689a      	ldr	r2, [r3, #8]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	492c      	ldr	r1, [pc, #176]	; (8004888 <HAL_RTC_Init+0x134>)
 80047d6:	400a      	ands	r2, r1
 80047d8:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	6899      	ldr	r1, [r3, #8]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	685a      	ldr	r2, [r3, #4]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	691b      	ldr	r3, [r3, #16]
 80047e8:	431a      	orrs	r2, r3
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	699b      	ldr	r3, [r3, #24]
 80047ee:	431a      	orrs	r2, r3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	430a      	orrs	r2, r1
 80047f6:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	68d2      	ldr	r2, [r2, #12]
 8004800:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	6919      	ldr	r1, [r3, #16]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	041a      	lsls	r2, r3, #16
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	430a      	orrs	r2, r1
 8004814:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004816:	183c      	adds	r4, r7, r0
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	0018      	movs	r0, r3
 800481c:	f000 f8a2 	bl	8004964 <RTC_ExitInitMode>
 8004820:	0003      	movs	r3, r0
 8004822:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8004824:	230f      	movs	r3, #15
 8004826:	18fb      	adds	r3, r7, r3
 8004828:	781b      	ldrb	r3, [r3, #0]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d113      	bne.n	8004856 <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2103      	movs	r1, #3
 800483a:	438a      	bics	r2, r1
 800483c:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	69da      	ldr	r2, [r3, #28]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	695b      	ldr	r3, [r3, #20]
 800484c:	431a      	orrs	r2, r3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	430a      	orrs	r2, r1
 8004854:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	22ff      	movs	r2, #255	; 0xff
 800485c:	625a      	str	r2, [r3, #36]	; 0x24
 800485e:	e003      	b.n	8004868 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8004860:	230f      	movs	r3, #15
 8004862:	18fb      	adds	r3, r7, r3
 8004864:	2200      	movs	r2, #0
 8004866:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8004868:	230f      	movs	r3, #15
 800486a:	18fb      	adds	r3, r7, r3
 800486c:	781b      	ldrb	r3, [r3, #0]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d103      	bne.n	800487a <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2221      	movs	r2, #33	; 0x21
 8004876:	2101      	movs	r1, #1
 8004878:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800487a:	230f      	movs	r3, #15
 800487c:	18fb      	adds	r3, r7, r3
 800487e:	781b      	ldrb	r3, [r3, #0]
}
 8004880:	0018      	movs	r0, r3
 8004882:	46bd      	mov	sp, r7
 8004884:	b004      	add	sp, #16
 8004886:	bdb0      	pop	{r4, r5, r7, pc}
 8004888:	ff8fffbf 	.word	0xff8fffbf

0800488c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b084      	sub	sp, #16
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004894:	2300      	movs	r3, #0
 8004896:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a0e      	ldr	r2, [pc, #56]	; (80048d8 <HAL_RTC_WaitForSynchro+0x4c>)
 800489e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80048a0:	f7fd fe0e 	bl	80024c0 <HAL_GetTick>
 80048a4:	0003      	movs	r3, r0
 80048a6:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80048a8:	e00a      	b.n	80048c0 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80048aa:	f7fd fe09 	bl	80024c0 <HAL_GetTick>
 80048ae:	0002      	movs	r2, r0
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	1ad2      	subs	r2, r2, r3
 80048b4:	23fa      	movs	r3, #250	; 0xfa
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d901      	bls.n	80048c0 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80048bc:	2303      	movs	r3, #3
 80048be:	e006      	b.n	80048ce <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	2220      	movs	r2, #32
 80048c8:	4013      	ands	r3, r2
 80048ca:	d0ee      	beq.n	80048aa <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 80048cc:	2300      	movs	r3, #0
}
 80048ce:	0018      	movs	r0, r3
 80048d0:	46bd      	mov	sp, r7
 80048d2:	b004      	add	sp, #16
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	46c0      	nop			; (mov r8, r8)
 80048d8:	0001ff5f 	.word	0x0001ff5f

080048dc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b084      	sub	sp, #16
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80048e4:	2300      	movs	r3, #0
 80048e6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80048e8:	230f      	movs	r3, #15
 80048ea:	18fb      	adds	r3, r7, r3
 80048ec:	2200      	movs	r2, #0
 80048ee:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	68db      	ldr	r3, [r3, #12]
 80048f6:	2240      	movs	r2, #64	; 0x40
 80048f8:	4013      	ands	r3, r2
 80048fa:	d12c      	bne.n	8004956 <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	68da      	ldr	r2, [r3, #12]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	2180      	movs	r1, #128	; 0x80
 8004908:	430a      	orrs	r2, r1
 800490a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800490c:	f7fd fdd8 	bl	80024c0 <HAL_GetTick>
 8004910:	0003      	movs	r3, r0
 8004912:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004914:	e014      	b.n	8004940 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004916:	f7fd fdd3 	bl	80024c0 <HAL_GetTick>
 800491a:	0002      	movs	r2, r0
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	1ad2      	subs	r2, r2, r3
 8004920:	200f      	movs	r0, #15
 8004922:	183b      	adds	r3, r7, r0
 8004924:	1839      	adds	r1, r7, r0
 8004926:	7809      	ldrb	r1, [r1, #0]
 8004928:	7019      	strb	r1, [r3, #0]
 800492a:	23fa      	movs	r3, #250	; 0xfa
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	429a      	cmp	r2, r3
 8004930:	d906      	bls.n	8004940 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2221      	movs	r2, #33	; 0x21
 8004936:	2104      	movs	r1, #4
 8004938:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 800493a:	183b      	adds	r3, r7, r0
 800493c:	2201      	movs	r2, #1
 800493e:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	2240      	movs	r2, #64	; 0x40
 8004948:	4013      	ands	r3, r2
 800494a:	d104      	bne.n	8004956 <RTC_EnterInitMode+0x7a>
 800494c:	230f      	movs	r3, #15
 800494e:	18fb      	adds	r3, r7, r3
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	2b01      	cmp	r3, #1
 8004954:	d1df      	bne.n	8004916 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8004956:	230f      	movs	r3, #15
 8004958:	18fb      	adds	r3, r7, r3
 800495a:	781b      	ldrb	r3, [r3, #0]
}
 800495c:	0018      	movs	r0, r3
 800495e:	46bd      	mov	sp, r7
 8004960:	b004      	add	sp, #16
 8004962:	bd80      	pop	{r7, pc}

08004964 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004964:	b590      	push	{r4, r7, lr}
 8004966:	b085      	sub	sp, #20
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800496c:	240f      	movs	r4, #15
 800496e:	193b      	adds	r3, r7, r4
 8004970:	2200      	movs	r2, #0
 8004972:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	68da      	ldr	r2, [r3, #12]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	2180      	movs	r1, #128	; 0x80
 8004980:	438a      	bics	r2, r1
 8004982:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	2220      	movs	r2, #32
 800498c:	4013      	ands	r3, r2
 800498e:	d10c      	bne.n	80049aa <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	0018      	movs	r0, r3
 8004994:	f7ff ff7a 	bl	800488c <HAL_RTC_WaitForSynchro>
 8004998:	1e03      	subs	r3, r0, #0
 800499a:	d006      	beq.n	80049aa <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2221      	movs	r2, #33	; 0x21
 80049a0:	2104      	movs	r1, #4
 80049a2:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 80049a4:	193b      	adds	r3, r7, r4
 80049a6:	2201      	movs	r2, #1
 80049a8:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 80049aa:	230f      	movs	r3, #15
 80049ac:	18fb      	adds	r3, r7, r3
 80049ae:	781b      	ldrb	r3, [r3, #0]
}
 80049b0:	0018      	movs	r0, r3
 80049b2:	46bd      	mov	sp, r7
 80049b4:	b005      	add	sp, #20
 80049b6:	bd90      	pop	{r4, r7, pc}

080049b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b082      	sub	sp, #8
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d101      	bne.n	80049ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e032      	b.n	8004a30 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2239      	movs	r2, #57	; 0x39
 80049ce:	5c9b      	ldrb	r3, [r3, r2]
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d107      	bne.n	80049e6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2238      	movs	r2, #56	; 0x38
 80049da:	2100      	movs	r1, #0
 80049dc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	0018      	movs	r0, r3
 80049e2:	f7fd f93f 	bl	8001c64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2239      	movs	r2, #57	; 0x39
 80049ea:	2102      	movs	r1, #2
 80049ec:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	3304      	adds	r3, #4
 80049f6:	0019      	movs	r1, r3
 80049f8:	0010      	movs	r0, r2
 80049fa:	f000 fe97 	bl	800572c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	223e      	movs	r2, #62	; 0x3e
 8004a02:	2101      	movs	r1, #1
 8004a04:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	223a      	movs	r2, #58	; 0x3a
 8004a0a:	2101      	movs	r1, #1
 8004a0c:	5499      	strb	r1, [r3, r2]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	223b      	movs	r2, #59	; 0x3b
 8004a12:	2101      	movs	r1, #1
 8004a14:	5499      	strb	r1, [r3, r2]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	223c      	movs	r2, #60	; 0x3c
 8004a1a:	2101      	movs	r1, #1
 8004a1c:	5499      	strb	r1, [r3, r2]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	223d      	movs	r2, #61	; 0x3d
 8004a22:	2101      	movs	r1, #1
 8004a24:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2239      	movs	r2, #57	; 0x39
 8004a2a:	2101      	movs	r1, #1
 8004a2c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004a2e:	2300      	movs	r3, #0
}
 8004a30:	0018      	movs	r0, r3
 8004a32:	46bd      	mov	sp, r7
 8004a34:	b002      	add	sp, #8
 8004a36:	bd80      	pop	{r7, pc}

08004a38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b084      	sub	sp, #16
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2239      	movs	r2, #57	; 0x39
 8004a44:	5c9b      	ldrb	r3, [r3, r2]
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d001      	beq.n	8004a50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e036      	b.n	8004abe <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2239      	movs	r2, #57	; 0x39
 8004a54:	2102      	movs	r1, #2
 8004a56:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	68da      	ldr	r2, [r3, #12]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	2101      	movs	r1, #1
 8004a64:	430a      	orrs	r2, r1
 8004a66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	2380      	movs	r3, #128	; 0x80
 8004a6e:	05db      	lsls	r3, r3, #23
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d009      	beq.n	8004a88 <HAL_TIM_Base_Start_IT+0x50>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a13      	ldr	r2, [pc, #76]	; (8004ac8 <HAL_TIM_Base_Start_IT+0x90>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d004      	beq.n	8004a88 <HAL_TIM_Base_Start_IT+0x50>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a12      	ldr	r2, [pc, #72]	; (8004acc <HAL_TIM_Base_Start_IT+0x94>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d111      	bne.n	8004aac <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	2207      	movs	r2, #7
 8004a90:	4013      	ands	r3, r2
 8004a92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2b06      	cmp	r3, #6
 8004a98:	d010      	beq.n	8004abc <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2101      	movs	r1, #1
 8004aa6:	430a      	orrs	r2, r1
 8004aa8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aaa:	e007      	b.n	8004abc <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	2101      	movs	r1, #1
 8004ab8:	430a      	orrs	r2, r1
 8004aba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004abc:	2300      	movs	r3, #0
}
 8004abe:	0018      	movs	r0, r3
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	b004      	add	sp, #16
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	46c0      	nop			; (mov r8, r8)
 8004ac8:	40010800 	.word	0x40010800
 8004acc:	40011400 	.word	0x40011400

08004ad0 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b084      	sub	sp, #16
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ada:	230f      	movs	r3, #15
 8004adc:	18fb      	adds	r3, r7, r3
 8004ade:	2200      	movs	r2, #0
 8004ae0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d108      	bne.n	8004afa <HAL_TIM_OC_Start_IT+0x2a>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	223a      	movs	r2, #58	; 0x3a
 8004aec:	5c9b      	ldrb	r3, [r3, r2]
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	3b01      	subs	r3, #1
 8004af2:	1e5a      	subs	r2, r3, #1
 8004af4:	4193      	sbcs	r3, r2
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	e01f      	b.n	8004b3a <HAL_TIM_OC_Start_IT+0x6a>
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	2b04      	cmp	r3, #4
 8004afe:	d108      	bne.n	8004b12 <HAL_TIM_OC_Start_IT+0x42>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	223b      	movs	r2, #59	; 0x3b
 8004b04:	5c9b      	ldrb	r3, [r3, r2]
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	3b01      	subs	r3, #1
 8004b0a:	1e5a      	subs	r2, r3, #1
 8004b0c:	4193      	sbcs	r3, r2
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	e013      	b.n	8004b3a <HAL_TIM_OC_Start_IT+0x6a>
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	2b08      	cmp	r3, #8
 8004b16:	d108      	bne.n	8004b2a <HAL_TIM_OC_Start_IT+0x5a>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	223c      	movs	r2, #60	; 0x3c
 8004b1c:	5c9b      	ldrb	r3, [r3, r2]
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	3b01      	subs	r3, #1
 8004b22:	1e5a      	subs	r2, r3, #1
 8004b24:	4193      	sbcs	r3, r2
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	e007      	b.n	8004b3a <HAL_TIM_OC_Start_IT+0x6a>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	223d      	movs	r2, #61	; 0x3d
 8004b2e:	5c9b      	ldrb	r3, [r3, r2]
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	3b01      	subs	r3, #1
 8004b34:	1e5a      	subs	r2, r3, #1
 8004b36:	4193      	sbcs	r3, r2
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d001      	beq.n	8004b42 <HAL_TIM_OC_Start_IT+0x72>
  {
    return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e090      	b.n	8004c64 <HAL_TIM_OC_Start_IT+0x194>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d104      	bne.n	8004b52 <HAL_TIM_OC_Start_IT+0x82>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	223a      	movs	r2, #58	; 0x3a
 8004b4c:	2102      	movs	r1, #2
 8004b4e:	5499      	strb	r1, [r3, r2]
 8004b50:	e013      	b.n	8004b7a <HAL_TIM_OC_Start_IT+0xaa>
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	2b04      	cmp	r3, #4
 8004b56:	d104      	bne.n	8004b62 <HAL_TIM_OC_Start_IT+0x92>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	223b      	movs	r2, #59	; 0x3b
 8004b5c:	2102      	movs	r1, #2
 8004b5e:	5499      	strb	r1, [r3, r2]
 8004b60:	e00b      	b.n	8004b7a <HAL_TIM_OC_Start_IT+0xaa>
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	2b08      	cmp	r3, #8
 8004b66:	d104      	bne.n	8004b72 <HAL_TIM_OC_Start_IT+0xa2>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	223c      	movs	r2, #60	; 0x3c
 8004b6c:	2102      	movs	r1, #2
 8004b6e:	5499      	strb	r1, [r3, r2]
 8004b70:	e003      	b.n	8004b7a <HAL_TIM_OC_Start_IT+0xaa>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	223d      	movs	r2, #61	; 0x3d
 8004b76:	2102      	movs	r1, #2
 8004b78:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	2b0c      	cmp	r3, #12
 8004b7e:	d02a      	beq.n	8004bd6 <HAL_TIM_OC_Start_IT+0x106>
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	2b0c      	cmp	r3, #12
 8004b84:	d830      	bhi.n	8004be8 <HAL_TIM_OC_Start_IT+0x118>
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	2b08      	cmp	r3, #8
 8004b8a:	d01b      	beq.n	8004bc4 <HAL_TIM_OC_Start_IT+0xf4>
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	2b08      	cmp	r3, #8
 8004b90:	d82a      	bhi.n	8004be8 <HAL_TIM_OC_Start_IT+0x118>
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d003      	beq.n	8004ba0 <HAL_TIM_OC_Start_IT+0xd0>
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	2b04      	cmp	r3, #4
 8004b9c:	d009      	beq.n	8004bb2 <HAL_TIM_OC_Start_IT+0xe2>
 8004b9e:	e023      	b.n	8004be8 <HAL_TIM_OC_Start_IT+0x118>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	68da      	ldr	r2, [r3, #12]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	2102      	movs	r1, #2
 8004bac:	430a      	orrs	r2, r1
 8004bae:	60da      	str	r2, [r3, #12]
      break;
 8004bb0:	e01f      	b.n	8004bf2 <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	68da      	ldr	r2, [r3, #12]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	2104      	movs	r1, #4
 8004bbe:	430a      	orrs	r2, r1
 8004bc0:	60da      	str	r2, [r3, #12]
      break;
 8004bc2:	e016      	b.n	8004bf2 <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	68da      	ldr	r2, [r3, #12]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	2108      	movs	r1, #8
 8004bd0:	430a      	orrs	r2, r1
 8004bd2:	60da      	str	r2, [r3, #12]
      break;
 8004bd4:	e00d      	b.n	8004bf2 <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	68da      	ldr	r2, [r3, #12]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	2110      	movs	r1, #16
 8004be2:	430a      	orrs	r2, r1
 8004be4:	60da      	str	r2, [r3, #12]
      break;
 8004be6:	e004      	b.n	8004bf2 <HAL_TIM_OC_Start_IT+0x122>
    }

    default:
      status = HAL_ERROR;
 8004be8:	230f      	movs	r3, #15
 8004bea:	18fb      	adds	r3, r7, r3
 8004bec:	2201      	movs	r2, #1
 8004bee:	701a      	strb	r2, [r3, #0]
      break;
 8004bf0:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8004bf2:	230f      	movs	r3, #15
 8004bf4:	18fb      	adds	r3, r7, r3
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d130      	bne.n	8004c5e <HAL_TIM_OC_Start_IT+0x18e>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	6839      	ldr	r1, [r7, #0]
 8004c02:	2201      	movs	r2, #1
 8004c04:	0018      	movs	r0, r3
 8004c06:	f000 ff83 	bl	8005b10 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	2380      	movs	r3, #128	; 0x80
 8004c10:	05db      	lsls	r3, r3, #23
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d009      	beq.n	8004c2a <HAL_TIM_OC_Start_IT+0x15a>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a14      	ldr	r2, [pc, #80]	; (8004c6c <HAL_TIM_OC_Start_IT+0x19c>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d004      	beq.n	8004c2a <HAL_TIM_OC_Start_IT+0x15a>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a12      	ldr	r2, [pc, #72]	; (8004c70 <HAL_TIM_OC_Start_IT+0x1a0>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d111      	bne.n	8004c4e <HAL_TIM_OC_Start_IT+0x17e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	2207      	movs	r2, #7
 8004c32:	4013      	ands	r3, r2
 8004c34:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	2b06      	cmp	r3, #6
 8004c3a:	d010      	beq.n	8004c5e <HAL_TIM_OC_Start_IT+0x18e>
      {
        __HAL_TIM_ENABLE(htim);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	2101      	movs	r1, #1
 8004c48:	430a      	orrs	r2, r1
 8004c4a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c4c:	e007      	b.n	8004c5e <HAL_TIM_OC_Start_IT+0x18e>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	2101      	movs	r1, #1
 8004c5a:	430a      	orrs	r2, r1
 8004c5c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004c5e:	230f      	movs	r3, #15
 8004c60:	18fb      	adds	r3, r7, r3
 8004c62:	781b      	ldrb	r3, [r3, #0]
}
 8004c64:	0018      	movs	r0, r3
 8004c66:	46bd      	mov	sp, r7
 8004c68:	b004      	add	sp, #16
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	40010800 	.word	0x40010800
 8004c70:	40011400 	.word	0x40011400

08004c74 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b082      	sub	sp, #8
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d101      	bne.n	8004c86 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e032      	b.n	8004cec <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2239      	movs	r2, #57	; 0x39
 8004c8a:	5c9b      	ldrb	r3, [r3, r2]
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d107      	bne.n	8004ca2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2238      	movs	r2, #56	; 0x38
 8004c96:	2100      	movs	r1, #0
 8004c98:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	0018      	movs	r0, r3
 8004c9e:	f000 f829 	bl	8004cf4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2239      	movs	r2, #57	; 0x39
 8004ca6:	2102      	movs	r1, #2
 8004ca8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	3304      	adds	r3, #4
 8004cb2:	0019      	movs	r1, r3
 8004cb4:	0010      	movs	r0, r2
 8004cb6:	f000 fd39 	bl	800572c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	223e      	movs	r2, #62	; 0x3e
 8004cbe:	2101      	movs	r1, #1
 8004cc0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	223a      	movs	r2, #58	; 0x3a
 8004cc6:	2101      	movs	r1, #1
 8004cc8:	5499      	strb	r1, [r3, r2]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	223b      	movs	r2, #59	; 0x3b
 8004cce:	2101      	movs	r1, #1
 8004cd0:	5499      	strb	r1, [r3, r2]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	223c      	movs	r2, #60	; 0x3c
 8004cd6:	2101      	movs	r1, #1
 8004cd8:	5499      	strb	r1, [r3, r2]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	223d      	movs	r2, #61	; 0x3d
 8004cde:	2101      	movs	r1, #1
 8004ce0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2239      	movs	r2, #57	; 0x39
 8004ce6:	2101      	movs	r1, #1
 8004ce8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004cea:	2300      	movs	r3, #0
}
 8004cec:	0018      	movs	r0, r3
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	b002      	add	sp, #8
 8004cf2:	bd80      	pop	{r7, pc}

08004cf4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b082      	sub	sp, #8
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004cfc:	46c0      	nop			; (mov r8, r8)
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	b002      	add	sp, #8
 8004d02:	bd80      	pop	{r7, pc}

08004d04 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b086      	sub	sp, #24
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	60f8      	str	r0, [r7, #12]
 8004d0c:	60b9      	str	r1, [r7, #8]
 8004d0e:	607a      	str	r2, [r7, #4]
 8004d10:	001a      	movs	r2, r3
 8004d12:	1cbb      	adds	r3, r7, #2
 8004d14:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d16:	2317      	movs	r3, #23
 8004d18:	18fb      	adds	r3, r7, r3
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d108      	bne.n	8004d36 <HAL_TIM_PWM_Start_DMA+0x32>
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	223a      	movs	r2, #58	; 0x3a
 8004d28:	5c9b      	ldrb	r3, [r3, r2]
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	3b02      	subs	r3, #2
 8004d2e:	425a      	negs	r2, r3
 8004d30:	4153      	adcs	r3, r2
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	e01f      	b.n	8004d76 <HAL_TIM_PWM_Start_DMA+0x72>
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	2b04      	cmp	r3, #4
 8004d3a:	d108      	bne.n	8004d4e <HAL_TIM_PWM_Start_DMA+0x4a>
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	223b      	movs	r2, #59	; 0x3b
 8004d40:	5c9b      	ldrb	r3, [r3, r2]
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	3b02      	subs	r3, #2
 8004d46:	425a      	negs	r2, r3
 8004d48:	4153      	adcs	r3, r2
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	e013      	b.n	8004d76 <HAL_TIM_PWM_Start_DMA+0x72>
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	2b08      	cmp	r3, #8
 8004d52:	d108      	bne.n	8004d66 <HAL_TIM_PWM_Start_DMA+0x62>
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	223c      	movs	r2, #60	; 0x3c
 8004d58:	5c9b      	ldrb	r3, [r3, r2]
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	3b02      	subs	r3, #2
 8004d5e:	425a      	negs	r2, r3
 8004d60:	4153      	adcs	r3, r2
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	e007      	b.n	8004d76 <HAL_TIM_PWM_Start_DMA+0x72>
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	223d      	movs	r2, #61	; 0x3d
 8004d6a:	5c9b      	ldrb	r3, [r3, r2]
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	3b02      	subs	r3, #2
 8004d70:	425a      	negs	r2, r3
 8004d72:	4153      	adcs	r3, r2
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d001      	beq.n	8004d7e <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8004d7a:	2302      	movs	r3, #2
 8004d7c:	e13d      	b.n	8004ffa <HAL_TIM_PWM_Start_DMA+0x2f6>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d108      	bne.n	8004d96 <HAL_TIM_PWM_Start_DMA+0x92>
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	223a      	movs	r2, #58	; 0x3a
 8004d88:	5c9b      	ldrb	r3, [r3, r2]
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	3b01      	subs	r3, #1
 8004d8e:	425a      	negs	r2, r3
 8004d90:	4153      	adcs	r3, r2
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	e01f      	b.n	8004dd6 <HAL_TIM_PWM_Start_DMA+0xd2>
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	2b04      	cmp	r3, #4
 8004d9a:	d108      	bne.n	8004dae <HAL_TIM_PWM_Start_DMA+0xaa>
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	223b      	movs	r2, #59	; 0x3b
 8004da0:	5c9b      	ldrb	r3, [r3, r2]
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	3b01      	subs	r3, #1
 8004da6:	425a      	negs	r2, r3
 8004da8:	4153      	adcs	r3, r2
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	e013      	b.n	8004dd6 <HAL_TIM_PWM_Start_DMA+0xd2>
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	2b08      	cmp	r3, #8
 8004db2:	d108      	bne.n	8004dc6 <HAL_TIM_PWM_Start_DMA+0xc2>
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	223c      	movs	r2, #60	; 0x3c
 8004db8:	5c9b      	ldrb	r3, [r3, r2]
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	3b01      	subs	r3, #1
 8004dbe:	425a      	negs	r2, r3
 8004dc0:	4153      	adcs	r3, r2
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	e007      	b.n	8004dd6 <HAL_TIM_PWM_Start_DMA+0xd2>
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	223d      	movs	r2, #61	; 0x3d
 8004dca:	5c9b      	ldrb	r3, [r3, r2]
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	3b01      	subs	r3, #1
 8004dd0:	425a      	negs	r2, r3
 8004dd2:	4153      	adcs	r3, r2
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d025      	beq.n	8004e26 <HAL_TIM_PWM_Start_DMA+0x122>
  {
    if ((pData == NULL) || (Length == 0U))
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d003      	beq.n	8004de8 <HAL_TIM_PWM_Start_DMA+0xe4>
 8004de0:	1cbb      	adds	r3, r7, #2
 8004de2:	881b      	ldrh	r3, [r3, #0]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d101      	bne.n	8004dec <HAL_TIM_PWM_Start_DMA+0xe8>
    {
      return HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	e106      	b.n	8004ffa <HAL_TIM_PWM_Start_DMA+0x2f6>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d104      	bne.n	8004dfc <HAL_TIM_PWM_Start_DMA+0xf8>
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	223a      	movs	r2, #58	; 0x3a
 8004df6:	2102      	movs	r1, #2
 8004df8:	5499      	strb	r1, [r3, r2]
 8004dfa:	e016      	b.n	8004e2a <HAL_TIM_PWM_Start_DMA+0x126>
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	2b04      	cmp	r3, #4
 8004e00:	d104      	bne.n	8004e0c <HAL_TIM_PWM_Start_DMA+0x108>
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	223b      	movs	r2, #59	; 0x3b
 8004e06:	2102      	movs	r1, #2
 8004e08:	5499      	strb	r1, [r3, r2]
 8004e0a:	e00e      	b.n	8004e2a <HAL_TIM_PWM_Start_DMA+0x126>
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	2b08      	cmp	r3, #8
 8004e10:	d104      	bne.n	8004e1c <HAL_TIM_PWM_Start_DMA+0x118>
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	223c      	movs	r2, #60	; 0x3c
 8004e16:	2102      	movs	r1, #2
 8004e18:	5499      	strb	r1, [r3, r2]
 8004e1a:	e006      	b.n	8004e2a <HAL_TIM_PWM_Start_DMA+0x126>
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	223d      	movs	r2, #61	; 0x3d
 8004e20:	2102      	movs	r1, #2
 8004e22:	5499      	strb	r1, [r3, r2]
 8004e24:	e001      	b.n	8004e2a <HAL_TIM_PWM_Start_DMA+0x126>
    }
  }
  else
  {
    return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e0e7      	b.n	8004ffa <HAL_TIM_PWM_Start_DMA+0x2f6>
  }

  switch (Channel)
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	2b0c      	cmp	r3, #12
 8004e2e:	d100      	bne.n	8004e32 <HAL_TIM_PWM_Start_DMA+0x12e>
 8004e30:	e080      	b.n	8004f34 <HAL_TIM_PWM_Start_DMA+0x230>
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	2b0c      	cmp	r3, #12
 8004e36:	d900      	bls.n	8004e3a <HAL_TIM_PWM_Start_DMA+0x136>
 8004e38:	e0a1      	b.n	8004f7e <HAL_TIM_PWM_Start_DMA+0x27a>
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	2b08      	cmp	r3, #8
 8004e3e:	d054      	beq.n	8004eea <HAL_TIM_PWM_Start_DMA+0x1e6>
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	2b08      	cmp	r3, #8
 8004e44:	d900      	bls.n	8004e48 <HAL_TIM_PWM_Start_DMA+0x144>
 8004e46:	e09a      	b.n	8004f7e <HAL_TIM_PWM_Start_DMA+0x27a>
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d003      	beq.n	8004e56 <HAL_TIM_PWM_Start_DMA+0x152>
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	2b04      	cmp	r3, #4
 8004e52:	d025      	beq.n	8004ea0 <HAL_TIM_PWM_Start_DMA+0x19c>
 8004e54:	e093      	b.n	8004f7e <HAL_TIM_PWM_Start_DMA+0x27a>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	6a1b      	ldr	r3, [r3, #32]
 8004e5a:	4a6a      	ldr	r2, [pc, #424]	; (8005004 <HAL_TIM_PWM_Start_DMA+0x300>)
 8004e5c:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	6a1b      	ldr	r3, [r3, #32]
 8004e62:	4a69      	ldr	r2, [pc, #420]	; (8005008 <HAL_TIM_PWM_Start_DMA+0x304>)
 8004e64:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	6a1b      	ldr	r3, [r3, #32]
 8004e6a:	4a68      	ldr	r2, [pc, #416]	; (800500c <HAL_TIM_PWM_Start_DMA+0x308>)
 8004e6c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	6a18      	ldr	r0, [r3, #32]
 8004e72:	6879      	ldr	r1, [r7, #4]
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	3334      	adds	r3, #52	; 0x34
 8004e7a:	001a      	movs	r2, r3
 8004e7c:	1cbb      	adds	r3, r7, #2
 8004e7e:	881b      	ldrh	r3, [r3, #0]
 8004e80:	f7fd fca2 	bl	80027c8 <HAL_DMA_Start_IT>
 8004e84:	1e03      	subs	r3, r0, #0
 8004e86:	d001      	beq.n	8004e8c <HAL_TIM_PWM_Start_DMA+0x188>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e0b6      	b.n	8004ffa <HAL_TIM_PWM_Start_DMA+0x2f6>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	68da      	ldr	r2, [r3, #12]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	2180      	movs	r1, #128	; 0x80
 8004e98:	0089      	lsls	r1, r1, #2
 8004e9a:	430a      	orrs	r2, r1
 8004e9c:	60da      	str	r2, [r3, #12]
      break;
 8004e9e:	e073      	b.n	8004f88 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea4:	4a57      	ldr	r2, [pc, #348]	; (8005004 <HAL_TIM_PWM_Start_DMA+0x300>)
 8004ea6:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eac:	4a56      	ldr	r2, [pc, #344]	; (8005008 <HAL_TIM_PWM_Start_DMA+0x304>)
 8004eae:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb4:	4a55      	ldr	r2, [pc, #340]	; (800500c <HAL_TIM_PWM_Start_DMA+0x308>)
 8004eb6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004ebc:	6879      	ldr	r1, [r7, #4]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	3338      	adds	r3, #56	; 0x38
 8004ec4:	001a      	movs	r2, r3
 8004ec6:	1cbb      	adds	r3, r7, #2
 8004ec8:	881b      	ldrh	r3, [r3, #0]
 8004eca:	f7fd fc7d 	bl	80027c8 <HAL_DMA_Start_IT>
 8004ece:	1e03      	subs	r3, r0, #0
 8004ed0:	d001      	beq.n	8004ed6 <HAL_TIM_PWM_Start_DMA+0x1d2>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e091      	b.n	8004ffa <HAL_TIM_PWM_Start_DMA+0x2f6>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	68da      	ldr	r2, [r3, #12]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	2180      	movs	r1, #128	; 0x80
 8004ee2:	00c9      	lsls	r1, r1, #3
 8004ee4:	430a      	orrs	r2, r1
 8004ee6:	60da      	str	r2, [r3, #12]
      break;
 8004ee8:	e04e      	b.n	8004f88 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eee:	4a45      	ldr	r2, [pc, #276]	; (8005004 <HAL_TIM_PWM_Start_DMA+0x300>)
 8004ef0:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ef6:	4a44      	ldr	r2, [pc, #272]	; (8005008 <HAL_TIM_PWM_Start_DMA+0x304>)
 8004ef8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004efe:	4a43      	ldr	r2, [pc, #268]	; (800500c <HAL_TIM_PWM_Start_DMA+0x308>)
 8004f00:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004f06:	6879      	ldr	r1, [r7, #4]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	333c      	adds	r3, #60	; 0x3c
 8004f0e:	001a      	movs	r2, r3
 8004f10:	1cbb      	adds	r3, r7, #2
 8004f12:	881b      	ldrh	r3, [r3, #0]
 8004f14:	f7fd fc58 	bl	80027c8 <HAL_DMA_Start_IT>
 8004f18:	1e03      	subs	r3, r0, #0
 8004f1a:	d001      	beq.n	8004f20 <HAL_TIM_PWM_Start_DMA+0x21c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e06c      	b.n	8004ffa <HAL_TIM_PWM_Start_DMA+0x2f6>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	68da      	ldr	r2, [r3, #12]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	2180      	movs	r1, #128	; 0x80
 8004f2c:	0109      	lsls	r1, r1, #4
 8004f2e:	430a      	orrs	r2, r1
 8004f30:	60da      	str	r2, [r3, #12]
      break;
 8004f32:	e029      	b.n	8004f88 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f38:	4a32      	ldr	r2, [pc, #200]	; (8005004 <HAL_TIM_PWM_Start_DMA+0x300>)
 8004f3a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f40:	4a31      	ldr	r2, [pc, #196]	; (8005008 <HAL_TIM_PWM_Start_DMA+0x304>)
 8004f42:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f48:	4a30      	ldr	r2, [pc, #192]	; (800500c <HAL_TIM_PWM_Start_DMA+0x308>)
 8004f4a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004f50:	6879      	ldr	r1, [r7, #4]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	3340      	adds	r3, #64	; 0x40
 8004f58:	001a      	movs	r2, r3
 8004f5a:	1cbb      	adds	r3, r7, #2
 8004f5c:	881b      	ldrh	r3, [r3, #0]
 8004f5e:	f7fd fc33 	bl	80027c8 <HAL_DMA_Start_IT>
 8004f62:	1e03      	subs	r3, r0, #0
 8004f64:	d001      	beq.n	8004f6a <HAL_TIM_PWM_Start_DMA+0x266>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e047      	b.n	8004ffa <HAL_TIM_PWM_Start_DMA+0x2f6>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	68da      	ldr	r2, [r3, #12]
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	2180      	movs	r1, #128	; 0x80
 8004f76:	0149      	lsls	r1, r1, #5
 8004f78:	430a      	orrs	r2, r1
 8004f7a:	60da      	str	r2, [r3, #12]
      break;
 8004f7c:	e004      	b.n	8004f88 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    default:
      status = HAL_ERROR;
 8004f7e:	2317      	movs	r3, #23
 8004f80:	18fb      	adds	r3, r7, r3
 8004f82:	2201      	movs	r2, #1
 8004f84:	701a      	strb	r2, [r3, #0]
      break;
 8004f86:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8004f88:	2317      	movs	r3, #23
 8004f8a:	18fb      	adds	r3, r7, r3
 8004f8c:	781b      	ldrb	r3, [r3, #0]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d130      	bne.n	8004ff4 <HAL_TIM_PWM_Start_DMA+0x2f0>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	68b9      	ldr	r1, [r7, #8]
 8004f98:	2201      	movs	r2, #1
 8004f9a:	0018      	movs	r0, r3
 8004f9c:	f000 fdb8 	bl	8005b10 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	2380      	movs	r3, #128	; 0x80
 8004fa6:	05db      	lsls	r3, r3, #23
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d009      	beq.n	8004fc0 <HAL_TIM_PWM_Start_DMA+0x2bc>
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a17      	ldr	r2, [pc, #92]	; (8005010 <HAL_TIM_PWM_Start_DMA+0x30c>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d004      	beq.n	8004fc0 <HAL_TIM_PWM_Start_DMA+0x2bc>
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a16      	ldr	r2, [pc, #88]	; (8005014 <HAL_TIM_PWM_Start_DMA+0x310>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d111      	bne.n	8004fe4 <HAL_TIM_PWM_Start_DMA+0x2e0>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	2207      	movs	r2, #7
 8004fc8:	4013      	ands	r3, r2
 8004fca:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	2b06      	cmp	r3, #6
 8004fd0:	d010      	beq.n	8004ff4 <HAL_TIM_PWM_Start_DMA+0x2f0>
      {
        __HAL_TIM_ENABLE(htim);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	2101      	movs	r1, #1
 8004fde:	430a      	orrs	r2, r1
 8004fe0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fe2:	e007      	b.n	8004ff4 <HAL_TIM_PWM_Start_DMA+0x2f0>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	2101      	movs	r1, #1
 8004ff0:	430a      	orrs	r2, r1
 8004ff2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004ff4:	2317      	movs	r3, #23
 8004ff6:	18fb      	adds	r3, r7, r3
 8004ff8:	781b      	ldrb	r3, [r3, #0]
}
 8004ffa:	0018      	movs	r0, r3
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	b006      	add	sp, #24
 8005000:	bd80      	pop	{r7, pc}
 8005002:	46c0      	nop			; (mov r8, r8)
 8005004:	08005619 	.word	0x08005619
 8005008:	080056c3 	.word	0x080056c3
 800500c:	08005585 	.word	0x08005585
 8005010:	40010800 	.word	0x40010800
 8005014:	40011400 	.word	0x40011400

08005018 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b082      	sub	sp, #8
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	691b      	ldr	r3, [r3, #16]
 8005026:	2202      	movs	r2, #2
 8005028:	4013      	ands	r3, r2
 800502a:	2b02      	cmp	r3, #2
 800502c:	d124      	bne.n	8005078 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	68db      	ldr	r3, [r3, #12]
 8005034:	2202      	movs	r2, #2
 8005036:	4013      	ands	r3, r2
 8005038:	2b02      	cmp	r3, #2
 800503a:	d11d      	bne.n	8005078 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	2203      	movs	r2, #3
 8005042:	4252      	negs	r2, r2
 8005044:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2201      	movs	r2, #1
 800504a:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	699b      	ldr	r3, [r3, #24]
 8005052:	2203      	movs	r2, #3
 8005054:	4013      	ands	r3, r2
 8005056:	d004      	beq.n	8005062 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	0018      	movs	r0, r3
 800505c:	f000 fa66 	bl	800552c <HAL_TIM_IC_CaptureCallback>
 8005060:	e007      	b.n	8005072 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	0018      	movs	r0, r3
 8005066:	f000 fa59 	bl	800551c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	0018      	movs	r0, r3
 800506e:	f7fb fdcf 	bl	8000c10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	691b      	ldr	r3, [r3, #16]
 800507e:	2204      	movs	r2, #4
 8005080:	4013      	ands	r3, r2
 8005082:	2b04      	cmp	r3, #4
 8005084:	d125      	bne.n	80050d2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	2204      	movs	r2, #4
 800508e:	4013      	ands	r3, r2
 8005090:	2b04      	cmp	r3, #4
 8005092:	d11e      	bne.n	80050d2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	2205      	movs	r2, #5
 800509a:	4252      	negs	r2, r2
 800509c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2202      	movs	r2, #2
 80050a2:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	699a      	ldr	r2, [r3, #24]
 80050aa:	23c0      	movs	r3, #192	; 0xc0
 80050ac:	009b      	lsls	r3, r3, #2
 80050ae:	4013      	ands	r3, r2
 80050b0:	d004      	beq.n	80050bc <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	0018      	movs	r0, r3
 80050b6:	f000 fa39 	bl	800552c <HAL_TIM_IC_CaptureCallback>
 80050ba:	e007      	b.n	80050cc <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	0018      	movs	r0, r3
 80050c0:	f000 fa2c 	bl	800551c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	0018      	movs	r0, r3
 80050c8:	f7fb fda2 	bl	8000c10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2200      	movs	r2, #0
 80050d0:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	691b      	ldr	r3, [r3, #16]
 80050d8:	2208      	movs	r2, #8
 80050da:	4013      	ands	r3, r2
 80050dc:	2b08      	cmp	r3, #8
 80050de:	d124      	bne.n	800512a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	68db      	ldr	r3, [r3, #12]
 80050e6:	2208      	movs	r2, #8
 80050e8:	4013      	ands	r3, r2
 80050ea:	2b08      	cmp	r3, #8
 80050ec:	d11d      	bne.n	800512a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	2209      	movs	r2, #9
 80050f4:	4252      	negs	r2, r2
 80050f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2204      	movs	r2, #4
 80050fc:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	69db      	ldr	r3, [r3, #28]
 8005104:	2203      	movs	r2, #3
 8005106:	4013      	ands	r3, r2
 8005108:	d004      	beq.n	8005114 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	0018      	movs	r0, r3
 800510e:	f000 fa0d 	bl	800552c <HAL_TIM_IC_CaptureCallback>
 8005112:	e007      	b.n	8005124 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	0018      	movs	r0, r3
 8005118:	f000 fa00 	bl	800551c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	0018      	movs	r0, r3
 8005120:	f7fb fd76 	bl	8000c10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2200      	movs	r2, #0
 8005128:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	691b      	ldr	r3, [r3, #16]
 8005130:	2210      	movs	r2, #16
 8005132:	4013      	ands	r3, r2
 8005134:	2b10      	cmp	r3, #16
 8005136:	d125      	bne.n	8005184 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	68db      	ldr	r3, [r3, #12]
 800513e:	2210      	movs	r2, #16
 8005140:	4013      	ands	r3, r2
 8005142:	2b10      	cmp	r3, #16
 8005144:	d11e      	bne.n	8005184 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	2211      	movs	r2, #17
 800514c:	4252      	negs	r2, r2
 800514e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2208      	movs	r2, #8
 8005154:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	69da      	ldr	r2, [r3, #28]
 800515c:	23c0      	movs	r3, #192	; 0xc0
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	4013      	ands	r3, r2
 8005162:	d004      	beq.n	800516e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	0018      	movs	r0, r3
 8005168:	f000 f9e0 	bl	800552c <HAL_TIM_IC_CaptureCallback>
 800516c:	e007      	b.n	800517e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	0018      	movs	r0, r3
 8005172:	f000 f9d3 	bl	800551c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	0018      	movs	r0, r3
 800517a:	f7fb fd49 	bl	8000c10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2200      	movs	r2, #0
 8005182:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	691b      	ldr	r3, [r3, #16]
 800518a:	2201      	movs	r2, #1
 800518c:	4013      	ands	r3, r2
 800518e:	2b01      	cmp	r3, #1
 8005190:	d10f      	bne.n	80051b2 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	2201      	movs	r2, #1
 800519a:	4013      	ands	r3, r2
 800519c:	2b01      	cmp	r3, #1
 800519e:	d108      	bne.n	80051b2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	2202      	movs	r2, #2
 80051a6:	4252      	negs	r2, r2
 80051a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	0018      	movs	r0, r3
 80051ae:	f7fb fceb 	bl	8000b88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	691b      	ldr	r3, [r3, #16]
 80051b8:	2240      	movs	r2, #64	; 0x40
 80051ba:	4013      	ands	r3, r2
 80051bc:	2b40      	cmp	r3, #64	; 0x40
 80051be:	d10f      	bne.n	80051e0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	68db      	ldr	r3, [r3, #12]
 80051c6:	2240      	movs	r2, #64	; 0x40
 80051c8:	4013      	ands	r3, r2
 80051ca:	2b40      	cmp	r3, #64	; 0x40
 80051cc:	d108      	bne.n	80051e0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	2241      	movs	r2, #65	; 0x41
 80051d4:	4252      	negs	r2, r2
 80051d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	0018      	movs	r0, r3
 80051dc:	f000 f9b6 	bl	800554c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80051e0:	46c0      	nop			; (mov r8, r8)
 80051e2:	46bd      	mov	sp, r7
 80051e4:	b002      	add	sp, #8
 80051e6:	bd80      	pop	{r7, pc}

080051e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b086      	sub	sp, #24
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	60f8      	str	r0, [r7, #12]
 80051f0:	60b9      	str	r1, [r7, #8]
 80051f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051f4:	2317      	movs	r3, #23
 80051f6:	18fb      	adds	r3, r7, r3
 80051f8:	2200      	movs	r2, #0
 80051fa:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2238      	movs	r2, #56	; 0x38
 8005200:	5c9b      	ldrb	r3, [r3, r2]
 8005202:	2b01      	cmp	r3, #1
 8005204:	d101      	bne.n	800520a <HAL_TIM_PWM_ConfigChannel+0x22>
 8005206:	2302      	movs	r3, #2
 8005208:	e0ad      	b.n	8005366 <HAL_TIM_PWM_ConfigChannel+0x17e>
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2238      	movs	r2, #56	; 0x38
 800520e:	2101      	movs	r1, #1
 8005210:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2b0c      	cmp	r3, #12
 8005216:	d100      	bne.n	800521a <HAL_TIM_PWM_ConfigChannel+0x32>
 8005218:	e076      	b.n	8005308 <HAL_TIM_PWM_ConfigChannel+0x120>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2b0c      	cmp	r3, #12
 800521e:	d900      	bls.n	8005222 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8005220:	e095      	b.n	800534e <HAL_TIM_PWM_ConfigChannel+0x166>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2b08      	cmp	r3, #8
 8005226:	d04e      	beq.n	80052c6 <HAL_TIM_PWM_ConfigChannel+0xde>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2b08      	cmp	r3, #8
 800522c:	d900      	bls.n	8005230 <HAL_TIM_PWM_ConfigChannel+0x48>
 800522e:	e08e      	b.n	800534e <HAL_TIM_PWM_ConfigChannel+0x166>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d003      	beq.n	800523e <HAL_TIM_PWM_ConfigChannel+0x56>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2b04      	cmp	r3, #4
 800523a:	d021      	beq.n	8005280 <HAL_TIM_PWM_ConfigChannel+0x98>
 800523c:	e087      	b.n	800534e <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	68ba      	ldr	r2, [r7, #8]
 8005244:	0011      	movs	r1, r2
 8005246:	0018      	movs	r0, r3
 8005248:	f000 fac4 	bl	80057d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	699a      	ldr	r2, [r3, #24]
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	2108      	movs	r1, #8
 8005258:	430a      	orrs	r2, r1
 800525a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	699a      	ldr	r2, [r3, #24]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	2104      	movs	r1, #4
 8005268:	438a      	bics	r2, r1
 800526a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	6999      	ldr	r1, [r3, #24]
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	68da      	ldr	r2, [r3, #12]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	430a      	orrs	r2, r1
 800527c:	619a      	str	r2, [r3, #24]
      break;
 800527e:	e06b      	b.n	8005358 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	68ba      	ldr	r2, [r7, #8]
 8005286:	0011      	movs	r1, r2
 8005288:	0018      	movs	r0, r3
 800528a:	f000 fadf 	bl	800584c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	699a      	ldr	r2, [r3, #24]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	2180      	movs	r1, #128	; 0x80
 800529a:	0109      	lsls	r1, r1, #4
 800529c:	430a      	orrs	r2, r1
 800529e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	699a      	ldr	r2, [r3, #24]
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4931      	ldr	r1, [pc, #196]	; (8005370 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80052ac:	400a      	ands	r2, r1
 80052ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	6999      	ldr	r1, [r3, #24]
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	68db      	ldr	r3, [r3, #12]
 80052ba:	021a      	lsls	r2, r3, #8
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	430a      	orrs	r2, r1
 80052c2:	619a      	str	r2, [r3, #24]
      break;
 80052c4:	e048      	b.n	8005358 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	68ba      	ldr	r2, [r7, #8]
 80052cc:	0011      	movs	r1, r2
 80052ce:	0018      	movs	r0, r3
 80052d0:	f000 fafe 	bl	80058d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	69da      	ldr	r2, [r3, #28]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	2108      	movs	r1, #8
 80052e0:	430a      	orrs	r2, r1
 80052e2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	69da      	ldr	r2, [r3, #28]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	2104      	movs	r1, #4
 80052f0:	438a      	bics	r2, r1
 80052f2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	69d9      	ldr	r1, [r3, #28]
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	68da      	ldr	r2, [r3, #12]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	430a      	orrs	r2, r1
 8005304:	61da      	str	r2, [r3, #28]
      break;
 8005306:	e027      	b.n	8005358 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	68ba      	ldr	r2, [r7, #8]
 800530e:	0011      	movs	r1, r2
 8005310:	0018      	movs	r0, r3
 8005312:	f000 fb1d 	bl	8005950 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	69da      	ldr	r2, [r3, #28]
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	2180      	movs	r1, #128	; 0x80
 8005322:	0109      	lsls	r1, r1, #4
 8005324:	430a      	orrs	r2, r1
 8005326:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	69da      	ldr	r2, [r3, #28]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	490f      	ldr	r1, [pc, #60]	; (8005370 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8005334:	400a      	ands	r2, r1
 8005336:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	69d9      	ldr	r1, [r3, #28]
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	68db      	ldr	r3, [r3, #12]
 8005342:	021a      	lsls	r2, r3, #8
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	430a      	orrs	r2, r1
 800534a:	61da      	str	r2, [r3, #28]
      break;
 800534c:	e004      	b.n	8005358 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800534e:	2317      	movs	r3, #23
 8005350:	18fb      	adds	r3, r7, r3
 8005352:	2201      	movs	r2, #1
 8005354:	701a      	strb	r2, [r3, #0]
      break;
 8005356:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2238      	movs	r2, #56	; 0x38
 800535c:	2100      	movs	r1, #0
 800535e:	5499      	strb	r1, [r3, r2]

  return status;
 8005360:	2317      	movs	r3, #23
 8005362:	18fb      	adds	r3, r7, r3
 8005364:	781b      	ldrb	r3, [r3, #0]
}
 8005366:	0018      	movs	r0, r3
 8005368:	46bd      	mov	sp, r7
 800536a:	b006      	add	sp, #24
 800536c:	bd80      	pop	{r7, pc}
 800536e:	46c0      	nop			; (mov r8, r8)
 8005370:	fffffbff 	.word	0xfffffbff

08005374 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b084      	sub	sp, #16
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800537e:	230f      	movs	r3, #15
 8005380:	18fb      	adds	r3, r7, r3
 8005382:	2200      	movs	r2, #0
 8005384:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2238      	movs	r2, #56	; 0x38
 800538a:	5c9b      	ldrb	r3, [r3, r2]
 800538c:	2b01      	cmp	r3, #1
 800538e:	d101      	bne.n	8005394 <HAL_TIM_ConfigClockSource+0x20>
 8005390:	2302      	movs	r3, #2
 8005392:	e0bc      	b.n	800550e <HAL_TIM_ConfigClockSource+0x19a>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2238      	movs	r2, #56	; 0x38
 8005398:	2101      	movs	r1, #1
 800539a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2239      	movs	r2, #57	; 0x39
 80053a0:	2102      	movs	r1, #2
 80053a2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	2277      	movs	r2, #119	; 0x77
 80053b0:	4393      	bics	r3, r2
 80053b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	4a58      	ldr	r2, [pc, #352]	; (8005518 <HAL_TIM_ConfigClockSource+0x1a4>)
 80053b8:	4013      	ands	r3, r2
 80053ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	68ba      	ldr	r2, [r7, #8]
 80053c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	2280      	movs	r2, #128	; 0x80
 80053ca:	0192      	lsls	r2, r2, #6
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d040      	beq.n	8005452 <HAL_TIM_ConfigClockSource+0xde>
 80053d0:	2280      	movs	r2, #128	; 0x80
 80053d2:	0192      	lsls	r2, r2, #6
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d900      	bls.n	80053da <HAL_TIM_ConfigClockSource+0x66>
 80053d8:	e088      	b.n	80054ec <HAL_TIM_ConfigClockSource+0x178>
 80053da:	2280      	movs	r2, #128	; 0x80
 80053dc:	0152      	lsls	r2, r2, #5
 80053de:	4293      	cmp	r3, r2
 80053e0:	d100      	bne.n	80053e4 <HAL_TIM_ConfigClockSource+0x70>
 80053e2:	e088      	b.n	80054f6 <HAL_TIM_ConfigClockSource+0x182>
 80053e4:	2280      	movs	r2, #128	; 0x80
 80053e6:	0152      	lsls	r2, r2, #5
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d900      	bls.n	80053ee <HAL_TIM_ConfigClockSource+0x7a>
 80053ec:	e07e      	b.n	80054ec <HAL_TIM_ConfigClockSource+0x178>
 80053ee:	2b70      	cmp	r3, #112	; 0x70
 80053f0:	d018      	beq.n	8005424 <HAL_TIM_ConfigClockSource+0xb0>
 80053f2:	d900      	bls.n	80053f6 <HAL_TIM_ConfigClockSource+0x82>
 80053f4:	e07a      	b.n	80054ec <HAL_TIM_ConfigClockSource+0x178>
 80053f6:	2b60      	cmp	r3, #96	; 0x60
 80053f8:	d04f      	beq.n	800549a <HAL_TIM_ConfigClockSource+0x126>
 80053fa:	d900      	bls.n	80053fe <HAL_TIM_ConfigClockSource+0x8a>
 80053fc:	e076      	b.n	80054ec <HAL_TIM_ConfigClockSource+0x178>
 80053fe:	2b50      	cmp	r3, #80	; 0x50
 8005400:	d03b      	beq.n	800547a <HAL_TIM_ConfigClockSource+0x106>
 8005402:	d900      	bls.n	8005406 <HAL_TIM_ConfigClockSource+0x92>
 8005404:	e072      	b.n	80054ec <HAL_TIM_ConfigClockSource+0x178>
 8005406:	2b40      	cmp	r3, #64	; 0x40
 8005408:	d057      	beq.n	80054ba <HAL_TIM_ConfigClockSource+0x146>
 800540a:	d900      	bls.n	800540e <HAL_TIM_ConfigClockSource+0x9a>
 800540c:	e06e      	b.n	80054ec <HAL_TIM_ConfigClockSource+0x178>
 800540e:	2b30      	cmp	r3, #48	; 0x30
 8005410:	d063      	beq.n	80054da <HAL_TIM_ConfigClockSource+0x166>
 8005412:	d86b      	bhi.n	80054ec <HAL_TIM_ConfigClockSource+0x178>
 8005414:	2b20      	cmp	r3, #32
 8005416:	d060      	beq.n	80054da <HAL_TIM_ConfigClockSource+0x166>
 8005418:	d868      	bhi.n	80054ec <HAL_TIM_ConfigClockSource+0x178>
 800541a:	2b00      	cmp	r3, #0
 800541c:	d05d      	beq.n	80054da <HAL_TIM_ConfigClockSource+0x166>
 800541e:	2b10      	cmp	r3, #16
 8005420:	d05b      	beq.n	80054da <HAL_TIM_ConfigClockSource+0x166>
 8005422:	e063      	b.n	80054ec <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6818      	ldr	r0, [r3, #0]
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	6899      	ldr	r1, [r3, #8]
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	685a      	ldr	r2, [r3, #4]
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	68db      	ldr	r3, [r3, #12]
 8005434:	f000 fb4c 	bl	8005ad0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	2277      	movs	r2, #119	; 0x77
 8005444:	4313      	orrs	r3, r2
 8005446:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	68ba      	ldr	r2, [r7, #8]
 800544e:	609a      	str	r2, [r3, #8]
      break;
 8005450:	e052      	b.n	80054f8 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6818      	ldr	r0, [r3, #0]
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	6899      	ldr	r1, [r3, #8]
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	685a      	ldr	r2, [r3, #4]
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	f000 fb35 	bl	8005ad0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	689a      	ldr	r2, [r3, #8]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	2180      	movs	r1, #128	; 0x80
 8005472:	01c9      	lsls	r1, r1, #7
 8005474:	430a      	orrs	r2, r1
 8005476:	609a      	str	r2, [r3, #8]
      break;
 8005478:	e03e      	b.n	80054f8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6818      	ldr	r0, [r3, #0]
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	6859      	ldr	r1, [r3, #4]
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	001a      	movs	r2, r3
 8005488:	f000 faa8 	bl	80059dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	2150      	movs	r1, #80	; 0x50
 8005492:	0018      	movs	r0, r3
 8005494:	f000 fb02 	bl	8005a9c <TIM_ITRx_SetConfig>
      break;
 8005498:	e02e      	b.n	80054f8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6818      	ldr	r0, [r3, #0]
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	6859      	ldr	r1, [r3, #4]
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	68db      	ldr	r3, [r3, #12]
 80054a6:	001a      	movs	r2, r3
 80054a8:	f000 fac6 	bl	8005a38 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	2160      	movs	r1, #96	; 0x60
 80054b2:	0018      	movs	r0, r3
 80054b4:	f000 faf2 	bl	8005a9c <TIM_ITRx_SetConfig>
      break;
 80054b8:	e01e      	b.n	80054f8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6818      	ldr	r0, [r3, #0]
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	6859      	ldr	r1, [r3, #4]
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	68db      	ldr	r3, [r3, #12]
 80054c6:	001a      	movs	r2, r3
 80054c8:	f000 fa88 	bl	80059dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	2140      	movs	r1, #64	; 0x40
 80054d2:	0018      	movs	r0, r3
 80054d4:	f000 fae2 	bl	8005a9c <TIM_ITRx_SetConfig>
      break;
 80054d8:	e00e      	b.n	80054f8 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	0019      	movs	r1, r3
 80054e4:	0010      	movs	r0, r2
 80054e6:	f000 fad9 	bl	8005a9c <TIM_ITRx_SetConfig>
      break;
 80054ea:	e005      	b.n	80054f8 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80054ec:	230f      	movs	r3, #15
 80054ee:	18fb      	adds	r3, r7, r3
 80054f0:	2201      	movs	r2, #1
 80054f2:	701a      	strb	r2, [r3, #0]
      break;
 80054f4:	e000      	b.n	80054f8 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80054f6:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2239      	movs	r2, #57	; 0x39
 80054fc:	2101      	movs	r1, #1
 80054fe:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2238      	movs	r2, #56	; 0x38
 8005504:	2100      	movs	r1, #0
 8005506:	5499      	strb	r1, [r3, r2]

  return status;
 8005508:	230f      	movs	r3, #15
 800550a:	18fb      	adds	r3, r7, r3
 800550c:	781b      	ldrb	r3, [r3, #0]
}
 800550e:	0018      	movs	r0, r3
 8005510:	46bd      	mov	sp, r7
 8005512:	b004      	add	sp, #16
 8005514:	bd80      	pop	{r7, pc}
 8005516:	46c0      	nop			; (mov r8, r8)
 8005518:	ffff00ff 	.word	0xffff00ff

0800551c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b082      	sub	sp, #8
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005524:	46c0      	nop			; (mov r8, r8)
 8005526:	46bd      	mov	sp, r7
 8005528:	b002      	add	sp, #8
 800552a:	bd80      	pop	{r7, pc}

0800552c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b082      	sub	sp, #8
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005534:	46c0      	nop			; (mov r8, r8)
 8005536:	46bd      	mov	sp, r7
 8005538:	b002      	add	sp, #8
 800553a:	bd80      	pop	{r7, pc}

0800553c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b082      	sub	sp, #8
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8005544:	46c0      	nop			; (mov r8, r8)
 8005546:	46bd      	mov	sp, r7
 8005548:	b002      	add	sp, #8
 800554a:	bd80      	pop	{r7, pc}

0800554c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b082      	sub	sp, #8
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005554:	46c0      	nop			; (mov r8, r8)
 8005556:	46bd      	mov	sp, r7
 8005558:	b002      	add	sp, #8
 800555a:	bd80      	pop	{r7, pc}

0800555c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b082      	sub	sp, #8
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005564:	46c0      	nop			; (mov r8, r8)
 8005566:	46bd      	mov	sp, r7
 8005568:	b002      	add	sp, #8
 800556a:	bd80      	pop	{r7, pc}

0800556c <HAL_TIM_Base_GetState>:
  * @brief  Return the TIM Base handle state.
  * @param  htim TIM Base handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_Base_GetState(const TIM_HandleTypeDef *htim)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b082      	sub	sp, #8
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  return htim->State;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2239      	movs	r2, #57	; 0x39
 8005578:	5c9b      	ldrb	r3, [r3, r2]
 800557a:	b2db      	uxtb	r3, r3
}
 800557c:	0018      	movs	r0, r3
 800557e:	46bd      	mov	sp, r7
 8005580:	b002      	add	sp, #8
 8005582:	bd80      	pop	{r7, pc}

08005584 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b084      	sub	sp, #16
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005590:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	6a1b      	ldr	r3, [r3, #32]
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	429a      	cmp	r2, r3
 800559a:	d107      	bne.n	80055ac <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2201      	movs	r2, #1
 80055a0:	761a      	strb	r2, [r3, #24]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	223a      	movs	r2, #58	; 0x3a
 80055a6:	2101      	movs	r1, #1
 80055a8:	5499      	strb	r1, [r3, r2]
 80055aa:	e02a      	b.n	8005602 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d107      	bne.n	80055c6 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2202      	movs	r2, #2
 80055ba:	761a      	strb	r2, [r3, #24]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	223b      	movs	r2, #59	; 0x3b
 80055c0:	2101      	movs	r1, #1
 80055c2:	5499      	strb	r1, [r3, r2]
 80055c4:	e01d      	b.n	8005602 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d107      	bne.n	80055e0 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2204      	movs	r2, #4
 80055d4:	761a      	strb	r2, [r3, #24]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	223c      	movs	r2, #60	; 0x3c
 80055da:	2101      	movs	r1, #1
 80055dc:	5499      	strb	r1, [r3, r2]
 80055de:	e010      	b.n	8005602 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d107      	bne.n	80055fa <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2208      	movs	r2, #8
 80055ee:	761a      	strb	r2, [r3, #24]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	223d      	movs	r2, #61	; 0x3d
 80055f4:	2101      	movs	r1, #1
 80055f6:	5499      	strb	r1, [r3, r2]
 80055f8:	e003      	b.n	8005602 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2239      	movs	r2, #57	; 0x39
 80055fe:	2101      	movs	r1, #1
 8005600:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	0018      	movs	r0, r3
 8005606:	f7ff ffa9 	bl	800555c <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2200      	movs	r2, #0
 800560e:	761a      	strb	r2, [r3, #24]
}
 8005610:	46c0      	nop			; (mov r8, r8)
 8005612:	46bd      	mov	sp, r7
 8005614:	b004      	add	sp, #16
 8005616:	bd80      	pop	{r7, pc}

08005618 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b084      	sub	sp, #16
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005624:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	6a1b      	ldr	r3, [r3, #32]
 800562a:	687a      	ldr	r2, [r7, #4]
 800562c:	429a      	cmp	r2, r3
 800562e:	d10b      	bne.n	8005648 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2201      	movs	r2, #1
 8005634:	761a      	strb	r2, [r3, #24]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	69db      	ldr	r3, [r3, #28]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d136      	bne.n	80056ac <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	223a      	movs	r2, #58	; 0x3a
 8005642:	2101      	movs	r1, #1
 8005644:	5499      	strb	r1, [r3, r2]
 8005646:	e031      	b.n	80056ac <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564c:	687a      	ldr	r2, [r7, #4]
 800564e:	429a      	cmp	r2, r3
 8005650:	d10b      	bne.n	800566a <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2202      	movs	r2, #2
 8005656:	761a      	strb	r2, [r3, #24]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	69db      	ldr	r3, [r3, #28]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d125      	bne.n	80056ac <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	223b      	movs	r2, #59	; 0x3b
 8005664:	2101      	movs	r1, #1
 8005666:	5499      	strb	r1, [r3, r2]
 8005668:	e020      	b.n	80056ac <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	429a      	cmp	r2, r3
 8005672:	d10b      	bne.n	800568c <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2204      	movs	r2, #4
 8005678:	761a      	strb	r2, [r3, #24]

    if (hdma->Init.Mode == DMA_NORMAL)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	69db      	ldr	r3, [r3, #28]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d114      	bne.n	80056ac <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	223c      	movs	r2, #60	; 0x3c
 8005686:	2101      	movs	r1, #1
 8005688:	5499      	strb	r1, [r3, r2]
 800568a:	e00f      	b.n	80056ac <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	429a      	cmp	r2, r3
 8005694:	d10a      	bne.n	80056ac <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2208      	movs	r2, #8
 800569a:	761a      	strb	r2, [r3, #24]

    if (hdma->Init.Mode == DMA_NORMAL)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	69db      	ldr	r3, [r3, #28]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d103      	bne.n	80056ac <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	223d      	movs	r2, #61	; 0x3d
 80056a8:	2101      	movs	r1, #1
 80056aa:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	0018      	movs	r0, r3
 80056b0:	f7fb faae 	bl	8000c10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2200      	movs	r2, #0
 80056b8:	761a      	strb	r2, [r3, #24]
}
 80056ba:	46c0      	nop			; (mov r8, r8)
 80056bc:	46bd      	mov	sp, r7
 80056be:	b004      	add	sp, #16
 80056c0:	bd80      	pop	{r7, pc}

080056c2 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80056c2:	b580      	push	{r7, lr}
 80056c4:	b084      	sub	sp, #16
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ce:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6a1b      	ldr	r3, [r3, #32]
 80056d4:	687a      	ldr	r2, [r7, #4]
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d103      	bne.n	80056e2 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2201      	movs	r2, #1
 80056de:	761a      	strb	r2, [r3, #24]
 80056e0:	e019      	b.n	8005716 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e6:	687a      	ldr	r2, [r7, #4]
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d103      	bne.n	80056f4 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2202      	movs	r2, #2
 80056f0:	761a      	strb	r2, [r3, #24]
 80056f2:	e010      	b.n	8005716 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056f8:	687a      	ldr	r2, [r7, #4]
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d103      	bne.n	8005706 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2204      	movs	r2, #4
 8005702:	761a      	strb	r2, [r3, #24]
 8005704:	e007      	b.n	8005716 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800570a:	687a      	ldr	r2, [r7, #4]
 800570c:	429a      	cmp	r2, r3
 800570e:	d102      	bne.n	8005716 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2208      	movs	r2, #8
 8005714:	761a      	strb	r2, [r3, #24]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	0018      	movs	r0, r3
 800571a:	f7ff ff0f 	bl	800553c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2200      	movs	r2, #0
 8005722:	761a      	strb	r2, [r3, #24]
}
 8005724:	46c0      	nop			; (mov r8, r8)
 8005726:	46bd      	mov	sp, r7
 8005728:	b004      	add	sp, #16
 800572a:	bd80      	pop	{r7, pc}

0800572c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b084      	sub	sp, #16
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
 8005734:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	2380      	movs	r3, #128	; 0x80
 8005740:	05db      	lsls	r3, r3, #23
 8005742:	429a      	cmp	r2, r3
 8005744:	d007      	beq.n	8005756 <TIM_Base_SetConfig+0x2a>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4a1f      	ldr	r2, [pc, #124]	; (80057c8 <TIM_Base_SetConfig+0x9c>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d003      	beq.n	8005756 <TIM_Base_SetConfig+0x2a>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4a1e      	ldr	r2, [pc, #120]	; (80057cc <TIM_Base_SetConfig+0xa0>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d108      	bne.n	8005768 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2270      	movs	r2, #112	; 0x70
 800575a:	4393      	bics	r3, r2
 800575c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	68fa      	ldr	r2, [r7, #12]
 8005764:	4313      	orrs	r3, r2
 8005766:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005768:	687a      	ldr	r2, [r7, #4]
 800576a:	2380      	movs	r3, #128	; 0x80
 800576c:	05db      	lsls	r3, r3, #23
 800576e:	429a      	cmp	r2, r3
 8005770:	d007      	beq.n	8005782 <TIM_Base_SetConfig+0x56>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	4a14      	ldr	r2, [pc, #80]	; (80057c8 <TIM_Base_SetConfig+0x9c>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d003      	beq.n	8005782 <TIM_Base_SetConfig+0x56>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	4a13      	ldr	r2, [pc, #76]	; (80057cc <TIM_Base_SetConfig+0xa0>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d108      	bne.n	8005794 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	4a12      	ldr	r2, [pc, #72]	; (80057d0 <TIM_Base_SetConfig+0xa4>)
 8005786:	4013      	ands	r3, r2
 8005788:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	68db      	ldr	r3, [r3, #12]
 800578e:	68fa      	ldr	r2, [r7, #12]
 8005790:	4313      	orrs	r3, r2
 8005792:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2280      	movs	r2, #128	; 0x80
 8005798:	4393      	bics	r3, r2
 800579a:	001a      	movs	r2, r3
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	691b      	ldr	r3, [r3, #16]
 80057a0:	4313      	orrs	r3, r2
 80057a2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	68fa      	ldr	r2, [r7, #12]
 80057a8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	689a      	ldr	r2, [r3, #8]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2201      	movs	r2, #1
 80057be:	615a      	str	r2, [r3, #20]
}
 80057c0:	46c0      	nop			; (mov r8, r8)
 80057c2:	46bd      	mov	sp, r7
 80057c4:	b004      	add	sp, #16
 80057c6:	bd80      	pop	{r7, pc}
 80057c8:	40010800 	.word	0x40010800
 80057cc:	40011400 	.word	0x40011400
 80057d0:	fffffcff 	.word	0xfffffcff

080057d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b086      	sub	sp, #24
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
 80057dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6a1b      	ldr	r3, [r3, #32]
 80057e2:	2201      	movs	r2, #1
 80057e4:	4393      	bics	r3, r2
 80057e6:	001a      	movs	r2, r3
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6a1b      	ldr	r3, [r3, #32]
 80057f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	699b      	ldr	r3, [r3, #24]
 80057fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2270      	movs	r2, #112	; 0x70
 8005802:	4393      	bics	r3, r2
 8005804:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2203      	movs	r2, #3
 800580a:	4393      	bics	r3, r2
 800580c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	68fa      	ldr	r2, [r7, #12]
 8005814:	4313      	orrs	r3, r2
 8005816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	2202      	movs	r2, #2
 800581c:	4393      	bics	r3, r2
 800581e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	697a      	ldr	r2, [r7, #20]
 8005826:	4313      	orrs	r3, r2
 8005828:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	693a      	ldr	r2, [r7, #16]
 800582e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	68fa      	ldr	r2, [r7, #12]
 8005834:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	685a      	ldr	r2, [r3, #4]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	697a      	ldr	r2, [r7, #20]
 8005842:	621a      	str	r2, [r3, #32]
}
 8005844:	46c0      	nop			; (mov r8, r8)
 8005846:	46bd      	mov	sp, r7
 8005848:	b006      	add	sp, #24
 800584a:	bd80      	pop	{r7, pc}

0800584c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b086      	sub	sp, #24
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6a1b      	ldr	r3, [r3, #32]
 800585a:	2210      	movs	r2, #16
 800585c:	4393      	bics	r3, r2
 800585e:	001a      	movs	r2, r3
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6a1b      	ldr	r3, [r3, #32]
 8005868:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	699b      	ldr	r3, [r3, #24]
 8005874:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	4a13      	ldr	r2, [pc, #76]	; (80058c8 <TIM_OC2_SetConfig+0x7c>)
 800587a:	4013      	ands	r3, r2
 800587c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	4a12      	ldr	r2, [pc, #72]	; (80058cc <TIM_OC2_SetConfig+0x80>)
 8005882:	4013      	ands	r3, r2
 8005884:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	021b      	lsls	r3, r3, #8
 800588c:	68fa      	ldr	r2, [r7, #12]
 800588e:	4313      	orrs	r3, r2
 8005890:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	2220      	movs	r2, #32
 8005896:	4393      	bics	r3, r2
 8005898:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	011b      	lsls	r3, r3, #4
 80058a0:	697a      	ldr	r2, [r7, #20]
 80058a2:	4313      	orrs	r3, r2
 80058a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	693a      	ldr	r2, [r7, #16]
 80058aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	68fa      	ldr	r2, [r7, #12]
 80058b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	685a      	ldr	r2, [r3, #4]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	697a      	ldr	r2, [r7, #20]
 80058be:	621a      	str	r2, [r3, #32]
}
 80058c0:	46c0      	nop			; (mov r8, r8)
 80058c2:	46bd      	mov	sp, r7
 80058c4:	b006      	add	sp, #24
 80058c6:	bd80      	pop	{r7, pc}
 80058c8:	ffff8fff 	.word	0xffff8fff
 80058cc:	fffffcff 	.word	0xfffffcff

080058d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b086      	sub	sp, #24
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6a1b      	ldr	r3, [r3, #32]
 80058de:	4a1a      	ldr	r2, [pc, #104]	; (8005948 <TIM_OC3_SetConfig+0x78>)
 80058e0:	401a      	ands	r2, r3
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6a1b      	ldr	r3, [r3, #32]
 80058ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	69db      	ldr	r3, [r3, #28]
 80058f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2270      	movs	r2, #112	; 0x70
 80058fc:	4393      	bics	r3, r2
 80058fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2203      	movs	r2, #3
 8005904:	4393      	bics	r3, r2
 8005906:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	68fa      	ldr	r2, [r7, #12]
 800590e:	4313      	orrs	r3, r2
 8005910:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	4a0d      	ldr	r2, [pc, #52]	; (800594c <TIM_OC3_SetConfig+0x7c>)
 8005916:	4013      	ands	r3, r2
 8005918:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	021b      	lsls	r3, r3, #8
 8005920:	697a      	ldr	r2, [r7, #20]
 8005922:	4313      	orrs	r3, r2
 8005924:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	693a      	ldr	r2, [r7, #16]
 800592a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	68fa      	ldr	r2, [r7, #12]
 8005930:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	685a      	ldr	r2, [r3, #4]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	697a      	ldr	r2, [r7, #20]
 800593e:	621a      	str	r2, [r3, #32]
}
 8005940:	46c0      	nop			; (mov r8, r8)
 8005942:	46bd      	mov	sp, r7
 8005944:	b006      	add	sp, #24
 8005946:	bd80      	pop	{r7, pc}
 8005948:	fffffeff 	.word	0xfffffeff
 800594c:	fffffdff 	.word	0xfffffdff

08005950 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b086      	sub	sp, #24
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6a1b      	ldr	r3, [r3, #32]
 800595e:	4a1b      	ldr	r2, [pc, #108]	; (80059cc <TIM_OC4_SetConfig+0x7c>)
 8005960:	401a      	ands	r2, r3
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6a1b      	ldr	r3, [r3, #32]
 800596a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	69db      	ldr	r3, [r3, #28]
 8005976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	4a15      	ldr	r2, [pc, #84]	; (80059d0 <TIM_OC4_SetConfig+0x80>)
 800597c:	4013      	ands	r3, r2
 800597e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	4a14      	ldr	r2, [pc, #80]	; (80059d4 <TIM_OC4_SetConfig+0x84>)
 8005984:	4013      	ands	r3, r2
 8005986:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	021b      	lsls	r3, r3, #8
 800598e:	68fa      	ldr	r2, [r7, #12]
 8005990:	4313      	orrs	r3, r2
 8005992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	4a10      	ldr	r2, [pc, #64]	; (80059d8 <TIM_OC4_SetConfig+0x88>)
 8005998:	4013      	ands	r3, r2
 800599a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	031b      	lsls	r3, r3, #12
 80059a2:	697a      	ldr	r2, [r7, #20]
 80059a4:	4313      	orrs	r3, r2
 80059a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	693a      	ldr	r2, [r7, #16]
 80059ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	68fa      	ldr	r2, [r7, #12]
 80059b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	685a      	ldr	r2, [r3, #4]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	697a      	ldr	r2, [r7, #20]
 80059c0:	621a      	str	r2, [r3, #32]
}
 80059c2:	46c0      	nop			; (mov r8, r8)
 80059c4:	46bd      	mov	sp, r7
 80059c6:	b006      	add	sp, #24
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	46c0      	nop			; (mov r8, r8)
 80059cc:	ffffefff 	.word	0xffffefff
 80059d0:	ffff8fff 	.word	0xffff8fff
 80059d4:	fffffcff 	.word	0xfffffcff
 80059d8:	ffffdfff 	.word	0xffffdfff

080059dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b086      	sub	sp, #24
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	60f8      	str	r0, [r7, #12]
 80059e4:	60b9      	str	r1, [r7, #8]
 80059e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	6a1b      	ldr	r3, [r3, #32]
 80059ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	6a1b      	ldr	r3, [r3, #32]
 80059f2:	2201      	movs	r2, #1
 80059f4:	4393      	bics	r3, r2
 80059f6:	001a      	movs	r2, r3
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	699b      	ldr	r3, [r3, #24]
 8005a00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	22f0      	movs	r2, #240	; 0xf0
 8005a06:	4393      	bics	r3, r2
 8005a08:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	011b      	lsls	r3, r3, #4
 8005a0e:	693a      	ldr	r2, [r7, #16]
 8005a10:	4313      	orrs	r3, r2
 8005a12:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	220a      	movs	r2, #10
 8005a18:	4393      	bics	r3, r2
 8005a1a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a1c:	697a      	ldr	r2, [r7, #20]
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	4313      	orrs	r3, r2
 8005a22:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	693a      	ldr	r2, [r7, #16]
 8005a28:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	697a      	ldr	r2, [r7, #20]
 8005a2e:	621a      	str	r2, [r3, #32]
}
 8005a30:	46c0      	nop			; (mov r8, r8)
 8005a32:	46bd      	mov	sp, r7
 8005a34:	b006      	add	sp, #24
 8005a36:	bd80      	pop	{r7, pc}

08005a38 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b086      	sub	sp, #24
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	60f8      	str	r0, [r7, #12]
 8005a40:	60b9      	str	r1, [r7, #8]
 8005a42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	6a1b      	ldr	r3, [r3, #32]
 8005a48:	2210      	movs	r2, #16
 8005a4a:	4393      	bics	r3, r2
 8005a4c:	001a      	movs	r2, r3
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	699b      	ldr	r3, [r3, #24]
 8005a56:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	6a1b      	ldr	r3, [r3, #32]
 8005a5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	4a0d      	ldr	r2, [pc, #52]	; (8005a98 <TIM_TI2_ConfigInputStage+0x60>)
 8005a62:	4013      	ands	r3, r2
 8005a64:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	031b      	lsls	r3, r3, #12
 8005a6a:	697a      	ldr	r2, [r7, #20]
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	22a0      	movs	r2, #160	; 0xa0
 8005a74:	4393      	bics	r3, r2
 8005a76:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	011b      	lsls	r3, r3, #4
 8005a7c:	693a      	ldr	r2, [r7, #16]
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	697a      	ldr	r2, [r7, #20]
 8005a86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	693a      	ldr	r2, [r7, #16]
 8005a8c:	621a      	str	r2, [r3, #32]
}
 8005a8e:	46c0      	nop			; (mov r8, r8)
 8005a90:	46bd      	mov	sp, r7
 8005a92:	b006      	add	sp, #24
 8005a94:	bd80      	pop	{r7, pc}
 8005a96:	46c0      	nop			; (mov r8, r8)
 8005a98:	ffff0fff 	.word	0xffff0fff

08005a9c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b084      	sub	sp, #16
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2270      	movs	r2, #112	; 0x70
 8005ab0:	4393      	bics	r3, r2
 8005ab2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ab4:	683a      	ldr	r2, [r7, #0]
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	2207      	movs	r2, #7
 8005abc:	4313      	orrs	r3, r2
 8005abe:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	68fa      	ldr	r2, [r7, #12]
 8005ac4:	609a      	str	r2, [r3, #8]
}
 8005ac6:	46c0      	nop			; (mov r8, r8)
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	b004      	add	sp, #16
 8005acc:	bd80      	pop	{r7, pc}
	...

08005ad0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b086      	sub	sp, #24
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	60f8      	str	r0, [r7, #12]
 8005ad8:	60b9      	str	r1, [r7, #8]
 8005ada:	607a      	str	r2, [r7, #4]
 8005adc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	4a09      	ldr	r2, [pc, #36]	; (8005b0c <TIM_ETR_SetConfig+0x3c>)
 8005ae8:	4013      	ands	r3, r2
 8005aea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	021a      	lsls	r2, r3, #8
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	431a      	orrs	r2, r3
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	4313      	orrs	r3, r2
 8005af8:	697a      	ldr	r2, [r7, #20]
 8005afa:	4313      	orrs	r3, r2
 8005afc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	697a      	ldr	r2, [r7, #20]
 8005b02:	609a      	str	r2, [r3, #8]
}
 8005b04:	46c0      	nop			; (mov r8, r8)
 8005b06:	46bd      	mov	sp, r7
 8005b08:	b006      	add	sp, #24
 8005b0a:	bd80      	pop	{r7, pc}
 8005b0c:	ffff00ff 	.word	0xffff00ff

08005b10 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b086      	sub	sp, #24
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	60f8      	str	r0, [r7, #12]
 8005b18:	60b9      	str	r1, [r7, #8]
 8005b1a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	221f      	movs	r2, #31
 8005b20:	4013      	ands	r3, r2
 8005b22:	2201      	movs	r2, #1
 8005b24:	409a      	lsls	r2, r3
 8005b26:	0013      	movs	r3, r2
 8005b28:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	6a1b      	ldr	r3, [r3, #32]
 8005b2e:	697a      	ldr	r2, [r7, #20]
 8005b30:	43d2      	mvns	r2, r2
 8005b32:	401a      	ands	r2, r3
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	6a1a      	ldr	r2, [r3, #32]
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	211f      	movs	r1, #31
 8005b40:	400b      	ands	r3, r1
 8005b42:	6879      	ldr	r1, [r7, #4]
 8005b44:	4099      	lsls	r1, r3
 8005b46:	000b      	movs	r3, r1
 8005b48:	431a      	orrs	r2, r3
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	621a      	str	r2, [r3, #32]
}
 8005b4e:	46c0      	nop			; (mov r8, r8)
 8005b50:	46bd      	mov	sp, r7
 8005b52:	b006      	add	sp, #24
 8005b54:	bd80      	pop	{r7, pc}
	...

08005b58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b084      	sub	sp, #16
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2238      	movs	r2, #56	; 0x38
 8005b66:	5c9b      	ldrb	r3, [r3, r2]
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d101      	bne.n	8005b70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b6c:	2302      	movs	r3, #2
 8005b6e:	e042      	b.n	8005bf6 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2238      	movs	r2, #56	; 0x38
 8005b74:	2101      	movs	r1, #1
 8005b76:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2239      	movs	r2, #57	; 0x39
 8005b7c:	2102      	movs	r1, #2
 8005b7e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	689b      	ldr	r3, [r3, #8]
 8005b8e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2270      	movs	r2, #112	; 0x70
 8005b94:	4393      	bics	r3, r2
 8005b96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	68fa      	ldr	r2, [r7, #12]
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	68fa      	ldr	r2, [r7, #12]
 8005ba8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	2380      	movs	r3, #128	; 0x80
 8005bb0:	05db      	lsls	r3, r3, #23
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d009      	beq.n	8005bca <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a11      	ldr	r2, [pc, #68]	; (8005c00 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d004      	beq.n	8005bca <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a0f      	ldr	r2, [pc, #60]	; (8005c04 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d10c      	bne.n	8005be4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	2280      	movs	r2, #128	; 0x80
 8005bce:	4393      	bics	r3, r2
 8005bd0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	68ba      	ldr	r2, [r7, #8]
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	68ba      	ldr	r2, [r7, #8]
 8005be2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2239      	movs	r2, #57	; 0x39
 8005be8:	2101      	movs	r1, #1
 8005bea:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2238      	movs	r2, #56	; 0x38
 8005bf0:	2100      	movs	r1, #0
 8005bf2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005bf4:	2300      	movs	r3, #0
}
 8005bf6:	0018      	movs	r0, r3
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	b004      	add	sp, #16
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	46c0      	nop			; (mov r8, r8)
 8005c00:	40010800 	.word	0x40010800
 8005c04:	40011400 	.word	0x40011400

08005c08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b082      	sub	sp, #8
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d101      	bne.n	8005c1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	e044      	b.n	8005ca4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d107      	bne.n	8005c32 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2278      	movs	r2, #120	; 0x78
 8005c26:	2100      	movs	r1, #0
 8005c28:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	0018      	movs	r0, r3
 8005c2e:	f7fb ff8b 	bl	8001b48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2224      	movs	r2, #36	; 0x24
 8005c36:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	2101      	movs	r1, #1
 8005c44:	438a      	bics	r2, r1
 8005c46:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	0018      	movs	r0, r3
 8005c4c:	f000 f830 	bl	8005cb0 <UART_SetConfig>
 8005c50:	0003      	movs	r3, r0
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d101      	bne.n	8005c5a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	e024      	b.n	8005ca4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d003      	beq.n	8005c6a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	0018      	movs	r0, r3
 8005c66:	f000 fa6d 	bl	8006144 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	685a      	ldr	r2, [r3, #4]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	490d      	ldr	r1, [pc, #52]	; (8005cac <HAL_UART_Init+0xa4>)
 8005c76:	400a      	ands	r2, r1
 8005c78:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	689a      	ldr	r2, [r3, #8]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	212a      	movs	r1, #42	; 0x2a
 8005c86:	438a      	bics	r2, r1
 8005c88:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	681a      	ldr	r2, [r3, #0]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	2101      	movs	r1, #1
 8005c96:	430a      	orrs	r2, r1
 8005c98:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	0018      	movs	r0, r3
 8005c9e:	f000 fb05 	bl	80062ac <UART_CheckIdleState>
 8005ca2:	0003      	movs	r3, r0
}
 8005ca4:	0018      	movs	r0, r3
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	b002      	add	sp, #8
 8005caa:	bd80      	pop	{r7, pc}
 8005cac:	ffffb7ff 	.word	0xffffb7ff

08005cb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005cb0:	b5b0      	push	{r4, r5, r7, lr}
 8005cb2:	b08e      	sub	sp, #56	; 0x38
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005cb8:	231a      	movs	r3, #26
 8005cba:	2218      	movs	r2, #24
 8005cbc:	189b      	adds	r3, r3, r2
 8005cbe:	19db      	adds	r3, r3, r7
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005cc4:	69fb      	ldr	r3, [r7, #28]
 8005cc6:	689a      	ldr	r2, [r3, #8]
 8005cc8:	69fb      	ldr	r3, [r7, #28]
 8005cca:	691b      	ldr	r3, [r3, #16]
 8005ccc:	431a      	orrs	r2, r3
 8005cce:	69fb      	ldr	r3, [r7, #28]
 8005cd0:	695b      	ldr	r3, [r3, #20]
 8005cd2:	431a      	orrs	r2, r3
 8005cd4:	69fb      	ldr	r3, [r7, #28]
 8005cd6:	69db      	ldr	r3, [r3, #28]
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005cdc:	69fb      	ldr	r3, [r7, #28]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4ab4      	ldr	r2, [pc, #720]	; (8005fb4 <UART_SetConfig+0x304>)
 8005ce4:	4013      	ands	r3, r2
 8005ce6:	0019      	movs	r1, r3
 8005ce8:	69fb      	ldr	r3, [r7, #28]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005cee:	430a      	orrs	r2, r1
 8005cf0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005cf2:	69fb      	ldr	r3, [r7, #28]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	4aaf      	ldr	r2, [pc, #700]	; (8005fb8 <UART_SetConfig+0x308>)
 8005cfa:	4013      	ands	r3, r2
 8005cfc:	0019      	movs	r1, r3
 8005cfe:	69fb      	ldr	r3, [r7, #28]
 8005d00:	68da      	ldr	r2, [r3, #12]
 8005d02:	69fb      	ldr	r3, [r7, #28]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	430a      	orrs	r2, r1
 8005d08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d0a:	69fb      	ldr	r3, [r7, #28]
 8005d0c:	699b      	ldr	r3, [r3, #24]
 8005d0e:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005d10:	69fb      	ldr	r3, [r7, #28]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4aa9      	ldr	r2, [pc, #676]	; (8005fbc <UART_SetConfig+0x30c>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d004      	beq.n	8005d24 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	6a1b      	ldr	r3, [r3, #32]
 8005d1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d20:	4313      	orrs	r3, r2
 8005d22:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d24:	69fb      	ldr	r3, [r7, #28]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	4aa5      	ldr	r2, [pc, #660]	; (8005fc0 <UART_SetConfig+0x310>)
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	0019      	movs	r1, r3
 8005d30:	69fb      	ldr	r3, [r7, #28]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d36:	430a      	orrs	r2, r1
 8005d38:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d3a:	69fb      	ldr	r3, [r7, #28]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4aa1      	ldr	r2, [pc, #644]	; (8005fc4 <UART_SetConfig+0x314>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d131      	bne.n	8005da8 <UART_SetConfig+0xf8>
 8005d44:	4ba0      	ldr	r3, [pc, #640]	; (8005fc8 <UART_SetConfig+0x318>)
 8005d46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d48:	220c      	movs	r2, #12
 8005d4a:	4013      	ands	r3, r2
 8005d4c:	2b0c      	cmp	r3, #12
 8005d4e:	d01d      	beq.n	8005d8c <UART_SetConfig+0xdc>
 8005d50:	d823      	bhi.n	8005d9a <UART_SetConfig+0xea>
 8005d52:	2b08      	cmp	r3, #8
 8005d54:	d00c      	beq.n	8005d70 <UART_SetConfig+0xc0>
 8005d56:	d820      	bhi.n	8005d9a <UART_SetConfig+0xea>
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d002      	beq.n	8005d62 <UART_SetConfig+0xb2>
 8005d5c:	2b04      	cmp	r3, #4
 8005d5e:	d00e      	beq.n	8005d7e <UART_SetConfig+0xce>
 8005d60:	e01b      	b.n	8005d9a <UART_SetConfig+0xea>
 8005d62:	231b      	movs	r3, #27
 8005d64:	2218      	movs	r2, #24
 8005d66:	189b      	adds	r3, r3, r2
 8005d68:	19db      	adds	r3, r3, r7
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	701a      	strb	r2, [r3, #0]
 8005d6e:	e065      	b.n	8005e3c <UART_SetConfig+0x18c>
 8005d70:	231b      	movs	r3, #27
 8005d72:	2218      	movs	r2, #24
 8005d74:	189b      	adds	r3, r3, r2
 8005d76:	19db      	adds	r3, r3, r7
 8005d78:	2202      	movs	r2, #2
 8005d7a:	701a      	strb	r2, [r3, #0]
 8005d7c:	e05e      	b.n	8005e3c <UART_SetConfig+0x18c>
 8005d7e:	231b      	movs	r3, #27
 8005d80:	2218      	movs	r2, #24
 8005d82:	189b      	adds	r3, r3, r2
 8005d84:	19db      	adds	r3, r3, r7
 8005d86:	2204      	movs	r2, #4
 8005d88:	701a      	strb	r2, [r3, #0]
 8005d8a:	e057      	b.n	8005e3c <UART_SetConfig+0x18c>
 8005d8c:	231b      	movs	r3, #27
 8005d8e:	2218      	movs	r2, #24
 8005d90:	189b      	adds	r3, r3, r2
 8005d92:	19db      	adds	r3, r3, r7
 8005d94:	2208      	movs	r2, #8
 8005d96:	701a      	strb	r2, [r3, #0]
 8005d98:	e050      	b.n	8005e3c <UART_SetConfig+0x18c>
 8005d9a:	231b      	movs	r3, #27
 8005d9c:	2218      	movs	r2, #24
 8005d9e:	189b      	adds	r3, r3, r2
 8005da0:	19db      	adds	r3, r3, r7
 8005da2:	2210      	movs	r2, #16
 8005da4:	701a      	strb	r2, [r3, #0]
 8005da6:	e049      	b.n	8005e3c <UART_SetConfig+0x18c>
 8005da8:	69fb      	ldr	r3, [r7, #28]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a83      	ldr	r2, [pc, #524]	; (8005fbc <UART_SetConfig+0x30c>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d13e      	bne.n	8005e30 <UART_SetConfig+0x180>
 8005db2:	4b85      	ldr	r3, [pc, #532]	; (8005fc8 <UART_SetConfig+0x318>)
 8005db4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005db6:	23c0      	movs	r3, #192	; 0xc0
 8005db8:	011b      	lsls	r3, r3, #4
 8005dba:	4013      	ands	r3, r2
 8005dbc:	22c0      	movs	r2, #192	; 0xc0
 8005dbe:	0112      	lsls	r2, r2, #4
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d027      	beq.n	8005e14 <UART_SetConfig+0x164>
 8005dc4:	22c0      	movs	r2, #192	; 0xc0
 8005dc6:	0112      	lsls	r2, r2, #4
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d82a      	bhi.n	8005e22 <UART_SetConfig+0x172>
 8005dcc:	2280      	movs	r2, #128	; 0x80
 8005dce:	0112      	lsls	r2, r2, #4
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d011      	beq.n	8005df8 <UART_SetConfig+0x148>
 8005dd4:	2280      	movs	r2, #128	; 0x80
 8005dd6:	0112      	lsls	r2, r2, #4
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d822      	bhi.n	8005e22 <UART_SetConfig+0x172>
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d004      	beq.n	8005dea <UART_SetConfig+0x13a>
 8005de0:	2280      	movs	r2, #128	; 0x80
 8005de2:	00d2      	lsls	r2, r2, #3
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d00e      	beq.n	8005e06 <UART_SetConfig+0x156>
 8005de8:	e01b      	b.n	8005e22 <UART_SetConfig+0x172>
 8005dea:	231b      	movs	r3, #27
 8005dec:	2218      	movs	r2, #24
 8005dee:	189b      	adds	r3, r3, r2
 8005df0:	19db      	adds	r3, r3, r7
 8005df2:	2200      	movs	r2, #0
 8005df4:	701a      	strb	r2, [r3, #0]
 8005df6:	e021      	b.n	8005e3c <UART_SetConfig+0x18c>
 8005df8:	231b      	movs	r3, #27
 8005dfa:	2218      	movs	r2, #24
 8005dfc:	189b      	adds	r3, r3, r2
 8005dfe:	19db      	adds	r3, r3, r7
 8005e00:	2202      	movs	r2, #2
 8005e02:	701a      	strb	r2, [r3, #0]
 8005e04:	e01a      	b.n	8005e3c <UART_SetConfig+0x18c>
 8005e06:	231b      	movs	r3, #27
 8005e08:	2218      	movs	r2, #24
 8005e0a:	189b      	adds	r3, r3, r2
 8005e0c:	19db      	adds	r3, r3, r7
 8005e0e:	2204      	movs	r2, #4
 8005e10:	701a      	strb	r2, [r3, #0]
 8005e12:	e013      	b.n	8005e3c <UART_SetConfig+0x18c>
 8005e14:	231b      	movs	r3, #27
 8005e16:	2218      	movs	r2, #24
 8005e18:	189b      	adds	r3, r3, r2
 8005e1a:	19db      	adds	r3, r3, r7
 8005e1c:	2208      	movs	r2, #8
 8005e1e:	701a      	strb	r2, [r3, #0]
 8005e20:	e00c      	b.n	8005e3c <UART_SetConfig+0x18c>
 8005e22:	231b      	movs	r3, #27
 8005e24:	2218      	movs	r2, #24
 8005e26:	189b      	adds	r3, r3, r2
 8005e28:	19db      	adds	r3, r3, r7
 8005e2a:	2210      	movs	r2, #16
 8005e2c:	701a      	strb	r2, [r3, #0]
 8005e2e:	e005      	b.n	8005e3c <UART_SetConfig+0x18c>
 8005e30:	231b      	movs	r3, #27
 8005e32:	2218      	movs	r2, #24
 8005e34:	189b      	adds	r3, r3, r2
 8005e36:	19db      	adds	r3, r3, r7
 8005e38:	2210      	movs	r2, #16
 8005e3a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005e3c:	69fb      	ldr	r3, [r7, #28]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a5e      	ldr	r2, [pc, #376]	; (8005fbc <UART_SetConfig+0x30c>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d000      	beq.n	8005e48 <UART_SetConfig+0x198>
 8005e46:	e084      	b.n	8005f52 <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005e48:	231b      	movs	r3, #27
 8005e4a:	2218      	movs	r2, #24
 8005e4c:	189b      	adds	r3, r3, r2
 8005e4e:	19db      	adds	r3, r3, r7
 8005e50:	781b      	ldrb	r3, [r3, #0]
 8005e52:	2b08      	cmp	r3, #8
 8005e54:	d01d      	beq.n	8005e92 <UART_SetConfig+0x1e2>
 8005e56:	dc20      	bgt.n	8005e9a <UART_SetConfig+0x1ea>
 8005e58:	2b04      	cmp	r3, #4
 8005e5a:	d015      	beq.n	8005e88 <UART_SetConfig+0x1d8>
 8005e5c:	dc1d      	bgt.n	8005e9a <UART_SetConfig+0x1ea>
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d002      	beq.n	8005e68 <UART_SetConfig+0x1b8>
 8005e62:	2b02      	cmp	r3, #2
 8005e64:	d005      	beq.n	8005e72 <UART_SetConfig+0x1c2>
 8005e66:	e018      	b.n	8005e9a <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e68:	f7fe fb1c 	bl	80044a4 <HAL_RCC_GetPCLK1Freq>
 8005e6c:	0003      	movs	r3, r0
 8005e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005e70:	e01c      	b.n	8005eac <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e72:	4b55      	ldr	r3, [pc, #340]	; (8005fc8 <UART_SetConfig+0x318>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	2210      	movs	r2, #16
 8005e78:	4013      	ands	r3, r2
 8005e7a:	d002      	beq.n	8005e82 <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005e7c:	4b53      	ldr	r3, [pc, #332]	; (8005fcc <UART_SetConfig+0x31c>)
 8005e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005e80:	e014      	b.n	8005eac <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 8005e82:	4b53      	ldr	r3, [pc, #332]	; (8005fd0 <UART_SetConfig+0x320>)
 8005e84:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005e86:	e011      	b.n	8005eac <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e88:	f7fe fa5c 	bl	8004344 <HAL_RCC_GetSysClockFreq>
 8005e8c:	0003      	movs	r3, r0
 8005e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005e90:	e00c      	b.n	8005eac <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e92:	2380      	movs	r3, #128	; 0x80
 8005e94:	021b      	lsls	r3, r3, #8
 8005e96:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005e98:	e008      	b.n	8005eac <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005e9e:	231a      	movs	r3, #26
 8005ea0:	2218      	movs	r2, #24
 8005ea2:	189b      	adds	r3, r3, r2
 8005ea4:	19db      	adds	r3, r3, r7
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	701a      	strb	r2, [r3, #0]
        break;
 8005eaa:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d100      	bne.n	8005eb4 <UART_SetConfig+0x204>
 8005eb2:	e12f      	b.n	8006114 <UART_SetConfig+0x464>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005eb4:	69fb      	ldr	r3, [r7, #28]
 8005eb6:	685a      	ldr	r2, [r3, #4]
 8005eb8:	0013      	movs	r3, r2
 8005eba:	005b      	lsls	r3, r3, #1
 8005ebc:	189b      	adds	r3, r3, r2
 8005ebe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d305      	bcc.n	8005ed0 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005ec4:	69fb      	ldr	r3, [r7, #28]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005eca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d906      	bls.n	8005ede <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 8005ed0:	231a      	movs	r3, #26
 8005ed2:	2218      	movs	r2, #24
 8005ed4:	189b      	adds	r3, r3, r2
 8005ed6:	19db      	adds	r3, r3, r7
 8005ed8:	2201      	movs	r2, #1
 8005eda:	701a      	strb	r2, [r3, #0]
 8005edc:	e11a      	b.n	8006114 <UART_SetConfig+0x464>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ee0:	613b      	str	r3, [r7, #16]
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	617b      	str	r3, [r7, #20]
 8005ee6:	6939      	ldr	r1, [r7, #16]
 8005ee8:	697a      	ldr	r2, [r7, #20]
 8005eea:	000b      	movs	r3, r1
 8005eec:	0e1b      	lsrs	r3, r3, #24
 8005eee:	0010      	movs	r0, r2
 8005ef0:	0205      	lsls	r5, r0, #8
 8005ef2:	431d      	orrs	r5, r3
 8005ef4:	000b      	movs	r3, r1
 8005ef6:	021c      	lsls	r4, r3, #8
 8005ef8:	69fb      	ldr	r3, [r7, #28]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	085b      	lsrs	r3, r3, #1
 8005efe:	60bb      	str	r3, [r7, #8]
 8005f00:	2300      	movs	r3, #0
 8005f02:	60fb      	str	r3, [r7, #12]
 8005f04:	68b8      	ldr	r0, [r7, #8]
 8005f06:	68f9      	ldr	r1, [r7, #12]
 8005f08:	1900      	adds	r0, r0, r4
 8005f0a:	4169      	adcs	r1, r5
 8005f0c:	69fb      	ldr	r3, [r7, #28]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	603b      	str	r3, [r7, #0]
 8005f12:	2300      	movs	r3, #0
 8005f14:	607b      	str	r3, [r7, #4]
 8005f16:	683a      	ldr	r2, [r7, #0]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f7fa f981 	bl	8000220 <__aeabi_uldivmod>
 8005f1e:	0002      	movs	r2, r0
 8005f20:	000b      	movs	r3, r1
 8005f22:	0013      	movs	r3, r2
 8005f24:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005f26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f28:	23c0      	movs	r3, #192	; 0xc0
 8005f2a:	009b      	lsls	r3, r3, #2
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d309      	bcc.n	8005f44 <UART_SetConfig+0x294>
 8005f30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f32:	2380      	movs	r3, #128	; 0x80
 8005f34:	035b      	lsls	r3, r3, #13
 8005f36:	429a      	cmp	r2, r3
 8005f38:	d204      	bcs.n	8005f44 <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 8005f3a:	69fb      	ldr	r3, [r7, #28]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f40:	60da      	str	r2, [r3, #12]
 8005f42:	e0e7      	b.n	8006114 <UART_SetConfig+0x464>
        }
        else
        {
          ret = HAL_ERROR;
 8005f44:	231a      	movs	r3, #26
 8005f46:	2218      	movs	r2, #24
 8005f48:	189b      	adds	r3, r3, r2
 8005f4a:	19db      	adds	r3, r3, r7
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	701a      	strb	r2, [r3, #0]
 8005f50:	e0e0      	b.n	8006114 <UART_SetConfig+0x464>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f52:	69fb      	ldr	r3, [r7, #28]
 8005f54:	69da      	ldr	r2, [r3, #28]
 8005f56:	2380      	movs	r3, #128	; 0x80
 8005f58:	021b      	lsls	r3, r3, #8
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d000      	beq.n	8005f60 <UART_SetConfig+0x2b0>
 8005f5e:	e082      	b.n	8006066 <UART_SetConfig+0x3b6>
  {
    switch (clocksource)
 8005f60:	231b      	movs	r3, #27
 8005f62:	2218      	movs	r2, #24
 8005f64:	189b      	adds	r3, r3, r2
 8005f66:	19db      	adds	r3, r3, r7
 8005f68:	781b      	ldrb	r3, [r3, #0]
 8005f6a:	2b08      	cmp	r3, #8
 8005f6c:	d834      	bhi.n	8005fd8 <UART_SetConfig+0x328>
 8005f6e:	009a      	lsls	r2, r3, #2
 8005f70:	4b18      	ldr	r3, [pc, #96]	; (8005fd4 <UART_SetConfig+0x324>)
 8005f72:	18d3      	adds	r3, r2, r3
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f78:	f7fe fa94 	bl	80044a4 <HAL_RCC_GetPCLK1Freq>
 8005f7c:	0003      	movs	r3, r0
 8005f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005f80:	e033      	b.n	8005fea <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f82:	f7fe faa5 	bl	80044d0 <HAL_RCC_GetPCLK2Freq>
 8005f86:	0003      	movs	r3, r0
 8005f88:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005f8a:	e02e      	b.n	8005fea <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f8c:	4b0e      	ldr	r3, [pc, #56]	; (8005fc8 <UART_SetConfig+0x318>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	2210      	movs	r2, #16
 8005f92:	4013      	ands	r3, r2
 8005f94:	d002      	beq.n	8005f9c <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005f96:	4b0d      	ldr	r3, [pc, #52]	; (8005fcc <UART_SetConfig+0x31c>)
 8005f98:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005f9a:	e026      	b.n	8005fea <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 8005f9c:	4b0c      	ldr	r3, [pc, #48]	; (8005fd0 <UART_SetConfig+0x320>)
 8005f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005fa0:	e023      	b.n	8005fea <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fa2:	f7fe f9cf 	bl	8004344 <HAL_RCC_GetSysClockFreq>
 8005fa6:	0003      	movs	r3, r0
 8005fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005faa:	e01e      	b.n	8005fea <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fac:	2380      	movs	r3, #128	; 0x80
 8005fae:	021b      	lsls	r3, r3, #8
 8005fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005fb2:	e01a      	b.n	8005fea <UART_SetConfig+0x33a>
 8005fb4:	efff69f3 	.word	0xefff69f3
 8005fb8:	ffffcfff 	.word	0xffffcfff
 8005fbc:	40004800 	.word	0x40004800
 8005fc0:	fffff4ff 	.word	0xfffff4ff
 8005fc4:	40004400 	.word	0x40004400
 8005fc8:	40021000 	.word	0x40021000
 8005fcc:	003d0900 	.word	0x003d0900
 8005fd0:	00f42400 	.word	0x00f42400
 8005fd4:	08006650 	.word	0x08006650
      default:
        pclk = 0U;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005fdc:	231a      	movs	r3, #26
 8005fde:	2218      	movs	r2, #24
 8005fe0:	189b      	adds	r3, r3, r2
 8005fe2:	19db      	adds	r3, r3, r7
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	701a      	strb	r2, [r3, #0]
        break;
 8005fe8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d100      	bne.n	8005ff2 <UART_SetConfig+0x342>
 8005ff0:	e090      	b.n	8006114 <UART_SetConfig+0x464>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ff4:	005a      	lsls	r2, r3, #1
 8005ff6:	69fb      	ldr	r3, [r7, #28]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	085b      	lsrs	r3, r3, #1
 8005ffc:	18d2      	adds	r2, r2, r3
 8005ffe:	69fb      	ldr	r3, [r7, #28]
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	0019      	movs	r1, r3
 8006004:	0010      	movs	r0, r2
 8006006:	f7fa f87f 	bl	8000108 <__udivsi3>
 800600a:	0003      	movs	r3, r0
 800600c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800600e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006010:	2b0f      	cmp	r3, #15
 8006012:	d921      	bls.n	8006058 <UART_SetConfig+0x3a8>
 8006014:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006016:	2380      	movs	r3, #128	; 0x80
 8006018:	025b      	lsls	r3, r3, #9
 800601a:	429a      	cmp	r2, r3
 800601c:	d21c      	bcs.n	8006058 <UART_SetConfig+0x3a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800601e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006020:	b29a      	uxth	r2, r3
 8006022:	200e      	movs	r0, #14
 8006024:	2418      	movs	r4, #24
 8006026:	1903      	adds	r3, r0, r4
 8006028:	19db      	adds	r3, r3, r7
 800602a:	210f      	movs	r1, #15
 800602c:	438a      	bics	r2, r1
 800602e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006032:	085b      	lsrs	r3, r3, #1
 8006034:	b29b      	uxth	r3, r3
 8006036:	2207      	movs	r2, #7
 8006038:	4013      	ands	r3, r2
 800603a:	b299      	uxth	r1, r3
 800603c:	1903      	adds	r3, r0, r4
 800603e:	19db      	adds	r3, r3, r7
 8006040:	1902      	adds	r2, r0, r4
 8006042:	19d2      	adds	r2, r2, r7
 8006044:	8812      	ldrh	r2, [r2, #0]
 8006046:	430a      	orrs	r2, r1
 8006048:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800604a:	69fb      	ldr	r3, [r7, #28]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	1902      	adds	r2, r0, r4
 8006050:	19d2      	adds	r2, r2, r7
 8006052:	8812      	ldrh	r2, [r2, #0]
 8006054:	60da      	str	r2, [r3, #12]
 8006056:	e05d      	b.n	8006114 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8006058:	231a      	movs	r3, #26
 800605a:	2218      	movs	r2, #24
 800605c:	189b      	adds	r3, r3, r2
 800605e:	19db      	adds	r3, r3, r7
 8006060:	2201      	movs	r2, #1
 8006062:	701a      	strb	r2, [r3, #0]
 8006064:	e056      	b.n	8006114 <UART_SetConfig+0x464>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006066:	231b      	movs	r3, #27
 8006068:	2218      	movs	r2, #24
 800606a:	189b      	adds	r3, r3, r2
 800606c:	19db      	adds	r3, r3, r7
 800606e:	781b      	ldrb	r3, [r3, #0]
 8006070:	2b08      	cmp	r3, #8
 8006072:	d822      	bhi.n	80060ba <UART_SetConfig+0x40a>
 8006074:	009a      	lsls	r2, r3, #2
 8006076:	4b2f      	ldr	r3, [pc, #188]	; (8006134 <UART_SetConfig+0x484>)
 8006078:	18d3      	adds	r3, r2, r3
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800607e:	f7fe fa11 	bl	80044a4 <HAL_RCC_GetPCLK1Freq>
 8006082:	0003      	movs	r3, r0
 8006084:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006086:	e021      	b.n	80060cc <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006088:	f7fe fa22 	bl	80044d0 <HAL_RCC_GetPCLK2Freq>
 800608c:	0003      	movs	r3, r0
 800608e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006090:	e01c      	b.n	80060cc <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006092:	4b29      	ldr	r3, [pc, #164]	; (8006138 <UART_SetConfig+0x488>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	2210      	movs	r2, #16
 8006098:	4013      	ands	r3, r2
 800609a:	d002      	beq.n	80060a2 <UART_SetConfig+0x3f2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800609c:	4b27      	ldr	r3, [pc, #156]	; (800613c <UART_SetConfig+0x48c>)
 800609e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80060a0:	e014      	b.n	80060cc <UART_SetConfig+0x41c>
          pclk = (uint32_t) HSI_VALUE;
 80060a2:	4b27      	ldr	r3, [pc, #156]	; (8006140 <UART_SetConfig+0x490>)
 80060a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80060a6:	e011      	b.n	80060cc <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060a8:	f7fe f94c 	bl	8004344 <HAL_RCC_GetSysClockFreq>
 80060ac:	0003      	movs	r3, r0
 80060ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80060b0:	e00c      	b.n	80060cc <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060b2:	2380      	movs	r3, #128	; 0x80
 80060b4:	021b      	lsls	r3, r3, #8
 80060b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80060b8:	e008      	b.n	80060cc <UART_SetConfig+0x41c>
      default:
        pclk = 0U;
 80060ba:	2300      	movs	r3, #0
 80060bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80060be:	231a      	movs	r3, #26
 80060c0:	2218      	movs	r2, #24
 80060c2:	189b      	adds	r3, r3, r2
 80060c4:	19db      	adds	r3, r3, r7
 80060c6:	2201      	movs	r2, #1
 80060c8:	701a      	strb	r2, [r3, #0]
        break;
 80060ca:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80060cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d020      	beq.n	8006114 <UART_SetConfig+0x464>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80060d2:	69fb      	ldr	r3, [r7, #28]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	085a      	lsrs	r2, r3, #1
 80060d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060da:	18d2      	adds	r2, r2, r3
 80060dc:	69fb      	ldr	r3, [r7, #28]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	0019      	movs	r1, r3
 80060e2:	0010      	movs	r0, r2
 80060e4:	f7fa f810 	bl	8000108 <__udivsi3>
 80060e8:	0003      	movs	r3, r0
 80060ea:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ee:	2b0f      	cmp	r3, #15
 80060f0:	d90a      	bls.n	8006108 <UART_SetConfig+0x458>
 80060f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060f4:	2380      	movs	r3, #128	; 0x80
 80060f6:	025b      	lsls	r3, r3, #9
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d205      	bcs.n	8006108 <UART_SetConfig+0x458>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80060fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060fe:	b29a      	uxth	r2, r3
 8006100:	69fb      	ldr	r3, [r7, #28]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	60da      	str	r2, [r3, #12]
 8006106:	e005      	b.n	8006114 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8006108:	231a      	movs	r3, #26
 800610a:	2218      	movs	r2, #24
 800610c:	189b      	adds	r3, r3, r2
 800610e:	19db      	adds	r3, r3, r7
 8006110:	2201      	movs	r2, #1
 8006112:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006114:	69fb      	ldr	r3, [r7, #28]
 8006116:	2200      	movs	r2, #0
 8006118:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800611a:	69fb      	ldr	r3, [r7, #28]
 800611c:	2200      	movs	r2, #0
 800611e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006120:	231a      	movs	r3, #26
 8006122:	2218      	movs	r2, #24
 8006124:	189b      	adds	r3, r3, r2
 8006126:	19db      	adds	r3, r3, r7
 8006128:	781b      	ldrb	r3, [r3, #0]
}
 800612a:	0018      	movs	r0, r3
 800612c:	46bd      	mov	sp, r7
 800612e:	b00e      	add	sp, #56	; 0x38
 8006130:	bdb0      	pop	{r4, r5, r7, pc}
 8006132:	46c0      	nop			; (mov r8, r8)
 8006134:	08006674 	.word	0x08006674
 8006138:	40021000 	.word	0x40021000
 800613c:	003d0900 	.word	0x003d0900
 8006140:	00f42400 	.word	0x00f42400

08006144 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b082      	sub	sp, #8
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006150:	2201      	movs	r2, #1
 8006152:	4013      	ands	r3, r2
 8006154:	d00b      	beq.n	800616e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	4a4a      	ldr	r2, [pc, #296]	; (8006288 <UART_AdvFeatureConfig+0x144>)
 800615e:	4013      	ands	r3, r2
 8006160:	0019      	movs	r1, r3
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	430a      	orrs	r2, r1
 800616c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006172:	2202      	movs	r2, #2
 8006174:	4013      	ands	r3, r2
 8006176:	d00b      	beq.n	8006190 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	4a43      	ldr	r2, [pc, #268]	; (800628c <UART_AdvFeatureConfig+0x148>)
 8006180:	4013      	ands	r3, r2
 8006182:	0019      	movs	r1, r3
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	430a      	orrs	r2, r1
 800618e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006194:	2204      	movs	r2, #4
 8006196:	4013      	ands	r3, r2
 8006198:	d00b      	beq.n	80061b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	4a3b      	ldr	r2, [pc, #236]	; (8006290 <UART_AdvFeatureConfig+0x14c>)
 80061a2:	4013      	ands	r3, r2
 80061a4:	0019      	movs	r1, r3
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	430a      	orrs	r2, r1
 80061b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b6:	2208      	movs	r2, #8
 80061b8:	4013      	ands	r3, r2
 80061ba:	d00b      	beq.n	80061d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	4a34      	ldr	r2, [pc, #208]	; (8006294 <UART_AdvFeatureConfig+0x150>)
 80061c4:	4013      	ands	r3, r2
 80061c6:	0019      	movs	r1, r3
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	430a      	orrs	r2, r1
 80061d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d8:	2210      	movs	r2, #16
 80061da:	4013      	ands	r3, r2
 80061dc:	d00b      	beq.n	80061f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	4a2c      	ldr	r2, [pc, #176]	; (8006298 <UART_AdvFeatureConfig+0x154>)
 80061e6:	4013      	ands	r3, r2
 80061e8:	0019      	movs	r1, r3
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	430a      	orrs	r2, r1
 80061f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061fa:	2220      	movs	r2, #32
 80061fc:	4013      	ands	r3, r2
 80061fe:	d00b      	beq.n	8006218 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	4a25      	ldr	r2, [pc, #148]	; (800629c <UART_AdvFeatureConfig+0x158>)
 8006208:	4013      	ands	r3, r2
 800620a:	0019      	movs	r1, r3
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	430a      	orrs	r2, r1
 8006216:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800621c:	2240      	movs	r2, #64	; 0x40
 800621e:	4013      	ands	r3, r2
 8006220:	d01d      	beq.n	800625e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	4a1d      	ldr	r2, [pc, #116]	; (80062a0 <UART_AdvFeatureConfig+0x15c>)
 800622a:	4013      	ands	r3, r2
 800622c:	0019      	movs	r1, r3
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	430a      	orrs	r2, r1
 8006238:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800623e:	2380      	movs	r3, #128	; 0x80
 8006240:	035b      	lsls	r3, r3, #13
 8006242:	429a      	cmp	r2, r3
 8006244:	d10b      	bne.n	800625e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	4a15      	ldr	r2, [pc, #84]	; (80062a4 <UART_AdvFeatureConfig+0x160>)
 800624e:	4013      	ands	r3, r2
 8006250:	0019      	movs	r1, r3
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	430a      	orrs	r2, r1
 800625c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006262:	2280      	movs	r2, #128	; 0x80
 8006264:	4013      	ands	r3, r2
 8006266:	d00b      	beq.n	8006280 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	4a0e      	ldr	r2, [pc, #56]	; (80062a8 <UART_AdvFeatureConfig+0x164>)
 8006270:	4013      	ands	r3, r2
 8006272:	0019      	movs	r1, r3
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	430a      	orrs	r2, r1
 800627e:	605a      	str	r2, [r3, #4]
  }
}
 8006280:	46c0      	nop			; (mov r8, r8)
 8006282:	46bd      	mov	sp, r7
 8006284:	b002      	add	sp, #8
 8006286:	bd80      	pop	{r7, pc}
 8006288:	fffdffff 	.word	0xfffdffff
 800628c:	fffeffff 	.word	0xfffeffff
 8006290:	fffbffff 	.word	0xfffbffff
 8006294:	ffff7fff 	.word	0xffff7fff
 8006298:	ffffefff 	.word	0xffffefff
 800629c:	ffffdfff 	.word	0xffffdfff
 80062a0:	ffefffff 	.word	0xffefffff
 80062a4:	ff9fffff 	.word	0xff9fffff
 80062a8:	fff7ffff 	.word	0xfff7ffff

080062ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b092      	sub	sp, #72	; 0x48
 80062b0:	af02      	add	r7, sp, #8
 80062b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2284      	movs	r2, #132	; 0x84
 80062b8:	2100      	movs	r1, #0
 80062ba:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80062bc:	f7fc f900 	bl	80024c0 <HAL_GetTick>
 80062c0:	0003      	movs	r3, r0
 80062c2:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	2208      	movs	r2, #8
 80062cc:	4013      	ands	r3, r2
 80062ce:	2b08      	cmp	r3, #8
 80062d0:	d12c      	bne.n	800632c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062d4:	2280      	movs	r2, #128	; 0x80
 80062d6:	0391      	lsls	r1, r2, #14
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	4a46      	ldr	r2, [pc, #280]	; (80063f4 <UART_CheckIdleState+0x148>)
 80062dc:	9200      	str	r2, [sp, #0]
 80062de:	2200      	movs	r2, #0
 80062e0:	f000 f88c 	bl	80063fc <UART_WaitOnFlagUntilTimeout>
 80062e4:	1e03      	subs	r3, r0, #0
 80062e6:	d021      	beq.n	800632c <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062e8:	f3ef 8310 	mrs	r3, PRIMASK
 80062ec:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80062ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80062f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80062f2:	2301      	movs	r3, #1
 80062f4:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f8:	f383 8810 	msr	PRIMASK, r3
}
 80062fc:	46c0      	nop			; (mov r8, r8)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	2180      	movs	r1, #128	; 0x80
 800630a:	438a      	bics	r2, r1
 800630c:	601a      	str	r2, [r3, #0]
 800630e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006310:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006314:	f383 8810 	msr	PRIMASK, r3
}
 8006318:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2220      	movs	r2, #32
 800631e:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2278      	movs	r2, #120	; 0x78
 8006324:	2100      	movs	r1, #0
 8006326:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006328:	2303      	movs	r3, #3
 800632a:	e05f      	b.n	80063ec <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	2204      	movs	r2, #4
 8006334:	4013      	ands	r3, r2
 8006336:	2b04      	cmp	r3, #4
 8006338:	d146      	bne.n	80063c8 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800633a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800633c:	2280      	movs	r2, #128	; 0x80
 800633e:	03d1      	lsls	r1, r2, #15
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	4a2c      	ldr	r2, [pc, #176]	; (80063f4 <UART_CheckIdleState+0x148>)
 8006344:	9200      	str	r2, [sp, #0]
 8006346:	2200      	movs	r2, #0
 8006348:	f000 f858 	bl	80063fc <UART_WaitOnFlagUntilTimeout>
 800634c:	1e03      	subs	r3, r0, #0
 800634e:	d03b      	beq.n	80063c8 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006350:	f3ef 8310 	mrs	r3, PRIMASK
 8006354:	60fb      	str	r3, [r7, #12]
  return(result);
 8006356:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006358:	637b      	str	r3, [r7, #52]	; 0x34
 800635a:	2301      	movs	r3, #1
 800635c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	f383 8810 	msr	PRIMASK, r3
}
 8006364:	46c0      	nop			; (mov r8, r8)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4921      	ldr	r1, [pc, #132]	; (80063f8 <UART_CheckIdleState+0x14c>)
 8006372:	400a      	ands	r2, r1
 8006374:	601a      	str	r2, [r3, #0]
 8006376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006378:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	f383 8810 	msr	PRIMASK, r3
}
 8006380:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006382:	f3ef 8310 	mrs	r3, PRIMASK
 8006386:	61bb      	str	r3, [r7, #24]
  return(result);
 8006388:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800638a:	633b      	str	r3, [r7, #48]	; 0x30
 800638c:	2301      	movs	r3, #1
 800638e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006390:	69fb      	ldr	r3, [r7, #28]
 8006392:	f383 8810 	msr	PRIMASK, r3
}
 8006396:	46c0      	nop			; (mov r8, r8)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	689a      	ldr	r2, [r3, #8]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	2101      	movs	r1, #1
 80063a4:	438a      	bics	r2, r1
 80063a6:	609a      	str	r2, [r3, #8]
 80063a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063aa:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063ac:	6a3b      	ldr	r3, [r7, #32]
 80063ae:	f383 8810 	msr	PRIMASK, r3
}
 80063b2:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2280      	movs	r2, #128	; 0x80
 80063b8:	2120      	movs	r1, #32
 80063ba:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2278      	movs	r2, #120	; 0x78
 80063c0:	2100      	movs	r1, #0
 80063c2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80063c4:	2303      	movs	r3, #3
 80063c6:	e011      	b.n	80063ec <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2220      	movs	r2, #32
 80063cc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2280      	movs	r2, #128	; 0x80
 80063d2:	2120      	movs	r1, #32
 80063d4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2200      	movs	r2, #0
 80063da:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2200      	movs	r2, #0
 80063e0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2278      	movs	r2, #120	; 0x78
 80063e6:	2100      	movs	r1, #0
 80063e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80063ea:	2300      	movs	r3, #0
}
 80063ec:	0018      	movs	r0, r3
 80063ee:	46bd      	mov	sp, r7
 80063f0:	b010      	add	sp, #64	; 0x40
 80063f2:	bd80      	pop	{r7, pc}
 80063f4:	01ffffff 	.word	0x01ffffff
 80063f8:	fffffedf 	.word	0xfffffedf

080063fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b084      	sub	sp, #16
 8006400:	af00      	add	r7, sp, #0
 8006402:	60f8      	str	r0, [r7, #12]
 8006404:	60b9      	str	r1, [r7, #8]
 8006406:	603b      	str	r3, [r7, #0]
 8006408:	1dfb      	adds	r3, r7, #7
 800640a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800640c:	e04b      	b.n	80064a6 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800640e:	69bb      	ldr	r3, [r7, #24]
 8006410:	3301      	adds	r3, #1
 8006412:	d048      	beq.n	80064a6 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006414:	f7fc f854 	bl	80024c0 <HAL_GetTick>
 8006418:	0002      	movs	r2, r0
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	1ad3      	subs	r3, r2, r3
 800641e:	69ba      	ldr	r2, [r7, #24]
 8006420:	429a      	cmp	r2, r3
 8006422:	d302      	bcc.n	800642a <UART_WaitOnFlagUntilTimeout+0x2e>
 8006424:	69bb      	ldr	r3, [r7, #24]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d101      	bne.n	800642e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800642a:	2303      	movs	r3, #3
 800642c:	e04b      	b.n	80064c6 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	2204      	movs	r2, #4
 8006436:	4013      	ands	r3, r2
 8006438:	d035      	beq.n	80064a6 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	69db      	ldr	r3, [r3, #28]
 8006440:	2208      	movs	r2, #8
 8006442:	4013      	ands	r3, r2
 8006444:	2b08      	cmp	r3, #8
 8006446:	d111      	bne.n	800646c <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	2208      	movs	r2, #8
 800644e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	0018      	movs	r0, r3
 8006454:	f000 f83c 	bl	80064d0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2284      	movs	r2, #132	; 0x84
 800645c:	2108      	movs	r1, #8
 800645e:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2278      	movs	r2, #120	; 0x78
 8006464:	2100      	movs	r1, #0
 8006466:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8006468:	2301      	movs	r3, #1
 800646a:	e02c      	b.n	80064c6 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	69da      	ldr	r2, [r3, #28]
 8006472:	2380      	movs	r3, #128	; 0x80
 8006474:	011b      	lsls	r3, r3, #4
 8006476:	401a      	ands	r2, r3
 8006478:	2380      	movs	r3, #128	; 0x80
 800647a:	011b      	lsls	r3, r3, #4
 800647c:	429a      	cmp	r2, r3
 800647e:	d112      	bne.n	80064a6 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	2280      	movs	r2, #128	; 0x80
 8006486:	0112      	lsls	r2, r2, #4
 8006488:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	0018      	movs	r0, r3
 800648e:	f000 f81f 	bl	80064d0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2284      	movs	r2, #132	; 0x84
 8006496:	2120      	movs	r1, #32
 8006498:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2278      	movs	r2, #120	; 0x78
 800649e:	2100      	movs	r1, #0
 80064a0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80064a2:	2303      	movs	r3, #3
 80064a4:	e00f      	b.n	80064c6 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	69db      	ldr	r3, [r3, #28]
 80064ac:	68ba      	ldr	r2, [r7, #8]
 80064ae:	4013      	ands	r3, r2
 80064b0:	68ba      	ldr	r2, [r7, #8]
 80064b2:	1ad3      	subs	r3, r2, r3
 80064b4:	425a      	negs	r2, r3
 80064b6:	4153      	adcs	r3, r2
 80064b8:	b2db      	uxtb	r3, r3
 80064ba:	001a      	movs	r2, r3
 80064bc:	1dfb      	adds	r3, r7, #7
 80064be:	781b      	ldrb	r3, [r3, #0]
 80064c0:	429a      	cmp	r2, r3
 80064c2:	d0a4      	beq.n	800640e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80064c4:	2300      	movs	r3, #0
}
 80064c6:	0018      	movs	r0, r3
 80064c8:	46bd      	mov	sp, r7
 80064ca:	b004      	add	sp, #16
 80064cc:	bd80      	pop	{r7, pc}
	...

080064d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b08e      	sub	sp, #56	; 0x38
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064d8:	f3ef 8310 	mrs	r3, PRIMASK
 80064dc:	617b      	str	r3, [r7, #20]
  return(result);
 80064de:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064e0:	637b      	str	r3, [r7, #52]	; 0x34
 80064e2:	2301      	movs	r3, #1
 80064e4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064e6:	69bb      	ldr	r3, [r7, #24]
 80064e8:	f383 8810 	msr	PRIMASK, r3
}
 80064ec:	46c0      	nop			; (mov r8, r8)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4926      	ldr	r1, [pc, #152]	; (8006594 <UART_EndRxTransfer+0xc4>)
 80064fa:	400a      	ands	r2, r1
 80064fc:	601a      	str	r2, [r3, #0]
 80064fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006500:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006502:	69fb      	ldr	r3, [r7, #28]
 8006504:	f383 8810 	msr	PRIMASK, r3
}
 8006508:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800650a:	f3ef 8310 	mrs	r3, PRIMASK
 800650e:	623b      	str	r3, [r7, #32]
  return(result);
 8006510:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006512:	633b      	str	r3, [r7, #48]	; 0x30
 8006514:	2301      	movs	r3, #1
 8006516:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651a:	f383 8810 	msr	PRIMASK, r3
}
 800651e:	46c0      	nop			; (mov r8, r8)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	689a      	ldr	r2, [r3, #8]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	2101      	movs	r1, #1
 800652c:	438a      	bics	r2, r1
 800652e:	609a      	str	r2, [r3, #8]
 8006530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006532:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006536:	f383 8810 	msr	PRIMASK, r3
}
 800653a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006540:	2b01      	cmp	r3, #1
 8006542:	d118      	bne.n	8006576 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006544:	f3ef 8310 	mrs	r3, PRIMASK
 8006548:	60bb      	str	r3, [r7, #8]
  return(result);
 800654a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800654c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800654e:	2301      	movs	r3, #1
 8006550:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	f383 8810 	msr	PRIMASK, r3
}
 8006558:	46c0      	nop			; (mov r8, r8)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	681a      	ldr	r2, [r3, #0]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	2110      	movs	r1, #16
 8006566:	438a      	bics	r2, r1
 8006568:	601a      	str	r2, [r3, #0]
 800656a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800656c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	f383 8810 	msr	PRIMASK, r3
}
 8006574:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2280      	movs	r2, #128	; 0x80
 800657a:	2120      	movs	r1, #32
 800657c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2200      	movs	r2, #0
 8006582:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2200      	movs	r2, #0
 8006588:	669a      	str	r2, [r3, #104]	; 0x68
}
 800658a:	46c0      	nop			; (mov r8, r8)
 800658c:	46bd      	mov	sp, r7
 800658e:	b00e      	add	sp, #56	; 0x38
 8006590:	bd80      	pop	{r7, pc}
 8006592:	46c0      	nop			; (mov r8, r8)
 8006594:	fffffedf 	.word	0xfffffedf

08006598 <__libc_init_array>:
 8006598:	b570      	push	{r4, r5, r6, lr}
 800659a:	2600      	movs	r6, #0
 800659c:	4d0c      	ldr	r5, [pc, #48]	; (80065d0 <__libc_init_array+0x38>)
 800659e:	4c0d      	ldr	r4, [pc, #52]	; (80065d4 <__libc_init_array+0x3c>)
 80065a0:	1b64      	subs	r4, r4, r5
 80065a2:	10a4      	asrs	r4, r4, #2
 80065a4:	42a6      	cmp	r6, r4
 80065a6:	d109      	bne.n	80065bc <__libc_init_array+0x24>
 80065a8:	2600      	movs	r6, #0
 80065aa:	f000 f829 	bl	8006600 <_init>
 80065ae:	4d0a      	ldr	r5, [pc, #40]	; (80065d8 <__libc_init_array+0x40>)
 80065b0:	4c0a      	ldr	r4, [pc, #40]	; (80065dc <__libc_init_array+0x44>)
 80065b2:	1b64      	subs	r4, r4, r5
 80065b4:	10a4      	asrs	r4, r4, #2
 80065b6:	42a6      	cmp	r6, r4
 80065b8:	d105      	bne.n	80065c6 <__libc_init_array+0x2e>
 80065ba:	bd70      	pop	{r4, r5, r6, pc}
 80065bc:	00b3      	lsls	r3, r6, #2
 80065be:	58eb      	ldr	r3, [r5, r3]
 80065c0:	4798      	blx	r3
 80065c2:	3601      	adds	r6, #1
 80065c4:	e7ee      	b.n	80065a4 <__libc_init_array+0xc>
 80065c6:	00b3      	lsls	r3, r6, #2
 80065c8:	58eb      	ldr	r3, [r5, r3]
 80065ca:	4798      	blx	r3
 80065cc:	3601      	adds	r6, #1
 80065ce:	e7f2      	b.n	80065b6 <__libc_init_array+0x1e>
 80065d0:	080066a0 	.word	0x080066a0
 80065d4:	080066a0 	.word	0x080066a0
 80065d8:	080066a0 	.word	0x080066a0
 80065dc:	080066a4 	.word	0x080066a4

080065e0 <memset>:
 80065e0:	0003      	movs	r3, r0
 80065e2:	1882      	adds	r2, r0, r2
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d100      	bne.n	80065ea <memset+0xa>
 80065e8:	4770      	bx	lr
 80065ea:	7019      	strb	r1, [r3, #0]
 80065ec:	3301      	adds	r3, #1
 80065ee:	e7f9      	b.n	80065e4 <memset+0x4>

080065f0 <strcpy>:
 80065f0:	0003      	movs	r3, r0
 80065f2:	780a      	ldrb	r2, [r1, #0]
 80065f4:	3101      	adds	r1, #1
 80065f6:	701a      	strb	r2, [r3, #0]
 80065f8:	3301      	adds	r3, #1
 80065fa:	2a00      	cmp	r2, #0
 80065fc:	d1f9      	bne.n	80065f2 <strcpy+0x2>
 80065fe:	4770      	bx	lr

08006600 <_init>:
 8006600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006602:	46c0      	nop			; (mov r8, r8)
 8006604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006606:	bc08      	pop	{r3}
 8006608:	469e      	mov	lr, r3
 800660a:	4770      	bx	lr

0800660c <_fini>:
 800660c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800660e:	46c0      	nop			; (mov r8, r8)
 8006610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006612:	bc08      	pop	{r3}
 8006614:	469e      	mov	lr, r3
 8006616:	4770      	bx	lr
