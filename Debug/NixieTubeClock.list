
NixieTubeClock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003110  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  080031d0  080031d0  000041d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003334  08003334  00005588  2**0
                  CONTENTS
  4 .ARM          00000008  08003334  08003334  00004334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800333c  0800333c  00005588  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800333c  0800333c  0000433c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003340  08003340  00004340  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000588  20000000  08003344  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000480  20000588  080038cc  00005588  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a08  080038cc  00005a08  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00005588  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a478  00000000  00000000  000055b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030ba  00000000  00000000  0001fa28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000b56c  00000000  00000000  00022ae2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001230  00000000  00000000  0002e050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000de3  00000000  00000000  0002f280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000143b5  00000000  00000000  00030063  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001cde4  00000000  00000000  00044418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00078151  00000000  00000000  000611fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000d934d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003188  00000000  00000000  000d9390  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000058  00000000  00000000  000dc518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000588 	.word	0x20000588
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080031b8 	.word	0x080031b8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000058c 	.word	0x2000058c
 8000104:	080031b8 	.word	0x080031b8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	@ (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	@ (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			@ (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			@ (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1824      	adds	r4, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	42a3      	cmp	r3, r4
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	@ 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c23      	lsrs	r3, r4, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0424      	lsls	r4, r4, #16
 80002ae:	1960      	adds	r0, r4, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			@ (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	d434      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f2:	469b      	mov	fp, r3
 80002f4:	4653      	mov	r3, sl
 80002f6:	465a      	mov	r2, fp
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83b      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e079      	b.n	8000402 <__udivmoddi4+0x146>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e076      	b.n	8000408 <__udivmoddi4+0x14c>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e029      	b.n	8000388 <__udivmoddi4+0xcc>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	469b      	mov	fp, r3
 8000360:	2320      	movs	r3, #32
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	40da      	lsrs	r2, r3
 8000368:	4641      	mov	r1, r8
 800036a:	0013      	movs	r3, r2
 800036c:	464a      	mov	r2, r9
 800036e:	408a      	lsls	r2, r1
 8000370:	0017      	movs	r7, r2
 8000372:	4642      	mov	r2, r8
 8000374:	431f      	orrs	r7, r3
 8000376:	4653      	mov	r3, sl
 8000378:	4093      	lsls	r3, r2
 800037a:	001e      	movs	r6, r3
 800037c:	42af      	cmp	r7, r5
 800037e:	d9c3      	bls.n	8000308 <__udivmoddi4+0x4c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	4643      	mov	r3, r8
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0d8      	beq.n	8000340 <__udivmoddi4+0x84>
 800038e:	07fb      	lsls	r3, r7, #31
 8000390:	0872      	lsrs	r2, r6, #1
 8000392:	431a      	orrs	r2, r3
 8000394:	4646      	mov	r6, r8
 8000396:	087b      	lsrs	r3, r7, #1
 8000398:	e00e      	b.n	80003b8 <__udivmoddi4+0xfc>
 800039a:	42ab      	cmp	r3, r5
 800039c:	d101      	bne.n	80003a2 <__udivmoddi4+0xe6>
 800039e:	42a2      	cmp	r2, r4
 80003a0:	d80c      	bhi.n	80003bc <__udivmoddi4+0x100>
 80003a2:	1aa4      	subs	r4, r4, r2
 80003a4:	419d      	sbcs	r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	1924      	adds	r4, r4, r4
 80003aa:	416d      	adcs	r5, r5
 80003ac:	2100      	movs	r1, #0
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1824      	adds	r4, r4, r0
 80003b2:	414d      	adcs	r5, r1
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d006      	beq.n	80003c6 <__udivmoddi4+0x10a>
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d9ee      	bls.n	800039a <__udivmoddi4+0xde>
 80003bc:	3e01      	subs	r6, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d1f8      	bne.n	80003b8 <__udivmoddi4+0xfc>
 80003c6:	9800      	ldr	r0, [sp, #0]
 80003c8:	9901      	ldr	r1, [sp, #4]
 80003ca:	465b      	mov	r3, fp
 80003cc:	1900      	adds	r0, r0, r4
 80003ce:	4169      	adcs	r1, r5
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	db24      	blt.n	800041e <__udivmoddi4+0x162>
 80003d4:	002b      	movs	r3, r5
 80003d6:	465a      	mov	r2, fp
 80003d8:	4644      	mov	r4, r8
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	40e2      	lsrs	r2, r4
 80003e0:	001c      	movs	r4, r3
 80003e2:	465b      	mov	r3, fp
 80003e4:	0015      	movs	r5, r2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db2a      	blt.n	8000440 <__udivmoddi4+0x184>
 80003ea:	0026      	movs	r6, r4
 80003ec:	409e      	lsls	r6, r3
 80003ee:	0033      	movs	r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	4647      	mov	r7, r8
 80003f4:	40be      	lsls	r6, r7
 80003f6:	0032      	movs	r2, r6
 80003f8:	1a80      	subs	r0, r0, r2
 80003fa:	4199      	sbcs	r1, r3
 80003fc:	9000      	str	r0, [sp, #0]
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	e79e      	b.n	8000340 <__udivmoddi4+0x84>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d8bc      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000406:	e782      	b.n	800030e <__udivmoddi4+0x52>
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	2100      	movs	r1, #0
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	9100      	str	r1, [sp, #0]
 8000414:	9201      	str	r2, [sp, #4]
 8000416:	2201      	movs	r2, #1
 8000418:	40da      	lsrs	r2, r3
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	e785      	b.n	800032a <__udivmoddi4+0x6e>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	4646      	mov	r6, r8
 8000428:	409a      	lsls	r2, r3
 800042a:	0023      	movs	r3, r4
 800042c:	40f3      	lsrs	r3, r6
 800042e:	4644      	mov	r4, r8
 8000430:	4313      	orrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	dad4      	bge.n	80003ea <__udivmoddi4+0x12e>
 8000440:	4642      	mov	r2, r8
 8000442:	002f      	movs	r7, r5
 8000444:	2320      	movs	r3, #32
 8000446:	0026      	movs	r6, r4
 8000448:	4097      	lsls	r7, r2
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	40de      	lsrs	r6, r3
 800044e:	003b      	movs	r3, r7
 8000450:	4333      	orrs	r3, r6
 8000452:	e7cd      	b.n	80003f0 <__udivmoddi4+0x134>

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	@ (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			@ (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <shift_reg_pulse_srclk>:
	0b0010000000,	// 7
	0b0100000000,	// 8
	0b1000000000 	// 9
};

static void shift_reg_pulse_srclk(uint32_t delay_ms) {
 80004a8:	b510      	push	{r4, lr}
 80004aa:	0004      	movs	r4, r0
	SHIFT_REG_SET(1);
 80004ac:	2201      	movs	r2, #1
 80004ae:	2102      	movs	r1, #2
 80004b0:	480a      	ldr	r0, [pc, #40]	@ (80004dc <shift_reg_pulse_srclk+0x34>)
 80004b2:	f000 fff2 	bl	800149a <HAL_GPIO_WritePin>
	if (delay_ms > 0) HAL_Delay(delay_ms - 1);
 80004b6:	2c00      	cmp	r4, #0
 80004b8:	d107      	bne.n	80004ca <shift_reg_pulse_srclk+0x22>
	SHIFT_REG_SET(0);
 80004ba:	2200      	movs	r2, #0
 80004bc:	2102      	movs	r1, #2
 80004be:	4807      	ldr	r0, [pc, #28]	@ (80004dc <shift_reg_pulse_srclk+0x34>)
 80004c0:	f000 ffeb 	bl	800149a <HAL_GPIO_WritePin>
	if (delay_ms > 0) HAL_Delay(delay_ms - 1);
 80004c4:	2c00      	cmp	r4, #0
 80004c6:	d104      	bne.n	80004d2 <shift_reg_pulse_srclk+0x2a>
}
 80004c8:	bd10      	pop	{r4, pc}
	if (delay_ms > 0) HAL_Delay(delay_ms - 1);
 80004ca:	1e60      	subs	r0, r4, #1
 80004cc:	f000 feae 	bl	800122c <HAL_Delay>
 80004d0:	e7f3      	b.n	80004ba <shift_reg_pulse_srclk+0x12>
	if (delay_ms > 0) HAL_Delay(delay_ms - 1);
 80004d2:	1e60      	subs	r0, r4, #1
 80004d4:	f000 feaa 	bl	800122c <HAL_Delay>
}
 80004d8:	e7f6      	b.n	80004c8 <shift_reg_pulse_srclk+0x20>
 80004da:	46c0      	nop			@ (mov r8, r8)
 80004dc:	50000400 	.word	0x50000400

080004e0 <shift_reg_send>:
	if (delay_ms > 0) HAL_Delay(delay_ms - 1);
}


// data size is 16 bit, but only 10 are actually connected to a nixie lamp
static void shift_reg_send(uint16_t data) {
 80004e0:	b570      	push	{r4, r5, r6, lr}
 80004e2:	0005      	movs	r5, r0
	for (int8_t bit = 15; bit >= 0; --bit) {	// Send least significant bit first
 80004e4:	240f      	movs	r4, #15
 80004e6:	e00d      	b.n	8000504 <shift_reg_send+0x24>
		/*
		 * Push data into shift register
		 */
		DATA_SET((data >> bit) & 1);
 80004e8:	002b      	movs	r3, r5
 80004ea:	4123      	asrs	r3, r4
 80004ec:	2201      	movs	r2, #1
 80004ee:	401a      	ands	r2, r3
 80004f0:	20a0      	movs	r0, #160	@ 0xa0
 80004f2:	2140      	movs	r1, #64	@ 0x40
 80004f4:	05c0      	lsls	r0, r0, #23
 80004f6:	f000 ffd0 	bl	800149a <HAL_GPIO_WritePin>

		/*
		 * Set SER pin according to currently transmitted bit
		 * Toggle clock n times to set all N bits
		 */
		shift_reg_pulse_srclk(PULSE_DURATION_MS);
 80004fa:	2000      	movs	r0, #0
 80004fc:	f7ff ffd4 	bl	80004a8 <shift_reg_pulse_srclk>
	for (int8_t bit = 15; bit >= 0; --bit) {	// Send least significant bit first
 8000500:	3c01      	subs	r4, #1
 8000502:	b264      	sxtb	r4, r4
 8000504:	2c00      	cmp	r4, #0
 8000506:	daef      	bge.n	80004e8 <shift_reg_send+0x8>
	}
}
 8000508:	bd70      	pop	{r4, r5, r6, pc}
	...

0800050c <shift_reg_pulse_rclk>:
static void shift_reg_pulse_rclk(uint32_t delay_ms) {
 800050c:	b510      	push	{r4, lr}
 800050e:	0004      	movs	r4, r0
	STORAGE_REG_SET(1);
 8000510:	2201      	movs	r2, #1
 8000512:	2101      	movs	r1, #1
 8000514:	480a      	ldr	r0, [pc, #40]	@ (8000540 <shift_reg_pulse_rclk+0x34>)
 8000516:	f000 ffc0 	bl	800149a <HAL_GPIO_WritePin>
	if (delay_ms > 0) HAL_Delay(delay_ms - 1);
 800051a:	2c00      	cmp	r4, #0
 800051c:	d107      	bne.n	800052e <shift_reg_pulse_rclk+0x22>
	STORAGE_REG_SET(0);
 800051e:	2200      	movs	r2, #0
 8000520:	2101      	movs	r1, #1
 8000522:	4807      	ldr	r0, [pc, #28]	@ (8000540 <shift_reg_pulse_rclk+0x34>)
 8000524:	f000 ffb9 	bl	800149a <HAL_GPIO_WritePin>
	if (delay_ms > 0) HAL_Delay(delay_ms - 1);
 8000528:	2c00      	cmp	r4, #0
 800052a:	d104      	bne.n	8000536 <shift_reg_pulse_rclk+0x2a>
}
 800052c:	bd10      	pop	{r4, pc}
	if (delay_ms > 0) HAL_Delay(delay_ms - 1);
 800052e:	1e60      	subs	r0, r4, #1
 8000530:	f000 fe7c 	bl	800122c <HAL_Delay>
 8000534:	e7f3      	b.n	800051e <shift_reg_pulse_rclk+0x12>
	if (delay_ms > 0) HAL_Delay(delay_ms - 1);
 8000536:	1e60      	subs	r0, r4, #1
 8000538:	f000 fe78 	bl	800122c <HAL_Delay>
}
 800053c:	e7f6      	b.n	800052c <shift_reg_pulse_rclk+0x20>
 800053e:	46c0      	nop			@ (mov r8, r8)
 8000540:	50000400 	.word	0x50000400

08000544 <date_update>:
	rtc_time.Hours 		= DS3231_GetHour();
	rtc_time.Minutes 	= DS3231_GetMinute();
	rtc_time.Seconds 	= DS3231_GetSecond();
}

static void date_update(void) {
 8000544:	b510      	push	{r4, lr}
	rtc_date.Year 		= DS3231_GetYear();
 8000546:	f000 fdc3 	bl	80010d0 <DS3231_GetYear>
 800054a:	4c06      	ldr	r4, [pc, #24]	@ (8000564 <date_update+0x20>)
 800054c:	70e0      	strb	r0, [r4, #3]
	rtc_date.Month 		= DS3231_GetMonth();
 800054e:	f000 fdb6 	bl	80010be <DS3231_GetMonth>
 8000552:	7060      	strb	r0, [r4, #1]
	rtc_date.Date 		= DS3231_GetDate();
 8000554:	f000 fdac 	bl	80010b0 <DS3231_GetDate>
 8000558:	70a0      	strb	r0, [r4, #2]
	rtc_date.WeekDay 	= DS3231_GetDayOfWeek();
 800055a:	f000 fda2 	bl	80010a2 <DS3231_GetDayOfWeek>
 800055e:	7020      	strb	r0, [r4, #0]
}
 8000560:	bd10      	pop	{r4, pc}
 8000562:	46c0      	nop			@ (mov r8, r8)
 8000564:	200005a4 	.word	0x200005a4

08000568 <IN12_set_digits_separately>:
void IN12_set_digits_separately(uint8_t first_digit, uint8_t second_digit, uint8_t third_digit, uint8_t forth_digit) {
 8000568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800056a:	46ce      	mov	lr, r9
 800056c:	4647      	mov	r7, r8
 800056e:	b580      	push	{r7, lr}
 8000570:	4680      	mov	r8, r0
 8000572:	000f      	movs	r7, r1
 8000574:	0016      	movs	r6, r2
 8000576:	001d      	movs	r5, r3
	OUTPUT_DISABLE();
 8000578:	23a0      	movs	r3, #160	@ 0xa0
 800057a:	05db      	lsls	r3, r3, #23
 800057c:	4699      	mov	r9, r3
 800057e:	2201      	movs	r2, #1
 8000580:	2180      	movs	r1, #128	@ 0x80
 8000582:	0018      	movs	r0, r3
 8000584:	f000 ff89 	bl	800149a <HAL_GPIO_WritePin>
	uint16_t first_digit_data 	= digit_bitmask[first_digit];
 8000588:	4c10      	ldr	r4, [pc, #64]	@ (80005cc <IN12_set_digits_separately+0x64>)
 800058a:	4643      	mov	r3, r8
 800058c:	005b      	lsls	r3, r3, #1
 800058e:	5b1b      	ldrh	r3, [r3, r4]
 8000590:	4698      	mov	r8, r3
	uint16_t second_digit_data 	= digit_bitmask[second_digit];
 8000592:	007f      	lsls	r7, r7, #1
 8000594:	5b3f      	ldrh	r7, [r7, r4]
	uint16_t third_digit_data 	= digit_bitmask[third_digit];
 8000596:	0076      	lsls	r6, r6, #1
 8000598:	5b36      	ldrh	r6, [r6, r4]
	uint16_t forth_digit_data 	= digit_bitmask[forth_digit];
 800059a:	006d      	lsls	r5, r5, #1
 800059c:	5b28      	ldrh	r0, [r5, r4]
	shift_reg_send(forth_digit_data);
 800059e:	f7ff ff9f 	bl	80004e0 <shift_reg_send>
	shift_reg_send(third_digit_data);
 80005a2:	0030      	movs	r0, r6
 80005a4:	f7ff ff9c 	bl	80004e0 <shift_reg_send>
	shift_reg_send(second_digit_data);
 80005a8:	0038      	movs	r0, r7
 80005aa:	f7ff ff99 	bl	80004e0 <shift_reg_send>
	shift_reg_send(first_digit_data);
 80005ae:	4640      	mov	r0, r8
 80005b0:	f7ff ff96 	bl	80004e0 <shift_reg_send>
	shift_reg_pulse_rclk(PULSE_DURATION_MS);
 80005b4:	2000      	movs	r0, #0
 80005b6:	f7ff ffa9 	bl	800050c <shift_reg_pulse_rclk>
	OUTPUT_ENABLE();
 80005ba:	2200      	movs	r2, #0
 80005bc:	2180      	movs	r1, #128	@ 0x80
 80005be:	4648      	mov	r0, r9
 80005c0:	f000 ff6b 	bl	800149a <HAL_GPIO_WritePin>
}
 80005c4:	bcc0      	pop	{r6, r7}
 80005c6:	46b9      	mov	r9, r7
 80005c8:	46b0      	mov	r8, r6
 80005ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80005cc:	20000000 	.word	0x20000000

080005d0 <IN12_set_digit_pairs>:
void IN12_set_digit_pairs(uint16_t first_number, uint16_t second_number) {
 80005d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005d2:	0004      	movs	r4, r0
 80005d4:	000d      	movs	r5, r1
	IN12_set_digits_separately(first_number/10, first_number%10, second_number/10, second_number%10);
 80005d6:	210a      	movs	r1, #10
 80005d8:	0028      	movs	r0, r5
 80005da:	f7ff fe1b 	bl	8000214 <__aeabi_uidivmod>
 80005de:	b2cf      	uxtb	r7, r1
 80005e0:	210a      	movs	r1, #10
 80005e2:	0028      	movs	r0, r5
 80005e4:	f7ff fd90 	bl	8000108 <__udivsi3>
 80005e8:	b2c6      	uxtb	r6, r0
 80005ea:	210a      	movs	r1, #10
 80005ec:	0020      	movs	r0, r4
 80005ee:	f7ff fe11 	bl	8000214 <__aeabi_uidivmod>
 80005f2:	b2cd      	uxtb	r5, r1
 80005f4:	210a      	movs	r1, #10
 80005f6:	0020      	movs	r0, r4
 80005f8:	f7ff fd86 	bl	8000108 <__udivsi3>
 80005fc:	b2c0      	uxtb	r0, r0
 80005fe:	003b      	movs	r3, r7
 8000600:	0032      	movs	r2, r6
 8000602:	0029      	movs	r1, r5
 8000604:	f7ff ffb0 	bl	8000568 <IN12_set_digits_separately>
}
 8000608:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800060c <time_update>:
void time_update(void) {
 800060c:	b510      	push	{r4, lr}
	rtc_time.Hours 		= DS3231_GetHour();
 800060e:	f000 fd76 	bl	80010fe <DS3231_GetHour>
 8000612:	4c04      	ldr	r4, [pc, #16]	@ (8000624 <time_update+0x18>)
 8000614:	7020      	strb	r0, [r4, #0]
	rtc_time.Minutes 	= DS3231_GetMinute();
 8000616:	f000 fd79 	bl	800110c <DS3231_GetMinute>
 800061a:	7060      	strb	r0, [r4, #1]
	rtc_time.Seconds 	= DS3231_GetSecond();
 800061c:	f000 fd7d 	bl	800111a <DS3231_GetSecond>
 8000620:	70a0      	strb	r0, [r4, #2]
}
 8000622:	bd10      	pop	{r4, pc}
 8000624:	200005a8 	.word	0x200005a8

08000628 <IN12_init>:

void IN12_init(void) {
 8000628:	b510      	push	{r4, lr}
	if(DS3231_IsOscillatorStopped()) {
 800062a:	f000 fd29 	bl	8001080 <DS3231_IsOscillatorStopped>
 800062e:	2800      	cmp	r0, #0
 8000630:	d104      	bne.n	800063c <IN12_init+0x14>
		// todo: go to the "time set mode" automaticaly
		DS3231_SetFullTime(12, 34, 56);
		DS3231_EnableOscillator(DS3231_ENABLED);
	}

	time_update();
 8000632:	f7ff ffeb 	bl	800060c <time_update>
	date_update();
 8000636:	f7ff ff85 	bl	8000544 <date_update>
}
 800063a:	bd10      	pop	{r4, pc}
		DS3231_SetFullTime(12, 34, 56);
 800063c:	2238      	movs	r2, #56	@ 0x38
 800063e:	2122      	movs	r1, #34	@ 0x22
 8000640:	200c      	movs	r0, #12
 8000642:	f000 fd99 	bl	8001178 <DS3231_SetFullTime>
		DS3231_EnableOscillator(DS3231_ENABLED);
 8000646:	2001      	movs	r0, #1
 8000648:	f000 fcb5 	bl	8000fb6 <DS3231_EnableOscillator>
 800064c:	e7f1      	b.n	8000632 <IN12_init+0xa>

0800064e <btns_state_set>:
/*
 * Define current state (usually power button is pressed when this function is called)
 *
 */
static void btns_state_set(Buttons_HandleTypeDef *hbtns, State_TypeDef new_state) {
	hbtns->pressed_btns_mask	= 0; 			// Reset buttons mask
 800064e:	23f1      	movs	r3, #241	@ 0xf1
 8000650:	005b      	lsls	r3, r3, #1
 8000652:	2200      	movs	r2, #0
 8000654:	52c2      	strh	r2, [r0, r3]
	hbtns->state_current		= new_state;
 8000656:	3302      	adds	r3, #2
 8000658:	54c1      	strb	r1, [r0, r3]
	hbtns->state_previous		= new_state;
 800065a:	23e6      	movs	r3, #230	@ 0xe6
 800065c:	33ff      	adds	r3, #255	@ 0xff
 800065e:	54c1      	strb	r1, [r0, r3]
	hbtns->hold_s		= 0;
 8000660:	3301      	adds	r3, #1
 8000662:	54c2      	strb	r2, [r0, r3]
}
 8000664:	4770      	bx	lr

08000666 <btns_state_get>:
static void btns_state_get(Buttons_HandleTypeDef *hbtns) {
 8000666:	b570      	push	{r4, r5, r6, lr}
 8000668:	0006      	movs	r6, r0
	hbtns->state_current = RELEASED;
 800066a:	23f2      	movs	r3, #242	@ 0xf2
 800066c:	005b      	lsls	r3, r3, #1
 800066e:	2200      	movs	r2, #0
 8000670:	54c2      	strb	r2, [r0, r3]
	for(int i = 0; i < hbtns->num_of_buttons; ++i) {
 8000672:	2500      	movs	r5, #0
 8000674:	e000      	b.n	8000678 <btns_state_get+0x12>
 8000676:	3501      	adds	r5, #1
 8000678:	23f0      	movs	r3, #240	@ 0xf0
 800067a:	005b      	lsls	r3, r3, #1
 800067c:	5cf3      	ldrb	r3, [r6, r3]
 800067e:	42ab      	cmp	r3, r5
 8000680:	dd13      	ble.n	80006aa <btns_state_get+0x44>
		gpio_state = HAL_GPIO_ReadPin(hbtns->list[i].port, hbtns->list[i].pin);
 8000682:	016c      	lsls	r4, r5, #5
 8000684:	1934      	adds	r4, r6, r4
 8000686:	8ba1      	ldrh	r1, [r4, #28]
 8000688:	69a0      	ldr	r0, [r4, #24]
 800068a:	f000 feff 	bl	800148c <HAL_GPIO_ReadPin>
		if(gpio_state == hbtns->list[i].state_active) {
 800068e:	7fa3      	ldrb	r3, [r4, #30]
 8000690:	4283      	cmp	r3, r0
 8000692:	d1f0      	bne.n	8000676 <btns_state_get+0x10>
			hbtns->pressed_btns_mask |= hbtns->list[i].mask;
 8000694:	21f1      	movs	r1, #241	@ 0xf1
 8000696:	0049      	lsls	r1, r1, #1
 8000698:	5a73      	ldrh	r3, [r6, r1]
 800069a:	8aa2      	ldrh	r2, [r4, #20]
 800069c:	4313      	orrs	r3, r2
 800069e:	5273      	strh	r3, [r6, r1]
			hbtns->state_current = PRESSED;
 80006a0:	23f2      	movs	r3, #242	@ 0xf2
 80006a2:	005b      	lsls	r3, r3, #1
 80006a4:	2201      	movs	r2, #1
 80006a6:	54f2      	strb	r2, [r6, r3]
 80006a8:	e7e5      	b.n	8000676 <btns_state_get+0x10>
}
 80006aa:	bd70      	pop	{r4, r5, r6, pc}

080006ac <btns_timer_start>:

static HAL_StatusTypeDef btns_timer_start(Buttons_HandleTypeDef *hbtns) {
 80006ac:	b510      	push	{r4, lr}
 80006ae:	0004      	movs	r4, r0
	HAL_TIM_StateTypeDef timer_status = HAL_TIM_Base_GetState(hbtns->htim);
 80006b0:	23f4      	movs	r3, #244	@ 0xf4
 80006b2:	005b      	lsls	r3, r3, #1
 80006b4:	58c0      	ldr	r0, [r0, r3]
 80006b6:	f002 fa5c 	bl	8002b72 <HAL_TIM_Base_GetState>

	/*
	 * Start the timer if it hasn't been started yet
	 */
	if (timer_status == HAL_TIM_STATE_READY) {
 80006ba:	2801      	cmp	r0, #1
 80006bc:	d000      	beq.n	80006c0 <btns_timer_start+0x14>
		FIX_TIMER_TRIGGER(hbtns->htim);
		timer_status = HAL_TIM_Base_Start_IT(hbtns->htim);
	}

	return (HAL_StatusTypeDef)timer_status;
}
 80006be:	bd10      	pop	{r4, pc}
		FIX_TIMER_TRIGGER(hbtns->htim);
 80006c0:	23f4      	movs	r3, #244	@ 0xf4
 80006c2:	005b      	lsls	r3, r3, #1
 80006c4:	58e2      	ldr	r2, [r4, r3]
 80006c6:	6812      	ldr	r2, [r2, #0]
 80006c8:	2102      	movs	r1, #2
 80006ca:	4249      	negs	r1, r1
 80006cc:	6111      	str	r1, [r2, #16]
		timer_status = HAL_TIM_Base_Start_IT(hbtns->htim);
 80006ce:	58e0      	ldr	r0, [r4, r3]
 80006d0:	f002 f906 	bl	80028e0 <HAL_TIM_Base_Start_IT>
 80006d4:	e7f3      	b.n	80006be <btns_timer_start+0x12>
	...

080006d8 <btns_init>:


/*
 * @brief	Set defaults, add timer handle and start it
 */
HAL_StatusTypeDef btns_init(Buttons_HandleTypeDef *hbtns, Button_InitTypeDef user_buttons[], uint8_t num_of_buttons, TIM_HandleTypeDef *htim, State_TypeDef default_state) {
 80006d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006da:	46d6      	mov	lr, sl
 80006dc:	464f      	mov	r7, r9
 80006de:	4646      	mov	r6, r8
 80006e0:	b5c0      	push	{r6, r7, lr}
 80006e2:	0007      	movs	r7, r0
 80006e4:	4689      	mov	r9, r1
 80006e6:	4690      	mov	r8, r2
 80006e8:	aa08      	add	r2, sp, #32
 80006ea:	7812      	ldrb	r2, [r2, #0]
 80006ec:	4692      	mov	sl, r2
	assert_param(hbtns 			== NULL);
	assert_param(user_buttons 	== NULL);
	assert_param(htim 			== NULL);

	if(num_of_buttons > MAX_NUMBER_OF_BUTTONS)
 80006ee:	4642      	mov	r2, r8
 80006f0:	2a0f      	cmp	r2, #15
 80006f2:	d837      	bhi.n	8000764 <btns_init+0x8c>
		return HAL_ERROR;

	hbtns->num_of_buttons	= num_of_buttons;
 80006f4:	22f0      	movs	r2, #240	@ 0xf0
 80006f6:	0052      	lsls	r2, r2, #1
 80006f8:	4641      	mov	r1, r8
 80006fa:	5481      	strb	r1, [r0, r2]
	hbtns->htim 			= htim;										// Set dedicated to buttons timer
 80006fc:	3208      	adds	r2, #8
 80006fe:	5083      	str	r3, [r0, r2]

	/*
	 * Register button parameters and fill additional fields
	 */
	for(int id = 0; id < num_of_buttons; ++id) {
 8000700:	2600      	movs	r6, #0
 8000702:	e017      	b.n	8000734 <btns_init+0x5c>
		strcpy(hbtns->list[id].name, user_buttons[id].name);		// Copy name
 8000704:	0175      	lsls	r5, r6, #5
 8000706:	197d      	adds	r5, r7, r5
 8000708:	00f4      	lsls	r4, r6, #3
 800070a:	1ba4      	subs	r4, r4, r6
 800070c:	00a4      	lsls	r4, r4, #2
 800070e:	444c      	add	r4, r9
 8000710:	0021      	movs	r1, r4
 8000712:	0028      	movs	r0, r5
 8000714:	f002 fd48 	bl	80031a8 <strcpy>
		hbtns->list[id].mask			= 1 << id;					// Create unique bitmask
 8000718:	2301      	movs	r3, #1
 800071a:	40b3      	lsls	r3, r6
 800071c:	82ab      	strh	r3, [r5, #20]
		hbtns->list[id].port 			= user_buttons[id].port;
 800071e:	6963      	ldr	r3, [r4, #20]
 8000720:	61ab      	str	r3, [r5, #24]
		hbtns->list[id].pin 			= user_buttons[id].pin;
 8000722:	8b23      	ldrh	r3, [r4, #24]
 8000724:	83ab      	strh	r3, [r5, #28]
		hbtns->list[id].state_active 	= user_buttons[id].state_active;
 8000726:	7ea3      	ldrb	r3, [r4, #26]
 8000728:	77ab      	strb	r3, [r5, #30]
		hbtns->list[id].state 			= user_buttons[id].state_active == GPIO_PIN_SET ? GPIO_PIN_RESET : GPIO_PIN_SET; // By default lvl_en is opposite of active
 800072a:	3b01      	subs	r3, #1
 800072c:	1e5a      	subs	r2, r3, #1
 800072e:	4193      	sbcs	r3, r2
 8000730:	77eb      	strb	r3, [r5, #31]
	for(int id = 0; id < num_of_buttons; ++id) {
 8000732:	3601      	adds	r6, #1
 8000734:	45b0      	cmp	r8, r6
 8000736:	dce5      	bgt.n	8000704 <btns_init+0x2c>

	/*
	 * Set default state to prevent false detection on start.
	 * For example, when buttons are initialized with power button pressed.
	 */
	btns_state_set(hbtns, default_state);
 8000738:	4651      	mov	r1, sl
 800073a:	0038      	movs	r0, r7
 800073c:	f7ff ff87 	bl	800064e <btns_state_set>

	/*
	 * Set max count for long presses, e.g. 1000ms/50ms = 20
	 */
	hold_1s_cnt 	= 1000/hbtns->htim->Init.Period;
 8000740:	23f4      	movs	r3, #244	@ 0xf4
 8000742:	005b      	lsls	r3, r3, #1
 8000744:	58fb      	ldr	r3, [r7, r3]
 8000746:	68d9      	ldr	r1, [r3, #12]
 8000748:	20fa      	movs	r0, #250	@ 0xfa
 800074a:	0080      	lsls	r0, r0, #2
 800074c:	f7ff fcdc 	bl	8000108 <__udivsi3>
 8000750:	4b05      	ldr	r3, [pc, #20]	@ (8000768 <btns_init+0x90>)
 8000752:	7018      	strb	r0, [r3, #0]
//	hold_10s_count 			= 10000/hbtns->htim->Init.Period;

	/*
	 * Start the timer
	 */
	return btns_timer_start(hbtns);
 8000754:	0038      	movs	r0, r7
 8000756:	f7ff ffa9 	bl	80006ac <btns_timer_start>
}
 800075a:	bce0      	pop	{r5, r6, r7}
 800075c:	46ba      	mov	sl, r7
 800075e:	46b1      	mov	r9, r6
 8000760:	46a8      	mov	r8, r5
 8000762:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return HAL_ERROR;
 8000764:	2001      	movs	r0, #1
 8000766:	e7f8      	b.n	800075a <btns_init+0x82>
 8000768:	200005c4 	.word	0x200005c4

0800076c <btns_check>:
void btns_check(Buttons_HandleTypeDef *hbtns) {
 800076c:	b510      	push	{r4, lr}
 800076e:	0004      	movs	r4, r0
	btns_state_get(hbtns);
 8000770:	f7ff ff79 	bl	8000666 <btns_state_get>
	if (hbtns->state_current != hbtns->state_previous) {
 8000774:	23f2      	movs	r3, #242	@ 0xf2
 8000776:	005b      	lsls	r3, r3, #1
 8000778:	5ce3      	ldrb	r3, [r4, r3]
 800077a:	22e6      	movs	r2, #230	@ 0xe6
 800077c:	32ff      	adds	r2, #255	@ 0xff
 800077e:	5ca2      	ldrb	r2, [r4, r2]
 8000780:	4293      	cmp	r3, r2
 8000782:	d015      	beq.n	80007b0 <btns_check+0x44>
		if (hbtns->state_current == PRESSED) {
 8000784:	2b01      	cmp	r3, #1
 8000786:	d009      	beq.n	800079c <btns_check+0x30>
			if (hbtns->hold_s < 2) {
 8000788:	23f3      	movs	r3, #243	@ 0xf3
 800078a:	005b      	lsls	r3, r3, #1
 800078c:	5ce1      	ldrb	r1, [r4, r3]
 800078e:	2901      	cmp	r1, #1
 8000790:	d909      	bls.n	80007a6 <btns_check+0x3a>
			btns_state_set(hbtns, RELEASED);
 8000792:	2100      	movs	r1, #0
 8000794:	0020      	movs	r0, r4
 8000796:	f7ff ff5a 	bl	800064e <btns_state_set>
}
 800079a:	bd10      	pop	{r4, pc}
			btns_state_set(hbtns, PRESSED);
 800079c:	2101      	movs	r1, #1
 800079e:	0020      	movs	r0, r4
 80007a0:	f7ff ff55 	bl	800064e <btns_state_set>
 80007a4:	e7f9      	b.n	800079a <btns_check+0x2e>
				btns_callback(hbtns->pressed_btns_mask, hbtns->hold_s);
 80007a6:	3b04      	subs	r3, #4
 80007a8:	5ae0      	ldrh	r0, [r4, r3]
 80007aa:	f000 f815 	bl	80007d8 <btns_callback>
 80007ae:	e7f0      	b.n	8000792 <btns_check+0x26>
		if(hbtns->state_previous == PRESSED) {
 80007b0:	2a01      	cmp	r2, #1
 80007b2:	d1f2      	bne.n	800079a <btns_check+0x2e>
			if(++cnt > hold_1s_cnt) {
 80007b4:	4b07      	ldr	r3, [pc, #28]	@ (80007d4 <btns_check+0x68>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d1ee      	bne.n	800079a <btns_check+0x2e>
				++hbtns->hold_s;
 80007bc:	33e7      	adds	r3, #231	@ 0xe7
 80007be:	33ff      	adds	r3, #255	@ 0xff
 80007c0:	5ce1      	ldrb	r1, [r4, r3]
 80007c2:	3101      	adds	r1, #1
 80007c4:	b2c9      	uxtb	r1, r1
 80007c6:	54e1      	strb	r1, [r4, r3]
				btns_callback(hbtns->pressed_btns_mask, hbtns->hold_s);
 80007c8:	3b04      	subs	r3, #4
 80007ca:	5ae0      	ldrh	r0, [r4, r3]
 80007cc:	f000 f804 	bl	80007d8 <btns_callback>
}
 80007d0:	e7e3      	b.n	800079a <btns_check+0x2e>
 80007d2:	46c0      	nop			@ (mov r8, r8)
 80007d4:	200005c4 	.word	0x200005c4

080007d8 <btns_callback>:
extern Buttons_HandleTypeDef 	hbtns;

void btns_callback(uint16_t mask, PressType_TypeDef press_type)
{

	shared_mask 		= mask;
 80007d8:	4b02      	ldr	r3, [pc, #8]	@ (80007e4 <btns_callback+0xc>)
 80007da:	6018      	str	r0, [r3, #0]
	shared_press_type 	= press_type;
 80007dc:	4b02      	ldr	r3, [pc, #8]	@ (80007e8 <btns_callback+0x10>)
 80007de:	6019      	str	r1, [r3, #0]
//	case MASK_RIGHT:
//		break;
//
//	default: break;
//	}
}
 80007e0:	4770      	bx	lr
 80007e2:	46c0      	nop			@ (mov r8, r8)
 80007e4:	200005c0 	.word	0x200005c0
 80007e8:	200005bc 	.word	0x200005bc

080007ec <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007ec:	b510      	push	{r4, lr}




  }
  if(htim == hbtns.htim) {
 80007ee:	4b05      	ldr	r3, [pc, #20]	@ (8000804 <HAL_TIM_PeriodElapsedCallback+0x18>)
 80007f0:	22f4      	movs	r2, #244	@ 0xf4
 80007f2:	0052      	lsls	r2, r2, #1
 80007f4:	589b      	ldr	r3, [r3, r2]
 80007f6:	4283      	cmp	r3, r0
 80007f8:	d000      	beq.n	80007fc <HAL_TIM_PeriodElapsedCallback+0x10>
	  btns_check(&hbtns);
  }
}
 80007fa:	bd10      	pop	{r4, pc}
	  btns_check(&hbtns);
 80007fc:	4801      	ldr	r0, [pc, #4]	@ (8000804 <HAL_TIM_PeriodElapsedCallback+0x18>)
 80007fe:	f7ff ffb5 	bl	800076c <btns_check>
}
 8000802:	e7fa      	b.n	80007fa <HAL_TIM_PeriodElapsedCallback+0xe>
 8000804:	200005c8 	.word	0x200005c8

08000808 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000808:	b5f0      	push	{r4, r5, r6, r7, lr}
 800080a:	46ce      	mov	lr, r9
 800080c:	4647      	mov	r7, r8
 800080e:	b580      	push	{r7, lr}
 8000810:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000812:	2214      	movs	r2, #20
 8000814:	2100      	movs	r1, #0
 8000816:	a803      	add	r0, sp, #12
 8000818:	f002 fc9a 	bl	8003150 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800081c:	4b3a      	ldr	r3, [pc, #232]	@ (8000908 <MX_GPIO_Init+0x100>)
 800081e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000820:	2204      	movs	r2, #4
 8000822:	4311      	orrs	r1, r2
 8000824:	62d9      	str	r1, [r3, #44]	@ 0x2c
 8000826:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000828:	400a      	ands	r2, r1
 800082a:	9200      	str	r2, [sp, #0]
 800082c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800082e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000830:	2501      	movs	r5, #1
 8000832:	432a      	orrs	r2, r5
 8000834:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000836:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000838:	402a      	ands	r2, r5
 800083a:	9201      	str	r2, [sp, #4]
 800083c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800083e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000840:	2702      	movs	r7, #2
 8000842:	433a      	orrs	r2, r7
 8000844:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000848:	403b      	ands	r3, r7
 800084a:	9302      	str	r3, [sp, #8]
 800084c:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DIMM_LED_1_Pin|DIMM_LED_2_Pin, GPIO_PIN_RESET);
 800084e:	24c0      	movs	r4, #192	@ 0xc0
 8000850:	0224      	lsls	r4, r4, #8
 8000852:	4b2e      	ldr	r3, [pc, #184]	@ (800090c <MX_GPIO_Init+0x104>)
 8000854:	4699      	mov	r9, r3
 8000856:	2200      	movs	r2, #0
 8000858:	0021      	movs	r1, r4
 800085a:	0018      	movs	r0, r3
 800085c:	f000 fe1d 	bl	800149a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TXS_OE_GPIO_Port, TXS_OE_Pin, GPIO_PIN_SET);
 8000860:	26a0      	movs	r6, #160	@ 0xa0
 8000862:	05f6      	lsls	r6, r6, #23
 8000864:	2201      	movs	r2, #1
 8000866:	2102      	movs	r1, #2
 8000868:	0030      	movs	r0, r6
 800086a:	f000 fe16 	bl	800149a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SHDN_170V_3V3_Pin|INS_EN_3V3_Pin|DIN_3V3_Pin|OE_3V3_Pin, GPIO_PIN_RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	21f0      	movs	r1, #240	@ 0xf0
 8000872:	0030      	movs	r0, r6
 8000874:	f000 fe11 	bl	800149a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RCK_3V3_Pin|SCK_3V3_Pin, GPIO_PIN_RESET);
 8000878:	4b25      	ldr	r3, [pc, #148]	@ (8000910 <MX_GPIO_Init+0x108>)
 800087a:	4698      	mov	r8, r3
 800087c:	2200      	movs	r2, #0
 800087e:	2103      	movs	r1, #3
 8000880:	0018      	movs	r0, r3
 8000882:	f000 fe0a 	bl	800149a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIMM_LED_1_Pin DIMM_LED_2_Pin */
  GPIO_InitStruct.Pin = DIMM_LED_1_Pin|DIMM_LED_2_Pin;
 8000886:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000888:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2400      	movs	r4, #0
 800088c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088e:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000890:	a903      	add	r1, sp, #12
 8000892:	4648      	mov	r0, r9
 8000894:	f000 fd3c 	bl	8001310 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_4_Pin INT_SQW_Pin INT_OPT_Pin JDY_STAT_Pin
                           JDY_PWRC_Pin */
  GPIO_InitStruct.Pin = BTN_4_Pin|INT_SQW_Pin|INT_OPT_Pin|JDY_STAT_Pin
 8000898:	4b1e      	ldr	r3, [pc, #120]	@ (8000914 <MX_GPIO_Init+0x10c>)
 800089a:	9303      	str	r3, [sp, #12]
                          |JDY_PWRC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800089c:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a0:	a903      	add	r1, sp, #12
 80008a2:	0030      	movs	r0, r6
 80008a4:	f000 fd34 	bl	8001310 <HAL_GPIO_Init>

  /*Configure GPIO pin : TXS_OE_Pin */
  GPIO_InitStruct.Pin = TXS_OE_Pin;
 80008a8:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008aa:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008ac:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ae:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(TXS_OE_GPIO_Port, &GPIO_InitStruct);
 80008b0:	a903      	add	r1, sp, #12
 80008b2:	0030      	movs	r0, r6
 80008b4:	f000 fd2c 	bl	8001310 <HAL_GPIO_Init>

  /*Configure GPIO pin : SHDN_170V_3V3_Pin */
  GPIO_InitStruct.Pin = SHDN_170V_3V3_Pin;
 80008b8:	2310      	movs	r3, #16
 80008ba:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008bc:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008be:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c0:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(SHDN_170V_3V3_GPIO_Port, &GPIO_InitStruct);
 80008c2:	a903      	add	r1, sp, #12
 80008c4:	0030      	movs	r0, r6
 80008c6:	f000 fd23 	bl	8001310 <HAL_GPIO_Init>

  /*Configure GPIO pins : INS_EN_3V3_Pin DIN_3V3_Pin OE_3V3_Pin */
  GPIO_InitStruct.Pin = INS_EN_3V3_Pin|DIN_3V3_Pin|OE_3V3_Pin;
 80008ca:	23e0      	movs	r3, #224	@ 0xe0
 80008cc:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ce:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d2:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d4:	a903      	add	r1, sp, #12
 80008d6:	0030      	movs	r0, r6
 80008d8:	f000 fd1a 	bl	8001310 <HAL_GPIO_Init>

  /*Configure GPIO pins : RCK_3V3_Pin SCK_3V3_Pin */
  GPIO_InitStruct.Pin = RCK_3V3_Pin|SCK_3V3_Pin;
 80008dc:	2303      	movs	r3, #3
 80008de:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e0:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e4:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e6:	a903      	add	r1, sp, #12
 80008e8:	4640      	mov	r0, r8
 80008ea:	f000 fd11 	bl	8001310 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_3_Pin BTN_2_Pin BTN_1_Pin */
  GPIO_InitStruct.Pin = BTN_3_Pin|BTN_2_Pin|BTN_1_Pin;
 80008ee:	2338      	movs	r3, #56	@ 0x38
 80008f0:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f2:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f6:	a903      	add	r1, sp, #12
 80008f8:	4640      	mov	r0, r8
 80008fa:	f000 fd09 	bl	8001310 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008fe:	b009      	add	sp, #36	@ 0x24
 8000900:	bcc0      	pop	{r6, r7}
 8000902:	46b9      	mov	r9, r7
 8000904:	46b0      	mov	r8, r6
 8000906:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000908:	40021000 	.word	0x40021000
 800090c:	50000800 	.word	0x50000800
 8000910:	50000400 	.word	0x50000400
 8000914:	00009901 	.word	0x00009901

08000918 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000918:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800091a:	e7fe      	b.n	800091a <Error_Handler+0x2>

0800091c <MX_I2C1_Init>:
{
 800091c:	b510      	push	{r4, lr}
  hi2c1.Instance = I2C1;
 800091e:	4812      	ldr	r0, [pc, #72]	@ (8000968 <MX_I2C1_Init+0x4c>)
 8000920:	4b12      	ldr	r3, [pc, #72]	@ (800096c <MX_I2C1_Init+0x50>)
 8000922:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000924:	4b12      	ldr	r3, [pc, #72]	@ (8000970 <MX_I2C1_Init+0x54>)
 8000926:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000928:	2300      	movs	r3, #0
 800092a:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800092c:	2201      	movs	r2, #1
 800092e:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000930:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000932:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000934:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000936:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000938:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800093a:	f000 ff4d 	bl	80017d8 <HAL_I2C_Init>
 800093e:	2800      	cmp	r0, #0
 8000940:	d10c      	bne.n	800095c <MX_I2C1_Init+0x40>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000942:	4809      	ldr	r0, [pc, #36]	@ (8000968 <MX_I2C1_Init+0x4c>)
 8000944:	2100      	movs	r1, #0
 8000946:	f001 f921 	bl	8001b8c <HAL_I2CEx_ConfigAnalogFilter>
 800094a:	2800      	cmp	r0, #0
 800094c:	d108      	bne.n	8000960 <MX_I2C1_Init+0x44>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800094e:	4806      	ldr	r0, [pc, #24]	@ (8000968 <MX_I2C1_Init+0x4c>)
 8000950:	2100      	movs	r1, #0
 8000952:	f001 f947 	bl	8001be4 <HAL_I2CEx_ConfigDigitalFilter>
 8000956:	2800      	cmp	r0, #0
 8000958:	d104      	bne.n	8000964 <MX_I2C1_Init+0x48>
}
 800095a:	bd10      	pop	{r4, pc}
    Error_Handler();
 800095c:	f7ff ffdc 	bl	8000918 <Error_Handler>
    Error_Handler();
 8000960:	f7ff ffda 	bl	8000918 <Error_Handler>
    Error_Handler();
 8000964:	f7ff ffd8 	bl	8000918 <Error_Handler>
 8000968:	200009a8 	.word	0x200009a8
 800096c:	40005400 	.word	0x40005400
 8000970:	00707cbb 	.word	0x00707cbb

08000974 <MX_LPUART1_UART_Init>:
{
 8000974:	b510      	push	{r4, lr}
  hlpuart1.Instance = LPUART1;
 8000976:	480b      	ldr	r0, [pc, #44]	@ (80009a4 <MX_LPUART1_UART_Init+0x30>)
 8000978:	4b0b      	ldr	r3, [pc, #44]	@ (80009a8 <MX_LPUART1_UART_Init+0x34>)
 800097a:	6003      	str	r3, [r0, #0]
  hlpuart1.Init.BaudRate = 209700;
 800097c:	4b0b      	ldr	r3, [pc, #44]	@ (80009ac <MX_LPUART1_UART_Init+0x38>)
 800097e:	6043      	str	r3, [r0, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8000980:	2380      	movs	r3, #128	@ 0x80
 8000982:	055b      	lsls	r3, r3, #21
 8000984:	6083      	str	r3, [r0, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000986:	2300      	movs	r3, #0
 8000988:	60c3      	str	r3, [r0, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800098a:	6103      	str	r3, [r0, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800098c:	220c      	movs	r2, #12
 800098e:	6142      	str	r2, [r0, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000990:	6183      	str	r3, [r0, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000992:	6203      	str	r3, [r0, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000994:	6243      	str	r3, [r0, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000996:	f002 fba5 	bl	80030e4 <HAL_UART_Init>
 800099a:	2800      	cmp	r0, #0
 800099c:	d100      	bne.n	80009a0 <MX_LPUART1_UART_Init+0x2c>
}
 800099e:	bd10      	pop	{r4, pc}
    Error_Handler();
 80009a0:	f7ff ffba 	bl	8000918 <Error_Handler>
 80009a4:	200008f0 	.word	0x200008f0
 80009a8:	40004800 	.word	0x40004800
 80009ac:	00033324 	.word	0x00033324

080009b0 <MX_USART2_UART_Init>:
{
 80009b0:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 80009b2:	480b      	ldr	r0, [pc, #44]	@ (80009e0 <MX_USART2_UART_Init+0x30>)
 80009b4:	4b0b      	ldr	r3, [pc, #44]	@ (80009e4 <MX_USART2_UART_Init+0x34>)
 80009b6:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 80009b8:	23e1      	movs	r3, #225	@ 0xe1
 80009ba:	025b      	lsls	r3, r3, #9
 80009bc:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009be:	2300      	movs	r3, #0
 80009c0:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009c2:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009c4:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009c6:	220c      	movs	r2, #12
 80009c8:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ca:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009cc:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ce:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009d0:	6243      	str	r3, [r0, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009d2:	f002 fb87 	bl	80030e4 <HAL_UART_Init>
 80009d6:	2800      	cmp	r0, #0
 80009d8:	d100      	bne.n	80009dc <MX_USART2_UART_Init+0x2c>
}
 80009da:	bd10      	pop	{r4, pc}
    Error_Handler();
 80009dc:	f7ff ff9c 	bl	8000918 <Error_Handler>
 80009e0:	20000868 	.word	0x20000868
 80009e4:	40004400 	.word	0x40004400

080009e8 <MX_RTC_Init>:
{
 80009e8:	b510      	push	{r4, lr}
  hrtc.Instance = RTC;
 80009ea:	480a      	ldr	r0, [pc, #40]	@ (8000a14 <MX_RTC_Init+0x2c>)
 80009ec:	4b0a      	ldr	r3, [pc, #40]	@ (8000a18 <MX_RTC_Init+0x30>)
 80009ee:	6003      	str	r3, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80009f0:	2300      	movs	r3, #0
 80009f2:	6043      	str	r3, [r0, #4]
  hrtc.Init.AsynchPrediv = 127;
 80009f4:	227f      	movs	r2, #127	@ 0x7f
 80009f6:	6082      	str	r2, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 80009f8:	3280      	adds	r2, #128	@ 0x80
 80009fa:	60c2      	str	r2, [r0, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80009fc:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80009fe:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000a00:	6183      	str	r3, [r0, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000a02:	61c3      	str	r3, [r0, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000a04:	f001 fe88 	bl	8002718 <HAL_RTC_Init>
 8000a08:	2800      	cmp	r0, #0
 8000a0a:	d100      	bne.n	8000a0e <MX_RTC_Init+0x26>
}
 8000a0c:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000a0e:	f7ff ff83 	bl	8000918 <Error_Handler>
 8000a12:	46c0      	nop			@ (mov r8, r8)
 8000a14:	20000844 	.word	0x20000844
 8000a18:	40002800 	.word	0x40002800

08000a1c <MX_TIM21_Init>:
{
 8000a1c:	b500      	push	{lr}
 8000a1e:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a20:	2210      	movs	r2, #16
 8000a22:	2100      	movs	r1, #0
 8000a24:	a802      	add	r0, sp, #8
 8000a26:	f002 fb93 	bl	8003150 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a2a:	2208      	movs	r2, #8
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	4668      	mov	r0, sp
 8000a30:	f002 fb8e 	bl	8003150 <memset>
  htim21.Instance = TIM21;
 8000a34:	4814      	ldr	r0, [pc, #80]	@ (8000a88 <MX_TIM21_Init+0x6c>)
 8000a36:	4b15      	ldr	r3, [pc, #84]	@ (8000a8c <MX_TIM21_Init+0x70>)
 8000a38:	6003      	str	r3, [r0, #0]
  htim21.Init.Prescaler = 32000-1;
 8000a3a:	4b15      	ldr	r3, [pc, #84]	@ (8000a90 <MX_TIM21_Init+0x74>)
 8000a3c:	6043      	str	r3, [r0, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	6083      	str	r3, [r0, #8]
  htim21.Init.Period = 50-1;
 8000a42:	2231      	movs	r2, #49	@ 0x31
 8000a44:	60c2      	str	r2, [r0, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a46:	6103      	str	r3, [r0, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a48:	6143      	str	r3, [r0, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 8000a4a:	f001 ff25 	bl	8002898 <HAL_TIM_Base_Init>
 8000a4e:	2800      	cmp	r0, #0
 8000a50:	d113      	bne.n	8000a7a <MX_TIM21_Init+0x5e>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a52:	2380      	movs	r3, #128	@ 0x80
 8000a54:	015b      	lsls	r3, r3, #5
 8000a56:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 8000a58:	480b      	ldr	r0, [pc, #44]	@ (8000a88 <MX_TIM21_Init+0x6c>)
 8000a5a:	a902      	add	r1, sp, #8
 8000a5c:	f001 ff70 	bl	8002940 <HAL_TIM_ConfigClockSource>
 8000a60:	2800      	cmp	r0, #0
 8000a62:	d10c      	bne.n	8000a7e <MX_TIM21_Init+0x62>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a64:	2300      	movs	r3, #0
 8000a66:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a68:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 8000a6a:	4807      	ldr	r0, [pc, #28]	@ (8000a88 <MX_TIM21_Init+0x6c>)
 8000a6c:	4669      	mov	r1, sp
 8000a6e:	f002 f885 	bl	8002b7c <HAL_TIMEx_MasterConfigSynchronization>
 8000a72:	2800      	cmp	r0, #0
 8000a74:	d105      	bne.n	8000a82 <MX_TIM21_Init+0x66>
}
 8000a76:	b007      	add	sp, #28
 8000a78:	bd00      	pop	{pc}
    Error_Handler();
 8000a7a:	f7ff ff4d 	bl	8000918 <Error_Handler>
    Error_Handler();
 8000a7e:	f7ff ff4b 	bl	8000918 <Error_Handler>
    Error_Handler();
 8000a82:	f7ff ff49 	bl	8000918 <Error_Handler>
 8000a86:	46c0      	nop			@ (mov r8, r8)
 8000a88:	20000804 	.word	0x20000804
 8000a8c:	40010800 	.word	0x40010800
 8000a90:	00007cff 	.word	0x00007cff

08000a94 <MX_LPTIM1_Init>:
{
 8000a94:	b510      	push	{r4, lr}
  hlptim1.Instance = LPTIM1;
 8000a96:	4809      	ldr	r0, [pc, #36]	@ (8000abc <MX_LPTIM1_Init+0x28>)
 8000a98:	4b09      	ldr	r3, [pc, #36]	@ (8000ac0 <MX_LPTIM1_Init+0x2c>)
 8000a9a:	6003      	str	r3, [r0, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	6043      	str	r3, [r0, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8000aa0:	6083      	str	r3, [r0, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8000aa2:	4a08      	ldr	r2, [pc, #32]	@ (8000ac4 <MX_LPTIM1_Init+0x30>)
 8000aa4:	6142      	str	r2, [r0, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8000aa6:	6203      	str	r3, [r0, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8000aa8:	6243      	str	r3, [r0, #36]	@ 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8000aaa:	6283      	str	r3, [r0, #40]	@ 0x28
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8000aac:	f001 f8c4 	bl	8001c38 <HAL_LPTIM_Init>
 8000ab0:	2800      	cmp	r0, #0
 8000ab2:	d100      	bne.n	8000ab6 <MX_LPTIM1_Init+0x22>
}
 8000ab4:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000ab6:	f7ff ff2f 	bl	8000918 <Error_Handler>
 8000aba:	46c0      	nop			@ (mov r8, r8)
 8000abc:	20000978 	.word	0x20000978
 8000ac0:	40007c00 	.word	0x40007c00
 8000ac4:	0000ffff 	.word	0x0000ffff

08000ac8 <MX_TIM22_Init>:
{
 8000ac8:	b500      	push	{lr}
 8000aca:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000acc:	2210      	movs	r2, #16
 8000ace:	2100      	movs	r1, #0
 8000ad0:	a802      	add	r0, sp, #8
 8000ad2:	f002 fb3d 	bl	8003150 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ad6:	2208      	movs	r2, #8
 8000ad8:	2100      	movs	r1, #0
 8000ada:	4668      	mov	r0, sp
 8000adc:	f002 fb38 	bl	8003150 <memset>
  htim22.Instance = TIM22;
 8000ae0:	4814      	ldr	r0, [pc, #80]	@ (8000b34 <MX_TIM22_Init+0x6c>)
 8000ae2:	4b15      	ldr	r3, [pc, #84]	@ (8000b38 <MX_TIM22_Init+0x70>)
 8000ae4:	6003      	str	r3, [r0, #0]
  htim22.Init.Prescaler = 32000-1;
 8000ae6:	4b15      	ldr	r3, [pc, #84]	@ (8000b3c <MX_TIM22_Init+0x74>)
 8000ae8:	6043      	str	r3, [r0, #4]
  htim22.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aea:	2300      	movs	r3, #0
 8000aec:	6083      	str	r3, [r0, #8]
  htim22.Init.Period = 500-1;
 8000aee:	22f4      	movs	r2, #244	@ 0xf4
 8000af0:	32ff      	adds	r2, #255	@ 0xff
 8000af2:	60c2      	str	r2, [r0, #12]
  htim22.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000af4:	6103      	str	r3, [r0, #16]
  htim22.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000af6:	6143      	str	r3, [r0, #20]
  if (HAL_TIM_Base_Init(&htim22) != HAL_OK)
 8000af8:	f001 fece 	bl	8002898 <HAL_TIM_Base_Init>
 8000afc:	2800      	cmp	r0, #0
 8000afe:	d113      	bne.n	8000b28 <MX_TIM22_Init+0x60>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b00:	2380      	movs	r3, #128	@ 0x80
 8000b02:	015b      	lsls	r3, r3, #5
 8000b04:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim22, &sClockSourceConfig) != HAL_OK)
 8000b06:	480b      	ldr	r0, [pc, #44]	@ (8000b34 <MX_TIM22_Init+0x6c>)
 8000b08:	a902      	add	r1, sp, #8
 8000b0a:	f001 ff19 	bl	8002940 <HAL_TIM_ConfigClockSource>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	d10c      	bne.n	8000b2c <MX_TIM22_Init+0x64>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b12:	2300      	movs	r3, #0
 8000b14:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b16:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim22, &sMasterConfig) != HAL_OK)
 8000b18:	4806      	ldr	r0, [pc, #24]	@ (8000b34 <MX_TIM22_Init+0x6c>)
 8000b1a:	4669      	mov	r1, sp
 8000b1c:	f002 f82e 	bl	8002b7c <HAL_TIMEx_MasterConfigSynchronization>
 8000b20:	2800      	cmp	r0, #0
 8000b22:	d105      	bne.n	8000b30 <MX_TIM22_Init+0x68>
}
 8000b24:	b007      	add	sp, #28
 8000b26:	bd00      	pop	{pc}
    Error_Handler();
 8000b28:	f7ff fef6 	bl	8000918 <Error_Handler>
    Error_Handler();
 8000b2c:	f7ff fef4 	bl	8000918 <Error_Handler>
    Error_Handler();
 8000b30:	f7ff fef2 	bl	8000918 <Error_Handler>
 8000b34:	200007c4 	.word	0x200007c4
 8000b38:	40011400 	.word	0x40011400
 8000b3c:	00007cff 	.word	0x00007cff

08000b40 <SystemClock_Config>:
{
 8000b40:	b500      	push	{lr}
 8000b42:	b099      	sub	sp, #100	@ 0x64
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b44:	2234      	movs	r2, #52	@ 0x34
 8000b46:	2100      	movs	r1, #0
 8000b48:	a80b      	add	r0, sp, #44	@ 0x2c
 8000b4a:	f002 fb01 	bl	8003150 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b4e:	2214      	movs	r2, #20
 8000b50:	2100      	movs	r1, #0
 8000b52:	a806      	add	r0, sp, #24
 8000b54:	f002 fafc 	bl	8003150 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b58:	2218      	movs	r2, #24
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	4668      	mov	r0, sp
 8000b5e:	f002 faf7 	bl	8003150 <memset>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b62:	4921      	ldr	r1, [pc, #132]	@ (8000be8 <SystemClock_Config+0xa8>)
 8000b64:	680a      	ldr	r2, [r1, #0]
 8000b66:	4b21      	ldr	r3, [pc, #132]	@ (8000bec <SystemClock_Config+0xac>)
 8000b68:	401a      	ands	r2, r3
 8000b6a:	2380      	movs	r3, #128	@ 0x80
 8000b6c:	011b      	lsls	r3, r3, #4
 8000b6e:	4313      	orrs	r3, r2
 8000b70:	600b      	str	r3, [r1, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000b72:	230a      	movs	r3, #10
 8000b74:	930b      	str	r3, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b76:	3b09      	subs	r3, #9
 8000b78:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b7a:	2210      	movs	r2, #16
 8000b7c:	920f      	str	r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000b7e:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b80:	3301      	adds	r3, #1
 8000b82:	9314      	str	r3, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b84:	2300      	movs	r3, #0
 8000b86:	9315      	str	r3, [sp, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8000b88:	2380      	movs	r3, #128	@ 0x80
 8000b8a:	02db      	lsls	r3, r3, #11
 8000b8c:	9316      	str	r3, [sp, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000b8e:	2380      	movs	r3, #128	@ 0x80
 8000b90:	03db      	lsls	r3, r3, #15
 8000b92:	9317      	str	r3, [sp, #92]	@ 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b94:	a80b      	add	r0, sp, #44	@ 0x2c
 8000b96:	f001 f8fb 	bl	8001d90 <HAL_RCC_OscConfig>
 8000b9a:	2800      	cmp	r0, #0
 8000b9c:	d11e      	bne.n	8000bdc <SystemClock_Config+0x9c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b9e:	230f      	movs	r3, #15
 8000ba0:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ba2:	3b0c      	subs	r3, #12
 8000ba4:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000baa:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bac:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000bae:	2101      	movs	r1, #1
 8000bb0:	a806      	add	r0, sp, #24
 8000bb2:	f001 fb7b 	bl	80022ac <HAL_RCC_ClockConfig>
 8000bb6:	2800      	cmp	r0, #0
 8000bb8:	d112      	bne.n	8000be0 <SystemClock_Config+0xa0>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_LPUART1
 8000bba:	23ae      	movs	r3, #174	@ 0xae
 8000bbc:	9300      	str	r3, [sp, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	9302      	str	r3, [sp, #8]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000bc2:	9303      	str	r3, [sp, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000bc4:	9304      	str	r3, [sp, #16]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000bc6:	2280      	movs	r2, #128	@ 0x80
 8000bc8:	0292      	lsls	r2, r2, #10
 8000bca:	9201      	str	r2, [sp, #4]
  PeriphClkInit.LptimClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
 8000bcc:	9305      	str	r3, [sp, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bce:	4668      	mov	r0, sp
 8000bd0:	f001 fc7e 	bl	80024d0 <HAL_RCCEx_PeriphCLKConfig>
 8000bd4:	2800      	cmp	r0, #0
 8000bd6:	d105      	bne.n	8000be4 <SystemClock_Config+0xa4>
}
 8000bd8:	b019      	add	sp, #100	@ 0x64
 8000bda:	bd00      	pop	{pc}
    Error_Handler();
 8000bdc:	f7ff fe9c 	bl	8000918 <Error_Handler>
    Error_Handler();
 8000be0:	f7ff fe9a 	bl	8000918 <Error_Handler>
    Error_Handler();
 8000be4:	f7ff fe98 	bl	8000918 <Error_Handler>
 8000be8:	40007000 	.word	0x40007000
 8000bec:	ffffe7ff 	.word	0xffffe7ff

08000bf0 <main>:
{
 8000bf0:	b530      	push	{r4, r5, lr}
 8000bf2:	b085      	sub	sp, #20
  HAL_Init();
 8000bf4:	f000 faf4 	bl	80011e0 <HAL_Init>
  SystemClock_Config();
 8000bf8:	f7ff ffa2 	bl	8000b40 <SystemClock_Config>
  MX_GPIO_Init();
 8000bfc:	f7ff fe04 	bl	8000808 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000c00:	f7ff fe8c 	bl	800091c <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 8000c04:	f7ff feb6 	bl	8000974 <MX_LPUART1_UART_Init>
  MX_USART2_UART_Init();
 8000c08:	f7ff fed2 	bl	80009b0 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8000c0c:	f7ff feec 	bl	80009e8 <MX_RTC_Init>
  MX_TIM21_Init();
 8000c10:	f7ff ff04 	bl	8000a1c <MX_TIM21_Init>
  MX_LPTIM1_Init();
 8000c14:	f7ff ff3e 	bl	8000a94 <MX_LPTIM1_Init>
  MX_TIM22_Init();
 8000c18:	f7ff ff56 	bl	8000ac8 <MX_TIM22_Init>
  IN12_init();
 8000c1c:	f7ff fd04 	bl	8000628 <IN12_init>
  DS3231_Init(&hi2c1);
 8000c20:	4829      	ldr	r0, [pc, #164]	@ (8000cc8 <main+0xd8>)
 8000c22:	f000 fa19 	bl	8001058 <DS3231_Init>
  init_menu_items(&hmenu, items_list, num_of_items);
 8000c26:	4b29      	ldr	r3, [pc, #164]	@ (8000ccc <main+0xdc>)
 8000c28:	781a      	ldrb	r2, [r3, #0]
 8000c2a:	4929      	ldr	r1, [pc, #164]	@ (8000cd0 <main+0xe0>)
 8000c2c:	4829      	ldr	r0, [pc, #164]	@ (8000cd4 <main+0xe4>)
 8000c2e:	f000 f861 	bl	8000cf4 <init_menu_items>
  btns_init(&hbtns, btns_list, num_of_btns, &htim21, PRESSED);
 8000c32:	4b29      	ldr	r3, [pc, #164]	@ (8000cd8 <main+0xe8>)
 8000c34:	4a29      	ldr	r2, [pc, #164]	@ (8000cdc <main+0xec>)
 8000c36:	7812      	ldrb	r2, [r2, #0]
 8000c38:	4929      	ldr	r1, [pc, #164]	@ (8000ce0 <main+0xf0>)
 8000c3a:	482a      	ldr	r0, [pc, #168]	@ (8000ce4 <main+0xf4>)
 8000c3c:	2401      	movs	r4, #1
 8000c3e:	9400      	str	r4, [sp, #0]
 8000c40:	f7ff fd4a 	bl	80006d8 <btns_init>
  FIX_TIMER_TRIGGER(&htim22);
 8000c44:	4828      	ldr	r0, [pc, #160]	@ (8000ce8 <main+0xf8>)
 8000c46:	6803      	ldr	r3, [r0, #0]
 8000c48:	2202      	movs	r2, #2
 8000c4a:	4252      	negs	r2, r2
 8000c4c:	611a      	str	r2, [r3, #16]
  volatile sts = HAL_TIM_Base_Start_IT(&htim22);
 8000c4e:	f001 fe47 	bl	80028e0 <HAL_TIM_Base_Start_IT>
 8000c52:	9003      	str	r0, [sp, #12]
  sts = 0;
 8000c54:	2300      	movs	r3, #0
 8000c56:	9303      	str	r3, [sp, #12]
  uint8_t is_upd = 0;
 8000c58:	2500      	movs	r5, #0
 8000c5a:	e00b      	b.n	8000c74 <main+0x84>
		  HAL_Delay(duty_cycle);
 8000c5c:	0020      	movs	r0, r4
 8000c5e:	f000 fae5 	bl	800122c <HAL_Delay>
 8000c62:	e01a      	b.n	8000c9a <main+0xaa>
		  if(duty_cycle > 0)
 8000c64:	2c00      	cmp	r4, #0
 8000c66:	d02a      	beq.n	8000cbe <main+0xce>
			  --duty_cycle;
 8000c68:	3c01      	subs	r4, #1
 8000c6a:	b2e4      	uxtb	r4, r4
		  is_upd = 1;
 8000c6c:	2501      	movs	r5, #1
		  shared_mask = 0;
 8000c6e:	4b1f      	ldr	r3, [pc, #124]	@ (8000cec <main+0xfc>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
	  time_update();
 8000c74:	f7ff fcca 	bl	800060c <time_update>
	  IN12_set_digit_pairs(rtc_time.Hours, rtc_time.Minutes);
 8000c78:	4b1d      	ldr	r3, [pc, #116]	@ (8000cf0 <main+0x100>)
 8000c7a:	7818      	ldrb	r0, [r3, #0]
 8000c7c:	7859      	ldrb	r1, [r3, #1]
 8000c7e:	f7ff fca7 	bl	80005d0 <IN12_set_digit_pairs>
	  HAL_Delay(period-duty_cycle);
 8000c82:	200a      	movs	r0, #10
 8000c84:	1b00      	subs	r0, r0, r4
 8000c86:	f000 fad1 	bl	800122c <HAL_Delay>
	  OUTPUT_DISABLE();
 8000c8a:	20a0      	movs	r0, #160	@ 0xa0
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	2180      	movs	r1, #128	@ 0x80
 8000c90:	05c0      	lsls	r0, r0, #23
 8000c92:	f000 fc02 	bl	800149a <HAL_GPIO_WritePin>
	  if(duty_cycle)
 8000c96:	2c00      	cmp	r4, #0
 8000c98:	d1e0      	bne.n	8000c5c <main+0x6c>
	  switch(shared_mask) {
 8000c9a:	4b14      	ldr	r3, [pc, #80]	@ (8000cec <main+0xfc>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	2b02      	cmp	r3, #2
 8000ca0:	d007      	beq.n	8000cb2 <main+0xc2>
 8000ca2:	2b04      	cmp	r3, #4
 8000ca4:	d002      	beq.n	8000cac <main+0xbc>
 8000ca6:	2b01      	cmp	r3, #1
 8000ca8:	d0dc      	beq.n	8000c64 <main+0x74>
	  default: is_upd = 0;
 8000caa:	2500      	movs	r5, #0
	  if(is_upd) {
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e1      	beq.n	8000c74 <main+0x84>
 8000cb0:	e7dd      	b.n	8000c6e <main+0x7e>
		  if(duty_cycle < period - 1)
 8000cb2:	2c08      	cmp	r4, #8
 8000cb4:	d805      	bhi.n	8000cc2 <main+0xd2>
			  ++duty_cycle;
 8000cb6:	3401      	adds	r4, #1
 8000cb8:	b2e4      	uxtb	r4, r4
		  is_upd = 1;
 8000cba:	2501      	movs	r5, #1
 8000cbc:	e7d7      	b.n	8000c6e <main+0x7e>
		  is_upd = 1;
 8000cbe:	2501      	movs	r5, #1
 8000cc0:	e7d5      	b.n	8000c6e <main+0x7e>
		  is_upd = 1;
 8000cc2:	2501      	movs	r5, #1
 8000cc4:	e7d3      	b.n	8000c6e <main+0x7e>
 8000cc6:	46c0      	nop			@ (mov r8, r8)
 8000cc8:	200009a8 	.word	0x200009a8
 8000ccc:	20000014 	.word	0x20000014
 8000cd0:	20000198 	.word	0x20000198
 8000cd4:	200007b4 	.word	0x200007b4
 8000cd8:	20000804 	.word	0x20000804
 8000cdc:	20000015 	.word	0x20000015
 8000ce0:	20000528 	.word	0x20000528
 8000ce4:	200005c8 	.word	0x200005c8
 8000ce8:	200007c4 	.word	0x200007c4
 8000cec:	200005c0 	.word	0x200005c0
 8000cf0:	200005a8 	.word	0x200005a8

08000cf4 <init_menu_items>:

void init_menu_items(Menu_HandleTypeDef* user_hmenu, Item_TypeDef* user_items, uint16_t number_of_items) {
	assert_param(user_hmenu == NULL);
	assert_param(user_items == NULL);

	menu 				= user_hmenu;
 8000cf4:	4b01      	ldr	r3, [pc, #4]	@ (8000cfc <init_menu_items+0x8>)
 8000cf6:	6018      	str	r0, [r3, #0]
	menu->items 		= user_items;
 8000cf8:	6001      	str	r1, [r0, #0]

//	menu->current_item 	= user_hmenu->items[FW_VERSION]; // Show FW version and compile date on start

	init_items_hierarchy_vertical	();
	init_items_hierarchy_horizontal	(NUM_OF_MENUS);
}
 8000cfa:	4770      	bx	lr
 8000cfc:	200009fc 	.word	0x200009fc

08000d00 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d00:	4b05      	ldr	r3, [pc, #20]	@ (8000d18 <HAL_MspInit+0x18>)
 8000d02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d04:	2101      	movs	r1, #1
 8000d06:	430a      	orrs	r2, r1
 8000d08:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d0a:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8000d0c:	2280      	movs	r2, #128	@ 0x80
 8000d0e:	0552      	lsls	r2, r2, #21
 8000d10:	430a      	orrs	r2, r1
 8000d12:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d14:	4770      	bx	lr
 8000d16:	46c0      	nop			@ (mov r8, r8)
 8000d18:	40021000 	.word	0x40021000

08000d1c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d1c:	b510      	push	{r4, lr}
 8000d1e:	b086      	sub	sp, #24
 8000d20:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d22:	2214      	movs	r2, #20
 8000d24:	2100      	movs	r1, #0
 8000d26:	a801      	add	r0, sp, #4
 8000d28:	f002 fa12 	bl	8003150 <memset>
  if(hi2c->Instance==I2C1)
 8000d2c:	6822      	ldr	r2, [r4, #0]
 8000d2e:	4b10      	ldr	r3, [pc, #64]	@ (8000d70 <HAL_I2C_MspInit+0x54>)
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d001      	beq.n	8000d38 <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d34:	b006      	add	sp, #24
 8000d36:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d38:	4c0e      	ldr	r4, [pc, #56]	@ (8000d74 <HAL_I2C_MspInit+0x58>)
 8000d3a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	431a      	orrs	r2, r3
 8000d40:	62e2      	str	r2, [r4, #44]	@ 0x2c
 8000d42:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8000d44:	401a      	ands	r2, r3
 8000d46:	9200      	str	r2, [sp, #0]
 8000d48:	9a00      	ldr	r2, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d4a:	22c0      	movs	r2, #192	@ 0xc0
 8000d4c:	00d2      	lsls	r2, r2, #3
 8000d4e:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d50:	2212      	movs	r2, #18
 8000d52:	9202      	str	r2, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d54:	3a0f      	subs	r2, #15
 8000d56:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000d58:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d5a:	20a0      	movs	r0, #160	@ 0xa0
 8000d5c:	a901      	add	r1, sp, #4
 8000d5e:	05c0      	lsls	r0, r0, #23
 8000d60:	f000 fad6 	bl	8001310 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d64:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8000d66:	2380      	movs	r3, #128	@ 0x80
 8000d68:	039b      	lsls	r3, r3, #14
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	63a3      	str	r3, [r4, #56]	@ 0x38
}
 8000d6e:	e7e1      	b.n	8000d34 <HAL_I2C_MspInit+0x18>
 8000d70:	40005400 	.word	0x40005400
 8000d74:	40021000 	.word	0x40021000

08000d78 <HAL_LPTIM_MspInit>:
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
  if(hlptim->Instance==LPTIM1)
 8000d78:	6802      	ldr	r2, [r0, #0]
 8000d7a:	4b05      	ldr	r3, [pc, #20]	@ (8000d90 <HAL_LPTIM_MspInit+0x18>)
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	d000      	beq.n	8000d82 <HAL_LPTIM_MspInit+0xa>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 8000d80:	4770      	bx	lr
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8000d82:	4a04      	ldr	r2, [pc, #16]	@ (8000d94 <HAL_LPTIM_MspInit+0x1c>)
 8000d84:	6b91      	ldr	r1, [r2, #56]	@ 0x38
 8000d86:	2380      	movs	r3, #128	@ 0x80
 8000d88:	061b      	lsls	r3, r3, #24
 8000d8a:	430b      	orrs	r3, r1
 8000d8c:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000d8e:	e7f7      	b.n	8000d80 <HAL_LPTIM_MspInit+0x8>
 8000d90:	40007c00 	.word	0x40007c00
 8000d94:	40021000 	.word	0x40021000

08000d98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d98:	b510      	push	{r4, lr}
 8000d9a:	b088      	sub	sp, #32
 8000d9c:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9e:	2214      	movs	r2, #20
 8000da0:	2100      	movs	r1, #0
 8000da2:	a803      	add	r0, sp, #12
 8000da4:	f002 f9d4 	bl	8003150 <memset>
  if(huart->Instance==LPUART1)
 8000da8:	6823      	ldr	r3, [r4, #0]
 8000daa:	4a1e      	ldr	r2, [pc, #120]	@ (8000e24 <HAL_UART_MspInit+0x8c>)
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d004      	beq.n	8000dba <HAL_UART_MspInit+0x22>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 8000db0:	4a1d      	ldr	r2, [pc, #116]	@ (8000e28 <HAL_UART_MspInit+0x90>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d01d      	beq.n	8000df2 <HAL_UART_MspInit+0x5a>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000db6:	b008      	add	sp, #32
 8000db8:	bd10      	pop	{r4, pc}
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000dba:	4b1c      	ldr	r3, [pc, #112]	@ (8000e2c <HAL_UART_MspInit+0x94>)
 8000dbc:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8000dbe:	2280      	movs	r2, #128	@ 0x80
 8000dc0:	02d2      	lsls	r2, r2, #11
 8000dc2:	430a      	orrs	r2, r1
 8000dc4:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000dc8:	2201      	movs	r2, #1
 8000dca:	4311      	orrs	r1, r2
 8000dcc:	62d9      	str	r1, [r3, #44]	@ 0x2c
 8000dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dd0:	401a      	ands	r2, r3
 8000dd2:	9201      	str	r2, [sp, #4]
 8000dd4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000dd6:	230c      	movs	r3, #12
 8000dd8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dda:	3b0a      	subs	r3, #10
 8000ddc:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dde:	3301      	adds	r3, #1
 8000de0:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8000de2:	3303      	adds	r3, #3
 8000de4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de6:	20a0      	movs	r0, #160	@ 0xa0
 8000de8:	a903      	add	r1, sp, #12
 8000dea:	05c0      	lsls	r0, r0, #23
 8000dec:	f000 fa90 	bl	8001310 <HAL_GPIO_Init>
 8000df0:	e7e1      	b.n	8000db6 <HAL_UART_MspInit+0x1e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000df2:	4b0e      	ldr	r3, [pc, #56]	@ (8000e2c <HAL_UART_MspInit+0x94>)
 8000df4:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8000df6:	2280      	movs	r2, #128	@ 0x80
 8000df8:	0292      	lsls	r2, r2, #10
 8000dfa:	430a      	orrs	r2, r1
 8000dfc:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dfe:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000e00:	2202      	movs	r2, #2
 8000e02:	4311      	orrs	r1, r2
 8000e04:	62d9      	str	r1, [r3, #44]	@ 0x2c
 8000e06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e08:	4013      	ands	r3, r2
 8000e0a:	9302      	str	r3, [sp, #8]
 8000e0c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e0e:	23c0      	movs	r3, #192	@ 0xc0
 8000e10:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e12:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e14:	3bbd      	subs	r3, #189	@ 0xbd
 8000e16:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e18:	a903      	add	r1, sp, #12
 8000e1a:	4805      	ldr	r0, [pc, #20]	@ (8000e30 <HAL_UART_MspInit+0x98>)
 8000e1c:	f000 fa78 	bl	8001310 <HAL_GPIO_Init>
}
 8000e20:	e7c9      	b.n	8000db6 <HAL_UART_MspInit+0x1e>
 8000e22:	46c0      	nop			@ (mov r8, r8)
 8000e24:	40004800 	.word	0x40004800
 8000e28:	40004400 	.word	0x40004400
 8000e2c:	40021000 	.word	0x40021000
 8000e30:	50000400 	.word	0x50000400

08000e34 <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 8000e34:	6802      	ldr	r2, [r0, #0]
 8000e36:	4b05      	ldr	r3, [pc, #20]	@ (8000e4c <HAL_RTC_MspInit+0x18>)
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	d000      	beq.n	8000e3e <HAL_RTC_MspInit+0xa>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000e3c:	4770      	bx	lr
    __HAL_RCC_RTC_ENABLE();
 8000e3e:	4a04      	ldr	r2, [pc, #16]	@ (8000e50 <HAL_RTC_MspInit+0x1c>)
 8000e40:	6d11      	ldr	r1, [r2, #80]	@ 0x50
 8000e42:	2380      	movs	r3, #128	@ 0x80
 8000e44:	02db      	lsls	r3, r3, #11
 8000e46:	430b      	orrs	r3, r1
 8000e48:	6513      	str	r3, [r2, #80]	@ 0x50
}
 8000e4a:	e7f7      	b.n	8000e3c <HAL_RTC_MspInit+0x8>
 8000e4c:	40002800 	.word	0x40002800
 8000e50:	40021000 	.word	0x40021000

08000e54 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e54:	b510      	push	{r4, lr}
  if(htim_base->Instance==TIM21)
 8000e56:	6803      	ldr	r3, [r0, #0]
 8000e58:	4a11      	ldr	r2, [pc, #68]	@ (8000ea0 <HAL_TIM_Base_MspInit+0x4c>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d003      	beq.n	8000e66 <HAL_TIM_Base_MspInit+0x12>
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
  /* USER CODE BEGIN TIM21_MspInit 1 */

  /* USER CODE END TIM21_MspInit 1 */
  }
  else if(htim_base->Instance==TIM22)
 8000e5e:	4a11      	ldr	r2, [pc, #68]	@ (8000ea4 <HAL_TIM_Base_MspInit+0x50>)
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d00e      	beq.n	8000e82 <HAL_TIM_Base_MspInit+0x2e>
  /* USER CODE BEGIN TIM22_MspInit 1 */

  /* USER CODE END TIM22_MspInit 1 */
  }

}
 8000e64:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM21_CLK_ENABLE();
 8000e66:	4a10      	ldr	r2, [pc, #64]	@ (8000ea8 <HAL_TIM_Base_MspInit+0x54>)
 8000e68:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8000e6a:	2104      	movs	r1, #4
 8000e6c:	430b      	orrs	r3, r1
 8000e6e:	6353      	str	r3, [r2, #52]	@ 0x34
    HAL_NVIC_SetPriority(TIM21_IRQn, 1, 0);
 8000e70:	2200      	movs	r2, #0
 8000e72:	3903      	subs	r1, #3
 8000e74:	2014      	movs	r0, #20
 8000e76:	f000 fa37 	bl	80012e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
 8000e7a:	2014      	movs	r0, #20
 8000e7c:	f000 fa38 	bl	80012f0 <HAL_NVIC_EnableIRQ>
 8000e80:	e7f0      	b.n	8000e64 <HAL_TIM_Base_MspInit+0x10>
    __HAL_RCC_TIM22_CLK_ENABLE();
 8000e82:	4a09      	ldr	r2, [pc, #36]	@ (8000ea8 <HAL_TIM_Base_MspInit+0x54>)
 8000e84:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8000e86:	2120      	movs	r1, #32
 8000e88:	430b      	orrs	r3, r1
 8000e8a:	6353      	str	r3, [r2, #52]	@ 0x34
    HAL_NVIC_SetPriority(TIM22_IRQn, 2, 0);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	391e      	subs	r1, #30
 8000e90:	2016      	movs	r0, #22
 8000e92:	f000 fa29 	bl	80012e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM22_IRQn);
 8000e96:	2016      	movs	r0, #22
 8000e98:	f000 fa2a 	bl	80012f0 <HAL_NVIC_EnableIRQ>
}
 8000e9c:	e7e2      	b.n	8000e64 <HAL_TIM_Base_MspInit+0x10>
 8000e9e:	46c0      	nop			@ (mov r8, r8)
 8000ea0:	40010800 	.word	0x40010800
 8000ea4:	40011400 	.word	0x40011400
 8000ea8:	40021000 	.word	0x40021000

08000eac <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000eac:	e7fe      	b.n	8000eac <NMI_Handler>

08000eae <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eae:	e7fe      	b.n	8000eae <HardFault_Handler>

08000eb0 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000eb0:	4770      	bx	lr

08000eb2 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eb2:	4770      	bx	lr

08000eb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eb4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eb6:	f000 f9a7 	bl	8001208 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eba:	bd10      	pop	{r4, pc}

08000ebc <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 8000ebc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM21_IRQn 0 */

  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
 8000ebe:	4802      	ldr	r0, [pc, #8]	@ (8000ec8 <TIM21_IRQHandler+0xc>)
 8000ec0:	f001 fdc6 	bl	8002a50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 8000ec4:	bd10      	pop	{r4, pc}
 8000ec6:	46c0      	nop			@ (mov r8, r8)
 8000ec8:	20000804 	.word	0x20000804

08000ecc <TIM22_IRQHandler>:

/**
  * @brief This function handles TIM22 global interrupt.
  */
void TIM22_IRQHandler(void)
{
 8000ecc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM22_IRQn 0 */

  /* USER CODE END TIM22_IRQn 0 */
  HAL_TIM_IRQHandler(&htim22);
 8000ece:	4802      	ldr	r0, [pc, #8]	@ (8000ed8 <TIM22_IRQHandler+0xc>)
 8000ed0:	f001 fdbe 	bl	8002a50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM22_IRQn 1 */

  /* USER CODE END TIM22_IRQn 1 */
}
 8000ed4:	bd10      	pop	{r4, pc}
 8000ed6:	46c0      	nop			@ (mov r8, r8)
 8000ed8:	200007c4 	.word	0x200007c4

08000edc <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000edc:	4770      	bx	lr
	...

08000ee0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000ee0:	480d      	ldr	r0, [pc, #52]	@ (8000f18 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000ee2:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ee4:	f7ff fffa 	bl	8000edc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ee8:	480c      	ldr	r0, [pc, #48]	@ (8000f1c <LoopForever+0x6>)
  ldr r1, =_edata
 8000eea:	490d      	ldr	r1, [pc, #52]	@ (8000f20 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000eec:	4a0d      	ldr	r2, [pc, #52]	@ (8000f24 <LoopForever+0xe>)
  movs r3, #0
 8000eee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ef0:	e002      	b.n	8000ef8 <LoopCopyDataInit>

08000ef2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ef2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ef4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ef6:	3304      	adds	r3, #4

08000ef8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ef8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000efa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000efc:	d3f9      	bcc.n	8000ef2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000efe:	4a0a      	ldr	r2, [pc, #40]	@ (8000f28 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f00:	4c0a      	ldr	r4, [pc, #40]	@ (8000f2c <LoopForever+0x16>)
  movs r3, #0
 8000f02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f04:	e001      	b.n	8000f0a <LoopFillZerobss>

08000f06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f08:	3204      	adds	r2, #4

08000f0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f0c:	d3fb      	bcc.n	8000f06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f0e:	f002 f927 	bl	8003160 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f12:	f7ff fe6d 	bl	8000bf0 <main>

08000f16 <LoopForever>:

LoopForever:
    b LoopForever
 8000f16:	e7fe      	b.n	8000f16 <LoopForever>
   ldr   r0, =_estack
 8000f18:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000f1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f20:	20000588 	.word	0x20000588
  ldr r2, =_sidata
 8000f24:	08003344 	.word	0x08003344
  ldr r2, =_sbss
 8000f28:	20000588 	.word	0x20000588
  ldr r4, =_ebss
 8000f2c:	20000a08 	.word	0x20000a08

08000f30 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f30:	e7fe      	b.n	8000f30 <ADC1_COMP_IRQHandler>
	...

08000f34 <DS3231_SetRegByte>:
/**
 * @brief Set the byte in the designated DS3231 register to value.
 * @param regAddr Register address to write.
 * @param val Value to set, 0 to 255.
 */
void DS3231_SetRegByte(uint8_t regAddr, uint8_t val) {
 8000f34:	b500      	push	{lr}
 8000f36:	b085      	sub	sp, #20
	uint8_t bytes[2] = { regAddr, val };
 8000f38:	466b      	mov	r3, sp
 8000f3a:	7318      	strb	r0, [r3, #12]
 8000f3c:	7359      	strb	r1, [r3, #13]
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, bytes, 2, DS3231_TIMEOUT);
 8000f3e:	4b06      	ldr	r3, [pc, #24]	@ (8000f58 <DS3231_SetRegByte+0x24>)
 8000f40:	6818      	ldr	r0, [r3, #0]
 8000f42:	2301      	movs	r3, #1
 8000f44:	425b      	negs	r3, r3
 8000f46:	9300      	str	r3, [sp, #0]
 8000f48:	3303      	adds	r3, #3
 8000f4a:	aa03      	add	r2, sp, #12
 8000f4c:	21d0      	movs	r1, #208	@ 0xd0
 8000f4e:	f000 fca9 	bl	80018a4 <HAL_I2C_Master_Transmit>
}
 8000f52:	b005      	add	sp, #20
 8000f54:	bd00      	pop	{pc}
 8000f56:	46c0      	nop			@ (mov r8, r8)
 8000f58:	20000a00 	.word	0x20000a00

08000f5c <DS3231_GetRegByte>:
/**
 * @brief Gets the byte in the designated DS3231 register.
 * @param regAddr Register address to read.
 * @return Value stored in the register, 0 to 255.
 */
uint8_t DS3231_GetRegByte(uint8_t regAddr) {
 8000f5c:	b570      	push	{r4, r5, r6, lr}
 8000f5e:	b086      	sub	sp, #24
 8000f60:	220f      	movs	r2, #15
 8000f62:	446a      	add	r2, sp
 8000f64:	7010      	strb	r0, [r2, #0]
	uint8_t val;
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &regAddr, 1, DS3231_TIMEOUT);
 8000f66:	4e0a      	ldr	r6, [pc, #40]	@ (8000f90 <DS3231_GetRegByte+0x34>)
 8000f68:	6830      	ldr	r0, [r6, #0]
 8000f6a:	2501      	movs	r5, #1
 8000f6c:	426d      	negs	r5, r5
 8000f6e:	9500      	str	r5, [sp, #0]
 8000f70:	2301      	movs	r3, #1
 8000f72:	21d0      	movs	r1, #208	@ 0xd0
 8000f74:	f000 fc96 	bl	80018a4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &val, 1, DS3231_TIMEOUT);
 8000f78:	2417      	movs	r4, #23
 8000f7a:	446c      	add	r4, sp
 8000f7c:	6830      	ldr	r0, [r6, #0]
 8000f7e:	9500      	str	r5, [sp, #0]
 8000f80:	2301      	movs	r3, #1
 8000f82:	0022      	movs	r2, r4
 8000f84:	21d0      	movs	r1, #208	@ 0xd0
 8000f86:	f000 fd47 	bl	8001a18 <HAL_I2C_Master_Receive>
	return val;
 8000f8a:	7820      	ldrb	r0, [r4, #0]
}
 8000f8c:	b006      	add	sp, #24
 8000f8e:	bd70      	pop	{r4, r5, r6, pc}
 8000f90:	20000a00 	.word	0x20000a00

08000f94 <DS3231_SetInterruptMode>:

/**
 * @brief Set the interrupt mode to either alarm interrupt or square wave interrupt.
 * @param mode Interrupt mode to set, DS3231_ALARM_INTERRUPT or DS3231_SQUARE_WAVE_INTERRUPT.
 */
void DS3231_SetInterruptMode(DS3231_InterruptMode mode){
 8000f94:	b510      	push	{r4, lr}
 8000f96:	0004      	movs	r4, r0
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8000f98:	200e      	movs	r0, #14
 8000f9a:	f7ff ffdf 	bl	8000f5c <DS3231_GetRegByte>
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfb) | ((mode & 0x01) << DS3231_INTCN));
 8000f9e:	00a4      	lsls	r4, r4, #2
 8000fa0:	2304      	movs	r3, #4
 8000fa2:	4023      	ands	r3, r4
 8000fa4:	2204      	movs	r2, #4
 8000fa6:	0001      	movs	r1, r0
 8000fa8:	4391      	bics	r1, r2
 8000faa:	4319      	orrs	r1, r3
 8000fac:	b2c9      	uxtb	r1, r1
 8000fae:	200e      	movs	r0, #14
 8000fb0:	f7ff ffc0 	bl	8000f34 <DS3231_SetRegByte>
}
 8000fb4:	bd10      	pop	{r4, pc}

08000fb6 <DS3231_EnableOscillator>:

/**
 * @brief Enables clock oscillator.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableOscillator(DS3231_State enable){
 8000fb6:	b510      	push	{r4, lr}
 8000fb8:	0004      	movs	r4, r0
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8000fba:	200e      	movs	r0, #14
 8000fbc:	f7ff ffce 	bl	8000f5c <DS3231_GetRegByte>
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0x7f) | ((!enable & 0x01) << DS3231_EOSC));
 8000fc0:	217f      	movs	r1, #127	@ 0x7f
 8000fc2:	4001      	ands	r1, r0
 8000fc4:	2c00      	cmp	r4, #0
 8000fc6:	d107      	bne.n	8000fd8 <DS3231_EnableOscillator+0x22>
 8000fc8:	2380      	movs	r3, #128	@ 0x80
 8000fca:	425b      	negs	r3, r3
 8000fcc:	4319      	orrs	r1, r3
 8000fce:	b2c9      	uxtb	r1, r1
 8000fd0:	200e      	movs	r0, #14
 8000fd2:	f7ff ffaf 	bl	8000f34 <DS3231_SetRegByte>
}
 8000fd6:	bd10      	pop	{r4, pc}
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0x7f) | ((!enable & 0x01) << DS3231_EOSC));
 8000fd8:	2300      	movs	r3, #0
 8000fda:	e7f7      	b.n	8000fcc <DS3231_EnableOscillator+0x16>

08000fdc <DS3231_EnableAlarm2>:

/**
 * @brief Enables alarm 2.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableAlarm2(DS3231_State enable){
 8000fdc:	b510      	push	{r4, lr}
 8000fde:	0004      	movs	r4, r0
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8000fe0:	200e      	movs	r0, #14
 8000fe2:	f7ff ffbb 	bl	8000f5c <DS3231_GetRegByte>
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfd) | ((enable & 0x01) << DS3231_A2IE));
 8000fe6:	0064      	lsls	r4, r4, #1
 8000fe8:	2302      	movs	r3, #2
 8000fea:	4023      	ands	r3, r4
 8000fec:	2202      	movs	r2, #2
 8000fee:	0001      	movs	r1, r0
 8000ff0:	4391      	bics	r1, r2
 8000ff2:	4319      	orrs	r1, r3
 8000ff4:	b2c9      	uxtb	r1, r1
 8000ff6:	200e      	movs	r0, #14
 8000ff8:	f7ff ff9c 	bl	8000f34 <DS3231_SetRegByte>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 8000ffc:	2001      	movs	r0, #1
 8000ffe:	f7ff ffc9 	bl	8000f94 <DS3231_SetInterruptMode>
}
 8001002:	bd10      	pop	{r4, pc}

08001004 <DS3231_ClearAlarm2Flag>:

/**
 * @brief Clears alarm 2 matched flag. Matched flags must be cleared before the next match or the next interrupt will be masked.
 */
void DS3231_ClearAlarm2Flag(){
 8001004:	b510      	push	{r4, lr}
	uint8_t status = DS3231_GetRegByte(DS3231_REG_STATUS) & 0xfd;
 8001006:	200f      	movs	r0, #15
 8001008:	f7ff ffa8 	bl	8000f5c <DS3231_GetRegByte>
 800100c:	2302      	movs	r3, #2
 800100e:	4398      	bics	r0, r3
 8001010:	b2c1      	uxtb	r1, r0
	DS3231_SetRegByte(DS3231_REG_STATUS, status & ~(0x01 << DS3231_A2F));
 8001012:	200f      	movs	r0, #15
 8001014:	f7ff ff8e 	bl	8000f34 <DS3231_SetRegByte>
}
 8001018:	bd10      	pop	{r4, pc}

0800101a <DS3231_EnableAlarm1>:

/**
 * @brief Enables alarm 1.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableAlarm1(DS3231_State enable){
 800101a:	b510      	push	{r4, lr}
 800101c:	0004      	movs	r4, r0
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 800101e:	200e      	movs	r0, #14
 8001020:	f7ff ff9c 	bl	8000f5c <DS3231_GetRegByte>
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfe) | ((enable & 0x01) << DS3231_A1IE));
 8001024:	2301      	movs	r3, #1
 8001026:	0001      	movs	r1, r0
 8001028:	4399      	bics	r1, r3
 800102a:	2001      	movs	r0, #1
 800102c:	4020      	ands	r0, r4
 800102e:	4301      	orrs	r1, r0
 8001030:	b2c9      	uxtb	r1, r1
 8001032:	200e      	movs	r0, #14
 8001034:	f7ff ff7e 	bl	8000f34 <DS3231_SetRegByte>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 8001038:	2001      	movs	r0, #1
 800103a:	f7ff ffab 	bl	8000f94 <DS3231_SetInterruptMode>
}
 800103e:	bd10      	pop	{r4, pc}

08001040 <DS3231_ClearAlarm1Flag>:

/**
 * @brief Clears alarm 1 matched flag. Matched flags must be cleared before the next match or the next interrupt will be masked.
 */
void DS3231_ClearAlarm1Flag(){
 8001040:	b510      	push	{r4, lr}
	uint8_t status = DS3231_GetRegByte(DS3231_REG_STATUS) & 0xfe;
 8001042:	200f      	movs	r0, #15
 8001044:	f7ff ff8a 	bl	8000f5c <DS3231_GetRegByte>
 8001048:	2301      	movs	r3, #1
 800104a:	4398      	bics	r0, r3
 800104c:	b2c1      	uxtb	r1, r0
	DS3231_SetRegByte(DS3231_REG_STATUS, status & ~(0x01 << DS3231_A1F));
 800104e:	200f      	movs	r0, #15
 8001050:	f7ff ff70 	bl	8000f34 <DS3231_SetRegByte>
}
 8001054:	bd10      	pop	{r4, pc}
	...

08001058 <DS3231_Init>:
void DS3231_Init(I2C_HandleTypeDef *hi2c) {
 8001058:	b510      	push	{r4, lr}
	_ds3231_ui2c = hi2c;
 800105a:	4b08      	ldr	r3, [pc, #32]	@ (800107c <DS3231_Init+0x24>)
 800105c:	6018      	str	r0, [r3, #0]
	DS3231_EnableAlarm1(DS3231_DISABLED);
 800105e:	2000      	movs	r0, #0
 8001060:	f7ff ffdb 	bl	800101a <DS3231_EnableAlarm1>
	DS3231_EnableAlarm2(DS3231_DISABLED);
 8001064:	2000      	movs	r0, #0
 8001066:	f7ff ffb9 	bl	8000fdc <DS3231_EnableAlarm2>
	DS3231_ClearAlarm1Flag();
 800106a:	f7ff ffe9 	bl	8001040 <DS3231_ClearAlarm1Flag>
	DS3231_ClearAlarm2Flag();
 800106e:	f7ff ffc9 	bl	8001004 <DS3231_ClearAlarm2Flag>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 8001072:	2001      	movs	r0, #1
 8001074:	f7ff ff8e 	bl	8000f94 <DS3231_SetInterruptMode>
}
 8001078:	bd10      	pop	{r4, pc}
 800107a:	46c0      	nop			@ (mov r8, r8)
 800107c:	20000a00 	.word	0x20000a00

08001080 <DS3231_IsOscillatorStopped>:

/**
 * @brief Check whether the clock oscillator is stopped.
 * @return Oscillator stopped flag (OSF) bit, 0 or 1.
 */
uint8_t DS3231_IsOscillatorStopped(){
 8001080:	b510      	push	{r4, lr}
	return (DS3231_GetRegByte(DS3231_REG_STATUS) >> DS3231_OSF) & 0x01;
 8001082:	200f      	movs	r0, #15
 8001084:	f7ff ff6a 	bl	8000f5c <DS3231_GetRegByte>
 8001088:	09c0      	lsrs	r0, r0, #7
 800108a:	b2c0      	uxtb	r0, r0
}
 800108c:	bd10      	pop	{r4, pc}

0800108e <DS3231_DecodeBCD>:
/**
 * @brief Decodes the raw binary value stored in registers to decimal format.
 * @param bin Binary-coded decimal value retrieved from register, 0 to 255.
 * @return Decoded decimal value.
 */
uint8_t DS3231_DecodeBCD(uint8_t bin) {
 800108e:	0002      	movs	r2, r0
	return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
 8001090:	0903      	lsrs	r3, r0, #4
 8001092:	200f      	movs	r0, #15
 8001094:	4010      	ands	r0, r2
 8001096:	009a      	lsls	r2, r3, #2
 8001098:	189b      	adds	r3, r3, r2
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	18c0      	adds	r0, r0, r3
 800109e:	b2c0      	uxtb	r0, r0
}
 80010a0:	4770      	bx	lr

080010a2 <DS3231_GetDayOfWeek>:
uint8_t DS3231_GetDayOfWeek(void) {
 80010a2:	b510      	push	{r4, lr}
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_DOW));
 80010a4:	2003      	movs	r0, #3
 80010a6:	f7ff ff59 	bl	8000f5c <DS3231_GetRegByte>
 80010aa:	f7ff fff0 	bl	800108e <DS3231_DecodeBCD>
}
 80010ae:	bd10      	pop	{r4, pc}

080010b0 <DS3231_GetDate>:
uint8_t DS3231_GetDate(void) {
 80010b0:	b510      	push	{r4, lr}
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_DATE));
 80010b2:	2004      	movs	r0, #4
 80010b4:	f7ff ff52 	bl	8000f5c <DS3231_GetRegByte>
 80010b8:	f7ff ffe9 	bl	800108e <DS3231_DecodeBCD>
}
 80010bc:	bd10      	pop	{r4, pc}

080010be <DS3231_GetMonth>:
uint8_t DS3231_GetMonth(void) {
 80010be:	b510      	push	{r4, lr}
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_MONTH) & 0x7f);
 80010c0:	2005      	movs	r0, #5
 80010c2:	f7ff ff4b 	bl	8000f5c <DS3231_GetRegByte>
 80010c6:	237f      	movs	r3, #127	@ 0x7f
 80010c8:	4018      	ands	r0, r3
 80010ca:	f7ff ffe0 	bl	800108e <DS3231_DecodeBCD>
}
 80010ce:	bd10      	pop	{r4, pc}

080010d0 <DS3231_GetYear>:
uint16_t DS3231_GetYear(void) {
 80010d0:	b510      	push	{r4, lr}
	uint8_t decYear = DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_YEAR));
 80010d2:	2006      	movs	r0, #6
 80010d4:	f7ff ff42 	bl	8000f5c <DS3231_GetRegByte>
 80010d8:	f7ff ffd9 	bl	800108e <DS3231_DecodeBCD>
 80010dc:	0004      	movs	r4, r0
	uint16_t century = (DS3231_GetRegByte(DS3231_REG_MONTH) >> DS3231_CENTURY) * 100 + 2000;
 80010de:	2005      	movs	r0, #5
 80010e0:	f7ff ff3c 	bl	8000f5c <DS3231_GetRegByte>
 80010e4:	09c3      	lsrs	r3, r0, #7
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	2264      	movs	r2, #100	@ 0x64
 80010ea:	4353      	muls	r3, r2
 80010ec:	b29b      	uxth	r3, r3
 80010ee:	22fa      	movs	r2, #250	@ 0xfa
 80010f0:	00d2      	lsls	r2, r2, #3
 80010f2:	4694      	mov	ip, r2
 80010f4:	4463      	add	r3, ip
 80010f6:	b29b      	uxth	r3, r3
	return century + decYear;
 80010f8:	18e0      	adds	r0, r4, r3
 80010fa:	b280      	uxth	r0, r0
}
 80010fc:	bd10      	pop	{r4, pc}

080010fe <DS3231_GetHour>:
uint8_t DS3231_GetHour(void) {
 80010fe:	b510      	push	{r4, lr}
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_HOUR));
 8001100:	2002      	movs	r0, #2
 8001102:	f7ff ff2b 	bl	8000f5c <DS3231_GetRegByte>
 8001106:	f7ff ffc2 	bl	800108e <DS3231_DecodeBCD>
}
 800110a:	bd10      	pop	{r4, pc}

0800110c <DS3231_GetMinute>:
uint8_t DS3231_GetMinute(void) {
 800110c:	b510      	push	{r4, lr}
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_MINUTE));
 800110e:	2001      	movs	r0, #1
 8001110:	f7ff ff24 	bl	8000f5c <DS3231_GetRegByte>
 8001114:	f7ff ffbb 	bl	800108e <DS3231_DecodeBCD>
}
 8001118:	bd10      	pop	{r4, pc}

0800111a <DS3231_GetSecond>:
uint8_t DS3231_GetSecond(void) {
 800111a:	b510      	push	{r4, lr}
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_SECOND));
 800111c:	2000      	movs	r0, #0
 800111e:	f7ff ff1d 	bl	8000f5c <DS3231_GetRegByte>
 8001122:	f7ff ffb4 	bl	800108e <DS3231_DecodeBCD>
}
 8001126:	bd10      	pop	{r4, pc}

08001128 <DS3231_EncodeBCD>:
/**
 * @brief Encodes a decimal number to binaty-coded decimal for storage in registers.
 * @param dec Decimal number to encode.
 * @return Encoded binary-coded decimal value.
 */
uint8_t DS3231_EncodeBCD(uint8_t dec) {
 8001128:	b570      	push	{r4, r5, r6, lr}
 800112a:	0005      	movs	r5, r0
	return (dec % 10 + ((dec / 10) << 4));
 800112c:	210a      	movs	r1, #10
 800112e:	f7fe ffeb 	bl	8000108 <__udivsi3>
 8001132:	0104      	lsls	r4, r0, #4
 8001134:	b2e4      	uxtb	r4, r4
 8001136:	210a      	movs	r1, #10
 8001138:	0028      	movs	r0, r5
 800113a:	f7ff f86b 	bl	8000214 <__aeabi_uidivmod>
 800113e:	1860      	adds	r0, r4, r1
 8001140:	b2c0      	uxtb	r0, r0
}
 8001142:	bd70      	pop	{r4, r5, r6, pc}

08001144 <DS3231_SetHour>:
void DS3231_SetHour(uint8_t hour_24mode) {
 8001144:	b510      	push	{r4, lr}
	DS3231_SetRegByte(DS3231_REG_HOUR, DS3231_EncodeBCD(hour_24mode & 0x3f));
 8001146:	233f      	movs	r3, #63	@ 0x3f
 8001148:	4018      	ands	r0, r3
 800114a:	f7ff ffed 	bl	8001128 <DS3231_EncodeBCD>
 800114e:	0001      	movs	r1, r0
 8001150:	2002      	movs	r0, #2
 8001152:	f7ff feef 	bl	8000f34 <DS3231_SetRegByte>
}
 8001156:	bd10      	pop	{r4, pc}

08001158 <DS3231_SetMinute>:
void DS3231_SetMinute(uint8_t minute) {
 8001158:	b510      	push	{r4, lr}
	DS3231_SetRegByte(DS3231_REG_MINUTE, DS3231_EncodeBCD(minute));
 800115a:	f7ff ffe5 	bl	8001128 <DS3231_EncodeBCD>
 800115e:	0001      	movs	r1, r0
 8001160:	2001      	movs	r0, #1
 8001162:	f7ff fee7 	bl	8000f34 <DS3231_SetRegByte>
}
 8001166:	bd10      	pop	{r4, pc}

08001168 <DS3231_SetSecond>:
void DS3231_SetSecond(uint8_t second) {
 8001168:	b510      	push	{r4, lr}
	DS3231_SetRegByte(DS3231_REG_SECOND, DS3231_EncodeBCD(second));
 800116a:	f7ff ffdd 	bl	8001128 <DS3231_EncodeBCD>
 800116e:	0001      	movs	r1, r0
 8001170:	2000      	movs	r0, #0
 8001172:	f7ff fedf 	bl	8000f34 <DS3231_SetRegByte>
}
 8001176:	bd10      	pop	{r4, pc}

08001178 <DS3231_SetFullTime>:
void DS3231_SetFullTime(uint8_t  hour_24mode, uint8_t minute, uint8_t second){
 8001178:	b570      	push	{r4, r5, r6, lr}
 800117a:	000d      	movs	r5, r1
 800117c:	0014      	movs	r4, r2
	DS3231_SetHour(hour_24mode);
 800117e:	f7ff ffe1 	bl	8001144 <DS3231_SetHour>
	DS3231_SetMinute(minute);
 8001182:	0028      	movs	r0, r5
 8001184:	f7ff ffe8 	bl	8001158 <DS3231_SetMinute>
	DS3231_SetSecond(second);
 8001188:	0020      	movs	r0, r4
 800118a:	f7ff ffed 	bl	8001168 <DS3231_SetSecond>
}
 800118e:	bd70      	pop	{r4, r5, r6, pc}

08001190 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001190:	b510      	push	{r4, lr}
 8001192:	0004      	movs	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001194:	4b0f      	ldr	r3, [pc, #60]	@ (80011d4 <HAL_InitTick+0x44>)
 8001196:	7819      	ldrb	r1, [r3, #0]
 8001198:	20fa      	movs	r0, #250	@ 0xfa
 800119a:	0080      	lsls	r0, r0, #2
 800119c:	f7fe ffb4 	bl	8000108 <__udivsi3>
 80011a0:	0001      	movs	r1, r0
 80011a2:	4b0d      	ldr	r3, [pc, #52]	@ (80011d8 <HAL_InitTick+0x48>)
 80011a4:	6818      	ldr	r0, [r3, #0]
 80011a6:	f7fe ffaf 	bl	8000108 <__udivsi3>
 80011aa:	f000 f8ad 	bl	8001308 <HAL_SYSTICK_Config>
 80011ae:	2800      	cmp	r0, #0
 80011b0:	d10d      	bne.n	80011ce <HAL_InitTick+0x3e>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011b2:	2c03      	cmp	r4, #3
 80011b4:	d901      	bls.n	80011ba <HAL_InitTick+0x2a>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80011b6:	2001      	movs	r0, #1
 80011b8:	e00a      	b.n	80011d0 <HAL_InitTick+0x40>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011ba:	3001      	adds	r0, #1
 80011bc:	2200      	movs	r2, #0
 80011be:	0021      	movs	r1, r4
 80011c0:	4240      	negs	r0, r0
 80011c2:	f000 f891 	bl	80012e8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011c6:	4b05      	ldr	r3, [pc, #20]	@ (80011dc <HAL_InitTick+0x4c>)
 80011c8:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80011ca:	2000      	movs	r0, #0
 80011cc:	e000      	b.n	80011d0 <HAL_InitTick+0x40>
    return HAL_ERROR;
 80011ce:	2001      	movs	r0, #1
}
 80011d0:	bd10      	pop	{r4, pc}
 80011d2:	46c0      	nop			@ (mov r8, r8)
 80011d4:	20000580 	.word	0x20000580
 80011d8:	2000057c 	.word	0x2000057c
 80011dc:	20000584 	.word	0x20000584

080011e0 <HAL_Init>:
{
 80011e0:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80011e2:	4a08      	ldr	r2, [pc, #32]	@ (8001204 <HAL_Init+0x24>)
 80011e4:	6813      	ldr	r3, [r2, #0]
 80011e6:	2140      	movs	r1, #64	@ 0x40
 80011e8:	430b      	orrs	r3, r1
 80011ea:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011ec:	2003      	movs	r0, #3
 80011ee:	f7ff ffcf 	bl	8001190 <HAL_InitTick>
 80011f2:	1e04      	subs	r4, r0, #0
 80011f4:	d002      	beq.n	80011fc <HAL_Init+0x1c>
    status = HAL_ERROR;
 80011f6:	2401      	movs	r4, #1
}
 80011f8:	0020      	movs	r0, r4
 80011fa:	bd10      	pop	{r4, pc}
    HAL_MspInit();
 80011fc:	f7ff fd80 	bl	8000d00 <HAL_MspInit>
 8001200:	e7fa      	b.n	80011f8 <HAL_Init+0x18>
 8001202:	46c0      	nop			@ (mov r8, r8)
 8001204:	40022000 	.word	0x40022000

08001208 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001208:	4a03      	ldr	r2, [pc, #12]	@ (8001218 <HAL_IncTick+0x10>)
 800120a:	6811      	ldr	r1, [r2, #0]
 800120c:	4b03      	ldr	r3, [pc, #12]	@ (800121c <HAL_IncTick+0x14>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	185b      	adds	r3, r3, r1
 8001212:	6013      	str	r3, [r2, #0]
}
 8001214:	4770      	bx	lr
 8001216:	46c0      	nop			@ (mov r8, r8)
 8001218:	20000a04 	.word	0x20000a04
 800121c:	20000580 	.word	0x20000580

08001220 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001220:	4b01      	ldr	r3, [pc, #4]	@ (8001228 <HAL_GetTick+0x8>)
 8001222:	6818      	ldr	r0, [r3, #0]
}
 8001224:	4770      	bx	lr
 8001226:	46c0      	nop			@ (mov r8, r8)
 8001228:	20000a04 	.word	0x20000a04

0800122c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800122c:	b570      	push	{r4, r5, r6, lr}
 800122e:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001230:	f7ff fff6 	bl	8001220 <HAL_GetTick>
 8001234:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001236:	1c63      	adds	r3, r4, #1
 8001238:	d002      	beq.n	8001240 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800123a:	4b04      	ldr	r3, [pc, #16]	@ (800124c <HAL_Delay+0x20>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001240:	f7ff ffee 	bl	8001220 <HAL_GetTick>
 8001244:	1b40      	subs	r0, r0, r5
 8001246:	42a0      	cmp	r0, r4
 8001248:	d3fa      	bcc.n	8001240 <HAL_Delay+0x14>
  {
  }
}
 800124a:	bd70      	pop	{r4, r5, r6, pc}
 800124c:	20000580 	.word	0x20000580

08001250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001250:	b570      	push	{r4, r5, r6, lr}
  if ((int32_t)(IRQn) >= 0)
 8001252:	2800      	cmp	r0, #0
 8001254:	db11      	blt.n	800127a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001256:	0883      	lsrs	r3, r0, #2
 8001258:	4d13      	ldr	r5, [pc, #76]	@ (80012a8 <__NVIC_SetPriority+0x58>)
 800125a:	33c0      	adds	r3, #192	@ 0xc0
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	595c      	ldr	r4, [r3, r5]
 8001260:	2203      	movs	r2, #3
 8001262:	4010      	ands	r0, r2
 8001264:	00c0      	lsls	r0, r0, #3
 8001266:	32fc      	adds	r2, #252	@ 0xfc
 8001268:	0016      	movs	r6, r2
 800126a:	4086      	lsls	r6, r0
 800126c:	43b4      	bics	r4, r6
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800126e:	0189      	lsls	r1, r1, #6
 8001270:	400a      	ands	r2, r1
 8001272:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001274:	4322      	orrs	r2, r4
 8001276:	515a      	str	r2, [r3, r5]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001278:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800127a:	230f      	movs	r3, #15
 800127c:	4003      	ands	r3, r0
 800127e:	3b08      	subs	r3, #8
 8001280:	089b      	lsrs	r3, r3, #2
 8001282:	3306      	adds	r3, #6
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	4a09      	ldr	r2, [pc, #36]	@ (80012ac <__NVIC_SetPriority+0x5c>)
 8001288:	4694      	mov	ip, r2
 800128a:	4463      	add	r3, ip
 800128c:	685c      	ldr	r4, [r3, #4]
 800128e:	2203      	movs	r2, #3
 8001290:	4010      	ands	r0, r2
 8001292:	00c0      	lsls	r0, r0, #3
 8001294:	32fc      	adds	r2, #252	@ 0xfc
 8001296:	0015      	movs	r5, r2
 8001298:	4085      	lsls	r5, r0
 800129a:	43ac      	bics	r4, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800129c:	0189      	lsls	r1, r1, #6
 800129e:	400a      	ands	r2, r1
 80012a0:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012a2:	4322      	orrs	r2, r4
 80012a4:	605a      	str	r2, [r3, #4]
}
 80012a6:	e7e7      	b.n	8001278 <__NVIC_SetPriority+0x28>
 80012a8:	e000e100 	.word	0xe000e100
 80012ac:	e000ed00 	.word	0xe000ed00

080012b0 <SysTick_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012b0:	3801      	subs	r0, #1
 80012b2:	2380      	movs	r3, #128	@ 0x80
 80012b4:	045b      	lsls	r3, r3, #17
 80012b6:	4298      	cmp	r0, r3
 80012b8:	d20f      	bcs.n	80012da <SysTick_Config+0x2a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ba:	4a09      	ldr	r2, [pc, #36]	@ (80012e0 <SysTick_Config+0x30>)
 80012bc:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012be:	4809      	ldr	r0, [pc, #36]	@ (80012e4 <SysTick_Config+0x34>)
 80012c0:	6a03      	ldr	r3, [r0, #32]
 80012c2:	021b      	lsls	r3, r3, #8
 80012c4:	0a1b      	lsrs	r3, r3, #8
 80012c6:	21c0      	movs	r1, #192	@ 0xc0
 80012c8:	0609      	lsls	r1, r1, #24
 80012ca:	430b      	orrs	r3, r1
 80012cc:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012ce:	2300      	movs	r3, #0
 80012d0:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012d2:	3307      	adds	r3, #7
 80012d4:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012d6:	2000      	movs	r0, #0
}
 80012d8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80012da:	2001      	movs	r0, #1
 80012dc:	e7fc      	b.n	80012d8 <SysTick_Config+0x28>
 80012de:	46c0      	nop			@ (mov r8, r8)
 80012e0:	e000e010 	.word	0xe000e010
 80012e4:	e000ed00 	.word	0xe000ed00

080012e8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012e8:	b510      	push	{r4, lr}
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80012ea:	f7ff ffb1 	bl	8001250 <__NVIC_SetPriority>
}
 80012ee:	bd10      	pop	{r4, pc}

080012f0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80012f0:	2800      	cmp	r0, #0
 80012f2:	db05      	blt.n	8001300 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012f4:	221f      	movs	r2, #31
 80012f6:	4002      	ands	r2, r0
 80012f8:	2301      	movs	r3, #1
 80012fa:	4093      	lsls	r3, r2
 80012fc:	4a01      	ldr	r2, [pc, #4]	@ (8001304 <HAL_NVIC_EnableIRQ+0x14>)
 80012fe:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001300:	4770      	bx	lr
 8001302:	46c0      	nop			@ (mov r8, r8)
 8001304:	e000e100 	.word	0xe000e100

08001308 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001308:	b510      	push	{r4, lr}
   return SysTick_Config(TicksNumb);
 800130a:	f7ff ffd1 	bl	80012b0 <SysTick_Config>
}
 800130e:	bd10      	pop	{r4, pc}

08001310 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001310:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t position = 0x00U;
 8001312:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001314:	e056      	b.n	80013c4 <HAL_GPIO_Init+0xb4>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001316:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001318:	005f      	lsls	r7, r3, #1
 800131a:	2403      	movs	r4, #3
 800131c:	40bc      	lsls	r4, r7
 800131e:	43a6      	bics	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001320:	68cc      	ldr	r4, [r1, #12]
 8001322:	40bc      	lsls	r4, r7
 8001324:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8001326:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001328:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800132a:	4394      	bics	r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800132c:	684e      	ldr	r6, [r1, #4]
 800132e:	0936      	lsrs	r6, r6, #4
 8001330:	2201      	movs	r2, #1
 8001332:	4032      	ands	r2, r6
 8001334:	409a      	lsls	r2, r3
 8001336:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8001338:	6042      	str	r2, [r0, #4]
 800133a:	e053      	b.n	80013e4 <HAL_GPIO_Init+0xd4>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800133c:	08de      	lsrs	r6, r3, #3
 800133e:	3608      	adds	r6, #8
 8001340:	00b6      	lsls	r6, r6, #2
 8001342:	5837      	ldr	r7, [r6, r0]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001344:	3205      	adds	r2, #5
 8001346:	401a      	ands	r2, r3
 8001348:	0092      	lsls	r2, r2, #2
 800134a:	240f      	movs	r4, #15
 800134c:	4094      	lsls	r4, r2
 800134e:	43a7      	bics	r7, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001350:	690c      	ldr	r4, [r1, #16]
 8001352:	4094      	lsls	r4, r2
 8001354:	0022      	movs	r2, r4
 8001356:	433a      	orrs	r2, r7
        GPIOx->AFR[position >> 3U] = temp;
 8001358:	5032      	str	r2, [r6, r0]
 800135a:	e056      	b.n	800140a <HAL_GPIO_Init+0xfa>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800135c:	2605      	movs	r6, #5
 800135e:	e000      	b.n	8001362 <HAL_GPIO_Init+0x52>
 8001360:	2600      	movs	r6, #0
 8001362:	40a6      	lsls	r6, r4
 8001364:	0034      	movs	r4, r6
 8001366:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001368:	3202      	adds	r2, #2
 800136a:	0092      	lsls	r2, r2, #2
 800136c:	4e41      	ldr	r6, [pc, #260]	@ (8001474 <HAL_GPIO_Init+0x164>)
 800136e:	5194      	str	r4, [r2, r6]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001370:	4a41      	ldr	r2, [pc, #260]	@ (8001478 <HAL_GPIO_Init+0x168>)
 8001372:	6897      	ldr	r7, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8001374:	43ea      	mvns	r2, r5
 8001376:	003e      	movs	r6, r7
 8001378:	43ae      	bics	r6, r5
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800137a:	684c      	ldr	r4, [r1, #4]
 800137c:	02e4      	lsls	r4, r4, #11
 800137e:	d501      	bpl.n	8001384 <HAL_GPIO_Init+0x74>
        {
          temp |= iocurrent;
 8001380:	003e      	movs	r6, r7
 8001382:	432e      	orrs	r6, r5
        }
        EXTI->RTSR = temp;
 8001384:	4c3c      	ldr	r4, [pc, #240]	@ (8001478 <HAL_GPIO_Init+0x168>)
 8001386:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8001388:	68e7      	ldr	r7, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 800138a:	003e      	movs	r6, r7
 800138c:	4016      	ands	r6, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800138e:	684c      	ldr	r4, [r1, #4]
 8001390:	02a4      	lsls	r4, r4, #10
 8001392:	d501      	bpl.n	8001398 <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 8001394:	003e      	movs	r6, r7
 8001396:	432e      	orrs	r6, r5
        }
        EXTI->FTSR = temp;
 8001398:	4c37      	ldr	r4, [pc, #220]	@ (8001478 <HAL_GPIO_Init+0x168>)
 800139a:	60e6      	str	r6, [r4, #12]

        temp = EXTI->EMR;
 800139c:	6867      	ldr	r7, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 800139e:	003e      	movs	r6, r7
 80013a0:	4016      	ands	r6, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013a2:	684c      	ldr	r4, [r1, #4]
 80013a4:	03a4      	lsls	r4, r4, #14
 80013a6:	d501      	bpl.n	80013ac <HAL_GPIO_Init+0x9c>
        {
          temp |= iocurrent;
 80013a8:	003e      	movs	r6, r7
 80013aa:	432e      	orrs	r6, r5
        }
        EXTI->EMR = temp;
 80013ac:	4c32      	ldr	r4, [pc, #200]	@ (8001478 <HAL_GPIO_Init+0x168>)
 80013ae:	6066      	str	r6, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013b0:	6826      	ldr	r6, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 80013b2:	4032      	ands	r2, r6
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013b4:	684c      	ldr	r4, [r1, #4]
 80013b6:	03e4      	lsls	r4, r4, #15
 80013b8:	d501      	bpl.n	80013be <HAL_GPIO_Init+0xae>
        {
          temp |= iocurrent;
 80013ba:	002a      	movs	r2, r5
 80013bc:	4332      	orrs	r2, r6
        }
        EXTI->IMR = temp;
 80013be:	4c2e      	ldr	r4, [pc, #184]	@ (8001478 <HAL_GPIO_Init+0x168>)
 80013c0:	6022      	str	r2, [r4, #0]
      }
    }
    position++;
 80013c2:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0)
 80013c4:	680c      	ldr	r4, [r1, #0]
 80013c6:	0022      	movs	r2, r4
 80013c8:	40da      	lsrs	r2, r3
 80013ca:	d052      	beq.n	8001472 <HAL_GPIO_Init+0x162>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80013cc:	2201      	movs	r2, #1
 80013ce:	409a      	lsls	r2, r3
 80013d0:	0025      	movs	r5, r4
 80013d2:	4015      	ands	r5, r2
    if (iocurrent)
 80013d4:	4214      	tst	r4, r2
 80013d6:	d0f4      	beq.n	80013c2 <HAL_GPIO_Init+0xb2>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80013d8:	684e      	ldr	r6, [r1, #4]
 80013da:	2403      	movs	r4, #3
 80013dc:	4034      	ands	r4, r6
 80013de:	3c01      	subs	r4, #1
 80013e0:	2c01      	cmp	r4, #1
 80013e2:	d998      	bls.n	8001316 <HAL_GPIO_Init+0x6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013e4:	684c      	ldr	r4, [r1, #4]
 80013e6:	2203      	movs	r2, #3
 80013e8:	4022      	ands	r2, r4
 80013ea:	2a03      	cmp	r2, #3
 80013ec:	d008      	beq.n	8001400 <HAL_GPIO_Init+0xf0>
        temp = GPIOx->PUPDR;
 80013ee:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013f0:	005e      	lsls	r6, r3, #1
 80013f2:	2203      	movs	r2, #3
 80013f4:	40b2      	lsls	r2, r6
 80013f6:	4394      	bics	r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013f8:	688a      	ldr	r2, [r1, #8]
 80013fa:	40b2      	lsls	r2, r6
 80013fc:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 80013fe:	60c2      	str	r2, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001400:	684c      	ldr	r4, [r1, #4]
 8001402:	2203      	movs	r2, #3
 8001404:	4022      	ands	r2, r4
 8001406:	2a02      	cmp	r2, #2
 8001408:	d098      	beq.n	800133c <HAL_GPIO_Init+0x2c>
      temp = GPIOx->MODER;
 800140a:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800140c:	005e      	lsls	r6, r3, #1
 800140e:	2203      	movs	r2, #3
 8001410:	0017      	movs	r7, r2
 8001412:	40b7      	lsls	r7, r6
 8001414:	43bc      	bics	r4, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001416:	684f      	ldr	r7, [r1, #4]
 8001418:	403a      	ands	r2, r7
 800141a:	40b2      	lsls	r2, r6
 800141c:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 800141e:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001420:	684c      	ldr	r4, [r1, #4]
 8001422:	22c0      	movs	r2, #192	@ 0xc0
 8001424:	0292      	lsls	r2, r2, #10
 8001426:	4214      	tst	r4, r2
 8001428:	d0cb      	beq.n	80013c2 <HAL_GPIO_Init+0xb2>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800142a:	4c14      	ldr	r4, [pc, #80]	@ (800147c <HAL_GPIO_Init+0x16c>)
 800142c:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800142e:	2601      	movs	r6, #1
 8001430:	4332      	orrs	r2, r6
 8001432:	6362      	str	r2, [r4, #52]	@ 0x34
        temp = SYSCFG->EXTICR[position >> 2U];
 8001434:	089a      	lsrs	r2, r3, #2
 8001436:	1c94      	adds	r4, r2, #2
 8001438:	00a4      	lsls	r4, r4, #2
 800143a:	4e0e      	ldr	r6, [pc, #56]	@ (8001474 <HAL_GPIO_Init+0x164>)
 800143c:	59a7      	ldr	r7, [r4, r6]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800143e:	2403      	movs	r4, #3
 8001440:	401c      	ands	r4, r3
 8001442:	00a4      	lsls	r4, r4, #2
 8001444:	260f      	movs	r6, #15
 8001446:	40a6      	lsls	r6, r4
 8001448:	43b7      	bics	r7, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800144a:	26a0      	movs	r6, #160	@ 0xa0
 800144c:	05f6      	lsls	r6, r6, #23
 800144e:	42b0      	cmp	r0, r6
 8001450:	d086      	beq.n	8001360 <HAL_GPIO_Init+0x50>
 8001452:	4e0b      	ldr	r6, [pc, #44]	@ (8001480 <HAL_GPIO_Init+0x170>)
 8001454:	42b0      	cmp	r0, r6
 8001456:	d008      	beq.n	800146a <HAL_GPIO_Init+0x15a>
 8001458:	4e0a      	ldr	r6, [pc, #40]	@ (8001484 <HAL_GPIO_Init+0x174>)
 800145a:	42b0      	cmp	r0, r6
 800145c:	d007      	beq.n	800146e <HAL_GPIO_Init+0x15e>
 800145e:	4e0a      	ldr	r6, [pc, #40]	@ (8001488 <HAL_GPIO_Init+0x178>)
 8001460:	42b0      	cmp	r0, r6
 8001462:	d100      	bne.n	8001466 <HAL_GPIO_Init+0x156>
 8001464:	e77a      	b.n	800135c <HAL_GPIO_Init+0x4c>
 8001466:	2606      	movs	r6, #6
 8001468:	e77b      	b.n	8001362 <HAL_GPIO_Init+0x52>
 800146a:	2601      	movs	r6, #1
 800146c:	e779      	b.n	8001362 <HAL_GPIO_Init+0x52>
 800146e:	2602      	movs	r6, #2
 8001470:	e777      	b.n	8001362 <HAL_GPIO_Init+0x52>
  }
}
 8001472:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001474:	40010000 	.word	0x40010000
 8001478:	40010400 	.word	0x40010400
 800147c:	40021000 	.word	0x40021000
 8001480:	50000400 	.word	0x50000400
 8001484:	50000800 	.word	0x50000800
 8001488:	50001c00 	.word	0x50001c00

0800148c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800148c:	6903      	ldr	r3, [r0, #16]
 800148e:	420b      	tst	r3, r1
 8001490:	d001      	beq.n	8001496 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8001492:	2001      	movs	r0, #1
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001494:	4770      	bx	lr
    bitstatus = GPIO_PIN_RESET;
 8001496:	2000      	movs	r0, #0
 8001498:	e7fc      	b.n	8001494 <HAL_GPIO_ReadPin+0x8>

0800149a <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800149a:	2a00      	cmp	r2, #0
 800149c:	d001      	beq.n	80014a2 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 800149e:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80014a0:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 80014a2:	6281      	str	r1, [r0, #40]	@ 0x28
}
 80014a4:	e7fc      	b.n	80014a0 <HAL_GPIO_WritePin+0x6>

080014a6 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80014a6:	6802      	ldr	r2, [r0, #0]
 80014a8:	6993      	ldr	r3, [r2, #24]
 80014aa:	079b      	lsls	r3, r3, #30
 80014ac:	d501      	bpl.n	80014b2 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 80014ae:	2300      	movs	r3, #0
 80014b0:	6293      	str	r3, [r2, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80014b2:	6803      	ldr	r3, [r0, #0]
 80014b4:	699a      	ldr	r2, [r3, #24]
 80014b6:	07d2      	lsls	r2, r2, #31
 80014b8:	d403      	bmi.n	80014c2 <I2C_Flush_TXDR+0x1c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80014ba:	699a      	ldr	r2, [r3, #24]
 80014bc:	2101      	movs	r1, #1
 80014be:	430a      	orrs	r2, r1
 80014c0:	619a      	str	r2, [r3, #24]
  }
}
 80014c2:	4770      	bx	lr

080014c4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80014c4:	b510      	push	{r4, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80014c6:	0589      	lsls	r1, r1, #22
 80014c8:	0d89      	lsrs	r1, r1, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80014ca:	0412      	lsls	r2, r2, #16
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80014cc:	4311      	orrs	r1, r2
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80014ce:	4319      	orrs	r1, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80014d0:	9b02      	ldr	r3, [sp, #8]
 80014d2:	4319      	orrs	r1, r3
 80014d4:	0049      	lsls	r1, r1, #1
 80014d6:	0849      	lsrs	r1, r1, #1
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80014d8:	6804      	ldr	r4, [r0, #0]
 80014da:	6862      	ldr	r2, [r4, #4]
 80014dc:	0d5b      	lsrs	r3, r3, #21
 80014de:	2080      	movs	r0, #128	@ 0x80
 80014e0:	00c0      	lsls	r0, r0, #3
 80014e2:	4003      	ands	r3, r0
 80014e4:	4803      	ldr	r0, [pc, #12]	@ (80014f4 <I2C_TransferConfig+0x30>)
 80014e6:	4303      	orrs	r3, r0
 80014e8:	439a      	bics	r2, r3
 80014ea:	0013      	movs	r3, r2
 80014ec:	430b      	orrs	r3, r1
 80014ee:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80014f0:	bd10      	pop	{r4, pc}
 80014f2:	46c0      	nop			@ (mov r8, r8)
 80014f4:	03ff63ff 	.word	0x03ff63ff

080014f8 <I2C_IsErrorOccurred>:
{
 80014f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014fa:	46c6      	mov	lr, r8
 80014fc:	b500      	push	{lr}
 80014fe:	0004      	movs	r4, r0
 8001500:	000d      	movs	r5, r1
 8001502:	0017      	movs	r7, r2
  uint32_t itflag   = hi2c->Instance->ISR;
 8001504:	6801      	ldr	r1, [r0, #0]
 8001506:	698b      	ldr	r3, [r1, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001508:	2210      	movs	r2, #16
 800150a:	0016      	movs	r6, r2
 800150c:	401e      	ands	r6, r3
 800150e:	421a      	tst	r2, r3
 8001510:	d100      	bne.n	8001514 <I2C_IsErrorOccurred+0x1c>
 8001512:	e075      	b.n	8001600 <I2C_IsErrorOccurred+0x108>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001514:	2310      	movs	r3, #16
 8001516:	61cb      	str	r3, [r1, #28]
  uint32_t error_code = 0;
 8001518:	2300      	movs	r3, #0
 800151a:	4698      	mov	r8, r3
  HAL_StatusTypeDef status = HAL_OK;
 800151c:	2600      	movs	r6, #0
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800151e:	6820      	ldr	r0, [r4, #0]
 8001520:	6983      	ldr	r3, [r0, #24]
 8001522:	069b      	lsls	r3, r3, #26
 8001524:	d431      	bmi.n	800158a <I2C_IsErrorOccurred+0x92>
 8001526:	2e00      	cmp	r6, #0
 8001528:	d12f      	bne.n	800158a <I2C_IsErrorOccurred+0x92>
      if (Timeout != HAL_MAX_DELAY)
 800152a:	1c6b      	adds	r3, r5, #1
 800152c:	d0f7      	beq.n	800151e <I2C_IsErrorOccurred+0x26>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800152e:	f7ff fe77 	bl	8001220 <HAL_GetTick>
 8001532:	1bc0      	subs	r0, r0, r7
 8001534:	42a8      	cmp	r0, r5
 8001536:	d801      	bhi.n	800153c <I2C_IsErrorOccurred+0x44>
 8001538:	2d00      	cmp	r5, #0
 800153a:	d1f0      	bne.n	800151e <I2C_IsErrorOccurred+0x26>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800153c:	6821      	ldr	r1, [r4, #0]
 800153e:	684b      	ldr	r3, [r1, #4]
 8001540:	2280      	movs	r2, #128	@ 0x80
 8001542:	01d2      	lsls	r2, r2, #7
 8001544:	4013      	ands	r3, r2
          tmp2 = hi2c->Mode;
 8001546:	2242      	movs	r2, #66	@ 0x42
 8001548:	5ca2      	ldrb	r2, [r4, r2]
 800154a:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800154c:	6988      	ldr	r0, [r1, #24]
 800154e:	0400      	lsls	r0, r0, #16
 8001550:	d503      	bpl.n	800155a <I2C_IsErrorOccurred+0x62>
 8001552:	2b00      	cmp	r3, #0
 8001554:	d101      	bne.n	800155a <I2C_IsErrorOccurred+0x62>
              (tmp1 != I2C_CR2_STOP) && \
 8001556:	2a20      	cmp	r2, #32
 8001558:	d10e      	bne.n	8001578 <I2C_IsErrorOccurred+0x80>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800155a:	6823      	ldr	r3, [r4, #0]
 800155c:	699b      	ldr	r3, [r3, #24]
 800155e:	069b      	lsls	r3, r3, #26
 8001560:	d4dd      	bmi.n	800151e <I2C_IsErrorOccurred+0x26>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001562:	f7ff fe5d 	bl	8001220 <HAL_GetTick>
 8001566:	1bc0      	subs	r0, r0, r7
 8001568:	2819      	cmp	r0, #25
 800156a:	d9f6      	bls.n	800155a <I2C_IsErrorOccurred+0x62>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800156c:	2320      	movs	r3, #32
 800156e:	4642      	mov	r2, r8
 8001570:	431a      	orrs	r2, r3
 8001572:	4690      	mov	r8, r2
              status = HAL_ERROR;
 8001574:	2601      	movs	r6, #1
              break;
 8001576:	e7d2      	b.n	800151e <I2C_IsErrorOccurred+0x26>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001578:	684a      	ldr	r2, [r1, #4]
 800157a:	2380      	movs	r3, #128	@ 0x80
 800157c:	01db      	lsls	r3, r3, #7
 800157e:	4313      	orrs	r3, r2
 8001580:	604b      	str	r3, [r1, #4]
            tickstart = HAL_GetTick();
 8001582:	f7ff fe4d 	bl	8001220 <HAL_GetTick>
 8001586:	0007      	movs	r7, r0
 8001588:	e7e7      	b.n	800155a <I2C_IsErrorOccurred+0x62>
    if (status == HAL_OK)
 800158a:	2e00      	cmp	r6, #0
 800158c:	d101      	bne.n	8001592 <I2C_IsErrorOccurred+0x9a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800158e:	2320      	movs	r3, #32
 8001590:	61c3      	str	r3, [r0, #28]
    error_code |= HAL_I2C_ERROR_AF;
 8001592:	2604      	movs	r6, #4
 8001594:	4643      	mov	r3, r8
 8001596:	4333      	orrs	r3, r6
 8001598:	001e      	movs	r6, r3
    status = HAL_ERROR;
 800159a:	2501      	movs	r5, #1
  itflag = hi2c->Instance->ISR;
 800159c:	6822      	ldr	r2, [r4, #0]
 800159e:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80015a0:	05d9      	lsls	r1, r3, #23
 80015a2:	d504      	bpl.n	80015ae <I2C_IsErrorOccurred+0xb6>
    error_code |= HAL_I2C_ERROR_BERR;
 80015a4:	2101      	movs	r1, #1
 80015a6:	430e      	orrs	r6, r1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80015a8:	31ff      	adds	r1, #255	@ 0xff
 80015aa:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 80015ac:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80015ae:	055a      	lsls	r2, r3, #21
 80015b0:	d506      	bpl.n	80015c0 <I2C_IsErrorOccurred+0xc8>
    error_code |= HAL_I2C_ERROR_OVR;
 80015b2:	2208      	movs	r2, #8
 80015b4:	4316      	orrs	r6, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80015b6:	6822      	ldr	r2, [r4, #0]
 80015b8:	2180      	movs	r1, #128	@ 0x80
 80015ba:	00c9      	lsls	r1, r1, #3
 80015bc:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 80015be:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80015c0:	059b      	lsls	r3, r3, #22
 80015c2:	d51f      	bpl.n	8001604 <I2C_IsErrorOccurred+0x10c>
    error_code |= HAL_I2C_ERROR_ARLO;
 80015c4:	2302      	movs	r3, #2
 80015c6:	431e      	orrs	r6, r3
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80015c8:	6823      	ldr	r3, [r4, #0]
 80015ca:	2280      	movs	r2, #128	@ 0x80
 80015cc:	0092      	lsls	r2, r2, #2
 80015ce:	61da      	str	r2, [r3, #28]
    status = HAL_ERROR;
 80015d0:	2501      	movs	r5, #1
    I2C_Flush_TXDR(hi2c);
 80015d2:	0020      	movs	r0, r4
 80015d4:	f7ff ff67 	bl	80014a6 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80015d8:	6822      	ldr	r2, [r4, #0]
 80015da:	6853      	ldr	r3, [r2, #4]
 80015dc:	490b      	ldr	r1, [pc, #44]	@ (800160c <I2C_IsErrorOccurred+0x114>)
 80015de:	400b      	ands	r3, r1
 80015e0:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 80015e2:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80015e4:	4333      	orrs	r3, r6
 80015e6:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80015e8:	2341      	movs	r3, #65	@ 0x41
 80015ea:	2220      	movs	r2, #32
 80015ec:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80015ee:	2300      	movs	r3, #0
 80015f0:	3222      	adds	r2, #34	@ 0x22
 80015f2:	54a3      	strb	r3, [r4, r2]
    __HAL_UNLOCK(hi2c);
 80015f4:	3a02      	subs	r2, #2
 80015f6:	54a3      	strb	r3, [r4, r2]
}
 80015f8:	0028      	movs	r0, r5
 80015fa:	bc80      	pop	{r7}
 80015fc:	46b8      	mov	r8, r7
 80015fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8001600:	2500      	movs	r5, #0
 8001602:	e7cb      	b.n	800159c <I2C_IsErrorOccurred+0xa4>
  if (status != HAL_OK)
 8001604:	2d00      	cmp	r5, #0
 8001606:	d0f7      	beq.n	80015f8 <I2C_IsErrorOccurred+0x100>
 8001608:	e7e3      	b.n	80015d2 <I2C_IsErrorOccurred+0xda>
 800160a:	46c0      	nop			@ (mov r8, r8)
 800160c:	fe00e800 	.word	0xfe00e800

08001610 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8001610:	b570      	push	{r4, r5, r6, lr}
 8001612:	0004      	movs	r4, r0
 8001614:	000d      	movs	r5, r1
 8001616:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001618:	6823      	ldr	r3, [r4, #0]
 800161a:	699b      	ldr	r3, [r3, #24]
 800161c:	079b      	lsls	r3, r3, #30
 800161e:	d420      	bmi.n	8001662 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001620:	0032      	movs	r2, r6
 8001622:	0029      	movs	r1, r5
 8001624:	0020      	movs	r0, r4
 8001626:	f7ff ff67 	bl	80014f8 <I2C_IsErrorOccurred>
 800162a:	2800      	cmp	r0, #0
 800162c:	d11b      	bne.n	8001666 <I2C_WaitOnTXISFlagUntilTimeout+0x56>
    if (Timeout != HAL_MAX_DELAY)
 800162e:	1c6b      	adds	r3, r5, #1
 8001630:	d0f2      	beq.n	8001618 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001632:	f7ff fdf5 	bl	8001220 <HAL_GetTick>
 8001636:	1b80      	subs	r0, r0, r6
 8001638:	42a8      	cmp	r0, r5
 800163a:	d801      	bhi.n	8001640 <I2C_WaitOnTXISFlagUntilTimeout+0x30>
 800163c:	2d00      	cmp	r5, #0
 800163e:	d1eb      	bne.n	8001618 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001640:	6823      	ldr	r3, [r4, #0]
 8001642:	699b      	ldr	r3, [r3, #24]
 8001644:	079b      	lsls	r3, r3, #30
 8001646:	d4e7      	bmi.n	8001618 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001648:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800164a:	2220      	movs	r2, #32
 800164c:	4313      	orrs	r3, r2
 800164e:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001650:	2341      	movs	r3, #65	@ 0x41
 8001652:	54e2      	strb	r2, [r4, r3]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001654:	2300      	movs	r3, #0
 8001656:	3222      	adds	r2, #34	@ 0x22
 8001658:	54a3      	strb	r3, [r4, r2]
          __HAL_UNLOCK(hi2c);
 800165a:	3a02      	subs	r2, #2
 800165c:	54a3      	strb	r3, [r4, r2]
          return HAL_ERROR;
 800165e:	2001      	movs	r0, #1
 8001660:	e000      	b.n	8001664 <I2C_WaitOnTXISFlagUntilTimeout+0x54>
  return HAL_OK;
 8001662:	2000      	movs	r0, #0
}
 8001664:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001666:	2001      	movs	r0, #1
 8001668:	e7fc      	b.n	8001664 <I2C_WaitOnTXISFlagUntilTimeout+0x54>

0800166a <I2C_WaitOnFlagUntilTimeout>:
{
 800166a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800166c:	46ce      	mov	lr, r9
 800166e:	b500      	push	{lr}
 8001670:	b082      	sub	sp, #8
 8001672:	0007      	movs	r7, r0
 8001674:	000d      	movs	r5, r1
 8001676:	0016      	movs	r6, r2
 8001678:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	699c      	ldr	r4, [r3, #24]
 800167e:	402c      	ands	r4, r5
 8001680:	1b64      	subs	r4, r4, r5
 8001682:	4263      	negs	r3, r4
 8001684:	415c      	adcs	r4, r3
 8001686:	9601      	str	r6, [sp, #4]
 8001688:	42b4      	cmp	r4, r6
 800168a:	d121      	bne.n	80016d0 <I2C_WaitOnFlagUntilTimeout+0x66>
    if (Timeout != HAL_MAX_DELAY)
 800168c:	464b      	mov	r3, r9
 800168e:	3301      	adds	r3, #1
 8001690:	d0f3      	beq.n	800167a <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001692:	f7ff fdc5 	bl	8001220 <HAL_GetTick>
 8001696:	9b08      	ldr	r3, [sp, #32]
 8001698:	1ac0      	subs	r0, r0, r3
 800169a:	4548      	cmp	r0, r9
 800169c:	d802      	bhi.n	80016a4 <I2C_WaitOnFlagUntilTimeout+0x3a>
 800169e:	464b      	mov	r3, r9
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d1ea      	bne.n	800167a <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	699b      	ldr	r3, [r3, #24]
 80016a8:	402b      	ands	r3, r5
 80016aa:	1b5b      	subs	r3, r3, r5
 80016ac:	425a      	negs	r2, r3
 80016ae:	4153      	adcs	r3, r2
 80016b0:	9a01      	ldr	r2, [sp, #4]
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d1e1      	bne.n	800167a <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80016b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80016b8:	2220      	movs	r2, #32
 80016ba:	4313      	orrs	r3, r2
 80016bc:	647b      	str	r3, [r7, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80016be:	2341      	movs	r3, #65	@ 0x41
 80016c0:	54fa      	strb	r2, [r7, r3]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80016c2:	2300      	movs	r3, #0
 80016c4:	3222      	adds	r2, #34	@ 0x22
 80016c6:	54bb      	strb	r3, [r7, r2]
          __HAL_UNLOCK(hi2c);
 80016c8:	3a02      	subs	r2, #2
 80016ca:	54bb      	strb	r3, [r7, r2]
          return HAL_ERROR;
 80016cc:	2001      	movs	r0, #1
 80016ce:	e000      	b.n	80016d2 <I2C_WaitOnFlagUntilTimeout+0x68>
  return HAL_OK;
 80016d0:	2000      	movs	r0, #0
}
 80016d2:	b002      	add	sp, #8
 80016d4:	bc80      	pop	{r7}
 80016d6:	46b9      	mov	r9, r7
 80016d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080016da <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80016da:	b570      	push	{r4, r5, r6, lr}
 80016dc:	0004      	movs	r4, r0
 80016de:	000d      	movs	r5, r1
 80016e0:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80016e2:	e003      	b.n	80016ec <I2C_WaitOnSTOPFlagUntilTimeout+0x12>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80016e4:	6823      	ldr	r3, [r4, #0]
 80016e6:	699b      	ldr	r3, [r3, #24]
 80016e8:	069b      	lsls	r3, r3, #26
 80016ea:	d512      	bpl.n	8001712 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80016ec:	6823      	ldr	r3, [r4, #0]
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	069b      	lsls	r3, r3, #26
 80016f2:	d41b      	bmi.n	800172c <I2C_WaitOnSTOPFlagUntilTimeout+0x52>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80016f4:	0032      	movs	r2, r6
 80016f6:	0029      	movs	r1, r5
 80016f8:	0020      	movs	r0, r4
 80016fa:	f7ff fefd 	bl	80014f8 <I2C_IsErrorOccurred>
 80016fe:	2800      	cmp	r0, #0
 8001700:	d116      	bne.n	8001730 <I2C_WaitOnSTOPFlagUntilTimeout+0x56>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001702:	f7ff fd8d 	bl	8001220 <HAL_GetTick>
 8001706:	1b80      	subs	r0, r0, r6
 8001708:	42a8      	cmp	r0, r5
 800170a:	d8eb      	bhi.n	80016e4 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
 800170c:	2d00      	cmp	r5, #0
 800170e:	d1ed      	bne.n	80016ec <I2C_WaitOnSTOPFlagUntilTimeout+0x12>
 8001710:	e7e8      	b.n	80016e4 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001712:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8001714:	2220      	movs	r2, #32
 8001716:	4313      	orrs	r3, r2
 8001718:	6463      	str	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800171a:	2341      	movs	r3, #65	@ 0x41
 800171c:	54e2      	strb	r2, [r4, r3]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800171e:	2300      	movs	r3, #0
 8001720:	3222      	adds	r2, #34	@ 0x22
 8001722:	54a3      	strb	r3, [r4, r2]
        __HAL_UNLOCK(hi2c);
 8001724:	3a02      	subs	r2, #2
 8001726:	54a3      	strb	r3, [r4, r2]
        return HAL_ERROR;
 8001728:	2001      	movs	r0, #1
 800172a:	e000      	b.n	800172e <I2C_WaitOnSTOPFlagUntilTimeout+0x54>
  return HAL_OK;
 800172c:	2000      	movs	r0, #0
}
 800172e:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001730:	2001      	movs	r0, #1
 8001732:	e7fc      	b.n	800172e <I2C_WaitOnSTOPFlagUntilTimeout+0x54>

08001734 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8001734:	b570      	push	{r4, r5, r6, lr}
 8001736:	0004      	movs	r4, r0
 8001738:	000d      	movs	r5, r1
 800173a:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800173c:	e024      	b.n	8001788 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800173e:	6993      	ldr	r3, [r2, #24]
 8001740:	075b      	lsls	r3, r3, #29
 8001742:	d502      	bpl.n	800174a <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
 8001744:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8001746:	2b00      	cmp	r3, #0
 8001748:	d141      	bne.n	80017ce <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800174a:	6993      	ldr	r3, [r2, #24]
 800174c:	06db      	lsls	r3, r3, #27
 800174e:	d514      	bpl.n	800177a <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001750:	2310      	movs	r3, #16
 8001752:	61d3      	str	r3, [r2, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001754:	3b0c      	subs	r3, #12
 8001756:	6463      	str	r3, [r4, #68]	@ 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001758:	6823      	ldr	r3, [r4, #0]
 800175a:	2220      	movs	r2, #32
 800175c:	61da      	str	r2, [r3, #28]
        I2C_RESET_CR2(hi2c);
 800175e:	6821      	ldr	r1, [r4, #0]
 8001760:	684b      	ldr	r3, [r1, #4]
 8001762:	481c      	ldr	r0, [pc, #112]	@ (80017d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa0>)
 8001764:	4003      	ands	r3, r0
 8001766:	604b      	str	r3, [r1, #4]
        hi2c->State = HAL_I2C_STATE_READY;
 8001768:	2341      	movs	r3, #65	@ 0x41
 800176a:	54e2      	strb	r2, [r4, r3]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800176c:	2300      	movs	r3, #0
 800176e:	3222      	adds	r2, #34	@ 0x22
 8001770:	54a3      	strb	r3, [r4, r2]
        __HAL_UNLOCK(hi2c);
 8001772:	3a02      	subs	r2, #2
 8001774:	54a3      	strb	r3, [r4, r2]
        return HAL_ERROR;
 8001776:	2001      	movs	r0, #1
 8001778:	e029      	b.n	80017ce <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800177a:	2300      	movs	r3, #0
 800177c:	6463      	str	r3, [r4, #68]	@ 0x44
 800177e:	e7eb      	b.n	8001758 <I2C_WaitOnRXNEFlagUntilTimeout+0x24>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8001780:	6823      	ldr	r3, [r4, #0]
 8001782:	699b      	ldr	r3, [r3, #24]
 8001784:	075b      	lsls	r3, r3, #29
 8001786:	d516      	bpl.n	80017b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x82>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001788:	6823      	ldr	r3, [r4, #0]
 800178a:	699b      	ldr	r3, [r3, #24]
 800178c:	075b      	lsls	r3, r3, #29
 800178e:	d41d      	bmi.n	80017cc <I2C_WaitOnRXNEFlagUntilTimeout+0x98>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001790:	0032      	movs	r2, r6
 8001792:	0029      	movs	r1, r5
 8001794:	0020      	movs	r0, r4
 8001796:	f7ff feaf 	bl	80014f8 <I2C_IsErrorOccurred>
 800179a:	2800      	cmp	r0, #0
 800179c:	d118      	bne.n	80017d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x9c>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800179e:	6822      	ldr	r2, [r4, #0]
 80017a0:	6993      	ldr	r3, [r2, #24]
 80017a2:	069b      	lsls	r3, r3, #26
 80017a4:	d4cb      	bmi.n	800173e <I2C_WaitOnRXNEFlagUntilTimeout+0xa>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017a6:	f7ff fd3b 	bl	8001220 <HAL_GetTick>
 80017aa:	1b80      	subs	r0, r0, r6
 80017ac:	42a8      	cmp	r0, r5
 80017ae:	d8e7      	bhi.n	8001780 <I2C_WaitOnRXNEFlagUntilTimeout+0x4c>
 80017b0:	2d00      	cmp	r5, #0
 80017b2:	d1e9      	bne.n	8001788 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80017b4:	e7e4      	b.n	8001780 <I2C_WaitOnRXNEFlagUntilTimeout+0x4c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80017b6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80017b8:	2220      	movs	r2, #32
 80017ba:	4313      	orrs	r3, r2
 80017bc:	6463      	str	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80017be:	2341      	movs	r3, #65	@ 0x41
 80017c0:	54e2      	strb	r2, [r4, r3]
        __HAL_UNLOCK(hi2c);
 80017c2:	3b01      	subs	r3, #1
 80017c4:	2200      	movs	r2, #0
 80017c6:	54e2      	strb	r2, [r4, r3]
        return HAL_ERROR;
 80017c8:	2001      	movs	r0, #1
 80017ca:	e000      	b.n	80017ce <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
  return HAL_OK;
 80017cc:	2000      	movs	r0, #0
}
 80017ce:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80017d0:	2001      	movs	r0, #1
 80017d2:	e7fc      	b.n	80017ce <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80017d4:	fe00e800 	.word	0xfe00e800

080017d8 <HAL_I2C_Init>:
{
 80017d8:	b510      	push	{r4, lr}
 80017da:	1e04      	subs	r4, r0, #0
  if (hi2c == NULL)
 80017dc:	d059      	beq.n	8001892 <HAL_I2C_Init+0xba>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017de:	2341      	movs	r3, #65	@ 0x41
 80017e0:	5cc3      	ldrb	r3, [r0, r3]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d043      	beq.n	800186e <HAL_I2C_Init+0x96>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80017e6:	2341      	movs	r3, #65	@ 0x41
 80017e8:	2224      	movs	r2, #36	@ 0x24
 80017ea:	54e2      	strb	r2, [r4, r3]
  __HAL_I2C_DISABLE(hi2c);
 80017ec:	6822      	ldr	r2, [r4, #0]
 80017ee:	6813      	ldr	r3, [r2, #0]
 80017f0:	2101      	movs	r1, #1
 80017f2:	438b      	bics	r3, r1
 80017f4:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80017f6:	6863      	ldr	r3, [r4, #4]
 80017f8:	6822      	ldr	r2, [r4, #0]
 80017fa:	4927      	ldr	r1, [pc, #156]	@ (8001898 <HAL_I2C_Init+0xc0>)
 80017fc:	400b      	ands	r3, r1
 80017fe:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001800:	6822      	ldr	r2, [r4, #0]
 8001802:	6893      	ldr	r3, [r2, #8]
 8001804:	4925      	ldr	r1, [pc, #148]	@ (800189c <HAL_I2C_Init+0xc4>)
 8001806:	400b      	ands	r3, r1
 8001808:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800180a:	68e3      	ldr	r3, [r4, #12]
 800180c:	2b01      	cmp	r3, #1
 800180e:	d034      	beq.n	800187a <HAL_I2C_Init+0xa2>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001810:	68a1      	ldr	r1, [r4, #8]
 8001812:	6822      	ldr	r2, [r4, #0]
 8001814:	2384      	movs	r3, #132	@ 0x84
 8001816:	021b      	lsls	r3, r3, #8
 8001818:	430b      	orrs	r3, r1
 800181a:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800181c:	68e3      	ldr	r3, [r4, #12]
 800181e:	2b02      	cmp	r3, #2
 8001820:	d032      	beq.n	8001888 <HAL_I2C_Init+0xb0>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001822:	6822      	ldr	r2, [r4, #0]
 8001824:	6851      	ldr	r1, [r2, #4]
 8001826:	4b1e      	ldr	r3, [pc, #120]	@ (80018a0 <HAL_I2C_Init+0xc8>)
 8001828:	430b      	orrs	r3, r1
 800182a:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800182c:	6822      	ldr	r2, [r4, #0]
 800182e:	68d3      	ldr	r3, [r2, #12]
 8001830:	491a      	ldr	r1, [pc, #104]	@ (800189c <HAL_I2C_Init+0xc4>)
 8001832:	400b      	ands	r3, r1
 8001834:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001836:	6923      	ldr	r3, [r4, #16]
 8001838:	6962      	ldr	r2, [r4, #20]
 800183a:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800183c:	69a2      	ldr	r2, [r4, #24]
 800183e:	0212      	lsls	r2, r2, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001840:	6821      	ldr	r1, [r4, #0]
 8001842:	4313      	orrs	r3, r2
 8001844:	60cb      	str	r3, [r1, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001846:	69e3      	ldr	r3, [r4, #28]
 8001848:	6a21      	ldr	r1, [r4, #32]
 800184a:	6822      	ldr	r2, [r4, #0]
 800184c:	430b      	orrs	r3, r1
 800184e:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8001850:	6822      	ldr	r2, [r4, #0]
 8001852:	6813      	ldr	r3, [r2, #0]
 8001854:	2101      	movs	r1, #1
 8001856:	430b      	orrs	r3, r1
 8001858:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800185a:	2300      	movs	r3, #0
 800185c:	6463      	str	r3, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800185e:	2241      	movs	r2, #65	@ 0x41
 8001860:	311f      	adds	r1, #31
 8001862:	54a1      	strb	r1, [r4, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001864:	6323      	str	r3, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001866:	3201      	adds	r2, #1
 8001868:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 800186a:	2000      	movs	r0, #0
}
 800186c:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 800186e:	3340      	adds	r3, #64	@ 0x40
 8001870:	2200      	movs	r2, #0
 8001872:	54c2      	strb	r2, [r0, r3]
    HAL_I2C_MspInit(hi2c);
 8001874:	f7ff fa52 	bl	8000d1c <HAL_I2C_MspInit>
 8001878:	e7b5      	b.n	80017e6 <HAL_I2C_Init+0xe>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800187a:	68a1      	ldr	r1, [r4, #8]
 800187c:	6822      	ldr	r2, [r4, #0]
 800187e:	2380      	movs	r3, #128	@ 0x80
 8001880:	021b      	lsls	r3, r3, #8
 8001882:	430b      	orrs	r3, r1
 8001884:	6093      	str	r3, [r2, #8]
 8001886:	e7c9      	b.n	800181c <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001888:	6823      	ldr	r3, [r4, #0]
 800188a:	2280      	movs	r2, #128	@ 0x80
 800188c:	0112      	lsls	r2, r2, #4
 800188e:	605a      	str	r2, [r3, #4]
 8001890:	e7c7      	b.n	8001822 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8001892:	2001      	movs	r0, #1
 8001894:	e7ea      	b.n	800186c <HAL_I2C_Init+0x94>
 8001896:	46c0      	nop			@ (mov r8, r8)
 8001898:	f0ffffff 	.word	0xf0ffffff
 800189c:	ffff7fff 	.word	0xffff7fff
 80018a0:	02008000 	.word	0x02008000

080018a4 <HAL_I2C_Master_Transmit>:
{
 80018a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018a6:	b085      	sub	sp, #20
 80018a8:	0004      	movs	r4, r0
 80018aa:	000f      	movs	r7, r1
 80018ac:	9202      	str	r2, [sp, #8]
 80018ae:	9303      	str	r3, [sp, #12]
 80018b0:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 80018b2:	2341      	movs	r3, #65	@ 0x41
 80018b4:	5cc3      	ldrb	r3, [r0, r3]
 80018b6:	2b20      	cmp	r3, #32
 80018b8:	d000      	beq.n	80018bc <HAL_I2C_Master_Transmit+0x18>
 80018ba:	e09b      	b.n	80019f4 <HAL_I2C_Master_Transmit+0x150>
    __HAL_LOCK(hi2c);
 80018bc:	3320      	adds	r3, #32
 80018be:	5cc3      	ldrb	r3, [r0, r3]
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d100      	bne.n	80018c6 <HAL_I2C_Master_Transmit+0x22>
 80018c4:	e099      	b.n	80019fa <HAL_I2C_Master_Transmit+0x156>
 80018c6:	2340      	movs	r3, #64	@ 0x40
 80018c8:	2201      	movs	r2, #1
 80018ca:	54c2      	strb	r2, [r0, r3]
    tickstart = HAL_GetTick();
 80018cc:	f7ff fca8 	bl	8001220 <HAL_GetTick>
 80018d0:	0006      	movs	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80018d2:	2180      	movs	r1, #128	@ 0x80
 80018d4:	9000      	str	r0, [sp, #0]
 80018d6:	2319      	movs	r3, #25
 80018d8:	2201      	movs	r2, #1
 80018da:	0209      	lsls	r1, r1, #8
 80018dc:	0020      	movs	r0, r4
 80018de:	f7ff fec4 	bl	800166a <I2C_WaitOnFlagUntilTimeout>
 80018e2:	2800      	cmp	r0, #0
 80018e4:	d000      	beq.n	80018e8 <HAL_I2C_Master_Transmit+0x44>
 80018e6:	e08a      	b.n	80019fe <HAL_I2C_Master_Transmit+0x15a>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80018e8:	2341      	movs	r3, #65	@ 0x41
 80018ea:	2221      	movs	r2, #33	@ 0x21
 80018ec:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80018ee:	3301      	adds	r3, #1
 80018f0:	3a11      	subs	r2, #17
 80018f2:	54e2      	strb	r2, [r4, r3]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018f4:	2300      	movs	r3, #0
 80018f6:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
 80018f8:	9a02      	ldr	r2, [sp, #8]
 80018fa:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 80018fc:	9a03      	ldr	r2, [sp, #12]
 80018fe:	8562      	strh	r2, [r4, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001900:	6363      	str	r3, [r4, #52]	@ 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001902:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001904:	b29b      	uxth	r3, r3
 8001906:	2bff      	cmp	r3, #255	@ 0xff
 8001908:	d90b      	bls.n	8001922 <HAL_I2C_Master_Transmit+0x7e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800190a:	23ff      	movs	r3, #255	@ 0xff
 800190c:	8523      	strh	r3, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800190e:	3b7f      	subs	r3, #127	@ 0x7f
 8001910:	4a3f      	ldr	r2, [pc, #252]	@ (8001a10 <HAL_I2C_Master_Transmit+0x16c>)
 8001912:	9200      	str	r2, [sp, #0]
 8001914:	045b      	lsls	r3, r3, #17
 8001916:	22ff      	movs	r2, #255	@ 0xff
 8001918:	0039      	movs	r1, r7
 800191a:	0020      	movs	r0, r4
 800191c:	f7ff fdd2 	bl	80014c4 <I2C_TransferConfig>
 8001920:	e018      	b.n	8001954 <HAL_I2C_Master_Transmit+0xb0>
      hi2c->XferSize = hi2c->XferCount;
 8001922:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8001924:	b292      	uxth	r2, r2
 8001926:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001928:	2380      	movs	r3, #128	@ 0x80
 800192a:	b2d2      	uxtb	r2, r2
 800192c:	4938      	ldr	r1, [pc, #224]	@ (8001a10 <HAL_I2C_Master_Transmit+0x16c>)
 800192e:	9100      	str	r1, [sp, #0]
 8001930:	049b      	lsls	r3, r3, #18
 8001932:	0039      	movs	r1, r7
 8001934:	0020      	movs	r0, r4
 8001936:	f7ff fdc5 	bl	80014c4 <I2C_TransferConfig>
 800193a:	e00b      	b.n	8001954 <HAL_I2C_Master_Transmit+0xb0>
          hi2c->XferSize = hi2c->XferCount;
 800193c:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800193e:	b292      	uxth	r2, r2
 8001940:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001942:	2380      	movs	r3, #128	@ 0x80
 8001944:	b2d2      	uxtb	r2, r2
 8001946:	2100      	movs	r1, #0
 8001948:	9100      	str	r1, [sp, #0]
 800194a:	049b      	lsls	r3, r3, #18
 800194c:	0039      	movs	r1, r7
 800194e:	0020      	movs	r0, r4
 8001950:	f7ff fdb8 	bl	80014c4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001954:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001956:	b29b      	uxth	r3, r3
 8001958:	2b00      	cmp	r3, #0
 800195a:	d034      	beq.n	80019c6 <HAL_I2C_Master_Transmit+0x122>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800195c:	0032      	movs	r2, r6
 800195e:	0029      	movs	r1, r5
 8001960:	0020      	movs	r0, r4
 8001962:	f7ff fe55 	bl	8001610 <I2C_WaitOnTXISFlagUntilTimeout>
 8001966:	2800      	cmp	r0, #0
 8001968:	d14b      	bne.n	8001a02 <HAL_I2C_Master_Transmit+0x15e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800196a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800196c:	6823      	ldr	r3, [r4, #0]
 800196e:	7812      	ldrb	r2, [r2, #0]
 8001970:	629a      	str	r2, [r3, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8001972:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001974:	3301      	adds	r3, #1
 8001976:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8001978:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800197a:	3b01      	subs	r3, #1
 800197c:	b29b      	uxth	r3, r3
 800197e:	8563      	strh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8001980:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8001982:	3b01      	subs	r3, #1
 8001984:	b29b      	uxth	r3, r3
 8001986:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001988:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800198a:	b292      	uxth	r2, r2
 800198c:	2a00      	cmp	r2, #0
 800198e:	d0e1      	beq.n	8001954 <HAL_I2C_Master_Transmit+0xb0>
 8001990:	2b00      	cmp	r3, #0
 8001992:	d1df      	bne.n	8001954 <HAL_I2C_Master_Transmit+0xb0>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001994:	9600      	str	r6, [sp, #0]
 8001996:	002b      	movs	r3, r5
 8001998:	2200      	movs	r2, #0
 800199a:	2180      	movs	r1, #128	@ 0x80
 800199c:	0020      	movs	r0, r4
 800199e:	f7ff fe64 	bl	800166a <I2C_WaitOnFlagUntilTimeout>
 80019a2:	2800      	cmp	r0, #0
 80019a4:	d12f      	bne.n	8001a06 <HAL_I2C_Master_Transmit+0x162>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80019a6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80019a8:	b29b      	uxth	r3, r3
 80019aa:	2bff      	cmp	r3, #255	@ 0xff
 80019ac:	d9c6      	bls.n	800193c <HAL_I2C_Master_Transmit+0x98>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80019ae:	23ff      	movs	r3, #255	@ 0xff
 80019b0:	8523      	strh	r3, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80019b2:	3b7f      	subs	r3, #127	@ 0x7f
 80019b4:	2200      	movs	r2, #0
 80019b6:	9200      	str	r2, [sp, #0]
 80019b8:	045b      	lsls	r3, r3, #17
 80019ba:	32ff      	adds	r2, #255	@ 0xff
 80019bc:	0039      	movs	r1, r7
 80019be:	0020      	movs	r0, r4
 80019c0:	f7ff fd80 	bl	80014c4 <I2C_TransferConfig>
 80019c4:	e7c6      	b.n	8001954 <HAL_I2C_Master_Transmit+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019c6:	0032      	movs	r2, r6
 80019c8:	0029      	movs	r1, r5
 80019ca:	0020      	movs	r0, r4
 80019cc:	f7ff fe85 	bl	80016da <I2C_WaitOnSTOPFlagUntilTimeout>
 80019d0:	2800      	cmp	r0, #0
 80019d2:	d11a      	bne.n	8001a0a <HAL_I2C_Master_Transmit+0x166>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80019d4:	6823      	ldr	r3, [r4, #0]
 80019d6:	2220      	movs	r2, #32
 80019d8:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80019da:	6821      	ldr	r1, [r4, #0]
 80019dc:	684b      	ldr	r3, [r1, #4]
 80019de:	4d0d      	ldr	r5, [pc, #52]	@ (8001a14 <HAL_I2C_Master_Transmit+0x170>)
 80019e0:	402b      	ands	r3, r5
 80019e2:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80019e4:	2341      	movs	r3, #65	@ 0x41
 80019e6:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80019e8:	2300      	movs	r3, #0
 80019ea:	3222      	adds	r2, #34	@ 0x22
 80019ec:	54a3      	strb	r3, [r4, r2]
    __HAL_UNLOCK(hi2c);
 80019ee:	3a02      	subs	r2, #2
 80019f0:	54a3      	strb	r3, [r4, r2]
    return HAL_OK;
 80019f2:	e000      	b.n	80019f6 <HAL_I2C_Master_Transmit+0x152>
    return HAL_BUSY;
 80019f4:	2002      	movs	r0, #2
}
 80019f6:	b005      	add	sp, #20
 80019f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 80019fa:	2002      	movs	r0, #2
 80019fc:	e7fb      	b.n	80019f6 <HAL_I2C_Master_Transmit+0x152>
      return HAL_ERROR;
 80019fe:	2001      	movs	r0, #1
 8001a00:	e7f9      	b.n	80019f6 <HAL_I2C_Master_Transmit+0x152>
        return HAL_ERROR;
 8001a02:	2001      	movs	r0, #1
 8001a04:	e7f7      	b.n	80019f6 <HAL_I2C_Master_Transmit+0x152>
          return HAL_ERROR;
 8001a06:	2001      	movs	r0, #1
 8001a08:	e7f5      	b.n	80019f6 <HAL_I2C_Master_Transmit+0x152>
      return HAL_ERROR;
 8001a0a:	2001      	movs	r0, #1
 8001a0c:	e7f3      	b.n	80019f6 <HAL_I2C_Master_Transmit+0x152>
 8001a0e:	46c0      	nop			@ (mov r8, r8)
 8001a10:	80002000 	.word	0x80002000
 8001a14:	fe00e800 	.word	0xfe00e800

08001a18 <HAL_I2C_Master_Receive>:
{
 8001a18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a1a:	b085      	sub	sp, #20
 8001a1c:	0004      	movs	r4, r0
 8001a1e:	000f      	movs	r7, r1
 8001a20:	9202      	str	r2, [sp, #8]
 8001a22:	9303      	str	r3, [sp, #12]
 8001a24:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a26:	2341      	movs	r3, #65	@ 0x41
 8001a28:	5cc3      	ldrb	r3, [r0, r3]
 8001a2a:	2b20      	cmp	r3, #32
 8001a2c:	d000      	beq.n	8001a30 <HAL_I2C_Master_Receive+0x18>
 8001a2e:	e09b      	b.n	8001b68 <HAL_I2C_Master_Receive+0x150>
    __HAL_LOCK(hi2c);
 8001a30:	3320      	adds	r3, #32
 8001a32:	5cc3      	ldrb	r3, [r0, r3]
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d100      	bne.n	8001a3a <HAL_I2C_Master_Receive+0x22>
 8001a38:	e099      	b.n	8001b6e <HAL_I2C_Master_Receive+0x156>
 8001a3a:	2340      	movs	r3, #64	@ 0x40
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	54c2      	strb	r2, [r0, r3]
    tickstart = HAL_GetTick();
 8001a40:	f7ff fbee 	bl	8001220 <HAL_GetTick>
 8001a44:	0006      	movs	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001a46:	2180      	movs	r1, #128	@ 0x80
 8001a48:	9000      	str	r0, [sp, #0]
 8001a4a:	2319      	movs	r3, #25
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	0209      	lsls	r1, r1, #8
 8001a50:	0020      	movs	r0, r4
 8001a52:	f7ff fe0a 	bl	800166a <I2C_WaitOnFlagUntilTimeout>
 8001a56:	2800      	cmp	r0, #0
 8001a58:	d000      	beq.n	8001a5c <HAL_I2C_Master_Receive+0x44>
 8001a5a:	e08a      	b.n	8001b72 <HAL_I2C_Master_Receive+0x15a>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001a5c:	2341      	movs	r3, #65	@ 0x41
 8001a5e:	2222      	movs	r2, #34	@ 0x22
 8001a60:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001a62:	3301      	adds	r3, #1
 8001a64:	3a12      	subs	r2, #18
 8001a66:	54e2      	strb	r2, [r4, r3]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
 8001a6c:	9a02      	ldr	r2, [sp, #8]
 8001a6e:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001a70:	9a03      	ldr	r2, [sp, #12]
 8001a72:	8562      	strh	r2, [r4, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001a74:	6363      	str	r3, [r4, #52]	@ 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a76:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	2bff      	cmp	r3, #255	@ 0xff
 8001a7c:	d90b      	bls.n	8001a96 <HAL_I2C_Master_Receive+0x7e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a7e:	23ff      	movs	r3, #255	@ 0xff
 8001a80:	8523      	strh	r3, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001a82:	3b7f      	subs	r3, #127	@ 0x7f
 8001a84:	4a3f      	ldr	r2, [pc, #252]	@ (8001b84 <HAL_I2C_Master_Receive+0x16c>)
 8001a86:	9200      	str	r2, [sp, #0]
 8001a88:	045b      	lsls	r3, r3, #17
 8001a8a:	22ff      	movs	r2, #255	@ 0xff
 8001a8c:	0039      	movs	r1, r7
 8001a8e:	0020      	movs	r0, r4
 8001a90:	f7ff fd18 	bl	80014c4 <I2C_TransferConfig>
 8001a94:	e018      	b.n	8001ac8 <HAL_I2C_Master_Receive+0xb0>
      hi2c->XferSize = hi2c->XferCount;
 8001a96:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8001a98:	b292      	uxth	r2, r2
 8001a9a:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001a9c:	2380      	movs	r3, #128	@ 0x80
 8001a9e:	b2d2      	uxtb	r2, r2
 8001aa0:	4938      	ldr	r1, [pc, #224]	@ (8001b84 <HAL_I2C_Master_Receive+0x16c>)
 8001aa2:	9100      	str	r1, [sp, #0]
 8001aa4:	049b      	lsls	r3, r3, #18
 8001aa6:	0039      	movs	r1, r7
 8001aa8:	0020      	movs	r0, r4
 8001aaa:	f7ff fd0b 	bl	80014c4 <I2C_TransferConfig>
 8001aae:	e00b      	b.n	8001ac8 <HAL_I2C_Master_Receive+0xb0>
          hi2c->XferSize = hi2c->XferCount;
 8001ab0:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8001ab2:	b292      	uxth	r2, r2
 8001ab4:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001ab6:	2380      	movs	r3, #128	@ 0x80
 8001ab8:	b2d2      	uxtb	r2, r2
 8001aba:	2100      	movs	r1, #0
 8001abc:	9100      	str	r1, [sp, #0]
 8001abe:	049b      	lsls	r3, r3, #18
 8001ac0:	0039      	movs	r1, r7
 8001ac2:	0020      	movs	r0, r4
 8001ac4:	f7ff fcfe 	bl	80014c4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001ac8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d034      	beq.n	8001b3a <HAL_I2C_Master_Receive+0x122>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ad0:	0032      	movs	r2, r6
 8001ad2:	0029      	movs	r1, r5
 8001ad4:	0020      	movs	r0, r4
 8001ad6:	f7ff fe2d 	bl	8001734 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001ada:	2800      	cmp	r0, #0
 8001adc:	d14b      	bne.n	8001b76 <HAL_I2C_Master_Receive+0x15e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001ade:	6823      	ldr	r3, [r4, #0]
 8001ae0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001ae2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001ae4:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8001ae6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001ae8:	3301      	adds	r3, #1
 8001aea:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 8001aec:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8001aee:	3b01      	subs	r3, #1
 8001af0:	b29b      	uxth	r3, r3
 8001af2:	8523      	strh	r3, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8001af4:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8001af6:	3a01      	subs	r2, #1
 8001af8:	b292      	uxth	r2, r2
 8001afa:	8562      	strh	r2, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001afc:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8001afe:	b292      	uxth	r2, r2
 8001b00:	2a00      	cmp	r2, #0
 8001b02:	d0e1      	beq.n	8001ac8 <HAL_I2C_Master_Receive+0xb0>
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d1df      	bne.n	8001ac8 <HAL_I2C_Master_Receive+0xb0>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001b08:	9600      	str	r6, [sp, #0]
 8001b0a:	002b      	movs	r3, r5
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	2180      	movs	r1, #128	@ 0x80
 8001b10:	0020      	movs	r0, r4
 8001b12:	f7ff fdaa 	bl	800166a <I2C_WaitOnFlagUntilTimeout>
 8001b16:	2800      	cmp	r0, #0
 8001b18:	d12f      	bne.n	8001b7a <HAL_I2C_Master_Receive+0x162>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b1a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	2bff      	cmp	r3, #255	@ 0xff
 8001b20:	d9c6      	bls.n	8001ab0 <HAL_I2C_Master_Receive+0x98>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b22:	23ff      	movs	r3, #255	@ 0xff
 8001b24:	8523      	strh	r3, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001b26:	3b7f      	subs	r3, #127	@ 0x7f
 8001b28:	2200      	movs	r2, #0
 8001b2a:	9200      	str	r2, [sp, #0]
 8001b2c:	045b      	lsls	r3, r3, #17
 8001b2e:	32ff      	adds	r2, #255	@ 0xff
 8001b30:	0039      	movs	r1, r7
 8001b32:	0020      	movs	r0, r4
 8001b34:	f7ff fcc6 	bl	80014c4 <I2C_TransferConfig>
 8001b38:	e7c6      	b.n	8001ac8 <HAL_I2C_Master_Receive+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b3a:	0032      	movs	r2, r6
 8001b3c:	0029      	movs	r1, r5
 8001b3e:	0020      	movs	r0, r4
 8001b40:	f7ff fdcb 	bl	80016da <I2C_WaitOnSTOPFlagUntilTimeout>
 8001b44:	2800      	cmp	r0, #0
 8001b46:	d11a      	bne.n	8001b7e <HAL_I2C_Master_Receive+0x166>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b48:	6823      	ldr	r3, [r4, #0]
 8001b4a:	2220      	movs	r2, #32
 8001b4c:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8001b4e:	6821      	ldr	r1, [r4, #0]
 8001b50:	684b      	ldr	r3, [r1, #4]
 8001b52:	4d0d      	ldr	r5, [pc, #52]	@ (8001b88 <HAL_I2C_Master_Receive+0x170>)
 8001b54:	402b      	ands	r3, r5
 8001b56:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001b58:	2341      	movs	r3, #65	@ 0x41
 8001b5a:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	3222      	adds	r2, #34	@ 0x22
 8001b60:	54a3      	strb	r3, [r4, r2]
    __HAL_UNLOCK(hi2c);
 8001b62:	3a02      	subs	r2, #2
 8001b64:	54a3      	strb	r3, [r4, r2]
    return HAL_OK;
 8001b66:	e000      	b.n	8001b6a <HAL_I2C_Master_Receive+0x152>
    return HAL_BUSY;
 8001b68:	2002      	movs	r0, #2
}
 8001b6a:	b005      	add	sp, #20
 8001b6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 8001b6e:	2002      	movs	r0, #2
 8001b70:	e7fb      	b.n	8001b6a <HAL_I2C_Master_Receive+0x152>
      return HAL_ERROR;
 8001b72:	2001      	movs	r0, #1
 8001b74:	e7f9      	b.n	8001b6a <HAL_I2C_Master_Receive+0x152>
        return HAL_ERROR;
 8001b76:	2001      	movs	r0, #1
 8001b78:	e7f7      	b.n	8001b6a <HAL_I2C_Master_Receive+0x152>
          return HAL_ERROR;
 8001b7a:	2001      	movs	r0, #1
 8001b7c:	e7f5      	b.n	8001b6a <HAL_I2C_Master_Receive+0x152>
      return HAL_ERROR;
 8001b7e:	2001      	movs	r0, #1
 8001b80:	e7f3      	b.n	8001b6a <HAL_I2C_Master_Receive+0x152>
 8001b82:	46c0      	nop			@ (mov r8, r8)
 8001b84:	80002400 	.word	0x80002400
 8001b88:	fe00e800 	.word	0xfe00e800

08001b8c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b8e:	2341      	movs	r3, #65	@ 0x41
 8001b90:	5cc3      	ldrb	r3, [r0, r3]
 8001b92:	2b20      	cmp	r3, #32
 8001b94:	d120      	bne.n	8001bd8 <HAL_I2CEx_ConfigAnalogFilter+0x4c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b96:	3320      	adds	r3, #32
 8001b98:	5cc3      	ldrb	r3, [r0, r3]
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d01e      	beq.n	8001bdc <HAL_I2CEx_ConfigAnalogFilter+0x50>
 8001b9e:	2440      	movs	r4, #64	@ 0x40
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	5502      	strb	r2, [r0, r4]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ba4:	2541      	movs	r5, #65	@ 0x41
 8001ba6:	2324      	movs	r3, #36	@ 0x24
 8001ba8:	5543      	strb	r3, [r0, r5]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001baa:	6806      	ldr	r6, [r0, #0]
 8001bac:	6833      	ldr	r3, [r6, #0]
 8001bae:	4393      	bics	r3, r2
 8001bb0:	6033      	str	r3, [r6, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001bb2:	6806      	ldr	r6, [r0, #0]
 8001bb4:	6833      	ldr	r3, [r6, #0]
 8001bb6:	4f0a      	ldr	r7, [pc, #40]	@ (8001be0 <HAL_I2CEx_ConfigAnalogFilter+0x54>)
 8001bb8:	403b      	ands	r3, r7
 8001bba:	6033      	str	r3, [r6, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001bbc:	6806      	ldr	r6, [r0, #0]
 8001bbe:	6833      	ldr	r3, [r6, #0]
 8001bc0:	430b      	orrs	r3, r1
 8001bc2:	6033      	str	r3, [r6, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001bc4:	6801      	ldr	r1, [r0, #0]
 8001bc6:	680b      	ldr	r3, [r1, #0]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	600b      	str	r3, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bcc:	2320      	movs	r3, #32
 8001bce:	5543      	strb	r3, [r0, r5]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	5503      	strb	r3, [r0, r4]

    return HAL_OK;
 8001bd4:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8001bd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8001bd8:	2002      	movs	r0, #2
 8001bda:	e7fc      	b.n	8001bd6 <HAL_I2CEx_ConfigAnalogFilter+0x4a>
    __HAL_LOCK(hi2c);
 8001bdc:	2002      	movs	r0, #2
 8001bde:	e7fa      	b.n	8001bd6 <HAL_I2CEx_ConfigAnalogFilter+0x4a>
 8001be0:	ffffefff 	.word	0xffffefff

08001be4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001be4:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001be6:	2341      	movs	r3, #65	@ 0x41
 8001be8:	5cc3      	ldrb	r3, [r0, r3]
 8001bea:	2b20      	cmp	r3, #32
 8001bec:	d11e      	bne.n	8001c2c <HAL_I2CEx_ConfigDigitalFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bee:	3320      	adds	r3, #32
 8001bf0:	5cc3      	ldrb	r3, [r0, r3]
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d01c      	beq.n	8001c30 <HAL_I2CEx_ConfigDigitalFilter+0x4c>
 8001bf6:	2440      	movs	r4, #64	@ 0x40
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	5502      	strb	r2, [r0, r4]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001bfc:	2541      	movs	r5, #65	@ 0x41
 8001bfe:	2324      	movs	r3, #36	@ 0x24
 8001c00:	5543      	strb	r3, [r0, r5]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c02:	6806      	ldr	r6, [r0, #0]
 8001c04:	6833      	ldr	r3, [r6, #0]
 8001c06:	4393      	bics	r3, r2
 8001c08:	6033      	str	r3, [r6, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001c0a:	6806      	ldr	r6, [r0, #0]
 8001c0c:	6833      	ldr	r3, [r6, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001c0e:	4f09      	ldr	r7, [pc, #36]	@ (8001c34 <HAL_I2CEx_ConfigDigitalFilter+0x50>)
 8001c10:	403b      	ands	r3, r7

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001c12:	0209      	lsls	r1, r1, #8
 8001c14:	4319      	orrs	r1, r3

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001c16:	6031      	str	r1, [r6, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c18:	6801      	ldr	r1, [r0, #0]
 8001c1a:	680b      	ldr	r3, [r1, #0]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	600b      	str	r3, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c20:	2320      	movs	r3, #32
 8001c22:	5543      	strb	r3, [r0, r5]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c24:	2300      	movs	r3, #0
 8001c26:	5503      	strb	r3, [r0, r4]

    return HAL_OK;
 8001c28:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8001c2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8001c2c:	2002      	movs	r0, #2
 8001c2e:	e7fc      	b.n	8001c2a <HAL_I2CEx_ConfigDigitalFilter+0x46>
    __HAL_LOCK(hi2c);
 8001c30:	2002      	movs	r0, #2
 8001c32:	e7fa      	b.n	8001c2a <HAL_I2CEx_ConfigDigitalFilter+0x46>
 8001c34:	fffff0ff 	.word	0xfffff0ff

08001c38 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8001c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c3a:	1e04      	subs	r4, r0, #0
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8001c3c:	d047      	beq.n	8001cce <HAL_LPTIM_Init+0x96>
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8001c3e:	232e      	movs	r3, #46	@ 0x2e
 8001c40:	5cc3      	ldrb	r3, [r0, r3]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d03d      	beq.n	8001cc2 <HAL_LPTIM_Init+0x8a>
    HAL_LPTIM_MspInit(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8001c46:	232e      	movs	r3, #46	@ 0x2e
 8001c48:	2202      	movs	r2, #2
 8001c4a:	54e2      	strb	r2, [r4, r3]

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8001c4c:	6820      	ldr	r0, [r4, #0]
 8001c4e:	68c3      	ldr	r3, [r0, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8001c50:	6865      	ldr	r5, [r4, #4]
 8001c52:	2d01      	cmp	r5, #1
 8001c54:	d004      	beq.n	8001c60 <HAL_LPTIM_Init+0x28>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8001c56:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8001c58:	2280      	movs	r2, #128	@ 0x80
 8001c5a:	0412      	lsls	r2, r2, #16
 8001c5c:	4291      	cmp	r1, r2
 8001c5e:	d101      	bne.n	8001c64 <HAL_LPTIM_Init+0x2c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8001c60:	221e      	movs	r2, #30
 8001c62:	4393      	bics	r3, r2
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8001c64:	6961      	ldr	r1, [r4, #20]
 8001c66:	4a1b      	ldr	r2, [pc, #108]	@ (8001cd4 <HAL_LPTIM_Init+0x9c>)
 8001c68:	4291      	cmp	r1, r2
 8001c6a:	d001      	beq.n	8001c70 <HAL_LPTIM_Init+0x38>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8001c6c:	4a1a      	ldr	r2, [pc, #104]	@ (8001cd8 <HAL_LPTIM_Init+0xa0>)
 8001c6e:	4013      	ands	r3, r2
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8001c70:	4a1a      	ldr	r2, [pc, #104]	@ (8001cdc <HAL_LPTIM_Init+0xa4>)
 8001c72:	401a      	ands	r2, r3
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
              hlptim->Init.Clock.Prescaler |
 8001c74:	68a3      	ldr	r3, [r4, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8001c76:	432b      	orrs	r3, r5
              hlptim->Init.OutputPolarity  |
 8001c78:	6a26      	ldr	r6, [r4, #32]
              hlptim->Init.Clock.Prescaler |
 8001c7a:	4333      	orrs	r3, r6
              hlptim->Init.UpdateMode      |
 8001c7c:	6a66      	ldr	r6, [r4, #36]	@ 0x24
              hlptim->Init.OutputPolarity  |
 8001c7e:	4333      	orrs	r3, r6
              hlptim->Init.CounterSource);
 8001c80:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
              hlptim->Init.UpdateMode      |
 8001c82:	4333      	orrs	r3, r6
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8001c84:	4313      	orrs	r3, r2

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8001c86:	2d00      	cmp	r5, #0
 8001c88:	d103      	bne.n	8001c92 <HAL_LPTIM_Init+0x5a>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8001c8a:	69e2      	ldr	r2, [r4, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8001c8c:	6927      	ldr	r7, [r4, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8001c8e:	433a      	orrs	r2, r7
 8001c90:	4313      	orrs	r3, r2
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8001c92:	2d01      	cmp	r5, #1
 8001c94:	d003      	beq.n	8001c9e <HAL_LPTIM_Init+0x66>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8001c96:	2280      	movs	r2, #128	@ 0x80
 8001c98:	0412      	lsls	r2, r2, #16
 8001c9a:	4296      	cmp	r6, r2
 8001c9c:	d103      	bne.n	8001ca6 <HAL_LPTIM_Init+0x6e>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8001c9e:	68e2      	ldr	r2, [r4, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8001ca0:	6925      	ldr	r5, [r4, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8001ca2:	432a      	orrs	r2, r5
 8001ca4:	4313      	orrs	r3, r2
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8001ca6:	4a0b      	ldr	r2, [pc, #44]	@ (8001cd4 <HAL_LPTIM_Init+0x9c>)
 8001ca8:	4291      	cmp	r1, r2
 8001caa:	d004      	beq.n	8001cb6 <HAL_LPTIM_Init+0x7e>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
                hlptim->Init.Trigger.ActiveEdge |
 8001cac:	69a2      	ldr	r2, [r4, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8001cae:	4311      	orrs	r1, r2
                hlptim->Init.Trigger.SampleTime);
 8001cb0:	69e2      	ldr	r2, [r4, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8001cb2:	4311      	orrs	r1, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8001cb4:	430b      	orrs	r3, r1
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8001cb6:	60c3      	str	r3, [r0, #12]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8001cb8:	232e      	movs	r3, #46	@ 0x2e
 8001cba:	2201      	movs	r2, #1
 8001cbc:	54e2      	strb	r2, [r4, r3]

  /* Return function status */
  return HAL_OK;
 8001cbe:	2000      	movs	r0, #0
}
 8001cc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hlptim->Lock = HAL_UNLOCKED;
 8001cc2:	332d      	adds	r3, #45	@ 0x2d
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	54c2      	strb	r2, [r0, r3]
    HAL_LPTIM_MspInit(hlptim);
 8001cc8:	f7ff f856 	bl	8000d78 <HAL_LPTIM_MspInit>
 8001ccc:	e7bb      	b.n	8001c46 <HAL_LPTIM_Init+0xe>
    return HAL_ERROR;
 8001cce:	2001      	movs	r0, #1
 8001cd0:	e7f6      	b.n	8001cc0 <HAL_LPTIM_Init+0x88>
 8001cd2:	46c0      	nop			@ (mov r8, r8)
 8001cd4:	0000ffff 	.word	0x0000ffff
 8001cd8:	ffff1f3f 	.word	0xffff1f3f
 8001cdc:	ff19f1fe 	.word	0xff19f1fe

08001ce0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ce0:	b510      	push	{r4, lr}
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001ce2:	4b26      	ldr	r3, [pc, #152]	@ (8001d7c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001ce4:	68da      	ldr	r2, [r3, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ce6:	230c      	movs	r3, #12
 8001ce8:	4013      	ands	r3, r2
 8001cea:	2b08      	cmp	r3, #8
 8001cec:	d042      	beq.n	8001d74 <HAL_RCC_GetSysClockFreq+0x94>
 8001cee:	2b0c      	cmp	r3, #12
 8001cf0:	d011      	beq.n	8001d16 <HAL_RCC_GetSysClockFreq+0x36>
 8001cf2:	2b04      	cmp	r3, #4
 8001cf4:	d009      	beq.n	8001d0a <HAL_RCC_GetSysClockFreq+0x2a>
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001cf6:	4b21      	ldr	r3, [pc, #132]	@ (8001d7c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001cf8:	685a      	ldr	r2, [r3, #4]
 8001cfa:	0b52      	lsrs	r2, r2, #13
 8001cfc:	2307      	movs	r3, #7
 8001cfe:	4013      	ands	r3, r2
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001d00:	3301      	adds	r3, #1
 8001d02:	2080      	movs	r0, #128	@ 0x80
 8001d04:	0200      	lsls	r0, r0, #8
 8001d06:	4098      	lsls	r0, r3
      break;
    }
  }
  return sysclockfreq;
}
 8001d08:	bd10      	pop	{r4, pc}
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001d0a:	4b1c      	ldr	r3, [pc, #112]	@ (8001d7c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	06db      	lsls	r3, r3, #27
 8001d10:	d532      	bpl.n	8001d78 <HAL_RCC_GetSysClockFreq+0x98>
        sysclockfreq =  (HSI_VALUE >> 2);
 8001d12:	481b      	ldr	r0, [pc, #108]	@ (8001d80 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001d14:	e7f8      	b.n	8001d08 <HAL_RCC_GetSysClockFreq+0x28>
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001d16:	0c91      	lsrs	r1, r2, #18
 8001d18:	230f      	movs	r3, #15
 8001d1a:	400b      	ands	r3, r1
 8001d1c:	4919      	ldr	r1, [pc, #100]	@ (8001d84 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001d1e:	5cc8      	ldrb	r0, [r1, r3]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001d20:	0d92      	lsrs	r2, r2, #22
 8001d22:	2303      	movs	r3, #3
 8001d24:	401a      	ands	r2, r3
 8001d26:	1c54      	adds	r4, r2, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d28:	4b14      	ldr	r3, [pc, #80]	@ (8001d7c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	03db      	lsls	r3, r3, #15
 8001d2e:	d509      	bpl.n	8001d44 <HAL_RCC_GetSysClockFreq+0x64>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001d30:	4a15      	ldr	r2, [pc, #84]	@ (8001d88 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001d32:	2300      	movs	r3, #0
 8001d34:	2100      	movs	r1, #0
 8001d36:	f7fe fa93 	bl	8000260 <__aeabi_lmul>
 8001d3a:	0022      	movs	r2, r4
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	f7fe fa6f 	bl	8000220 <__aeabi_uldivmod>
 8001d42:	e7e1      	b.n	8001d08 <HAL_RCC_GetSysClockFreq+0x28>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001d44:	4b0d      	ldr	r3, [pc, #52]	@ (8001d7c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	06db      	lsls	r3, r3, #27
 8001d4a:	d509      	bpl.n	8001d60 <HAL_RCC_GetSysClockFreq+0x80>
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001d4c:	4a0c      	ldr	r2, [pc, #48]	@ (8001d80 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001d4e:	2300      	movs	r3, #0
 8001d50:	2100      	movs	r1, #0
 8001d52:	f7fe fa85 	bl	8000260 <__aeabi_lmul>
 8001d56:	0022      	movs	r2, r4
 8001d58:	2300      	movs	r3, #0
 8001d5a:	f7fe fa61 	bl	8000220 <__aeabi_uldivmod>
 8001d5e:	e7d3      	b.n	8001d08 <HAL_RCC_GetSysClockFreq+0x28>
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001d60:	4a0a      	ldr	r2, [pc, #40]	@ (8001d8c <HAL_RCC_GetSysClockFreq+0xac>)
 8001d62:	2300      	movs	r3, #0
 8001d64:	2100      	movs	r1, #0
 8001d66:	f7fe fa7b 	bl	8000260 <__aeabi_lmul>
 8001d6a:	0022      	movs	r2, r4
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	f7fe fa57 	bl	8000220 <__aeabi_uldivmod>
 8001d72:	e7c9      	b.n	8001d08 <HAL_RCC_GetSysClockFreq+0x28>
  switch (tmpreg & RCC_CFGR_SWS)
 8001d74:	4804      	ldr	r0, [pc, #16]	@ (8001d88 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001d76:	e7c7      	b.n	8001d08 <HAL_RCC_GetSysClockFreq+0x28>
        sysclockfreq =  HSI_VALUE;
 8001d78:	4804      	ldr	r0, [pc, #16]	@ (8001d8c <HAL_RCC_GetSysClockFreq+0xac>)
  return sysclockfreq;
 8001d7a:	e7c5      	b.n	8001d08 <HAL_RCC_GetSysClockFreq+0x28>
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	003d0900 	.word	0x003d0900
 8001d84:	080032c8 	.word	0x080032c8
 8001d88:	007a1200 	.word	0x007a1200
 8001d8c:	00f42400 	.word	0x00f42400

08001d90 <HAL_RCC_OscConfig>:
{
 8001d90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d92:	b083      	sub	sp, #12
 8001d94:	1e04      	subs	r4, r0, #0
  if(RCC_OscInitStruct == NULL)
 8001d96:	d100      	bne.n	8001d9a <HAL_RCC_OscConfig+0xa>
 8001d98:	e265      	b.n	8002266 <HAL_RCC_OscConfig+0x4d6>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d9a:	4bc5      	ldr	r3, [pc, #788]	@ (80020b0 <HAL_RCC_OscConfig+0x320>)
 8001d9c:	68da      	ldr	r2, [r3, #12]
 8001d9e:	250c      	movs	r5, #12
 8001da0:	4015      	ands	r5, r2
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001da2:	68de      	ldr	r6, [r3, #12]
 8001da4:	2380      	movs	r3, #128	@ 0x80
 8001da6:	025b      	lsls	r3, r3, #9
 8001da8:	401e      	ands	r6, r3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001daa:	6803      	ldr	r3, [r0, #0]
 8001dac:	07db      	lsls	r3, r3, #31
 8001dae:	d536      	bpl.n	8001e1e <HAL_RCC_OscConfig+0x8e>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001db0:	2d08      	cmp	r5, #8
 8001db2:	d02c      	beq.n	8001e0e <HAL_RCC_OscConfig+0x7e>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001db4:	2d0c      	cmp	r5, #12
 8001db6:	d028      	beq.n	8001e0a <HAL_RCC_OscConfig+0x7a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001db8:	6863      	ldr	r3, [r4, #4]
 8001dba:	2280      	movs	r2, #128	@ 0x80
 8001dbc:	0252      	lsls	r2, r2, #9
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d055      	beq.n	8001e6e <HAL_RCC_OscConfig+0xde>
 8001dc2:	22a0      	movs	r2, #160	@ 0xa0
 8001dc4:	02d2      	lsls	r2, r2, #11
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d058      	beq.n	8001e7c <HAL_RCC_OscConfig+0xec>
 8001dca:	4bb9      	ldr	r3, [pc, #740]	@ (80020b0 <HAL_RCC_OscConfig+0x320>)
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	49b9      	ldr	r1, [pc, #740]	@ (80020b4 <HAL_RCC_OscConfig+0x324>)
 8001dd0:	400a      	ands	r2, r1
 8001dd2:	601a      	str	r2, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	2180      	movs	r1, #128	@ 0x80
 8001dd8:	0249      	lsls	r1, r1, #9
 8001dda:	400a      	ands	r2, r1
 8001ddc:	9201      	str	r2, [sp, #4]
 8001dde:	9a01      	ldr	r2, [sp, #4]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	49b5      	ldr	r1, [pc, #724]	@ (80020b8 <HAL_RCC_OscConfig+0x328>)
 8001de4:	400a      	ands	r2, r1
 8001de6:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001de8:	6863      	ldr	r3, [r4, #4]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d052      	beq.n	8001e94 <HAL_RCC_OscConfig+0x104>
        tickstart = HAL_GetTick();
 8001dee:	f7ff fa17 	bl	8001220 <HAL_GetTick>
 8001df2:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001df4:	4bae      	ldr	r3, [pc, #696]	@ (80020b0 <HAL_RCC_OscConfig+0x320>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	039b      	lsls	r3, r3, #14
 8001dfa:	d410      	bmi.n	8001e1e <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dfc:	f7ff fa10 	bl	8001220 <HAL_GetTick>
 8001e00:	1bc0      	subs	r0, r0, r7
 8001e02:	2864      	cmp	r0, #100	@ 0x64
 8001e04:	d9f6      	bls.n	8001df4 <HAL_RCC_OscConfig+0x64>
            return HAL_TIMEOUT;
 8001e06:	2003      	movs	r0, #3
 8001e08:	e22e      	b.n	8002268 <HAL_RCC_OscConfig+0x4d8>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001e0a:	2e00      	cmp	r6, #0
 8001e0c:	d0d4      	beq.n	8001db8 <HAL_RCC_OscConfig+0x28>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e0e:	4ba8      	ldr	r3, [pc, #672]	@ (80020b0 <HAL_RCC_OscConfig+0x320>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	039b      	lsls	r3, r3, #14
 8001e14:	d503      	bpl.n	8001e1e <HAL_RCC_OscConfig+0x8e>
 8001e16:	6863      	ldr	r3, [r4, #4]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d100      	bne.n	8001e1e <HAL_RCC_OscConfig+0x8e>
 8001e1c:	e226      	b.n	800226c <HAL_RCC_OscConfig+0x4dc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e1e:	6823      	ldr	r3, [r4, #0]
 8001e20:	079b      	lsls	r3, r3, #30
 8001e22:	d56d      	bpl.n	8001f00 <HAL_RCC_OscConfig+0x170>
    hsi_state = RCC_OscInitStruct->HSIState;
 8001e24:	68e3      	ldr	r3, [r4, #12]
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001e26:	069a      	lsls	r2, r3, #26
 8001e28:	d505      	bpl.n	8001e36 <HAL_RCC_OscConfig+0xa6>
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001e2a:	48a1      	ldr	r0, [pc, #644]	@ (80020b0 <HAL_RCC_OscConfig+0x320>)
 8001e2c:	6802      	ldr	r2, [r0, #0]
 8001e2e:	2120      	movs	r1, #32
 8001e30:	430a      	orrs	r2, r1
 8001e32:	6002      	str	r2, [r0, #0]
      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001e34:	438b      	bics	r3, r1
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e36:	2d04      	cmp	r5, #4
 8001e38:	d03c      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x124>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e3a:	2d0c      	cmp	r5, #12
 8001e3c:	d038      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x120>
      if(hsi_state != RCC_HSI_OFF)
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d100      	bne.n	8001e44 <HAL_RCC_OscConfig+0xb4>
 8001e42:	e0b0      	b.n	8001fa6 <HAL_RCC_OscConfig+0x216>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001e44:	499a      	ldr	r1, [pc, #616]	@ (80020b0 <HAL_RCC_OscConfig+0x320>)
 8001e46:	680a      	ldr	r2, [r1, #0]
 8001e48:	2009      	movs	r0, #9
 8001e4a:	4382      	bics	r2, r0
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 8001e50:	f7ff f9e6 	bl	8001220 <HAL_GetTick>
 8001e54:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e56:	4b96      	ldr	r3, [pc, #600]	@ (80020b0 <HAL_RCC_OscConfig+0x320>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	075b      	lsls	r3, r3, #29
 8001e5c:	d500      	bpl.n	8001e60 <HAL_RCC_OscConfig+0xd0>
 8001e5e:	e099      	b.n	8001f94 <HAL_RCC_OscConfig+0x204>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e60:	f7ff f9de 	bl	8001220 <HAL_GetTick>
 8001e64:	1b80      	subs	r0, r0, r6
 8001e66:	2802      	cmp	r0, #2
 8001e68:	d9f5      	bls.n	8001e56 <HAL_RCC_OscConfig+0xc6>
            return HAL_TIMEOUT;
 8001e6a:	2003      	movs	r0, #3
 8001e6c:	e1fc      	b.n	8002268 <HAL_RCC_OscConfig+0x4d8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e6e:	4a90      	ldr	r2, [pc, #576]	@ (80020b0 <HAL_RCC_OscConfig+0x320>)
 8001e70:	6811      	ldr	r1, [r2, #0]
 8001e72:	2380      	movs	r3, #128	@ 0x80
 8001e74:	025b      	lsls	r3, r3, #9
 8001e76:	430b      	orrs	r3, r1
 8001e78:	6013      	str	r3, [r2, #0]
 8001e7a:	e7b5      	b.n	8001de8 <HAL_RCC_OscConfig+0x58>
 8001e7c:	4b8c      	ldr	r3, [pc, #560]	@ (80020b0 <HAL_RCC_OscConfig+0x320>)
 8001e7e:	6819      	ldr	r1, [r3, #0]
 8001e80:	2280      	movs	r2, #128	@ 0x80
 8001e82:	02d2      	lsls	r2, r2, #11
 8001e84:	430a      	orrs	r2, r1
 8001e86:	601a      	str	r2, [r3, #0]
 8001e88:	6819      	ldr	r1, [r3, #0]
 8001e8a:	2280      	movs	r2, #128	@ 0x80
 8001e8c:	0252      	lsls	r2, r2, #9
 8001e8e:	430a      	orrs	r2, r1
 8001e90:	601a      	str	r2, [r3, #0]
 8001e92:	e7a9      	b.n	8001de8 <HAL_RCC_OscConfig+0x58>
        tickstart = HAL_GetTick();
 8001e94:	f7ff f9c4 	bl	8001220 <HAL_GetTick>
 8001e98:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001e9a:	4b85      	ldr	r3, [pc, #532]	@ (80020b0 <HAL_RCC_OscConfig+0x320>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	039b      	lsls	r3, r3, #14
 8001ea0:	d5bd      	bpl.n	8001e1e <HAL_RCC_OscConfig+0x8e>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ea2:	f7ff f9bd 	bl	8001220 <HAL_GetTick>
 8001ea6:	1bc0      	subs	r0, r0, r7
 8001ea8:	2864      	cmp	r0, #100	@ 0x64
 8001eaa:	d9f6      	bls.n	8001e9a <HAL_RCC_OscConfig+0x10a>
            return HAL_TIMEOUT;
 8001eac:	2003      	movs	r0, #3
 8001eae:	e1db      	b.n	8002268 <HAL_RCC_OscConfig+0x4d8>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001eb0:	2e00      	cmp	r6, #0
 8001eb2:	d1c4      	bne.n	8001e3e <HAL_RCC_OscConfig+0xae>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001eb4:	4a7e      	ldr	r2, [pc, #504]	@ (80020b0 <HAL_RCC_OscConfig+0x320>)
 8001eb6:	6812      	ldr	r2, [r2, #0]
 8001eb8:	0752      	lsls	r2, r2, #29
 8001eba:	d502      	bpl.n	8001ec2 <HAL_RCC_OscConfig+0x132>
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d100      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x132>
 8001ec0:	e1d6      	b.n	8002270 <HAL_RCC_OscConfig+0x4e0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ec2:	4e7b      	ldr	r6, [pc, #492]	@ (80020b0 <HAL_RCC_OscConfig+0x320>)
 8001ec4:	6872      	ldr	r2, [r6, #4]
 8001ec6:	497d      	ldr	r1, [pc, #500]	@ (80020bc <HAL_RCC_OscConfig+0x32c>)
 8001ec8:	400a      	ands	r2, r1
 8001eca:	6921      	ldr	r1, [r4, #16]
 8001ecc:	0209      	lsls	r1, r1, #8
 8001ece:	430a      	orrs	r2, r1
 8001ed0:	6072      	str	r2, [r6, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001ed2:	6832      	ldr	r2, [r6, #0]
 8001ed4:	2109      	movs	r1, #9
 8001ed6:	438a      	bics	r2, r1
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	6033      	str	r3, [r6, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001edc:	f7ff ff00 	bl	8001ce0 <HAL_RCC_GetSysClockFreq>
 8001ee0:	68f2      	ldr	r2, [r6, #12]
 8001ee2:	0912      	lsrs	r2, r2, #4
 8001ee4:	230f      	movs	r3, #15
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	4a75      	ldr	r2, [pc, #468]	@ (80020c0 <HAL_RCC_OscConfig+0x330>)
 8001eea:	5cd3      	ldrb	r3, [r2, r3]
 8001eec:	40d8      	lsrs	r0, r3
 8001eee:	4b75      	ldr	r3, [pc, #468]	@ (80020c4 <HAL_RCC_OscConfig+0x334>)
 8001ef0:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (uwTickPrio);
 8001ef2:	4b75      	ldr	r3, [pc, #468]	@ (80020c8 <HAL_RCC_OscConfig+0x338>)
 8001ef4:	6818      	ldr	r0, [r3, #0]
 8001ef6:	f7ff f94b 	bl	8001190 <HAL_InitTick>
      if(status != HAL_OK)
 8001efa:	2800      	cmp	r0, #0
 8001efc:	d000      	beq.n	8001f00 <HAL_RCC_OscConfig+0x170>
 8001efe:	e1b3      	b.n	8002268 <HAL_RCC_OscConfig+0x4d8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f00:	6823      	ldr	r3, [r4, #0]
 8001f02:	06db      	lsls	r3, r3, #27
 8001f04:	d52d      	bpl.n	8001f62 <HAL_RCC_OscConfig+0x1d2>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f06:	2d00      	cmp	r5, #0
 8001f08:	d160      	bne.n	8001fcc <HAL_RCC_OscConfig+0x23c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f0a:	4b69      	ldr	r3, [pc, #420]	@ (80020b0 <HAL_RCC_OscConfig+0x320>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	059b      	lsls	r3, r3, #22
 8001f10:	d503      	bpl.n	8001f1a <HAL_RCC_OscConfig+0x18a>
 8001f12:	69a3      	ldr	r3, [r4, #24]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d100      	bne.n	8001f1a <HAL_RCC_OscConfig+0x18a>
 8001f18:	e1ac      	b.n	8002274 <HAL_RCC_OscConfig+0x4e4>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f1a:	4a65      	ldr	r2, [pc, #404]	@ (80020b0 <HAL_RCC_OscConfig+0x320>)
 8001f1c:	6853      	ldr	r3, [r2, #4]
 8001f1e:	496b      	ldr	r1, [pc, #428]	@ (80020cc <HAL_RCC_OscConfig+0x33c>)
 8001f20:	400b      	ands	r3, r1
 8001f22:	6a21      	ldr	r1, [r4, #32]
 8001f24:	430b      	orrs	r3, r1
 8001f26:	6053      	str	r3, [r2, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f28:	6853      	ldr	r3, [r2, #4]
 8001f2a:	021b      	lsls	r3, r3, #8
 8001f2c:	0a1b      	lsrs	r3, r3, #8
 8001f2e:	69e1      	ldr	r1, [r4, #28]
 8001f30:	0609      	lsls	r1, r1, #24
 8001f32:	430b      	orrs	r3, r1
 8001f34:	6053      	str	r3, [r2, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001f36:	6a21      	ldr	r1, [r4, #32]
 8001f38:	0b49      	lsrs	r1, r1, #13
 8001f3a:	3101      	adds	r1, #1
 8001f3c:	2380      	movs	r3, #128	@ 0x80
 8001f3e:	021b      	lsls	r3, r3, #8
 8001f40:	408b      	lsls	r3, r1
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001f42:	68d1      	ldr	r1, [r2, #12]
 8001f44:	0909      	lsrs	r1, r1, #4
 8001f46:	220f      	movs	r2, #15
 8001f48:	400a      	ands	r2, r1
 8001f4a:	495d      	ldr	r1, [pc, #372]	@ (80020c0 <HAL_RCC_OscConfig+0x330>)
 8001f4c:	5c8a      	ldrb	r2, [r1, r2]
 8001f4e:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001f50:	4a5c      	ldr	r2, [pc, #368]	@ (80020c4 <HAL_RCC_OscConfig+0x334>)
 8001f52:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (uwTickPrio);
 8001f54:	4b5c      	ldr	r3, [pc, #368]	@ (80020c8 <HAL_RCC_OscConfig+0x338>)
 8001f56:	6818      	ldr	r0, [r3, #0]
 8001f58:	f7ff f91a 	bl	8001190 <HAL_InitTick>
        if(status != HAL_OK)
 8001f5c:	2800      	cmp	r0, #0
 8001f5e:	d000      	beq.n	8001f62 <HAL_RCC_OscConfig+0x1d2>
 8001f60:	e182      	b.n	8002268 <HAL_RCC_OscConfig+0x4d8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f62:	6823      	ldr	r3, [r4, #0]
 8001f64:	071b      	lsls	r3, r3, #28
 8001f66:	d57d      	bpl.n	8002064 <HAL_RCC_OscConfig+0x2d4>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f68:	6963      	ldr	r3, [r4, #20]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d067      	beq.n	800203e <HAL_RCC_OscConfig+0x2ae>
      __HAL_RCC_LSI_ENABLE();
 8001f6e:	4a50      	ldr	r2, [pc, #320]	@ (80020b0 <HAL_RCC_OscConfig+0x320>)
 8001f70:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8001f72:	2101      	movs	r1, #1
 8001f74:	430b      	orrs	r3, r1
 8001f76:	6513      	str	r3, [r2, #80]	@ 0x50
      tickstart = HAL_GetTick();
 8001f78:	f7ff f952 	bl	8001220 <HAL_GetTick>
 8001f7c:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001f7e:	4b4c      	ldr	r3, [pc, #304]	@ (80020b0 <HAL_RCC_OscConfig+0x320>)
 8001f80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f82:	079b      	lsls	r3, r3, #30
 8001f84:	d46e      	bmi.n	8002064 <HAL_RCC_OscConfig+0x2d4>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f86:	f7ff f94b 	bl	8001220 <HAL_GetTick>
 8001f8a:	1b80      	subs	r0, r0, r6
 8001f8c:	2802      	cmp	r0, #2
 8001f8e:	d9f6      	bls.n	8001f7e <HAL_RCC_OscConfig+0x1ee>
          return HAL_TIMEOUT;
 8001f90:	2003      	movs	r0, #3
 8001f92:	e169      	b.n	8002268 <HAL_RCC_OscConfig+0x4d8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f94:	4946      	ldr	r1, [pc, #280]	@ (80020b0 <HAL_RCC_OscConfig+0x320>)
 8001f96:	684b      	ldr	r3, [r1, #4]
 8001f98:	4a48      	ldr	r2, [pc, #288]	@ (80020bc <HAL_RCC_OscConfig+0x32c>)
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	6922      	ldr	r2, [r4, #16]
 8001f9e:	0212      	lsls	r2, r2, #8
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	604b      	str	r3, [r1, #4]
 8001fa4:	e7ac      	b.n	8001f00 <HAL_RCC_OscConfig+0x170>
        __HAL_RCC_HSI_DISABLE();
 8001fa6:	4a42      	ldr	r2, [pc, #264]	@ (80020b0 <HAL_RCC_OscConfig+0x320>)
 8001fa8:	6813      	ldr	r3, [r2, #0]
 8001faa:	2101      	movs	r1, #1
 8001fac:	438b      	bics	r3, r1
 8001fae:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001fb0:	f7ff f936 	bl	8001220 <HAL_GetTick>
 8001fb4:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001fb6:	4b3e      	ldr	r3, [pc, #248]	@ (80020b0 <HAL_RCC_OscConfig+0x320>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	075b      	lsls	r3, r3, #29
 8001fbc:	d5a0      	bpl.n	8001f00 <HAL_RCC_OscConfig+0x170>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fbe:	f7ff f92f 	bl	8001220 <HAL_GetTick>
 8001fc2:	1b80      	subs	r0, r0, r6
 8001fc4:	2802      	cmp	r0, #2
 8001fc6:	d9f6      	bls.n	8001fb6 <HAL_RCC_OscConfig+0x226>
            return HAL_TIMEOUT;
 8001fc8:	2003      	movs	r0, #3
 8001fca:	e14d      	b.n	8002268 <HAL_RCC_OscConfig+0x4d8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001fcc:	69a3      	ldr	r3, [r4, #24]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d022      	beq.n	8002018 <HAL_RCC_OscConfig+0x288>
        __HAL_RCC_MSI_ENABLE();
 8001fd2:	4a37      	ldr	r2, [pc, #220]	@ (80020b0 <HAL_RCC_OscConfig+0x320>)
 8001fd4:	6811      	ldr	r1, [r2, #0]
 8001fd6:	2380      	movs	r3, #128	@ 0x80
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	430b      	orrs	r3, r1
 8001fdc:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001fde:	f7ff f91f 	bl	8001220 <HAL_GetTick>
 8001fe2:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001fe4:	4b32      	ldr	r3, [pc, #200]	@ (80020b0 <HAL_RCC_OscConfig+0x320>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	059b      	lsls	r3, r3, #22
 8001fea:	d406      	bmi.n	8001ffa <HAL_RCC_OscConfig+0x26a>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001fec:	f7ff f918 	bl	8001220 <HAL_GetTick>
 8001ff0:	1b80      	subs	r0, r0, r6
 8001ff2:	2802      	cmp	r0, #2
 8001ff4:	d9f6      	bls.n	8001fe4 <HAL_RCC_OscConfig+0x254>
            return HAL_TIMEOUT;
 8001ff6:	2003      	movs	r0, #3
 8001ff8:	e136      	b.n	8002268 <HAL_RCC_OscConfig+0x4d8>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ffa:	4a2d      	ldr	r2, [pc, #180]	@ (80020b0 <HAL_RCC_OscConfig+0x320>)
 8001ffc:	6853      	ldr	r3, [r2, #4]
 8001ffe:	4933      	ldr	r1, [pc, #204]	@ (80020cc <HAL_RCC_OscConfig+0x33c>)
 8002000:	400b      	ands	r3, r1
 8002002:	6a21      	ldr	r1, [r4, #32]
 8002004:	430b      	orrs	r3, r1
 8002006:	6053      	str	r3, [r2, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002008:	6853      	ldr	r3, [r2, #4]
 800200a:	021b      	lsls	r3, r3, #8
 800200c:	0a1b      	lsrs	r3, r3, #8
 800200e:	69e1      	ldr	r1, [r4, #28]
 8002010:	0609      	lsls	r1, r1, #24
 8002012:	430b      	orrs	r3, r1
 8002014:	6053      	str	r3, [r2, #4]
 8002016:	e7a4      	b.n	8001f62 <HAL_RCC_OscConfig+0x1d2>
        __HAL_RCC_MSI_DISABLE();
 8002018:	4a25      	ldr	r2, [pc, #148]	@ (80020b0 <HAL_RCC_OscConfig+0x320>)
 800201a:	6813      	ldr	r3, [r2, #0]
 800201c:	492c      	ldr	r1, [pc, #176]	@ (80020d0 <HAL_RCC_OscConfig+0x340>)
 800201e:	400b      	ands	r3, r1
 8002020:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002022:	f7ff f8fd 	bl	8001220 <HAL_GetTick>
 8002026:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002028:	4b21      	ldr	r3, [pc, #132]	@ (80020b0 <HAL_RCC_OscConfig+0x320>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	059b      	lsls	r3, r3, #22
 800202e:	d598      	bpl.n	8001f62 <HAL_RCC_OscConfig+0x1d2>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002030:	f7ff f8f6 	bl	8001220 <HAL_GetTick>
 8002034:	1b80      	subs	r0, r0, r6
 8002036:	2802      	cmp	r0, #2
 8002038:	d9f6      	bls.n	8002028 <HAL_RCC_OscConfig+0x298>
            return HAL_TIMEOUT;
 800203a:	2003      	movs	r0, #3
 800203c:	e114      	b.n	8002268 <HAL_RCC_OscConfig+0x4d8>
      __HAL_RCC_LSI_DISABLE();
 800203e:	4a1c      	ldr	r2, [pc, #112]	@ (80020b0 <HAL_RCC_OscConfig+0x320>)
 8002040:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8002042:	2101      	movs	r1, #1
 8002044:	438b      	bics	r3, r1
 8002046:	6513      	str	r3, [r2, #80]	@ 0x50
      tickstart = HAL_GetTick();
 8002048:	f7ff f8ea 	bl	8001220 <HAL_GetTick>
 800204c:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800204e:	4b18      	ldr	r3, [pc, #96]	@ (80020b0 <HAL_RCC_OscConfig+0x320>)
 8002050:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002052:	079b      	lsls	r3, r3, #30
 8002054:	d506      	bpl.n	8002064 <HAL_RCC_OscConfig+0x2d4>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002056:	f7ff f8e3 	bl	8001220 <HAL_GetTick>
 800205a:	1b80      	subs	r0, r0, r6
 800205c:	2802      	cmp	r0, #2
 800205e:	d9f6      	bls.n	800204e <HAL_RCC_OscConfig+0x2be>
          return HAL_TIMEOUT;
 8002060:	2003      	movs	r0, #3
 8002062:	e101      	b.n	8002268 <HAL_RCC_OscConfig+0x4d8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002064:	6823      	ldr	r3, [r4, #0]
 8002066:	075b      	lsls	r3, r3, #29
 8002068:	d400      	bmi.n	800206c <HAL_RCC_OscConfig+0x2dc>
 800206a:	e08e      	b.n	800218a <HAL_RCC_OscConfig+0x3fa>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800206c:	4b10      	ldr	r3, [pc, #64]	@ (80020b0 <HAL_RCC_OscConfig+0x320>)
 800206e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002070:	00db      	lsls	r3, r3, #3
 8002072:	d41b      	bmi.n	80020ac <HAL_RCC_OscConfig+0x31c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002074:	4a0e      	ldr	r2, [pc, #56]	@ (80020b0 <HAL_RCC_OscConfig+0x320>)
 8002076:	6b91      	ldr	r1, [r2, #56]	@ 0x38
 8002078:	2380      	movs	r3, #128	@ 0x80
 800207a:	055b      	lsls	r3, r3, #21
 800207c:	430b      	orrs	r3, r1
 800207e:	6393      	str	r3, [r2, #56]	@ 0x38
      pwrclkchanged = SET;
 8002080:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002082:	4b14      	ldr	r3, [pc, #80]	@ (80020d4 <HAL_RCC_OscConfig+0x344>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	05db      	lsls	r3, r3, #23
 8002088:	d528      	bpl.n	80020dc <HAL_RCC_OscConfig+0x34c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800208a:	68a3      	ldr	r3, [r4, #8]
 800208c:	2280      	movs	r2, #128	@ 0x80
 800208e:	0052      	lsls	r2, r2, #1
 8002090:	4293      	cmp	r3, r2
 8002092:	d037      	beq.n	8002104 <HAL_RCC_OscConfig+0x374>
 8002094:	2b00      	cmp	r3, #0
 8002096:	d14d      	bne.n	8002134 <HAL_RCC_OscConfig+0x3a4>
 8002098:	4b05      	ldr	r3, [pc, #20]	@ (80020b0 <HAL_RCC_OscConfig+0x320>)
 800209a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800209c:	490c      	ldr	r1, [pc, #48]	@ (80020d0 <HAL_RCC_OscConfig+0x340>)
 800209e:	400a      	ands	r2, r1
 80020a0:	651a      	str	r2, [r3, #80]	@ 0x50
 80020a2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80020a4:	490c      	ldr	r1, [pc, #48]	@ (80020d8 <HAL_RCC_OscConfig+0x348>)
 80020a6:	400a      	ands	r2, r1
 80020a8:	651a      	str	r2, [r3, #80]	@ 0x50
 80020aa:	e031      	b.n	8002110 <HAL_RCC_OscConfig+0x380>
    FlagStatus       pwrclkchanged = RESET;
 80020ac:	2600      	movs	r6, #0
 80020ae:	e7e8      	b.n	8002082 <HAL_RCC_OscConfig+0x2f2>
 80020b0:	40021000 	.word	0x40021000
 80020b4:	fffeffff 	.word	0xfffeffff
 80020b8:	fffbffff 	.word	0xfffbffff
 80020bc:	ffffe0ff 	.word	0xffffe0ff
 80020c0:	080032dc 	.word	0x080032dc
 80020c4:	2000057c 	.word	0x2000057c
 80020c8:	20000584 	.word	0x20000584
 80020cc:	ffff1fff 	.word	0xffff1fff
 80020d0:	fffffeff 	.word	0xfffffeff
 80020d4:	40007000 	.word	0x40007000
 80020d8:	fffffbff 	.word	0xfffffbff
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020dc:	4a6b      	ldr	r2, [pc, #428]	@ (800228c <HAL_RCC_OscConfig+0x4fc>)
 80020de:	6811      	ldr	r1, [r2, #0]
 80020e0:	2380      	movs	r3, #128	@ 0x80
 80020e2:	005b      	lsls	r3, r3, #1
 80020e4:	430b      	orrs	r3, r1
 80020e6:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80020e8:	f7ff f89a 	bl	8001220 <HAL_GetTick>
 80020ec:	0007      	movs	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ee:	4b67      	ldr	r3, [pc, #412]	@ (800228c <HAL_RCC_OscConfig+0x4fc>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	05db      	lsls	r3, r3, #23
 80020f4:	d4c9      	bmi.n	800208a <HAL_RCC_OscConfig+0x2fa>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020f6:	f7ff f893 	bl	8001220 <HAL_GetTick>
 80020fa:	1bc0      	subs	r0, r0, r7
 80020fc:	2864      	cmp	r0, #100	@ 0x64
 80020fe:	d9f6      	bls.n	80020ee <HAL_RCC_OscConfig+0x35e>
          return HAL_TIMEOUT;
 8002100:	2003      	movs	r0, #3
 8002102:	e0b1      	b.n	8002268 <HAL_RCC_OscConfig+0x4d8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002104:	4a62      	ldr	r2, [pc, #392]	@ (8002290 <HAL_RCC_OscConfig+0x500>)
 8002106:	6d11      	ldr	r1, [r2, #80]	@ 0x50
 8002108:	2380      	movs	r3, #128	@ 0x80
 800210a:	005b      	lsls	r3, r3, #1
 800210c:	430b      	orrs	r3, r1
 800210e:	6513      	str	r3, [r2, #80]	@ 0x50
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002110:	68a3      	ldr	r3, [r4, #8]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d028      	beq.n	8002168 <HAL_RCC_OscConfig+0x3d8>
      tickstart = HAL_GetTick();
 8002116:	f7ff f883 	bl	8001220 <HAL_GetTick>
 800211a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800211c:	4b5c      	ldr	r3, [pc, #368]	@ (8002290 <HAL_RCC_OscConfig+0x500>)
 800211e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002120:	059b      	lsls	r3, r3, #22
 8002122:	d430      	bmi.n	8002186 <HAL_RCC_OscConfig+0x3f6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002124:	f7ff f87c 	bl	8001220 <HAL_GetTick>
 8002128:	1bc0      	subs	r0, r0, r7
 800212a:	4b5a      	ldr	r3, [pc, #360]	@ (8002294 <HAL_RCC_OscConfig+0x504>)
 800212c:	4298      	cmp	r0, r3
 800212e:	d9f5      	bls.n	800211c <HAL_RCC_OscConfig+0x38c>
          return HAL_TIMEOUT;
 8002130:	2003      	movs	r0, #3
 8002132:	e099      	b.n	8002268 <HAL_RCC_OscConfig+0x4d8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002134:	22a0      	movs	r2, #160	@ 0xa0
 8002136:	00d2      	lsls	r2, r2, #3
 8002138:	4293      	cmp	r3, r2
 800213a:	d009      	beq.n	8002150 <HAL_RCC_OscConfig+0x3c0>
 800213c:	4b54      	ldr	r3, [pc, #336]	@ (8002290 <HAL_RCC_OscConfig+0x500>)
 800213e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002140:	4955      	ldr	r1, [pc, #340]	@ (8002298 <HAL_RCC_OscConfig+0x508>)
 8002142:	400a      	ands	r2, r1
 8002144:	651a      	str	r2, [r3, #80]	@ 0x50
 8002146:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002148:	4954      	ldr	r1, [pc, #336]	@ (800229c <HAL_RCC_OscConfig+0x50c>)
 800214a:	400a      	ands	r2, r1
 800214c:	651a      	str	r2, [r3, #80]	@ 0x50
 800214e:	e7df      	b.n	8002110 <HAL_RCC_OscConfig+0x380>
 8002150:	4b4f      	ldr	r3, [pc, #316]	@ (8002290 <HAL_RCC_OscConfig+0x500>)
 8002152:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002154:	3a01      	subs	r2, #1
 8002156:	3aff      	subs	r2, #255	@ 0xff
 8002158:	430a      	orrs	r2, r1
 800215a:	651a      	str	r2, [r3, #80]	@ 0x50
 800215c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800215e:	2280      	movs	r2, #128	@ 0x80
 8002160:	0052      	lsls	r2, r2, #1
 8002162:	430a      	orrs	r2, r1
 8002164:	651a      	str	r2, [r3, #80]	@ 0x50
 8002166:	e7d3      	b.n	8002110 <HAL_RCC_OscConfig+0x380>
      tickstart = HAL_GetTick();
 8002168:	f7ff f85a 	bl	8001220 <HAL_GetTick>
 800216c:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800216e:	4b48      	ldr	r3, [pc, #288]	@ (8002290 <HAL_RCC_OscConfig+0x500>)
 8002170:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002172:	059b      	lsls	r3, r3, #22
 8002174:	d507      	bpl.n	8002186 <HAL_RCC_OscConfig+0x3f6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002176:	f7ff f853 	bl	8001220 <HAL_GetTick>
 800217a:	1bc0      	subs	r0, r0, r7
 800217c:	4b45      	ldr	r3, [pc, #276]	@ (8002294 <HAL_RCC_OscConfig+0x504>)
 800217e:	4298      	cmp	r0, r3
 8002180:	d9f5      	bls.n	800216e <HAL_RCC_OscConfig+0x3de>
          return HAL_TIMEOUT;
 8002182:	2003      	movs	r0, #3
 8002184:	e070      	b.n	8002268 <HAL_RCC_OscConfig+0x4d8>
    if(pwrclkchanged == SET)
 8002186:	2e01      	cmp	r6, #1
 8002188:	d01a      	beq.n	80021c0 <HAL_RCC_OscConfig+0x430>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800218a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800218c:	2b00      	cmp	r3, #0
 800218e:	d100      	bne.n	8002192 <HAL_RCC_OscConfig+0x402>
 8002190:	e072      	b.n	8002278 <HAL_RCC_OscConfig+0x4e8>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002192:	2d0c      	cmp	r5, #12
 8002194:	d04f      	beq.n	8002236 <HAL_RCC_OscConfig+0x4a6>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002196:	2b02      	cmp	r3, #2
 8002198:	d018      	beq.n	80021cc <HAL_RCC_OscConfig+0x43c>
        __HAL_RCC_PLL_DISABLE();
 800219a:	4a3d      	ldr	r2, [pc, #244]	@ (8002290 <HAL_RCC_OscConfig+0x500>)
 800219c:	6813      	ldr	r3, [r2, #0]
 800219e:	4940      	ldr	r1, [pc, #256]	@ (80022a0 <HAL_RCC_OscConfig+0x510>)
 80021a0:	400b      	ands	r3, r1
 80021a2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80021a4:	f7ff f83c 	bl	8001220 <HAL_GetTick>
 80021a8:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80021aa:	4b39      	ldr	r3, [pc, #228]	@ (8002290 <HAL_RCC_OscConfig+0x500>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	019b      	lsls	r3, r3, #6
 80021b0:	d53f      	bpl.n	8002232 <HAL_RCC_OscConfig+0x4a2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021b2:	f7ff f835 	bl	8001220 <HAL_GetTick>
 80021b6:	1b00      	subs	r0, r0, r4
 80021b8:	2802      	cmp	r0, #2
 80021ba:	d9f6      	bls.n	80021aa <HAL_RCC_OscConfig+0x41a>
            return HAL_TIMEOUT;
 80021bc:	2003      	movs	r0, #3
 80021be:	e053      	b.n	8002268 <HAL_RCC_OscConfig+0x4d8>
      __HAL_RCC_PWR_CLK_DISABLE();
 80021c0:	4a33      	ldr	r2, [pc, #204]	@ (8002290 <HAL_RCC_OscConfig+0x500>)
 80021c2:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 80021c4:	4937      	ldr	r1, [pc, #220]	@ (80022a4 <HAL_RCC_OscConfig+0x514>)
 80021c6:	400b      	ands	r3, r1
 80021c8:	6393      	str	r3, [r2, #56]	@ 0x38
 80021ca:	e7de      	b.n	800218a <HAL_RCC_OscConfig+0x3fa>
        __HAL_RCC_PLL_DISABLE();
 80021cc:	4a30      	ldr	r2, [pc, #192]	@ (8002290 <HAL_RCC_OscConfig+0x500>)
 80021ce:	6813      	ldr	r3, [r2, #0]
 80021d0:	4933      	ldr	r1, [pc, #204]	@ (80022a0 <HAL_RCC_OscConfig+0x510>)
 80021d2:	400b      	ands	r3, r1
 80021d4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80021d6:	f7ff f823 	bl	8001220 <HAL_GetTick>
 80021da:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80021dc:	4b2c      	ldr	r3, [pc, #176]	@ (8002290 <HAL_RCC_OscConfig+0x500>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	019b      	lsls	r3, r3, #6
 80021e2:	d506      	bpl.n	80021f2 <HAL_RCC_OscConfig+0x462>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021e4:	f7ff f81c 	bl	8001220 <HAL_GetTick>
 80021e8:	1b40      	subs	r0, r0, r5
 80021ea:	2802      	cmp	r0, #2
 80021ec:	d9f6      	bls.n	80021dc <HAL_RCC_OscConfig+0x44c>
            return HAL_TIMEOUT;
 80021ee:	2003      	movs	r0, #3
 80021f0:	e03a      	b.n	8002268 <HAL_RCC_OscConfig+0x4d8>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021f2:	4927      	ldr	r1, [pc, #156]	@ (8002290 <HAL_RCC_OscConfig+0x500>)
 80021f4:	68cb      	ldr	r3, [r1, #12]
 80021f6:	4a2c      	ldr	r2, [pc, #176]	@ (80022a8 <HAL_RCC_OscConfig+0x518>)
 80021f8:	4013      	ands	r3, r2
 80021fa:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80021fc:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80021fe:	4302      	orrs	r2, r0
 8002200:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8002202:	4302      	orrs	r2, r0
 8002204:	4313      	orrs	r3, r2
 8002206:	60cb      	str	r3, [r1, #12]
        __HAL_RCC_PLL_ENABLE();
 8002208:	680a      	ldr	r2, [r1, #0]
 800220a:	2380      	movs	r3, #128	@ 0x80
 800220c:	045b      	lsls	r3, r3, #17
 800220e:	4313      	orrs	r3, r2
 8002210:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 8002212:	f7ff f805 	bl	8001220 <HAL_GetTick>
 8002216:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002218:	4b1d      	ldr	r3, [pc, #116]	@ (8002290 <HAL_RCC_OscConfig+0x500>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	019b      	lsls	r3, r3, #6
 800221e:	d406      	bmi.n	800222e <HAL_RCC_OscConfig+0x49e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002220:	f7fe fffe 	bl	8001220 <HAL_GetTick>
 8002224:	1b00      	subs	r0, r0, r4
 8002226:	2802      	cmp	r0, #2
 8002228:	d9f6      	bls.n	8002218 <HAL_RCC_OscConfig+0x488>
            return HAL_TIMEOUT;
 800222a:	2003      	movs	r0, #3
 800222c:	e01c      	b.n	8002268 <HAL_RCC_OscConfig+0x4d8>
  return HAL_OK;
 800222e:	2000      	movs	r0, #0
 8002230:	e01a      	b.n	8002268 <HAL_RCC_OscConfig+0x4d8>
 8002232:	2000      	movs	r0, #0
 8002234:	e018      	b.n	8002268 <HAL_RCC_OscConfig+0x4d8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002236:	2b01      	cmp	r3, #1
 8002238:	d020      	beq.n	800227c <HAL_RCC_OscConfig+0x4ec>
        pll_config = RCC->CFGR;
 800223a:	4b15      	ldr	r3, [pc, #84]	@ (8002290 <HAL_RCC_OscConfig+0x500>)
 800223c:	68da      	ldr	r2, [r3, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800223e:	2380      	movs	r3, #128	@ 0x80
 8002240:	025b      	lsls	r3, r3, #9
 8002242:	4013      	ands	r3, r2
 8002244:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8002246:	428b      	cmp	r3, r1
 8002248:	d11a      	bne.n	8002280 <HAL_RCC_OscConfig+0x4f0>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800224a:	23f0      	movs	r3, #240	@ 0xf0
 800224c:	039b      	lsls	r3, r3, #14
 800224e:	4013      	ands	r3, r2
 8002250:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002252:	428b      	cmp	r3, r1
 8002254:	d116      	bne.n	8002284 <HAL_RCC_OscConfig+0x4f4>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002256:	23c0      	movs	r3, #192	@ 0xc0
 8002258:	041b      	lsls	r3, r3, #16
 800225a:	401a      	ands	r2, r3
 800225c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800225e:	429a      	cmp	r2, r3
 8002260:	d112      	bne.n	8002288 <HAL_RCC_OscConfig+0x4f8>
  return HAL_OK;
 8002262:	2000      	movs	r0, #0
 8002264:	e000      	b.n	8002268 <HAL_RCC_OscConfig+0x4d8>
    return HAL_ERROR;
 8002266:	2001      	movs	r0, #1
}
 8002268:	b003      	add	sp, #12
 800226a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return HAL_ERROR;
 800226c:	2001      	movs	r0, #1
 800226e:	e7fb      	b.n	8002268 <HAL_RCC_OscConfig+0x4d8>
        return HAL_ERROR;
 8002270:	2001      	movs	r0, #1
 8002272:	e7f9      	b.n	8002268 <HAL_RCC_OscConfig+0x4d8>
        return HAL_ERROR;
 8002274:	2001      	movs	r0, #1
 8002276:	e7f7      	b.n	8002268 <HAL_RCC_OscConfig+0x4d8>
  return HAL_OK;
 8002278:	2000      	movs	r0, #0
 800227a:	e7f5      	b.n	8002268 <HAL_RCC_OscConfig+0x4d8>
        return HAL_ERROR;
 800227c:	2001      	movs	r0, #1
 800227e:	e7f3      	b.n	8002268 <HAL_RCC_OscConfig+0x4d8>
          return HAL_ERROR;
 8002280:	2001      	movs	r0, #1
 8002282:	e7f1      	b.n	8002268 <HAL_RCC_OscConfig+0x4d8>
 8002284:	2001      	movs	r0, #1
 8002286:	e7ef      	b.n	8002268 <HAL_RCC_OscConfig+0x4d8>
 8002288:	2001      	movs	r0, #1
 800228a:	e7ed      	b.n	8002268 <HAL_RCC_OscConfig+0x4d8>
 800228c:	40007000 	.word	0x40007000
 8002290:	40021000 	.word	0x40021000
 8002294:	00001388 	.word	0x00001388
 8002298:	fffffeff 	.word	0xfffffeff
 800229c:	fffffbff 	.word	0xfffffbff
 80022a0:	feffffff 	.word	0xfeffffff
 80022a4:	efffffff 	.word	0xefffffff
 80022a8:	ff02ffff 	.word	0xff02ffff

080022ac <HAL_RCC_ClockConfig>:
{
 80022ac:	b570      	push	{r4, r5, r6, lr}
 80022ae:	0005      	movs	r5, r0
 80022b0:	000c      	movs	r4, r1
  if(RCC_ClkInitStruct == NULL)
 80022b2:	2800      	cmp	r0, #0
 80022b4:	d100      	bne.n	80022b8 <HAL_RCC_ClockConfig+0xc>
 80022b6:	e0d1      	b.n	800245c <HAL_RCC_ClockConfig+0x1b0>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022b8:	4b6a      	ldr	r3, [pc, #424]	@ (8002464 <HAL_RCC_ClockConfig+0x1b8>)
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	2301      	movs	r3, #1
 80022be:	4013      	ands	r3, r2
 80022c0:	428b      	cmp	r3, r1
 80022c2:	d319      	bcc.n	80022f8 <HAL_RCC_ClockConfig+0x4c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022c4:	682b      	ldr	r3, [r5, #0]
 80022c6:	079b      	lsls	r3, r3, #30
 80022c8:	d506      	bpl.n	80022d8 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022ca:	4a67      	ldr	r2, [pc, #412]	@ (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 80022cc:	68d3      	ldr	r3, [r2, #12]
 80022ce:	21f0      	movs	r1, #240	@ 0xf0
 80022d0:	438b      	bics	r3, r1
 80022d2:	68a9      	ldr	r1, [r5, #8]
 80022d4:	430b      	orrs	r3, r1
 80022d6:	60d3      	str	r3, [r2, #12]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022d8:	682b      	ldr	r3, [r5, #0]
 80022da:	07db      	lsls	r3, r3, #31
 80022dc:	d57b      	bpl.n	80023d6 <HAL_RCC_ClockConfig+0x12a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022de:	686b      	ldr	r3, [r5, #4]
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d020      	beq.n	8002326 <HAL_RCC_ClockConfig+0x7a>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022e4:	2b03      	cmp	r3, #3
 80022e6:	d040      	beq.n	800236a <HAL_RCC_ClockConfig+0xbe>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d044      	beq.n	8002376 <HAL_RCC_ClockConfig+0xca>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80022ec:	4a5e      	ldr	r2, [pc, #376]	@ (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 80022ee:	6812      	ldr	r2, [r2, #0]
 80022f0:	0592      	lsls	r2, r2, #22
 80022f2:	d41d      	bmi.n	8002330 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 80022f4:	2001      	movs	r0, #1
 80022f6:	e099      	b.n	800242c <HAL_RCC_ClockConfig+0x180>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022f8:	4a5a      	ldr	r2, [pc, #360]	@ (8002464 <HAL_RCC_ClockConfig+0x1b8>)
 80022fa:	6813      	ldr	r3, [r2, #0]
 80022fc:	2101      	movs	r1, #1
 80022fe:	438b      	bics	r3, r1
 8002300:	4323      	orrs	r3, r4
 8002302:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002304:	f7fe ff8c 	bl	8001220 <HAL_GetTick>
 8002308:	0006      	movs	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800230a:	4b56      	ldr	r3, [pc, #344]	@ (8002464 <HAL_RCC_ClockConfig+0x1b8>)
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	2301      	movs	r3, #1
 8002310:	4013      	ands	r3, r2
 8002312:	42a3      	cmp	r3, r4
 8002314:	d0d6      	beq.n	80022c4 <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002316:	f7fe ff83 	bl	8001220 <HAL_GetTick>
 800231a:	1b80      	subs	r0, r0, r6
 800231c:	4a53      	ldr	r2, [pc, #332]	@ (800246c <HAL_RCC_ClockConfig+0x1c0>)
 800231e:	4290      	cmp	r0, r2
 8002320:	d9f3      	bls.n	800230a <HAL_RCC_ClockConfig+0x5e>
        return HAL_TIMEOUT;
 8002322:	2003      	movs	r0, #3
 8002324:	e082      	b.n	800242c <HAL_RCC_ClockConfig+0x180>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002326:	4a50      	ldr	r2, [pc, #320]	@ (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 8002328:	6812      	ldr	r2, [r2, #0]
 800232a:	0392      	lsls	r2, r2, #14
 800232c:	d400      	bmi.n	8002330 <HAL_RCC_ClockConfig+0x84>
 800232e:	e097      	b.n	8002460 <HAL_RCC_ClockConfig+0x1b4>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002330:	494d      	ldr	r1, [pc, #308]	@ (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 8002332:	68ca      	ldr	r2, [r1, #12]
 8002334:	2003      	movs	r0, #3
 8002336:	4382      	bics	r2, r0
 8002338:	4313      	orrs	r3, r2
 800233a:	60cb      	str	r3, [r1, #12]
    tickstart = HAL_GetTick();
 800233c:	f7fe ff70 	bl	8001220 <HAL_GetTick>
 8002340:	0006      	movs	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002342:	686b      	ldr	r3, [r5, #4]
 8002344:	2b02      	cmp	r3, #2
 8002346:	d01c      	beq.n	8002382 <HAL_RCC_ClockConfig+0xd6>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002348:	2b03      	cmp	r3, #3
 800234a:	d028      	beq.n	800239e <HAL_RCC_ClockConfig+0xf2>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800234c:	2b01      	cmp	r3, #1
 800234e:	d034      	beq.n	80023ba <HAL_RCC_ClockConfig+0x10e>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002350:	4b45      	ldr	r3, [pc, #276]	@ (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	220c      	movs	r2, #12
 8002356:	421a      	tst	r2, r3
 8002358:	d03d      	beq.n	80023d6 <HAL_RCC_ClockConfig+0x12a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800235a:	f7fe ff61 	bl	8001220 <HAL_GetTick>
 800235e:	1b80      	subs	r0, r0, r6
 8002360:	4b42      	ldr	r3, [pc, #264]	@ (800246c <HAL_RCC_ClockConfig+0x1c0>)
 8002362:	4298      	cmp	r0, r3
 8002364:	d9f4      	bls.n	8002350 <HAL_RCC_ClockConfig+0xa4>
          return HAL_TIMEOUT;
 8002366:	2003      	movs	r0, #3
 8002368:	e060      	b.n	800242c <HAL_RCC_ClockConfig+0x180>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800236a:	4a3f      	ldr	r2, [pc, #252]	@ (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 800236c:	6812      	ldr	r2, [r2, #0]
 800236e:	0192      	lsls	r2, r2, #6
 8002370:	d4de      	bmi.n	8002330 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8002372:	2001      	movs	r0, #1
 8002374:	e05a      	b.n	800242c <HAL_RCC_ClockConfig+0x180>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002376:	4a3c      	ldr	r2, [pc, #240]	@ (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 8002378:	6812      	ldr	r2, [r2, #0]
 800237a:	0752      	lsls	r2, r2, #29
 800237c:	d4d8      	bmi.n	8002330 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 800237e:	2001      	movs	r0, #1
 8002380:	e054      	b.n	800242c <HAL_RCC_ClockConfig+0x180>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002382:	4b39      	ldr	r3, [pc, #228]	@ (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 8002384:	68da      	ldr	r2, [r3, #12]
 8002386:	230c      	movs	r3, #12
 8002388:	4013      	ands	r3, r2
 800238a:	2b08      	cmp	r3, #8
 800238c:	d023      	beq.n	80023d6 <HAL_RCC_ClockConfig+0x12a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800238e:	f7fe ff47 	bl	8001220 <HAL_GetTick>
 8002392:	1b80      	subs	r0, r0, r6
 8002394:	4a35      	ldr	r2, [pc, #212]	@ (800246c <HAL_RCC_ClockConfig+0x1c0>)
 8002396:	4290      	cmp	r0, r2
 8002398:	d9f3      	bls.n	8002382 <HAL_RCC_ClockConfig+0xd6>
          return HAL_TIMEOUT;
 800239a:	2003      	movs	r0, #3
 800239c:	e046      	b.n	800242c <HAL_RCC_ClockConfig+0x180>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800239e:	4b32      	ldr	r3, [pc, #200]	@ (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 80023a0:	68da      	ldr	r2, [r3, #12]
 80023a2:	230c      	movs	r3, #12
 80023a4:	4013      	ands	r3, r2
 80023a6:	2b0c      	cmp	r3, #12
 80023a8:	d015      	beq.n	80023d6 <HAL_RCC_ClockConfig+0x12a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023aa:	f7fe ff39 	bl	8001220 <HAL_GetTick>
 80023ae:	1b80      	subs	r0, r0, r6
 80023b0:	4b2e      	ldr	r3, [pc, #184]	@ (800246c <HAL_RCC_ClockConfig+0x1c0>)
 80023b2:	4298      	cmp	r0, r3
 80023b4:	d9f3      	bls.n	800239e <HAL_RCC_ClockConfig+0xf2>
          return HAL_TIMEOUT;
 80023b6:	2003      	movs	r0, #3
 80023b8:	e038      	b.n	800242c <HAL_RCC_ClockConfig+0x180>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80023ba:	4b2b      	ldr	r3, [pc, #172]	@ (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 80023bc:	68da      	ldr	r2, [r3, #12]
 80023be:	230c      	movs	r3, #12
 80023c0:	4013      	ands	r3, r2
 80023c2:	2b04      	cmp	r3, #4
 80023c4:	d007      	beq.n	80023d6 <HAL_RCC_ClockConfig+0x12a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023c6:	f7fe ff2b 	bl	8001220 <HAL_GetTick>
 80023ca:	1b80      	subs	r0, r0, r6
 80023cc:	4b27      	ldr	r3, [pc, #156]	@ (800246c <HAL_RCC_ClockConfig+0x1c0>)
 80023ce:	4298      	cmp	r0, r3
 80023d0:	d9f3      	bls.n	80023ba <HAL_RCC_ClockConfig+0x10e>
          return HAL_TIMEOUT;
 80023d2:	2003      	movs	r0, #3
 80023d4:	e02a      	b.n	800242c <HAL_RCC_ClockConfig+0x180>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023d6:	4b23      	ldr	r3, [pc, #140]	@ (8002464 <HAL_RCC_ClockConfig+0x1b8>)
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	2301      	movs	r3, #1
 80023dc:	4013      	ands	r3, r2
 80023de:	42a3      	cmp	r3, r4
 80023e0:	d825      	bhi.n	800242e <HAL_RCC_ClockConfig+0x182>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023e2:	682b      	ldr	r3, [r5, #0]
 80023e4:	075b      	lsls	r3, r3, #29
 80023e6:	d506      	bpl.n	80023f6 <HAL_RCC_ClockConfig+0x14a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023e8:	4a1f      	ldr	r2, [pc, #124]	@ (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 80023ea:	68d3      	ldr	r3, [r2, #12]
 80023ec:	4920      	ldr	r1, [pc, #128]	@ (8002470 <HAL_RCC_ClockConfig+0x1c4>)
 80023ee:	400b      	ands	r3, r1
 80023f0:	68e9      	ldr	r1, [r5, #12]
 80023f2:	430b      	orrs	r3, r1
 80023f4:	60d3      	str	r3, [r2, #12]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023f6:	682b      	ldr	r3, [r5, #0]
 80023f8:	071b      	lsls	r3, r3, #28
 80023fa:	d507      	bpl.n	800240c <HAL_RCC_ClockConfig+0x160>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80023fc:	491a      	ldr	r1, [pc, #104]	@ (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 80023fe:	68cb      	ldr	r3, [r1, #12]
 8002400:	4a1c      	ldr	r2, [pc, #112]	@ (8002474 <HAL_RCC_ClockConfig+0x1c8>)
 8002402:	4013      	ands	r3, r2
 8002404:	692a      	ldr	r2, [r5, #16]
 8002406:	00d2      	lsls	r2, r2, #3
 8002408:	4313      	orrs	r3, r2
 800240a:	60cb      	str	r3, [r1, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800240c:	f7ff fc68 	bl	8001ce0 <HAL_RCC_GetSysClockFreq>
 8002410:	4b15      	ldr	r3, [pc, #84]	@ (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 8002412:	68da      	ldr	r2, [r3, #12]
 8002414:	0912      	lsrs	r2, r2, #4
 8002416:	230f      	movs	r3, #15
 8002418:	4013      	ands	r3, r2
 800241a:	4a17      	ldr	r2, [pc, #92]	@ (8002478 <HAL_RCC_ClockConfig+0x1cc>)
 800241c:	5cd3      	ldrb	r3, [r2, r3]
 800241e:	40d8      	lsrs	r0, r3
 8002420:	4b16      	ldr	r3, [pc, #88]	@ (800247c <HAL_RCC_ClockConfig+0x1d0>)
 8002422:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8002424:	4b16      	ldr	r3, [pc, #88]	@ (8002480 <HAL_RCC_ClockConfig+0x1d4>)
 8002426:	6818      	ldr	r0, [r3, #0]
 8002428:	f7fe feb2 	bl	8001190 <HAL_InitTick>
}
 800242c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800242e:	4a0d      	ldr	r2, [pc, #52]	@ (8002464 <HAL_RCC_ClockConfig+0x1b8>)
 8002430:	6813      	ldr	r3, [r2, #0]
 8002432:	2101      	movs	r1, #1
 8002434:	438b      	bics	r3, r1
 8002436:	4323      	orrs	r3, r4
 8002438:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800243a:	f7fe fef1 	bl	8001220 <HAL_GetTick>
 800243e:	0006      	movs	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002440:	4b08      	ldr	r3, [pc, #32]	@ (8002464 <HAL_RCC_ClockConfig+0x1b8>)
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	2301      	movs	r3, #1
 8002446:	4013      	ands	r3, r2
 8002448:	42a3      	cmp	r3, r4
 800244a:	d0ca      	beq.n	80023e2 <HAL_RCC_ClockConfig+0x136>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800244c:	f7fe fee8 	bl	8001220 <HAL_GetTick>
 8002450:	1b80      	subs	r0, r0, r6
 8002452:	4b06      	ldr	r3, [pc, #24]	@ (800246c <HAL_RCC_ClockConfig+0x1c0>)
 8002454:	4298      	cmp	r0, r3
 8002456:	d9f3      	bls.n	8002440 <HAL_RCC_ClockConfig+0x194>
        return HAL_TIMEOUT;
 8002458:	2003      	movs	r0, #3
 800245a:	e7e7      	b.n	800242c <HAL_RCC_ClockConfig+0x180>
    return HAL_ERROR;
 800245c:	2001      	movs	r0, #1
 800245e:	e7e5      	b.n	800242c <HAL_RCC_ClockConfig+0x180>
        return HAL_ERROR;
 8002460:	2001      	movs	r0, #1
 8002462:	e7e3      	b.n	800242c <HAL_RCC_ClockConfig+0x180>
 8002464:	40022000 	.word	0x40022000
 8002468:	40021000 	.word	0x40021000
 800246c:	00001388 	.word	0x00001388
 8002470:	fffff8ff 	.word	0xfffff8ff
 8002474:	ffffc7ff 	.word	0xffffc7ff
 8002478:	080032dc 	.word	0x080032dc
 800247c:	2000057c 	.word	0x2000057c
 8002480:	20000584 	.word	0x20000584

08002484 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8002484:	4b01      	ldr	r3, [pc, #4]	@ (800248c <HAL_RCC_GetHCLKFreq+0x8>)
 8002486:	6818      	ldr	r0, [r3, #0]
}
 8002488:	4770      	bx	lr
 800248a:	46c0      	nop			@ (mov r8, r8)
 800248c:	2000057c 	.word	0x2000057c

08002490 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002490:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002492:	f7ff fff7 	bl	8002484 <HAL_RCC_GetHCLKFreq>
 8002496:	4b04      	ldr	r3, [pc, #16]	@ (80024a8 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002498:	68da      	ldr	r2, [r3, #12]
 800249a:	0a12      	lsrs	r2, r2, #8
 800249c:	2307      	movs	r3, #7
 800249e:	4013      	ands	r3, r2
 80024a0:	4a02      	ldr	r2, [pc, #8]	@ (80024ac <HAL_RCC_GetPCLK1Freq+0x1c>)
 80024a2:	5cd3      	ldrb	r3, [r2, r3]
 80024a4:	40d8      	lsrs	r0, r3
}
 80024a6:	bd10      	pop	{r4, pc}
 80024a8:	40021000 	.word	0x40021000
 80024ac:	080032d4 	.word	0x080032d4

080024b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024b0:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80024b2:	f7ff ffe7 	bl	8002484 <HAL_RCC_GetHCLKFreq>
 80024b6:	4b04      	ldr	r3, [pc, #16]	@ (80024c8 <HAL_RCC_GetPCLK2Freq+0x18>)
 80024b8:	68da      	ldr	r2, [r3, #12]
 80024ba:	0ad2      	lsrs	r2, r2, #11
 80024bc:	2307      	movs	r3, #7
 80024be:	4013      	ands	r3, r2
 80024c0:	4a02      	ldr	r2, [pc, #8]	@ (80024cc <HAL_RCC_GetPCLK2Freq+0x1c>)
 80024c2:	5cd3      	ldrb	r3, [r2, r3]
 80024c4:	40d8      	lsrs	r0, r3
}
 80024c6:	bd10      	pop	{r4, pc}
 80024c8:	40021000 	.word	0x40021000
 80024cc:	080032d4 	.word	0x080032d4

080024d0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024d0:	b570      	push	{r4, r5, r6, lr}
 80024d2:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80024d4:	6803      	ldr	r3, [r0, #0]
 80024d6:	069b      	lsls	r3, r3, #26
 80024d8:	d54e      	bpl.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0xa8>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024da:	4b5b      	ldr	r3, [pc, #364]	@ (8002648 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 80024dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024de:	00db      	lsls	r3, r3, #3
 80024e0:	d474      	bmi.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0xfc>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024e2:	4a59      	ldr	r2, [pc, #356]	@ (8002648 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 80024e4:	6b91      	ldr	r1, [r2, #56]	@ 0x38
 80024e6:	2380      	movs	r3, #128	@ 0x80
 80024e8:	055b      	lsls	r3, r3, #21
 80024ea:	430b      	orrs	r3, r1
 80024ec:	6393      	str	r3, [r2, #56]	@ 0x38
      pwrclkchanged = SET;
 80024ee:	2601      	movs	r6, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024f0:	4b56      	ldr	r3, [pc, #344]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x17c>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	05db      	lsls	r3, r3, #23
 80024f6:	d56b      	bpl.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x100>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80024f8:	4b53      	ldr	r3, [pc, #332]	@ (8002648 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 80024fa:	681b      	ldr	r3, [r3, #0]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80024fc:	6862      	ldr	r2, [r4, #4]
 80024fe:	4053      	eors	r3, r2
 8002500:	21c0      	movs	r1, #192	@ 0xc0
 8002502:	0389      	lsls	r1, r1, #14
 8002504:	420b      	tst	r3, r1
 8002506:	d005      	beq.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x44>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002508:	23c0      	movs	r3, #192	@ 0xc0
 800250a:	029b      	lsls	r3, r3, #10
 800250c:	0011      	movs	r1, r2
 800250e:	4019      	ands	r1, r3
 8002510:	4299      	cmp	r1, r3
 8002512:	d071      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x128>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002514:	4b4c      	ldr	r3, [pc, #304]	@ (8002648 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8002516:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002518:	23c0      	movs	r3, #192	@ 0xc0
 800251a:	029b      	lsls	r3, r3, #10
 800251c:	0008      	movs	r0, r1
 800251e:	4018      	ands	r0, r3

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002520:	4219      	tst	r1, r3
 8002522:	d015      	beq.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x80>
 8002524:	401a      	ands	r2, r3
 8002526:	4282      	cmp	r2, r0
 8002528:	d012      	beq.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x80>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800252a:	6823      	ldr	r3, [r4, #0]
 800252c:	069b      	lsls	r3, r3, #26
 800252e:	d50f      	bpl.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x80>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002530:	4b45      	ldr	r3, [pc, #276]	@ (8002648 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8002532:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002534:	4946      	ldr	r1, [pc, #280]	@ (8002650 <HAL_RCCEx_PeriphCLKConfig+0x180>)
 8002536:	4011      	ands	r1, r2

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002538:	6d1d      	ldr	r5, [r3, #80]	@ 0x50
 800253a:	2080      	movs	r0, #128	@ 0x80
 800253c:	0300      	lsls	r0, r0, #12
 800253e:	4328      	orrs	r0, r5
 8002540:	6518      	str	r0, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002542:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8002544:	4d43      	ldr	r5, [pc, #268]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002546:	4028      	ands	r0, r5
 8002548:	6518      	str	r0, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800254a:	6519      	str	r1, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800254c:	05d2      	lsls	r2, r2, #23
 800254e:	d459      	bmi.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x134>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002550:	6823      	ldr	r3, [r4, #0]
 8002552:	069b      	lsls	r3, r3, #26
 8002554:	d50e      	bpl.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002556:	6863      	ldr	r3, [r4, #4]
 8002558:	22c0      	movs	r2, #192	@ 0xc0
 800255a:	0292      	lsls	r2, r2, #10
 800255c:	0019      	movs	r1, r3
 800255e:	4011      	ands	r1, r2
 8002560:	4291      	cmp	r1, r2
 8002562:	d05e      	beq.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002564:	4938      	ldr	r1, [pc, #224]	@ (8002648 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8002566:	6d0b      	ldr	r3, [r1, #80]	@ 0x50
 8002568:	6862      	ldr	r2, [r4, #4]
 800256a:	20c0      	movs	r0, #192	@ 0xc0
 800256c:	0280      	lsls	r0, r0, #10
 800256e:	4002      	ands	r2, r0
 8002570:	4313      	orrs	r3, r2
 8002572:	650b      	str	r3, [r1, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002574:	2e01      	cmp	r6, #1
 8002576:	d05e      	beq.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x166>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002578:	6823      	ldr	r3, [r4, #0]
 800257a:	079b      	lsls	r3, r3, #30
 800257c:	d506      	bpl.n	800258c <HAL_RCCEx_PeriphCLKConfig+0xbc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800257e:	4a32      	ldr	r2, [pc, #200]	@ (8002648 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8002580:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8002582:	210c      	movs	r1, #12
 8002584:	438b      	bics	r3, r1
 8002586:	68a1      	ldr	r1, [r4, #8]
 8002588:	430b      	orrs	r3, r1
 800258a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800258c:	6823      	ldr	r3, [r4, #0]
 800258e:	075b      	lsls	r3, r3, #29
 8002590:	d506      	bpl.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0xd0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002592:	4a2d      	ldr	r2, [pc, #180]	@ (8002648 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8002594:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8002596:	4930      	ldr	r1, [pc, #192]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002598:	400b      	ands	r3, r1
 800259a:	68e1      	ldr	r1, [r4, #12]
 800259c:	430b      	orrs	r3, r1
 800259e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025a0:	6823      	ldr	r3, [r4, #0]
 80025a2:	071b      	lsls	r3, r3, #28
 80025a4:	d506      	bpl.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025a6:	4a28      	ldr	r2, [pc, #160]	@ (8002648 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 80025a8:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 80025aa:	492c      	ldr	r1, [pc, #176]	@ (800265c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80025ac:	400b      	ands	r3, r1
 80025ae:	6921      	ldr	r1, [r4, #16]
 80025b0:	430b      	orrs	r3, r1
 80025b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80025b4:	6823      	ldr	r3, [r4, #0]
 80025b6:	061b      	lsls	r3, r3, #24
 80025b8:	d543      	bpl.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x172>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80025ba:	4a23      	ldr	r2, [pc, #140]	@ (8002648 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 80025bc:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 80025be:	4928      	ldr	r1, [pc, #160]	@ (8002660 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80025c0:	400b      	ands	r3, r1
 80025c2:	6961      	ldr	r1, [r4, #20]
 80025c4:	430b      	orrs	r3, r1
 80025c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  return HAL_OK;
 80025c8:	2000      	movs	r0, #0
 80025ca:	e03b      	b.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x174>
  FlagStatus       pwrclkchanged = RESET;
 80025cc:	2600      	movs	r6, #0
 80025ce:	e78f      	b.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x20>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025d0:	4a1e      	ldr	r2, [pc, #120]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x17c>)
 80025d2:	6811      	ldr	r1, [r2, #0]
 80025d4:	2380      	movs	r3, #128	@ 0x80
 80025d6:	005b      	lsls	r3, r3, #1
 80025d8:	430b      	orrs	r3, r1
 80025da:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80025dc:	f7fe fe20 	bl	8001220 <HAL_GetTick>
 80025e0:	0005      	movs	r5, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025e2:	4b1a      	ldr	r3, [pc, #104]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x17c>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	05db      	lsls	r3, r3, #23
 80025e8:	d486      	bmi.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x28>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025ea:	f7fe fe19 	bl	8001220 <HAL_GetTick>
 80025ee:	1b40      	subs	r0, r0, r5
 80025f0:	2864      	cmp	r0, #100	@ 0x64
 80025f2:	d9f6      	bls.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x112>
          return HAL_TIMEOUT;
 80025f4:	2003      	movs	r0, #3
 80025f6:	e025      	b.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x174>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80025f8:	4b13      	ldr	r3, [pc, #76]	@ (8002648 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	039b      	lsls	r3, r3, #14
 80025fe:	d589      	bpl.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x44>
          return HAL_ERROR;
 8002600:	2001      	movs	r0, #1
 8002602:	e01f      	b.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x174>
        tickstart = HAL_GetTick();
 8002604:	f7fe fe0c 	bl	8001220 <HAL_GetTick>
 8002608:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800260a:	4b0f      	ldr	r3, [pc, #60]	@ (8002648 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 800260c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800260e:	059b      	lsls	r3, r3, #22
 8002610:	d49e      	bmi.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x80>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002612:	f7fe fe05 	bl	8001220 <HAL_GetTick>
 8002616:	1b40      	subs	r0, r0, r5
 8002618:	4b12      	ldr	r3, [pc, #72]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 800261a:	4298      	cmp	r0, r3
 800261c:	d9f5      	bls.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x13a>
            return HAL_TIMEOUT;
 800261e:	2003      	movs	r0, #3
 8002620:	e010      	b.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x174>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002622:	4909      	ldr	r1, [pc, #36]	@ (8002648 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8002624:	680a      	ldr	r2, [r1, #0]
 8002626:	4810      	ldr	r0, [pc, #64]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8002628:	4002      	ands	r2, r0
 800262a:	20c0      	movs	r0, #192	@ 0xc0
 800262c:	0380      	lsls	r0, r0, #14
 800262e:	4003      	ands	r3, r0
 8002630:	4313      	orrs	r3, r2
 8002632:	600b      	str	r3, [r1, #0]
 8002634:	e796      	b.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x94>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002636:	4a04      	ldr	r2, [pc, #16]	@ (8002648 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8002638:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800263a:	490c      	ldr	r1, [pc, #48]	@ (800266c <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 800263c:	400b      	ands	r3, r1
 800263e:	6393      	str	r3, [r2, #56]	@ 0x38
 8002640:	e79a      	b.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0xa8>
  return HAL_OK;
 8002642:	2000      	movs	r0, #0
}
 8002644:	bd70      	pop	{r4, r5, r6, pc}
 8002646:	46c0      	nop			@ (mov r8, r8)
 8002648:	40021000 	.word	0x40021000
 800264c:	40007000 	.word	0x40007000
 8002650:	fffcffff 	.word	0xfffcffff
 8002654:	fff7ffff 	.word	0xfff7ffff
 8002658:	fffff3ff 	.word	0xfffff3ff
 800265c:	ffffcfff 	.word	0xffffcfff
 8002660:	fff3ffff 	.word	0xfff3ffff
 8002664:	00001388 	.word	0x00001388
 8002668:	ffcfffff 	.word	0xffcfffff
 800266c:	efffffff 	.word	0xefffffff

08002670 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002670:	b570      	push	{r4, r5, r6, lr}
 8002672:	0004      	movs	r4, r0
  uint32_t tickstart = 0U;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002674:	6803      	ldr	r3, [r0, #0]
 8002676:	4a0a      	ldr	r2, [pc, #40]	@ (80026a0 <HAL_RTC_WaitForSynchro+0x30>)
 8002678:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800267a:	f7fe fdd1 	bl	8001220 <HAL_GetTick>
 800267e:	0005      	movs	r5, r0

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002680:	6823      	ldr	r3, [r4, #0]
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	069b      	lsls	r3, r3, #26
 8002686:	d408      	bmi.n	800269a <HAL_RTC_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002688:	f7fe fdca 	bl	8001220 <HAL_GetTick>
 800268c:	1b40      	subs	r0, r0, r5
 800268e:	23fa      	movs	r3, #250	@ 0xfa
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	4298      	cmp	r0, r3
 8002694:	d9f4      	bls.n	8002680 <HAL_RTC_WaitForSynchro+0x10>
    {
      return HAL_TIMEOUT;
 8002696:	2003      	movs	r0, #3
 8002698:	e000      	b.n	800269c <HAL_RTC_WaitForSynchro+0x2c>
    }
  }

  return HAL_OK;
 800269a:	2000      	movs	r0, #0
}
 800269c:	bd70      	pop	{r4, r5, r6, pc}
 800269e:	46c0      	nop			@ (mov r8, r8)
 80026a0:	0001ff5f 	.word	0x0001ff5f

080026a4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80026a4:	b570      	push	{r4, r5, r6, lr}
 80026a6:	0004      	movs	r4, r0
  uint32_t tickstart = 0U;
  HAL_StatusTypeDef status = HAL_OK;

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80026a8:	6802      	ldr	r2, [r0, #0]
 80026aa:	68d3      	ldr	r3, [r2, #12]
 80026ac:	065b      	lsls	r3, r3, #25
 80026ae:	d502      	bpl.n	80026b6 <RTC_EnterInitMode+0x12>
  HAL_StatusTypeDef status = HAL_OK;
 80026b0:	2500      	movs	r5, #0
      }
    }
  }

  return status;
}
 80026b2:	0028      	movs	r0, r5
 80026b4:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80026b6:	68d3      	ldr	r3, [r2, #12]
 80026b8:	2180      	movs	r1, #128	@ 0x80
 80026ba:	430b      	orrs	r3, r1
 80026bc:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 80026be:	f7fe fdaf 	bl	8001220 <HAL_GetTick>
 80026c2:	0006      	movs	r6, r0
  HAL_StatusTypeDef status = HAL_OK;
 80026c4:	2500      	movs	r5, #0
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80026c6:	6823      	ldr	r3, [r4, #0]
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	065b      	lsls	r3, r3, #25
 80026cc:	d4f1      	bmi.n	80026b2 <RTC_EnterInitMode+0xe>
 80026ce:	2d01      	cmp	r5, #1
 80026d0:	d0ef      	beq.n	80026b2 <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80026d2:	f7fe fda5 	bl	8001220 <HAL_GetTick>
 80026d6:	1b80      	subs	r0, r0, r6
 80026d8:	22fa      	movs	r2, #250	@ 0xfa
 80026da:	0092      	lsls	r2, r2, #2
 80026dc:	4290      	cmp	r0, r2
 80026de:	d9f2      	bls.n	80026c6 <RTC_EnterInitMode+0x22>
        hrtc->State = HAL_RTC_STATE_ERROR;
 80026e0:	2321      	movs	r3, #33	@ 0x21
 80026e2:	2204      	movs	r2, #4
 80026e4:	54e2      	strb	r2, [r4, r3]
        status = HAL_ERROR;
 80026e6:	2501      	movs	r5, #1
 80026e8:	e7ed      	b.n	80026c6 <RTC_EnterInitMode+0x22>

080026ea <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80026ea:	b510      	push	{r4, lr}
 80026ec:	0004      	movs	r4, r0
  HAL_StatusTypeDef status = HAL_OK;

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80026ee:	6802      	ldr	r2, [r0, #0]
 80026f0:	68d3      	ldr	r3, [r2, #12]
 80026f2:	2180      	movs	r1, #128	@ 0x80
 80026f4:	438b      	bics	r3, r1
 80026f6:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80026f8:	6803      	ldr	r3, [r0, #0]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	069b      	lsls	r3, r3, #26
 80026fe:	d501      	bpl.n	8002704 <RTC_ExitInitMode+0x1a>
  HAL_StatusTypeDef status = HAL_OK;
 8002700:	2000      	movs	r0, #0
      status = HAL_ERROR;
    }
  }

  return status;
}
 8002702:	bd10      	pop	{r4, pc}
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002704:	f7ff ffb4 	bl	8002670 <HAL_RTC_WaitForSynchro>
 8002708:	2800      	cmp	r0, #0
 800270a:	d0fa      	beq.n	8002702 <RTC_ExitInitMode+0x18>
      hrtc->State = HAL_RTC_STATE_ERROR;
 800270c:	2321      	movs	r3, #33	@ 0x21
 800270e:	2204      	movs	r2, #4
 8002710:	54e2      	strb	r2, [r4, r3]
      status = HAL_ERROR;
 8002712:	2001      	movs	r0, #1
 8002714:	e7f5      	b.n	8002702 <RTC_ExitInitMode+0x18>
	...

08002718 <HAL_RTC_Init>:
{
 8002718:	b570      	push	{r4, r5, r6, lr}
 800271a:	1e04      	subs	r4, r0, #0
  if (hrtc == NULL)
 800271c:	d04e      	beq.n	80027bc <HAL_RTC_Init+0xa4>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800271e:	2321      	movs	r3, #33	@ 0x21
 8002720:	5cc3      	ldrb	r3, [r0, r3]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d00b      	beq.n	800273e <HAL_RTC_Init+0x26>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002726:	2321      	movs	r3, #33	@ 0x21
 8002728:	2202      	movs	r2, #2
 800272a:	54e2      	strb	r2, [r4, r3]
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800272c:	6822      	ldr	r2, [r4, #0]
 800272e:	68d3      	ldr	r3, [r2, #12]
 8002730:	06db      	lsls	r3, r3, #27
 8002732:	d50a      	bpl.n	800274a <HAL_RTC_Init+0x32>
    status = HAL_OK;
 8002734:	2000      	movs	r0, #0
    hrtc->State = HAL_RTC_STATE_READY;
 8002736:	2321      	movs	r3, #33	@ 0x21
 8002738:	2201      	movs	r2, #1
 800273a:	54e2      	strb	r2, [r4, r3]
}
 800273c:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Lock = HAL_UNLOCKED;
 800273e:	3320      	adds	r3, #32
 8002740:	2200      	movs	r2, #0
 8002742:	54c2      	strb	r2, [r0, r3]
    HAL_RTC_MspInit(hrtc);
 8002744:	f7fe fb76 	bl	8000e34 <HAL_RTC_MspInit>
 8002748:	e7ed      	b.n	8002726 <HAL_RTC_Init+0xe>
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800274a:	23ca      	movs	r3, #202	@ 0xca
 800274c:	6253      	str	r3, [r2, #36]	@ 0x24
 800274e:	6823      	ldr	r3, [r4, #0]
 8002750:	2253      	movs	r2, #83	@ 0x53
 8002752:	625a      	str	r2, [r3, #36]	@ 0x24
    status = RTC_EnterInitMode(hrtc);
 8002754:	0020      	movs	r0, r4
 8002756:	f7ff ffa5 	bl	80026a4 <RTC_EnterInitMode>
    if (status == HAL_OK)
 800275a:	2800      	cmp	r0, #0
 800275c:	d005      	beq.n	800276a <HAL_RTC_Init+0x52>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800275e:	6823      	ldr	r3, [r4, #0]
 8002760:	22ff      	movs	r2, #255	@ 0xff
 8002762:	625a      	str	r2, [r3, #36]	@ 0x24
  if (status == HAL_OK)
 8002764:	2800      	cmp	r0, #0
 8002766:	d1e9      	bne.n	800273c <HAL_RTC_Init+0x24>
 8002768:	e7e5      	b.n	8002736 <HAL_RTC_Init+0x1e>
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800276a:	6822      	ldr	r2, [r4, #0]
 800276c:	6893      	ldr	r3, [r2, #8]
 800276e:	4914      	ldr	r1, [pc, #80]	@ (80027c0 <HAL_RTC_Init+0xa8>)
 8002770:	400b      	ands	r3, r1
 8002772:	6093      	str	r3, [r2, #8]
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002774:	6821      	ldr	r1, [r4, #0]
 8002776:	688a      	ldr	r2, [r1, #8]
 8002778:	6863      	ldr	r3, [r4, #4]
 800277a:	6920      	ldr	r0, [r4, #16]
 800277c:	4303      	orrs	r3, r0
 800277e:	69a0      	ldr	r0, [r4, #24]
 8002780:	4303      	orrs	r3, r0
 8002782:	4313      	orrs	r3, r2
 8002784:	608b      	str	r3, [r1, #8]
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002786:	6823      	ldr	r3, [r4, #0]
 8002788:	68e2      	ldr	r2, [r4, #12]
 800278a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800278c:	6821      	ldr	r1, [r4, #0]
 800278e:	690b      	ldr	r3, [r1, #16]
 8002790:	68a2      	ldr	r2, [r4, #8]
 8002792:	0412      	lsls	r2, r2, #16
 8002794:	4313      	orrs	r3, r2
 8002796:	610b      	str	r3, [r1, #16]
      status = RTC_ExitInitMode(hrtc);
 8002798:	0020      	movs	r0, r4
 800279a:	f7ff ffa6 	bl	80026ea <RTC_ExitInitMode>
    if (status == HAL_OK)
 800279e:	2800      	cmp	r0, #0
 80027a0:	d1dd      	bne.n	800275e <HAL_RTC_Init+0x46>
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 80027a2:	6822      	ldr	r2, [r4, #0]
 80027a4:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 80027a6:	2103      	movs	r1, #3
 80027a8:	438b      	bics	r3, r1
 80027aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80027ac:	6821      	ldr	r1, [r4, #0]
 80027ae:	6ccb      	ldr	r3, [r1, #76]	@ 0x4c
 80027b0:	69e2      	ldr	r2, [r4, #28]
 80027b2:	6965      	ldr	r5, [r4, #20]
 80027b4:	432a      	orrs	r2, r5
 80027b6:	4313      	orrs	r3, r2
 80027b8:	64cb      	str	r3, [r1, #76]	@ 0x4c
 80027ba:	e7d0      	b.n	800275e <HAL_RTC_Init+0x46>
    return HAL_ERROR;
 80027bc:	2001      	movs	r0, #1
 80027be:	e7bd      	b.n	800273c <HAL_RTC_Init+0x24>
 80027c0:	ff8fffbf 	.word	0xff8fffbf

080027c4 <TIM_Base_SetConfig>:
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027c4:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027c6:	2280      	movs	r2, #128	@ 0x80
 80027c8:	05d2      	lsls	r2, r2, #23
 80027ca:	4290      	cmp	r0, r2
 80027cc:	d005      	beq.n	80027da <TIM_Base_SetConfig+0x16>
 80027ce:	4a12      	ldr	r2, [pc, #72]	@ (8002818 <TIM_Base_SetConfig+0x54>)
 80027d0:	4290      	cmp	r0, r2
 80027d2:	d002      	beq.n	80027da <TIM_Base_SetConfig+0x16>
 80027d4:	4a11      	ldr	r2, [pc, #68]	@ (800281c <TIM_Base_SetConfig+0x58>)
 80027d6:	4290      	cmp	r0, r2
 80027d8:	d103      	bne.n	80027e2 <TIM_Base_SetConfig+0x1e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027da:	2270      	movs	r2, #112	@ 0x70
 80027dc:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 80027de:	684a      	ldr	r2, [r1, #4]
 80027e0:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027e2:	2280      	movs	r2, #128	@ 0x80
 80027e4:	05d2      	lsls	r2, r2, #23
 80027e6:	4290      	cmp	r0, r2
 80027e8:	d005      	beq.n	80027f6 <TIM_Base_SetConfig+0x32>
 80027ea:	4a0b      	ldr	r2, [pc, #44]	@ (8002818 <TIM_Base_SetConfig+0x54>)
 80027ec:	4290      	cmp	r0, r2
 80027ee:	d002      	beq.n	80027f6 <TIM_Base_SetConfig+0x32>
 80027f0:	4a0a      	ldr	r2, [pc, #40]	@ (800281c <TIM_Base_SetConfig+0x58>)
 80027f2:	4290      	cmp	r0, r2
 80027f4:	d103      	bne.n	80027fe <TIM_Base_SetConfig+0x3a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027f6:	4a0a      	ldr	r2, [pc, #40]	@ (8002820 <TIM_Base_SetConfig+0x5c>)
 80027f8:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027fa:	68ca      	ldr	r2, [r1, #12]
 80027fc:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027fe:	2280      	movs	r2, #128	@ 0x80
 8002800:	4393      	bics	r3, r2
 8002802:	690a      	ldr	r2, [r1, #16]
 8002804:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8002806:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002808:	688b      	ldr	r3, [r1, #8]
 800280a:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800280c:	680b      	ldr	r3, [r1, #0]
 800280e:	6283      	str	r3, [r0, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002810:	2301      	movs	r3, #1
 8002812:	6143      	str	r3, [r0, #20]
}
 8002814:	4770      	bx	lr
 8002816:	46c0      	nop			@ (mov r8, r8)
 8002818:	40010800 	.word	0x40010800
 800281c:	40011400 	.word	0x40011400
 8002820:	fffffcff 	.word	0xfffffcff

08002824 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002824:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002826:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002828:	6a04      	ldr	r4, [r0, #32]
 800282a:	2501      	movs	r5, #1
 800282c:	43ac      	bics	r4, r5
 800282e:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002830:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002832:	35ef      	adds	r5, #239	@ 0xef
 8002834:	43ac      	bics	r4, r5
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002836:	0112      	lsls	r2, r2, #4
 8002838:	4322      	orrs	r2, r4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800283a:	240a      	movs	r4, #10
 800283c:	43a3      	bics	r3, r4
  tmpccer |= TIM_ICPolarity;
 800283e:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002840:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002842:	6203      	str	r3, [r0, #32]
}
 8002844:	bd30      	pop	{r4, r5, pc}
	...

08002848 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002848:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800284a:	6a03      	ldr	r3, [r0, #32]
 800284c:	2410      	movs	r4, #16
 800284e:	43a3      	bics	r3, r4
 8002850:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002852:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8002854:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002856:	4d05      	ldr	r5, [pc, #20]	@ (800286c <TIM_TI2_ConfigInputStage+0x24>)
 8002858:	402c      	ands	r4, r5
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800285a:	0312      	lsls	r2, r2, #12
 800285c:	4322      	orrs	r2, r4

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800285e:	24a0      	movs	r4, #160	@ 0xa0
 8002860:	43a3      	bics	r3, r4
  tmpccer |= (TIM_ICPolarity << 4U);
 8002862:	0109      	lsls	r1, r1, #4
 8002864:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002866:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002868:	6201      	str	r1, [r0, #32]
}
 800286a:	bd30      	pop	{r4, r5, pc}
 800286c:	ffff0fff 	.word	0xffff0fff

08002870 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002870:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002872:	2270      	movs	r2, #112	@ 0x70
 8002874:	4393      	bics	r3, r2
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002876:	430b      	orrs	r3, r1
 8002878:	3a69      	subs	r2, #105	@ 0x69
 800287a:	4313      	orrs	r3, r2
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800287c:	6083      	str	r3, [r0, #8]
}
 800287e:	4770      	bx	lr

08002880 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002880:	b530      	push	{r4, r5, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002882:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002884:	4d03      	ldr	r5, [pc, #12]	@ (8002894 <TIM_ETR_SetConfig+0x14>)
 8002886:	402c      	ands	r4, r5

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002888:	021b      	lsls	r3, r3, #8
 800288a:	4313      	orrs	r3, r2
 800288c:	430b      	orrs	r3, r1
 800288e:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002890:	6083      	str	r3, [r0, #8]
}
 8002892:	bd30      	pop	{r4, r5, pc}
 8002894:	ffff00ff 	.word	0xffff00ff

08002898 <HAL_TIM_Base_Init>:
{
 8002898:	b570      	push	{r4, r5, r6, lr}
 800289a:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 800289c:	d01e      	beq.n	80028dc <HAL_TIM_Base_Init+0x44>
  if (htim->State == HAL_TIM_STATE_RESET)
 800289e:	2339      	movs	r3, #57	@ 0x39
 80028a0:	5cc3      	ldrb	r3, [r0, r3]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d014      	beq.n	80028d0 <HAL_TIM_Base_Init+0x38>
  htim->State = HAL_TIM_STATE_BUSY;
 80028a6:	2539      	movs	r5, #57	@ 0x39
 80028a8:	2302      	movs	r3, #2
 80028aa:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028ac:	0021      	movs	r1, r4
 80028ae:	c901      	ldmia	r1!, {r0}
 80028b0:	f7ff ff88 	bl	80027c4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028b4:	2301      	movs	r3, #1
 80028b6:	223e      	movs	r2, #62	@ 0x3e
 80028b8:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028ba:	3a04      	subs	r2, #4
 80028bc:	54a3      	strb	r3, [r4, r2]
 80028be:	3201      	adds	r2, #1
 80028c0:	54a3      	strb	r3, [r4, r2]
 80028c2:	3201      	adds	r2, #1
 80028c4:	54a3      	strb	r3, [r4, r2]
 80028c6:	3201      	adds	r2, #1
 80028c8:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 80028ca:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 80028cc:	2000      	movs	r0, #0
}
 80028ce:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 80028d0:	3338      	adds	r3, #56	@ 0x38
 80028d2:	2200      	movs	r2, #0
 80028d4:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 80028d6:	f7fe fabd 	bl	8000e54 <HAL_TIM_Base_MspInit>
 80028da:	e7e4      	b.n	80028a6 <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 80028dc:	2001      	movs	r0, #1
 80028de:	e7f6      	b.n	80028ce <HAL_TIM_Base_Init+0x36>

080028e0 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 80028e0:	2339      	movs	r3, #57	@ 0x39
 80028e2:	5cc3      	ldrb	r3, [r0, r3]
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d123      	bne.n	8002930 <HAL_TIM_Base_Start_IT+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 80028e8:	3338      	adds	r3, #56	@ 0x38
 80028ea:	2202      	movs	r2, #2
 80028ec:	54c2      	strb	r2, [r0, r3]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80028ee:	6802      	ldr	r2, [r0, #0]
 80028f0:	68d3      	ldr	r3, [r2, #12]
 80028f2:	2101      	movs	r1, #1
 80028f4:	430b      	orrs	r3, r1
 80028f6:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028f8:	6803      	ldr	r3, [r0, #0]
 80028fa:	2280      	movs	r2, #128	@ 0x80
 80028fc:	05d2      	lsls	r2, r2, #23
 80028fe:	4293      	cmp	r3, r2
 8002900:	d00b      	beq.n	800291a <HAL_TIM_Base_Start_IT+0x3a>
 8002902:	4a0d      	ldr	r2, [pc, #52]	@ (8002938 <HAL_TIM_Base_Start_IT+0x58>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d008      	beq.n	800291a <HAL_TIM_Base_Start_IT+0x3a>
 8002908:	4a0c      	ldr	r2, [pc, #48]	@ (800293c <HAL_TIM_Base_Start_IT+0x5c>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d005      	beq.n	800291a <HAL_TIM_Base_Start_IT+0x3a>
    __HAL_TIM_ENABLE(htim);
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	2101      	movs	r1, #1
 8002912:	430a      	orrs	r2, r1
 8002914:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002916:	2000      	movs	r0, #0
 8002918:	e00b      	b.n	8002932 <HAL_TIM_Base_Start_IT+0x52>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800291a:	6899      	ldr	r1, [r3, #8]
 800291c:	2207      	movs	r2, #7
 800291e:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002920:	2a06      	cmp	r2, #6
 8002922:	d007      	beq.n	8002934 <HAL_TIM_Base_Start_IT+0x54>
      __HAL_TIM_ENABLE(htim);
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	2101      	movs	r1, #1
 8002928:	430a      	orrs	r2, r1
 800292a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800292c:	2000      	movs	r0, #0
 800292e:	e000      	b.n	8002932 <HAL_TIM_Base_Start_IT+0x52>
    return HAL_ERROR;
 8002930:	2001      	movs	r0, #1
}
 8002932:	4770      	bx	lr
  return HAL_OK;
 8002934:	2000      	movs	r0, #0
 8002936:	e7fc      	b.n	8002932 <HAL_TIM_Base_Start_IT+0x52>
 8002938:	40010800 	.word	0x40010800
 800293c:	40011400 	.word	0x40011400

08002940 <HAL_TIM_ConfigClockSource>:
{
 8002940:	b510      	push	{r4, lr}
 8002942:	0004      	movs	r4, r0
 8002944:	0008      	movs	r0, r1
  __HAL_LOCK(htim);
 8002946:	2338      	movs	r3, #56	@ 0x38
 8002948:	5ce3      	ldrb	r3, [r4, r3]
 800294a:	2b01      	cmp	r3, #1
 800294c:	d100      	bne.n	8002950 <HAL_TIM_ConfigClockSource+0x10>
 800294e:	e077      	b.n	8002a40 <HAL_TIM_ConfigClockSource+0x100>
 8002950:	2338      	movs	r3, #56	@ 0x38
 8002952:	2201      	movs	r2, #1
 8002954:	54e2      	strb	r2, [r4, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 8002956:	3301      	adds	r3, #1
 8002958:	3201      	adds	r2, #1
 800295a:	54e2      	strb	r2, [r4, r3]
  tmpsmcr = htim->Instance->SMCR;
 800295c:	6822      	ldr	r2, [r4, #0]
 800295e:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002960:	4938      	ldr	r1, [pc, #224]	@ (8002a44 <HAL_TIM_ConfigClockSource+0x104>)
 8002962:	400b      	ands	r3, r1
  htim->Instance->SMCR = tmpsmcr;
 8002964:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8002966:	6801      	ldr	r1, [r0, #0]
 8002968:	2960      	cmp	r1, #96	@ 0x60
 800296a:	d04f      	beq.n	8002a0c <HAL_TIM_ConfigClockSource+0xcc>
 800296c:	d829      	bhi.n	80029c2 <HAL_TIM_ConfigClockSource+0x82>
 800296e:	2940      	cmp	r1, #64	@ 0x40
 8002970:	d057      	beq.n	8002a22 <HAL_TIM_ConfigClockSource+0xe2>
 8002972:	d90c      	bls.n	800298e <HAL_TIM_ConfigClockSource+0x4e>
 8002974:	2950      	cmp	r1, #80	@ 0x50
 8002976:	d122      	bne.n	80029be <HAL_TIM_ConfigClockSource+0x7e>
                               sClockSourceConfig->ClockPolarity,
 8002978:	6841      	ldr	r1, [r0, #4]
                               sClockSourceConfig->ClockFilter);
 800297a:	68c2      	ldr	r2, [r0, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800297c:	6820      	ldr	r0, [r4, #0]
 800297e:	f7ff ff51 	bl	8002824 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002982:	6820      	ldr	r0, [r4, #0]
 8002984:	2150      	movs	r1, #80	@ 0x50
 8002986:	f7ff ff73 	bl	8002870 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800298a:	2000      	movs	r0, #0
      break;
 800298c:	e005      	b.n	800299a <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 800298e:	2920      	cmp	r1, #32
 8002990:	d00e      	beq.n	80029b0 <HAL_TIM_ConfigClockSource+0x70>
 8002992:	d909      	bls.n	80029a8 <HAL_TIM_ConfigClockSource+0x68>
 8002994:	2930      	cmp	r1, #48	@ 0x30
 8002996:	d00b      	beq.n	80029b0 <HAL_TIM_ConfigClockSource+0x70>
      status = HAL_ERROR;
 8002998:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 800299a:	2339      	movs	r3, #57	@ 0x39
 800299c:	2201      	movs	r2, #1
 800299e:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(htim);
 80029a0:	3b01      	subs	r3, #1
 80029a2:	2200      	movs	r2, #0
 80029a4:	54e2      	strb	r2, [r4, r3]
}
 80029a6:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 80029a8:	2900      	cmp	r1, #0
 80029aa:	d001      	beq.n	80029b0 <HAL_TIM_ConfigClockSource+0x70>
 80029ac:	2910      	cmp	r1, #16
 80029ae:	d104      	bne.n	80029ba <HAL_TIM_ConfigClockSource+0x7a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80029b0:	6820      	ldr	r0, [r4, #0]
 80029b2:	f7ff ff5d 	bl	8002870 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80029b6:	2000      	movs	r0, #0
      break;
 80029b8:	e7ef      	b.n	800299a <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 80029ba:	2001      	movs	r0, #1
 80029bc:	e7ed      	b.n	800299a <HAL_TIM_ConfigClockSource+0x5a>
 80029be:	2001      	movs	r0, #1
 80029c0:	e7eb      	b.n	800299a <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 80029c2:	2280      	movs	r2, #128	@ 0x80
 80029c4:	0152      	lsls	r2, r2, #5
 80029c6:	4291      	cmp	r1, r2
 80029c8:	d036      	beq.n	8002a38 <HAL_TIM_ConfigClockSource+0xf8>
 80029ca:	2280      	movs	r2, #128	@ 0x80
 80029cc:	0192      	lsls	r2, r2, #6
 80029ce:	4291      	cmp	r1, r2
 80029d0:	d10d      	bne.n	80029ee <HAL_TIM_ConfigClockSource+0xae>
                        sClockSourceConfig->ClockPrescaler,
 80029d2:	6881      	ldr	r1, [r0, #8]
                        sClockSourceConfig->ClockPolarity,
 80029d4:	6842      	ldr	r2, [r0, #4]
                        sClockSourceConfig->ClockFilter);
 80029d6:	68c3      	ldr	r3, [r0, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80029d8:	6820      	ldr	r0, [r4, #0]
 80029da:	f7ff ff51 	bl	8002880 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80029de:	6822      	ldr	r2, [r4, #0]
 80029e0:	6891      	ldr	r1, [r2, #8]
 80029e2:	2380      	movs	r3, #128	@ 0x80
 80029e4:	01db      	lsls	r3, r3, #7
 80029e6:	430b      	orrs	r3, r1
 80029e8:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80029ea:	2000      	movs	r0, #0
      break;
 80029ec:	e7d5      	b.n	800299a <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 80029ee:	2970      	cmp	r1, #112	@ 0x70
 80029f0:	d124      	bne.n	8002a3c <HAL_TIM_ConfigClockSource+0xfc>
                        sClockSourceConfig->ClockPrescaler,
 80029f2:	6881      	ldr	r1, [r0, #8]
                        sClockSourceConfig->ClockPolarity,
 80029f4:	6842      	ldr	r2, [r0, #4]
                        sClockSourceConfig->ClockFilter);
 80029f6:	68c3      	ldr	r3, [r0, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80029f8:	6820      	ldr	r0, [r4, #0]
 80029fa:	f7ff ff41 	bl	8002880 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80029fe:	6822      	ldr	r2, [r4, #0]
 8002a00:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a02:	2177      	movs	r1, #119	@ 0x77
 8002a04:	430b      	orrs	r3, r1
      htim->Instance->SMCR = tmpsmcr;
 8002a06:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002a08:	2000      	movs	r0, #0
      break;
 8002a0a:	e7c6      	b.n	800299a <HAL_TIM_ConfigClockSource+0x5a>
                               sClockSourceConfig->ClockPolarity,
 8002a0c:	6841      	ldr	r1, [r0, #4]
                               sClockSourceConfig->ClockFilter);
 8002a0e:	68c2      	ldr	r2, [r0, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a10:	6820      	ldr	r0, [r4, #0]
 8002a12:	f7ff ff19 	bl	8002848 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a16:	6820      	ldr	r0, [r4, #0]
 8002a18:	2160      	movs	r1, #96	@ 0x60
 8002a1a:	f7ff ff29 	bl	8002870 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002a1e:	2000      	movs	r0, #0
      break;
 8002a20:	e7bb      	b.n	800299a <HAL_TIM_ConfigClockSource+0x5a>
                               sClockSourceConfig->ClockPolarity,
 8002a22:	6841      	ldr	r1, [r0, #4]
                               sClockSourceConfig->ClockFilter);
 8002a24:	68c2      	ldr	r2, [r0, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a26:	6820      	ldr	r0, [r4, #0]
 8002a28:	f7ff fefc 	bl	8002824 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a2c:	6820      	ldr	r0, [r4, #0]
 8002a2e:	2140      	movs	r1, #64	@ 0x40
 8002a30:	f7ff ff1e 	bl	8002870 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002a34:	2000      	movs	r0, #0
      break;
 8002a36:	e7b0      	b.n	800299a <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8002a38:	2000      	movs	r0, #0
 8002a3a:	e7ae      	b.n	800299a <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 8002a3c:	2001      	movs	r0, #1
 8002a3e:	e7ac      	b.n	800299a <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 8002a40:	2002      	movs	r0, #2
 8002a42:	e7b0      	b.n	80029a6 <HAL_TIM_ConfigClockSource+0x66>
 8002a44:	ffff0088 	.word	0xffff0088

08002a48 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8002a48:	4770      	bx	lr

08002a4a <HAL_TIM_IC_CaptureCallback>:
}
 8002a4a:	4770      	bx	lr

08002a4c <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8002a4c:	4770      	bx	lr

08002a4e <HAL_TIM_TriggerCallback>:
}
 8002a4e:	4770      	bx	lr

08002a50 <HAL_TIM_IRQHandler>:
{
 8002a50:	b510      	push	{r4, lr}
 8002a52:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a54:	6802      	ldr	r2, [r0, #0]
 8002a56:	6913      	ldr	r3, [r2, #16]
 8002a58:	079b      	lsls	r3, r3, #30
 8002a5a:	d50f      	bpl.n	8002a7c <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a5c:	68d3      	ldr	r3, [r2, #12]
 8002a5e:	079b      	lsls	r3, r3, #30
 8002a60:	d50c      	bpl.n	8002a7c <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a62:	2303      	movs	r3, #3
 8002a64:	425b      	negs	r3, r3
 8002a66:	6113      	str	r3, [r2, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a68:	3304      	adds	r3, #4
 8002a6a:	7603      	strb	r3, [r0, #24]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a6c:	6803      	ldr	r3, [r0, #0]
 8002a6e:	699b      	ldr	r3, [r3, #24]
 8002a70:	079b      	lsls	r3, r3, #30
 8002a72:	d055      	beq.n	8002b20 <HAL_TIM_IRQHandler+0xd0>
          HAL_TIM_IC_CaptureCallback(htim);
 8002a74:	f7ff ffe9 	bl	8002a4a <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a7c:	6822      	ldr	r2, [r4, #0]
 8002a7e:	6913      	ldr	r3, [r2, #16]
 8002a80:	075b      	lsls	r3, r3, #29
 8002a82:	d512      	bpl.n	8002aaa <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a84:	68d3      	ldr	r3, [r2, #12]
 8002a86:	075b      	lsls	r3, r3, #29
 8002a88:	d50f      	bpl.n	8002aaa <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a8a:	2305      	movs	r3, #5
 8002a8c:	425b      	negs	r3, r3
 8002a8e:	6113      	str	r3, [r2, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a90:	3307      	adds	r3, #7
 8002a92:	7623      	strb	r3, [r4, #24]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a94:	6823      	ldr	r3, [r4, #0]
 8002a96:	699a      	ldr	r2, [r3, #24]
 8002a98:	23c0      	movs	r3, #192	@ 0xc0
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	421a      	tst	r2, r3
 8002a9e:	d045      	beq.n	8002b2c <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 8002aa0:	0020      	movs	r0, r4
 8002aa2:	f7ff ffd2 	bl	8002a4a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002aaa:	6822      	ldr	r2, [r4, #0]
 8002aac:	6913      	ldr	r3, [r2, #16]
 8002aae:	071b      	lsls	r3, r3, #28
 8002ab0:	d510      	bpl.n	8002ad4 <HAL_TIM_IRQHandler+0x84>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ab2:	68d3      	ldr	r3, [r2, #12]
 8002ab4:	071b      	lsls	r3, r3, #28
 8002ab6:	d50d      	bpl.n	8002ad4 <HAL_TIM_IRQHandler+0x84>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ab8:	2309      	movs	r3, #9
 8002aba:	425b      	negs	r3, r3
 8002abc:	6113      	str	r3, [r2, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002abe:	330d      	adds	r3, #13
 8002ac0:	7623      	strb	r3, [r4, #24]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ac2:	6823      	ldr	r3, [r4, #0]
 8002ac4:	69db      	ldr	r3, [r3, #28]
 8002ac6:	079b      	lsls	r3, r3, #30
 8002ac8:	d037      	beq.n	8002b3a <HAL_TIM_IRQHandler+0xea>
        HAL_TIM_IC_CaptureCallback(htim);
 8002aca:	0020      	movs	r0, r4
 8002acc:	f7ff ffbd 	bl	8002a4a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ad4:	6822      	ldr	r2, [r4, #0]
 8002ad6:	6913      	ldr	r3, [r2, #16]
 8002ad8:	06db      	lsls	r3, r3, #27
 8002ada:	d512      	bpl.n	8002b02 <HAL_TIM_IRQHandler+0xb2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002adc:	68d3      	ldr	r3, [r2, #12]
 8002ade:	06db      	lsls	r3, r3, #27
 8002ae0:	d50f      	bpl.n	8002b02 <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ae2:	2311      	movs	r3, #17
 8002ae4:	425b      	negs	r3, r3
 8002ae6:	6113      	str	r3, [r2, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ae8:	3319      	adds	r3, #25
 8002aea:	7623      	strb	r3, [r4, #24]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002aec:	6823      	ldr	r3, [r4, #0]
 8002aee:	69da      	ldr	r2, [r3, #28]
 8002af0:	23c0      	movs	r3, #192	@ 0xc0
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	421a      	tst	r2, r3
 8002af6:	d027      	beq.n	8002b48 <HAL_TIM_IRQHandler+0xf8>
        HAL_TIM_IC_CaptureCallback(htim);
 8002af8:	0020      	movs	r0, r4
 8002afa:	f7ff ffa6 	bl	8002a4a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002afe:	2300      	movs	r3, #0
 8002b00:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b02:	6822      	ldr	r2, [r4, #0]
 8002b04:	6913      	ldr	r3, [r2, #16]
 8002b06:	07db      	lsls	r3, r3, #31
 8002b08:	d502      	bpl.n	8002b10 <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b0a:	68d3      	ldr	r3, [r2, #12]
 8002b0c:	07db      	lsls	r3, r3, #31
 8002b0e:	d422      	bmi.n	8002b56 <HAL_TIM_IRQHandler+0x106>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b10:	6822      	ldr	r2, [r4, #0]
 8002b12:	6913      	ldr	r3, [r2, #16]
 8002b14:	065b      	lsls	r3, r3, #25
 8002b16:	d502      	bpl.n	8002b1e <HAL_TIM_IRQHandler+0xce>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b18:	68d3      	ldr	r3, [r2, #12]
 8002b1a:	065b      	lsls	r3, r3, #25
 8002b1c:	d422      	bmi.n	8002b64 <HAL_TIM_IRQHandler+0x114>
}
 8002b1e:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b20:	f7ff ff92 	bl	8002a48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b24:	0020      	movs	r0, r4
 8002b26:	f7ff ff91 	bl	8002a4c <HAL_TIM_PWM_PulseFinishedCallback>
 8002b2a:	e7a5      	b.n	8002a78 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b2c:	0020      	movs	r0, r4
 8002b2e:	f7ff ff8b 	bl	8002a48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b32:	0020      	movs	r0, r4
 8002b34:	f7ff ff8a 	bl	8002a4c <HAL_TIM_PWM_PulseFinishedCallback>
 8002b38:	e7b5      	b.n	8002aa6 <HAL_TIM_IRQHandler+0x56>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b3a:	0020      	movs	r0, r4
 8002b3c:	f7ff ff84 	bl	8002a48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b40:	0020      	movs	r0, r4
 8002b42:	f7ff ff83 	bl	8002a4c <HAL_TIM_PWM_PulseFinishedCallback>
 8002b46:	e7c3      	b.n	8002ad0 <HAL_TIM_IRQHandler+0x80>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b48:	0020      	movs	r0, r4
 8002b4a:	f7ff ff7d 	bl	8002a48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b4e:	0020      	movs	r0, r4
 8002b50:	f7ff ff7c 	bl	8002a4c <HAL_TIM_PWM_PulseFinishedCallback>
 8002b54:	e7d3      	b.n	8002afe <HAL_TIM_IRQHandler+0xae>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b56:	2302      	movs	r3, #2
 8002b58:	425b      	negs	r3, r3
 8002b5a:	6113      	str	r3, [r2, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b5c:	0020      	movs	r0, r4
 8002b5e:	f7fd fe45 	bl	80007ec <HAL_TIM_PeriodElapsedCallback>
 8002b62:	e7d5      	b.n	8002b10 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b64:	2341      	movs	r3, #65	@ 0x41
 8002b66:	425b      	negs	r3, r3
 8002b68:	6113      	str	r3, [r2, #16]
      HAL_TIM_TriggerCallback(htim);
 8002b6a:	0020      	movs	r0, r4
 8002b6c:	f7ff ff6f 	bl	8002a4e <HAL_TIM_TriggerCallback>
}
 8002b70:	e7d5      	b.n	8002b1e <HAL_TIM_IRQHandler+0xce>

08002b72 <HAL_TIM_Base_GetState>:
  return htim->State;
 8002b72:	2339      	movs	r3, #57	@ 0x39
 8002b74:	5cc0      	ldrb	r0, [r0, r3]
 8002b76:	b2c0      	uxtb	r0, r0
}
 8002b78:	4770      	bx	lr
	...

08002b7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b7c:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b7e:	2338      	movs	r3, #56	@ 0x38
 8002b80:	5cc3      	ldrb	r3, [r0, r3]
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d025      	beq.n	8002bd2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8002b86:	2338      	movs	r3, #56	@ 0x38
 8002b88:	2201      	movs	r2, #1
 8002b8a:	54c2      	strb	r2, [r0, r3]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b8c:	3301      	adds	r3, #1
 8002b8e:	3201      	adds	r2, #1
 8002b90:	54c2      	strb	r2, [r0, r3]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b92:	6803      	ldr	r3, [r0, #0]
 8002b94:	685c      	ldr	r4, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b96:	689d      	ldr	r5, [r3, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b98:	326e      	adds	r2, #110	@ 0x6e
 8002b9a:	4394      	bics	r4, r2
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b9c:	680a      	ldr	r2, [r1, #0]
 8002b9e:	4322      	orrs	r2, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ba0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ba2:	6803      	ldr	r3, [r0, #0]
 8002ba4:	2280      	movs	r2, #128	@ 0x80
 8002ba6:	05d2      	lsls	r2, r2, #23
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d005      	beq.n	8002bb8 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8002bac:	4a0a      	ldr	r2, [pc, #40]	@ (8002bd8 <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d002      	beq.n	8002bb8 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8002bb2:	4a0a      	ldr	r2, [pc, #40]	@ (8002bdc <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d104      	bne.n	8002bc2 <HAL_TIMEx_MasterConfigSynchronization+0x46>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002bb8:	2280      	movs	r2, #128	@ 0x80
 8002bba:	4395      	bics	r5, r2
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002bbc:	684a      	ldr	r2, [r1, #4]
 8002bbe:	432a      	orrs	r2, r5

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002bc0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002bc2:	2339      	movs	r3, #57	@ 0x39
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	54c2      	strb	r2, [r0, r3]

  __HAL_UNLOCK(htim);
 8002bc8:	3b01      	subs	r3, #1
 8002bca:	2200      	movs	r2, #0
 8002bcc:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 8002bce:	2000      	movs	r0, #0
}
 8002bd0:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 8002bd2:	2002      	movs	r0, #2
 8002bd4:	e7fc      	b.n	8002bd0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8002bd6:	46c0      	nop			@ (mov r8, r8)
 8002bd8:	40010800 	.word	0x40010800
 8002bdc:	40011400 	.word	0x40011400

08002be0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002be0:	b510      	push	{r4, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002be2:	f3ef 8c10 	mrs	ip, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002be6:	2201      	movs	r2, #1
 8002be8:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002bec:	6801      	ldr	r1, [r0, #0]
 8002bee:	680b      	ldr	r3, [r1, #0]
 8002bf0:	4c12      	ldr	r4, [pc, #72]	@ (8002c3c <UART_EndRxTransfer+0x5c>)
 8002bf2:	4023      	ands	r3, r4
 8002bf4:	600b      	str	r3, [r1, #0]
 8002bf6:	f38c 8810 	msr	PRIMASK, ip
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bfa:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bfe:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c02:	6801      	ldr	r1, [r0, #0]
 8002c04:	688b      	ldr	r3, [r1, #8]
 8002c06:	4393      	bics	r3, r2
 8002c08:	608b      	str	r3, [r1, #8]
 8002c0a:	f38c 8810 	msr	PRIMASK, ip

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c0e:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d006      	beq.n	8002c22 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002c14:	2380      	movs	r3, #128	@ 0x80
 8002c16:	2220      	movs	r2, #32
 8002c18:	50c2      	str	r2, [r0, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	6603      	str	r3, [r0, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002c1e:	6683      	str	r3, [r0, #104]	@ 0x68
}
 8002c20:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c22:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c26:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c2a:	6802      	ldr	r2, [r0, #0]
 8002c2c:	6813      	ldr	r3, [r2, #0]
 8002c2e:	3432      	adds	r4, #50	@ 0x32
 8002c30:	34ff      	adds	r4, #255	@ 0xff
 8002c32:	43a3      	bics	r3, r4
 8002c34:	6013      	str	r3, [r2, #0]
 8002c36:	f381 8810 	msr	PRIMASK, r1
}
 8002c3a:	e7eb      	b.n	8002c14 <UART_EndRxTransfer+0x34>
 8002c3c:	fffffedf 	.word	0xfffffedf

08002c40 <UART_SetConfig>:
{
 8002c40:	b5d0      	push	{r4, r6, r7, lr}
 8002c42:	0004      	movs	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8002c44:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c46:	6883      	ldr	r3, [r0, #8]
 8002c48:	6902      	ldr	r2, [r0, #16]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	6942      	ldr	r2, [r0, #20]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	69c2      	ldr	r2, [r0, #28]
 8002c52:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c54:	680a      	ldr	r2, [r1, #0]
 8002c56:	4884      	ldr	r0, [pc, #528]	@ (8002e68 <UART_SetConfig+0x228>)
 8002c58:	4002      	ands	r2, r0
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c5e:	6822      	ldr	r2, [r4, #0]
 8002c60:	6853      	ldr	r3, [r2, #4]
 8002c62:	4982      	ldr	r1, [pc, #520]	@ (8002e6c <UART_SetConfig+0x22c>)
 8002c64:	400b      	ands	r3, r1
 8002c66:	68e1      	ldr	r1, [r4, #12]
 8002c68:	430b      	orrs	r3, r1
 8002c6a:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002c6c:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002c6e:	6822      	ldr	r2, [r4, #0]
 8002c70:	4b7f      	ldr	r3, [pc, #508]	@ (8002e70 <UART_SetConfig+0x230>)
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d001      	beq.n	8002c7a <UART_SetConfig+0x3a>
    tmpreg |= huart->Init.OneBitSampling;
 8002c76:	6a23      	ldr	r3, [r4, #32]
 8002c78:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002c7a:	6893      	ldr	r3, [r2, #8]
 8002c7c:	487d      	ldr	r0, [pc, #500]	@ (8002e74 <UART_SetConfig+0x234>)
 8002c7e:	4003      	ands	r3, r0
 8002c80:	430b      	orrs	r3, r1
 8002c82:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c84:	6822      	ldr	r2, [r4, #0]
 8002c86:	4b7c      	ldr	r3, [pc, #496]	@ (8002e78 <UART_SetConfig+0x238>)
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d012      	beq.n	8002cb2 <UART_SetConfig+0x72>
 8002c8c:	4b78      	ldr	r3, [pc, #480]	@ (8002e70 <UART_SetConfig+0x230>)
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d020      	beq.n	8002cd4 <UART_SetConfig+0x94>
 8002c92:	2310      	movs	r3, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 8002c94:	4976      	ldr	r1, [pc, #472]	@ (8002e70 <UART_SetConfig+0x230>)
 8002c96:	428a      	cmp	r2, r1
 8002c98:	d042      	beq.n	8002d20 <UART_SetConfig+0xe0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c9a:	69e0      	ldr	r0, [r4, #28]
 8002c9c:	2280      	movs	r2, #128	@ 0x80
 8002c9e:	0212      	lsls	r2, r2, #8
 8002ca0:	4290      	cmp	r0, r2
 8002ca2:	d079      	beq.n	8002d98 <UART_SetConfig+0x158>
    switch (clocksource)
 8002ca4:	2b08      	cmp	r3, #8
 8002ca6:	d900      	bls.n	8002caa <UART_SetConfig+0x6a>
 8002ca8:	e0d8      	b.n	8002e5c <UART_SetConfig+0x21c>
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	4a73      	ldr	r2, [pc, #460]	@ (8002e7c <UART_SetConfig+0x23c>)
 8002cae:	58d3      	ldr	r3, [r2, r3]
 8002cb0:	469f      	mov	pc, r3
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002cb2:	4b73      	ldr	r3, [pc, #460]	@ (8002e80 <UART_SetConfig+0x240>)
 8002cb4:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8002cb6:	230c      	movs	r3, #12
 8002cb8:	400b      	ands	r3, r1
 8002cba:	2b08      	cmp	r3, #8
 8002cbc:	d022      	beq.n	8002d04 <UART_SetConfig+0xc4>
 8002cbe:	d805      	bhi.n	8002ccc <UART_SetConfig+0x8c>
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d021      	beq.n	8002d08 <UART_SetConfig+0xc8>
 8002cc4:	2b04      	cmp	r3, #4
 8002cc6:	d0e5      	beq.n	8002c94 <UART_SetConfig+0x54>
 8002cc8:	2310      	movs	r3, #16
 8002cca:	e7e3      	b.n	8002c94 <UART_SetConfig+0x54>
 8002ccc:	2b0c      	cmp	r3, #12
 8002cce:	d11d      	bne.n	8002d0c <UART_SetConfig+0xcc>
 8002cd0:	3b04      	subs	r3, #4
 8002cd2:	e7df      	b.n	8002c94 <UART_SetConfig+0x54>
 8002cd4:	4b6a      	ldr	r3, [pc, #424]	@ (8002e80 <UART_SetConfig+0x240>)
 8002cd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cd8:	21c0      	movs	r1, #192	@ 0xc0
 8002cda:	0109      	lsls	r1, r1, #4
 8002cdc:	400b      	ands	r3, r1
 8002cde:	2180      	movs	r1, #128	@ 0x80
 8002ce0:	0109      	lsls	r1, r1, #4
 8002ce2:	428b      	cmp	r3, r1
 8002ce4:	d014      	beq.n	8002d10 <UART_SetConfig+0xd0>
 8002ce6:	d807      	bhi.n	8002cf8 <UART_SetConfig+0xb8>
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d013      	beq.n	8002d14 <UART_SetConfig+0xd4>
 8002cec:	2180      	movs	r1, #128	@ 0x80
 8002cee:	00c9      	lsls	r1, r1, #3
 8002cf0:	428b      	cmp	r3, r1
 8002cf2:	d111      	bne.n	8002d18 <UART_SetConfig+0xd8>
 8002cf4:	2304      	movs	r3, #4
 8002cf6:	e7cd      	b.n	8002c94 <UART_SetConfig+0x54>
 8002cf8:	21c0      	movs	r1, #192	@ 0xc0
 8002cfa:	0109      	lsls	r1, r1, #4
 8002cfc:	428b      	cmp	r3, r1
 8002cfe:	d10d      	bne.n	8002d1c <UART_SetConfig+0xdc>
 8002d00:	2308      	movs	r3, #8
 8002d02:	e7c7      	b.n	8002c94 <UART_SetConfig+0x54>
 8002d04:	2302      	movs	r3, #2
 8002d06:	e7c5      	b.n	8002c94 <UART_SetConfig+0x54>
 8002d08:	2300      	movs	r3, #0
 8002d0a:	e7c3      	b.n	8002c94 <UART_SetConfig+0x54>
 8002d0c:	2310      	movs	r3, #16
 8002d0e:	e7c1      	b.n	8002c94 <UART_SetConfig+0x54>
 8002d10:	2302      	movs	r3, #2
 8002d12:	e7bf      	b.n	8002c94 <UART_SetConfig+0x54>
 8002d14:	2300      	movs	r3, #0
 8002d16:	e7bd      	b.n	8002c94 <UART_SetConfig+0x54>
 8002d18:	2310      	movs	r3, #16
 8002d1a:	e7bb      	b.n	8002c94 <UART_SetConfig+0x54>
 8002d1c:	2310      	movs	r3, #16
 8002d1e:	e7b9      	b.n	8002c94 <UART_SetConfig+0x54>
    switch (clocksource)
 8002d20:	2b04      	cmp	r3, #4
 8002d22:	d034      	beq.n	8002d8e <UART_SetConfig+0x14e>
 8002d24:	d80b      	bhi.n	8002d3e <UART_SetConfig+0xfe>
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d02b      	beq.n	8002d82 <UART_SetConfig+0x142>
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d105      	bne.n	8002d3a <UART_SetConfig+0xfa>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002d2e:	4b54      	ldr	r3, [pc, #336]	@ (8002e80 <UART_SetConfig+0x240>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	06db      	lsls	r3, r3, #27
 8002d34:	d42e      	bmi.n	8002d94 <UART_SetConfig+0x154>
          pclk = (uint32_t) HSI_VALUE;
 8002d36:	4853      	ldr	r0, [pc, #332]	@ (8002e84 <UART_SetConfig+0x244>)
 8002d38:	e005      	b.n	8002d46 <UART_SetConfig+0x106>
    switch (clocksource)
 8002d3a:	2001      	movs	r0, #1
 8002d3c:	e06d      	b.n	8002e1a <UART_SetConfig+0x1da>
 8002d3e:	2b08      	cmp	r3, #8
 8002d40:	d11d      	bne.n	8002d7e <UART_SetConfig+0x13e>
 8002d42:	2080      	movs	r0, #128	@ 0x80
 8002d44:	0200      	lsls	r0, r0, #8
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002d46:	6862      	ldr	r2, [r4, #4]
 8002d48:	0053      	lsls	r3, r2, #1
 8002d4a:	189b      	adds	r3, r3, r2
 8002d4c:	4283      	cmp	r3, r0
 8002d4e:	d900      	bls.n	8002d52 <UART_SetConfig+0x112>
 8002d50:	e078      	b.n	8002e44 <UART_SetConfig+0x204>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002d52:	0313      	lsls	r3, r2, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002d54:	4283      	cmp	r3, r0
 8002d56:	d200      	bcs.n	8002d5a <UART_SetConfig+0x11a>
 8002d58:	e076      	b.n	8002e48 <UART_SetConfig+0x208>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002d5a:	0e07      	lsrs	r7, r0, #24
 8002d5c:	0206      	lsls	r6, r0, #8
 8002d5e:	0850      	lsrs	r0, r2, #1
 8002d60:	2100      	movs	r1, #0
 8002d62:	1980      	adds	r0, r0, r6
 8002d64:	4179      	adcs	r1, r7
 8002d66:	2300      	movs	r3, #0
 8002d68:	f7fd fa5a 	bl	8000220 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002d6c:	4b46      	ldr	r3, [pc, #280]	@ (8002e88 <UART_SetConfig+0x248>)
 8002d6e:	18c2      	adds	r2, r0, r3
 8002d70:	4b46      	ldr	r3, [pc, #280]	@ (8002e8c <UART_SetConfig+0x24c>)
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d86a      	bhi.n	8002e4c <UART_SetConfig+0x20c>
          huart->Instance->BRR = usartdiv;
 8002d76:	6823      	ldr	r3, [r4, #0]
 8002d78:	60d8      	str	r0, [r3, #12]
 8002d7a:	2000      	movs	r0, #0
 8002d7c:	e04d      	b.n	8002e1a <UART_SetConfig+0x1da>
    switch (clocksource)
 8002d7e:	2001      	movs	r0, #1
 8002d80:	e04b      	b.n	8002e1a <UART_SetConfig+0x1da>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d82:	f7ff fb85 	bl	8002490 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002d86:	2800      	cmp	r0, #0
 8002d88:	d1dd      	bne.n	8002d46 <UART_SetConfig+0x106>
 8002d8a:	2000      	movs	r0, #0
 8002d8c:	e045      	b.n	8002e1a <UART_SetConfig+0x1da>
        pclk = HAL_RCC_GetSysClockFreq();
 8002d8e:	f7fe ffa7 	bl	8001ce0 <HAL_RCC_GetSysClockFreq>
        break;
 8002d92:	e7f8      	b.n	8002d86 <UART_SetConfig+0x146>
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002d94:	483e      	ldr	r0, [pc, #248]	@ (8002e90 <UART_SetConfig+0x250>)
 8002d96:	e7d6      	b.n	8002d46 <UART_SetConfig+0x106>
    switch (clocksource)
 8002d98:	2b08      	cmp	r3, #8
 8002d9a:	d859      	bhi.n	8002e50 <UART_SetConfig+0x210>
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	4a3d      	ldr	r2, [pc, #244]	@ (8002e94 <UART_SetConfig+0x254>)
 8002da0:	58d3      	ldr	r3, [r2, r3]
 8002da2:	469f      	mov	pc, r3
        pclk = HAL_RCC_GetPCLK1Freq();
 8002da4:	f7ff fb74 	bl	8002490 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002da8:	2800      	cmp	r0, #0
 8002daa:	d053      	beq.n	8002e54 <UART_SetConfig+0x214>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002dac:	0040      	lsls	r0, r0, #1
 8002dae:	6861      	ldr	r1, [r4, #4]
 8002db0:	084b      	lsrs	r3, r1, #1
 8002db2:	18c0      	adds	r0, r0, r3
 8002db4:	f7fd f9a8 	bl	8000108 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002db8:	0002      	movs	r2, r0
 8002dba:	3a10      	subs	r2, #16
 8002dbc:	4b36      	ldr	r3, [pc, #216]	@ (8002e98 <UART_SetConfig+0x258>)
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d84a      	bhi.n	8002e58 <UART_SetConfig+0x218>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002dc2:	b282      	uxth	r2, r0
 8002dc4:	230f      	movs	r3, #15
 8002dc6:	439a      	bics	r2, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002dc8:	0840      	lsrs	r0, r0, #1
 8002dca:	3b08      	subs	r3, #8
 8002dcc:	4003      	ands	r3, r0
 8002dce:	4313      	orrs	r3, r2
        huart->Instance->BRR = brrtemp;
 8002dd0:	6822      	ldr	r2, [r4, #0]
 8002dd2:	60d3      	str	r3, [r2, #12]
 8002dd4:	2000      	movs	r0, #0
 8002dd6:	e020      	b.n	8002e1a <UART_SetConfig+0x1da>
        pclk = HAL_RCC_GetPCLK2Freq();
 8002dd8:	f7ff fb6a 	bl	80024b0 <HAL_RCC_GetPCLK2Freq>
        break;
 8002ddc:	e7e4      	b.n	8002da8 <UART_SetConfig+0x168>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002dde:	4b28      	ldr	r3, [pc, #160]	@ (8002e80 <UART_SetConfig+0x240>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	06db      	lsls	r3, r3, #27
 8002de4:	d404      	bmi.n	8002df0 <UART_SetConfig+0x1b0>
          pclk = (uint32_t) HSI_VALUE;
 8002de6:	4827      	ldr	r0, [pc, #156]	@ (8002e84 <UART_SetConfig+0x244>)
 8002de8:	e7e0      	b.n	8002dac <UART_SetConfig+0x16c>
        pclk = HAL_RCC_GetSysClockFreq();
 8002dea:	f7fe ff79 	bl	8001ce0 <HAL_RCC_GetSysClockFreq>
        break;
 8002dee:	e7db      	b.n	8002da8 <UART_SetConfig+0x168>
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002df0:	4827      	ldr	r0, [pc, #156]	@ (8002e90 <UART_SetConfig+0x250>)
 8002df2:	e7db      	b.n	8002dac <UART_SetConfig+0x16c>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002df4:	f7ff fb4c 	bl	8002490 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002df8:	2800      	cmp	r0, #0
 8002dfa:	d031      	beq.n	8002e60 <UART_SetConfig+0x220>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002dfc:	6861      	ldr	r1, [r4, #4]
 8002dfe:	084b      	lsrs	r3, r1, #1
 8002e00:	1818      	adds	r0, r3, r0
 8002e02:	f7fd f981 	bl	8000108 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e06:	0002      	movs	r2, r0
 8002e08:	3a10      	subs	r2, #16
 8002e0a:	4b23      	ldr	r3, [pc, #140]	@ (8002e98 <UART_SetConfig+0x258>)
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d829      	bhi.n	8002e64 <UART_SetConfig+0x224>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002e10:	6823      	ldr	r3, [r4, #0]
 8002e12:	0400      	lsls	r0, r0, #16
 8002e14:	0c00      	lsrs	r0, r0, #16
 8002e16:	60d8      	str	r0, [r3, #12]
 8002e18:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 8002e1e:	66e3      	str	r3, [r4, #108]	@ 0x6c
}
 8002e20:	bdd0      	pop	{r4, r6, r7, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e22:	f7ff fb45 	bl	80024b0 <HAL_RCC_GetPCLK2Freq>
        break;
 8002e26:	e7e7      	b.n	8002df8 <UART_SetConfig+0x1b8>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e28:	4b15      	ldr	r3, [pc, #84]	@ (8002e80 <UART_SetConfig+0x240>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	06db      	lsls	r3, r3, #27
 8002e2e:	d407      	bmi.n	8002e40 <UART_SetConfig+0x200>
          pclk = (uint32_t) HSI_VALUE;
 8002e30:	4814      	ldr	r0, [pc, #80]	@ (8002e84 <UART_SetConfig+0x244>)
 8002e32:	e7e3      	b.n	8002dfc <UART_SetConfig+0x1bc>
        pclk = HAL_RCC_GetSysClockFreq();
 8002e34:	f7fe ff54 	bl	8001ce0 <HAL_RCC_GetSysClockFreq>
        break;
 8002e38:	e7de      	b.n	8002df8 <UART_SetConfig+0x1b8>
    switch (clocksource)
 8002e3a:	2080      	movs	r0, #128	@ 0x80
 8002e3c:	0200      	lsls	r0, r0, #8
 8002e3e:	e7dd      	b.n	8002dfc <UART_SetConfig+0x1bc>
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002e40:	4813      	ldr	r0, [pc, #76]	@ (8002e90 <UART_SetConfig+0x250>)
 8002e42:	e7db      	b.n	8002dfc <UART_SetConfig+0x1bc>
        ret = HAL_ERROR;
 8002e44:	2001      	movs	r0, #1
 8002e46:	e7e8      	b.n	8002e1a <UART_SetConfig+0x1da>
 8002e48:	2001      	movs	r0, #1
 8002e4a:	e7e6      	b.n	8002e1a <UART_SetConfig+0x1da>
          ret = HAL_ERROR;
 8002e4c:	2001      	movs	r0, #1
 8002e4e:	e7e4      	b.n	8002e1a <UART_SetConfig+0x1da>
    switch (clocksource)
 8002e50:	2001      	movs	r0, #1
 8002e52:	e7e2      	b.n	8002e1a <UART_SetConfig+0x1da>
 8002e54:	2000      	movs	r0, #0
 8002e56:	e7e0      	b.n	8002e1a <UART_SetConfig+0x1da>
        ret = HAL_ERROR;
 8002e58:	2001      	movs	r0, #1
 8002e5a:	e7de      	b.n	8002e1a <UART_SetConfig+0x1da>
    switch (clocksource)
 8002e5c:	2001      	movs	r0, #1
 8002e5e:	e7dc      	b.n	8002e1a <UART_SetConfig+0x1da>
 8002e60:	2000      	movs	r0, #0
 8002e62:	e7da      	b.n	8002e1a <UART_SetConfig+0x1da>
        ret = HAL_ERROR;
 8002e64:	2001      	movs	r0, #1
 8002e66:	e7d8      	b.n	8002e1a <UART_SetConfig+0x1da>
 8002e68:	efff69f3 	.word	0xefff69f3
 8002e6c:	ffffcfff 	.word	0xffffcfff
 8002e70:	40004800 	.word	0x40004800
 8002e74:	fffff4ff 	.word	0xfffff4ff
 8002e78:	40004400 	.word	0x40004400
 8002e7c:	080032ec 	.word	0x080032ec
 8002e80:	40021000 	.word	0x40021000
 8002e84:	00f42400 	.word	0x00f42400
 8002e88:	fffffd00 	.word	0xfffffd00
 8002e8c:	000ffcff 	.word	0x000ffcff
 8002e90:	003d0900 	.word	0x003d0900
 8002e94:	08003310 	.word	0x08003310
 8002e98:	0000ffef 	.word	0x0000ffef

08002e9c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e9c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8002e9e:	07db      	lsls	r3, r3, #31
 8002ea0:	d506      	bpl.n	8002eb0 <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002ea2:	6802      	ldr	r2, [r0, #0]
 8002ea4:	6853      	ldr	r3, [r2, #4]
 8002ea6:	492c      	ldr	r1, [pc, #176]	@ (8002f58 <UART_AdvFeatureConfig+0xbc>)
 8002ea8:	400b      	ands	r3, r1
 8002eaa:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8002eac:	430b      	orrs	r3, r1
 8002eae:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002eb0:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8002eb2:	079b      	lsls	r3, r3, #30
 8002eb4:	d506      	bpl.n	8002ec4 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002eb6:	6802      	ldr	r2, [r0, #0]
 8002eb8:	6853      	ldr	r3, [r2, #4]
 8002eba:	4928      	ldr	r1, [pc, #160]	@ (8002f5c <UART_AdvFeatureConfig+0xc0>)
 8002ebc:	400b      	ands	r3, r1
 8002ebe:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8002ec0:	430b      	orrs	r3, r1
 8002ec2:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002ec4:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8002ec6:	075b      	lsls	r3, r3, #29
 8002ec8:	d506      	bpl.n	8002ed8 <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002eca:	6802      	ldr	r2, [r0, #0]
 8002ecc:	6853      	ldr	r3, [r2, #4]
 8002ece:	4924      	ldr	r1, [pc, #144]	@ (8002f60 <UART_AdvFeatureConfig+0xc4>)
 8002ed0:	400b      	ands	r3, r1
 8002ed2:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8002ed4:	430b      	orrs	r3, r1
 8002ed6:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002ed8:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8002eda:	071b      	lsls	r3, r3, #28
 8002edc:	d506      	bpl.n	8002eec <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002ede:	6802      	ldr	r2, [r0, #0]
 8002ee0:	6853      	ldr	r3, [r2, #4]
 8002ee2:	4920      	ldr	r1, [pc, #128]	@ (8002f64 <UART_AdvFeatureConfig+0xc8>)
 8002ee4:	400b      	ands	r3, r1
 8002ee6:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 8002ee8:	430b      	orrs	r3, r1
 8002eea:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002eec:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8002eee:	06db      	lsls	r3, r3, #27
 8002ef0:	d506      	bpl.n	8002f00 <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002ef2:	6802      	ldr	r2, [r0, #0]
 8002ef4:	6893      	ldr	r3, [r2, #8]
 8002ef6:	491c      	ldr	r1, [pc, #112]	@ (8002f68 <UART_AdvFeatureConfig+0xcc>)
 8002ef8:	400b      	ands	r3, r1
 8002efa:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8002efc:	430b      	orrs	r3, r1
 8002efe:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002f00:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8002f02:	069b      	lsls	r3, r3, #26
 8002f04:	d506      	bpl.n	8002f14 <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002f06:	6802      	ldr	r2, [r0, #0]
 8002f08:	6893      	ldr	r3, [r2, #8]
 8002f0a:	4918      	ldr	r1, [pc, #96]	@ (8002f6c <UART_AdvFeatureConfig+0xd0>)
 8002f0c:	400b      	ands	r3, r1
 8002f0e:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 8002f10:	430b      	orrs	r3, r1
 8002f12:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002f14:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8002f16:	065b      	lsls	r3, r3, #25
 8002f18:	d50b      	bpl.n	8002f32 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f1a:	6802      	ldr	r2, [r0, #0]
 8002f1c:	6853      	ldr	r3, [r2, #4]
 8002f1e:	4914      	ldr	r1, [pc, #80]	@ (8002f70 <UART_AdvFeatureConfig+0xd4>)
 8002f20:	400b      	ands	r3, r1
 8002f22:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8002f24:	430b      	orrs	r3, r1
 8002f26:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f28:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8002f2a:	2380      	movs	r3, #128	@ 0x80
 8002f2c:	035b      	lsls	r3, r3, #13
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d00a      	beq.n	8002f48 <UART_AdvFeatureConfig+0xac>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002f32:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8002f34:	061b      	lsls	r3, r3, #24
 8002f36:	d506      	bpl.n	8002f46 <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002f38:	6802      	ldr	r2, [r0, #0]
 8002f3a:	6853      	ldr	r3, [r2, #4]
 8002f3c:	490d      	ldr	r1, [pc, #52]	@ (8002f74 <UART_AdvFeatureConfig+0xd8>)
 8002f3e:	400b      	ands	r3, r1
 8002f40:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8002f42:	430b      	orrs	r3, r1
 8002f44:	6053      	str	r3, [r2, #4]
}
 8002f46:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f48:	6802      	ldr	r2, [r0, #0]
 8002f4a:	6853      	ldr	r3, [r2, #4]
 8002f4c:	490a      	ldr	r1, [pc, #40]	@ (8002f78 <UART_AdvFeatureConfig+0xdc>)
 8002f4e:	400b      	ands	r3, r1
 8002f50:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 8002f52:	430b      	orrs	r3, r1
 8002f54:	6053      	str	r3, [r2, #4]
 8002f56:	e7ec      	b.n	8002f32 <UART_AdvFeatureConfig+0x96>
 8002f58:	fffdffff 	.word	0xfffdffff
 8002f5c:	fffeffff 	.word	0xfffeffff
 8002f60:	fffbffff 	.word	0xfffbffff
 8002f64:	ffff7fff 	.word	0xffff7fff
 8002f68:	ffffefff 	.word	0xffffefff
 8002f6c:	ffffdfff 	.word	0xffffdfff
 8002f70:	ffefffff 	.word	0xffefffff
 8002f74:	fff7ffff 	.word	0xfff7ffff
 8002f78:	ff9fffff 	.word	0xff9fffff

08002f7c <UART_WaitOnFlagUntilTimeout>:
{
 8002f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f7e:	46ce      	mov	lr, r9
 8002f80:	4647      	mov	r7, r8
 8002f82:	b580      	push	{r7, lr}
 8002f84:	0006      	movs	r6, r0
 8002f86:	000d      	movs	r5, r1
 8002f88:	0017      	movs	r7, r2
 8002f8a:	4699      	mov	r9, r3
 8002f8c:	9b08      	ldr	r3, [sp, #32]
 8002f8e:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f90:	6833      	ldr	r3, [r6, #0]
 8002f92:	69dc      	ldr	r4, [r3, #28]
 8002f94:	402c      	ands	r4, r5
 8002f96:	1b64      	subs	r4, r4, r5
 8002f98:	4263      	negs	r3, r4
 8002f9a:	415c      	adcs	r4, r3
 8002f9c:	42bc      	cmp	r4, r7
 8002f9e:	d12f      	bne.n	8003000 <UART_WaitOnFlagUntilTimeout+0x84>
    if (Timeout != HAL_MAX_DELAY)
 8002fa0:	4643      	mov	r3, r8
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	d0f4      	beq.n	8002f90 <UART_WaitOnFlagUntilTimeout+0x14>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fa6:	f7fe f93b 	bl	8001220 <HAL_GetTick>
 8002faa:	464b      	mov	r3, r9
 8002fac:	1ac0      	subs	r0, r0, r3
 8002fae:	4540      	cmp	r0, r8
 8002fb0:	d82b      	bhi.n	800300a <UART_WaitOnFlagUntilTimeout+0x8e>
 8002fb2:	4643      	mov	r3, r8
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d02a      	beq.n	800300e <UART_WaitOnFlagUntilTimeout+0x92>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002fb8:	6833      	ldr	r3, [r6, #0]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	0752      	lsls	r2, r2, #29
 8002fbe:	d5e7      	bpl.n	8002f90 <UART_WaitOnFlagUntilTimeout+0x14>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002fc0:	69da      	ldr	r2, [r3, #28]
 8002fc2:	0712      	lsls	r2, r2, #28
 8002fc4:	d410      	bmi.n	8002fe8 <UART_WaitOnFlagUntilTimeout+0x6c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002fc6:	69da      	ldr	r2, [r3, #28]
 8002fc8:	0512      	lsls	r2, r2, #20
 8002fca:	d5e1      	bpl.n	8002f90 <UART_WaitOnFlagUntilTimeout+0x14>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002fcc:	2280      	movs	r2, #128	@ 0x80
 8002fce:	0112      	lsls	r2, r2, #4
 8002fd0:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 8002fd2:	0030      	movs	r0, r6
 8002fd4:	f7ff fe04 	bl	8002be0 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002fd8:	2384      	movs	r3, #132	@ 0x84
 8002fda:	2220      	movs	r2, #32
 8002fdc:	50f2      	str	r2, [r6, r3]
          __HAL_UNLOCK(huart);
 8002fde:	3b0c      	subs	r3, #12
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 8002fe4:	2003      	movs	r0, #3
 8002fe6:	e00c      	b.n	8003002 <UART_WaitOnFlagUntilTimeout+0x86>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002fe8:	2408      	movs	r4, #8
 8002fea:	621c      	str	r4, [r3, #32]
           UART_EndRxTransfer(huart);
 8002fec:	0030      	movs	r0, r6
 8002fee:	f7ff fdf7 	bl	8002be0 <UART_EndRxTransfer>
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002ff2:	2384      	movs	r3, #132	@ 0x84
 8002ff4:	50f4      	str	r4, [r6, r3]
           __HAL_UNLOCK(huart);
 8002ff6:	3b0c      	subs	r3, #12
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	54f2      	strb	r2, [r6, r3]
           return HAL_ERROR;
 8002ffc:	2001      	movs	r0, #1
 8002ffe:	e000      	b.n	8003002 <UART_WaitOnFlagUntilTimeout+0x86>
  return HAL_OK;
 8003000:	2000      	movs	r0, #0
}
 8003002:	bcc0      	pop	{r6, r7}
 8003004:	46b9      	mov	r9, r7
 8003006:	46b0      	mov	r8, r6
 8003008:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 800300a:	2003      	movs	r0, #3
 800300c:	e7f9      	b.n	8003002 <UART_WaitOnFlagUntilTimeout+0x86>
 800300e:	2003      	movs	r0, #3
 8003010:	e7f7      	b.n	8003002 <UART_WaitOnFlagUntilTimeout+0x86>
	...

08003014 <UART_CheckIdleState>:
{
 8003014:	b530      	push	{r4, r5, lr}
 8003016:	b083      	sub	sp, #12
 8003018:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800301a:	2384      	movs	r3, #132	@ 0x84
 800301c:	2200      	movs	r2, #0
 800301e:	50c2      	str	r2, [r0, r3]
  tickstart = HAL_GetTick();
 8003020:	f7fe f8fe 	bl	8001220 <HAL_GetTick>
 8003024:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003026:	6823      	ldr	r3, [r4, #0]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	071b      	lsls	r3, r3, #28
 800302c:	d40f      	bmi.n	800304e <UART_CheckIdleState+0x3a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800302e:	6823      	ldr	r3, [r4, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	075b      	lsls	r3, r3, #29
 8003034:	d429      	bmi.n	800308a <UART_CheckIdleState+0x76>
  huart->gState = HAL_UART_STATE_READY;
 8003036:	2320      	movs	r3, #32
 8003038:	67e3      	str	r3, [r4, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800303a:	2280      	movs	r2, #128	@ 0x80
 800303c:	50a3      	str	r3, [r4, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800303e:	2300      	movs	r3, #0
 8003040:	6623      	str	r3, [r4, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003042:	6663      	str	r3, [r4, #100]	@ 0x64
  __HAL_UNLOCK(huart);
 8003044:	3a08      	subs	r2, #8
 8003046:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 8003048:	2000      	movs	r0, #0
}
 800304a:	b003      	add	sp, #12
 800304c:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800304e:	2180      	movs	r1, #128	@ 0x80
 8003050:	4b22      	ldr	r3, [pc, #136]	@ (80030dc <UART_CheckIdleState+0xc8>)
 8003052:	9300      	str	r3, [sp, #0]
 8003054:	0003      	movs	r3, r0
 8003056:	2200      	movs	r2, #0
 8003058:	0389      	lsls	r1, r1, #14
 800305a:	0020      	movs	r0, r4
 800305c:	f7ff ff8e 	bl	8002f7c <UART_WaitOnFlagUntilTimeout>
 8003060:	2800      	cmp	r0, #0
 8003062:	d0e4      	beq.n	800302e <UART_CheckIdleState+0x1a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003064:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003068:	2301      	movs	r3, #1
 800306a:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800306e:	6822      	ldr	r2, [r4, #0]
 8003070:	6813      	ldr	r3, [r2, #0]
 8003072:	2080      	movs	r0, #128	@ 0x80
 8003074:	4383      	bics	r3, r0
 8003076:	6013      	str	r3, [r2, #0]
 8003078:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 800307c:	2320      	movs	r3, #32
 800307e:	67e3      	str	r3, [r4, #124]	@ 0x7c
      __HAL_UNLOCK(huart);
 8003080:	3358      	adds	r3, #88	@ 0x58
 8003082:	2200      	movs	r2, #0
 8003084:	54e2      	strb	r2, [r4, r3]
      return HAL_TIMEOUT;
 8003086:	387d      	subs	r0, #125	@ 0x7d
 8003088:	e7df      	b.n	800304a <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800308a:	2180      	movs	r1, #128	@ 0x80
 800308c:	4b13      	ldr	r3, [pc, #76]	@ (80030dc <UART_CheckIdleState+0xc8>)
 800308e:	9300      	str	r3, [sp, #0]
 8003090:	002b      	movs	r3, r5
 8003092:	2200      	movs	r2, #0
 8003094:	03c9      	lsls	r1, r1, #15
 8003096:	0020      	movs	r0, r4
 8003098:	f7ff ff70 	bl	8002f7c <UART_WaitOnFlagUntilTimeout>
 800309c:	2800      	cmp	r0, #0
 800309e:	d0ca      	beq.n	8003036 <UART_CheckIdleState+0x22>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030a0:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030a4:	2201      	movs	r2, #1
 80030a6:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030aa:	6821      	ldr	r1, [r4, #0]
 80030ac:	680b      	ldr	r3, [r1, #0]
 80030ae:	4d0c      	ldr	r5, [pc, #48]	@ (80030e0 <UART_CheckIdleState+0xcc>)
 80030b0:	402b      	ands	r3, r5
 80030b2:	600b      	str	r3, [r1, #0]
 80030b4:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030b8:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030bc:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030c0:	6821      	ldr	r1, [r4, #0]
 80030c2:	688b      	ldr	r3, [r1, #8]
 80030c4:	4393      	bics	r3, r2
 80030c6:	608b      	str	r3, [r1, #8]
 80030c8:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 80030cc:	2380      	movs	r3, #128	@ 0x80
 80030ce:	321f      	adds	r2, #31
 80030d0:	50e2      	str	r2, [r4, r3]
      __HAL_UNLOCK(huart);
 80030d2:	3b08      	subs	r3, #8
 80030d4:	2200      	movs	r2, #0
 80030d6:	54e2      	strb	r2, [r4, r3]
      return HAL_TIMEOUT;
 80030d8:	2003      	movs	r0, #3
 80030da:	e7b6      	b.n	800304a <UART_CheckIdleState+0x36>
 80030dc:	01ffffff 	.word	0x01ffffff
 80030e0:	fffffedf 	.word	0xfffffedf

080030e4 <HAL_UART_Init>:
{
 80030e4:	b510      	push	{r4, lr}
 80030e6:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 80030e8:	d02e      	beq.n	8003148 <HAL_UART_Init+0x64>
  if (huart->gState == HAL_UART_STATE_RESET)
 80030ea:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d021      	beq.n	8003134 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 80030f0:	2324      	movs	r3, #36	@ 0x24
 80030f2:	67e3      	str	r3, [r4, #124]	@ 0x7c
  __HAL_UART_DISABLE(huart);
 80030f4:	6822      	ldr	r2, [r4, #0]
 80030f6:	6813      	ldr	r3, [r2, #0]
 80030f8:	2101      	movs	r1, #1
 80030fa:	438b      	bics	r3, r1
 80030fc:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80030fe:	0020      	movs	r0, r4
 8003100:	f7ff fd9e 	bl	8002c40 <UART_SetConfig>
 8003104:	2801      	cmp	r0, #1
 8003106:	d014      	beq.n	8003132 <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003108:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800310a:	2b00      	cmp	r3, #0
 800310c:	d118      	bne.n	8003140 <HAL_UART_Init+0x5c>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800310e:	6822      	ldr	r2, [r4, #0]
 8003110:	6853      	ldr	r3, [r2, #4]
 8003112:	490e      	ldr	r1, [pc, #56]	@ (800314c <HAL_UART_Init+0x68>)
 8003114:	400b      	ands	r3, r1
 8003116:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003118:	6822      	ldr	r2, [r4, #0]
 800311a:	6893      	ldr	r3, [r2, #8]
 800311c:	212a      	movs	r1, #42	@ 0x2a
 800311e:	438b      	bics	r3, r1
 8003120:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8003122:	6822      	ldr	r2, [r4, #0]
 8003124:	6813      	ldr	r3, [r2, #0]
 8003126:	3929      	subs	r1, #41	@ 0x29
 8003128:	430b      	orrs	r3, r1
 800312a:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 800312c:	0020      	movs	r0, r4
 800312e:	f7ff ff71 	bl	8003014 <UART_CheckIdleState>
}
 8003132:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8003134:	3378      	adds	r3, #120	@ 0x78
 8003136:	2200      	movs	r2, #0
 8003138:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 800313a:	f7fd fe2d 	bl	8000d98 <HAL_UART_MspInit>
 800313e:	e7d7      	b.n	80030f0 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8003140:	0020      	movs	r0, r4
 8003142:	f7ff feab 	bl	8002e9c <UART_AdvFeatureConfig>
 8003146:	e7e2      	b.n	800310e <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8003148:	2001      	movs	r0, #1
 800314a:	e7f2      	b.n	8003132 <HAL_UART_Init+0x4e>
 800314c:	ffffb7ff 	.word	0xffffb7ff

08003150 <memset>:
 8003150:	0003      	movs	r3, r0
 8003152:	1882      	adds	r2, r0, r2
 8003154:	4293      	cmp	r3, r2
 8003156:	d100      	bne.n	800315a <memset+0xa>
 8003158:	4770      	bx	lr
 800315a:	7019      	strb	r1, [r3, #0]
 800315c:	3301      	adds	r3, #1
 800315e:	e7f9      	b.n	8003154 <memset+0x4>

08003160 <__libc_init_array>:
 8003160:	b570      	push	{r4, r5, r6, lr}
 8003162:	2600      	movs	r6, #0
 8003164:	4c0c      	ldr	r4, [pc, #48]	@ (8003198 <__libc_init_array+0x38>)
 8003166:	4d0d      	ldr	r5, [pc, #52]	@ (800319c <__libc_init_array+0x3c>)
 8003168:	1b64      	subs	r4, r4, r5
 800316a:	10a4      	asrs	r4, r4, #2
 800316c:	42a6      	cmp	r6, r4
 800316e:	d109      	bne.n	8003184 <__libc_init_array+0x24>
 8003170:	2600      	movs	r6, #0
 8003172:	f000 f821 	bl	80031b8 <_init>
 8003176:	4c0a      	ldr	r4, [pc, #40]	@ (80031a0 <__libc_init_array+0x40>)
 8003178:	4d0a      	ldr	r5, [pc, #40]	@ (80031a4 <__libc_init_array+0x44>)
 800317a:	1b64      	subs	r4, r4, r5
 800317c:	10a4      	asrs	r4, r4, #2
 800317e:	42a6      	cmp	r6, r4
 8003180:	d105      	bne.n	800318e <__libc_init_array+0x2e>
 8003182:	bd70      	pop	{r4, r5, r6, pc}
 8003184:	00b3      	lsls	r3, r6, #2
 8003186:	58eb      	ldr	r3, [r5, r3]
 8003188:	4798      	blx	r3
 800318a:	3601      	adds	r6, #1
 800318c:	e7ee      	b.n	800316c <__libc_init_array+0xc>
 800318e:	00b3      	lsls	r3, r6, #2
 8003190:	58eb      	ldr	r3, [r5, r3]
 8003192:	4798      	blx	r3
 8003194:	3601      	adds	r6, #1
 8003196:	e7f2      	b.n	800317e <__libc_init_array+0x1e>
 8003198:	0800333c 	.word	0x0800333c
 800319c:	0800333c 	.word	0x0800333c
 80031a0:	08003340 	.word	0x08003340
 80031a4:	0800333c 	.word	0x0800333c

080031a8 <strcpy>:
 80031a8:	0003      	movs	r3, r0
 80031aa:	780a      	ldrb	r2, [r1, #0]
 80031ac:	3101      	adds	r1, #1
 80031ae:	701a      	strb	r2, [r3, #0]
 80031b0:	3301      	adds	r3, #1
 80031b2:	2a00      	cmp	r2, #0
 80031b4:	d1f9      	bne.n	80031aa <strcpy+0x2>
 80031b6:	4770      	bx	lr

080031b8 <_init>:
 80031b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031ba:	46c0      	nop			@ (mov r8, r8)
 80031bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031be:	bc08      	pop	{r3}
 80031c0:	469e      	mov	lr, r3
 80031c2:	4770      	bx	lr

080031c4 <_fini>:
 80031c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031c6:	46c0      	nop			@ (mov r8, r8)
 80031c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031ca:	bc08      	pop	{r3}
 80031cc:	469e      	mov	lr, r3
 80031ce:	4770      	bx	lr
