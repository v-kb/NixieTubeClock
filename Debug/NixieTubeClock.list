
NixieTubeClock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000383c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  080038fc  080038fc  000048fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a48  08003a48  0000507c  2**0
                  CONTENTS
  4 .ARM          00000008  08003a48  08003a48  00004a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a50  08003a50  0000507c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a50  08003a50  00004a50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a54  08003a54  00004a54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08003a58  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002fc  2000007c  08003ad4  0000507c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000378  08003ad4  00005378  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000507c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012194  00000000  00000000  000050a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022cc  00000000  00000000  00017238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00007a62  00000000  00000000  00019504  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c80  00000000  00000000  00020f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000098e  00000000  00000000  00021be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00012fc1  00000000  00000000  00022576  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000144ec  00000000  00000000  00035537  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000700fc  00000000  00000000  00049a23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000b9b1f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002bf0  00000000  00000000  000b9b64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000058  00000000  00000000  000bc754  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000007c 	.word	0x2000007c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080038e4 	.word	0x080038e4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000080 	.word	0x20000080
 8000104:	080038e4 	.word	0x080038e4

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <__aeabi_uldivmod>:
 8000234:	2b00      	cmp	r3, #0
 8000236:	d111      	bne.n	800025c <__aeabi_uldivmod+0x28>
 8000238:	2a00      	cmp	r2, #0
 800023a:	d10f      	bne.n	800025c <__aeabi_uldivmod+0x28>
 800023c:	2900      	cmp	r1, #0
 800023e:	d100      	bne.n	8000242 <__aeabi_uldivmod+0xe>
 8000240:	2800      	cmp	r0, #0
 8000242:	d002      	beq.n	800024a <__aeabi_uldivmod+0x16>
 8000244:	2100      	movs	r1, #0
 8000246:	43c9      	mvns	r1, r1
 8000248:	0008      	movs	r0, r1
 800024a:	b407      	push	{r0, r1, r2}
 800024c:	4802      	ldr	r0, [pc, #8]	@ (8000258 <__aeabi_uldivmod+0x24>)
 800024e:	a102      	add	r1, pc, #8	@ (adr r1, 8000258 <__aeabi_uldivmod+0x24>)
 8000250:	1840      	adds	r0, r0, r1
 8000252:	9002      	str	r0, [sp, #8]
 8000254:	bd03      	pop	{r0, r1, pc}
 8000256:	46c0      	nop			@ (mov r8, r8)
 8000258:	ffffffd9 	.word	0xffffffd9
 800025c:	b403      	push	{r0, r1}
 800025e:	4668      	mov	r0, sp
 8000260:	b501      	push	{r0, lr}
 8000262:	9802      	ldr	r0, [sp, #8]
 8000264:	f000 f834 	bl	80002d0 <__udivmoddi4>
 8000268:	9b01      	ldr	r3, [sp, #4]
 800026a:	469e      	mov	lr, r3
 800026c:	b002      	add	sp, #8
 800026e:	bc0c      	pop	{r2, r3}
 8000270:	4770      	bx	lr
 8000272:	46c0      	nop			@ (mov r8, r8)

08000274 <__aeabi_lmul>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	46ce      	mov	lr, r9
 8000278:	4699      	mov	r9, r3
 800027a:	0c03      	lsrs	r3, r0, #16
 800027c:	469c      	mov	ip, r3
 800027e:	0413      	lsls	r3, r2, #16
 8000280:	4647      	mov	r7, r8
 8000282:	0c1b      	lsrs	r3, r3, #16
 8000284:	001d      	movs	r5, r3
 8000286:	000e      	movs	r6, r1
 8000288:	4661      	mov	r1, ip
 800028a:	0404      	lsls	r4, r0, #16
 800028c:	0c24      	lsrs	r4, r4, #16
 800028e:	b580      	push	{r7, lr}
 8000290:	0007      	movs	r7, r0
 8000292:	0c10      	lsrs	r0, r2, #16
 8000294:	434b      	muls	r3, r1
 8000296:	4365      	muls	r5, r4
 8000298:	4341      	muls	r1, r0
 800029a:	4360      	muls	r0, r4
 800029c:	0c2c      	lsrs	r4, r5, #16
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	1824      	adds	r4, r4, r0
 80002a2:	468c      	mov	ip, r1
 80002a4:	42a3      	cmp	r3, r4
 80002a6:	d903      	bls.n	80002b0 <__aeabi_lmul+0x3c>
 80002a8:	2380      	movs	r3, #128	@ 0x80
 80002aa:	025b      	lsls	r3, r3, #9
 80002ac:	4698      	mov	r8, r3
 80002ae:	44c4      	add	ip, r8
 80002b0:	4649      	mov	r1, r9
 80002b2:	4379      	muls	r1, r7
 80002b4:	4356      	muls	r6, r2
 80002b6:	0c23      	lsrs	r3, r4, #16
 80002b8:	042d      	lsls	r5, r5, #16
 80002ba:	0c2d      	lsrs	r5, r5, #16
 80002bc:	1989      	adds	r1, r1, r6
 80002be:	4463      	add	r3, ip
 80002c0:	0424      	lsls	r4, r4, #16
 80002c2:	1960      	adds	r0, r4, r5
 80002c4:	18c9      	adds	r1, r1, r3
 80002c6:	bcc0      	pop	{r6, r7}
 80002c8:	46b9      	mov	r9, r7
 80002ca:	46b0      	mov	r8, r6
 80002cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ce:	46c0      	nop			@ (mov r8, r8)

080002d0 <__udivmoddi4>:
 80002d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002d2:	4657      	mov	r7, sl
 80002d4:	464e      	mov	r6, r9
 80002d6:	4645      	mov	r5, r8
 80002d8:	46de      	mov	lr, fp
 80002da:	b5e0      	push	{r5, r6, r7, lr}
 80002dc:	0004      	movs	r4, r0
 80002de:	000d      	movs	r5, r1
 80002e0:	4692      	mov	sl, r2
 80002e2:	4699      	mov	r9, r3
 80002e4:	b083      	sub	sp, #12
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d830      	bhi.n	800034c <__udivmoddi4+0x7c>
 80002ea:	d02d      	beq.n	8000348 <__udivmoddi4+0x78>
 80002ec:	4649      	mov	r1, r9
 80002ee:	4650      	mov	r0, sl
 80002f0:	f000 f8ba 	bl	8000468 <__clzdi2>
 80002f4:	0029      	movs	r1, r5
 80002f6:	0006      	movs	r6, r0
 80002f8:	0020      	movs	r0, r4
 80002fa:	f000 f8b5 	bl	8000468 <__clzdi2>
 80002fe:	1a33      	subs	r3, r6, r0
 8000300:	4698      	mov	r8, r3
 8000302:	3b20      	subs	r3, #32
 8000304:	d434      	bmi.n	8000370 <__udivmoddi4+0xa0>
 8000306:	469b      	mov	fp, r3
 8000308:	4653      	mov	r3, sl
 800030a:	465a      	mov	r2, fp
 800030c:	4093      	lsls	r3, r2
 800030e:	4642      	mov	r2, r8
 8000310:	001f      	movs	r7, r3
 8000312:	4653      	mov	r3, sl
 8000314:	4093      	lsls	r3, r2
 8000316:	001e      	movs	r6, r3
 8000318:	42af      	cmp	r7, r5
 800031a:	d83b      	bhi.n	8000394 <__udivmoddi4+0xc4>
 800031c:	42af      	cmp	r7, r5
 800031e:	d100      	bne.n	8000322 <__udivmoddi4+0x52>
 8000320:	e079      	b.n	8000416 <__udivmoddi4+0x146>
 8000322:	465b      	mov	r3, fp
 8000324:	1ba4      	subs	r4, r4, r6
 8000326:	41bd      	sbcs	r5, r7
 8000328:	2b00      	cmp	r3, #0
 800032a:	da00      	bge.n	800032e <__udivmoddi4+0x5e>
 800032c:	e076      	b.n	800041c <__udivmoddi4+0x14c>
 800032e:	2200      	movs	r2, #0
 8000330:	2300      	movs	r3, #0
 8000332:	9200      	str	r2, [sp, #0]
 8000334:	9301      	str	r3, [sp, #4]
 8000336:	2301      	movs	r3, #1
 8000338:	465a      	mov	r2, fp
 800033a:	4093      	lsls	r3, r2
 800033c:	9301      	str	r3, [sp, #4]
 800033e:	2301      	movs	r3, #1
 8000340:	4642      	mov	r2, r8
 8000342:	4093      	lsls	r3, r2
 8000344:	9300      	str	r3, [sp, #0]
 8000346:	e029      	b.n	800039c <__udivmoddi4+0xcc>
 8000348:	4282      	cmp	r2, r0
 800034a:	d9cf      	bls.n	80002ec <__udivmoddi4+0x1c>
 800034c:	2200      	movs	r2, #0
 800034e:	2300      	movs	r3, #0
 8000350:	9200      	str	r2, [sp, #0]
 8000352:	9301      	str	r3, [sp, #4]
 8000354:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <__udivmoddi4+0x8e>
 800035a:	601c      	str	r4, [r3, #0]
 800035c:	605d      	str	r5, [r3, #4]
 800035e:	9800      	ldr	r0, [sp, #0]
 8000360:	9901      	ldr	r1, [sp, #4]
 8000362:	b003      	add	sp, #12
 8000364:	bcf0      	pop	{r4, r5, r6, r7}
 8000366:	46bb      	mov	fp, r7
 8000368:	46b2      	mov	sl, r6
 800036a:	46a9      	mov	r9, r5
 800036c:	46a0      	mov	r8, r4
 800036e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000370:	4642      	mov	r2, r8
 8000372:	469b      	mov	fp, r3
 8000374:	2320      	movs	r3, #32
 8000376:	1a9b      	subs	r3, r3, r2
 8000378:	4652      	mov	r2, sl
 800037a:	40da      	lsrs	r2, r3
 800037c:	4641      	mov	r1, r8
 800037e:	0013      	movs	r3, r2
 8000380:	464a      	mov	r2, r9
 8000382:	408a      	lsls	r2, r1
 8000384:	0017      	movs	r7, r2
 8000386:	4642      	mov	r2, r8
 8000388:	431f      	orrs	r7, r3
 800038a:	4653      	mov	r3, sl
 800038c:	4093      	lsls	r3, r2
 800038e:	001e      	movs	r6, r3
 8000390:	42af      	cmp	r7, r5
 8000392:	d9c3      	bls.n	800031c <__udivmoddi4+0x4c>
 8000394:	2200      	movs	r2, #0
 8000396:	2300      	movs	r3, #0
 8000398:	9200      	str	r2, [sp, #0]
 800039a:	9301      	str	r3, [sp, #4]
 800039c:	4643      	mov	r3, r8
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d0d8      	beq.n	8000354 <__udivmoddi4+0x84>
 80003a2:	07fb      	lsls	r3, r7, #31
 80003a4:	0872      	lsrs	r2, r6, #1
 80003a6:	431a      	orrs	r2, r3
 80003a8:	4646      	mov	r6, r8
 80003aa:	087b      	lsrs	r3, r7, #1
 80003ac:	e00e      	b.n	80003cc <__udivmoddi4+0xfc>
 80003ae:	42ab      	cmp	r3, r5
 80003b0:	d101      	bne.n	80003b6 <__udivmoddi4+0xe6>
 80003b2:	42a2      	cmp	r2, r4
 80003b4:	d80c      	bhi.n	80003d0 <__udivmoddi4+0x100>
 80003b6:	1aa4      	subs	r4, r4, r2
 80003b8:	419d      	sbcs	r5, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2100      	movs	r1, #0
 80003c2:	3e01      	subs	r6, #1
 80003c4:	1824      	adds	r4, r4, r0
 80003c6:	414d      	adcs	r5, r1
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d006      	beq.n	80003da <__udivmoddi4+0x10a>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d9ee      	bls.n	80003ae <__udivmoddi4+0xde>
 80003d0:	3e01      	subs	r6, #1
 80003d2:	1924      	adds	r4, r4, r4
 80003d4:	416d      	adcs	r5, r5
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d1f8      	bne.n	80003cc <__udivmoddi4+0xfc>
 80003da:	9800      	ldr	r0, [sp, #0]
 80003dc:	9901      	ldr	r1, [sp, #4]
 80003de:	465b      	mov	r3, fp
 80003e0:	1900      	adds	r0, r0, r4
 80003e2:	4169      	adcs	r1, r5
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db24      	blt.n	8000432 <__udivmoddi4+0x162>
 80003e8:	002b      	movs	r3, r5
 80003ea:	465a      	mov	r2, fp
 80003ec:	4644      	mov	r4, r8
 80003ee:	40d3      	lsrs	r3, r2
 80003f0:	002a      	movs	r2, r5
 80003f2:	40e2      	lsrs	r2, r4
 80003f4:	001c      	movs	r4, r3
 80003f6:	465b      	mov	r3, fp
 80003f8:	0015      	movs	r5, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	db2a      	blt.n	8000454 <__udivmoddi4+0x184>
 80003fe:	0026      	movs	r6, r4
 8000400:	409e      	lsls	r6, r3
 8000402:	0033      	movs	r3, r6
 8000404:	0026      	movs	r6, r4
 8000406:	4647      	mov	r7, r8
 8000408:	40be      	lsls	r6, r7
 800040a:	0032      	movs	r2, r6
 800040c:	1a80      	subs	r0, r0, r2
 800040e:	4199      	sbcs	r1, r3
 8000410:	9000      	str	r0, [sp, #0]
 8000412:	9101      	str	r1, [sp, #4]
 8000414:	e79e      	b.n	8000354 <__udivmoddi4+0x84>
 8000416:	42a3      	cmp	r3, r4
 8000418:	d8bc      	bhi.n	8000394 <__udivmoddi4+0xc4>
 800041a:	e782      	b.n	8000322 <__udivmoddi4+0x52>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	2100      	movs	r1, #0
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	2200      	movs	r2, #0
 8000426:	9100      	str	r1, [sp, #0]
 8000428:	9201      	str	r2, [sp, #4]
 800042a:	2201      	movs	r2, #1
 800042c:	40da      	lsrs	r2, r3
 800042e:	9201      	str	r2, [sp, #4]
 8000430:	e785      	b.n	800033e <__udivmoddi4+0x6e>
 8000432:	4642      	mov	r2, r8
 8000434:	2320      	movs	r3, #32
 8000436:	1a9b      	subs	r3, r3, r2
 8000438:	002a      	movs	r2, r5
 800043a:	4646      	mov	r6, r8
 800043c:	409a      	lsls	r2, r3
 800043e:	0023      	movs	r3, r4
 8000440:	40f3      	lsrs	r3, r6
 8000442:	4644      	mov	r4, r8
 8000444:	4313      	orrs	r3, r2
 8000446:	002a      	movs	r2, r5
 8000448:	40e2      	lsrs	r2, r4
 800044a:	001c      	movs	r4, r3
 800044c:	465b      	mov	r3, fp
 800044e:	0015      	movs	r5, r2
 8000450:	2b00      	cmp	r3, #0
 8000452:	dad4      	bge.n	80003fe <__udivmoddi4+0x12e>
 8000454:	4642      	mov	r2, r8
 8000456:	002f      	movs	r7, r5
 8000458:	2320      	movs	r3, #32
 800045a:	0026      	movs	r6, r4
 800045c:	4097      	lsls	r7, r2
 800045e:	1a9b      	subs	r3, r3, r2
 8000460:	40de      	lsrs	r6, r3
 8000462:	003b      	movs	r3, r7
 8000464:	4333      	orrs	r3, r6
 8000466:	e7cd      	b.n	8000404 <__udivmoddi4+0x134>

08000468 <__clzdi2>:
 8000468:	b510      	push	{r4, lr}
 800046a:	2900      	cmp	r1, #0
 800046c:	d103      	bne.n	8000476 <__clzdi2+0xe>
 800046e:	f000 f807 	bl	8000480 <__clzsi2>
 8000472:	3020      	adds	r0, #32
 8000474:	e002      	b.n	800047c <__clzdi2+0x14>
 8000476:	0008      	movs	r0, r1
 8000478:	f000 f802 	bl	8000480 <__clzsi2>
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__clzsi2>:
 8000480:	211c      	movs	r1, #28
 8000482:	2301      	movs	r3, #1
 8000484:	041b      	lsls	r3, r3, #16
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0xe>
 800048a:	0c00      	lsrs	r0, r0, #16
 800048c:	3910      	subs	r1, #16
 800048e:	0a1b      	lsrs	r3, r3, #8
 8000490:	4298      	cmp	r0, r3
 8000492:	d301      	bcc.n	8000498 <__clzsi2+0x18>
 8000494:	0a00      	lsrs	r0, r0, #8
 8000496:	3908      	subs	r1, #8
 8000498:	091b      	lsrs	r3, r3, #4
 800049a:	4298      	cmp	r0, r3
 800049c:	d301      	bcc.n	80004a2 <__clzsi2+0x22>
 800049e:	0900      	lsrs	r0, r0, #4
 80004a0:	3904      	subs	r1, #4
 80004a2:	a202      	add	r2, pc, #8	@ (adr r2, 80004ac <__clzsi2+0x2c>)
 80004a4:	5c10      	ldrb	r0, [r2, r0]
 80004a6:	1840      	adds	r0, r0, r1
 80004a8:	4770      	bx	lr
 80004aa:	46c0      	nop			@ (mov r8, r8)
 80004ac:	02020304 	.word	0x02020304
 80004b0:	01010101 	.word	0x01010101
	...

080004bc <shift_reg_pulse_srclk>:
/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
static void shift_reg_pulse_srclk(uint32_t delay_ms) {
 80004bc:	b510      	push	{r4, lr}
	SHIFT_REG_SET(1);
 80004be:	4c06      	ldr	r4, [pc, #24]	@ (80004d8 <shift_reg_pulse_srclk+0x1c>)
 80004c0:	2201      	movs	r2, #1
 80004c2:	2102      	movs	r1, #2
 80004c4:	0020      	movs	r0, r4
 80004c6:	f000 fdcb 	bl	8001060 <HAL_GPIO_WritePin>
//	HAL_Delay(delay_ms);
	SHIFT_REG_SET(0);
 80004ca:	2200      	movs	r2, #0
 80004cc:	2102      	movs	r1, #2
 80004ce:	0020      	movs	r0, r4
 80004d0:	f000 fdc6 	bl	8001060 <HAL_GPIO_WritePin>
//	HAL_Delay(delay_ms);
}
 80004d4:	bd10      	pop	{r4, pc}
 80004d6:	46c0      	nop			@ (mov r8, r8)
 80004d8:	50000400 	.word	0x50000400

080004dc <shift_reg_send>:
//   	#1				#2				#3			#4
//   0123 4567 89   0123 4567 89   0123 4567 89   0123 4567 89
// 0b1000 0000 00 0b0100 0000 00 0b0010 0000 00 0b0001 0000 00

// data size is 16 bit, but only 10 are actually connected to a nixie lamp
static void shift_reg_send(uint16_t data) {
 80004dc:	b570      	push	{r4, r5, r6, lr}
 80004de:	0005      	movs	r5, r0
	/*
	 * Set SER pin according to currently transmitted bit
	 * Toggle clock n times to set all N bits
	 */
	for (int8_t bit = 15; bit >= 0; --bit) {
 80004e0:	240f      	movs	r4, #15
 80004e2:	e00d      	b.n	8000500 <shift_reg_send+0x24>
		DATA_SET((data >> bit) & 1);					// Send least significant bit first
 80004e4:	002b      	movs	r3, r5
 80004e6:	4123      	asrs	r3, r4
 80004e8:	2201      	movs	r2, #1
 80004ea:	401a      	ands	r2, r3
 80004ec:	20a0      	movs	r0, #160	@ 0xa0
 80004ee:	2140      	movs	r1, #64	@ 0x40
 80004f0:	05c0      	lsls	r0, r0, #23
 80004f2:	f000 fdb5 	bl	8001060 <HAL_GPIO_WritePin>
		shift_reg_pulse_srclk(PULSE_DURATION_MS);
 80004f6:	2000      	movs	r0, #0
 80004f8:	f7ff ffe0 	bl	80004bc <shift_reg_pulse_srclk>
	for (int8_t bit = 15; bit >= 0; --bit) {
 80004fc:	3c01      	subs	r4, #1
 80004fe:	b264      	sxtb	r4, r4
 8000500:	2c00      	cmp	r4, #0
 8000502:	daef      	bge.n	80004e4 <shift_reg_send+0x8>
	}
}
 8000504:	bd70      	pop	{r4, r5, r6, pc}
	...

08000508 <shift_reg_pulse_rclk>:
static void shift_reg_pulse_rclk(uint32_t delay_ms) {
 8000508:	b510      	push	{r4, lr}
	STORAGE_REG_SET(1);
 800050a:	4c06      	ldr	r4, [pc, #24]	@ (8000524 <shift_reg_pulse_rclk+0x1c>)
 800050c:	2201      	movs	r2, #1
 800050e:	2101      	movs	r1, #1
 8000510:	0020      	movs	r0, r4
 8000512:	f000 fda5 	bl	8001060 <HAL_GPIO_WritePin>
	STORAGE_REG_SET(0);
 8000516:	2200      	movs	r2, #0
 8000518:	2101      	movs	r1, #1
 800051a:	0020      	movs	r0, r4
 800051c:	f000 fda0 	bl	8001060 <HAL_GPIO_WritePin>
}
 8000520:	bd10      	pop	{r4, pc}
 8000522:	46c0      	nop			@ (mov r8, r8)
 8000524:	50000400 	.word	0x50000400

08000528 <nixie_test>:

static void nixie_show_time(uint32_t h, uint32_t m, uint32_t s) {

}
static void nixie_test(uint16_t number) {
 8000528:	b530      	push	{r4, r5, lr}
 800052a:	b083      	sub	sp, #12
 800052c:	0005      	movs	r5, r0
	//   	#1				#2				#3			#4
	//   0123 4567 89   0123 4567 89   0123 4567 89   0123 4567 89
	// 0b1000 0000 00 0b0100 0000 00 0b0010 0000 00 0b0001 0000 00
	uint16_t digit_data[4] = {
			digit_bitmask[	number%10			],
 800052e:	210a      	movs	r1, #10
 8000530:	f7ff fe7a 	bl	8000228 <__aeabi_uidivmod>
 8000534:	b289      	uxth	r1, r1
 8000536:	4c1e      	ldr	r4, [pc, #120]	@ (80005b0 <nixie_test+0x88>)
 8000538:	0049      	lsls	r1, r1, #1
 800053a:	5b0b      	ldrh	r3, [r1, r4]
	uint16_t digit_data[4] = {
 800053c:	466a      	mov	r2, sp
 800053e:	8013      	strh	r3, [r2, #0]
			digit_bitmask[	(number%100)/10		],
 8000540:	2164      	movs	r1, #100	@ 0x64
 8000542:	0028      	movs	r0, r5
 8000544:	f7ff fe70 	bl	8000228 <__aeabi_uidivmod>
 8000548:	b288      	uxth	r0, r1
 800054a:	210a      	movs	r1, #10
 800054c:	f7ff fde6 	bl	800011c <__udivsi3>
 8000550:	b280      	uxth	r0, r0
 8000552:	0040      	lsls	r0, r0, #1
 8000554:	5b03      	ldrh	r3, [r0, r4]
	uint16_t digit_data[4] = {
 8000556:	466a      	mov	r2, sp
 8000558:	8053      	strh	r3, [r2, #2]
			digit_bitmask[	(number%1000)/100	],
 800055a:	21fa      	movs	r1, #250	@ 0xfa
 800055c:	0089      	lsls	r1, r1, #2
 800055e:	0028      	movs	r0, r5
 8000560:	f7ff fe62 	bl	8000228 <__aeabi_uidivmod>
 8000564:	b288      	uxth	r0, r1
 8000566:	2164      	movs	r1, #100	@ 0x64
 8000568:	f7ff fdd8 	bl	800011c <__udivsi3>
 800056c:	b280      	uxth	r0, r0
 800056e:	0040      	lsls	r0, r0, #1
 8000570:	5b03      	ldrh	r3, [r0, r4]
	uint16_t digit_data[4] = {
 8000572:	466a      	mov	r2, sp
 8000574:	8093      	strh	r3, [r2, #4]
			digit_bitmask[	(number%10000)/1000	],
 8000576:	490f      	ldr	r1, [pc, #60]	@ (80005b4 <nixie_test+0x8c>)
 8000578:	0028      	movs	r0, r5
 800057a:	f7ff fe55 	bl	8000228 <__aeabi_uidivmod>
 800057e:	b288      	uxth	r0, r1
 8000580:	21fa      	movs	r1, #250	@ 0xfa
 8000582:	0089      	lsls	r1, r1, #2
 8000584:	f7ff fdca 	bl	800011c <__udivsi3>
 8000588:	b280      	uxth	r0, r0
 800058a:	0040      	lsls	r0, r0, #1
 800058c:	5b03      	ldrh	r3, [r0, r4]
	uint16_t digit_data[4] = {
 800058e:	466a      	mov	r2, sp
 8000590:	80d3      	strh	r3, [r2, #6]
	};

	/*
	 * Send data
	 */
	for (int digit = 0; digit < 4; ++digit) {
 8000592:	2400      	movs	r4, #0
 8000594:	e005      	b.n	80005a2 <nixie_test+0x7a>
		shift_reg_send(digit_data[digit]);
 8000596:	0063      	lsls	r3, r4, #1
 8000598:	466a      	mov	r2, sp
 800059a:	5a98      	ldrh	r0, [r3, r2]
 800059c:	f7ff ff9e 	bl	80004dc <shift_reg_send>
	for (int digit = 0; digit < 4; ++digit) {
 80005a0:	3401      	adds	r4, #1
 80005a2:	2c03      	cmp	r4, #3
 80005a4:	ddf7      	ble.n	8000596 <nixie_test+0x6e>
	}

	shift_reg_pulse_rclk(PULSE_DURATION_MS);
 80005a6:	2000      	movs	r0, #0
 80005a8:	f7ff ffae 	bl	8000508 <shift_reg_pulse_rclk>
}
 80005ac:	b003      	add	sp, #12
 80005ae:	bd30      	pop	{r4, r5, pc}
 80005b0:	20000000 	.word	0x20000000
 80005b4:	00002710 	.word	0x00002710

080005b8 <MX_GPIO_Init>:
{
 80005b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005ba:	46ce      	mov	lr, r9
 80005bc:	4647      	mov	r7, r8
 80005be:	b580      	push	{r7, lr}
 80005c0:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c2:	2214      	movs	r2, #20
 80005c4:	2100      	movs	r1, #0
 80005c6:	a803      	add	r0, sp, #12
 80005c8:	f002 fa8c 	bl	8002ae4 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005cc:	4b3a      	ldr	r3, [pc, #232]	@ (80006b8 <MX_GPIO_Init+0x100>)
 80005ce:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80005d0:	2204      	movs	r2, #4
 80005d2:	4311      	orrs	r1, r2
 80005d4:	62d9      	str	r1, [r3, #44]	@ 0x2c
 80005d6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80005d8:	400a      	ands	r2, r1
 80005da:	9200      	str	r2, [sp, #0]
 80005dc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80005e0:	2501      	movs	r5, #1
 80005e2:	432a      	orrs	r2, r5
 80005e4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80005e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80005e8:	402a      	ands	r2, r5
 80005ea:	9201      	str	r2, [sp, #4]
 80005ec:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80005f0:	2702      	movs	r7, #2
 80005f2:	433a      	orrs	r2, r7
 80005f4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80005f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80005f8:	403b      	ands	r3, r7
 80005fa:	9302      	str	r3, [sp, #8]
 80005fc:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOC, DIMM_LED_1_Pin|DIMM_LED_2_Pin, GPIO_PIN_RESET);
 80005fe:	24c0      	movs	r4, #192	@ 0xc0
 8000600:	0224      	lsls	r4, r4, #8
 8000602:	4b2e      	ldr	r3, [pc, #184]	@ (80006bc <MX_GPIO_Init+0x104>)
 8000604:	4699      	mov	r9, r3
 8000606:	2200      	movs	r2, #0
 8000608:	0021      	movs	r1, r4
 800060a:	0018      	movs	r0, r3
 800060c:	f000 fd28 	bl	8001060 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TXS_OE_GPIO_Port, TXS_OE_Pin, GPIO_PIN_SET);
 8000610:	26a0      	movs	r6, #160	@ 0xa0
 8000612:	05f6      	lsls	r6, r6, #23
 8000614:	2201      	movs	r2, #1
 8000616:	2102      	movs	r1, #2
 8000618:	0030      	movs	r0, r6
 800061a:	f000 fd21 	bl	8001060 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SHDN_170V_3V3_Pin|INS_EN_3V3_Pin|DIN_3V3_Pin|OE_3V3_Pin, GPIO_PIN_RESET);
 800061e:	2200      	movs	r2, #0
 8000620:	21f0      	movs	r1, #240	@ 0xf0
 8000622:	0030      	movs	r0, r6
 8000624:	f000 fd1c 	bl	8001060 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, RCK_3V3_Pin|SCK_3V3_Pin, GPIO_PIN_RESET);
 8000628:	4b25      	ldr	r3, [pc, #148]	@ (80006c0 <MX_GPIO_Init+0x108>)
 800062a:	4698      	mov	r8, r3
 800062c:	2200      	movs	r2, #0
 800062e:	2103      	movs	r1, #3
 8000630:	0018      	movs	r0, r3
 8000632:	f000 fd15 	bl	8001060 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = DIMM_LED_1_Pin|DIMM_LED_2_Pin;
 8000636:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000638:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063a:	2400      	movs	r4, #0
 800063c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800063e:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000640:	a903      	add	r1, sp, #12
 8000642:	4648      	mov	r0, r9
 8000644:	f000 fc4e 	bl	8000ee4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BTN_4_Pin|INT_SQW_Pin|INT_OPT_Pin|JDY_STAT_Pin
 8000648:	4b1e      	ldr	r3, [pc, #120]	@ (80006c4 <MX_GPIO_Init+0x10c>)
 800064a:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800064c:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064e:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000650:	a903      	add	r1, sp, #12
 8000652:	0030      	movs	r0, r6
 8000654:	f000 fc46 	bl	8000ee4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = TXS_OE_Pin;
 8000658:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800065a:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800065c:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800065e:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(TXS_OE_GPIO_Port, &GPIO_InitStruct);
 8000660:	a903      	add	r1, sp, #12
 8000662:	0030      	movs	r0, r6
 8000664:	f000 fc3e 	bl	8000ee4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SHDN_170V_3V3_Pin;
 8000668:	2310      	movs	r3, #16
 800066a:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800066c:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800066e:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000670:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(SHDN_170V_3V3_GPIO_Port, &GPIO_InitStruct);
 8000672:	a903      	add	r1, sp, #12
 8000674:	0030      	movs	r0, r6
 8000676:	f000 fc35 	bl	8000ee4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = INS_EN_3V3_Pin|DIN_3V3_Pin|OE_3V3_Pin;
 800067a:	23e0      	movs	r3, #224	@ 0xe0
 800067c:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800067e:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000680:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000682:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000684:	a903      	add	r1, sp, #12
 8000686:	0030      	movs	r0, r6
 8000688:	f000 fc2c 	bl	8000ee4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RCK_3V3_Pin|SCK_3V3_Pin;
 800068c:	2303      	movs	r3, #3
 800068e:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000690:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000692:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000694:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000696:	a903      	add	r1, sp, #12
 8000698:	4640      	mov	r0, r8
 800069a:	f000 fc23 	bl	8000ee4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BTN_3_Pin|BTN_2_Pin|BTN_1_Pin;
 800069e:	2338      	movs	r3, #56	@ 0x38
 80006a0:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006a2:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a4:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006a6:	a903      	add	r1, sp, #12
 80006a8:	4640      	mov	r0, r8
 80006aa:	f000 fc1b 	bl	8000ee4 <HAL_GPIO_Init>
}
 80006ae:	b009      	add	sp, #36	@ 0x24
 80006b0:	bcc0      	pop	{r6, r7}
 80006b2:	46b9      	mov	r9, r7
 80006b4:	46b0      	mov	r8, r6
 80006b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006b8:	40021000 	.word	0x40021000
 80006bc:	50000800 	.word	0x50000800
 80006c0:	50000400 	.word	0x50000400
 80006c4:	00009901 	.word	0x00009901

080006c8 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006c8:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006ca:	e7fe      	b.n	80006ca <Error_Handler+0x2>

080006cc <MX_I2C1_Init>:
{
 80006cc:	b510      	push	{r4, lr}
  hi2c1.Instance = I2C1;
 80006ce:	4812      	ldr	r0, [pc, #72]	@ (8000718 <MX_I2C1_Init+0x4c>)
 80006d0:	4b12      	ldr	r3, [pc, #72]	@ (800071c <MX_I2C1_Init+0x50>)
 80006d2:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80006d4:	4b12      	ldr	r3, [pc, #72]	@ (8000720 <MX_I2C1_Init+0x54>)
 80006d6:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006d8:	2300      	movs	r3, #0
 80006da:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006dc:	2201      	movs	r2, #1
 80006de:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006e0:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006e2:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006e4:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006e6:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006e8:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006ea:	f000 fe61 	bl	80013b0 <HAL_I2C_Init>
 80006ee:	2800      	cmp	r0, #0
 80006f0:	d10c      	bne.n	800070c <MX_I2C1_Init+0x40>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006f2:	4809      	ldr	r0, [pc, #36]	@ (8000718 <MX_I2C1_Init+0x4c>)
 80006f4:	2100      	movs	r1, #0
 80006f6:	f001 f835 	bl	8001764 <HAL_I2CEx_ConfigAnalogFilter>
 80006fa:	2800      	cmp	r0, #0
 80006fc:	d108      	bne.n	8000710 <MX_I2C1_Init+0x44>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006fe:	4806      	ldr	r0, [pc, #24]	@ (8000718 <MX_I2C1_Init+0x4c>)
 8000700:	2100      	movs	r1, #0
 8000702:	f001 f85b 	bl	80017bc <HAL_I2CEx_ConfigDigitalFilter>
 8000706:	2800      	cmp	r0, #0
 8000708:	d104      	bne.n	8000714 <MX_I2C1_Init+0x48>
}
 800070a:	bd10      	pop	{r4, pc}
    Error_Handler();
 800070c:	f7ff ffdc 	bl	80006c8 <Error_Handler>
    Error_Handler();
 8000710:	f7ff ffda 	bl	80006c8 <Error_Handler>
    Error_Handler();
 8000714:	f7ff ffd8 	bl	80006c8 <Error_Handler>
 8000718:	200001cc 	.word	0x200001cc
 800071c:	40005400 	.word	0x40005400
 8000720:	00707cbb 	.word	0x00707cbb

08000724 <MX_LPUART1_UART_Init>:
{
 8000724:	b510      	push	{r4, lr}
  hlpuart1.Instance = LPUART1;
 8000726:	480b      	ldr	r0, [pc, #44]	@ (8000754 <MX_LPUART1_UART_Init+0x30>)
 8000728:	4b0b      	ldr	r3, [pc, #44]	@ (8000758 <MX_LPUART1_UART_Init+0x34>)
 800072a:	6003      	str	r3, [r0, #0]
  hlpuart1.Init.BaudRate = 209700;
 800072c:	4b0b      	ldr	r3, [pc, #44]	@ (800075c <MX_LPUART1_UART_Init+0x38>)
 800072e:	6043      	str	r3, [r0, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8000730:	2380      	movs	r3, #128	@ 0x80
 8000732:	055b      	lsls	r3, r3, #21
 8000734:	6083      	str	r3, [r0, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000736:	2300      	movs	r3, #0
 8000738:	60c3      	str	r3, [r0, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800073a:	6103      	str	r3, [r0, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800073c:	220c      	movs	r2, #12
 800073e:	6142      	str	r2, [r0, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000740:	6183      	str	r3, [r0, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000742:	6203      	str	r3, [r0, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000744:	6243      	str	r3, [r0, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000746:	f002 f857 	bl	80027f8 <HAL_UART_Init>
 800074a:	2800      	cmp	r0, #0
 800074c:	d100      	bne.n	8000750 <MX_LPUART1_UART_Init+0x2c>
}
 800074e:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000750:	f7ff ffba 	bl	80006c8 <Error_Handler>
 8000754:	20000144 	.word	0x20000144
 8000758:	40004800 	.word	0x40004800
 800075c:	00033324 	.word	0x00033324

08000760 <MX_USART2_UART_Init>:
{
 8000760:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 8000762:	480b      	ldr	r0, [pc, #44]	@ (8000790 <MX_USART2_UART_Init+0x30>)
 8000764:	4b0b      	ldr	r3, [pc, #44]	@ (8000794 <MX_USART2_UART_Init+0x34>)
 8000766:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8000768:	23e1      	movs	r3, #225	@ 0xe1
 800076a:	025b      	lsls	r3, r3, #9
 800076c:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800076e:	2300      	movs	r3, #0
 8000770:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000772:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000774:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000776:	220c      	movs	r2, #12
 8000778:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800077a:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800077c:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800077e:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000780:	6243      	str	r3, [r0, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000782:	f002 f839 	bl	80027f8 <HAL_UART_Init>
 8000786:	2800      	cmp	r0, #0
 8000788:	d100      	bne.n	800078c <MX_USART2_UART_Init+0x2c>
}
 800078a:	bd10      	pop	{r4, pc}
    Error_Handler();
 800078c:	f7ff ff9c 	bl	80006c8 <Error_Handler>
 8000790:	200000bc 	.word	0x200000bc
 8000794:	40004400 	.word	0x40004400

08000798 <MX_RTC_Init>:
{
 8000798:	b510      	push	{r4, lr}
  hrtc.Instance = RTC;
 800079a:	480a      	ldr	r0, [pc, #40]	@ (80007c4 <MX_RTC_Init+0x2c>)
 800079c:	4b0a      	ldr	r3, [pc, #40]	@ (80007c8 <MX_RTC_Init+0x30>)
 800079e:	6003      	str	r3, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80007a0:	2300      	movs	r3, #0
 80007a2:	6043      	str	r3, [r0, #4]
  hrtc.Init.AsynchPrediv = 127;
 80007a4:	227f      	movs	r2, #127	@ 0x7f
 80007a6:	6082      	str	r2, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 80007a8:	3280      	adds	r2, #128	@ 0x80
 80007aa:	60c2      	str	r2, [r0, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80007ac:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80007ae:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80007b0:	6183      	str	r3, [r0, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80007b2:	61c3      	str	r3, [r0, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80007b4:	f001 fd48 	bl	8002248 <HAL_RTC_Init>
 80007b8:	2800      	cmp	r0, #0
 80007ba:	d100      	bne.n	80007be <MX_RTC_Init+0x26>
}
 80007bc:	bd10      	pop	{r4, pc}
    Error_Handler();
 80007be:	f7ff ff83 	bl	80006c8 <Error_Handler>
 80007c2:	46c0      	nop			@ (mov r8, r8)
 80007c4:	20000098 	.word	0x20000098
 80007c8:	40002800 	.word	0x40002800

080007cc <SystemClock_Config>:
{
 80007cc:	b500      	push	{lr}
 80007ce:	b099      	sub	sp, #100	@ 0x64
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007d0:	2234      	movs	r2, #52	@ 0x34
 80007d2:	2100      	movs	r1, #0
 80007d4:	a80b      	add	r0, sp, #44	@ 0x2c
 80007d6:	f002 f985 	bl	8002ae4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007da:	2214      	movs	r2, #20
 80007dc:	2100      	movs	r1, #0
 80007de:	a806      	add	r0, sp, #24
 80007e0:	f002 f980 	bl	8002ae4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007e4:	2218      	movs	r2, #24
 80007e6:	2100      	movs	r1, #0
 80007e8:	4668      	mov	r0, sp
 80007ea:	f002 f97b 	bl	8002ae4 <memset>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007ee:	4921      	ldr	r1, [pc, #132]	@ (8000874 <SystemClock_Config+0xa8>)
 80007f0:	680a      	ldr	r2, [r1, #0]
 80007f2:	4b21      	ldr	r3, [pc, #132]	@ (8000878 <SystemClock_Config+0xac>)
 80007f4:	401a      	ands	r2, r3
 80007f6:	2380      	movs	r3, #128	@ 0x80
 80007f8:	011b      	lsls	r3, r3, #4
 80007fa:	4313      	orrs	r3, r2
 80007fc:	600b      	str	r3, [r1, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80007fe:	230a      	movs	r3, #10
 8000800:	930b      	str	r3, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000802:	3b09      	subs	r3, #9
 8000804:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000806:	2210      	movs	r2, #16
 8000808:	920f      	str	r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800080a:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800080c:	3301      	adds	r3, #1
 800080e:	9314      	str	r3, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000810:	2300      	movs	r3, #0
 8000812:	9315      	str	r3, [sp, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8000814:	2380      	movs	r3, #128	@ 0x80
 8000816:	02db      	lsls	r3, r3, #11
 8000818:	9316      	str	r3, [sp, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 800081a:	2380      	movs	r3, #128	@ 0x80
 800081c:	03db      	lsls	r3, r3, #15
 800081e:	9317      	str	r3, [sp, #92]	@ 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000820:	a80b      	add	r0, sp, #44	@ 0x2c
 8000822:	f001 f84d 	bl	80018c0 <HAL_RCC_OscConfig>
 8000826:	2800      	cmp	r0, #0
 8000828:	d11d      	bne.n	8000866 <SystemClock_Config+0x9a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800082a:	230f      	movs	r3, #15
 800082c:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800082e:	3b0c      	subs	r3, #12
 8000830:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000832:	2300      	movs	r3, #0
 8000834:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000836:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000838:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800083a:	2101      	movs	r1, #1
 800083c:	a806      	add	r0, sp, #24
 800083e:	f001 facd 	bl	8001ddc <HAL_RCC_ClockConfig>
 8000842:	2800      	cmp	r0, #0
 8000844:	d111      	bne.n	800086a <SystemClock_Config+0x9e>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_LPUART1
 8000846:	232e      	movs	r3, #46	@ 0x2e
 8000848:	9300      	str	r3, [sp, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800084a:	2300      	movs	r3, #0
 800084c:	9302      	str	r3, [sp, #8]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800084e:	9303      	str	r3, [sp, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000850:	9304      	str	r3, [sp, #16]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000852:	2380      	movs	r3, #128	@ 0x80
 8000854:	029b      	lsls	r3, r3, #10
 8000856:	9301      	str	r3, [sp, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000858:	4668      	mov	r0, sp
 800085a:	f001 fbd1 	bl	8002000 <HAL_RCCEx_PeriphCLKConfig>
 800085e:	2800      	cmp	r0, #0
 8000860:	d105      	bne.n	800086e <SystemClock_Config+0xa2>
}
 8000862:	b019      	add	sp, #100	@ 0x64
 8000864:	bd00      	pop	{pc}
    Error_Handler();
 8000866:	f7ff ff2f 	bl	80006c8 <Error_Handler>
    Error_Handler();
 800086a:	f7ff ff2d 	bl	80006c8 <Error_Handler>
    Error_Handler();
 800086e:	f7ff ff2b 	bl	80006c8 <Error_Handler>
 8000872:	46c0      	nop			@ (mov r8, r8)
 8000874:	40007000 	.word	0x40007000
 8000878:	ffffe7ff 	.word	0xffffe7ff

0800087c <main>:
{
 800087c:	b570      	push	{r4, r5, r6, lr}
  HAL_Init();
 800087e:	f000 faa5 	bl	8000dcc <HAL_Init>
  SystemClock_Config();
 8000882:	f7ff ffa3 	bl	80007cc <SystemClock_Config>
  MX_GPIO_Init();
 8000886:	f7ff fe97 	bl	80005b8 <MX_GPIO_Init>
  MX_I2C1_Init();
 800088a:	f7ff ff1f 	bl	80006cc <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 800088e:	f7ff ff49 	bl	8000724 <MX_LPUART1_UART_Init>
  MX_USART2_UART_Init();
 8000892:	f7ff ff65 	bl	8000760 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8000896:	f7ff ff7f 	bl	8000798 <MX_RTC_Init>
  OUTPUT_DISABLE();
 800089a:	20a0      	movs	r0, #160	@ 0xa0
 800089c:	2201      	movs	r2, #1
 800089e:	2180      	movs	r1, #128	@ 0x80
 80008a0:	05c0      	lsls	r0, r0, #23
 80008a2:	f000 fbdd 	bl	8001060 <HAL_GPIO_WritePin>
  STORAGE_REG_SET(0);
 80008a6:	4c24      	ldr	r4, [pc, #144]	@ (8000938 <main+0xbc>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	2101      	movs	r1, #1
 80008ac:	0020      	movs	r0, r4
 80008ae:	f000 fbd7 	bl	8001060 <HAL_GPIO_WritePin>
  SHIFT_REG_SET(0);
 80008b2:	2200      	movs	r2, #0
 80008b4:	2102      	movs	r1, #2
 80008b6:	0020      	movs	r0, r4
 80008b8:	f000 fbd2 	bl	8001060 <HAL_GPIO_WritePin>
  DS3231_Init(&hi2c1);
 80008bc:	481f      	ldr	r0, [pc, #124]	@ (800093c <main+0xc0>)
 80008be:	f000 f9fd 	bl	8000cbc <DS3231_Init>
  DS3231_SetFullTime(21, 34, 00);
 80008c2:	2200      	movs	r2, #0
 80008c4:	2122      	movs	r1, #34	@ 0x22
 80008c6:	2015      	movs	r0, #21
 80008c8:	f000 fa4c 	bl	8000d64 <DS3231_SetFullTime>
  DS3231_EnableOscillator(DS3231_ENABLED);
 80008cc:	2001      	movs	r0, #1
 80008ce:	f000 f9a4 	bl	8000c1a <DS3231_EnableOscillator>
  srand(time(NULL));   // Initialization, should only be called once.
 80008d2:	2000      	movs	r0, #0
 80008d4:	f002 f90e 	bl	8002af4 <time>
 80008d8:	f001 ffc4 	bl	8002864 <srand>
  HAL_Delay(1000);
 80008dc:	20fa      	movs	r0, #250	@ 0xfa
 80008de:	0080      	lsls	r0, r0, #2
 80008e0:	f000 fa9a 	bl	8000e18 <HAL_Delay>
	  OUTPUT_DISABLE();		// RESET
 80008e4:	25a0      	movs	r5, #160	@ 0xa0
 80008e6:	05ed      	lsls	r5, r5, #23
 80008e8:	2201      	movs	r2, #1
 80008ea:	2180      	movs	r1, #128	@ 0x80
 80008ec:	0028      	movs	r0, r5
 80008ee:	f000 fbb7 	bl	8001060 <HAL_GPIO_WritePin>
	  number = ((uint16_t)DS3231_GetHour())*100 + (uint16_t)DS3231_GetMinute();
 80008f2:	f000 fa01 	bl	8000cf8 <DS3231_GetHour>
 80008f6:	2364      	movs	r3, #100	@ 0x64
 80008f8:	4358      	muls	r0, r3
 80008fa:	b284      	uxth	r4, r0
 80008fc:	f000 fa03 	bl	8000d06 <DS3231_GetMinute>
 8000900:	1820      	adds	r0, r4, r0
 8000902:	b280      	uxth	r0, r0
	  nixie_test(number);
 8000904:	f7ff fe10 	bl	8000528 <nixie_test>
	  OUTPUT_ENABLE();
 8000908:	2200      	movs	r2, #0
 800090a:	2180      	movs	r1, #128	@ 0x80
 800090c:	0028      	movs	r0, r5
 800090e:	f000 fba7 	bl	8001060 <HAL_GPIO_WritePin>
	  tickstart = HAL_GetTick();
 8000912:	f000 fa7b 	bl	8000e0c <HAL_GetTick>
 8000916:	0004      	movs	r4, r0
	  while (HAL_GetTick() - tickstart < 60000) {
 8000918:	f000 fa78 	bl	8000e0c <HAL_GetTick>
 800091c:	1b00      	subs	r0, r0, r4
 800091e:	4a08      	ldr	r2, [pc, #32]	@ (8000940 <main+0xc4>)
 8000920:	4290      	cmp	r0, r2
 8000922:	d8df      	bhi.n	80008e4 <main+0x68>
		  HAL_GPIO_TogglePin(INS_EN_3V3_GPIO_Port, INS_EN_3V3_Pin);
 8000924:	20a0      	movs	r0, #160	@ 0xa0
 8000926:	2120      	movs	r1, #32
 8000928:	05c0      	lsls	r0, r0, #23
 800092a:	f000 fb9f 	bl	800106c <HAL_GPIO_TogglePin>
		  HAL_Delay(500);
 800092e:	20fa      	movs	r0, #250	@ 0xfa
 8000930:	0040      	lsls	r0, r0, #1
 8000932:	f000 fa71 	bl	8000e18 <HAL_Delay>
 8000936:	e7ef      	b.n	8000918 <main+0x9c>
 8000938:	50000400 	.word	0x50000400
 800093c:	200001cc 	.word	0x200001cc
 8000940:	0000ea5f 	.word	0x0000ea5f

08000944 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000944:	4b05      	ldr	r3, [pc, #20]	@ (800095c <HAL_MspInit+0x18>)
 8000946:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000948:	2101      	movs	r1, #1
 800094a:	430a      	orrs	r2, r1
 800094c:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800094e:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8000950:	2280      	movs	r2, #128	@ 0x80
 8000952:	0552      	lsls	r2, r2, #21
 8000954:	430a      	orrs	r2, r1
 8000956:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000958:	4770      	bx	lr
 800095a:	46c0      	nop			@ (mov r8, r8)
 800095c:	40021000 	.word	0x40021000

08000960 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000960:	b510      	push	{r4, lr}
 8000962:	b086      	sub	sp, #24
 8000964:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000966:	2214      	movs	r2, #20
 8000968:	2100      	movs	r1, #0
 800096a:	a801      	add	r0, sp, #4
 800096c:	f002 f8ba 	bl	8002ae4 <memset>
  if(hi2c->Instance==I2C1)
 8000970:	6822      	ldr	r2, [r4, #0]
 8000972:	4b10      	ldr	r3, [pc, #64]	@ (80009b4 <HAL_I2C_MspInit+0x54>)
 8000974:	429a      	cmp	r2, r3
 8000976:	d001      	beq.n	800097c <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000978:	b006      	add	sp, #24
 800097a:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800097c:	4c0e      	ldr	r4, [pc, #56]	@ (80009b8 <HAL_I2C_MspInit+0x58>)
 800097e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8000980:	2301      	movs	r3, #1
 8000982:	431a      	orrs	r2, r3
 8000984:	62e2      	str	r2, [r4, #44]	@ 0x2c
 8000986:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8000988:	401a      	ands	r2, r3
 800098a:	9200      	str	r2, [sp, #0]
 800098c:	9a00      	ldr	r2, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800098e:	22c0      	movs	r2, #192	@ 0xc0
 8000990:	00d2      	lsls	r2, r2, #3
 8000992:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000994:	2212      	movs	r2, #18
 8000996:	9202      	str	r2, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000998:	3a0f      	subs	r2, #15
 800099a:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800099c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099e:	20a0      	movs	r0, #160	@ 0xa0
 80009a0:	a901      	add	r1, sp, #4
 80009a2:	05c0      	lsls	r0, r0, #23
 80009a4:	f000 fa9e 	bl	8000ee4 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009a8:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80009aa:	2380      	movs	r3, #128	@ 0x80
 80009ac:	039b      	lsls	r3, r3, #14
 80009ae:	4313      	orrs	r3, r2
 80009b0:	63a3      	str	r3, [r4, #56]	@ 0x38
}
 80009b2:	e7e1      	b.n	8000978 <HAL_I2C_MspInit+0x18>
 80009b4:	40005400 	.word	0x40005400
 80009b8:	40021000 	.word	0x40021000

080009bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009bc:	b510      	push	{r4, lr}
 80009be:	b088      	sub	sp, #32
 80009c0:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c2:	2214      	movs	r2, #20
 80009c4:	2100      	movs	r1, #0
 80009c6:	a803      	add	r0, sp, #12
 80009c8:	f002 f88c 	bl	8002ae4 <memset>
  if(huart->Instance==LPUART1)
 80009cc:	6823      	ldr	r3, [r4, #0]
 80009ce:	4a1e      	ldr	r2, [pc, #120]	@ (8000a48 <HAL_UART_MspInit+0x8c>)
 80009d0:	4293      	cmp	r3, r2
 80009d2:	d004      	beq.n	80009de <HAL_UART_MspInit+0x22>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 80009d4:	4a1d      	ldr	r2, [pc, #116]	@ (8000a4c <HAL_UART_MspInit+0x90>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d01d      	beq.n	8000a16 <HAL_UART_MspInit+0x5a>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009da:	b008      	add	sp, #32
 80009dc:	bd10      	pop	{r4, pc}
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80009de:	4b1c      	ldr	r3, [pc, #112]	@ (8000a50 <HAL_UART_MspInit+0x94>)
 80009e0:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80009e2:	2280      	movs	r2, #128	@ 0x80
 80009e4:	02d2      	lsls	r2, r2, #11
 80009e6:	430a      	orrs	r2, r1
 80009e8:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ea:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80009ec:	2201      	movs	r2, #1
 80009ee:	4311      	orrs	r1, r2
 80009f0:	62d9      	str	r1, [r3, #44]	@ 0x2c
 80009f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009f4:	401a      	ands	r2, r3
 80009f6:	9201      	str	r2, [sp, #4]
 80009f8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009fa:	230c      	movs	r3, #12
 80009fc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fe:	3b0a      	subs	r3, #10
 8000a00:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a02:	3301      	adds	r3, #1
 8000a04:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8000a06:	3303      	adds	r3, #3
 8000a08:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0a:	20a0      	movs	r0, #160	@ 0xa0
 8000a0c:	a903      	add	r1, sp, #12
 8000a0e:	05c0      	lsls	r0, r0, #23
 8000a10:	f000 fa68 	bl	8000ee4 <HAL_GPIO_Init>
 8000a14:	e7e1      	b.n	80009da <HAL_UART_MspInit+0x1e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a16:	4b0e      	ldr	r3, [pc, #56]	@ (8000a50 <HAL_UART_MspInit+0x94>)
 8000a18:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8000a1a:	2280      	movs	r2, #128	@ 0x80
 8000a1c:	0292      	lsls	r2, r2, #10
 8000a1e:	430a      	orrs	r2, r1
 8000a20:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a22:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000a24:	2202      	movs	r2, #2
 8000a26:	4311      	orrs	r1, r2
 8000a28:	62d9      	str	r1, [r3, #44]	@ 0x2c
 8000a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	9302      	str	r3, [sp, #8]
 8000a30:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a32:	23c0      	movs	r3, #192	@ 0xc0
 8000a34:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a36:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a38:	3bbd      	subs	r3, #189	@ 0xbd
 8000a3a:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a3c:	a903      	add	r1, sp, #12
 8000a3e:	4805      	ldr	r0, [pc, #20]	@ (8000a54 <HAL_UART_MspInit+0x98>)
 8000a40:	f000 fa50 	bl	8000ee4 <HAL_GPIO_Init>
}
 8000a44:	e7c9      	b.n	80009da <HAL_UART_MspInit+0x1e>
 8000a46:	46c0      	nop			@ (mov r8, r8)
 8000a48:	40004800 	.word	0x40004800
 8000a4c:	40004400 	.word	0x40004400
 8000a50:	40021000 	.word	0x40021000
 8000a54:	50000400 	.word	0x50000400

08000a58 <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 8000a58:	6802      	ldr	r2, [r0, #0]
 8000a5a:	4b05      	ldr	r3, [pc, #20]	@ (8000a70 <HAL_RTC_MspInit+0x18>)
 8000a5c:	429a      	cmp	r2, r3
 8000a5e:	d000      	beq.n	8000a62 <HAL_RTC_MspInit+0xa>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000a60:	4770      	bx	lr
    __HAL_RCC_RTC_ENABLE();
 8000a62:	4a04      	ldr	r2, [pc, #16]	@ (8000a74 <HAL_RTC_MspInit+0x1c>)
 8000a64:	6d11      	ldr	r1, [r2, #80]	@ 0x50
 8000a66:	2380      	movs	r3, #128	@ 0x80
 8000a68:	02db      	lsls	r3, r3, #11
 8000a6a:	430b      	orrs	r3, r1
 8000a6c:	6513      	str	r3, [r2, #80]	@ 0x50
}
 8000a6e:	e7f7      	b.n	8000a60 <HAL_RTC_MspInit+0x8>
 8000a70:	40002800 	.word	0x40002800
 8000a74:	40021000 	.word	0x40021000

08000a78 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a78:	e7fe      	b.n	8000a78 <NMI_Handler>

08000a7a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a7a:	e7fe      	b.n	8000a7a <HardFault_Handler>

08000a7c <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a7c:	4770      	bx	lr

08000a7e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a7e:	4770      	bx	lr

08000a80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a80:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a82:	f000 f9b7 	bl	8000df4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a86:	bd10      	pop	{r4, pc}

08000a88 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8000a88:	2001      	movs	r0, #1
 8000a8a:	4770      	bx	lr

08000a8c <_kill>:

int _kill(int pid, int sig)
{
 8000a8c:	b510      	push	{r4, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000a8e:	f002 f8ad 	bl	8002bec <__errno>
 8000a92:	2316      	movs	r3, #22
 8000a94:	6003      	str	r3, [r0, #0]
  return -1;
 8000a96:	2001      	movs	r0, #1
}
 8000a98:	4240      	negs	r0, r0
 8000a9a:	bd10      	pop	{r4, pc}

08000a9c <_exit>:

void _exit (int status)
{
 8000a9c:	b510      	push	{r4, lr}
  _kill(status, -1);
 8000a9e:	2101      	movs	r1, #1
 8000aa0:	4249      	negs	r1, r1
 8000aa2:	f7ff fff3 	bl	8000a8c <_kill>
  while (1) {}    /* Make sure we hang here */
 8000aa6:	e7fe      	b.n	8000aa6 <_exit+0xa>

08000aa8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000aa8:	b570      	push	{r4, r5, r6, lr}
 8000aaa:	000c      	movs	r4, r1
 8000aac:	0016      	movs	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aae:	2500      	movs	r5, #0
 8000ab0:	e004      	b.n	8000abc <_read+0x14>
  {
    *ptr++ = __io_getchar();
 8000ab2:	e000      	b.n	8000ab6 <_read+0xe>
 8000ab4:	bf00      	nop
 8000ab6:	7020      	strb	r0, [r4, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ab8:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 8000aba:	3401      	adds	r4, #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000abc:	42b5      	cmp	r5, r6
 8000abe:	dbf8      	blt.n	8000ab2 <_read+0xa>
  }

  return len;
}
 8000ac0:	0030      	movs	r0, r6
 8000ac2:	bd70      	pop	{r4, r5, r6, pc}

08000ac4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ac4:	b570      	push	{r4, r5, r6, lr}
 8000ac6:	0016      	movs	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ac8:	2400      	movs	r4, #0
 8000aca:	e005      	b.n	8000ad8 <_write+0x14>
  {
    __io_putchar(*ptr++);
 8000acc:	1c4d      	adds	r5, r1, #1
 8000ace:	7808      	ldrb	r0, [r1, #0]
 8000ad0:	e000      	b.n	8000ad4 <_write+0x10>
 8000ad2:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ad4:	3401      	adds	r4, #1
    __io_putchar(*ptr++);
 8000ad6:	0029      	movs	r1, r5
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ad8:	42b4      	cmp	r4, r6
 8000ada:	dbf7      	blt.n	8000acc <_write+0x8>
  }
  return len;
}
 8000adc:	0030      	movs	r0, r6
 8000ade:	bd70      	pop	{r4, r5, r6, pc}

08000ae0 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
 8000ae0:	2001      	movs	r0, #1
}
 8000ae2:	4240      	negs	r0, r0
 8000ae4:	4770      	bx	lr

08000ae6 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8000ae6:	2380      	movs	r3, #128	@ 0x80
 8000ae8:	019b      	lsls	r3, r3, #6
 8000aea:	604b      	str	r3, [r1, #4]
  return 0;
}
 8000aec:	2000      	movs	r0, #0
 8000aee:	4770      	bx	lr

08000af0 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8000af0:	2001      	movs	r0, #1
 8000af2:	4770      	bx	lr

08000af4 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8000af4:	2000      	movs	r0, #0
 8000af6:	4770      	bx	lr

08000af8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000af8:	b510      	push	{r4, lr}
 8000afa:	0003      	movs	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000afc:	4a0c      	ldr	r2, [pc, #48]	@ (8000b30 <_sbrk+0x38>)
 8000afe:	490d      	ldr	r1, [pc, #52]	@ (8000b34 <_sbrk+0x3c>)
 8000b00:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b02:	490d      	ldr	r1, [pc, #52]	@ (8000b38 <_sbrk+0x40>)
 8000b04:	6809      	ldr	r1, [r1, #0]
 8000b06:	2900      	cmp	r1, #0
 8000b08:	d007      	beq.n	8000b1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b0a:	490b      	ldr	r1, [pc, #44]	@ (8000b38 <_sbrk+0x40>)
 8000b0c:	6808      	ldr	r0, [r1, #0]
 8000b0e:	18c3      	adds	r3, r0, r3
 8000b10:	4293      	cmp	r3, r2
 8000b12:	d806      	bhi.n	8000b22 <_sbrk+0x2a>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000b14:	4a08      	ldr	r2, [pc, #32]	@ (8000b38 <_sbrk+0x40>)
 8000b16:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8000b18:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8000b1a:	4907      	ldr	r1, [pc, #28]	@ (8000b38 <_sbrk+0x40>)
 8000b1c:	4807      	ldr	r0, [pc, #28]	@ (8000b3c <_sbrk+0x44>)
 8000b1e:	6008      	str	r0, [r1, #0]
 8000b20:	e7f3      	b.n	8000b0a <_sbrk+0x12>
    errno = ENOMEM;
 8000b22:	f002 f863 	bl	8002bec <__errno>
 8000b26:	230c      	movs	r3, #12
 8000b28:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000b2a:	2001      	movs	r0, #1
 8000b2c:	4240      	negs	r0, r0
 8000b2e:	e7f3      	b.n	8000b18 <_sbrk+0x20>
 8000b30:	20002000 	.word	0x20002000
 8000b34:	00000400 	.word	0x00000400
 8000b38:	20000220 	.word	0x20000220
 8000b3c:	20000378 	.word	0x20000378

08000b40 <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b40:	4770      	bx	lr
	...

08000b44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000b44:	480d      	ldr	r0, [pc, #52]	@ (8000b7c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000b46:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b48:	f7ff fffa 	bl	8000b40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b4c:	480c      	ldr	r0, [pc, #48]	@ (8000b80 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b4e:	490d      	ldr	r1, [pc, #52]	@ (8000b84 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b50:	4a0d      	ldr	r2, [pc, #52]	@ (8000b88 <LoopForever+0xe>)
  movs r3, #0
 8000b52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b54:	e002      	b.n	8000b5c <LoopCopyDataInit>

08000b56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b5a:	3304      	adds	r3, #4

08000b5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b60:	d3f9      	bcc.n	8000b56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b62:	4a0a      	ldr	r2, [pc, #40]	@ (8000b8c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b64:	4c0a      	ldr	r4, [pc, #40]	@ (8000b90 <LoopForever+0x16>)
  movs r3, #0
 8000b66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b68:	e001      	b.n	8000b6e <LoopFillZerobss>

08000b6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b6c:	3204      	adds	r2, #4

08000b6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b70:	d3fb      	bcc.n	8000b6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b72:	f002 f841 	bl	8002bf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b76:	f7ff fe81 	bl	800087c <main>

08000b7a <LoopForever>:

LoopForever:
    b LoopForever
 8000b7a:	e7fe      	b.n	8000b7a <LoopForever>
   ldr   r0, =_estack
 8000b7c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000b80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b84:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000b88:	08003a58 	.word	0x08003a58
  ldr r2, =_sbss
 8000b8c:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000b90:	20000378 	.word	0x20000378

08000b94 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b94:	e7fe      	b.n	8000b94 <ADC1_COMP_IRQHandler>
	...

08000b98 <DS3231_SetRegByte>:
/**
 * @brief Set the byte in the designated DS3231 register to value.
 * @param regAddr Register address to write.
 * @param val Value to set, 0 to 255.
 */
void DS3231_SetRegByte(uint8_t regAddr, uint8_t val) {
 8000b98:	b500      	push	{lr}
 8000b9a:	b085      	sub	sp, #20
	uint8_t bytes[2] = { regAddr, val };
 8000b9c:	466b      	mov	r3, sp
 8000b9e:	7318      	strb	r0, [r3, #12]
 8000ba0:	7359      	strb	r1, [r3, #13]
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, bytes, 2, DS3231_TIMEOUT);
 8000ba2:	4b06      	ldr	r3, [pc, #24]	@ (8000bbc <DS3231_SetRegByte+0x24>)
 8000ba4:	6818      	ldr	r0, [r3, #0]
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	425b      	negs	r3, r3
 8000baa:	9300      	str	r3, [sp, #0]
 8000bac:	3303      	adds	r3, #3
 8000bae:	aa03      	add	r2, sp, #12
 8000bb0:	21d0      	movs	r1, #208	@ 0xd0
 8000bb2:	f000 fc63 	bl	800147c <HAL_I2C_Master_Transmit>
}
 8000bb6:	b005      	add	sp, #20
 8000bb8:	bd00      	pop	{pc}
 8000bba:	46c0      	nop			@ (mov r8, r8)
 8000bbc:	20000224 	.word	0x20000224

08000bc0 <DS3231_GetRegByte>:
/**
 * @brief Gets the byte in the designated DS3231 register.
 * @param regAddr Register address to read.
 * @return Value stored in the register, 0 to 255.
 */
uint8_t DS3231_GetRegByte(uint8_t regAddr) {
 8000bc0:	b570      	push	{r4, r5, r6, lr}
 8000bc2:	b086      	sub	sp, #24
 8000bc4:	220f      	movs	r2, #15
 8000bc6:	446a      	add	r2, sp
 8000bc8:	7010      	strb	r0, [r2, #0]
	uint8_t val;
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &regAddr, 1, DS3231_TIMEOUT);
 8000bca:	4e0a      	ldr	r6, [pc, #40]	@ (8000bf4 <DS3231_GetRegByte+0x34>)
 8000bcc:	6830      	ldr	r0, [r6, #0]
 8000bce:	2501      	movs	r5, #1
 8000bd0:	426d      	negs	r5, r5
 8000bd2:	9500      	str	r5, [sp, #0]
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	21d0      	movs	r1, #208	@ 0xd0
 8000bd8:	f000 fc50 	bl	800147c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &val, 1, DS3231_TIMEOUT);
 8000bdc:	2417      	movs	r4, #23
 8000bde:	446c      	add	r4, sp
 8000be0:	6830      	ldr	r0, [r6, #0]
 8000be2:	9500      	str	r5, [sp, #0]
 8000be4:	2301      	movs	r3, #1
 8000be6:	0022      	movs	r2, r4
 8000be8:	21d0      	movs	r1, #208	@ 0xd0
 8000bea:	f000 fd01 	bl	80015f0 <HAL_I2C_Master_Receive>
	return val;
 8000bee:	7820      	ldrb	r0, [r4, #0]
}
 8000bf0:	b006      	add	sp, #24
 8000bf2:	bd70      	pop	{r4, r5, r6, pc}
 8000bf4:	20000224 	.word	0x20000224

08000bf8 <DS3231_SetInterruptMode>:

/**
 * @brief Set the interrupt mode to either alarm interrupt or square wave interrupt.
 * @param mode Interrupt mode to set, DS3231_ALARM_INTERRUPT or DS3231_SQUARE_WAVE_INTERRUPT.
 */
void DS3231_SetInterruptMode(DS3231_InterruptMode mode){
 8000bf8:	b510      	push	{r4, lr}
 8000bfa:	0004      	movs	r4, r0
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8000bfc:	200e      	movs	r0, #14
 8000bfe:	f7ff ffdf 	bl	8000bc0 <DS3231_GetRegByte>
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfb) | ((mode & 0x01) << DS3231_INTCN));
 8000c02:	00a4      	lsls	r4, r4, #2
 8000c04:	2304      	movs	r3, #4
 8000c06:	4023      	ands	r3, r4
 8000c08:	2204      	movs	r2, #4
 8000c0a:	0001      	movs	r1, r0
 8000c0c:	4391      	bics	r1, r2
 8000c0e:	4319      	orrs	r1, r3
 8000c10:	b2c9      	uxtb	r1, r1
 8000c12:	200e      	movs	r0, #14
 8000c14:	f7ff ffc0 	bl	8000b98 <DS3231_SetRegByte>
}
 8000c18:	bd10      	pop	{r4, pc}

08000c1a <DS3231_EnableOscillator>:

/**
 * @brief Enables clock oscillator.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableOscillator(DS3231_State enable){
 8000c1a:	b510      	push	{r4, lr}
 8000c1c:	0004      	movs	r4, r0
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8000c1e:	200e      	movs	r0, #14
 8000c20:	f7ff ffce 	bl	8000bc0 <DS3231_GetRegByte>
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0x7f) | ((!enable & 0x01) << DS3231_EOSC));
 8000c24:	217f      	movs	r1, #127	@ 0x7f
 8000c26:	4001      	ands	r1, r0
 8000c28:	2c00      	cmp	r4, #0
 8000c2a:	d107      	bne.n	8000c3c <DS3231_EnableOscillator+0x22>
 8000c2c:	2380      	movs	r3, #128	@ 0x80
 8000c2e:	425b      	negs	r3, r3
 8000c30:	4319      	orrs	r1, r3
 8000c32:	b2c9      	uxtb	r1, r1
 8000c34:	200e      	movs	r0, #14
 8000c36:	f7ff ffaf 	bl	8000b98 <DS3231_SetRegByte>
}
 8000c3a:	bd10      	pop	{r4, pc}
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0x7f) | ((!enable & 0x01) << DS3231_EOSC));
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	e7f7      	b.n	8000c30 <DS3231_EnableOscillator+0x16>

08000c40 <DS3231_EnableAlarm2>:

/**
 * @brief Enables alarm 2.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableAlarm2(DS3231_State enable){
 8000c40:	b510      	push	{r4, lr}
 8000c42:	0004      	movs	r4, r0
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8000c44:	200e      	movs	r0, #14
 8000c46:	f7ff ffbb 	bl	8000bc0 <DS3231_GetRegByte>
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfd) | ((enable & 0x01) << DS3231_A2IE));
 8000c4a:	0064      	lsls	r4, r4, #1
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	4023      	ands	r3, r4
 8000c50:	2202      	movs	r2, #2
 8000c52:	0001      	movs	r1, r0
 8000c54:	4391      	bics	r1, r2
 8000c56:	4319      	orrs	r1, r3
 8000c58:	b2c9      	uxtb	r1, r1
 8000c5a:	200e      	movs	r0, #14
 8000c5c:	f7ff ff9c 	bl	8000b98 <DS3231_SetRegByte>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 8000c60:	2001      	movs	r0, #1
 8000c62:	f7ff ffc9 	bl	8000bf8 <DS3231_SetInterruptMode>
}
 8000c66:	bd10      	pop	{r4, pc}

08000c68 <DS3231_ClearAlarm2Flag>:

/**
 * @brief Clears alarm 2 matched flag. Matched flags must be cleared before the next match or the next interrupt will be masked.
 */
void DS3231_ClearAlarm2Flag(){
 8000c68:	b510      	push	{r4, lr}
	uint8_t status = DS3231_GetRegByte(DS3231_REG_STATUS) & 0xfd;
 8000c6a:	200f      	movs	r0, #15
 8000c6c:	f7ff ffa8 	bl	8000bc0 <DS3231_GetRegByte>
 8000c70:	2302      	movs	r3, #2
 8000c72:	4398      	bics	r0, r3
 8000c74:	b2c1      	uxtb	r1, r0
	DS3231_SetRegByte(DS3231_REG_STATUS, status & ~(0x01 << DS3231_A2F));
 8000c76:	200f      	movs	r0, #15
 8000c78:	f7ff ff8e 	bl	8000b98 <DS3231_SetRegByte>
}
 8000c7c:	bd10      	pop	{r4, pc}

08000c7e <DS3231_EnableAlarm1>:

/**
 * @brief Enables alarm 1.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableAlarm1(DS3231_State enable){
 8000c7e:	b510      	push	{r4, lr}
 8000c80:	0004      	movs	r4, r0
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8000c82:	200e      	movs	r0, #14
 8000c84:	f7ff ff9c 	bl	8000bc0 <DS3231_GetRegByte>
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfe) | ((enable & 0x01) << DS3231_A1IE));
 8000c88:	2301      	movs	r3, #1
 8000c8a:	0001      	movs	r1, r0
 8000c8c:	4399      	bics	r1, r3
 8000c8e:	2001      	movs	r0, #1
 8000c90:	4020      	ands	r0, r4
 8000c92:	4301      	orrs	r1, r0
 8000c94:	b2c9      	uxtb	r1, r1
 8000c96:	200e      	movs	r0, #14
 8000c98:	f7ff ff7e 	bl	8000b98 <DS3231_SetRegByte>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 8000c9c:	2001      	movs	r0, #1
 8000c9e:	f7ff ffab 	bl	8000bf8 <DS3231_SetInterruptMode>
}
 8000ca2:	bd10      	pop	{r4, pc}

08000ca4 <DS3231_ClearAlarm1Flag>:

/**
 * @brief Clears alarm 1 matched flag. Matched flags must be cleared before the next match or the next interrupt will be masked.
 */
void DS3231_ClearAlarm1Flag(){
 8000ca4:	b510      	push	{r4, lr}
	uint8_t status = DS3231_GetRegByte(DS3231_REG_STATUS) & 0xfe;
 8000ca6:	200f      	movs	r0, #15
 8000ca8:	f7ff ff8a 	bl	8000bc0 <DS3231_GetRegByte>
 8000cac:	2301      	movs	r3, #1
 8000cae:	4398      	bics	r0, r3
 8000cb0:	b2c1      	uxtb	r1, r0
	DS3231_SetRegByte(DS3231_REG_STATUS, status & ~(0x01 << DS3231_A1F));
 8000cb2:	200f      	movs	r0, #15
 8000cb4:	f7ff ff70 	bl	8000b98 <DS3231_SetRegByte>
}
 8000cb8:	bd10      	pop	{r4, pc}
	...

08000cbc <DS3231_Init>:
void DS3231_Init(I2C_HandleTypeDef *hi2c) {
 8000cbc:	b510      	push	{r4, lr}
	_ds3231_ui2c = hi2c;
 8000cbe:	4b08      	ldr	r3, [pc, #32]	@ (8000ce0 <DS3231_Init+0x24>)
 8000cc0:	6018      	str	r0, [r3, #0]
	DS3231_EnableAlarm1(DS3231_DISABLED);
 8000cc2:	2000      	movs	r0, #0
 8000cc4:	f7ff ffdb 	bl	8000c7e <DS3231_EnableAlarm1>
	DS3231_EnableAlarm2(DS3231_DISABLED);
 8000cc8:	2000      	movs	r0, #0
 8000cca:	f7ff ffb9 	bl	8000c40 <DS3231_EnableAlarm2>
	DS3231_ClearAlarm1Flag();
 8000cce:	f7ff ffe9 	bl	8000ca4 <DS3231_ClearAlarm1Flag>
	DS3231_ClearAlarm2Flag();
 8000cd2:	f7ff ffc9 	bl	8000c68 <DS3231_ClearAlarm2Flag>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 8000cd6:	2001      	movs	r0, #1
 8000cd8:	f7ff ff8e 	bl	8000bf8 <DS3231_SetInterruptMode>
}
 8000cdc:	bd10      	pop	{r4, pc}
 8000cde:	46c0      	nop			@ (mov r8, r8)
 8000ce0:	20000224 	.word	0x20000224

08000ce4 <DS3231_DecodeBCD>:
/**
 * @brief Decodes the raw binary value stored in registers to decimal format.
 * @param bin Binary-coded decimal value retrieved from register, 0 to 255.
 * @return Decoded decimal value.
 */
uint8_t DS3231_DecodeBCD(uint8_t bin) {
 8000ce4:	0002      	movs	r2, r0
	return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
 8000ce6:	0903      	lsrs	r3, r0, #4
 8000ce8:	200f      	movs	r0, #15
 8000cea:	4010      	ands	r0, r2
 8000cec:	009a      	lsls	r2, r3, #2
 8000cee:	189b      	adds	r3, r3, r2
 8000cf0:	005b      	lsls	r3, r3, #1
 8000cf2:	18c0      	adds	r0, r0, r3
 8000cf4:	b2c0      	uxtb	r0, r0
}
 8000cf6:	4770      	bx	lr

08000cf8 <DS3231_GetHour>:
uint8_t DS3231_GetHour(void) {
 8000cf8:	b510      	push	{r4, lr}
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_HOUR));
 8000cfa:	2002      	movs	r0, #2
 8000cfc:	f7ff ff60 	bl	8000bc0 <DS3231_GetRegByte>
 8000d00:	f7ff fff0 	bl	8000ce4 <DS3231_DecodeBCD>
}
 8000d04:	bd10      	pop	{r4, pc}

08000d06 <DS3231_GetMinute>:
uint8_t DS3231_GetMinute(void) {
 8000d06:	b510      	push	{r4, lr}
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_MINUTE));
 8000d08:	2001      	movs	r0, #1
 8000d0a:	f7ff ff59 	bl	8000bc0 <DS3231_GetRegByte>
 8000d0e:	f7ff ffe9 	bl	8000ce4 <DS3231_DecodeBCD>
}
 8000d12:	bd10      	pop	{r4, pc}

08000d14 <DS3231_EncodeBCD>:
/**
 * @brief Encodes a decimal number to binaty-coded decimal for storage in registers.
 * @param dec Decimal number to encode.
 * @return Encoded binary-coded decimal value.
 */
uint8_t DS3231_EncodeBCD(uint8_t dec) {
 8000d14:	b570      	push	{r4, r5, r6, lr}
 8000d16:	0005      	movs	r5, r0
	return (dec % 10 + ((dec / 10) << 4));
 8000d18:	210a      	movs	r1, #10
 8000d1a:	f7ff f9ff 	bl	800011c <__udivsi3>
 8000d1e:	0104      	lsls	r4, r0, #4
 8000d20:	b2e4      	uxtb	r4, r4
 8000d22:	210a      	movs	r1, #10
 8000d24:	0028      	movs	r0, r5
 8000d26:	f7ff fa7f 	bl	8000228 <__aeabi_uidivmod>
 8000d2a:	1860      	adds	r0, r4, r1
 8000d2c:	b2c0      	uxtb	r0, r0
}
 8000d2e:	bd70      	pop	{r4, r5, r6, pc}

08000d30 <DS3231_SetHour>:
void DS3231_SetHour(uint8_t hour_24mode) {
 8000d30:	b510      	push	{r4, lr}
	DS3231_SetRegByte(DS3231_REG_HOUR, DS3231_EncodeBCD(hour_24mode & 0x3f));
 8000d32:	233f      	movs	r3, #63	@ 0x3f
 8000d34:	4018      	ands	r0, r3
 8000d36:	f7ff ffed 	bl	8000d14 <DS3231_EncodeBCD>
 8000d3a:	0001      	movs	r1, r0
 8000d3c:	2002      	movs	r0, #2
 8000d3e:	f7ff ff2b 	bl	8000b98 <DS3231_SetRegByte>
}
 8000d42:	bd10      	pop	{r4, pc}

08000d44 <DS3231_SetMinute>:
void DS3231_SetMinute(uint8_t minute) {
 8000d44:	b510      	push	{r4, lr}
	DS3231_SetRegByte(DS3231_REG_MINUTE, DS3231_EncodeBCD(minute));
 8000d46:	f7ff ffe5 	bl	8000d14 <DS3231_EncodeBCD>
 8000d4a:	0001      	movs	r1, r0
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	f7ff ff23 	bl	8000b98 <DS3231_SetRegByte>
}
 8000d52:	bd10      	pop	{r4, pc}

08000d54 <DS3231_SetSecond>:
void DS3231_SetSecond(uint8_t second) {
 8000d54:	b510      	push	{r4, lr}
	DS3231_SetRegByte(DS3231_REG_SECOND, DS3231_EncodeBCD(second));
 8000d56:	f7ff ffdd 	bl	8000d14 <DS3231_EncodeBCD>
 8000d5a:	0001      	movs	r1, r0
 8000d5c:	2000      	movs	r0, #0
 8000d5e:	f7ff ff1b 	bl	8000b98 <DS3231_SetRegByte>
}
 8000d62:	bd10      	pop	{r4, pc}

08000d64 <DS3231_SetFullTime>:
void DS3231_SetFullTime(uint8_t  hour_24mode, uint8_t minute, uint8_t second){
 8000d64:	b570      	push	{r4, r5, r6, lr}
 8000d66:	000d      	movs	r5, r1
 8000d68:	0014      	movs	r4, r2
	DS3231_SetHour(hour_24mode);
 8000d6a:	f7ff ffe1 	bl	8000d30 <DS3231_SetHour>
	DS3231_SetMinute(minute);
 8000d6e:	0028      	movs	r0, r5
 8000d70:	f7ff ffe8 	bl	8000d44 <DS3231_SetMinute>
	DS3231_SetSecond(second);
 8000d74:	0020      	movs	r0, r4
 8000d76:	f7ff ffed 	bl	8000d54 <DS3231_SetSecond>
}
 8000d7a:	bd70      	pop	{r4, r5, r6, pc}

08000d7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d7c:	b510      	push	{r4, lr}
 8000d7e:	0004      	movs	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d80:	4b0f      	ldr	r3, [pc, #60]	@ (8000dc0 <HAL_InitTick+0x44>)
 8000d82:	7819      	ldrb	r1, [r3, #0]
 8000d84:	20fa      	movs	r0, #250	@ 0xfa
 8000d86:	0080      	lsls	r0, r0, #2
 8000d88:	f7ff f9c8 	bl	800011c <__udivsi3>
 8000d8c:	0001      	movs	r1, r0
 8000d8e:	4b0d      	ldr	r3, [pc, #52]	@ (8000dc4 <HAL_InitTick+0x48>)
 8000d90:	6818      	ldr	r0, [r3, #0]
 8000d92:	f7ff f9c3 	bl	800011c <__udivsi3>
 8000d96:	f000 f8a1 	bl	8000edc <HAL_SYSTICK_Config>
 8000d9a:	2800      	cmp	r0, #0
 8000d9c:	d10d      	bne.n	8000dba <HAL_InitTick+0x3e>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d9e:	2c03      	cmp	r4, #3
 8000da0:	d901      	bls.n	8000da6 <HAL_InitTick+0x2a>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000da2:	2001      	movs	r0, #1
 8000da4:	e00a      	b.n	8000dbc <HAL_InitTick+0x40>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000da6:	3001      	adds	r0, #1
 8000da8:	2200      	movs	r2, #0
 8000daa:	0021      	movs	r1, r4
 8000dac:	4240      	negs	r0, r0
 8000dae:	f000 f891 	bl	8000ed4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000db2:	4b05      	ldr	r3, [pc, #20]	@ (8000dc8 <HAL_InitTick+0x4c>)
 8000db4:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000db6:	2000      	movs	r0, #0
 8000db8:	e000      	b.n	8000dbc <HAL_InitTick+0x40>
    return HAL_ERROR;
 8000dba:	2001      	movs	r0, #1
}
 8000dbc:	bd10      	pop	{r4, pc}
 8000dbe:	46c0      	nop			@ (mov r8, r8)
 8000dc0:	20000018 	.word	0x20000018
 8000dc4:	20000014 	.word	0x20000014
 8000dc8:	2000001c 	.word	0x2000001c

08000dcc <HAL_Init>:
{
 8000dcc:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000dce:	4a08      	ldr	r2, [pc, #32]	@ (8000df0 <HAL_Init+0x24>)
 8000dd0:	6813      	ldr	r3, [r2, #0]
 8000dd2:	2140      	movs	r1, #64	@ 0x40
 8000dd4:	430b      	orrs	r3, r1
 8000dd6:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dd8:	2003      	movs	r0, #3
 8000dda:	f7ff ffcf 	bl	8000d7c <HAL_InitTick>
 8000dde:	1e04      	subs	r4, r0, #0
 8000de0:	d002      	beq.n	8000de8 <HAL_Init+0x1c>
    status = HAL_ERROR;
 8000de2:	2401      	movs	r4, #1
}
 8000de4:	0020      	movs	r0, r4
 8000de6:	bd10      	pop	{r4, pc}
    HAL_MspInit();
 8000de8:	f7ff fdac 	bl	8000944 <HAL_MspInit>
 8000dec:	e7fa      	b.n	8000de4 <HAL_Init+0x18>
 8000dee:	46c0      	nop			@ (mov r8, r8)
 8000df0:	40022000 	.word	0x40022000

08000df4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000df4:	4a03      	ldr	r2, [pc, #12]	@ (8000e04 <HAL_IncTick+0x10>)
 8000df6:	6811      	ldr	r1, [r2, #0]
 8000df8:	4b03      	ldr	r3, [pc, #12]	@ (8000e08 <HAL_IncTick+0x14>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	185b      	adds	r3, r3, r1
 8000dfe:	6013      	str	r3, [r2, #0]
}
 8000e00:	4770      	bx	lr
 8000e02:	46c0      	nop			@ (mov r8, r8)
 8000e04:	20000228 	.word	0x20000228
 8000e08:	20000018 	.word	0x20000018

08000e0c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000e0c:	4b01      	ldr	r3, [pc, #4]	@ (8000e14 <HAL_GetTick+0x8>)
 8000e0e:	6818      	ldr	r0, [r3, #0]
}
 8000e10:	4770      	bx	lr
 8000e12:	46c0      	nop			@ (mov r8, r8)
 8000e14:	20000228 	.word	0x20000228

08000e18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e18:	b570      	push	{r4, r5, r6, lr}
 8000e1a:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000e1c:	f7ff fff6 	bl	8000e0c <HAL_GetTick>
 8000e20:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e22:	1c63      	adds	r3, r4, #1
 8000e24:	d002      	beq.n	8000e2c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e26:	4b04      	ldr	r3, [pc, #16]	@ (8000e38 <HAL_Delay+0x20>)
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e2c:	f7ff ffee 	bl	8000e0c <HAL_GetTick>
 8000e30:	1b40      	subs	r0, r0, r5
 8000e32:	42a0      	cmp	r0, r4
 8000e34:	d3fa      	bcc.n	8000e2c <HAL_Delay+0x14>
  {
  }
}
 8000e36:	bd70      	pop	{r4, r5, r6, pc}
 8000e38:	20000018 	.word	0x20000018

08000e3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e3c:	b570      	push	{r4, r5, r6, lr}
  if ((int32_t)(IRQn) >= 0)
 8000e3e:	2800      	cmp	r0, #0
 8000e40:	db11      	blt.n	8000e66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e42:	0883      	lsrs	r3, r0, #2
 8000e44:	4d13      	ldr	r5, [pc, #76]	@ (8000e94 <__NVIC_SetPriority+0x58>)
 8000e46:	33c0      	adds	r3, #192	@ 0xc0
 8000e48:	009b      	lsls	r3, r3, #2
 8000e4a:	595c      	ldr	r4, [r3, r5]
 8000e4c:	2203      	movs	r2, #3
 8000e4e:	4010      	ands	r0, r2
 8000e50:	00c0      	lsls	r0, r0, #3
 8000e52:	32fc      	adds	r2, #252	@ 0xfc
 8000e54:	0016      	movs	r6, r2
 8000e56:	4086      	lsls	r6, r0
 8000e58:	43b4      	bics	r4, r6
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e5a:	0189      	lsls	r1, r1, #6
 8000e5c:	400a      	ands	r2, r1
 8000e5e:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e60:	4322      	orrs	r2, r4
 8000e62:	515a      	str	r2, [r3, r5]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000e64:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e66:	230f      	movs	r3, #15
 8000e68:	4003      	ands	r3, r0
 8000e6a:	3b08      	subs	r3, #8
 8000e6c:	089b      	lsrs	r3, r3, #2
 8000e6e:	3306      	adds	r3, #6
 8000e70:	009b      	lsls	r3, r3, #2
 8000e72:	4a09      	ldr	r2, [pc, #36]	@ (8000e98 <__NVIC_SetPriority+0x5c>)
 8000e74:	4694      	mov	ip, r2
 8000e76:	4463      	add	r3, ip
 8000e78:	685c      	ldr	r4, [r3, #4]
 8000e7a:	2203      	movs	r2, #3
 8000e7c:	4010      	ands	r0, r2
 8000e7e:	00c0      	lsls	r0, r0, #3
 8000e80:	32fc      	adds	r2, #252	@ 0xfc
 8000e82:	0015      	movs	r5, r2
 8000e84:	4085      	lsls	r5, r0
 8000e86:	43ac      	bics	r4, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e88:	0189      	lsls	r1, r1, #6
 8000e8a:	400a      	ands	r2, r1
 8000e8c:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e8e:	4322      	orrs	r2, r4
 8000e90:	605a      	str	r2, [r3, #4]
}
 8000e92:	e7e7      	b.n	8000e64 <__NVIC_SetPriority+0x28>
 8000e94:	e000e100 	.word	0xe000e100
 8000e98:	e000ed00 	.word	0xe000ed00

08000e9c <SysTick_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e9c:	3801      	subs	r0, #1
 8000e9e:	2380      	movs	r3, #128	@ 0x80
 8000ea0:	045b      	lsls	r3, r3, #17
 8000ea2:	4298      	cmp	r0, r3
 8000ea4:	d20f      	bcs.n	8000ec6 <SysTick_Config+0x2a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ea6:	4a09      	ldr	r2, [pc, #36]	@ (8000ecc <SysTick_Config+0x30>)
 8000ea8:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000eaa:	4809      	ldr	r0, [pc, #36]	@ (8000ed0 <SysTick_Config+0x34>)
 8000eac:	6a03      	ldr	r3, [r0, #32]
 8000eae:	021b      	lsls	r3, r3, #8
 8000eb0:	0a1b      	lsrs	r3, r3, #8
 8000eb2:	21c0      	movs	r1, #192	@ 0xc0
 8000eb4:	0609      	lsls	r1, r1, #24
 8000eb6:	430b      	orrs	r3, r1
 8000eb8:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eba:	2300      	movs	r3, #0
 8000ebc:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ebe:	3307      	adds	r3, #7
 8000ec0:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ec2:	2000      	movs	r0, #0
}
 8000ec4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000ec6:	2001      	movs	r0, #1
 8000ec8:	e7fc      	b.n	8000ec4 <SysTick_Config+0x28>
 8000eca:	46c0      	nop			@ (mov r8, r8)
 8000ecc:	e000e010 	.word	0xe000e010
 8000ed0:	e000ed00 	.word	0xe000ed00

08000ed4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ed4:	b510      	push	{r4, lr}
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000ed6:	f7ff ffb1 	bl	8000e3c <__NVIC_SetPriority>
}
 8000eda:	bd10      	pop	{r4, pc}

08000edc <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000edc:	b510      	push	{r4, lr}
   return SysTick_Config(TicksNumb);
 8000ede:	f7ff ffdd 	bl	8000e9c <SysTick_Config>
}
 8000ee2:	bd10      	pop	{r4, pc}

08000ee4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t position = 0x00U;
 8000ee6:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000ee8:	e056      	b.n	8000f98 <HAL_GPIO_Init+0xb4>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000eea:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000eec:	005f      	lsls	r7, r3, #1
 8000eee:	2403      	movs	r4, #3
 8000ef0:	40bc      	lsls	r4, r7
 8000ef2:	43a6      	bics	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ef4:	68cc      	ldr	r4, [r1, #12]
 8000ef6:	40bc      	lsls	r4, r7
 8000ef8:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8000efa:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000efc:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000efe:	4394      	bics	r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f00:	684e      	ldr	r6, [r1, #4]
 8000f02:	0936      	lsrs	r6, r6, #4
 8000f04:	2201      	movs	r2, #1
 8000f06:	4032      	ands	r2, r6
 8000f08:	409a      	lsls	r2, r3
 8000f0a:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8000f0c:	6042      	str	r2, [r0, #4]
 8000f0e:	e053      	b.n	8000fb8 <HAL_GPIO_Init+0xd4>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f10:	08de      	lsrs	r6, r3, #3
 8000f12:	3608      	adds	r6, #8
 8000f14:	00b6      	lsls	r6, r6, #2
 8000f16:	5837      	ldr	r7, [r6, r0]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000f18:	3205      	adds	r2, #5
 8000f1a:	401a      	ands	r2, r3
 8000f1c:	0092      	lsls	r2, r2, #2
 8000f1e:	240f      	movs	r4, #15
 8000f20:	4094      	lsls	r4, r2
 8000f22:	43a7      	bics	r7, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000f24:	690c      	ldr	r4, [r1, #16]
 8000f26:	4094      	lsls	r4, r2
 8000f28:	0022      	movs	r2, r4
 8000f2a:	433a      	orrs	r2, r7
        GPIOx->AFR[position >> 3U] = temp;
 8000f2c:	5032      	str	r2, [r6, r0]
 8000f2e:	e056      	b.n	8000fde <HAL_GPIO_Init+0xfa>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000f30:	2605      	movs	r6, #5
 8000f32:	e000      	b.n	8000f36 <HAL_GPIO_Init+0x52>
 8000f34:	2600      	movs	r6, #0
 8000f36:	40a6      	lsls	r6, r4
 8000f38:	0034      	movs	r4, r6
 8000f3a:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f3c:	3202      	adds	r2, #2
 8000f3e:	0092      	lsls	r2, r2, #2
 8000f40:	4e41      	ldr	r6, [pc, #260]	@ (8001048 <HAL_GPIO_Init+0x164>)
 8000f42:	5194      	str	r4, [r2, r6]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f44:	4a41      	ldr	r2, [pc, #260]	@ (800104c <HAL_GPIO_Init+0x168>)
 8000f46:	6897      	ldr	r7, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000f48:	43ea      	mvns	r2, r5
 8000f4a:	003e      	movs	r6, r7
 8000f4c:	43ae      	bics	r6, r5
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f4e:	684c      	ldr	r4, [r1, #4]
 8000f50:	02e4      	lsls	r4, r4, #11
 8000f52:	d501      	bpl.n	8000f58 <HAL_GPIO_Init+0x74>
        {
          temp |= iocurrent;
 8000f54:	003e      	movs	r6, r7
 8000f56:	432e      	orrs	r6, r5
        }
        EXTI->RTSR = temp;
 8000f58:	4c3c      	ldr	r4, [pc, #240]	@ (800104c <HAL_GPIO_Init+0x168>)
 8000f5a:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8000f5c:	68e7      	ldr	r7, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8000f5e:	003e      	movs	r6, r7
 8000f60:	4016      	ands	r6, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f62:	684c      	ldr	r4, [r1, #4]
 8000f64:	02a4      	lsls	r4, r4, #10
 8000f66:	d501      	bpl.n	8000f6c <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 8000f68:	003e      	movs	r6, r7
 8000f6a:	432e      	orrs	r6, r5
        }
        EXTI->FTSR = temp;
 8000f6c:	4c37      	ldr	r4, [pc, #220]	@ (800104c <HAL_GPIO_Init+0x168>)
 8000f6e:	60e6      	str	r6, [r4, #12]

        temp = EXTI->EMR;
 8000f70:	6867      	ldr	r7, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8000f72:	003e      	movs	r6, r7
 8000f74:	4016      	ands	r6, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f76:	684c      	ldr	r4, [r1, #4]
 8000f78:	03a4      	lsls	r4, r4, #14
 8000f7a:	d501      	bpl.n	8000f80 <HAL_GPIO_Init+0x9c>
        {
          temp |= iocurrent;
 8000f7c:	003e      	movs	r6, r7
 8000f7e:	432e      	orrs	r6, r5
        }
        EXTI->EMR = temp;
 8000f80:	4c32      	ldr	r4, [pc, #200]	@ (800104c <HAL_GPIO_Init+0x168>)
 8000f82:	6066      	str	r6, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f84:	6826      	ldr	r6, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8000f86:	4032      	ands	r2, r6
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f88:	684c      	ldr	r4, [r1, #4]
 8000f8a:	03e4      	lsls	r4, r4, #15
 8000f8c:	d501      	bpl.n	8000f92 <HAL_GPIO_Init+0xae>
        {
          temp |= iocurrent;
 8000f8e:	002a      	movs	r2, r5
 8000f90:	4332      	orrs	r2, r6
        }
        EXTI->IMR = temp;
 8000f92:	4c2e      	ldr	r4, [pc, #184]	@ (800104c <HAL_GPIO_Init+0x168>)
 8000f94:	6022      	str	r2, [r4, #0]
      }
    }
    position++;
 8000f96:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0)
 8000f98:	680c      	ldr	r4, [r1, #0]
 8000f9a:	0022      	movs	r2, r4
 8000f9c:	40da      	lsrs	r2, r3
 8000f9e:	d052      	beq.n	8001046 <HAL_GPIO_Init+0x162>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	409a      	lsls	r2, r3
 8000fa4:	0025      	movs	r5, r4
 8000fa6:	4015      	ands	r5, r2
    if (iocurrent)
 8000fa8:	4214      	tst	r4, r2
 8000faa:	d0f4      	beq.n	8000f96 <HAL_GPIO_Init+0xb2>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000fac:	684e      	ldr	r6, [r1, #4]
 8000fae:	2403      	movs	r4, #3
 8000fb0:	4034      	ands	r4, r6
 8000fb2:	3c01      	subs	r4, #1
 8000fb4:	2c01      	cmp	r4, #1
 8000fb6:	d998      	bls.n	8000eea <HAL_GPIO_Init+0x6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fb8:	684c      	ldr	r4, [r1, #4]
 8000fba:	2203      	movs	r2, #3
 8000fbc:	4022      	ands	r2, r4
 8000fbe:	2a03      	cmp	r2, #3
 8000fc0:	d008      	beq.n	8000fd4 <HAL_GPIO_Init+0xf0>
        temp = GPIOx->PUPDR;
 8000fc2:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000fc4:	005e      	lsls	r6, r3, #1
 8000fc6:	2203      	movs	r2, #3
 8000fc8:	40b2      	lsls	r2, r6
 8000fca:	4394      	bics	r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fcc:	688a      	ldr	r2, [r1, #8]
 8000fce:	40b2      	lsls	r2, r6
 8000fd0:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8000fd2:	60c2      	str	r2, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fd4:	684c      	ldr	r4, [r1, #4]
 8000fd6:	2203      	movs	r2, #3
 8000fd8:	4022      	ands	r2, r4
 8000fda:	2a02      	cmp	r2, #2
 8000fdc:	d098      	beq.n	8000f10 <HAL_GPIO_Init+0x2c>
      temp = GPIOx->MODER;
 8000fde:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000fe0:	005e      	lsls	r6, r3, #1
 8000fe2:	2203      	movs	r2, #3
 8000fe4:	0017      	movs	r7, r2
 8000fe6:	40b7      	lsls	r7, r6
 8000fe8:	43bc      	bics	r4, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fea:	684f      	ldr	r7, [r1, #4]
 8000fec:	403a      	ands	r2, r7
 8000fee:	40b2      	lsls	r2, r6
 8000ff0:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8000ff2:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ff4:	684c      	ldr	r4, [r1, #4]
 8000ff6:	22c0      	movs	r2, #192	@ 0xc0
 8000ff8:	0292      	lsls	r2, r2, #10
 8000ffa:	4214      	tst	r4, r2
 8000ffc:	d0cb      	beq.n	8000f96 <HAL_GPIO_Init+0xb2>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ffe:	4c14      	ldr	r4, [pc, #80]	@ (8001050 <HAL_GPIO_Init+0x16c>)
 8001000:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8001002:	2601      	movs	r6, #1
 8001004:	4332      	orrs	r2, r6
 8001006:	6362      	str	r2, [r4, #52]	@ 0x34
        temp = SYSCFG->EXTICR[position >> 2U];
 8001008:	089a      	lsrs	r2, r3, #2
 800100a:	1c94      	adds	r4, r2, #2
 800100c:	00a4      	lsls	r4, r4, #2
 800100e:	4e0e      	ldr	r6, [pc, #56]	@ (8001048 <HAL_GPIO_Init+0x164>)
 8001010:	59a7      	ldr	r7, [r4, r6]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001012:	2403      	movs	r4, #3
 8001014:	401c      	ands	r4, r3
 8001016:	00a4      	lsls	r4, r4, #2
 8001018:	260f      	movs	r6, #15
 800101a:	40a6      	lsls	r6, r4
 800101c:	43b7      	bics	r7, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800101e:	26a0      	movs	r6, #160	@ 0xa0
 8001020:	05f6      	lsls	r6, r6, #23
 8001022:	42b0      	cmp	r0, r6
 8001024:	d086      	beq.n	8000f34 <HAL_GPIO_Init+0x50>
 8001026:	4e0b      	ldr	r6, [pc, #44]	@ (8001054 <HAL_GPIO_Init+0x170>)
 8001028:	42b0      	cmp	r0, r6
 800102a:	d008      	beq.n	800103e <HAL_GPIO_Init+0x15a>
 800102c:	4e0a      	ldr	r6, [pc, #40]	@ (8001058 <HAL_GPIO_Init+0x174>)
 800102e:	42b0      	cmp	r0, r6
 8001030:	d007      	beq.n	8001042 <HAL_GPIO_Init+0x15e>
 8001032:	4e0a      	ldr	r6, [pc, #40]	@ (800105c <HAL_GPIO_Init+0x178>)
 8001034:	42b0      	cmp	r0, r6
 8001036:	d100      	bne.n	800103a <HAL_GPIO_Init+0x156>
 8001038:	e77a      	b.n	8000f30 <HAL_GPIO_Init+0x4c>
 800103a:	2606      	movs	r6, #6
 800103c:	e77b      	b.n	8000f36 <HAL_GPIO_Init+0x52>
 800103e:	2601      	movs	r6, #1
 8001040:	e779      	b.n	8000f36 <HAL_GPIO_Init+0x52>
 8001042:	2602      	movs	r6, #2
 8001044:	e777      	b.n	8000f36 <HAL_GPIO_Init+0x52>
  }
}
 8001046:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001048:	40010000 	.word	0x40010000
 800104c:	40010400 	.word	0x40010400
 8001050:	40021000 	.word	0x40021000
 8001054:	50000400 	.word	0x50000400
 8001058:	50000800 	.word	0x50000800
 800105c:	50001c00 	.word	0x50001c00

08001060 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001060:	2a00      	cmp	r2, #0
 8001062:	d001      	beq.n	8001068 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001064:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001066:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 8001068:	6281      	str	r1, [r0, #40]	@ 0x28
}
 800106a:	e7fc      	b.n	8001066 <HAL_GPIO_WritePin+0x6>

0800106c <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800106c:	6942      	ldr	r2, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800106e:	0013      	movs	r3, r2
 8001070:	400b      	ands	r3, r1
 8001072:	041b      	lsls	r3, r3, #16
 8001074:	4391      	bics	r1, r2
 8001076:	430b      	orrs	r3, r1
 8001078:	6183      	str	r3, [r0, #24]
}
 800107a:	4770      	bx	lr

0800107c <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800107c:	6802      	ldr	r2, [r0, #0]
 800107e:	6993      	ldr	r3, [r2, #24]
 8001080:	079b      	lsls	r3, r3, #30
 8001082:	d501      	bpl.n	8001088 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001084:	2300      	movs	r3, #0
 8001086:	6293      	str	r3, [r2, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001088:	6803      	ldr	r3, [r0, #0]
 800108a:	699a      	ldr	r2, [r3, #24]
 800108c:	07d2      	lsls	r2, r2, #31
 800108e:	d403      	bmi.n	8001098 <I2C_Flush_TXDR+0x1c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001090:	699a      	ldr	r2, [r3, #24]
 8001092:	2101      	movs	r1, #1
 8001094:	430a      	orrs	r2, r1
 8001096:	619a      	str	r2, [r3, #24]
  }
}
 8001098:	4770      	bx	lr
	...

0800109c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800109c:	b510      	push	{r4, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800109e:	0589      	lsls	r1, r1, #22
 80010a0:	0d89      	lsrs	r1, r1, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80010a2:	0412      	lsls	r2, r2, #16
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80010a4:	4311      	orrs	r1, r2
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80010a6:	4319      	orrs	r1, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80010a8:	9b02      	ldr	r3, [sp, #8]
 80010aa:	4319      	orrs	r1, r3
 80010ac:	0049      	lsls	r1, r1, #1
 80010ae:	0849      	lsrs	r1, r1, #1
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80010b0:	6804      	ldr	r4, [r0, #0]
 80010b2:	6862      	ldr	r2, [r4, #4]
 80010b4:	0d5b      	lsrs	r3, r3, #21
 80010b6:	2080      	movs	r0, #128	@ 0x80
 80010b8:	00c0      	lsls	r0, r0, #3
 80010ba:	4003      	ands	r3, r0
 80010bc:	4803      	ldr	r0, [pc, #12]	@ (80010cc <I2C_TransferConfig+0x30>)
 80010be:	4303      	orrs	r3, r0
 80010c0:	439a      	bics	r2, r3
 80010c2:	0013      	movs	r3, r2
 80010c4:	430b      	orrs	r3, r1
 80010c6:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80010c8:	bd10      	pop	{r4, pc}
 80010ca:	46c0      	nop			@ (mov r8, r8)
 80010cc:	03ff63ff 	.word	0x03ff63ff

080010d0 <I2C_IsErrorOccurred>:
{
 80010d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010d2:	46c6      	mov	lr, r8
 80010d4:	b500      	push	{lr}
 80010d6:	0004      	movs	r4, r0
 80010d8:	000d      	movs	r5, r1
 80010da:	0017      	movs	r7, r2
  uint32_t itflag   = hi2c->Instance->ISR;
 80010dc:	6801      	ldr	r1, [r0, #0]
 80010de:	698b      	ldr	r3, [r1, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80010e0:	2210      	movs	r2, #16
 80010e2:	0016      	movs	r6, r2
 80010e4:	401e      	ands	r6, r3
 80010e6:	421a      	tst	r2, r3
 80010e8:	d100      	bne.n	80010ec <I2C_IsErrorOccurred+0x1c>
 80010ea:	e075      	b.n	80011d8 <I2C_IsErrorOccurred+0x108>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80010ec:	2310      	movs	r3, #16
 80010ee:	61cb      	str	r3, [r1, #28]
  uint32_t error_code = 0;
 80010f0:	2300      	movs	r3, #0
 80010f2:	4698      	mov	r8, r3
  HAL_StatusTypeDef status = HAL_OK;
 80010f4:	2600      	movs	r6, #0
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80010f6:	6820      	ldr	r0, [r4, #0]
 80010f8:	6983      	ldr	r3, [r0, #24]
 80010fa:	069b      	lsls	r3, r3, #26
 80010fc:	d431      	bmi.n	8001162 <I2C_IsErrorOccurred+0x92>
 80010fe:	2e00      	cmp	r6, #0
 8001100:	d12f      	bne.n	8001162 <I2C_IsErrorOccurred+0x92>
      if (Timeout != HAL_MAX_DELAY)
 8001102:	1c6b      	adds	r3, r5, #1
 8001104:	d0f7      	beq.n	80010f6 <I2C_IsErrorOccurred+0x26>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001106:	f7ff fe81 	bl	8000e0c <HAL_GetTick>
 800110a:	1bc0      	subs	r0, r0, r7
 800110c:	42a8      	cmp	r0, r5
 800110e:	d801      	bhi.n	8001114 <I2C_IsErrorOccurred+0x44>
 8001110:	2d00      	cmp	r5, #0
 8001112:	d1f0      	bne.n	80010f6 <I2C_IsErrorOccurred+0x26>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001114:	6821      	ldr	r1, [r4, #0]
 8001116:	684b      	ldr	r3, [r1, #4]
 8001118:	2280      	movs	r2, #128	@ 0x80
 800111a:	01d2      	lsls	r2, r2, #7
 800111c:	4013      	ands	r3, r2
          tmp2 = hi2c->Mode;
 800111e:	2242      	movs	r2, #66	@ 0x42
 8001120:	5ca2      	ldrb	r2, [r4, r2]
 8001122:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001124:	6988      	ldr	r0, [r1, #24]
 8001126:	0400      	lsls	r0, r0, #16
 8001128:	d503      	bpl.n	8001132 <I2C_IsErrorOccurred+0x62>
 800112a:	2b00      	cmp	r3, #0
 800112c:	d101      	bne.n	8001132 <I2C_IsErrorOccurred+0x62>
              (tmp1 != I2C_CR2_STOP) && \
 800112e:	2a20      	cmp	r2, #32
 8001130:	d10e      	bne.n	8001150 <I2C_IsErrorOccurred+0x80>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001132:	6823      	ldr	r3, [r4, #0]
 8001134:	699b      	ldr	r3, [r3, #24]
 8001136:	069b      	lsls	r3, r3, #26
 8001138:	d4dd      	bmi.n	80010f6 <I2C_IsErrorOccurred+0x26>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800113a:	f7ff fe67 	bl	8000e0c <HAL_GetTick>
 800113e:	1bc0      	subs	r0, r0, r7
 8001140:	2819      	cmp	r0, #25
 8001142:	d9f6      	bls.n	8001132 <I2C_IsErrorOccurred+0x62>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001144:	2320      	movs	r3, #32
 8001146:	4642      	mov	r2, r8
 8001148:	431a      	orrs	r2, r3
 800114a:	4690      	mov	r8, r2
              status = HAL_ERROR;
 800114c:	2601      	movs	r6, #1
              break;
 800114e:	e7d2      	b.n	80010f6 <I2C_IsErrorOccurred+0x26>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001150:	684a      	ldr	r2, [r1, #4]
 8001152:	2380      	movs	r3, #128	@ 0x80
 8001154:	01db      	lsls	r3, r3, #7
 8001156:	4313      	orrs	r3, r2
 8001158:	604b      	str	r3, [r1, #4]
            tickstart = HAL_GetTick();
 800115a:	f7ff fe57 	bl	8000e0c <HAL_GetTick>
 800115e:	0007      	movs	r7, r0
 8001160:	e7e7      	b.n	8001132 <I2C_IsErrorOccurred+0x62>
    if (status == HAL_OK)
 8001162:	2e00      	cmp	r6, #0
 8001164:	d101      	bne.n	800116a <I2C_IsErrorOccurred+0x9a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001166:	2320      	movs	r3, #32
 8001168:	61c3      	str	r3, [r0, #28]
    error_code |= HAL_I2C_ERROR_AF;
 800116a:	2604      	movs	r6, #4
 800116c:	4643      	mov	r3, r8
 800116e:	4333      	orrs	r3, r6
 8001170:	001e      	movs	r6, r3
    status = HAL_ERROR;
 8001172:	2501      	movs	r5, #1
  itflag = hi2c->Instance->ISR;
 8001174:	6822      	ldr	r2, [r4, #0]
 8001176:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001178:	05d9      	lsls	r1, r3, #23
 800117a:	d504      	bpl.n	8001186 <I2C_IsErrorOccurred+0xb6>
    error_code |= HAL_I2C_ERROR_BERR;
 800117c:	2101      	movs	r1, #1
 800117e:	430e      	orrs	r6, r1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001180:	31ff      	adds	r1, #255	@ 0xff
 8001182:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 8001184:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001186:	055a      	lsls	r2, r3, #21
 8001188:	d506      	bpl.n	8001198 <I2C_IsErrorOccurred+0xc8>
    error_code |= HAL_I2C_ERROR_OVR;
 800118a:	2208      	movs	r2, #8
 800118c:	4316      	orrs	r6, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800118e:	6822      	ldr	r2, [r4, #0]
 8001190:	2180      	movs	r1, #128	@ 0x80
 8001192:	00c9      	lsls	r1, r1, #3
 8001194:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 8001196:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001198:	059b      	lsls	r3, r3, #22
 800119a:	d51f      	bpl.n	80011dc <I2C_IsErrorOccurred+0x10c>
    error_code |= HAL_I2C_ERROR_ARLO;
 800119c:	2302      	movs	r3, #2
 800119e:	431e      	orrs	r6, r3
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80011a0:	6823      	ldr	r3, [r4, #0]
 80011a2:	2280      	movs	r2, #128	@ 0x80
 80011a4:	0092      	lsls	r2, r2, #2
 80011a6:	61da      	str	r2, [r3, #28]
    status = HAL_ERROR;
 80011a8:	2501      	movs	r5, #1
    I2C_Flush_TXDR(hi2c);
 80011aa:	0020      	movs	r0, r4
 80011ac:	f7ff ff66 	bl	800107c <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80011b0:	6822      	ldr	r2, [r4, #0]
 80011b2:	6853      	ldr	r3, [r2, #4]
 80011b4:	490b      	ldr	r1, [pc, #44]	@ (80011e4 <I2C_IsErrorOccurred+0x114>)
 80011b6:	400b      	ands	r3, r1
 80011b8:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 80011ba:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80011bc:	4333      	orrs	r3, r6
 80011be:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80011c0:	2341      	movs	r3, #65	@ 0x41
 80011c2:	2220      	movs	r2, #32
 80011c4:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80011c6:	2300      	movs	r3, #0
 80011c8:	3222      	adds	r2, #34	@ 0x22
 80011ca:	54a3      	strb	r3, [r4, r2]
    __HAL_UNLOCK(hi2c);
 80011cc:	3a02      	subs	r2, #2
 80011ce:	54a3      	strb	r3, [r4, r2]
}
 80011d0:	0028      	movs	r0, r5
 80011d2:	bc80      	pop	{r7}
 80011d4:	46b8      	mov	r8, r7
 80011d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  HAL_StatusTypeDef status = HAL_OK;
 80011d8:	2500      	movs	r5, #0
 80011da:	e7cb      	b.n	8001174 <I2C_IsErrorOccurred+0xa4>
  if (status != HAL_OK)
 80011dc:	2d00      	cmp	r5, #0
 80011de:	d0f7      	beq.n	80011d0 <I2C_IsErrorOccurred+0x100>
 80011e0:	e7e3      	b.n	80011aa <I2C_IsErrorOccurred+0xda>
 80011e2:	46c0      	nop			@ (mov r8, r8)
 80011e4:	fe00e800 	.word	0xfe00e800

080011e8 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80011e8:	b570      	push	{r4, r5, r6, lr}
 80011ea:	0004      	movs	r4, r0
 80011ec:	000d      	movs	r5, r1
 80011ee:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80011f0:	6823      	ldr	r3, [r4, #0]
 80011f2:	699b      	ldr	r3, [r3, #24]
 80011f4:	079b      	lsls	r3, r3, #30
 80011f6:	d420      	bmi.n	800123a <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80011f8:	0032      	movs	r2, r6
 80011fa:	0029      	movs	r1, r5
 80011fc:	0020      	movs	r0, r4
 80011fe:	f7ff ff67 	bl	80010d0 <I2C_IsErrorOccurred>
 8001202:	2800      	cmp	r0, #0
 8001204:	d11b      	bne.n	800123e <I2C_WaitOnTXISFlagUntilTimeout+0x56>
    if (Timeout != HAL_MAX_DELAY)
 8001206:	1c6b      	adds	r3, r5, #1
 8001208:	d0f2      	beq.n	80011f0 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800120a:	f7ff fdff 	bl	8000e0c <HAL_GetTick>
 800120e:	1b80      	subs	r0, r0, r6
 8001210:	42a8      	cmp	r0, r5
 8001212:	d801      	bhi.n	8001218 <I2C_WaitOnTXISFlagUntilTimeout+0x30>
 8001214:	2d00      	cmp	r5, #0
 8001216:	d1eb      	bne.n	80011f0 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001218:	6823      	ldr	r3, [r4, #0]
 800121a:	699b      	ldr	r3, [r3, #24]
 800121c:	079b      	lsls	r3, r3, #30
 800121e:	d4e7      	bmi.n	80011f0 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001220:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8001222:	2220      	movs	r2, #32
 8001224:	4313      	orrs	r3, r2
 8001226:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001228:	2341      	movs	r3, #65	@ 0x41
 800122a:	54e2      	strb	r2, [r4, r3]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800122c:	2300      	movs	r3, #0
 800122e:	3222      	adds	r2, #34	@ 0x22
 8001230:	54a3      	strb	r3, [r4, r2]
          __HAL_UNLOCK(hi2c);
 8001232:	3a02      	subs	r2, #2
 8001234:	54a3      	strb	r3, [r4, r2]
          return HAL_ERROR;
 8001236:	2001      	movs	r0, #1
 8001238:	e000      	b.n	800123c <I2C_WaitOnTXISFlagUntilTimeout+0x54>
  return HAL_OK;
 800123a:	2000      	movs	r0, #0
}
 800123c:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800123e:	2001      	movs	r0, #1
 8001240:	e7fc      	b.n	800123c <I2C_WaitOnTXISFlagUntilTimeout+0x54>

08001242 <I2C_WaitOnFlagUntilTimeout>:
{
 8001242:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001244:	46ce      	mov	lr, r9
 8001246:	b500      	push	{lr}
 8001248:	b082      	sub	sp, #8
 800124a:	0007      	movs	r7, r0
 800124c:	000d      	movs	r5, r1
 800124e:	0016      	movs	r6, r2
 8001250:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	699c      	ldr	r4, [r3, #24]
 8001256:	402c      	ands	r4, r5
 8001258:	1b64      	subs	r4, r4, r5
 800125a:	4263      	negs	r3, r4
 800125c:	415c      	adcs	r4, r3
 800125e:	9601      	str	r6, [sp, #4]
 8001260:	42b4      	cmp	r4, r6
 8001262:	d121      	bne.n	80012a8 <I2C_WaitOnFlagUntilTimeout+0x66>
    if (Timeout != HAL_MAX_DELAY)
 8001264:	464b      	mov	r3, r9
 8001266:	3301      	adds	r3, #1
 8001268:	d0f3      	beq.n	8001252 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800126a:	f7ff fdcf 	bl	8000e0c <HAL_GetTick>
 800126e:	9b08      	ldr	r3, [sp, #32]
 8001270:	1ac0      	subs	r0, r0, r3
 8001272:	4548      	cmp	r0, r9
 8001274:	d802      	bhi.n	800127c <I2C_WaitOnFlagUntilTimeout+0x3a>
 8001276:	464b      	mov	r3, r9
 8001278:	2b00      	cmp	r3, #0
 800127a:	d1ea      	bne.n	8001252 <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	699b      	ldr	r3, [r3, #24]
 8001280:	402b      	ands	r3, r5
 8001282:	1b5b      	subs	r3, r3, r5
 8001284:	425a      	negs	r2, r3
 8001286:	4153      	adcs	r3, r2
 8001288:	9a01      	ldr	r2, [sp, #4]
 800128a:	4293      	cmp	r3, r2
 800128c:	d1e1      	bne.n	8001252 <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800128e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001290:	2220      	movs	r2, #32
 8001292:	4313      	orrs	r3, r2
 8001294:	647b      	str	r3, [r7, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001296:	2341      	movs	r3, #65	@ 0x41
 8001298:	54fa      	strb	r2, [r7, r3]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800129a:	2300      	movs	r3, #0
 800129c:	3222      	adds	r2, #34	@ 0x22
 800129e:	54bb      	strb	r3, [r7, r2]
          __HAL_UNLOCK(hi2c);
 80012a0:	3a02      	subs	r2, #2
 80012a2:	54bb      	strb	r3, [r7, r2]
          return HAL_ERROR;
 80012a4:	2001      	movs	r0, #1
 80012a6:	e000      	b.n	80012aa <I2C_WaitOnFlagUntilTimeout+0x68>
  return HAL_OK;
 80012a8:	2000      	movs	r0, #0
}
 80012aa:	b002      	add	sp, #8
 80012ac:	bc80      	pop	{r7}
 80012ae:	46b9      	mov	r9, r7
 80012b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080012b2 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80012b2:	b570      	push	{r4, r5, r6, lr}
 80012b4:	0004      	movs	r4, r0
 80012b6:	000d      	movs	r5, r1
 80012b8:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80012ba:	e003      	b.n	80012c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x12>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80012bc:	6823      	ldr	r3, [r4, #0]
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	069b      	lsls	r3, r3, #26
 80012c2:	d512      	bpl.n	80012ea <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80012c4:	6823      	ldr	r3, [r4, #0]
 80012c6:	699b      	ldr	r3, [r3, #24]
 80012c8:	069b      	lsls	r3, r3, #26
 80012ca:	d41b      	bmi.n	8001304 <I2C_WaitOnSTOPFlagUntilTimeout+0x52>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80012cc:	0032      	movs	r2, r6
 80012ce:	0029      	movs	r1, r5
 80012d0:	0020      	movs	r0, r4
 80012d2:	f7ff fefd 	bl	80010d0 <I2C_IsErrorOccurred>
 80012d6:	2800      	cmp	r0, #0
 80012d8:	d116      	bne.n	8001308 <I2C_WaitOnSTOPFlagUntilTimeout+0x56>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80012da:	f7ff fd97 	bl	8000e0c <HAL_GetTick>
 80012de:	1b80      	subs	r0, r0, r6
 80012e0:	42a8      	cmp	r0, r5
 80012e2:	d8eb      	bhi.n	80012bc <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
 80012e4:	2d00      	cmp	r5, #0
 80012e6:	d1ed      	bne.n	80012c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x12>
 80012e8:	e7e8      	b.n	80012bc <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80012ea:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80012ec:	2220      	movs	r2, #32
 80012ee:	4313      	orrs	r3, r2
 80012f0:	6463      	str	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80012f2:	2341      	movs	r3, #65	@ 0x41
 80012f4:	54e2      	strb	r2, [r4, r3]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80012f6:	2300      	movs	r3, #0
 80012f8:	3222      	adds	r2, #34	@ 0x22
 80012fa:	54a3      	strb	r3, [r4, r2]
        __HAL_UNLOCK(hi2c);
 80012fc:	3a02      	subs	r2, #2
 80012fe:	54a3      	strb	r3, [r4, r2]
        return HAL_ERROR;
 8001300:	2001      	movs	r0, #1
 8001302:	e000      	b.n	8001306 <I2C_WaitOnSTOPFlagUntilTimeout+0x54>
  return HAL_OK;
 8001304:	2000      	movs	r0, #0
}
 8001306:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001308:	2001      	movs	r0, #1
 800130a:	e7fc      	b.n	8001306 <I2C_WaitOnSTOPFlagUntilTimeout+0x54>

0800130c <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 800130c:	b570      	push	{r4, r5, r6, lr}
 800130e:	0004      	movs	r4, r0
 8001310:	000d      	movs	r5, r1
 8001312:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001314:	e024      	b.n	8001360 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001316:	6993      	ldr	r3, [r2, #24]
 8001318:	075b      	lsls	r3, r3, #29
 800131a:	d502      	bpl.n	8001322 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
 800131c:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800131e:	2b00      	cmp	r3, #0
 8001320:	d141      	bne.n	80013a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001322:	6993      	ldr	r3, [r2, #24]
 8001324:	06db      	lsls	r3, r3, #27
 8001326:	d514      	bpl.n	8001352 <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001328:	2310      	movs	r3, #16
 800132a:	61d3      	str	r3, [r2, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800132c:	3b0c      	subs	r3, #12
 800132e:	6463      	str	r3, [r4, #68]	@ 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001330:	6823      	ldr	r3, [r4, #0]
 8001332:	2220      	movs	r2, #32
 8001334:	61da      	str	r2, [r3, #28]
        I2C_RESET_CR2(hi2c);
 8001336:	6821      	ldr	r1, [r4, #0]
 8001338:	684b      	ldr	r3, [r1, #4]
 800133a:	481c      	ldr	r0, [pc, #112]	@ (80013ac <I2C_WaitOnRXNEFlagUntilTimeout+0xa0>)
 800133c:	4003      	ands	r3, r0
 800133e:	604b      	str	r3, [r1, #4]
        hi2c->State = HAL_I2C_STATE_READY;
 8001340:	2341      	movs	r3, #65	@ 0x41
 8001342:	54e2      	strb	r2, [r4, r3]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001344:	2300      	movs	r3, #0
 8001346:	3222      	adds	r2, #34	@ 0x22
 8001348:	54a3      	strb	r3, [r4, r2]
        __HAL_UNLOCK(hi2c);
 800134a:	3a02      	subs	r2, #2
 800134c:	54a3      	strb	r3, [r4, r2]
        return HAL_ERROR;
 800134e:	2001      	movs	r0, #1
 8001350:	e029      	b.n	80013a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001352:	2300      	movs	r3, #0
 8001354:	6463      	str	r3, [r4, #68]	@ 0x44
 8001356:	e7eb      	b.n	8001330 <I2C_WaitOnRXNEFlagUntilTimeout+0x24>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8001358:	6823      	ldr	r3, [r4, #0]
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	075b      	lsls	r3, r3, #29
 800135e:	d516      	bpl.n	800138e <I2C_WaitOnRXNEFlagUntilTimeout+0x82>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001360:	6823      	ldr	r3, [r4, #0]
 8001362:	699b      	ldr	r3, [r3, #24]
 8001364:	075b      	lsls	r3, r3, #29
 8001366:	d41d      	bmi.n	80013a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x98>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001368:	0032      	movs	r2, r6
 800136a:	0029      	movs	r1, r5
 800136c:	0020      	movs	r0, r4
 800136e:	f7ff feaf 	bl	80010d0 <I2C_IsErrorOccurred>
 8001372:	2800      	cmp	r0, #0
 8001374:	d118      	bne.n	80013a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x9c>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001376:	6822      	ldr	r2, [r4, #0]
 8001378:	6993      	ldr	r3, [r2, #24]
 800137a:	069b      	lsls	r3, r3, #26
 800137c:	d4cb      	bmi.n	8001316 <I2C_WaitOnRXNEFlagUntilTimeout+0xa>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800137e:	f7ff fd45 	bl	8000e0c <HAL_GetTick>
 8001382:	1b80      	subs	r0, r0, r6
 8001384:	42a8      	cmp	r0, r5
 8001386:	d8e7      	bhi.n	8001358 <I2C_WaitOnRXNEFlagUntilTimeout+0x4c>
 8001388:	2d00      	cmp	r5, #0
 800138a:	d1e9      	bne.n	8001360 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 800138c:	e7e4      	b.n	8001358 <I2C_WaitOnRXNEFlagUntilTimeout+0x4c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800138e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8001390:	2220      	movs	r2, #32
 8001392:	4313      	orrs	r3, r2
 8001394:	6463      	str	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001396:	2341      	movs	r3, #65	@ 0x41
 8001398:	54e2      	strb	r2, [r4, r3]
        __HAL_UNLOCK(hi2c);
 800139a:	3b01      	subs	r3, #1
 800139c:	2200      	movs	r2, #0
 800139e:	54e2      	strb	r2, [r4, r3]
        return HAL_ERROR;
 80013a0:	2001      	movs	r0, #1
 80013a2:	e000      	b.n	80013a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
  return HAL_OK;
 80013a4:	2000      	movs	r0, #0
}
 80013a6:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80013a8:	2001      	movs	r0, #1
 80013aa:	e7fc      	b.n	80013a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80013ac:	fe00e800 	.word	0xfe00e800

080013b0 <HAL_I2C_Init>:
{
 80013b0:	b510      	push	{r4, lr}
 80013b2:	1e04      	subs	r4, r0, #0
  if (hi2c == NULL)
 80013b4:	d059      	beq.n	800146a <HAL_I2C_Init+0xba>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013b6:	2341      	movs	r3, #65	@ 0x41
 80013b8:	5cc3      	ldrb	r3, [r0, r3]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d043      	beq.n	8001446 <HAL_I2C_Init+0x96>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80013be:	2341      	movs	r3, #65	@ 0x41
 80013c0:	2224      	movs	r2, #36	@ 0x24
 80013c2:	54e2      	strb	r2, [r4, r3]
  __HAL_I2C_DISABLE(hi2c);
 80013c4:	6822      	ldr	r2, [r4, #0]
 80013c6:	6813      	ldr	r3, [r2, #0]
 80013c8:	2101      	movs	r1, #1
 80013ca:	438b      	bics	r3, r1
 80013cc:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80013ce:	6863      	ldr	r3, [r4, #4]
 80013d0:	6822      	ldr	r2, [r4, #0]
 80013d2:	4927      	ldr	r1, [pc, #156]	@ (8001470 <HAL_I2C_Init+0xc0>)
 80013d4:	400b      	ands	r3, r1
 80013d6:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80013d8:	6822      	ldr	r2, [r4, #0]
 80013da:	6893      	ldr	r3, [r2, #8]
 80013dc:	4925      	ldr	r1, [pc, #148]	@ (8001474 <HAL_I2C_Init+0xc4>)
 80013de:	400b      	ands	r3, r1
 80013e0:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80013e2:	68e3      	ldr	r3, [r4, #12]
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d034      	beq.n	8001452 <HAL_I2C_Init+0xa2>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80013e8:	68a1      	ldr	r1, [r4, #8]
 80013ea:	6822      	ldr	r2, [r4, #0]
 80013ec:	2384      	movs	r3, #132	@ 0x84
 80013ee:	021b      	lsls	r3, r3, #8
 80013f0:	430b      	orrs	r3, r1
 80013f2:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80013f4:	68e3      	ldr	r3, [r4, #12]
 80013f6:	2b02      	cmp	r3, #2
 80013f8:	d032      	beq.n	8001460 <HAL_I2C_Init+0xb0>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80013fa:	6822      	ldr	r2, [r4, #0]
 80013fc:	6851      	ldr	r1, [r2, #4]
 80013fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001478 <HAL_I2C_Init+0xc8>)
 8001400:	430b      	orrs	r3, r1
 8001402:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001404:	6822      	ldr	r2, [r4, #0]
 8001406:	68d3      	ldr	r3, [r2, #12]
 8001408:	491a      	ldr	r1, [pc, #104]	@ (8001474 <HAL_I2C_Init+0xc4>)
 800140a:	400b      	ands	r3, r1
 800140c:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800140e:	6923      	ldr	r3, [r4, #16]
 8001410:	6962      	ldr	r2, [r4, #20]
 8001412:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001414:	69a2      	ldr	r2, [r4, #24]
 8001416:	0212      	lsls	r2, r2, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001418:	6821      	ldr	r1, [r4, #0]
 800141a:	4313      	orrs	r3, r2
 800141c:	60cb      	str	r3, [r1, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800141e:	69e3      	ldr	r3, [r4, #28]
 8001420:	6a21      	ldr	r1, [r4, #32]
 8001422:	6822      	ldr	r2, [r4, #0]
 8001424:	430b      	orrs	r3, r1
 8001426:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8001428:	6822      	ldr	r2, [r4, #0]
 800142a:	6813      	ldr	r3, [r2, #0]
 800142c:	2101      	movs	r1, #1
 800142e:	430b      	orrs	r3, r1
 8001430:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001432:	2300      	movs	r3, #0
 8001434:	6463      	str	r3, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001436:	2241      	movs	r2, #65	@ 0x41
 8001438:	311f      	adds	r1, #31
 800143a:	54a1      	strb	r1, [r4, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800143c:	6323      	str	r3, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800143e:	3201      	adds	r2, #1
 8001440:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 8001442:	2000      	movs	r0, #0
}
 8001444:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8001446:	3340      	adds	r3, #64	@ 0x40
 8001448:	2200      	movs	r2, #0
 800144a:	54c2      	strb	r2, [r0, r3]
    HAL_I2C_MspInit(hi2c);
 800144c:	f7ff fa88 	bl	8000960 <HAL_I2C_MspInit>
 8001450:	e7b5      	b.n	80013be <HAL_I2C_Init+0xe>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001452:	68a1      	ldr	r1, [r4, #8]
 8001454:	6822      	ldr	r2, [r4, #0]
 8001456:	2380      	movs	r3, #128	@ 0x80
 8001458:	021b      	lsls	r3, r3, #8
 800145a:	430b      	orrs	r3, r1
 800145c:	6093      	str	r3, [r2, #8]
 800145e:	e7c9      	b.n	80013f4 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001460:	6823      	ldr	r3, [r4, #0]
 8001462:	2280      	movs	r2, #128	@ 0x80
 8001464:	0112      	lsls	r2, r2, #4
 8001466:	605a      	str	r2, [r3, #4]
 8001468:	e7c7      	b.n	80013fa <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 800146a:	2001      	movs	r0, #1
 800146c:	e7ea      	b.n	8001444 <HAL_I2C_Init+0x94>
 800146e:	46c0      	nop			@ (mov r8, r8)
 8001470:	f0ffffff 	.word	0xf0ffffff
 8001474:	ffff7fff 	.word	0xffff7fff
 8001478:	02008000 	.word	0x02008000

0800147c <HAL_I2C_Master_Transmit>:
{
 800147c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800147e:	b085      	sub	sp, #20
 8001480:	0004      	movs	r4, r0
 8001482:	000f      	movs	r7, r1
 8001484:	9202      	str	r2, [sp, #8]
 8001486:	9303      	str	r3, [sp, #12]
 8001488:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 800148a:	2341      	movs	r3, #65	@ 0x41
 800148c:	5cc3      	ldrb	r3, [r0, r3]
 800148e:	2b20      	cmp	r3, #32
 8001490:	d000      	beq.n	8001494 <HAL_I2C_Master_Transmit+0x18>
 8001492:	e09b      	b.n	80015cc <HAL_I2C_Master_Transmit+0x150>
    __HAL_LOCK(hi2c);
 8001494:	3320      	adds	r3, #32
 8001496:	5cc3      	ldrb	r3, [r0, r3]
 8001498:	2b01      	cmp	r3, #1
 800149a:	d100      	bne.n	800149e <HAL_I2C_Master_Transmit+0x22>
 800149c:	e099      	b.n	80015d2 <HAL_I2C_Master_Transmit+0x156>
 800149e:	2340      	movs	r3, #64	@ 0x40
 80014a0:	2201      	movs	r2, #1
 80014a2:	54c2      	strb	r2, [r0, r3]
    tickstart = HAL_GetTick();
 80014a4:	f7ff fcb2 	bl	8000e0c <HAL_GetTick>
 80014a8:	0006      	movs	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80014aa:	2180      	movs	r1, #128	@ 0x80
 80014ac:	9000      	str	r0, [sp, #0]
 80014ae:	2319      	movs	r3, #25
 80014b0:	2201      	movs	r2, #1
 80014b2:	0209      	lsls	r1, r1, #8
 80014b4:	0020      	movs	r0, r4
 80014b6:	f7ff fec4 	bl	8001242 <I2C_WaitOnFlagUntilTimeout>
 80014ba:	2800      	cmp	r0, #0
 80014bc:	d000      	beq.n	80014c0 <HAL_I2C_Master_Transmit+0x44>
 80014be:	e08a      	b.n	80015d6 <HAL_I2C_Master_Transmit+0x15a>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80014c0:	2341      	movs	r3, #65	@ 0x41
 80014c2:	2221      	movs	r2, #33	@ 0x21
 80014c4:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80014c6:	3301      	adds	r3, #1
 80014c8:	3a11      	subs	r2, #17
 80014ca:	54e2      	strb	r2, [r4, r3]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014cc:	2300      	movs	r3, #0
 80014ce:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
 80014d0:	9a02      	ldr	r2, [sp, #8]
 80014d2:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 80014d4:	9a03      	ldr	r2, [sp, #12]
 80014d6:	8562      	strh	r2, [r4, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80014d8:	6363      	str	r3, [r4, #52]	@ 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80014da:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80014dc:	b29b      	uxth	r3, r3
 80014de:	2bff      	cmp	r3, #255	@ 0xff
 80014e0:	d90b      	bls.n	80014fa <HAL_I2C_Master_Transmit+0x7e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80014e2:	23ff      	movs	r3, #255	@ 0xff
 80014e4:	8523      	strh	r3, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80014e6:	3b7f      	subs	r3, #127	@ 0x7f
 80014e8:	4a3f      	ldr	r2, [pc, #252]	@ (80015e8 <HAL_I2C_Master_Transmit+0x16c>)
 80014ea:	9200      	str	r2, [sp, #0]
 80014ec:	045b      	lsls	r3, r3, #17
 80014ee:	22ff      	movs	r2, #255	@ 0xff
 80014f0:	0039      	movs	r1, r7
 80014f2:	0020      	movs	r0, r4
 80014f4:	f7ff fdd2 	bl	800109c <I2C_TransferConfig>
 80014f8:	e018      	b.n	800152c <HAL_I2C_Master_Transmit+0xb0>
      hi2c->XferSize = hi2c->XferCount;
 80014fa:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 80014fc:	b292      	uxth	r2, r2
 80014fe:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001500:	2380      	movs	r3, #128	@ 0x80
 8001502:	b2d2      	uxtb	r2, r2
 8001504:	4938      	ldr	r1, [pc, #224]	@ (80015e8 <HAL_I2C_Master_Transmit+0x16c>)
 8001506:	9100      	str	r1, [sp, #0]
 8001508:	049b      	lsls	r3, r3, #18
 800150a:	0039      	movs	r1, r7
 800150c:	0020      	movs	r0, r4
 800150e:	f7ff fdc5 	bl	800109c <I2C_TransferConfig>
 8001512:	e00b      	b.n	800152c <HAL_I2C_Master_Transmit+0xb0>
          hi2c->XferSize = hi2c->XferCount;
 8001514:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8001516:	b292      	uxth	r2, r2
 8001518:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800151a:	2380      	movs	r3, #128	@ 0x80
 800151c:	b2d2      	uxtb	r2, r2
 800151e:	2100      	movs	r1, #0
 8001520:	9100      	str	r1, [sp, #0]
 8001522:	049b      	lsls	r3, r3, #18
 8001524:	0039      	movs	r1, r7
 8001526:	0020      	movs	r0, r4
 8001528:	f7ff fdb8 	bl	800109c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800152c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800152e:	b29b      	uxth	r3, r3
 8001530:	2b00      	cmp	r3, #0
 8001532:	d034      	beq.n	800159e <HAL_I2C_Master_Transmit+0x122>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001534:	0032      	movs	r2, r6
 8001536:	0029      	movs	r1, r5
 8001538:	0020      	movs	r0, r4
 800153a:	f7ff fe55 	bl	80011e8 <I2C_WaitOnTXISFlagUntilTimeout>
 800153e:	2800      	cmp	r0, #0
 8001540:	d14b      	bne.n	80015da <HAL_I2C_Master_Transmit+0x15e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001542:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8001544:	6823      	ldr	r3, [r4, #0]
 8001546:	7812      	ldrb	r2, [r2, #0]
 8001548:	629a      	str	r2, [r3, #40]	@ 0x28
      hi2c->pBuffPtr++;
 800154a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800154c:	3301      	adds	r3, #1
 800154e:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8001550:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001552:	3b01      	subs	r3, #1
 8001554:	b29b      	uxth	r3, r3
 8001556:	8563      	strh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8001558:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800155a:	3b01      	subs	r3, #1
 800155c:	b29b      	uxth	r3, r3
 800155e:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001560:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8001562:	b292      	uxth	r2, r2
 8001564:	2a00      	cmp	r2, #0
 8001566:	d0e1      	beq.n	800152c <HAL_I2C_Master_Transmit+0xb0>
 8001568:	2b00      	cmp	r3, #0
 800156a:	d1df      	bne.n	800152c <HAL_I2C_Master_Transmit+0xb0>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800156c:	9600      	str	r6, [sp, #0]
 800156e:	002b      	movs	r3, r5
 8001570:	2200      	movs	r2, #0
 8001572:	2180      	movs	r1, #128	@ 0x80
 8001574:	0020      	movs	r0, r4
 8001576:	f7ff fe64 	bl	8001242 <I2C_WaitOnFlagUntilTimeout>
 800157a:	2800      	cmp	r0, #0
 800157c:	d12f      	bne.n	80015de <HAL_I2C_Master_Transmit+0x162>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800157e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001580:	b29b      	uxth	r3, r3
 8001582:	2bff      	cmp	r3, #255	@ 0xff
 8001584:	d9c6      	bls.n	8001514 <HAL_I2C_Master_Transmit+0x98>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001586:	23ff      	movs	r3, #255	@ 0xff
 8001588:	8523      	strh	r3, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800158a:	3b7f      	subs	r3, #127	@ 0x7f
 800158c:	2200      	movs	r2, #0
 800158e:	9200      	str	r2, [sp, #0]
 8001590:	045b      	lsls	r3, r3, #17
 8001592:	32ff      	adds	r2, #255	@ 0xff
 8001594:	0039      	movs	r1, r7
 8001596:	0020      	movs	r0, r4
 8001598:	f7ff fd80 	bl	800109c <I2C_TransferConfig>
 800159c:	e7c6      	b.n	800152c <HAL_I2C_Master_Transmit+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800159e:	0032      	movs	r2, r6
 80015a0:	0029      	movs	r1, r5
 80015a2:	0020      	movs	r0, r4
 80015a4:	f7ff fe85 	bl	80012b2 <I2C_WaitOnSTOPFlagUntilTimeout>
 80015a8:	2800      	cmp	r0, #0
 80015aa:	d11a      	bne.n	80015e2 <HAL_I2C_Master_Transmit+0x166>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80015ac:	6823      	ldr	r3, [r4, #0]
 80015ae:	2220      	movs	r2, #32
 80015b0:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80015b2:	6821      	ldr	r1, [r4, #0]
 80015b4:	684b      	ldr	r3, [r1, #4]
 80015b6:	4d0d      	ldr	r5, [pc, #52]	@ (80015ec <HAL_I2C_Master_Transmit+0x170>)
 80015b8:	402b      	ands	r3, r5
 80015ba:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80015bc:	2341      	movs	r3, #65	@ 0x41
 80015be:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80015c0:	2300      	movs	r3, #0
 80015c2:	3222      	adds	r2, #34	@ 0x22
 80015c4:	54a3      	strb	r3, [r4, r2]
    __HAL_UNLOCK(hi2c);
 80015c6:	3a02      	subs	r2, #2
 80015c8:	54a3      	strb	r3, [r4, r2]
    return HAL_OK;
 80015ca:	e000      	b.n	80015ce <HAL_I2C_Master_Transmit+0x152>
    return HAL_BUSY;
 80015cc:	2002      	movs	r0, #2
}
 80015ce:	b005      	add	sp, #20
 80015d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 80015d2:	2002      	movs	r0, #2
 80015d4:	e7fb      	b.n	80015ce <HAL_I2C_Master_Transmit+0x152>
      return HAL_ERROR;
 80015d6:	2001      	movs	r0, #1
 80015d8:	e7f9      	b.n	80015ce <HAL_I2C_Master_Transmit+0x152>
        return HAL_ERROR;
 80015da:	2001      	movs	r0, #1
 80015dc:	e7f7      	b.n	80015ce <HAL_I2C_Master_Transmit+0x152>
          return HAL_ERROR;
 80015de:	2001      	movs	r0, #1
 80015e0:	e7f5      	b.n	80015ce <HAL_I2C_Master_Transmit+0x152>
      return HAL_ERROR;
 80015e2:	2001      	movs	r0, #1
 80015e4:	e7f3      	b.n	80015ce <HAL_I2C_Master_Transmit+0x152>
 80015e6:	46c0      	nop			@ (mov r8, r8)
 80015e8:	80002000 	.word	0x80002000
 80015ec:	fe00e800 	.word	0xfe00e800

080015f0 <HAL_I2C_Master_Receive>:
{
 80015f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015f2:	b085      	sub	sp, #20
 80015f4:	0004      	movs	r4, r0
 80015f6:	000f      	movs	r7, r1
 80015f8:	9202      	str	r2, [sp, #8]
 80015fa:	9303      	str	r3, [sp, #12]
 80015fc:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 80015fe:	2341      	movs	r3, #65	@ 0x41
 8001600:	5cc3      	ldrb	r3, [r0, r3]
 8001602:	2b20      	cmp	r3, #32
 8001604:	d000      	beq.n	8001608 <HAL_I2C_Master_Receive+0x18>
 8001606:	e09b      	b.n	8001740 <HAL_I2C_Master_Receive+0x150>
    __HAL_LOCK(hi2c);
 8001608:	3320      	adds	r3, #32
 800160a:	5cc3      	ldrb	r3, [r0, r3]
 800160c:	2b01      	cmp	r3, #1
 800160e:	d100      	bne.n	8001612 <HAL_I2C_Master_Receive+0x22>
 8001610:	e099      	b.n	8001746 <HAL_I2C_Master_Receive+0x156>
 8001612:	2340      	movs	r3, #64	@ 0x40
 8001614:	2201      	movs	r2, #1
 8001616:	54c2      	strb	r2, [r0, r3]
    tickstart = HAL_GetTick();
 8001618:	f7ff fbf8 	bl	8000e0c <HAL_GetTick>
 800161c:	0006      	movs	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800161e:	2180      	movs	r1, #128	@ 0x80
 8001620:	9000      	str	r0, [sp, #0]
 8001622:	2319      	movs	r3, #25
 8001624:	2201      	movs	r2, #1
 8001626:	0209      	lsls	r1, r1, #8
 8001628:	0020      	movs	r0, r4
 800162a:	f7ff fe0a 	bl	8001242 <I2C_WaitOnFlagUntilTimeout>
 800162e:	2800      	cmp	r0, #0
 8001630:	d000      	beq.n	8001634 <HAL_I2C_Master_Receive+0x44>
 8001632:	e08a      	b.n	800174a <HAL_I2C_Master_Receive+0x15a>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001634:	2341      	movs	r3, #65	@ 0x41
 8001636:	2222      	movs	r2, #34	@ 0x22
 8001638:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800163a:	3301      	adds	r3, #1
 800163c:	3a12      	subs	r2, #18
 800163e:	54e2      	strb	r2, [r4, r3]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001640:	2300      	movs	r3, #0
 8001642:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
 8001644:	9a02      	ldr	r2, [sp, #8]
 8001646:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001648:	9a03      	ldr	r2, [sp, #12]
 800164a:	8562      	strh	r2, [r4, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800164c:	6363      	str	r3, [r4, #52]	@ 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800164e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001650:	b29b      	uxth	r3, r3
 8001652:	2bff      	cmp	r3, #255	@ 0xff
 8001654:	d90b      	bls.n	800166e <HAL_I2C_Master_Receive+0x7e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001656:	23ff      	movs	r3, #255	@ 0xff
 8001658:	8523      	strh	r3, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800165a:	3b7f      	subs	r3, #127	@ 0x7f
 800165c:	4a3f      	ldr	r2, [pc, #252]	@ (800175c <HAL_I2C_Master_Receive+0x16c>)
 800165e:	9200      	str	r2, [sp, #0]
 8001660:	045b      	lsls	r3, r3, #17
 8001662:	22ff      	movs	r2, #255	@ 0xff
 8001664:	0039      	movs	r1, r7
 8001666:	0020      	movs	r0, r4
 8001668:	f7ff fd18 	bl	800109c <I2C_TransferConfig>
 800166c:	e018      	b.n	80016a0 <HAL_I2C_Master_Receive+0xb0>
      hi2c->XferSize = hi2c->XferCount;
 800166e:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8001670:	b292      	uxth	r2, r2
 8001672:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001674:	2380      	movs	r3, #128	@ 0x80
 8001676:	b2d2      	uxtb	r2, r2
 8001678:	4938      	ldr	r1, [pc, #224]	@ (800175c <HAL_I2C_Master_Receive+0x16c>)
 800167a:	9100      	str	r1, [sp, #0]
 800167c:	049b      	lsls	r3, r3, #18
 800167e:	0039      	movs	r1, r7
 8001680:	0020      	movs	r0, r4
 8001682:	f7ff fd0b 	bl	800109c <I2C_TransferConfig>
 8001686:	e00b      	b.n	80016a0 <HAL_I2C_Master_Receive+0xb0>
          hi2c->XferSize = hi2c->XferCount;
 8001688:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800168a:	b292      	uxth	r2, r2
 800168c:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800168e:	2380      	movs	r3, #128	@ 0x80
 8001690:	b2d2      	uxtb	r2, r2
 8001692:	2100      	movs	r1, #0
 8001694:	9100      	str	r1, [sp, #0]
 8001696:	049b      	lsls	r3, r3, #18
 8001698:	0039      	movs	r1, r7
 800169a:	0020      	movs	r0, r4
 800169c:	f7ff fcfe 	bl	800109c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80016a0:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d034      	beq.n	8001712 <HAL_I2C_Master_Receive+0x122>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016a8:	0032      	movs	r2, r6
 80016aa:	0029      	movs	r1, r5
 80016ac:	0020      	movs	r0, r4
 80016ae:	f7ff fe2d 	bl	800130c <I2C_WaitOnRXNEFlagUntilTimeout>
 80016b2:	2800      	cmp	r0, #0
 80016b4:	d14b      	bne.n	800174e <HAL_I2C_Master_Receive+0x15e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80016b6:	6823      	ldr	r3, [r4, #0]
 80016b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80016ba:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80016bc:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80016be:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80016c0:	3301      	adds	r3, #1
 80016c2:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 80016c4:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80016c6:	3b01      	subs	r3, #1
 80016c8:	b29b      	uxth	r3, r3
 80016ca:	8523      	strh	r3, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 80016cc:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 80016ce:	3a01      	subs	r2, #1
 80016d0:	b292      	uxth	r2, r2
 80016d2:	8562      	strh	r2, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80016d4:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 80016d6:	b292      	uxth	r2, r2
 80016d8:	2a00      	cmp	r2, #0
 80016da:	d0e1      	beq.n	80016a0 <HAL_I2C_Master_Receive+0xb0>
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d1df      	bne.n	80016a0 <HAL_I2C_Master_Receive+0xb0>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80016e0:	9600      	str	r6, [sp, #0]
 80016e2:	002b      	movs	r3, r5
 80016e4:	2200      	movs	r2, #0
 80016e6:	2180      	movs	r1, #128	@ 0x80
 80016e8:	0020      	movs	r0, r4
 80016ea:	f7ff fdaa 	bl	8001242 <I2C_WaitOnFlagUntilTimeout>
 80016ee:	2800      	cmp	r0, #0
 80016f0:	d12f      	bne.n	8001752 <HAL_I2C_Master_Receive+0x162>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016f2:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80016f4:	b29b      	uxth	r3, r3
 80016f6:	2bff      	cmp	r3, #255	@ 0xff
 80016f8:	d9c6      	bls.n	8001688 <HAL_I2C_Master_Receive+0x98>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80016fa:	23ff      	movs	r3, #255	@ 0xff
 80016fc:	8523      	strh	r3, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80016fe:	3b7f      	subs	r3, #127	@ 0x7f
 8001700:	2200      	movs	r2, #0
 8001702:	9200      	str	r2, [sp, #0]
 8001704:	045b      	lsls	r3, r3, #17
 8001706:	32ff      	adds	r2, #255	@ 0xff
 8001708:	0039      	movs	r1, r7
 800170a:	0020      	movs	r0, r4
 800170c:	f7ff fcc6 	bl	800109c <I2C_TransferConfig>
 8001710:	e7c6      	b.n	80016a0 <HAL_I2C_Master_Receive+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001712:	0032      	movs	r2, r6
 8001714:	0029      	movs	r1, r5
 8001716:	0020      	movs	r0, r4
 8001718:	f7ff fdcb 	bl	80012b2 <I2C_WaitOnSTOPFlagUntilTimeout>
 800171c:	2800      	cmp	r0, #0
 800171e:	d11a      	bne.n	8001756 <HAL_I2C_Master_Receive+0x166>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001720:	6823      	ldr	r3, [r4, #0]
 8001722:	2220      	movs	r2, #32
 8001724:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8001726:	6821      	ldr	r1, [r4, #0]
 8001728:	684b      	ldr	r3, [r1, #4]
 800172a:	4d0d      	ldr	r5, [pc, #52]	@ (8001760 <HAL_I2C_Master_Receive+0x170>)
 800172c:	402b      	ands	r3, r5
 800172e:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001730:	2341      	movs	r3, #65	@ 0x41
 8001732:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001734:	2300      	movs	r3, #0
 8001736:	3222      	adds	r2, #34	@ 0x22
 8001738:	54a3      	strb	r3, [r4, r2]
    __HAL_UNLOCK(hi2c);
 800173a:	3a02      	subs	r2, #2
 800173c:	54a3      	strb	r3, [r4, r2]
    return HAL_OK;
 800173e:	e000      	b.n	8001742 <HAL_I2C_Master_Receive+0x152>
    return HAL_BUSY;
 8001740:	2002      	movs	r0, #2
}
 8001742:	b005      	add	sp, #20
 8001744:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 8001746:	2002      	movs	r0, #2
 8001748:	e7fb      	b.n	8001742 <HAL_I2C_Master_Receive+0x152>
      return HAL_ERROR;
 800174a:	2001      	movs	r0, #1
 800174c:	e7f9      	b.n	8001742 <HAL_I2C_Master_Receive+0x152>
        return HAL_ERROR;
 800174e:	2001      	movs	r0, #1
 8001750:	e7f7      	b.n	8001742 <HAL_I2C_Master_Receive+0x152>
          return HAL_ERROR;
 8001752:	2001      	movs	r0, #1
 8001754:	e7f5      	b.n	8001742 <HAL_I2C_Master_Receive+0x152>
      return HAL_ERROR;
 8001756:	2001      	movs	r0, #1
 8001758:	e7f3      	b.n	8001742 <HAL_I2C_Master_Receive+0x152>
 800175a:	46c0      	nop			@ (mov r8, r8)
 800175c:	80002400 	.word	0x80002400
 8001760:	fe00e800 	.word	0xfe00e800

08001764 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001764:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001766:	2341      	movs	r3, #65	@ 0x41
 8001768:	5cc3      	ldrb	r3, [r0, r3]
 800176a:	2b20      	cmp	r3, #32
 800176c:	d120      	bne.n	80017b0 <HAL_I2CEx_ConfigAnalogFilter+0x4c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800176e:	3320      	adds	r3, #32
 8001770:	5cc3      	ldrb	r3, [r0, r3]
 8001772:	2b01      	cmp	r3, #1
 8001774:	d01e      	beq.n	80017b4 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 8001776:	2440      	movs	r4, #64	@ 0x40
 8001778:	2201      	movs	r2, #1
 800177a:	5502      	strb	r2, [r0, r4]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800177c:	2541      	movs	r5, #65	@ 0x41
 800177e:	2324      	movs	r3, #36	@ 0x24
 8001780:	5543      	strb	r3, [r0, r5]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001782:	6806      	ldr	r6, [r0, #0]
 8001784:	6833      	ldr	r3, [r6, #0]
 8001786:	4393      	bics	r3, r2
 8001788:	6033      	str	r3, [r6, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800178a:	6806      	ldr	r6, [r0, #0]
 800178c:	6833      	ldr	r3, [r6, #0]
 800178e:	4f0a      	ldr	r7, [pc, #40]	@ (80017b8 <HAL_I2CEx_ConfigAnalogFilter+0x54>)
 8001790:	403b      	ands	r3, r7
 8001792:	6033      	str	r3, [r6, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001794:	6806      	ldr	r6, [r0, #0]
 8001796:	6833      	ldr	r3, [r6, #0]
 8001798:	430b      	orrs	r3, r1
 800179a:	6033      	str	r3, [r6, #0]

    __HAL_I2C_ENABLE(hi2c);
 800179c:	6801      	ldr	r1, [r0, #0]
 800179e:	680b      	ldr	r3, [r1, #0]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	600b      	str	r3, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80017a4:	2320      	movs	r3, #32
 80017a6:	5543      	strb	r3, [r0, r5]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017a8:	2300      	movs	r3, #0
 80017aa:	5503      	strb	r3, [r0, r4]

    return HAL_OK;
 80017ac:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 80017ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 80017b0:	2002      	movs	r0, #2
 80017b2:	e7fc      	b.n	80017ae <HAL_I2CEx_ConfigAnalogFilter+0x4a>
    __HAL_LOCK(hi2c);
 80017b4:	2002      	movs	r0, #2
 80017b6:	e7fa      	b.n	80017ae <HAL_I2CEx_ConfigAnalogFilter+0x4a>
 80017b8:	ffffefff 	.word	0xffffefff

080017bc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80017bc:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017be:	2341      	movs	r3, #65	@ 0x41
 80017c0:	5cc3      	ldrb	r3, [r0, r3]
 80017c2:	2b20      	cmp	r3, #32
 80017c4:	d11e      	bne.n	8001804 <HAL_I2CEx_ConfigDigitalFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017c6:	3320      	adds	r3, #32
 80017c8:	5cc3      	ldrb	r3, [r0, r3]
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d01c      	beq.n	8001808 <HAL_I2CEx_ConfigDigitalFilter+0x4c>
 80017ce:	2440      	movs	r4, #64	@ 0x40
 80017d0:	2201      	movs	r2, #1
 80017d2:	5502      	strb	r2, [r0, r4]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80017d4:	2541      	movs	r5, #65	@ 0x41
 80017d6:	2324      	movs	r3, #36	@ 0x24
 80017d8:	5543      	strb	r3, [r0, r5]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80017da:	6806      	ldr	r6, [r0, #0]
 80017dc:	6833      	ldr	r3, [r6, #0]
 80017de:	4393      	bics	r3, r2
 80017e0:	6033      	str	r3, [r6, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80017e2:	6806      	ldr	r6, [r0, #0]
 80017e4:	6833      	ldr	r3, [r6, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80017e6:	4f09      	ldr	r7, [pc, #36]	@ (800180c <HAL_I2CEx_ConfigDigitalFilter+0x50>)
 80017e8:	403b      	ands	r3, r7

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80017ea:	0209      	lsls	r1, r1, #8
 80017ec:	4319      	orrs	r1, r3

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80017ee:	6031      	str	r1, [r6, #0]

    __HAL_I2C_ENABLE(hi2c);
 80017f0:	6801      	ldr	r1, [r0, #0]
 80017f2:	680b      	ldr	r3, [r1, #0]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	600b      	str	r3, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80017f8:	2320      	movs	r3, #32
 80017fa:	5543      	strb	r3, [r0, r5]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017fc:	2300      	movs	r3, #0
 80017fe:	5503      	strb	r3, [r0, r4]

    return HAL_OK;
 8001800:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8001802:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8001804:	2002      	movs	r0, #2
 8001806:	e7fc      	b.n	8001802 <HAL_I2CEx_ConfigDigitalFilter+0x46>
    __HAL_LOCK(hi2c);
 8001808:	2002      	movs	r0, #2
 800180a:	e7fa      	b.n	8001802 <HAL_I2CEx_ConfigDigitalFilter+0x46>
 800180c:	fffff0ff 	.word	0xfffff0ff

08001810 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001810:	b510      	push	{r4, lr}
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001812:	4b26      	ldr	r3, [pc, #152]	@ (80018ac <HAL_RCC_GetSysClockFreq+0x9c>)
 8001814:	68da      	ldr	r2, [r3, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001816:	230c      	movs	r3, #12
 8001818:	4013      	ands	r3, r2
 800181a:	2b08      	cmp	r3, #8
 800181c:	d042      	beq.n	80018a4 <HAL_RCC_GetSysClockFreq+0x94>
 800181e:	2b0c      	cmp	r3, #12
 8001820:	d011      	beq.n	8001846 <HAL_RCC_GetSysClockFreq+0x36>
 8001822:	2b04      	cmp	r3, #4
 8001824:	d009      	beq.n	800183a <HAL_RCC_GetSysClockFreq+0x2a>
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001826:	4b21      	ldr	r3, [pc, #132]	@ (80018ac <HAL_RCC_GetSysClockFreq+0x9c>)
 8001828:	685a      	ldr	r2, [r3, #4]
 800182a:	0b52      	lsrs	r2, r2, #13
 800182c:	2307      	movs	r3, #7
 800182e:	4013      	ands	r3, r2
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001830:	3301      	adds	r3, #1
 8001832:	2080      	movs	r0, #128	@ 0x80
 8001834:	0200      	lsls	r0, r0, #8
 8001836:	4098      	lsls	r0, r3
      break;
    }
  }
  return sysclockfreq;
}
 8001838:	bd10      	pop	{r4, pc}
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800183a:	4b1c      	ldr	r3, [pc, #112]	@ (80018ac <HAL_RCC_GetSysClockFreq+0x9c>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	06db      	lsls	r3, r3, #27
 8001840:	d532      	bpl.n	80018a8 <HAL_RCC_GetSysClockFreq+0x98>
        sysclockfreq =  (HSI_VALUE >> 2);
 8001842:	481b      	ldr	r0, [pc, #108]	@ (80018b0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001844:	e7f8      	b.n	8001838 <HAL_RCC_GetSysClockFreq+0x28>
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001846:	0c91      	lsrs	r1, r2, #18
 8001848:	230f      	movs	r3, #15
 800184a:	400b      	ands	r3, r1
 800184c:	4919      	ldr	r1, [pc, #100]	@ (80018b4 <HAL_RCC_GetSysClockFreq+0xa4>)
 800184e:	5cc8      	ldrb	r0, [r1, r3]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001850:	0d92      	lsrs	r2, r2, #22
 8001852:	2303      	movs	r3, #3
 8001854:	401a      	ands	r2, r3
 8001856:	1c54      	adds	r4, r2, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001858:	4b14      	ldr	r3, [pc, #80]	@ (80018ac <HAL_RCC_GetSysClockFreq+0x9c>)
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	03db      	lsls	r3, r3, #15
 800185e:	d509      	bpl.n	8001874 <HAL_RCC_GetSysClockFreq+0x64>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001860:	4a15      	ldr	r2, [pc, #84]	@ (80018b8 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001862:	2300      	movs	r3, #0
 8001864:	2100      	movs	r1, #0
 8001866:	f7fe fd05 	bl	8000274 <__aeabi_lmul>
 800186a:	0022      	movs	r2, r4
 800186c:	2300      	movs	r3, #0
 800186e:	f7fe fce1 	bl	8000234 <__aeabi_uldivmod>
 8001872:	e7e1      	b.n	8001838 <HAL_RCC_GetSysClockFreq+0x28>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001874:	4b0d      	ldr	r3, [pc, #52]	@ (80018ac <HAL_RCC_GetSysClockFreq+0x9c>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	06db      	lsls	r3, r3, #27
 800187a:	d509      	bpl.n	8001890 <HAL_RCC_GetSysClockFreq+0x80>
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800187c:	4a0c      	ldr	r2, [pc, #48]	@ (80018b0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800187e:	2300      	movs	r3, #0
 8001880:	2100      	movs	r1, #0
 8001882:	f7fe fcf7 	bl	8000274 <__aeabi_lmul>
 8001886:	0022      	movs	r2, r4
 8001888:	2300      	movs	r3, #0
 800188a:	f7fe fcd3 	bl	8000234 <__aeabi_uldivmod>
 800188e:	e7d3      	b.n	8001838 <HAL_RCC_GetSysClockFreq+0x28>
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001890:	4a0a      	ldr	r2, [pc, #40]	@ (80018bc <HAL_RCC_GetSysClockFreq+0xac>)
 8001892:	2300      	movs	r3, #0
 8001894:	2100      	movs	r1, #0
 8001896:	f7fe fced 	bl	8000274 <__aeabi_lmul>
 800189a:	0022      	movs	r2, r4
 800189c:	2300      	movs	r3, #0
 800189e:	f7fe fcc9 	bl	8000234 <__aeabi_uldivmod>
 80018a2:	e7c9      	b.n	8001838 <HAL_RCC_GetSysClockFreq+0x28>
  switch (tmpreg & RCC_CFGR_SWS)
 80018a4:	4804      	ldr	r0, [pc, #16]	@ (80018b8 <HAL_RCC_GetSysClockFreq+0xa8>)
 80018a6:	e7c7      	b.n	8001838 <HAL_RCC_GetSysClockFreq+0x28>
        sysclockfreq =  HSI_VALUE;
 80018a8:	4804      	ldr	r0, [pc, #16]	@ (80018bc <HAL_RCC_GetSysClockFreq+0xac>)
  return sysclockfreq;
 80018aa:	e7c5      	b.n	8001838 <HAL_RCC_GetSysClockFreq+0x28>
 80018ac:	40021000 	.word	0x40021000
 80018b0:	003d0900 	.word	0x003d0900
 80018b4:	080038fc 	.word	0x080038fc
 80018b8:	007a1200 	.word	0x007a1200
 80018bc:	00f42400 	.word	0x00f42400

080018c0 <HAL_RCC_OscConfig>:
{
 80018c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018c2:	b083      	sub	sp, #12
 80018c4:	1e04      	subs	r4, r0, #0
  if(RCC_OscInitStruct == NULL)
 80018c6:	d100      	bne.n	80018ca <HAL_RCC_OscConfig+0xa>
 80018c8:	e265      	b.n	8001d96 <HAL_RCC_OscConfig+0x4d6>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018ca:	4bc5      	ldr	r3, [pc, #788]	@ (8001be0 <HAL_RCC_OscConfig+0x320>)
 80018cc:	68da      	ldr	r2, [r3, #12]
 80018ce:	250c      	movs	r5, #12
 80018d0:	4015      	ands	r5, r2
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018d2:	68de      	ldr	r6, [r3, #12]
 80018d4:	2380      	movs	r3, #128	@ 0x80
 80018d6:	025b      	lsls	r3, r3, #9
 80018d8:	401e      	ands	r6, r3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018da:	6803      	ldr	r3, [r0, #0]
 80018dc:	07db      	lsls	r3, r3, #31
 80018de:	d536      	bpl.n	800194e <HAL_RCC_OscConfig+0x8e>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018e0:	2d08      	cmp	r5, #8
 80018e2:	d02c      	beq.n	800193e <HAL_RCC_OscConfig+0x7e>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80018e4:	2d0c      	cmp	r5, #12
 80018e6:	d028      	beq.n	800193a <HAL_RCC_OscConfig+0x7a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018e8:	6863      	ldr	r3, [r4, #4]
 80018ea:	2280      	movs	r2, #128	@ 0x80
 80018ec:	0252      	lsls	r2, r2, #9
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d055      	beq.n	800199e <HAL_RCC_OscConfig+0xde>
 80018f2:	22a0      	movs	r2, #160	@ 0xa0
 80018f4:	02d2      	lsls	r2, r2, #11
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d058      	beq.n	80019ac <HAL_RCC_OscConfig+0xec>
 80018fa:	4bb9      	ldr	r3, [pc, #740]	@ (8001be0 <HAL_RCC_OscConfig+0x320>)
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	49b9      	ldr	r1, [pc, #740]	@ (8001be4 <HAL_RCC_OscConfig+0x324>)
 8001900:	400a      	ands	r2, r1
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	2180      	movs	r1, #128	@ 0x80
 8001908:	0249      	lsls	r1, r1, #9
 800190a:	400a      	ands	r2, r1
 800190c:	9201      	str	r2, [sp, #4]
 800190e:	9a01      	ldr	r2, [sp, #4]
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	49b5      	ldr	r1, [pc, #724]	@ (8001be8 <HAL_RCC_OscConfig+0x328>)
 8001914:	400a      	ands	r2, r1
 8001916:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001918:	6863      	ldr	r3, [r4, #4]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d052      	beq.n	80019c4 <HAL_RCC_OscConfig+0x104>
        tickstart = HAL_GetTick();
 800191e:	f7ff fa75 	bl	8000e0c <HAL_GetTick>
 8001922:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001924:	4bae      	ldr	r3, [pc, #696]	@ (8001be0 <HAL_RCC_OscConfig+0x320>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	039b      	lsls	r3, r3, #14
 800192a:	d410      	bmi.n	800194e <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800192c:	f7ff fa6e 	bl	8000e0c <HAL_GetTick>
 8001930:	1bc0      	subs	r0, r0, r7
 8001932:	2864      	cmp	r0, #100	@ 0x64
 8001934:	d9f6      	bls.n	8001924 <HAL_RCC_OscConfig+0x64>
            return HAL_TIMEOUT;
 8001936:	2003      	movs	r0, #3
 8001938:	e22e      	b.n	8001d98 <HAL_RCC_OscConfig+0x4d8>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800193a:	2e00      	cmp	r6, #0
 800193c:	d0d4      	beq.n	80018e8 <HAL_RCC_OscConfig+0x28>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800193e:	4ba8      	ldr	r3, [pc, #672]	@ (8001be0 <HAL_RCC_OscConfig+0x320>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	039b      	lsls	r3, r3, #14
 8001944:	d503      	bpl.n	800194e <HAL_RCC_OscConfig+0x8e>
 8001946:	6863      	ldr	r3, [r4, #4]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d100      	bne.n	800194e <HAL_RCC_OscConfig+0x8e>
 800194c:	e226      	b.n	8001d9c <HAL_RCC_OscConfig+0x4dc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800194e:	6823      	ldr	r3, [r4, #0]
 8001950:	079b      	lsls	r3, r3, #30
 8001952:	d56d      	bpl.n	8001a30 <HAL_RCC_OscConfig+0x170>
    hsi_state = RCC_OscInitStruct->HSIState;
 8001954:	68e3      	ldr	r3, [r4, #12]
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001956:	069a      	lsls	r2, r3, #26
 8001958:	d505      	bpl.n	8001966 <HAL_RCC_OscConfig+0xa6>
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800195a:	48a1      	ldr	r0, [pc, #644]	@ (8001be0 <HAL_RCC_OscConfig+0x320>)
 800195c:	6802      	ldr	r2, [r0, #0]
 800195e:	2120      	movs	r1, #32
 8001960:	430a      	orrs	r2, r1
 8001962:	6002      	str	r2, [r0, #0]
      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001964:	438b      	bics	r3, r1
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001966:	2d04      	cmp	r5, #4
 8001968:	d03c      	beq.n	80019e4 <HAL_RCC_OscConfig+0x124>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800196a:	2d0c      	cmp	r5, #12
 800196c:	d038      	beq.n	80019e0 <HAL_RCC_OscConfig+0x120>
      if(hsi_state != RCC_HSI_OFF)
 800196e:	2b00      	cmp	r3, #0
 8001970:	d100      	bne.n	8001974 <HAL_RCC_OscConfig+0xb4>
 8001972:	e0b0      	b.n	8001ad6 <HAL_RCC_OscConfig+0x216>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001974:	499a      	ldr	r1, [pc, #616]	@ (8001be0 <HAL_RCC_OscConfig+0x320>)
 8001976:	680a      	ldr	r2, [r1, #0]
 8001978:	2009      	movs	r0, #9
 800197a:	4382      	bics	r2, r0
 800197c:	4313      	orrs	r3, r2
 800197e:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 8001980:	f7ff fa44 	bl	8000e0c <HAL_GetTick>
 8001984:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001986:	4b96      	ldr	r3, [pc, #600]	@ (8001be0 <HAL_RCC_OscConfig+0x320>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	075b      	lsls	r3, r3, #29
 800198c:	d500      	bpl.n	8001990 <HAL_RCC_OscConfig+0xd0>
 800198e:	e099      	b.n	8001ac4 <HAL_RCC_OscConfig+0x204>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001990:	f7ff fa3c 	bl	8000e0c <HAL_GetTick>
 8001994:	1b80      	subs	r0, r0, r6
 8001996:	2802      	cmp	r0, #2
 8001998:	d9f5      	bls.n	8001986 <HAL_RCC_OscConfig+0xc6>
            return HAL_TIMEOUT;
 800199a:	2003      	movs	r0, #3
 800199c:	e1fc      	b.n	8001d98 <HAL_RCC_OscConfig+0x4d8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800199e:	4a90      	ldr	r2, [pc, #576]	@ (8001be0 <HAL_RCC_OscConfig+0x320>)
 80019a0:	6811      	ldr	r1, [r2, #0]
 80019a2:	2380      	movs	r3, #128	@ 0x80
 80019a4:	025b      	lsls	r3, r3, #9
 80019a6:	430b      	orrs	r3, r1
 80019a8:	6013      	str	r3, [r2, #0]
 80019aa:	e7b5      	b.n	8001918 <HAL_RCC_OscConfig+0x58>
 80019ac:	4b8c      	ldr	r3, [pc, #560]	@ (8001be0 <HAL_RCC_OscConfig+0x320>)
 80019ae:	6819      	ldr	r1, [r3, #0]
 80019b0:	2280      	movs	r2, #128	@ 0x80
 80019b2:	02d2      	lsls	r2, r2, #11
 80019b4:	430a      	orrs	r2, r1
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	6819      	ldr	r1, [r3, #0]
 80019ba:	2280      	movs	r2, #128	@ 0x80
 80019bc:	0252      	lsls	r2, r2, #9
 80019be:	430a      	orrs	r2, r1
 80019c0:	601a      	str	r2, [r3, #0]
 80019c2:	e7a9      	b.n	8001918 <HAL_RCC_OscConfig+0x58>
        tickstart = HAL_GetTick();
 80019c4:	f7ff fa22 	bl	8000e0c <HAL_GetTick>
 80019c8:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80019ca:	4b85      	ldr	r3, [pc, #532]	@ (8001be0 <HAL_RCC_OscConfig+0x320>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	039b      	lsls	r3, r3, #14
 80019d0:	d5bd      	bpl.n	800194e <HAL_RCC_OscConfig+0x8e>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019d2:	f7ff fa1b 	bl	8000e0c <HAL_GetTick>
 80019d6:	1bc0      	subs	r0, r0, r7
 80019d8:	2864      	cmp	r0, #100	@ 0x64
 80019da:	d9f6      	bls.n	80019ca <HAL_RCC_OscConfig+0x10a>
            return HAL_TIMEOUT;
 80019dc:	2003      	movs	r0, #3
 80019de:	e1db      	b.n	8001d98 <HAL_RCC_OscConfig+0x4d8>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80019e0:	2e00      	cmp	r6, #0
 80019e2:	d1c4      	bne.n	800196e <HAL_RCC_OscConfig+0xae>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80019e4:	4a7e      	ldr	r2, [pc, #504]	@ (8001be0 <HAL_RCC_OscConfig+0x320>)
 80019e6:	6812      	ldr	r2, [r2, #0]
 80019e8:	0752      	lsls	r2, r2, #29
 80019ea:	d502      	bpl.n	80019f2 <HAL_RCC_OscConfig+0x132>
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d100      	bne.n	80019f2 <HAL_RCC_OscConfig+0x132>
 80019f0:	e1d6      	b.n	8001da0 <HAL_RCC_OscConfig+0x4e0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019f2:	4e7b      	ldr	r6, [pc, #492]	@ (8001be0 <HAL_RCC_OscConfig+0x320>)
 80019f4:	6872      	ldr	r2, [r6, #4]
 80019f6:	497d      	ldr	r1, [pc, #500]	@ (8001bec <HAL_RCC_OscConfig+0x32c>)
 80019f8:	400a      	ands	r2, r1
 80019fa:	6921      	ldr	r1, [r4, #16]
 80019fc:	0209      	lsls	r1, r1, #8
 80019fe:	430a      	orrs	r2, r1
 8001a00:	6072      	str	r2, [r6, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001a02:	6832      	ldr	r2, [r6, #0]
 8001a04:	2109      	movs	r1, #9
 8001a06:	438a      	bics	r2, r1
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	6033      	str	r3, [r6, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a0c:	f7ff ff00 	bl	8001810 <HAL_RCC_GetSysClockFreq>
 8001a10:	68f2      	ldr	r2, [r6, #12]
 8001a12:	0912      	lsrs	r2, r2, #4
 8001a14:	230f      	movs	r3, #15
 8001a16:	4013      	ands	r3, r2
 8001a18:	4a75      	ldr	r2, [pc, #468]	@ (8001bf0 <HAL_RCC_OscConfig+0x330>)
 8001a1a:	5cd3      	ldrb	r3, [r2, r3]
 8001a1c:	40d8      	lsrs	r0, r3
 8001a1e:	4b75      	ldr	r3, [pc, #468]	@ (8001bf4 <HAL_RCC_OscConfig+0x334>)
 8001a20:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (uwTickPrio);
 8001a22:	4b75      	ldr	r3, [pc, #468]	@ (8001bf8 <HAL_RCC_OscConfig+0x338>)
 8001a24:	6818      	ldr	r0, [r3, #0]
 8001a26:	f7ff f9a9 	bl	8000d7c <HAL_InitTick>
      if(status != HAL_OK)
 8001a2a:	2800      	cmp	r0, #0
 8001a2c:	d000      	beq.n	8001a30 <HAL_RCC_OscConfig+0x170>
 8001a2e:	e1b3      	b.n	8001d98 <HAL_RCC_OscConfig+0x4d8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a30:	6823      	ldr	r3, [r4, #0]
 8001a32:	06db      	lsls	r3, r3, #27
 8001a34:	d52d      	bpl.n	8001a92 <HAL_RCC_OscConfig+0x1d2>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a36:	2d00      	cmp	r5, #0
 8001a38:	d160      	bne.n	8001afc <HAL_RCC_OscConfig+0x23c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a3a:	4b69      	ldr	r3, [pc, #420]	@ (8001be0 <HAL_RCC_OscConfig+0x320>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	059b      	lsls	r3, r3, #22
 8001a40:	d503      	bpl.n	8001a4a <HAL_RCC_OscConfig+0x18a>
 8001a42:	69a3      	ldr	r3, [r4, #24]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d100      	bne.n	8001a4a <HAL_RCC_OscConfig+0x18a>
 8001a48:	e1ac      	b.n	8001da4 <HAL_RCC_OscConfig+0x4e4>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a4a:	4a65      	ldr	r2, [pc, #404]	@ (8001be0 <HAL_RCC_OscConfig+0x320>)
 8001a4c:	6853      	ldr	r3, [r2, #4]
 8001a4e:	496b      	ldr	r1, [pc, #428]	@ (8001bfc <HAL_RCC_OscConfig+0x33c>)
 8001a50:	400b      	ands	r3, r1
 8001a52:	6a21      	ldr	r1, [r4, #32]
 8001a54:	430b      	orrs	r3, r1
 8001a56:	6053      	str	r3, [r2, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a58:	6853      	ldr	r3, [r2, #4]
 8001a5a:	021b      	lsls	r3, r3, #8
 8001a5c:	0a1b      	lsrs	r3, r3, #8
 8001a5e:	69e1      	ldr	r1, [r4, #28]
 8001a60:	0609      	lsls	r1, r1, #24
 8001a62:	430b      	orrs	r3, r1
 8001a64:	6053      	str	r3, [r2, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001a66:	6a21      	ldr	r1, [r4, #32]
 8001a68:	0b49      	lsrs	r1, r1, #13
 8001a6a:	3101      	adds	r1, #1
 8001a6c:	2380      	movs	r3, #128	@ 0x80
 8001a6e:	021b      	lsls	r3, r3, #8
 8001a70:	408b      	lsls	r3, r1
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001a72:	68d1      	ldr	r1, [r2, #12]
 8001a74:	0909      	lsrs	r1, r1, #4
 8001a76:	220f      	movs	r2, #15
 8001a78:	400a      	ands	r2, r1
 8001a7a:	495d      	ldr	r1, [pc, #372]	@ (8001bf0 <HAL_RCC_OscConfig+0x330>)
 8001a7c:	5c8a      	ldrb	r2, [r1, r2]
 8001a7e:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001a80:	4a5c      	ldr	r2, [pc, #368]	@ (8001bf4 <HAL_RCC_OscConfig+0x334>)
 8001a82:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (uwTickPrio);
 8001a84:	4b5c      	ldr	r3, [pc, #368]	@ (8001bf8 <HAL_RCC_OscConfig+0x338>)
 8001a86:	6818      	ldr	r0, [r3, #0]
 8001a88:	f7ff f978 	bl	8000d7c <HAL_InitTick>
        if(status != HAL_OK)
 8001a8c:	2800      	cmp	r0, #0
 8001a8e:	d000      	beq.n	8001a92 <HAL_RCC_OscConfig+0x1d2>
 8001a90:	e182      	b.n	8001d98 <HAL_RCC_OscConfig+0x4d8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a92:	6823      	ldr	r3, [r4, #0]
 8001a94:	071b      	lsls	r3, r3, #28
 8001a96:	d57d      	bpl.n	8001b94 <HAL_RCC_OscConfig+0x2d4>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a98:	6963      	ldr	r3, [r4, #20]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d067      	beq.n	8001b6e <HAL_RCC_OscConfig+0x2ae>
      __HAL_RCC_LSI_ENABLE();
 8001a9e:	4a50      	ldr	r2, [pc, #320]	@ (8001be0 <HAL_RCC_OscConfig+0x320>)
 8001aa0:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8001aa2:	2101      	movs	r1, #1
 8001aa4:	430b      	orrs	r3, r1
 8001aa6:	6513      	str	r3, [r2, #80]	@ 0x50
      tickstart = HAL_GetTick();
 8001aa8:	f7ff f9b0 	bl	8000e0c <HAL_GetTick>
 8001aac:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001aae:	4b4c      	ldr	r3, [pc, #304]	@ (8001be0 <HAL_RCC_OscConfig+0x320>)
 8001ab0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ab2:	079b      	lsls	r3, r3, #30
 8001ab4:	d46e      	bmi.n	8001b94 <HAL_RCC_OscConfig+0x2d4>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ab6:	f7ff f9a9 	bl	8000e0c <HAL_GetTick>
 8001aba:	1b80      	subs	r0, r0, r6
 8001abc:	2802      	cmp	r0, #2
 8001abe:	d9f6      	bls.n	8001aae <HAL_RCC_OscConfig+0x1ee>
          return HAL_TIMEOUT;
 8001ac0:	2003      	movs	r0, #3
 8001ac2:	e169      	b.n	8001d98 <HAL_RCC_OscConfig+0x4d8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ac4:	4946      	ldr	r1, [pc, #280]	@ (8001be0 <HAL_RCC_OscConfig+0x320>)
 8001ac6:	684b      	ldr	r3, [r1, #4]
 8001ac8:	4a48      	ldr	r2, [pc, #288]	@ (8001bec <HAL_RCC_OscConfig+0x32c>)
 8001aca:	4013      	ands	r3, r2
 8001acc:	6922      	ldr	r2, [r4, #16]
 8001ace:	0212      	lsls	r2, r2, #8
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	604b      	str	r3, [r1, #4]
 8001ad4:	e7ac      	b.n	8001a30 <HAL_RCC_OscConfig+0x170>
        __HAL_RCC_HSI_DISABLE();
 8001ad6:	4a42      	ldr	r2, [pc, #264]	@ (8001be0 <HAL_RCC_OscConfig+0x320>)
 8001ad8:	6813      	ldr	r3, [r2, #0]
 8001ada:	2101      	movs	r1, #1
 8001adc:	438b      	bics	r3, r1
 8001ade:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001ae0:	f7ff f994 	bl	8000e0c <HAL_GetTick>
 8001ae4:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001ae6:	4b3e      	ldr	r3, [pc, #248]	@ (8001be0 <HAL_RCC_OscConfig+0x320>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	075b      	lsls	r3, r3, #29
 8001aec:	d5a0      	bpl.n	8001a30 <HAL_RCC_OscConfig+0x170>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001aee:	f7ff f98d 	bl	8000e0c <HAL_GetTick>
 8001af2:	1b80      	subs	r0, r0, r6
 8001af4:	2802      	cmp	r0, #2
 8001af6:	d9f6      	bls.n	8001ae6 <HAL_RCC_OscConfig+0x226>
            return HAL_TIMEOUT;
 8001af8:	2003      	movs	r0, #3
 8001afa:	e14d      	b.n	8001d98 <HAL_RCC_OscConfig+0x4d8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001afc:	69a3      	ldr	r3, [r4, #24]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d022      	beq.n	8001b48 <HAL_RCC_OscConfig+0x288>
        __HAL_RCC_MSI_ENABLE();
 8001b02:	4a37      	ldr	r2, [pc, #220]	@ (8001be0 <HAL_RCC_OscConfig+0x320>)
 8001b04:	6811      	ldr	r1, [r2, #0]
 8001b06:	2380      	movs	r3, #128	@ 0x80
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	430b      	orrs	r3, r1
 8001b0c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001b0e:	f7ff f97d 	bl	8000e0c <HAL_GetTick>
 8001b12:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001b14:	4b32      	ldr	r3, [pc, #200]	@ (8001be0 <HAL_RCC_OscConfig+0x320>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	059b      	lsls	r3, r3, #22
 8001b1a:	d406      	bmi.n	8001b2a <HAL_RCC_OscConfig+0x26a>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b1c:	f7ff f976 	bl	8000e0c <HAL_GetTick>
 8001b20:	1b80      	subs	r0, r0, r6
 8001b22:	2802      	cmp	r0, #2
 8001b24:	d9f6      	bls.n	8001b14 <HAL_RCC_OscConfig+0x254>
            return HAL_TIMEOUT;
 8001b26:	2003      	movs	r0, #3
 8001b28:	e136      	b.n	8001d98 <HAL_RCC_OscConfig+0x4d8>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b2a:	4a2d      	ldr	r2, [pc, #180]	@ (8001be0 <HAL_RCC_OscConfig+0x320>)
 8001b2c:	6853      	ldr	r3, [r2, #4]
 8001b2e:	4933      	ldr	r1, [pc, #204]	@ (8001bfc <HAL_RCC_OscConfig+0x33c>)
 8001b30:	400b      	ands	r3, r1
 8001b32:	6a21      	ldr	r1, [r4, #32]
 8001b34:	430b      	orrs	r3, r1
 8001b36:	6053      	str	r3, [r2, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b38:	6853      	ldr	r3, [r2, #4]
 8001b3a:	021b      	lsls	r3, r3, #8
 8001b3c:	0a1b      	lsrs	r3, r3, #8
 8001b3e:	69e1      	ldr	r1, [r4, #28]
 8001b40:	0609      	lsls	r1, r1, #24
 8001b42:	430b      	orrs	r3, r1
 8001b44:	6053      	str	r3, [r2, #4]
 8001b46:	e7a4      	b.n	8001a92 <HAL_RCC_OscConfig+0x1d2>
        __HAL_RCC_MSI_DISABLE();
 8001b48:	4a25      	ldr	r2, [pc, #148]	@ (8001be0 <HAL_RCC_OscConfig+0x320>)
 8001b4a:	6813      	ldr	r3, [r2, #0]
 8001b4c:	492c      	ldr	r1, [pc, #176]	@ (8001c00 <HAL_RCC_OscConfig+0x340>)
 8001b4e:	400b      	ands	r3, r1
 8001b50:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001b52:	f7ff f95b 	bl	8000e0c <HAL_GetTick>
 8001b56:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001b58:	4b21      	ldr	r3, [pc, #132]	@ (8001be0 <HAL_RCC_OscConfig+0x320>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	059b      	lsls	r3, r3, #22
 8001b5e:	d598      	bpl.n	8001a92 <HAL_RCC_OscConfig+0x1d2>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b60:	f7ff f954 	bl	8000e0c <HAL_GetTick>
 8001b64:	1b80      	subs	r0, r0, r6
 8001b66:	2802      	cmp	r0, #2
 8001b68:	d9f6      	bls.n	8001b58 <HAL_RCC_OscConfig+0x298>
            return HAL_TIMEOUT;
 8001b6a:	2003      	movs	r0, #3
 8001b6c:	e114      	b.n	8001d98 <HAL_RCC_OscConfig+0x4d8>
      __HAL_RCC_LSI_DISABLE();
 8001b6e:	4a1c      	ldr	r2, [pc, #112]	@ (8001be0 <HAL_RCC_OscConfig+0x320>)
 8001b70:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8001b72:	2101      	movs	r1, #1
 8001b74:	438b      	bics	r3, r1
 8001b76:	6513      	str	r3, [r2, #80]	@ 0x50
      tickstart = HAL_GetTick();
 8001b78:	f7ff f948 	bl	8000e0c <HAL_GetTick>
 8001b7c:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001b7e:	4b18      	ldr	r3, [pc, #96]	@ (8001be0 <HAL_RCC_OscConfig+0x320>)
 8001b80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b82:	079b      	lsls	r3, r3, #30
 8001b84:	d506      	bpl.n	8001b94 <HAL_RCC_OscConfig+0x2d4>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b86:	f7ff f941 	bl	8000e0c <HAL_GetTick>
 8001b8a:	1b80      	subs	r0, r0, r6
 8001b8c:	2802      	cmp	r0, #2
 8001b8e:	d9f6      	bls.n	8001b7e <HAL_RCC_OscConfig+0x2be>
          return HAL_TIMEOUT;
 8001b90:	2003      	movs	r0, #3
 8001b92:	e101      	b.n	8001d98 <HAL_RCC_OscConfig+0x4d8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b94:	6823      	ldr	r3, [r4, #0]
 8001b96:	075b      	lsls	r3, r3, #29
 8001b98:	d400      	bmi.n	8001b9c <HAL_RCC_OscConfig+0x2dc>
 8001b9a:	e08e      	b.n	8001cba <HAL_RCC_OscConfig+0x3fa>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b9c:	4b10      	ldr	r3, [pc, #64]	@ (8001be0 <HAL_RCC_OscConfig+0x320>)
 8001b9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ba0:	00db      	lsls	r3, r3, #3
 8001ba2:	d41b      	bmi.n	8001bdc <HAL_RCC_OscConfig+0x31c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ba4:	4a0e      	ldr	r2, [pc, #56]	@ (8001be0 <HAL_RCC_OscConfig+0x320>)
 8001ba6:	6b91      	ldr	r1, [r2, #56]	@ 0x38
 8001ba8:	2380      	movs	r3, #128	@ 0x80
 8001baa:	055b      	lsls	r3, r3, #21
 8001bac:	430b      	orrs	r3, r1
 8001bae:	6393      	str	r3, [r2, #56]	@ 0x38
      pwrclkchanged = SET;
 8001bb0:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bb2:	4b14      	ldr	r3, [pc, #80]	@ (8001c04 <HAL_RCC_OscConfig+0x344>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	05db      	lsls	r3, r3, #23
 8001bb8:	d528      	bpl.n	8001c0c <HAL_RCC_OscConfig+0x34c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bba:	68a3      	ldr	r3, [r4, #8]
 8001bbc:	2280      	movs	r2, #128	@ 0x80
 8001bbe:	0052      	lsls	r2, r2, #1
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d037      	beq.n	8001c34 <HAL_RCC_OscConfig+0x374>
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d14d      	bne.n	8001c64 <HAL_RCC_OscConfig+0x3a4>
 8001bc8:	4b05      	ldr	r3, [pc, #20]	@ (8001be0 <HAL_RCC_OscConfig+0x320>)
 8001bca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001bcc:	490c      	ldr	r1, [pc, #48]	@ (8001c00 <HAL_RCC_OscConfig+0x340>)
 8001bce:	400a      	ands	r2, r1
 8001bd0:	651a      	str	r2, [r3, #80]	@ 0x50
 8001bd2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001bd4:	490c      	ldr	r1, [pc, #48]	@ (8001c08 <HAL_RCC_OscConfig+0x348>)
 8001bd6:	400a      	ands	r2, r1
 8001bd8:	651a      	str	r2, [r3, #80]	@ 0x50
 8001bda:	e031      	b.n	8001c40 <HAL_RCC_OscConfig+0x380>
    FlagStatus       pwrclkchanged = RESET;
 8001bdc:	2600      	movs	r6, #0
 8001bde:	e7e8      	b.n	8001bb2 <HAL_RCC_OscConfig+0x2f2>
 8001be0:	40021000 	.word	0x40021000
 8001be4:	fffeffff 	.word	0xfffeffff
 8001be8:	fffbffff 	.word	0xfffbffff
 8001bec:	ffffe0ff 	.word	0xffffe0ff
 8001bf0:	08003910 	.word	0x08003910
 8001bf4:	20000014 	.word	0x20000014
 8001bf8:	2000001c 	.word	0x2000001c
 8001bfc:	ffff1fff 	.word	0xffff1fff
 8001c00:	fffffeff 	.word	0xfffffeff
 8001c04:	40007000 	.word	0x40007000
 8001c08:	fffffbff 	.word	0xfffffbff
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c0c:	4a6b      	ldr	r2, [pc, #428]	@ (8001dbc <HAL_RCC_OscConfig+0x4fc>)
 8001c0e:	6811      	ldr	r1, [r2, #0]
 8001c10:	2380      	movs	r3, #128	@ 0x80
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	430b      	orrs	r3, r1
 8001c16:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001c18:	f7ff f8f8 	bl	8000e0c <HAL_GetTick>
 8001c1c:	0007      	movs	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c1e:	4b67      	ldr	r3, [pc, #412]	@ (8001dbc <HAL_RCC_OscConfig+0x4fc>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	05db      	lsls	r3, r3, #23
 8001c24:	d4c9      	bmi.n	8001bba <HAL_RCC_OscConfig+0x2fa>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c26:	f7ff f8f1 	bl	8000e0c <HAL_GetTick>
 8001c2a:	1bc0      	subs	r0, r0, r7
 8001c2c:	2864      	cmp	r0, #100	@ 0x64
 8001c2e:	d9f6      	bls.n	8001c1e <HAL_RCC_OscConfig+0x35e>
          return HAL_TIMEOUT;
 8001c30:	2003      	movs	r0, #3
 8001c32:	e0b1      	b.n	8001d98 <HAL_RCC_OscConfig+0x4d8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c34:	4a62      	ldr	r2, [pc, #392]	@ (8001dc0 <HAL_RCC_OscConfig+0x500>)
 8001c36:	6d11      	ldr	r1, [r2, #80]	@ 0x50
 8001c38:	2380      	movs	r3, #128	@ 0x80
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	430b      	orrs	r3, r1
 8001c3e:	6513      	str	r3, [r2, #80]	@ 0x50
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c40:	68a3      	ldr	r3, [r4, #8]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d028      	beq.n	8001c98 <HAL_RCC_OscConfig+0x3d8>
      tickstart = HAL_GetTick();
 8001c46:	f7ff f8e1 	bl	8000e0c <HAL_GetTick>
 8001c4a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001c4c:	4b5c      	ldr	r3, [pc, #368]	@ (8001dc0 <HAL_RCC_OscConfig+0x500>)
 8001c4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c50:	059b      	lsls	r3, r3, #22
 8001c52:	d430      	bmi.n	8001cb6 <HAL_RCC_OscConfig+0x3f6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c54:	f7ff f8da 	bl	8000e0c <HAL_GetTick>
 8001c58:	1bc0      	subs	r0, r0, r7
 8001c5a:	4b5a      	ldr	r3, [pc, #360]	@ (8001dc4 <HAL_RCC_OscConfig+0x504>)
 8001c5c:	4298      	cmp	r0, r3
 8001c5e:	d9f5      	bls.n	8001c4c <HAL_RCC_OscConfig+0x38c>
          return HAL_TIMEOUT;
 8001c60:	2003      	movs	r0, #3
 8001c62:	e099      	b.n	8001d98 <HAL_RCC_OscConfig+0x4d8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c64:	22a0      	movs	r2, #160	@ 0xa0
 8001c66:	00d2      	lsls	r2, r2, #3
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d009      	beq.n	8001c80 <HAL_RCC_OscConfig+0x3c0>
 8001c6c:	4b54      	ldr	r3, [pc, #336]	@ (8001dc0 <HAL_RCC_OscConfig+0x500>)
 8001c6e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001c70:	4955      	ldr	r1, [pc, #340]	@ (8001dc8 <HAL_RCC_OscConfig+0x508>)
 8001c72:	400a      	ands	r2, r1
 8001c74:	651a      	str	r2, [r3, #80]	@ 0x50
 8001c76:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001c78:	4954      	ldr	r1, [pc, #336]	@ (8001dcc <HAL_RCC_OscConfig+0x50c>)
 8001c7a:	400a      	ands	r2, r1
 8001c7c:	651a      	str	r2, [r3, #80]	@ 0x50
 8001c7e:	e7df      	b.n	8001c40 <HAL_RCC_OscConfig+0x380>
 8001c80:	4b4f      	ldr	r3, [pc, #316]	@ (8001dc0 <HAL_RCC_OscConfig+0x500>)
 8001c82:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8001c84:	3a01      	subs	r2, #1
 8001c86:	3aff      	subs	r2, #255	@ 0xff
 8001c88:	430a      	orrs	r2, r1
 8001c8a:	651a      	str	r2, [r3, #80]	@ 0x50
 8001c8c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8001c8e:	2280      	movs	r2, #128	@ 0x80
 8001c90:	0052      	lsls	r2, r2, #1
 8001c92:	430a      	orrs	r2, r1
 8001c94:	651a      	str	r2, [r3, #80]	@ 0x50
 8001c96:	e7d3      	b.n	8001c40 <HAL_RCC_OscConfig+0x380>
      tickstart = HAL_GetTick();
 8001c98:	f7ff f8b8 	bl	8000e0c <HAL_GetTick>
 8001c9c:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001c9e:	4b48      	ldr	r3, [pc, #288]	@ (8001dc0 <HAL_RCC_OscConfig+0x500>)
 8001ca0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ca2:	059b      	lsls	r3, r3, #22
 8001ca4:	d507      	bpl.n	8001cb6 <HAL_RCC_OscConfig+0x3f6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ca6:	f7ff f8b1 	bl	8000e0c <HAL_GetTick>
 8001caa:	1bc0      	subs	r0, r0, r7
 8001cac:	4b45      	ldr	r3, [pc, #276]	@ (8001dc4 <HAL_RCC_OscConfig+0x504>)
 8001cae:	4298      	cmp	r0, r3
 8001cb0:	d9f5      	bls.n	8001c9e <HAL_RCC_OscConfig+0x3de>
          return HAL_TIMEOUT;
 8001cb2:	2003      	movs	r0, #3
 8001cb4:	e070      	b.n	8001d98 <HAL_RCC_OscConfig+0x4d8>
    if(pwrclkchanged == SET)
 8001cb6:	2e01      	cmp	r6, #1
 8001cb8:	d01a      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x430>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cba:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d100      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x402>
 8001cc0:	e072      	b.n	8001da8 <HAL_RCC_OscConfig+0x4e8>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cc2:	2d0c      	cmp	r5, #12
 8001cc4:	d04f      	beq.n	8001d66 <HAL_RCC_OscConfig+0x4a6>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d018      	beq.n	8001cfc <HAL_RCC_OscConfig+0x43c>
        __HAL_RCC_PLL_DISABLE();
 8001cca:	4a3d      	ldr	r2, [pc, #244]	@ (8001dc0 <HAL_RCC_OscConfig+0x500>)
 8001ccc:	6813      	ldr	r3, [r2, #0]
 8001cce:	4940      	ldr	r1, [pc, #256]	@ (8001dd0 <HAL_RCC_OscConfig+0x510>)
 8001cd0:	400b      	ands	r3, r1
 8001cd2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001cd4:	f7ff f89a 	bl	8000e0c <HAL_GetTick>
 8001cd8:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001cda:	4b39      	ldr	r3, [pc, #228]	@ (8001dc0 <HAL_RCC_OscConfig+0x500>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	019b      	lsls	r3, r3, #6
 8001ce0:	d53f      	bpl.n	8001d62 <HAL_RCC_OscConfig+0x4a2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ce2:	f7ff f893 	bl	8000e0c <HAL_GetTick>
 8001ce6:	1b00      	subs	r0, r0, r4
 8001ce8:	2802      	cmp	r0, #2
 8001cea:	d9f6      	bls.n	8001cda <HAL_RCC_OscConfig+0x41a>
            return HAL_TIMEOUT;
 8001cec:	2003      	movs	r0, #3
 8001cee:	e053      	b.n	8001d98 <HAL_RCC_OscConfig+0x4d8>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cf0:	4a33      	ldr	r2, [pc, #204]	@ (8001dc0 <HAL_RCC_OscConfig+0x500>)
 8001cf2:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8001cf4:	4937      	ldr	r1, [pc, #220]	@ (8001dd4 <HAL_RCC_OscConfig+0x514>)
 8001cf6:	400b      	ands	r3, r1
 8001cf8:	6393      	str	r3, [r2, #56]	@ 0x38
 8001cfa:	e7de      	b.n	8001cba <HAL_RCC_OscConfig+0x3fa>
        __HAL_RCC_PLL_DISABLE();
 8001cfc:	4a30      	ldr	r2, [pc, #192]	@ (8001dc0 <HAL_RCC_OscConfig+0x500>)
 8001cfe:	6813      	ldr	r3, [r2, #0]
 8001d00:	4933      	ldr	r1, [pc, #204]	@ (8001dd0 <HAL_RCC_OscConfig+0x510>)
 8001d02:	400b      	ands	r3, r1
 8001d04:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001d06:	f7ff f881 	bl	8000e0c <HAL_GetTick>
 8001d0a:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001d0c:	4b2c      	ldr	r3, [pc, #176]	@ (8001dc0 <HAL_RCC_OscConfig+0x500>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	019b      	lsls	r3, r3, #6
 8001d12:	d506      	bpl.n	8001d22 <HAL_RCC_OscConfig+0x462>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d14:	f7ff f87a 	bl	8000e0c <HAL_GetTick>
 8001d18:	1b40      	subs	r0, r0, r5
 8001d1a:	2802      	cmp	r0, #2
 8001d1c:	d9f6      	bls.n	8001d0c <HAL_RCC_OscConfig+0x44c>
            return HAL_TIMEOUT;
 8001d1e:	2003      	movs	r0, #3
 8001d20:	e03a      	b.n	8001d98 <HAL_RCC_OscConfig+0x4d8>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d22:	4927      	ldr	r1, [pc, #156]	@ (8001dc0 <HAL_RCC_OscConfig+0x500>)
 8001d24:	68cb      	ldr	r3, [r1, #12]
 8001d26:	4a2c      	ldr	r2, [pc, #176]	@ (8001dd8 <HAL_RCC_OscConfig+0x518>)
 8001d28:	4013      	ands	r3, r2
 8001d2a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001d2c:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8001d2e:	4302      	orrs	r2, r0
 8001d30:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8001d32:	4302      	orrs	r2, r0
 8001d34:	4313      	orrs	r3, r2
 8001d36:	60cb      	str	r3, [r1, #12]
        __HAL_RCC_PLL_ENABLE();
 8001d38:	680a      	ldr	r2, [r1, #0]
 8001d3a:	2380      	movs	r3, #128	@ 0x80
 8001d3c:	045b      	lsls	r3, r3, #17
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 8001d42:	f7ff f863 	bl	8000e0c <HAL_GetTick>
 8001d46:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001d48:	4b1d      	ldr	r3, [pc, #116]	@ (8001dc0 <HAL_RCC_OscConfig+0x500>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	019b      	lsls	r3, r3, #6
 8001d4e:	d406      	bmi.n	8001d5e <HAL_RCC_OscConfig+0x49e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d50:	f7ff f85c 	bl	8000e0c <HAL_GetTick>
 8001d54:	1b00      	subs	r0, r0, r4
 8001d56:	2802      	cmp	r0, #2
 8001d58:	d9f6      	bls.n	8001d48 <HAL_RCC_OscConfig+0x488>
            return HAL_TIMEOUT;
 8001d5a:	2003      	movs	r0, #3
 8001d5c:	e01c      	b.n	8001d98 <HAL_RCC_OscConfig+0x4d8>
  return HAL_OK;
 8001d5e:	2000      	movs	r0, #0
 8001d60:	e01a      	b.n	8001d98 <HAL_RCC_OscConfig+0x4d8>
 8001d62:	2000      	movs	r0, #0
 8001d64:	e018      	b.n	8001d98 <HAL_RCC_OscConfig+0x4d8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d020      	beq.n	8001dac <HAL_RCC_OscConfig+0x4ec>
        pll_config = RCC->CFGR;
 8001d6a:	4b15      	ldr	r3, [pc, #84]	@ (8001dc0 <HAL_RCC_OscConfig+0x500>)
 8001d6c:	68da      	ldr	r2, [r3, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d6e:	2380      	movs	r3, #128	@ 0x80
 8001d70:	025b      	lsls	r3, r3, #9
 8001d72:	4013      	ands	r3, r2
 8001d74:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8001d76:	428b      	cmp	r3, r1
 8001d78:	d11a      	bne.n	8001db0 <HAL_RCC_OscConfig+0x4f0>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001d7a:	23f0      	movs	r3, #240	@ 0xf0
 8001d7c:	039b      	lsls	r3, r3, #14
 8001d7e:	4013      	ands	r3, r2
 8001d80:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d82:	428b      	cmp	r3, r1
 8001d84:	d116      	bne.n	8001db4 <HAL_RCC_OscConfig+0x4f4>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001d86:	23c0      	movs	r3, #192	@ 0xc0
 8001d88:	041b      	lsls	r3, r3, #16
 8001d8a:	401a      	ands	r2, r3
 8001d8c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d112      	bne.n	8001db8 <HAL_RCC_OscConfig+0x4f8>
  return HAL_OK;
 8001d92:	2000      	movs	r0, #0
 8001d94:	e000      	b.n	8001d98 <HAL_RCC_OscConfig+0x4d8>
    return HAL_ERROR;
 8001d96:	2001      	movs	r0, #1
}
 8001d98:	b003      	add	sp, #12
 8001d9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return HAL_ERROR;
 8001d9c:	2001      	movs	r0, #1
 8001d9e:	e7fb      	b.n	8001d98 <HAL_RCC_OscConfig+0x4d8>
        return HAL_ERROR;
 8001da0:	2001      	movs	r0, #1
 8001da2:	e7f9      	b.n	8001d98 <HAL_RCC_OscConfig+0x4d8>
        return HAL_ERROR;
 8001da4:	2001      	movs	r0, #1
 8001da6:	e7f7      	b.n	8001d98 <HAL_RCC_OscConfig+0x4d8>
  return HAL_OK;
 8001da8:	2000      	movs	r0, #0
 8001daa:	e7f5      	b.n	8001d98 <HAL_RCC_OscConfig+0x4d8>
        return HAL_ERROR;
 8001dac:	2001      	movs	r0, #1
 8001dae:	e7f3      	b.n	8001d98 <HAL_RCC_OscConfig+0x4d8>
          return HAL_ERROR;
 8001db0:	2001      	movs	r0, #1
 8001db2:	e7f1      	b.n	8001d98 <HAL_RCC_OscConfig+0x4d8>
 8001db4:	2001      	movs	r0, #1
 8001db6:	e7ef      	b.n	8001d98 <HAL_RCC_OscConfig+0x4d8>
 8001db8:	2001      	movs	r0, #1
 8001dba:	e7ed      	b.n	8001d98 <HAL_RCC_OscConfig+0x4d8>
 8001dbc:	40007000 	.word	0x40007000
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	00001388 	.word	0x00001388
 8001dc8:	fffffeff 	.word	0xfffffeff
 8001dcc:	fffffbff 	.word	0xfffffbff
 8001dd0:	feffffff 	.word	0xfeffffff
 8001dd4:	efffffff 	.word	0xefffffff
 8001dd8:	ff02ffff 	.word	0xff02ffff

08001ddc <HAL_RCC_ClockConfig>:
{
 8001ddc:	b570      	push	{r4, r5, r6, lr}
 8001dde:	0005      	movs	r5, r0
 8001de0:	000c      	movs	r4, r1
  if(RCC_ClkInitStruct == NULL)
 8001de2:	2800      	cmp	r0, #0
 8001de4:	d100      	bne.n	8001de8 <HAL_RCC_ClockConfig+0xc>
 8001de6:	e0d1      	b.n	8001f8c <HAL_RCC_ClockConfig+0x1b0>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001de8:	4b6a      	ldr	r3, [pc, #424]	@ (8001f94 <HAL_RCC_ClockConfig+0x1b8>)
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	2301      	movs	r3, #1
 8001dee:	4013      	ands	r3, r2
 8001df0:	428b      	cmp	r3, r1
 8001df2:	d319      	bcc.n	8001e28 <HAL_RCC_ClockConfig+0x4c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001df4:	682b      	ldr	r3, [r5, #0]
 8001df6:	079b      	lsls	r3, r3, #30
 8001df8:	d506      	bpl.n	8001e08 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dfa:	4a67      	ldr	r2, [pc, #412]	@ (8001f98 <HAL_RCC_ClockConfig+0x1bc>)
 8001dfc:	68d3      	ldr	r3, [r2, #12]
 8001dfe:	21f0      	movs	r1, #240	@ 0xf0
 8001e00:	438b      	bics	r3, r1
 8001e02:	68a9      	ldr	r1, [r5, #8]
 8001e04:	430b      	orrs	r3, r1
 8001e06:	60d3      	str	r3, [r2, #12]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e08:	682b      	ldr	r3, [r5, #0]
 8001e0a:	07db      	lsls	r3, r3, #31
 8001e0c:	d57b      	bpl.n	8001f06 <HAL_RCC_ClockConfig+0x12a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e0e:	686b      	ldr	r3, [r5, #4]
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d020      	beq.n	8001e56 <HAL_RCC_ClockConfig+0x7a>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e14:	2b03      	cmp	r3, #3
 8001e16:	d040      	beq.n	8001e9a <HAL_RCC_ClockConfig+0xbe>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d044      	beq.n	8001ea6 <HAL_RCC_ClockConfig+0xca>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001e1c:	4a5e      	ldr	r2, [pc, #376]	@ (8001f98 <HAL_RCC_ClockConfig+0x1bc>)
 8001e1e:	6812      	ldr	r2, [r2, #0]
 8001e20:	0592      	lsls	r2, r2, #22
 8001e22:	d41d      	bmi.n	8001e60 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8001e24:	2001      	movs	r0, #1
 8001e26:	e099      	b.n	8001f5c <HAL_RCC_ClockConfig+0x180>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e28:	4a5a      	ldr	r2, [pc, #360]	@ (8001f94 <HAL_RCC_ClockConfig+0x1b8>)
 8001e2a:	6813      	ldr	r3, [r2, #0]
 8001e2c:	2101      	movs	r1, #1
 8001e2e:	438b      	bics	r3, r1
 8001e30:	4323      	orrs	r3, r4
 8001e32:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001e34:	f7fe ffea 	bl	8000e0c <HAL_GetTick>
 8001e38:	0006      	movs	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e3a:	4b56      	ldr	r3, [pc, #344]	@ (8001f94 <HAL_RCC_ClockConfig+0x1b8>)
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	2301      	movs	r3, #1
 8001e40:	4013      	ands	r3, r2
 8001e42:	42a3      	cmp	r3, r4
 8001e44:	d0d6      	beq.n	8001df4 <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e46:	f7fe ffe1 	bl	8000e0c <HAL_GetTick>
 8001e4a:	1b80      	subs	r0, r0, r6
 8001e4c:	4a53      	ldr	r2, [pc, #332]	@ (8001f9c <HAL_RCC_ClockConfig+0x1c0>)
 8001e4e:	4290      	cmp	r0, r2
 8001e50:	d9f3      	bls.n	8001e3a <HAL_RCC_ClockConfig+0x5e>
        return HAL_TIMEOUT;
 8001e52:	2003      	movs	r0, #3
 8001e54:	e082      	b.n	8001f5c <HAL_RCC_ClockConfig+0x180>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e56:	4a50      	ldr	r2, [pc, #320]	@ (8001f98 <HAL_RCC_ClockConfig+0x1bc>)
 8001e58:	6812      	ldr	r2, [r2, #0]
 8001e5a:	0392      	lsls	r2, r2, #14
 8001e5c:	d400      	bmi.n	8001e60 <HAL_RCC_ClockConfig+0x84>
 8001e5e:	e097      	b.n	8001f90 <HAL_RCC_ClockConfig+0x1b4>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e60:	494d      	ldr	r1, [pc, #308]	@ (8001f98 <HAL_RCC_ClockConfig+0x1bc>)
 8001e62:	68ca      	ldr	r2, [r1, #12]
 8001e64:	2003      	movs	r0, #3
 8001e66:	4382      	bics	r2, r0
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	60cb      	str	r3, [r1, #12]
    tickstart = HAL_GetTick();
 8001e6c:	f7fe ffce 	bl	8000e0c <HAL_GetTick>
 8001e70:	0006      	movs	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e72:	686b      	ldr	r3, [r5, #4]
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d01c      	beq.n	8001eb2 <HAL_RCC_ClockConfig+0xd6>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e78:	2b03      	cmp	r3, #3
 8001e7a:	d028      	beq.n	8001ece <HAL_RCC_ClockConfig+0xf2>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d034      	beq.n	8001eea <HAL_RCC_ClockConfig+0x10e>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001e80:	4b45      	ldr	r3, [pc, #276]	@ (8001f98 <HAL_RCC_ClockConfig+0x1bc>)
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	220c      	movs	r2, #12
 8001e86:	421a      	tst	r2, r3
 8001e88:	d03d      	beq.n	8001f06 <HAL_RCC_ClockConfig+0x12a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e8a:	f7fe ffbf 	bl	8000e0c <HAL_GetTick>
 8001e8e:	1b80      	subs	r0, r0, r6
 8001e90:	4b42      	ldr	r3, [pc, #264]	@ (8001f9c <HAL_RCC_ClockConfig+0x1c0>)
 8001e92:	4298      	cmp	r0, r3
 8001e94:	d9f4      	bls.n	8001e80 <HAL_RCC_ClockConfig+0xa4>
          return HAL_TIMEOUT;
 8001e96:	2003      	movs	r0, #3
 8001e98:	e060      	b.n	8001f5c <HAL_RCC_ClockConfig+0x180>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e9a:	4a3f      	ldr	r2, [pc, #252]	@ (8001f98 <HAL_RCC_ClockConfig+0x1bc>)
 8001e9c:	6812      	ldr	r2, [r2, #0]
 8001e9e:	0192      	lsls	r2, r2, #6
 8001ea0:	d4de      	bmi.n	8001e60 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8001ea2:	2001      	movs	r0, #1
 8001ea4:	e05a      	b.n	8001f5c <HAL_RCC_ClockConfig+0x180>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ea6:	4a3c      	ldr	r2, [pc, #240]	@ (8001f98 <HAL_RCC_ClockConfig+0x1bc>)
 8001ea8:	6812      	ldr	r2, [r2, #0]
 8001eaa:	0752      	lsls	r2, r2, #29
 8001eac:	d4d8      	bmi.n	8001e60 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8001eae:	2001      	movs	r0, #1
 8001eb0:	e054      	b.n	8001f5c <HAL_RCC_ClockConfig+0x180>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001eb2:	4b39      	ldr	r3, [pc, #228]	@ (8001f98 <HAL_RCC_ClockConfig+0x1bc>)
 8001eb4:	68da      	ldr	r2, [r3, #12]
 8001eb6:	230c      	movs	r3, #12
 8001eb8:	4013      	ands	r3, r2
 8001eba:	2b08      	cmp	r3, #8
 8001ebc:	d023      	beq.n	8001f06 <HAL_RCC_ClockConfig+0x12a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ebe:	f7fe ffa5 	bl	8000e0c <HAL_GetTick>
 8001ec2:	1b80      	subs	r0, r0, r6
 8001ec4:	4a35      	ldr	r2, [pc, #212]	@ (8001f9c <HAL_RCC_ClockConfig+0x1c0>)
 8001ec6:	4290      	cmp	r0, r2
 8001ec8:	d9f3      	bls.n	8001eb2 <HAL_RCC_ClockConfig+0xd6>
          return HAL_TIMEOUT;
 8001eca:	2003      	movs	r0, #3
 8001ecc:	e046      	b.n	8001f5c <HAL_RCC_ClockConfig+0x180>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ece:	4b32      	ldr	r3, [pc, #200]	@ (8001f98 <HAL_RCC_ClockConfig+0x1bc>)
 8001ed0:	68da      	ldr	r2, [r3, #12]
 8001ed2:	230c      	movs	r3, #12
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	2b0c      	cmp	r3, #12
 8001ed8:	d015      	beq.n	8001f06 <HAL_RCC_ClockConfig+0x12a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eda:	f7fe ff97 	bl	8000e0c <HAL_GetTick>
 8001ede:	1b80      	subs	r0, r0, r6
 8001ee0:	4b2e      	ldr	r3, [pc, #184]	@ (8001f9c <HAL_RCC_ClockConfig+0x1c0>)
 8001ee2:	4298      	cmp	r0, r3
 8001ee4:	d9f3      	bls.n	8001ece <HAL_RCC_ClockConfig+0xf2>
          return HAL_TIMEOUT;
 8001ee6:	2003      	movs	r0, #3
 8001ee8:	e038      	b.n	8001f5c <HAL_RCC_ClockConfig+0x180>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001eea:	4b2b      	ldr	r3, [pc, #172]	@ (8001f98 <HAL_RCC_ClockConfig+0x1bc>)
 8001eec:	68da      	ldr	r2, [r3, #12]
 8001eee:	230c      	movs	r3, #12
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	2b04      	cmp	r3, #4
 8001ef4:	d007      	beq.n	8001f06 <HAL_RCC_ClockConfig+0x12a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ef6:	f7fe ff89 	bl	8000e0c <HAL_GetTick>
 8001efa:	1b80      	subs	r0, r0, r6
 8001efc:	4b27      	ldr	r3, [pc, #156]	@ (8001f9c <HAL_RCC_ClockConfig+0x1c0>)
 8001efe:	4298      	cmp	r0, r3
 8001f00:	d9f3      	bls.n	8001eea <HAL_RCC_ClockConfig+0x10e>
          return HAL_TIMEOUT;
 8001f02:	2003      	movs	r0, #3
 8001f04:	e02a      	b.n	8001f5c <HAL_RCC_ClockConfig+0x180>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f06:	4b23      	ldr	r3, [pc, #140]	@ (8001f94 <HAL_RCC_ClockConfig+0x1b8>)
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	42a3      	cmp	r3, r4
 8001f10:	d825      	bhi.n	8001f5e <HAL_RCC_ClockConfig+0x182>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f12:	682b      	ldr	r3, [r5, #0]
 8001f14:	075b      	lsls	r3, r3, #29
 8001f16:	d506      	bpl.n	8001f26 <HAL_RCC_ClockConfig+0x14a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f18:	4a1f      	ldr	r2, [pc, #124]	@ (8001f98 <HAL_RCC_ClockConfig+0x1bc>)
 8001f1a:	68d3      	ldr	r3, [r2, #12]
 8001f1c:	4920      	ldr	r1, [pc, #128]	@ (8001fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f1e:	400b      	ands	r3, r1
 8001f20:	68e9      	ldr	r1, [r5, #12]
 8001f22:	430b      	orrs	r3, r1
 8001f24:	60d3      	str	r3, [r2, #12]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f26:	682b      	ldr	r3, [r5, #0]
 8001f28:	071b      	lsls	r3, r3, #28
 8001f2a:	d507      	bpl.n	8001f3c <HAL_RCC_ClockConfig+0x160>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f2c:	491a      	ldr	r1, [pc, #104]	@ (8001f98 <HAL_RCC_ClockConfig+0x1bc>)
 8001f2e:	68cb      	ldr	r3, [r1, #12]
 8001f30:	4a1c      	ldr	r2, [pc, #112]	@ (8001fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8001f32:	4013      	ands	r3, r2
 8001f34:	692a      	ldr	r2, [r5, #16]
 8001f36:	00d2      	lsls	r2, r2, #3
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	60cb      	str	r3, [r1, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f3c:	f7ff fc68 	bl	8001810 <HAL_RCC_GetSysClockFreq>
 8001f40:	4b15      	ldr	r3, [pc, #84]	@ (8001f98 <HAL_RCC_ClockConfig+0x1bc>)
 8001f42:	68da      	ldr	r2, [r3, #12]
 8001f44:	0912      	lsrs	r2, r2, #4
 8001f46:	230f      	movs	r3, #15
 8001f48:	4013      	ands	r3, r2
 8001f4a:	4a17      	ldr	r2, [pc, #92]	@ (8001fa8 <HAL_RCC_ClockConfig+0x1cc>)
 8001f4c:	5cd3      	ldrb	r3, [r2, r3]
 8001f4e:	40d8      	lsrs	r0, r3
 8001f50:	4b16      	ldr	r3, [pc, #88]	@ (8001fac <HAL_RCC_ClockConfig+0x1d0>)
 8001f52:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8001f54:	4b16      	ldr	r3, [pc, #88]	@ (8001fb0 <HAL_RCC_ClockConfig+0x1d4>)
 8001f56:	6818      	ldr	r0, [r3, #0]
 8001f58:	f7fe ff10 	bl	8000d7c <HAL_InitTick>
}
 8001f5c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f5e:	4a0d      	ldr	r2, [pc, #52]	@ (8001f94 <HAL_RCC_ClockConfig+0x1b8>)
 8001f60:	6813      	ldr	r3, [r2, #0]
 8001f62:	2101      	movs	r1, #1
 8001f64:	438b      	bics	r3, r1
 8001f66:	4323      	orrs	r3, r4
 8001f68:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001f6a:	f7fe ff4f 	bl	8000e0c <HAL_GetTick>
 8001f6e:	0006      	movs	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f70:	4b08      	ldr	r3, [pc, #32]	@ (8001f94 <HAL_RCC_ClockConfig+0x1b8>)
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	2301      	movs	r3, #1
 8001f76:	4013      	ands	r3, r2
 8001f78:	42a3      	cmp	r3, r4
 8001f7a:	d0ca      	beq.n	8001f12 <HAL_RCC_ClockConfig+0x136>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f7c:	f7fe ff46 	bl	8000e0c <HAL_GetTick>
 8001f80:	1b80      	subs	r0, r0, r6
 8001f82:	4b06      	ldr	r3, [pc, #24]	@ (8001f9c <HAL_RCC_ClockConfig+0x1c0>)
 8001f84:	4298      	cmp	r0, r3
 8001f86:	d9f3      	bls.n	8001f70 <HAL_RCC_ClockConfig+0x194>
        return HAL_TIMEOUT;
 8001f88:	2003      	movs	r0, #3
 8001f8a:	e7e7      	b.n	8001f5c <HAL_RCC_ClockConfig+0x180>
    return HAL_ERROR;
 8001f8c:	2001      	movs	r0, #1
 8001f8e:	e7e5      	b.n	8001f5c <HAL_RCC_ClockConfig+0x180>
        return HAL_ERROR;
 8001f90:	2001      	movs	r0, #1
 8001f92:	e7e3      	b.n	8001f5c <HAL_RCC_ClockConfig+0x180>
 8001f94:	40022000 	.word	0x40022000
 8001f98:	40021000 	.word	0x40021000
 8001f9c:	00001388 	.word	0x00001388
 8001fa0:	fffff8ff 	.word	0xfffff8ff
 8001fa4:	ffffc7ff 	.word	0xffffc7ff
 8001fa8:	08003910 	.word	0x08003910
 8001fac:	20000014 	.word	0x20000014
 8001fb0:	2000001c 	.word	0x2000001c

08001fb4 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8001fb4:	4b01      	ldr	r3, [pc, #4]	@ (8001fbc <HAL_RCC_GetHCLKFreq+0x8>)
 8001fb6:	6818      	ldr	r0, [r3, #0]
}
 8001fb8:	4770      	bx	lr
 8001fba:	46c0      	nop			@ (mov r8, r8)
 8001fbc:	20000014 	.word	0x20000014

08001fc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fc0:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001fc2:	f7ff fff7 	bl	8001fb4 <HAL_RCC_GetHCLKFreq>
 8001fc6:	4b04      	ldr	r3, [pc, #16]	@ (8001fd8 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001fc8:	68da      	ldr	r2, [r3, #12]
 8001fca:	0a12      	lsrs	r2, r2, #8
 8001fcc:	2307      	movs	r3, #7
 8001fce:	4013      	ands	r3, r2
 8001fd0:	4a02      	ldr	r2, [pc, #8]	@ (8001fdc <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001fd2:	5cd3      	ldrb	r3, [r2, r3]
 8001fd4:	40d8      	lsrs	r0, r3
}
 8001fd6:	bd10      	pop	{r4, pc}
 8001fd8:	40021000 	.word	0x40021000
 8001fdc:	08003908 	.word	0x08003908

08001fe0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fe0:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001fe2:	f7ff ffe7 	bl	8001fb4 <HAL_RCC_GetHCLKFreq>
 8001fe6:	4b04      	ldr	r3, [pc, #16]	@ (8001ff8 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001fe8:	68da      	ldr	r2, [r3, #12]
 8001fea:	0ad2      	lsrs	r2, r2, #11
 8001fec:	2307      	movs	r3, #7
 8001fee:	4013      	ands	r3, r2
 8001ff0:	4a02      	ldr	r2, [pc, #8]	@ (8001ffc <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001ff2:	5cd3      	ldrb	r3, [r2, r3]
 8001ff4:	40d8      	lsrs	r0, r3
}
 8001ff6:	bd10      	pop	{r4, pc}
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	08003908 	.word	0x08003908

08002000 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002000:	b570      	push	{r4, r5, r6, lr}
 8002002:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002004:	6803      	ldr	r3, [r0, #0]
 8002006:	069b      	lsls	r3, r3, #26
 8002008:	d54e      	bpl.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0xa8>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800200a:	4b5b      	ldr	r3, [pc, #364]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 800200c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800200e:	00db      	lsls	r3, r3, #3
 8002010:	d474      	bmi.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0xfc>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002012:	4a59      	ldr	r2, [pc, #356]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8002014:	6b91      	ldr	r1, [r2, #56]	@ 0x38
 8002016:	2380      	movs	r3, #128	@ 0x80
 8002018:	055b      	lsls	r3, r3, #21
 800201a:	430b      	orrs	r3, r1
 800201c:	6393      	str	r3, [r2, #56]	@ 0x38
      pwrclkchanged = SET;
 800201e:	2601      	movs	r6, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002020:	4b56      	ldr	r3, [pc, #344]	@ (800217c <HAL_RCCEx_PeriphCLKConfig+0x17c>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	05db      	lsls	r3, r3, #23
 8002026:	d56b      	bpl.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x100>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002028:	4b53      	ldr	r3, [pc, #332]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 800202a:	681b      	ldr	r3, [r3, #0]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800202c:	6862      	ldr	r2, [r4, #4]
 800202e:	4053      	eors	r3, r2
 8002030:	21c0      	movs	r1, #192	@ 0xc0
 8002032:	0389      	lsls	r1, r1, #14
 8002034:	420b      	tst	r3, r1
 8002036:	d005      	beq.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x44>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002038:	23c0      	movs	r3, #192	@ 0xc0
 800203a:	029b      	lsls	r3, r3, #10
 800203c:	0011      	movs	r1, r2
 800203e:	4019      	ands	r1, r3
 8002040:	4299      	cmp	r1, r3
 8002042:	d071      	beq.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x128>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002044:	4b4c      	ldr	r3, [pc, #304]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8002046:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002048:	23c0      	movs	r3, #192	@ 0xc0
 800204a:	029b      	lsls	r3, r3, #10
 800204c:	0008      	movs	r0, r1
 800204e:	4018      	ands	r0, r3

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002050:	4219      	tst	r1, r3
 8002052:	d015      	beq.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x80>
 8002054:	401a      	ands	r2, r3
 8002056:	4282      	cmp	r2, r0
 8002058:	d012      	beq.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x80>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800205a:	6823      	ldr	r3, [r4, #0]
 800205c:	069b      	lsls	r3, r3, #26
 800205e:	d50f      	bpl.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x80>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002060:	4b45      	ldr	r3, [pc, #276]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8002062:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002064:	4946      	ldr	r1, [pc, #280]	@ (8002180 <HAL_RCCEx_PeriphCLKConfig+0x180>)
 8002066:	4011      	ands	r1, r2

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002068:	6d1d      	ldr	r5, [r3, #80]	@ 0x50
 800206a:	2080      	movs	r0, #128	@ 0x80
 800206c:	0300      	lsls	r0, r0, #12
 800206e:	4328      	orrs	r0, r5
 8002070:	6518      	str	r0, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002072:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8002074:	4d43      	ldr	r5, [pc, #268]	@ (8002184 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002076:	4028      	ands	r0, r5
 8002078:	6518      	str	r0, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800207a:	6519      	str	r1, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800207c:	05d2      	lsls	r2, r2, #23
 800207e:	d459      	bmi.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x134>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002080:	6823      	ldr	r3, [r4, #0]
 8002082:	069b      	lsls	r3, r3, #26
 8002084:	d50e      	bpl.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002086:	6863      	ldr	r3, [r4, #4]
 8002088:	22c0      	movs	r2, #192	@ 0xc0
 800208a:	0292      	lsls	r2, r2, #10
 800208c:	0019      	movs	r1, r3
 800208e:	4011      	ands	r1, r2
 8002090:	4291      	cmp	r1, r2
 8002092:	d05e      	beq.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002094:	4938      	ldr	r1, [pc, #224]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8002096:	6d0b      	ldr	r3, [r1, #80]	@ 0x50
 8002098:	6862      	ldr	r2, [r4, #4]
 800209a:	20c0      	movs	r0, #192	@ 0xc0
 800209c:	0280      	lsls	r0, r0, #10
 800209e:	4002      	ands	r2, r0
 80020a0:	4313      	orrs	r3, r2
 80020a2:	650b      	str	r3, [r1, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80020a4:	2e01      	cmp	r6, #1
 80020a6:	d05e      	beq.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x166>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80020a8:	6823      	ldr	r3, [r4, #0]
 80020aa:	079b      	lsls	r3, r3, #30
 80020ac:	d506      	bpl.n	80020bc <HAL_RCCEx_PeriphCLKConfig+0xbc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80020ae:	4a32      	ldr	r2, [pc, #200]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 80020b0:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 80020b2:	210c      	movs	r1, #12
 80020b4:	438b      	bics	r3, r1
 80020b6:	68a1      	ldr	r1, [r4, #8]
 80020b8:	430b      	orrs	r3, r1
 80020ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80020bc:	6823      	ldr	r3, [r4, #0]
 80020be:	075b      	lsls	r3, r3, #29
 80020c0:	d506      	bpl.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0xd0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80020c2:	4a2d      	ldr	r2, [pc, #180]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 80020c4:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 80020c6:	4930      	ldr	r1, [pc, #192]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80020c8:	400b      	ands	r3, r1
 80020ca:	68e1      	ldr	r1, [r4, #12]
 80020cc:	430b      	orrs	r3, r1
 80020ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020d0:	6823      	ldr	r3, [r4, #0]
 80020d2:	071b      	lsls	r3, r3, #28
 80020d4:	d506      	bpl.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020d6:	4a28      	ldr	r2, [pc, #160]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 80020d8:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 80020da:	492c      	ldr	r1, [pc, #176]	@ (800218c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80020dc:	400b      	ands	r3, r1
 80020de:	6921      	ldr	r1, [r4, #16]
 80020e0:	430b      	orrs	r3, r1
 80020e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80020e4:	6823      	ldr	r3, [r4, #0]
 80020e6:	061b      	lsls	r3, r3, #24
 80020e8:	d543      	bpl.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x172>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80020ea:	4a23      	ldr	r2, [pc, #140]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 80020ec:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 80020ee:	4928      	ldr	r1, [pc, #160]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80020f0:	400b      	ands	r3, r1
 80020f2:	6961      	ldr	r1, [r4, #20]
 80020f4:	430b      	orrs	r3, r1
 80020f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  return HAL_OK;
 80020f8:	2000      	movs	r0, #0
 80020fa:	e03b      	b.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x174>
  FlagStatus       pwrclkchanged = RESET;
 80020fc:	2600      	movs	r6, #0
 80020fe:	e78f      	b.n	8002020 <HAL_RCCEx_PeriphCLKConfig+0x20>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002100:	4a1e      	ldr	r2, [pc, #120]	@ (800217c <HAL_RCCEx_PeriphCLKConfig+0x17c>)
 8002102:	6811      	ldr	r1, [r2, #0]
 8002104:	2380      	movs	r3, #128	@ 0x80
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	430b      	orrs	r3, r1
 800210a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800210c:	f7fe fe7e 	bl	8000e0c <HAL_GetTick>
 8002110:	0005      	movs	r5, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002112:	4b1a      	ldr	r3, [pc, #104]	@ (800217c <HAL_RCCEx_PeriphCLKConfig+0x17c>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	05db      	lsls	r3, r3, #23
 8002118:	d486      	bmi.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0x28>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800211a:	f7fe fe77 	bl	8000e0c <HAL_GetTick>
 800211e:	1b40      	subs	r0, r0, r5
 8002120:	2864      	cmp	r0, #100	@ 0x64
 8002122:	d9f6      	bls.n	8002112 <HAL_RCCEx_PeriphCLKConfig+0x112>
          return HAL_TIMEOUT;
 8002124:	2003      	movs	r0, #3
 8002126:	e025      	b.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x174>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002128:	4b13      	ldr	r3, [pc, #76]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	039b      	lsls	r3, r3, #14
 800212e:	d589      	bpl.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x44>
          return HAL_ERROR;
 8002130:	2001      	movs	r0, #1
 8002132:	e01f      	b.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x174>
        tickstart = HAL_GetTick();
 8002134:	f7fe fe6a 	bl	8000e0c <HAL_GetTick>
 8002138:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800213a:	4b0f      	ldr	r3, [pc, #60]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 800213c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800213e:	059b      	lsls	r3, r3, #22
 8002140:	d49e      	bmi.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x80>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002142:	f7fe fe63 	bl	8000e0c <HAL_GetTick>
 8002146:	1b40      	subs	r0, r0, r5
 8002148:	4b12      	ldr	r3, [pc, #72]	@ (8002194 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 800214a:	4298      	cmp	r0, r3
 800214c:	d9f5      	bls.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x13a>
            return HAL_TIMEOUT;
 800214e:	2003      	movs	r0, #3
 8002150:	e010      	b.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x174>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002152:	4909      	ldr	r1, [pc, #36]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8002154:	680a      	ldr	r2, [r1, #0]
 8002156:	4810      	ldr	r0, [pc, #64]	@ (8002198 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8002158:	4002      	ands	r2, r0
 800215a:	20c0      	movs	r0, #192	@ 0xc0
 800215c:	0380      	lsls	r0, r0, #14
 800215e:	4003      	ands	r3, r0
 8002160:	4313      	orrs	r3, r2
 8002162:	600b      	str	r3, [r1, #0]
 8002164:	e796      	b.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x94>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002166:	4a04      	ldr	r2, [pc, #16]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8002168:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800216a:	490c      	ldr	r1, [pc, #48]	@ (800219c <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 800216c:	400b      	ands	r3, r1
 800216e:	6393      	str	r3, [r2, #56]	@ 0x38
 8002170:	e79a      	b.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0xa8>
  return HAL_OK;
 8002172:	2000      	movs	r0, #0
}
 8002174:	bd70      	pop	{r4, r5, r6, pc}
 8002176:	46c0      	nop			@ (mov r8, r8)
 8002178:	40021000 	.word	0x40021000
 800217c:	40007000 	.word	0x40007000
 8002180:	fffcffff 	.word	0xfffcffff
 8002184:	fff7ffff 	.word	0xfff7ffff
 8002188:	fffff3ff 	.word	0xfffff3ff
 800218c:	ffffcfff 	.word	0xffffcfff
 8002190:	fff3ffff 	.word	0xfff3ffff
 8002194:	00001388 	.word	0x00001388
 8002198:	ffcfffff 	.word	0xffcfffff
 800219c:	efffffff 	.word	0xefffffff

080021a0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80021a0:	b570      	push	{r4, r5, r6, lr}
 80021a2:	0004      	movs	r4, r0
  uint32_t tickstart = 0U;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80021a4:	6803      	ldr	r3, [r0, #0]
 80021a6:	4a0a      	ldr	r2, [pc, #40]	@ (80021d0 <HAL_RTC_WaitForSynchro+0x30>)
 80021a8:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021aa:	f7fe fe2f 	bl	8000e0c <HAL_GetTick>
 80021ae:	0005      	movs	r5, r0

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80021b0:	6823      	ldr	r3, [r4, #0]
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	069b      	lsls	r3, r3, #26
 80021b6:	d408      	bmi.n	80021ca <HAL_RTC_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80021b8:	f7fe fe28 	bl	8000e0c <HAL_GetTick>
 80021bc:	1b40      	subs	r0, r0, r5
 80021be:	23fa      	movs	r3, #250	@ 0xfa
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	4298      	cmp	r0, r3
 80021c4:	d9f4      	bls.n	80021b0 <HAL_RTC_WaitForSynchro+0x10>
    {
      return HAL_TIMEOUT;
 80021c6:	2003      	movs	r0, #3
 80021c8:	e000      	b.n	80021cc <HAL_RTC_WaitForSynchro+0x2c>
    }
  }

  return HAL_OK;
 80021ca:	2000      	movs	r0, #0
}
 80021cc:	bd70      	pop	{r4, r5, r6, pc}
 80021ce:	46c0      	nop			@ (mov r8, r8)
 80021d0:	0001ff5f 	.word	0x0001ff5f

080021d4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80021d4:	b570      	push	{r4, r5, r6, lr}
 80021d6:	0004      	movs	r4, r0
  uint32_t tickstart = 0U;
  HAL_StatusTypeDef status = HAL_OK;

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80021d8:	6802      	ldr	r2, [r0, #0]
 80021da:	68d3      	ldr	r3, [r2, #12]
 80021dc:	065b      	lsls	r3, r3, #25
 80021de:	d502      	bpl.n	80021e6 <RTC_EnterInitMode+0x12>
  HAL_StatusTypeDef status = HAL_OK;
 80021e0:	2500      	movs	r5, #0
      }
    }
  }

  return status;
}
 80021e2:	0028      	movs	r0, r5
 80021e4:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80021e6:	68d3      	ldr	r3, [r2, #12]
 80021e8:	2180      	movs	r1, #128	@ 0x80
 80021ea:	430b      	orrs	r3, r1
 80021ec:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 80021ee:	f7fe fe0d 	bl	8000e0c <HAL_GetTick>
 80021f2:	0006      	movs	r6, r0
  HAL_StatusTypeDef status = HAL_OK;
 80021f4:	2500      	movs	r5, #0
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80021f6:	6823      	ldr	r3, [r4, #0]
 80021f8:	68db      	ldr	r3, [r3, #12]
 80021fa:	065b      	lsls	r3, r3, #25
 80021fc:	d4f1      	bmi.n	80021e2 <RTC_EnterInitMode+0xe>
 80021fe:	2d01      	cmp	r5, #1
 8002200:	d0ef      	beq.n	80021e2 <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002202:	f7fe fe03 	bl	8000e0c <HAL_GetTick>
 8002206:	1b80      	subs	r0, r0, r6
 8002208:	22fa      	movs	r2, #250	@ 0xfa
 800220a:	0092      	lsls	r2, r2, #2
 800220c:	4290      	cmp	r0, r2
 800220e:	d9f2      	bls.n	80021f6 <RTC_EnterInitMode+0x22>
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002210:	2321      	movs	r3, #33	@ 0x21
 8002212:	2204      	movs	r2, #4
 8002214:	54e2      	strb	r2, [r4, r3]
        status = HAL_ERROR;
 8002216:	2501      	movs	r5, #1
 8002218:	e7ed      	b.n	80021f6 <RTC_EnterInitMode+0x22>

0800221a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800221a:	b510      	push	{r4, lr}
 800221c:	0004      	movs	r4, r0
  HAL_StatusTypeDef status = HAL_OK;

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800221e:	6802      	ldr	r2, [r0, #0]
 8002220:	68d3      	ldr	r3, [r2, #12]
 8002222:	2180      	movs	r1, #128	@ 0x80
 8002224:	438b      	bics	r3, r1
 8002226:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002228:	6803      	ldr	r3, [r0, #0]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	069b      	lsls	r3, r3, #26
 800222e:	d501      	bpl.n	8002234 <RTC_ExitInitMode+0x1a>
  HAL_StatusTypeDef status = HAL_OK;
 8002230:	2000      	movs	r0, #0
      status = HAL_ERROR;
    }
  }

  return status;
}
 8002232:	bd10      	pop	{r4, pc}
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002234:	f7ff ffb4 	bl	80021a0 <HAL_RTC_WaitForSynchro>
 8002238:	2800      	cmp	r0, #0
 800223a:	d0fa      	beq.n	8002232 <RTC_ExitInitMode+0x18>
      hrtc->State = HAL_RTC_STATE_ERROR;
 800223c:	2321      	movs	r3, #33	@ 0x21
 800223e:	2204      	movs	r2, #4
 8002240:	54e2      	strb	r2, [r4, r3]
      status = HAL_ERROR;
 8002242:	2001      	movs	r0, #1
 8002244:	e7f5      	b.n	8002232 <RTC_ExitInitMode+0x18>
	...

08002248 <HAL_RTC_Init>:
{
 8002248:	b570      	push	{r4, r5, r6, lr}
 800224a:	1e04      	subs	r4, r0, #0
  if (hrtc == NULL)
 800224c:	d04e      	beq.n	80022ec <HAL_RTC_Init+0xa4>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800224e:	2321      	movs	r3, #33	@ 0x21
 8002250:	5cc3      	ldrb	r3, [r0, r3]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d00b      	beq.n	800226e <HAL_RTC_Init+0x26>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002256:	2321      	movs	r3, #33	@ 0x21
 8002258:	2202      	movs	r2, #2
 800225a:	54e2      	strb	r2, [r4, r3]
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800225c:	6822      	ldr	r2, [r4, #0]
 800225e:	68d3      	ldr	r3, [r2, #12]
 8002260:	06db      	lsls	r3, r3, #27
 8002262:	d50a      	bpl.n	800227a <HAL_RTC_Init+0x32>
    status = HAL_OK;
 8002264:	2000      	movs	r0, #0
    hrtc->State = HAL_RTC_STATE_READY;
 8002266:	2321      	movs	r3, #33	@ 0x21
 8002268:	2201      	movs	r2, #1
 800226a:	54e2      	strb	r2, [r4, r3]
}
 800226c:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Lock = HAL_UNLOCKED;
 800226e:	3320      	adds	r3, #32
 8002270:	2200      	movs	r2, #0
 8002272:	54c2      	strb	r2, [r0, r3]
    HAL_RTC_MspInit(hrtc);
 8002274:	f7fe fbf0 	bl	8000a58 <HAL_RTC_MspInit>
 8002278:	e7ed      	b.n	8002256 <HAL_RTC_Init+0xe>
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800227a:	23ca      	movs	r3, #202	@ 0xca
 800227c:	6253      	str	r3, [r2, #36]	@ 0x24
 800227e:	6823      	ldr	r3, [r4, #0]
 8002280:	2253      	movs	r2, #83	@ 0x53
 8002282:	625a      	str	r2, [r3, #36]	@ 0x24
    status = RTC_EnterInitMode(hrtc);
 8002284:	0020      	movs	r0, r4
 8002286:	f7ff ffa5 	bl	80021d4 <RTC_EnterInitMode>
    if (status == HAL_OK)
 800228a:	2800      	cmp	r0, #0
 800228c:	d005      	beq.n	800229a <HAL_RTC_Init+0x52>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800228e:	6823      	ldr	r3, [r4, #0]
 8002290:	22ff      	movs	r2, #255	@ 0xff
 8002292:	625a      	str	r2, [r3, #36]	@ 0x24
  if (status == HAL_OK)
 8002294:	2800      	cmp	r0, #0
 8002296:	d1e9      	bne.n	800226c <HAL_RTC_Init+0x24>
 8002298:	e7e5      	b.n	8002266 <HAL_RTC_Init+0x1e>
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800229a:	6822      	ldr	r2, [r4, #0]
 800229c:	6893      	ldr	r3, [r2, #8]
 800229e:	4914      	ldr	r1, [pc, #80]	@ (80022f0 <HAL_RTC_Init+0xa8>)
 80022a0:	400b      	ands	r3, r1
 80022a2:	6093      	str	r3, [r2, #8]
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80022a4:	6821      	ldr	r1, [r4, #0]
 80022a6:	688a      	ldr	r2, [r1, #8]
 80022a8:	6863      	ldr	r3, [r4, #4]
 80022aa:	6920      	ldr	r0, [r4, #16]
 80022ac:	4303      	orrs	r3, r0
 80022ae:	69a0      	ldr	r0, [r4, #24]
 80022b0:	4303      	orrs	r3, r0
 80022b2:	4313      	orrs	r3, r2
 80022b4:	608b      	str	r3, [r1, #8]
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80022b6:	6823      	ldr	r3, [r4, #0]
 80022b8:	68e2      	ldr	r2, [r4, #12]
 80022ba:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80022bc:	6821      	ldr	r1, [r4, #0]
 80022be:	690b      	ldr	r3, [r1, #16]
 80022c0:	68a2      	ldr	r2, [r4, #8]
 80022c2:	0412      	lsls	r2, r2, #16
 80022c4:	4313      	orrs	r3, r2
 80022c6:	610b      	str	r3, [r1, #16]
      status = RTC_ExitInitMode(hrtc);
 80022c8:	0020      	movs	r0, r4
 80022ca:	f7ff ffa6 	bl	800221a <RTC_ExitInitMode>
    if (status == HAL_OK)
 80022ce:	2800      	cmp	r0, #0
 80022d0:	d1dd      	bne.n	800228e <HAL_RTC_Init+0x46>
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 80022d2:	6822      	ldr	r2, [r4, #0]
 80022d4:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 80022d6:	2103      	movs	r1, #3
 80022d8:	438b      	bics	r3, r1
 80022da:	64d3      	str	r3, [r2, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80022dc:	6821      	ldr	r1, [r4, #0]
 80022de:	6ccb      	ldr	r3, [r1, #76]	@ 0x4c
 80022e0:	69e2      	ldr	r2, [r4, #28]
 80022e2:	6965      	ldr	r5, [r4, #20]
 80022e4:	432a      	orrs	r2, r5
 80022e6:	4313      	orrs	r3, r2
 80022e8:	64cb      	str	r3, [r1, #76]	@ 0x4c
 80022ea:	e7d0      	b.n	800228e <HAL_RTC_Init+0x46>
    return HAL_ERROR;
 80022ec:	2001      	movs	r0, #1
 80022ee:	e7bd      	b.n	800226c <HAL_RTC_Init+0x24>
 80022f0:	ff8fffbf 	.word	0xff8fffbf

080022f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80022f4:	b510      	push	{r4, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022f6:	f3ef 8c10 	mrs	ip, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022fa:	2201      	movs	r2, #1
 80022fc:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002300:	6801      	ldr	r1, [r0, #0]
 8002302:	680b      	ldr	r3, [r1, #0]
 8002304:	4c12      	ldr	r4, [pc, #72]	@ (8002350 <UART_EndRxTransfer+0x5c>)
 8002306:	4023      	ands	r3, r4
 8002308:	600b      	str	r3, [r1, #0]
 800230a:	f38c 8810 	msr	PRIMASK, ip
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800230e:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002312:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002316:	6801      	ldr	r1, [r0, #0]
 8002318:	688b      	ldr	r3, [r1, #8]
 800231a:	4393      	bics	r3, r2
 800231c:	608b      	str	r3, [r1, #8]
 800231e:	f38c 8810 	msr	PRIMASK, ip

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002322:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8002324:	2b01      	cmp	r3, #1
 8002326:	d006      	beq.n	8002336 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002328:	2380      	movs	r3, #128	@ 0x80
 800232a:	2220      	movs	r2, #32
 800232c:	50c2      	str	r2, [r0, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800232e:	2300      	movs	r3, #0
 8002330:	6603      	str	r3, [r0, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002332:	6683      	str	r3, [r0, #104]	@ 0x68
}
 8002334:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002336:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800233a:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800233e:	6802      	ldr	r2, [r0, #0]
 8002340:	6813      	ldr	r3, [r2, #0]
 8002342:	3432      	adds	r4, #50	@ 0x32
 8002344:	34ff      	adds	r4, #255	@ 0xff
 8002346:	43a3      	bics	r3, r4
 8002348:	6013      	str	r3, [r2, #0]
 800234a:	f381 8810 	msr	PRIMASK, r1
}
 800234e:	e7eb      	b.n	8002328 <UART_EndRxTransfer+0x34>
 8002350:	fffffedf 	.word	0xfffffedf

08002354 <UART_SetConfig>:
{
 8002354:	b5d0      	push	{r4, r6, r7, lr}
 8002356:	0004      	movs	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8002358:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800235a:	6883      	ldr	r3, [r0, #8]
 800235c:	6902      	ldr	r2, [r0, #16]
 800235e:	4313      	orrs	r3, r2
 8002360:	6942      	ldr	r2, [r0, #20]
 8002362:	4313      	orrs	r3, r2
 8002364:	69c2      	ldr	r2, [r0, #28]
 8002366:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002368:	680a      	ldr	r2, [r1, #0]
 800236a:	4884      	ldr	r0, [pc, #528]	@ (800257c <UART_SetConfig+0x228>)
 800236c:	4002      	ands	r2, r0
 800236e:	4313      	orrs	r3, r2
 8002370:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002372:	6822      	ldr	r2, [r4, #0]
 8002374:	6853      	ldr	r3, [r2, #4]
 8002376:	4982      	ldr	r1, [pc, #520]	@ (8002580 <UART_SetConfig+0x22c>)
 8002378:	400b      	ands	r3, r1
 800237a:	68e1      	ldr	r1, [r4, #12]
 800237c:	430b      	orrs	r3, r1
 800237e:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002380:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002382:	6822      	ldr	r2, [r4, #0]
 8002384:	4b7f      	ldr	r3, [pc, #508]	@ (8002584 <UART_SetConfig+0x230>)
 8002386:	429a      	cmp	r2, r3
 8002388:	d001      	beq.n	800238e <UART_SetConfig+0x3a>
    tmpreg |= huart->Init.OneBitSampling;
 800238a:	6a23      	ldr	r3, [r4, #32]
 800238c:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800238e:	6893      	ldr	r3, [r2, #8]
 8002390:	487d      	ldr	r0, [pc, #500]	@ (8002588 <UART_SetConfig+0x234>)
 8002392:	4003      	ands	r3, r0
 8002394:	430b      	orrs	r3, r1
 8002396:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002398:	6822      	ldr	r2, [r4, #0]
 800239a:	4b7c      	ldr	r3, [pc, #496]	@ (800258c <UART_SetConfig+0x238>)
 800239c:	429a      	cmp	r2, r3
 800239e:	d012      	beq.n	80023c6 <UART_SetConfig+0x72>
 80023a0:	4b78      	ldr	r3, [pc, #480]	@ (8002584 <UART_SetConfig+0x230>)
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d020      	beq.n	80023e8 <UART_SetConfig+0x94>
 80023a6:	2310      	movs	r3, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 80023a8:	4976      	ldr	r1, [pc, #472]	@ (8002584 <UART_SetConfig+0x230>)
 80023aa:	428a      	cmp	r2, r1
 80023ac:	d042      	beq.n	8002434 <UART_SetConfig+0xe0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80023ae:	69e0      	ldr	r0, [r4, #28]
 80023b0:	2280      	movs	r2, #128	@ 0x80
 80023b2:	0212      	lsls	r2, r2, #8
 80023b4:	4290      	cmp	r0, r2
 80023b6:	d079      	beq.n	80024ac <UART_SetConfig+0x158>
    switch (clocksource)
 80023b8:	2b08      	cmp	r3, #8
 80023ba:	d900      	bls.n	80023be <UART_SetConfig+0x6a>
 80023bc:	e0d8      	b.n	8002570 <UART_SetConfig+0x21c>
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	4a73      	ldr	r2, [pc, #460]	@ (8002590 <UART_SetConfig+0x23c>)
 80023c2:	58d3      	ldr	r3, [r2, r3]
 80023c4:	469f      	mov	pc, r3
  UART_GETCLOCKSOURCE(huart, clocksource);
 80023c6:	4b73      	ldr	r3, [pc, #460]	@ (8002594 <UART_SetConfig+0x240>)
 80023c8:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80023ca:	230c      	movs	r3, #12
 80023cc:	400b      	ands	r3, r1
 80023ce:	2b08      	cmp	r3, #8
 80023d0:	d022      	beq.n	8002418 <UART_SetConfig+0xc4>
 80023d2:	d805      	bhi.n	80023e0 <UART_SetConfig+0x8c>
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d021      	beq.n	800241c <UART_SetConfig+0xc8>
 80023d8:	2b04      	cmp	r3, #4
 80023da:	d0e5      	beq.n	80023a8 <UART_SetConfig+0x54>
 80023dc:	2310      	movs	r3, #16
 80023de:	e7e3      	b.n	80023a8 <UART_SetConfig+0x54>
 80023e0:	2b0c      	cmp	r3, #12
 80023e2:	d11d      	bne.n	8002420 <UART_SetConfig+0xcc>
 80023e4:	3b04      	subs	r3, #4
 80023e6:	e7df      	b.n	80023a8 <UART_SetConfig+0x54>
 80023e8:	4b6a      	ldr	r3, [pc, #424]	@ (8002594 <UART_SetConfig+0x240>)
 80023ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023ec:	21c0      	movs	r1, #192	@ 0xc0
 80023ee:	0109      	lsls	r1, r1, #4
 80023f0:	400b      	ands	r3, r1
 80023f2:	2180      	movs	r1, #128	@ 0x80
 80023f4:	0109      	lsls	r1, r1, #4
 80023f6:	428b      	cmp	r3, r1
 80023f8:	d014      	beq.n	8002424 <UART_SetConfig+0xd0>
 80023fa:	d807      	bhi.n	800240c <UART_SetConfig+0xb8>
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d013      	beq.n	8002428 <UART_SetConfig+0xd4>
 8002400:	2180      	movs	r1, #128	@ 0x80
 8002402:	00c9      	lsls	r1, r1, #3
 8002404:	428b      	cmp	r3, r1
 8002406:	d111      	bne.n	800242c <UART_SetConfig+0xd8>
 8002408:	2304      	movs	r3, #4
 800240a:	e7cd      	b.n	80023a8 <UART_SetConfig+0x54>
 800240c:	21c0      	movs	r1, #192	@ 0xc0
 800240e:	0109      	lsls	r1, r1, #4
 8002410:	428b      	cmp	r3, r1
 8002412:	d10d      	bne.n	8002430 <UART_SetConfig+0xdc>
 8002414:	2308      	movs	r3, #8
 8002416:	e7c7      	b.n	80023a8 <UART_SetConfig+0x54>
 8002418:	2302      	movs	r3, #2
 800241a:	e7c5      	b.n	80023a8 <UART_SetConfig+0x54>
 800241c:	2300      	movs	r3, #0
 800241e:	e7c3      	b.n	80023a8 <UART_SetConfig+0x54>
 8002420:	2310      	movs	r3, #16
 8002422:	e7c1      	b.n	80023a8 <UART_SetConfig+0x54>
 8002424:	2302      	movs	r3, #2
 8002426:	e7bf      	b.n	80023a8 <UART_SetConfig+0x54>
 8002428:	2300      	movs	r3, #0
 800242a:	e7bd      	b.n	80023a8 <UART_SetConfig+0x54>
 800242c:	2310      	movs	r3, #16
 800242e:	e7bb      	b.n	80023a8 <UART_SetConfig+0x54>
 8002430:	2310      	movs	r3, #16
 8002432:	e7b9      	b.n	80023a8 <UART_SetConfig+0x54>
    switch (clocksource)
 8002434:	2b04      	cmp	r3, #4
 8002436:	d034      	beq.n	80024a2 <UART_SetConfig+0x14e>
 8002438:	d80b      	bhi.n	8002452 <UART_SetConfig+0xfe>
 800243a:	2b00      	cmp	r3, #0
 800243c:	d02b      	beq.n	8002496 <UART_SetConfig+0x142>
 800243e:	2b02      	cmp	r3, #2
 8002440:	d105      	bne.n	800244e <UART_SetConfig+0xfa>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002442:	4b54      	ldr	r3, [pc, #336]	@ (8002594 <UART_SetConfig+0x240>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	06db      	lsls	r3, r3, #27
 8002448:	d42e      	bmi.n	80024a8 <UART_SetConfig+0x154>
          pclk = (uint32_t) HSI_VALUE;
 800244a:	4853      	ldr	r0, [pc, #332]	@ (8002598 <UART_SetConfig+0x244>)
 800244c:	e005      	b.n	800245a <UART_SetConfig+0x106>
    switch (clocksource)
 800244e:	2001      	movs	r0, #1
 8002450:	e06d      	b.n	800252e <UART_SetConfig+0x1da>
 8002452:	2b08      	cmp	r3, #8
 8002454:	d11d      	bne.n	8002492 <UART_SetConfig+0x13e>
 8002456:	2080      	movs	r0, #128	@ 0x80
 8002458:	0200      	lsls	r0, r0, #8
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800245a:	6862      	ldr	r2, [r4, #4]
 800245c:	0053      	lsls	r3, r2, #1
 800245e:	189b      	adds	r3, r3, r2
 8002460:	4283      	cmp	r3, r0
 8002462:	d900      	bls.n	8002466 <UART_SetConfig+0x112>
 8002464:	e078      	b.n	8002558 <UART_SetConfig+0x204>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002466:	0313      	lsls	r3, r2, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002468:	4283      	cmp	r3, r0
 800246a:	d200      	bcs.n	800246e <UART_SetConfig+0x11a>
 800246c:	e076      	b.n	800255c <UART_SetConfig+0x208>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800246e:	0e07      	lsrs	r7, r0, #24
 8002470:	0206      	lsls	r6, r0, #8
 8002472:	0850      	lsrs	r0, r2, #1
 8002474:	2100      	movs	r1, #0
 8002476:	1980      	adds	r0, r0, r6
 8002478:	4179      	adcs	r1, r7
 800247a:	2300      	movs	r3, #0
 800247c:	f7fd feda 	bl	8000234 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002480:	4b46      	ldr	r3, [pc, #280]	@ (800259c <UART_SetConfig+0x248>)
 8002482:	18c2      	adds	r2, r0, r3
 8002484:	4b46      	ldr	r3, [pc, #280]	@ (80025a0 <UART_SetConfig+0x24c>)
 8002486:	429a      	cmp	r2, r3
 8002488:	d86a      	bhi.n	8002560 <UART_SetConfig+0x20c>
          huart->Instance->BRR = usartdiv;
 800248a:	6823      	ldr	r3, [r4, #0]
 800248c:	60d8      	str	r0, [r3, #12]
 800248e:	2000      	movs	r0, #0
 8002490:	e04d      	b.n	800252e <UART_SetConfig+0x1da>
    switch (clocksource)
 8002492:	2001      	movs	r0, #1
 8002494:	e04b      	b.n	800252e <UART_SetConfig+0x1da>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002496:	f7ff fd93 	bl	8001fc0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800249a:	2800      	cmp	r0, #0
 800249c:	d1dd      	bne.n	800245a <UART_SetConfig+0x106>
 800249e:	2000      	movs	r0, #0
 80024a0:	e045      	b.n	800252e <UART_SetConfig+0x1da>
        pclk = HAL_RCC_GetSysClockFreq();
 80024a2:	f7ff f9b5 	bl	8001810 <HAL_RCC_GetSysClockFreq>
        break;
 80024a6:	e7f8      	b.n	800249a <UART_SetConfig+0x146>
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80024a8:	483e      	ldr	r0, [pc, #248]	@ (80025a4 <UART_SetConfig+0x250>)
 80024aa:	e7d6      	b.n	800245a <UART_SetConfig+0x106>
    switch (clocksource)
 80024ac:	2b08      	cmp	r3, #8
 80024ae:	d859      	bhi.n	8002564 <UART_SetConfig+0x210>
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	4a3d      	ldr	r2, [pc, #244]	@ (80025a8 <UART_SetConfig+0x254>)
 80024b4:	58d3      	ldr	r3, [r2, r3]
 80024b6:	469f      	mov	pc, r3
        pclk = HAL_RCC_GetPCLK1Freq();
 80024b8:	f7ff fd82 	bl	8001fc0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80024bc:	2800      	cmp	r0, #0
 80024be:	d053      	beq.n	8002568 <UART_SetConfig+0x214>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80024c0:	0040      	lsls	r0, r0, #1
 80024c2:	6861      	ldr	r1, [r4, #4]
 80024c4:	084b      	lsrs	r3, r1, #1
 80024c6:	18c0      	adds	r0, r0, r3
 80024c8:	f7fd fe28 	bl	800011c <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80024cc:	0002      	movs	r2, r0
 80024ce:	3a10      	subs	r2, #16
 80024d0:	4b36      	ldr	r3, [pc, #216]	@ (80025ac <UART_SetConfig+0x258>)
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d84a      	bhi.n	800256c <UART_SetConfig+0x218>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80024d6:	b282      	uxth	r2, r0
 80024d8:	230f      	movs	r3, #15
 80024da:	439a      	bics	r2, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80024dc:	0840      	lsrs	r0, r0, #1
 80024de:	3b08      	subs	r3, #8
 80024e0:	4003      	ands	r3, r0
 80024e2:	4313      	orrs	r3, r2
        huart->Instance->BRR = brrtemp;
 80024e4:	6822      	ldr	r2, [r4, #0]
 80024e6:	60d3      	str	r3, [r2, #12]
 80024e8:	2000      	movs	r0, #0
 80024ea:	e020      	b.n	800252e <UART_SetConfig+0x1da>
        pclk = HAL_RCC_GetPCLK2Freq();
 80024ec:	f7ff fd78 	bl	8001fe0 <HAL_RCC_GetPCLK2Freq>
        break;
 80024f0:	e7e4      	b.n	80024bc <UART_SetConfig+0x168>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80024f2:	4b28      	ldr	r3, [pc, #160]	@ (8002594 <UART_SetConfig+0x240>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	06db      	lsls	r3, r3, #27
 80024f8:	d404      	bmi.n	8002504 <UART_SetConfig+0x1b0>
          pclk = (uint32_t) HSI_VALUE;
 80024fa:	4827      	ldr	r0, [pc, #156]	@ (8002598 <UART_SetConfig+0x244>)
 80024fc:	e7e0      	b.n	80024c0 <UART_SetConfig+0x16c>
        pclk = HAL_RCC_GetSysClockFreq();
 80024fe:	f7ff f987 	bl	8001810 <HAL_RCC_GetSysClockFreq>
        break;
 8002502:	e7db      	b.n	80024bc <UART_SetConfig+0x168>
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002504:	4827      	ldr	r0, [pc, #156]	@ (80025a4 <UART_SetConfig+0x250>)
 8002506:	e7db      	b.n	80024c0 <UART_SetConfig+0x16c>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002508:	f7ff fd5a 	bl	8001fc0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800250c:	2800      	cmp	r0, #0
 800250e:	d031      	beq.n	8002574 <UART_SetConfig+0x220>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002510:	6861      	ldr	r1, [r4, #4]
 8002512:	084b      	lsrs	r3, r1, #1
 8002514:	1818      	adds	r0, r3, r0
 8002516:	f7fd fe01 	bl	800011c <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800251a:	0002      	movs	r2, r0
 800251c:	3a10      	subs	r2, #16
 800251e:	4b23      	ldr	r3, [pc, #140]	@ (80025ac <UART_SetConfig+0x258>)
 8002520:	429a      	cmp	r2, r3
 8002522:	d829      	bhi.n	8002578 <UART_SetConfig+0x224>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002524:	6823      	ldr	r3, [r4, #0]
 8002526:	0400      	lsls	r0, r0, #16
 8002528:	0c00      	lsrs	r0, r0, #16
 800252a:	60d8      	str	r0, [r3, #12]
 800252c:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 800252e:	2300      	movs	r3, #0
 8002530:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 8002532:	66e3      	str	r3, [r4, #108]	@ 0x6c
}
 8002534:	bdd0      	pop	{r4, r6, r7, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8002536:	f7ff fd53 	bl	8001fe0 <HAL_RCC_GetPCLK2Freq>
        break;
 800253a:	e7e7      	b.n	800250c <UART_SetConfig+0x1b8>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800253c:	4b15      	ldr	r3, [pc, #84]	@ (8002594 <UART_SetConfig+0x240>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	06db      	lsls	r3, r3, #27
 8002542:	d407      	bmi.n	8002554 <UART_SetConfig+0x200>
          pclk = (uint32_t) HSI_VALUE;
 8002544:	4814      	ldr	r0, [pc, #80]	@ (8002598 <UART_SetConfig+0x244>)
 8002546:	e7e3      	b.n	8002510 <UART_SetConfig+0x1bc>
        pclk = HAL_RCC_GetSysClockFreq();
 8002548:	f7ff f962 	bl	8001810 <HAL_RCC_GetSysClockFreq>
        break;
 800254c:	e7de      	b.n	800250c <UART_SetConfig+0x1b8>
    switch (clocksource)
 800254e:	2080      	movs	r0, #128	@ 0x80
 8002550:	0200      	lsls	r0, r0, #8
 8002552:	e7dd      	b.n	8002510 <UART_SetConfig+0x1bc>
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002554:	4813      	ldr	r0, [pc, #76]	@ (80025a4 <UART_SetConfig+0x250>)
 8002556:	e7db      	b.n	8002510 <UART_SetConfig+0x1bc>
        ret = HAL_ERROR;
 8002558:	2001      	movs	r0, #1
 800255a:	e7e8      	b.n	800252e <UART_SetConfig+0x1da>
 800255c:	2001      	movs	r0, #1
 800255e:	e7e6      	b.n	800252e <UART_SetConfig+0x1da>
          ret = HAL_ERROR;
 8002560:	2001      	movs	r0, #1
 8002562:	e7e4      	b.n	800252e <UART_SetConfig+0x1da>
    switch (clocksource)
 8002564:	2001      	movs	r0, #1
 8002566:	e7e2      	b.n	800252e <UART_SetConfig+0x1da>
 8002568:	2000      	movs	r0, #0
 800256a:	e7e0      	b.n	800252e <UART_SetConfig+0x1da>
        ret = HAL_ERROR;
 800256c:	2001      	movs	r0, #1
 800256e:	e7de      	b.n	800252e <UART_SetConfig+0x1da>
    switch (clocksource)
 8002570:	2001      	movs	r0, #1
 8002572:	e7dc      	b.n	800252e <UART_SetConfig+0x1da>
 8002574:	2000      	movs	r0, #0
 8002576:	e7da      	b.n	800252e <UART_SetConfig+0x1da>
        ret = HAL_ERROR;
 8002578:	2001      	movs	r0, #1
 800257a:	e7d8      	b.n	800252e <UART_SetConfig+0x1da>
 800257c:	efff69f3 	.word	0xefff69f3
 8002580:	ffffcfff 	.word	0xffffcfff
 8002584:	40004800 	.word	0x40004800
 8002588:	fffff4ff 	.word	0xfffff4ff
 800258c:	40004400 	.word	0x40004400
 8002590:	08003920 	.word	0x08003920
 8002594:	40021000 	.word	0x40021000
 8002598:	00f42400 	.word	0x00f42400
 800259c:	fffffd00 	.word	0xfffffd00
 80025a0:	000ffcff 	.word	0x000ffcff
 80025a4:	003d0900 	.word	0x003d0900
 80025a8:	08003944 	.word	0x08003944
 80025ac:	0000ffef 	.word	0x0000ffef

080025b0 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80025b0:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80025b2:	07db      	lsls	r3, r3, #31
 80025b4:	d506      	bpl.n	80025c4 <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80025b6:	6802      	ldr	r2, [r0, #0]
 80025b8:	6853      	ldr	r3, [r2, #4]
 80025ba:	492c      	ldr	r1, [pc, #176]	@ (800266c <UART_AdvFeatureConfig+0xbc>)
 80025bc:	400b      	ands	r3, r1
 80025be:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 80025c0:	430b      	orrs	r3, r1
 80025c2:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80025c4:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80025c6:	079b      	lsls	r3, r3, #30
 80025c8:	d506      	bpl.n	80025d8 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80025ca:	6802      	ldr	r2, [r0, #0]
 80025cc:	6853      	ldr	r3, [r2, #4]
 80025ce:	4928      	ldr	r1, [pc, #160]	@ (8002670 <UART_AdvFeatureConfig+0xc0>)
 80025d0:	400b      	ands	r3, r1
 80025d2:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80025d4:	430b      	orrs	r3, r1
 80025d6:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80025d8:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80025da:	075b      	lsls	r3, r3, #29
 80025dc:	d506      	bpl.n	80025ec <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80025de:	6802      	ldr	r2, [r0, #0]
 80025e0:	6853      	ldr	r3, [r2, #4]
 80025e2:	4924      	ldr	r1, [pc, #144]	@ (8002674 <UART_AdvFeatureConfig+0xc4>)
 80025e4:	400b      	ands	r3, r1
 80025e6:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 80025e8:	430b      	orrs	r3, r1
 80025ea:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80025ec:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80025ee:	071b      	lsls	r3, r3, #28
 80025f0:	d506      	bpl.n	8002600 <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80025f2:	6802      	ldr	r2, [r0, #0]
 80025f4:	6853      	ldr	r3, [r2, #4]
 80025f6:	4920      	ldr	r1, [pc, #128]	@ (8002678 <UART_AdvFeatureConfig+0xc8>)
 80025f8:	400b      	ands	r3, r1
 80025fa:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 80025fc:	430b      	orrs	r3, r1
 80025fe:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002600:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8002602:	06db      	lsls	r3, r3, #27
 8002604:	d506      	bpl.n	8002614 <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002606:	6802      	ldr	r2, [r0, #0]
 8002608:	6893      	ldr	r3, [r2, #8]
 800260a:	491c      	ldr	r1, [pc, #112]	@ (800267c <UART_AdvFeatureConfig+0xcc>)
 800260c:	400b      	ands	r3, r1
 800260e:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8002610:	430b      	orrs	r3, r1
 8002612:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002614:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8002616:	069b      	lsls	r3, r3, #26
 8002618:	d506      	bpl.n	8002628 <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800261a:	6802      	ldr	r2, [r0, #0]
 800261c:	6893      	ldr	r3, [r2, #8]
 800261e:	4918      	ldr	r1, [pc, #96]	@ (8002680 <UART_AdvFeatureConfig+0xd0>)
 8002620:	400b      	ands	r3, r1
 8002622:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 8002624:	430b      	orrs	r3, r1
 8002626:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002628:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800262a:	065b      	lsls	r3, r3, #25
 800262c:	d50b      	bpl.n	8002646 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800262e:	6802      	ldr	r2, [r0, #0]
 8002630:	6853      	ldr	r3, [r2, #4]
 8002632:	4914      	ldr	r1, [pc, #80]	@ (8002684 <UART_AdvFeatureConfig+0xd4>)
 8002634:	400b      	ands	r3, r1
 8002636:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8002638:	430b      	orrs	r3, r1
 800263a:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800263c:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 800263e:	2380      	movs	r3, #128	@ 0x80
 8002640:	035b      	lsls	r3, r3, #13
 8002642:	429a      	cmp	r2, r3
 8002644:	d00a      	beq.n	800265c <UART_AdvFeatureConfig+0xac>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002646:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8002648:	061b      	lsls	r3, r3, #24
 800264a:	d506      	bpl.n	800265a <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800264c:	6802      	ldr	r2, [r0, #0]
 800264e:	6853      	ldr	r3, [r2, #4]
 8002650:	490d      	ldr	r1, [pc, #52]	@ (8002688 <UART_AdvFeatureConfig+0xd8>)
 8002652:	400b      	ands	r3, r1
 8002654:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8002656:	430b      	orrs	r3, r1
 8002658:	6053      	str	r3, [r2, #4]
}
 800265a:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800265c:	6802      	ldr	r2, [r0, #0]
 800265e:	6853      	ldr	r3, [r2, #4]
 8002660:	490a      	ldr	r1, [pc, #40]	@ (800268c <UART_AdvFeatureConfig+0xdc>)
 8002662:	400b      	ands	r3, r1
 8002664:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 8002666:	430b      	orrs	r3, r1
 8002668:	6053      	str	r3, [r2, #4]
 800266a:	e7ec      	b.n	8002646 <UART_AdvFeatureConfig+0x96>
 800266c:	fffdffff 	.word	0xfffdffff
 8002670:	fffeffff 	.word	0xfffeffff
 8002674:	fffbffff 	.word	0xfffbffff
 8002678:	ffff7fff 	.word	0xffff7fff
 800267c:	ffffefff 	.word	0xffffefff
 8002680:	ffffdfff 	.word	0xffffdfff
 8002684:	ffefffff 	.word	0xffefffff
 8002688:	fff7ffff 	.word	0xfff7ffff
 800268c:	ff9fffff 	.word	0xff9fffff

08002690 <UART_WaitOnFlagUntilTimeout>:
{
 8002690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002692:	46ce      	mov	lr, r9
 8002694:	4647      	mov	r7, r8
 8002696:	b580      	push	{r7, lr}
 8002698:	0006      	movs	r6, r0
 800269a:	000d      	movs	r5, r1
 800269c:	0017      	movs	r7, r2
 800269e:	4699      	mov	r9, r3
 80026a0:	9b08      	ldr	r3, [sp, #32]
 80026a2:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026a4:	6833      	ldr	r3, [r6, #0]
 80026a6:	69dc      	ldr	r4, [r3, #28]
 80026a8:	402c      	ands	r4, r5
 80026aa:	1b64      	subs	r4, r4, r5
 80026ac:	4263      	negs	r3, r4
 80026ae:	415c      	adcs	r4, r3
 80026b0:	42bc      	cmp	r4, r7
 80026b2:	d12f      	bne.n	8002714 <UART_WaitOnFlagUntilTimeout+0x84>
    if (Timeout != HAL_MAX_DELAY)
 80026b4:	4643      	mov	r3, r8
 80026b6:	3301      	adds	r3, #1
 80026b8:	d0f4      	beq.n	80026a4 <UART_WaitOnFlagUntilTimeout+0x14>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026ba:	f7fe fba7 	bl	8000e0c <HAL_GetTick>
 80026be:	464b      	mov	r3, r9
 80026c0:	1ac0      	subs	r0, r0, r3
 80026c2:	4540      	cmp	r0, r8
 80026c4:	d82b      	bhi.n	800271e <UART_WaitOnFlagUntilTimeout+0x8e>
 80026c6:	4643      	mov	r3, r8
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d02a      	beq.n	8002722 <UART_WaitOnFlagUntilTimeout+0x92>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80026cc:	6833      	ldr	r3, [r6, #0]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	0752      	lsls	r2, r2, #29
 80026d2:	d5e7      	bpl.n	80026a4 <UART_WaitOnFlagUntilTimeout+0x14>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80026d4:	69da      	ldr	r2, [r3, #28]
 80026d6:	0712      	lsls	r2, r2, #28
 80026d8:	d410      	bmi.n	80026fc <UART_WaitOnFlagUntilTimeout+0x6c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80026da:	69da      	ldr	r2, [r3, #28]
 80026dc:	0512      	lsls	r2, r2, #20
 80026de:	d5e1      	bpl.n	80026a4 <UART_WaitOnFlagUntilTimeout+0x14>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80026e0:	2280      	movs	r2, #128	@ 0x80
 80026e2:	0112      	lsls	r2, r2, #4
 80026e4:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 80026e6:	0030      	movs	r0, r6
 80026e8:	f7ff fe04 	bl	80022f4 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80026ec:	2384      	movs	r3, #132	@ 0x84
 80026ee:	2220      	movs	r2, #32
 80026f0:	50f2      	str	r2, [r6, r3]
          __HAL_UNLOCK(huart);
 80026f2:	3b0c      	subs	r3, #12
 80026f4:	2200      	movs	r2, #0
 80026f6:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 80026f8:	2003      	movs	r0, #3
 80026fa:	e00c      	b.n	8002716 <UART_WaitOnFlagUntilTimeout+0x86>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80026fc:	2408      	movs	r4, #8
 80026fe:	621c      	str	r4, [r3, #32]
           UART_EndRxTransfer(huart);
 8002700:	0030      	movs	r0, r6
 8002702:	f7ff fdf7 	bl	80022f4 <UART_EndRxTransfer>
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002706:	2384      	movs	r3, #132	@ 0x84
 8002708:	50f4      	str	r4, [r6, r3]
           __HAL_UNLOCK(huart);
 800270a:	3b0c      	subs	r3, #12
 800270c:	2200      	movs	r2, #0
 800270e:	54f2      	strb	r2, [r6, r3]
           return HAL_ERROR;
 8002710:	2001      	movs	r0, #1
 8002712:	e000      	b.n	8002716 <UART_WaitOnFlagUntilTimeout+0x86>
  return HAL_OK;
 8002714:	2000      	movs	r0, #0
}
 8002716:	bcc0      	pop	{r6, r7}
 8002718:	46b9      	mov	r9, r7
 800271a:	46b0      	mov	r8, r6
 800271c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 800271e:	2003      	movs	r0, #3
 8002720:	e7f9      	b.n	8002716 <UART_WaitOnFlagUntilTimeout+0x86>
 8002722:	2003      	movs	r0, #3
 8002724:	e7f7      	b.n	8002716 <UART_WaitOnFlagUntilTimeout+0x86>
	...

08002728 <UART_CheckIdleState>:
{
 8002728:	b530      	push	{r4, r5, lr}
 800272a:	b083      	sub	sp, #12
 800272c:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800272e:	2384      	movs	r3, #132	@ 0x84
 8002730:	2200      	movs	r2, #0
 8002732:	50c2      	str	r2, [r0, r3]
  tickstart = HAL_GetTick();
 8002734:	f7fe fb6a 	bl	8000e0c <HAL_GetTick>
 8002738:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800273a:	6823      	ldr	r3, [r4, #0]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	071b      	lsls	r3, r3, #28
 8002740:	d40f      	bmi.n	8002762 <UART_CheckIdleState+0x3a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002742:	6823      	ldr	r3, [r4, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	075b      	lsls	r3, r3, #29
 8002748:	d429      	bmi.n	800279e <UART_CheckIdleState+0x76>
  huart->gState = HAL_UART_STATE_READY;
 800274a:	2320      	movs	r3, #32
 800274c:	67e3      	str	r3, [r4, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800274e:	2280      	movs	r2, #128	@ 0x80
 8002750:	50a3      	str	r3, [r4, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002752:	2300      	movs	r3, #0
 8002754:	6623      	str	r3, [r4, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002756:	6663      	str	r3, [r4, #100]	@ 0x64
  __HAL_UNLOCK(huart);
 8002758:	3a08      	subs	r2, #8
 800275a:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 800275c:	2000      	movs	r0, #0
}
 800275e:	b003      	add	sp, #12
 8002760:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002762:	2180      	movs	r1, #128	@ 0x80
 8002764:	4b22      	ldr	r3, [pc, #136]	@ (80027f0 <UART_CheckIdleState+0xc8>)
 8002766:	9300      	str	r3, [sp, #0]
 8002768:	0003      	movs	r3, r0
 800276a:	2200      	movs	r2, #0
 800276c:	0389      	lsls	r1, r1, #14
 800276e:	0020      	movs	r0, r4
 8002770:	f7ff ff8e 	bl	8002690 <UART_WaitOnFlagUntilTimeout>
 8002774:	2800      	cmp	r0, #0
 8002776:	d0e4      	beq.n	8002742 <UART_CheckIdleState+0x1a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002778:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800277c:	2301      	movs	r3, #1
 800277e:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002782:	6822      	ldr	r2, [r4, #0]
 8002784:	6813      	ldr	r3, [r2, #0]
 8002786:	2080      	movs	r0, #128	@ 0x80
 8002788:	4383      	bics	r3, r0
 800278a:	6013      	str	r3, [r2, #0]
 800278c:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 8002790:	2320      	movs	r3, #32
 8002792:	67e3      	str	r3, [r4, #124]	@ 0x7c
      __HAL_UNLOCK(huart);
 8002794:	3358      	adds	r3, #88	@ 0x58
 8002796:	2200      	movs	r2, #0
 8002798:	54e2      	strb	r2, [r4, r3]
      return HAL_TIMEOUT;
 800279a:	387d      	subs	r0, #125	@ 0x7d
 800279c:	e7df      	b.n	800275e <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800279e:	2180      	movs	r1, #128	@ 0x80
 80027a0:	4b13      	ldr	r3, [pc, #76]	@ (80027f0 <UART_CheckIdleState+0xc8>)
 80027a2:	9300      	str	r3, [sp, #0]
 80027a4:	002b      	movs	r3, r5
 80027a6:	2200      	movs	r2, #0
 80027a8:	03c9      	lsls	r1, r1, #15
 80027aa:	0020      	movs	r0, r4
 80027ac:	f7ff ff70 	bl	8002690 <UART_WaitOnFlagUntilTimeout>
 80027b0:	2800      	cmp	r0, #0
 80027b2:	d0ca      	beq.n	800274a <UART_CheckIdleState+0x22>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027b4:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027b8:	2201      	movs	r2, #1
 80027ba:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80027be:	6821      	ldr	r1, [r4, #0]
 80027c0:	680b      	ldr	r3, [r1, #0]
 80027c2:	4d0c      	ldr	r5, [pc, #48]	@ (80027f4 <UART_CheckIdleState+0xcc>)
 80027c4:	402b      	ands	r3, r5
 80027c6:	600b      	str	r3, [r1, #0]
 80027c8:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027cc:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027d0:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027d4:	6821      	ldr	r1, [r4, #0]
 80027d6:	688b      	ldr	r3, [r1, #8]
 80027d8:	4393      	bics	r3, r2
 80027da:	608b      	str	r3, [r1, #8]
 80027dc:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 80027e0:	2380      	movs	r3, #128	@ 0x80
 80027e2:	321f      	adds	r2, #31
 80027e4:	50e2      	str	r2, [r4, r3]
      __HAL_UNLOCK(huart);
 80027e6:	3b08      	subs	r3, #8
 80027e8:	2200      	movs	r2, #0
 80027ea:	54e2      	strb	r2, [r4, r3]
      return HAL_TIMEOUT;
 80027ec:	2003      	movs	r0, #3
 80027ee:	e7b6      	b.n	800275e <UART_CheckIdleState+0x36>
 80027f0:	01ffffff 	.word	0x01ffffff
 80027f4:	fffffedf 	.word	0xfffffedf

080027f8 <HAL_UART_Init>:
{
 80027f8:	b510      	push	{r4, lr}
 80027fa:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 80027fc:	d02e      	beq.n	800285c <HAL_UART_Init+0x64>
  if (huart->gState == HAL_UART_STATE_RESET)
 80027fe:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 8002800:	2b00      	cmp	r3, #0
 8002802:	d021      	beq.n	8002848 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8002804:	2324      	movs	r3, #36	@ 0x24
 8002806:	67e3      	str	r3, [r4, #124]	@ 0x7c
  __HAL_UART_DISABLE(huart);
 8002808:	6822      	ldr	r2, [r4, #0]
 800280a:	6813      	ldr	r3, [r2, #0]
 800280c:	2101      	movs	r1, #1
 800280e:	438b      	bics	r3, r1
 8002810:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002812:	0020      	movs	r0, r4
 8002814:	f7ff fd9e 	bl	8002354 <UART_SetConfig>
 8002818:	2801      	cmp	r0, #1
 800281a:	d014      	beq.n	8002846 <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800281c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800281e:	2b00      	cmp	r3, #0
 8002820:	d118      	bne.n	8002854 <HAL_UART_Init+0x5c>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002822:	6822      	ldr	r2, [r4, #0]
 8002824:	6853      	ldr	r3, [r2, #4]
 8002826:	490e      	ldr	r1, [pc, #56]	@ (8002860 <HAL_UART_Init+0x68>)
 8002828:	400b      	ands	r3, r1
 800282a:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800282c:	6822      	ldr	r2, [r4, #0]
 800282e:	6893      	ldr	r3, [r2, #8]
 8002830:	212a      	movs	r1, #42	@ 0x2a
 8002832:	438b      	bics	r3, r1
 8002834:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8002836:	6822      	ldr	r2, [r4, #0]
 8002838:	6813      	ldr	r3, [r2, #0]
 800283a:	3929      	subs	r1, #41	@ 0x29
 800283c:	430b      	orrs	r3, r1
 800283e:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8002840:	0020      	movs	r0, r4
 8002842:	f7ff ff71 	bl	8002728 <UART_CheckIdleState>
}
 8002846:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002848:	3378      	adds	r3, #120	@ 0x78
 800284a:	2200      	movs	r2, #0
 800284c:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 800284e:	f7fe f8b5 	bl	80009bc <HAL_UART_MspInit>
 8002852:	e7d7      	b.n	8002804 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8002854:	0020      	movs	r0, r4
 8002856:	f7ff feab 	bl	80025b0 <UART_AdvFeatureConfig>
 800285a:	e7e2      	b.n	8002822 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 800285c:	2001      	movs	r0, #1
 800285e:	e7f2      	b.n	8002846 <HAL_UART_Init+0x4e>
 8002860:	ffffb7ff 	.word	0xffffb7ff

08002864 <srand>:
 8002864:	4b11      	ldr	r3, [pc, #68]	@ (80028ac <srand+0x48>)
 8002866:	b570      	push	{r4, r5, r6, lr}
 8002868:	681d      	ldr	r5, [r3, #0]
 800286a:	0004      	movs	r4, r0
 800286c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800286e:	2b00      	cmp	r3, #0
 8002870:	d116      	bne.n	80028a0 <srand+0x3c>
 8002872:	2018      	movs	r0, #24
 8002874:	f000 fa50 	bl	8002d18 <malloc>
 8002878:	1e02      	subs	r2, r0, #0
 800287a:	6328      	str	r0, [r5, #48]	@ 0x30
 800287c:	d104      	bne.n	8002888 <srand+0x24>
 800287e:	2146      	movs	r1, #70	@ 0x46
 8002880:	4b0b      	ldr	r3, [pc, #44]	@ (80028b0 <srand+0x4c>)
 8002882:	480c      	ldr	r0, [pc, #48]	@ (80028b4 <srand+0x50>)
 8002884:	f000 f9e0 	bl	8002c48 <__assert_func>
 8002888:	4b0b      	ldr	r3, [pc, #44]	@ (80028b8 <srand+0x54>)
 800288a:	2100      	movs	r1, #0
 800288c:	6003      	str	r3, [r0, #0]
 800288e:	4b0b      	ldr	r3, [pc, #44]	@ (80028bc <srand+0x58>)
 8002890:	6043      	str	r3, [r0, #4]
 8002892:	4b0b      	ldr	r3, [pc, #44]	@ (80028c0 <srand+0x5c>)
 8002894:	6083      	str	r3, [r0, #8]
 8002896:	230b      	movs	r3, #11
 8002898:	8183      	strh	r3, [r0, #12]
 800289a:	2001      	movs	r0, #1
 800289c:	6110      	str	r0, [r2, #16]
 800289e:	6151      	str	r1, [r2, #20]
 80028a0:	2200      	movs	r2, #0
 80028a2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80028a4:	611c      	str	r4, [r3, #16]
 80028a6:	615a      	str	r2, [r3, #20]
 80028a8:	bd70      	pop	{r4, r5, r6, pc}
 80028aa:	46c0      	nop			@ (mov r8, r8)
 80028ac:	2000002c 	.word	0x2000002c
 80028b0:	08003968 	.word	0x08003968
 80028b4:	0800397f 	.word	0x0800397f
 80028b8:	abcd330e 	.word	0xabcd330e
 80028bc:	e66d1234 	.word	0xe66d1234
 80028c0:	0005deec 	.word	0x0005deec

080028c4 <std>:
 80028c4:	2300      	movs	r3, #0
 80028c6:	b510      	push	{r4, lr}
 80028c8:	0004      	movs	r4, r0
 80028ca:	6003      	str	r3, [r0, #0]
 80028cc:	6043      	str	r3, [r0, #4]
 80028ce:	6083      	str	r3, [r0, #8]
 80028d0:	8181      	strh	r1, [r0, #12]
 80028d2:	6643      	str	r3, [r0, #100]	@ 0x64
 80028d4:	81c2      	strh	r2, [r0, #14]
 80028d6:	6103      	str	r3, [r0, #16]
 80028d8:	6143      	str	r3, [r0, #20]
 80028da:	6183      	str	r3, [r0, #24]
 80028dc:	0019      	movs	r1, r3
 80028de:	2208      	movs	r2, #8
 80028e0:	305c      	adds	r0, #92	@ 0x5c
 80028e2:	f000 f8ff 	bl	8002ae4 <memset>
 80028e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002914 <std+0x50>)
 80028e8:	6224      	str	r4, [r4, #32]
 80028ea:	6263      	str	r3, [r4, #36]	@ 0x24
 80028ec:	4b0a      	ldr	r3, [pc, #40]	@ (8002918 <std+0x54>)
 80028ee:	62a3      	str	r3, [r4, #40]	@ 0x28
 80028f0:	4b0a      	ldr	r3, [pc, #40]	@ (800291c <std+0x58>)
 80028f2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80028f4:	4b0a      	ldr	r3, [pc, #40]	@ (8002920 <std+0x5c>)
 80028f6:	6323      	str	r3, [r4, #48]	@ 0x30
 80028f8:	4b0a      	ldr	r3, [pc, #40]	@ (8002924 <std+0x60>)
 80028fa:	429c      	cmp	r4, r3
 80028fc:	d005      	beq.n	800290a <std+0x46>
 80028fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002928 <std+0x64>)
 8002900:	429c      	cmp	r4, r3
 8002902:	d002      	beq.n	800290a <std+0x46>
 8002904:	4b09      	ldr	r3, [pc, #36]	@ (800292c <std+0x68>)
 8002906:	429c      	cmp	r4, r3
 8002908:	d103      	bne.n	8002912 <std+0x4e>
 800290a:	0020      	movs	r0, r4
 800290c:	3058      	adds	r0, #88	@ 0x58
 800290e:	f000 f997 	bl	8002c40 <__retarget_lock_init_recursive>
 8002912:	bd10      	pop	{r4, pc}
 8002914:	08002a4d 	.word	0x08002a4d
 8002918:	08002a75 	.word	0x08002a75
 800291c:	08002aad 	.word	0x08002aad
 8002920:	08002ad9 	.word	0x08002ad9
 8002924:	2000022c 	.word	0x2000022c
 8002928:	20000294 	.word	0x20000294
 800292c:	200002fc 	.word	0x200002fc

08002930 <stdio_exit_handler>:
 8002930:	b510      	push	{r4, lr}
 8002932:	4a03      	ldr	r2, [pc, #12]	@ (8002940 <stdio_exit_handler+0x10>)
 8002934:	4903      	ldr	r1, [pc, #12]	@ (8002944 <stdio_exit_handler+0x14>)
 8002936:	4804      	ldr	r0, [pc, #16]	@ (8002948 <stdio_exit_handler+0x18>)
 8002938:	f000 f86c 	bl	8002a14 <_fwalk_sglue>
 800293c:	bd10      	pop	{r4, pc}
 800293e:	46c0      	nop			@ (mov r8, r8)
 8002940:	20000020 	.word	0x20000020
 8002944:	08002f9d 	.word	0x08002f9d
 8002948:	20000030 	.word	0x20000030

0800294c <cleanup_stdio>:
 800294c:	6841      	ldr	r1, [r0, #4]
 800294e:	4b0b      	ldr	r3, [pc, #44]	@ (800297c <cleanup_stdio+0x30>)
 8002950:	b510      	push	{r4, lr}
 8002952:	0004      	movs	r4, r0
 8002954:	4299      	cmp	r1, r3
 8002956:	d001      	beq.n	800295c <cleanup_stdio+0x10>
 8002958:	f000 fb20 	bl	8002f9c <_fflush_r>
 800295c:	68a1      	ldr	r1, [r4, #8]
 800295e:	4b08      	ldr	r3, [pc, #32]	@ (8002980 <cleanup_stdio+0x34>)
 8002960:	4299      	cmp	r1, r3
 8002962:	d002      	beq.n	800296a <cleanup_stdio+0x1e>
 8002964:	0020      	movs	r0, r4
 8002966:	f000 fb19 	bl	8002f9c <_fflush_r>
 800296a:	68e1      	ldr	r1, [r4, #12]
 800296c:	4b05      	ldr	r3, [pc, #20]	@ (8002984 <cleanup_stdio+0x38>)
 800296e:	4299      	cmp	r1, r3
 8002970:	d002      	beq.n	8002978 <cleanup_stdio+0x2c>
 8002972:	0020      	movs	r0, r4
 8002974:	f000 fb12 	bl	8002f9c <_fflush_r>
 8002978:	bd10      	pop	{r4, pc}
 800297a:	46c0      	nop			@ (mov r8, r8)
 800297c:	2000022c 	.word	0x2000022c
 8002980:	20000294 	.word	0x20000294
 8002984:	200002fc 	.word	0x200002fc

08002988 <global_stdio_init.part.0>:
 8002988:	b510      	push	{r4, lr}
 800298a:	4b09      	ldr	r3, [pc, #36]	@ (80029b0 <global_stdio_init.part.0+0x28>)
 800298c:	4a09      	ldr	r2, [pc, #36]	@ (80029b4 <global_stdio_init.part.0+0x2c>)
 800298e:	2104      	movs	r1, #4
 8002990:	601a      	str	r2, [r3, #0]
 8002992:	4809      	ldr	r0, [pc, #36]	@ (80029b8 <global_stdio_init.part.0+0x30>)
 8002994:	2200      	movs	r2, #0
 8002996:	f7ff ff95 	bl	80028c4 <std>
 800299a:	2201      	movs	r2, #1
 800299c:	2109      	movs	r1, #9
 800299e:	4807      	ldr	r0, [pc, #28]	@ (80029bc <global_stdio_init.part.0+0x34>)
 80029a0:	f7ff ff90 	bl	80028c4 <std>
 80029a4:	2202      	movs	r2, #2
 80029a6:	2112      	movs	r1, #18
 80029a8:	4805      	ldr	r0, [pc, #20]	@ (80029c0 <global_stdio_init.part.0+0x38>)
 80029aa:	f7ff ff8b 	bl	80028c4 <std>
 80029ae:	bd10      	pop	{r4, pc}
 80029b0:	20000364 	.word	0x20000364
 80029b4:	08002931 	.word	0x08002931
 80029b8:	2000022c 	.word	0x2000022c
 80029bc:	20000294 	.word	0x20000294
 80029c0:	200002fc 	.word	0x200002fc

080029c4 <__sfp_lock_acquire>:
 80029c4:	b510      	push	{r4, lr}
 80029c6:	4802      	ldr	r0, [pc, #8]	@ (80029d0 <__sfp_lock_acquire+0xc>)
 80029c8:	f000 f93b 	bl	8002c42 <__retarget_lock_acquire_recursive>
 80029cc:	bd10      	pop	{r4, pc}
 80029ce:	46c0      	nop			@ (mov r8, r8)
 80029d0:	2000036d 	.word	0x2000036d

080029d4 <__sfp_lock_release>:
 80029d4:	b510      	push	{r4, lr}
 80029d6:	4802      	ldr	r0, [pc, #8]	@ (80029e0 <__sfp_lock_release+0xc>)
 80029d8:	f000 f934 	bl	8002c44 <__retarget_lock_release_recursive>
 80029dc:	bd10      	pop	{r4, pc}
 80029de:	46c0      	nop			@ (mov r8, r8)
 80029e0:	2000036d 	.word	0x2000036d

080029e4 <__sinit>:
 80029e4:	b510      	push	{r4, lr}
 80029e6:	0004      	movs	r4, r0
 80029e8:	f7ff ffec 	bl	80029c4 <__sfp_lock_acquire>
 80029ec:	6a23      	ldr	r3, [r4, #32]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d002      	beq.n	80029f8 <__sinit+0x14>
 80029f2:	f7ff ffef 	bl	80029d4 <__sfp_lock_release>
 80029f6:	bd10      	pop	{r4, pc}
 80029f8:	4b04      	ldr	r3, [pc, #16]	@ (8002a0c <__sinit+0x28>)
 80029fa:	6223      	str	r3, [r4, #32]
 80029fc:	4b04      	ldr	r3, [pc, #16]	@ (8002a10 <__sinit+0x2c>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d1f6      	bne.n	80029f2 <__sinit+0xe>
 8002a04:	f7ff ffc0 	bl	8002988 <global_stdio_init.part.0>
 8002a08:	e7f3      	b.n	80029f2 <__sinit+0xe>
 8002a0a:	46c0      	nop			@ (mov r8, r8)
 8002a0c:	0800294d 	.word	0x0800294d
 8002a10:	20000364 	.word	0x20000364

08002a14 <_fwalk_sglue>:
 8002a14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002a16:	0014      	movs	r4, r2
 8002a18:	2600      	movs	r6, #0
 8002a1a:	9000      	str	r0, [sp, #0]
 8002a1c:	9101      	str	r1, [sp, #4]
 8002a1e:	68a5      	ldr	r5, [r4, #8]
 8002a20:	6867      	ldr	r7, [r4, #4]
 8002a22:	3f01      	subs	r7, #1
 8002a24:	d504      	bpl.n	8002a30 <_fwalk_sglue+0x1c>
 8002a26:	6824      	ldr	r4, [r4, #0]
 8002a28:	2c00      	cmp	r4, #0
 8002a2a:	d1f8      	bne.n	8002a1e <_fwalk_sglue+0xa>
 8002a2c:	0030      	movs	r0, r6
 8002a2e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002a30:	89ab      	ldrh	r3, [r5, #12]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d908      	bls.n	8002a48 <_fwalk_sglue+0x34>
 8002a36:	220e      	movs	r2, #14
 8002a38:	5eab      	ldrsh	r3, [r5, r2]
 8002a3a:	3301      	adds	r3, #1
 8002a3c:	d004      	beq.n	8002a48 <_fwalk_sglue+0x34>
 8002a3e:	0029      	movs	r1, r5
 8002a40:	9800      	ldr	r0, [sp, #0]
 8002a42:	9b01      	ldr	r3, [sp, #4]
 8002a44:	4798      	blx	r3
 8002a46:	4306      	orrs	r6, r0
 8002a48:	3568      	adds	r5, #104	@ 0x68
 8002a4a:	e7ea      	b.n	8002a22 <_fwalk_sglue+0xe>

08002a4c <__sread>:
 8002a4c:	b570      	push	{r4, r5, r6, lr}
 8002a4e:	000c      	movs	r4, r1
 8002a50:	250e      	movs	r5, #14
 8002a52:	5f49      	ldrsh	r1, [r1, r5]
 8002a54:	f000 f8a2 	bl	8002b9c <_read_r>
 8002a58:	2800      	cmp	r0, #0
 8002a5a:	db03      	blt.n	8002a64 <__sread+0x18>
 8002a5c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002a5e:	181b      	adds	r3, r3, r0
 8002a60:	6563      	str	r3, [r4, #84]	@ 0x54
 8002a62:	bd70      	pop	{r4, r5, r6, pc}
 8002a64:	89a3      	ldrh	r3, [r4, #12]
 8002a66:	4a02      	ldr	r2, [pc, #8]	@ (8002a70 <__sread+0x24>)
 8002a68:	4013      	ands	r3, r2
 8002a6a:	81a3      	strh	r3, [r4, #12]
 8002a6c:	e7f9      	b.n	8002a62 <__sread+0x16>
 8002a6e:	46c0      	nop			@ (mov r8, r8)
 8002a70:	ffffefff 	.word	0xffffefff

08002a74 <__swrite>:
 8002a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a76:	001f      	movs	r7, r3
 8002a78:	898b      	ldrh	r3, [r1, #12]
 8002a7a:	0005      	movs	r5, r0
 8002a7c:	000c      	movs	r4, r1
 8002a7e:	0016      	movs	r6, r2
 8002a80:	05db      	lsls	r3, r3, #23
 8002a82:	d505      	bpl.n	8002a90 <__swrite+0x1c>
 8002a84:	230e      	movs	r3, #14
 8002a86:	5ec9      	ldrsh	r1, [r1, r3]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	2302      	movs	r3, #2
 8002a8c:	f000 f872 	bl	8002b74 <_lseek_r>
 8002a90:	89a3      	ldrh	r3, [r4, #12]
 8002a92:	4a05      	ldr	r2, [pc, #20]	@ (8002aa8 <__swrite+0x34>)
 8002a94:	0028      	movs	r0, r5
 8002a96:	4013      	ands	r3, r2
 8002a98:	81a3      	strh	r3, [r4, #12]
 8002a9a:	0032      	movs	r2, r6
 8002a9c:	230e      	movs	r3, #14
 8002a9e:	5ee1      	ldrsh	r1, [r4, r3]
 8002aa0:	003b      	movs	r3, r7
 8002aa2:	f000 f88f 	bl	8002bc4 <_write_r>
 8002aa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002aa8:	ffffefff 	.word	0xffffefff

08002aac <__sseek>:
 8002aac:	b570      	push	{r4, r5, r6, lr}
 8002aae:	000c      	movs	r4, r1
 8002ab0:	250e      	movs	r5, #14
 8002ab2:	5f49      	ldrsh	r1, [r1, r5]
 8002ab4:	f000 f85e 	bl	8002b74 <_lseek_r>
 8002ab8:	89a3      	ldrh	r3, [r4, #12]
 8002aba:	1c42      	adds	r2, r0, #1
 8002abc:	d103      	bne.n	8002ac6 <__sseek+0x1a>
 8002abe:	4a05      	ldr	r2, [pc, #20]	@ (8002ad4 <__sseek+0x28>)
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	81a3      	strh	r3, [r4, #12]
 8002ac4:	bd70      	pop	{r4, r5, r6, pc}
 8002ac6:	2280      	movs	r2, #128	@ 0x80
 8002ac8:	0152      	lsls	r2, r2, #5
 8002aca:	4313      	orrs	r3, r2
 8002acc:	81a3      	strh	r3, [r4, #12]
 8002ace:	6560      	str	r0, [r4, #84]	@ 0x54
 8002ad0:	e7f8      	b.n	8002ac4 <__sseek+0x18>
 8002ad2:	46c0      	nop			@ (mov r8, r8)
 8002ad4:	ffffefff 	.word	0xffffefff

08002ad8 <__sclose>:
 8002ad8:	b510      	push	{r4, lr}
 8002ada:	230e      	movs	r3, #14
 8002adc:	5ec9      	ldrsh	r1, [r1, r3]
 8002ade:	f000 f825 	bl	8002b2c <_close_r>
 8002ae2:	bd10      	pop	{r4, pc}

08002ae4 <memset>:
 8002ae4:	0003      	movs	r3, r0
 8002ae6:	1882      	adds	r2, r0, r2
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d100      	bne.n	8002aee <memset+0xa>
 8002aec:	4770      	bx	lr
 8002aee:	7019      	strb	r1, [r3, #0]
 8002af0:	3301      	adds	r3, #1
 8002af2:	e7f9      	b.n	8002ae8 <memset+0x4>

08002af4 <time>:
 8002af4:	b5df      	push	{r0, r1, r2, r3, r4, r6, r7, lr}
 8002af6:	2601      	movs	r6, #1
 8002af8:	4276      	negs	r6, r6
 8002afa:	17f7      	asrs	r7, r6, #31
 8002afc:	4b0a      	ldr	r3, [pc, #40]	@ (8002b28 <time+0x34>)
 8002afe:	0004      	movs	r4, r0
 8002b00:	2200      	movs	r2, #0
 8002b02:	4669      	mov	r1, sp
 8002b04:	6818      	ldr	r0, [r3, #0]
 8002b06:	9600      	str	r6, [sp, #0]
 8002b08:	9701      	str	r7, [sp, #4]
 8002b0a:	f000 f821 	bl	8002b50 <_gettimeofday_r>
 8002b0e:	2800      	cmp	r0, #0
 8002b10:	da01      	bge.n	8002b16 <time+0x22>
 8002b12:	9600      	str	r6, [sp, #0]
 8002b14:	9701      	str	r7, [sp, #4]
 8002b16:	9800      	ldr	r0, [sp, #0]
 8002b18:	9901      	ldr	r1, [sp, #4]
 8002b1a:	2c00      	cmp	r4, #0
 8002b1c:	d001      	beq.n	8002b22 <time+0x2e>
 8002b1e:	6020      	str	r0, [r4, #0]
 8002b20:	6061      	str	r1, [r4, #4]
 8002b22:	b004      	add	sp, #16
 8002b24:	bdd0      	pop	{r4, r6, r7, pc}
 8002b26:	46c0      	nop			@ (mov r8, r8)
 8002b28:	2000002c 	.word	0x2000002c

08002b2c <_close_r>:
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	b570      	push	{r4, r5, r6, lr}
 8002b30:	4d06      	ldr	r5, [pc, #24]	@ (8002b4c <_close_r+0x20>)
 8002b32:	0004      	movs	r4, r0
 8002b34:	0008      	movs	r0, r1
 8002b36:	602b      	str	r3, [r5, #0]
 8002b38:	f7fd ffd2 	bl	8000ae0 <_close>
 8002b3c:	1c43      	adds	r3, r0, #1
 8002b3e:	d103      	bne.n	8002b48 <_close_r+0x1c>
 8002b40:	682b      	ldr	r3, [r5, #0]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d000      	beq.n	8002b48 <_close_r+0x1c>
 8002b46:	6023      	str	r3, [r4, #0]
 8002b48:	bd70      	pop	{r4, r5, r6, pc}
 8002b4a:	46c0      	nop			@ (mov r8, r8)
 8002b4c:	20000368 	.word	0x20000368

08002b50 <_gettimeofday_r>:
 8002b50:	2300      	movs	r3, #0
 8002b52:	b570      	push	{r4, r5, r6, lr}
 8002b54:	4d06      	ldr	r5, [pc, #24]	@ (8002b70 <_gettimeofday_r+0x20>)
 8002b56:	0004      	movs	r4, r0
 8002b58:	0008      	movs	r0, r1
 8002b5a:	0011      	movs	r1, r2
 8002b5c:	602b      	str	r3, [r5, #0]
 8002b5e:	f000 feb9 	bl	80038d4 <_gettimeofday>
 8002b62:	1c43      	adds	r3, r0, #1
 8002b64:	d103      	bne.n	8002b6e <_gettimeofday_r+0x1e>
 8002b66:	682b      	ldr	r3, [r5, #0]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d000      	beq.n	8002b6e <_gettimeofday_r+0x1e>
 8002b6c:	6023      	str	r3, [r4, #0]
 8002b6e:	bd70      	pop	{r4, r5, r6, pc}
 8002b70:	20000368 	.word	0x20000368

08002b74 <_lseek_r>:
 8002b74:	b570      	push	{r4, r5, r6, lr}
 8002b76:	0004      	movs	r4, r0
 8002b78:	0008      	movs	r0, r1
 8002b7a:	0011      	movs	r1, r2
 8002b7c:	001a      	movs	r2, r3
 8002b7e:	2300      	movs	r3, #0
 8002b80:	4d05      	ldr	r5, [pc, #20]	@ (8002b98 <_lseek_r+0x24>)
 8002b82:	602b      	str	r3, [r5, #0]
 8002b84:	f7fd ffb6 	bl	8000af4 <_lseek>
 8002b88:	1c43      	adds	r3, r0, #1
 8002b8a:	d103      	bne.n	8002b94 <_lseek_r+0x20>
 8002b8c:	682b      	ldr	r3, [r5, #0]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d000      	beq.n	8002b94 <_lseek_r+0x20>
 8002b92:	6023      	str	r3, [r4, #0]
 8002b94:	bd70      	pop	{r4, r5, r6, pc}
 8002b96:	46c0      	nop			@ (mov r8, r8)
 8002b98:	20000368 	.word	0x20000368

08002b9c <_read_r>:
 8002b9c:	b570      	push	{r4, r5, r6, lr}
 8002b9e:	0004      	movs	r4, r0
 8002ba0:	0008      	movs	r0, r1
 8002ba2:	0011      	movs	r1, r2
 8002ba4:	001a      	movs	r2, r3
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	4d05      	ldr	r5, [pc, #20]	@ (8002bc0 <_read_r+0x24>)
 8002baa:	602b      	str	r3, [r5, #0]
 8002bac:	f7fd ff7c 	bl	8000aa8 <_read>
 8002bb0:	1c43      	adds	r3, r0, #1
 8002bb2:	d103      	bne.n	8002bbc <_read_r+0x20>
 8002bb4:	682b      	ldr	r3, [r5, #0]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d000      	beq.n	8002bbc <_read_r+0x20>
 8002bba:	6023      	str	r3, [r4, #0]
 8002bbc:	bd70      	pop	{r4, r5, r6, pc}
 8002bbe:	46c0      	nop			@ (mov r8, r8)
 8002bc0:	20000368 	.word	0x20000368

08002bc4 <_write_r>:
 8002bc4:	b570      	push	{r4, r5, r6, lr}
 8002bc6:	0004      	movs	r4, r0
 8002bc8:	0008      	movs	r0, r1
 8002bca:	0011      	movs	r1, r2
 8002bcc:	001a      	movs	r2, r3
 8002bce:	2300      	movs	r3, #0
 8002bd0:	4d05      	ldr	r5, [pc, #20]	@ (8002be8 <_write_r+0x24>)
 8002bd2:	602b      	str	r3, [r5, #0]
 8002bd4:	f7fd ff76 	bl	8000ac4 <_write>
 8002bd8:	1c43      	adds	r3, r0, #1
 8002bda:	d103      	bne.n	8002be4 <_write_r+0x20>
 8002bdc:	682b      	ldr	r3, [r5, #0]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d000      	beq.n	8002be4 <_write_r+0x20>
 8002be2:	6023      	str	r3, [r4, #0]
 8002be4:	bd70      	pop	{r4, r5, r6, pc}
 8002be6:	46c0      	nop			@ (mov r8, r8)
 8002be8:	20000368 	.word	0x20000368

08002bec <__errno>:
 8002bec:	4b01      	ldr	r3, [pc, #4]	@ (8002bf4 <__errno+0x8>)
 8002bee:	6818      	ldr	r0, [r3, #0]
 8002bf0:	4770      	bx	lr
 8002bf2:	46c0      	nop			@ (mov r8, r8)
 8002bf4:	2000002c 	.word	0x2000002c

08002bf8 <__libc_init_array>:
 8002bf8:	b570      	push	{r4, r5, r6, lr}
 8002bfa:	2600      	movs	r6, #0
 8002bfc:	4c0c      	ldr	r4, [pc, #48]	@ (8002c30 <__libc_init_array+0x38>)
 8002bfe:	4d0d      	ldr	r5, [pc, #52]	@ (8002c34 <__libc_init_array+0x3c>)
 8002c00:	1b64      	subs	r4, r4, r5
 8002c02:	10a4      	asrs	r4, r4, #2
 8002c04:	42a6      	cmp	r6, r4
 8002c06:	d109      	bne.n	8002c1c <__libc_init_array+0x24>
 8002c08:	2600      	movs	r6, #0
 8002c0a:	f000 fe6b 	bl	80038e4 <_init>
 8002c0e:	4c0a      	ldr	r4, [pc, #40]	@ (8002c38 <__libc_init_array+0x40>)
 8002c10:	4d0a      	ldr	r5, [pc, #40]	@ (8002c3c <__libc_init_array+0x44>)
 8002c12:	1b64      	subs	r4, r4, r5
 8002c14:	10a4      	asrs	r4, r4, #2
 8002c16:	42a6      	cmp	r6, r4
 8002c18:	d105      	bne.n	8002c26 <__libc_init_array+0x2e>
 8002c1a:	bd70      	pop	{r4, r5, r6, pc}
 8002c1c:	00b3      	lsls	r3, r6, #2
 8002c1e:	58eb      	ldr	r3, [r5, r3]
 8002c20:	4798      	blx	r3
 8002c22:	3601      	adds	r6, #1
 8002c24:	e7ee      	b.n	8002c04 <__libc_init_array+0xc>
 8002c26:	00b3      	lsls	r3, r6, #2
 8002c28:	58eb      	ldr	r3, [r5, r3]
 8002c2a:	4798      	blx	r3
 8002c2c:	3601      	adds	r6, #1
 8002c2e:	e7f2      	b.n	8002c16 <__libc_init_array+0x1e>
 8002c30:	08003a50 	.word	0x08003a50
 8002c34:	08003a50 	.word	0x08003a50
 8002c38:	08003a54 	.word	0x08003a54
 8002c3c:	08003a50 	.word	0x08003a50

08002c40 <__retarget_lock_init_recursive>:
 8002c40:	4770      	bx	lr

08002c42 <__retarget_lock_acquire_recursive>:
 8002c42:	4770      	bx	lr

08002c44 <__retarget_lock_release_recursive>:
 8002c44:	4770      	bx	lr
	...

08002c48 <__assert_func>:
 8002c48:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8002c4a:	0014      	movs	r4, r2
 8002c4c:	001a      	movs	r2, r3
 8002c4e:	4b09      	ldr	r3, [pc, #36]	@ (8002c74 <__assert_func+0x2c>)
 8002c50:	0005      	movs	r5, r0
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	000e      	movs	r6, r1
 8002c56:	68d8      	ldr	r0, [r3, #12]
 8002c58:	4b07      	ldr	r3, [pc, #28]	@ (8002c78 <__assert_func+0x30>)
 8002c5a:	2c00      	cmp	r4, #0
 8002c5c:	d101      	bne.n	8002c62 <__assert_func+0x1a>
 8002c5e:	4b07      	ldr	r3, [pc, #28]	@ (8002c7c <__assert_func+0x34>)
 8002c60:	001c      	movs	r4, r3
 8002c62:	4907      	ldr	r1, [pc, #28]	@ (8002c80 <__assert_func+0x38>)
 8002c64:	9301      	str	r3, [sp, #4]
 8002c66:	9402      	str	r4, [sp, #8]
 8002c68:	002b      	movs	r3, r5
 8002c6a:	9600      	str	r6, [sp, #0]
 8002c6c:	f000 f9c2 	bl	8002ff4 <fiprintf>
 8002c70:	f000 f9e2 	bl	8003038 <abort>
 8002c74:	2000002c 	.word	0x2000002c
 8002c78:	080039d7 	.word	0x080039d7
 8002c7c:	08003a12 	.word	0x08003a12
 8002c80:	080039e4 	.word	0x080039e4

08002c84 <_free_r>:
 8002c84:	b570      	push	{r4, r5, r6, lr}
 8002c86:	0005      	movs	r5, r0
 8002c88:	1e0c      	subs	r4, r1, #0
 8002c8a:	d010      	beq.n	8002cae <_free_r+0x2a>
 8002c8c:	3c04      	subs	r4, #4
 8002c8e:	6823      	ldr	r3, [r4, #0]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	da00      	bge.n	8002c96 <_free_r+0x12>
 8002c94:	18e4      	adds	r4, r4, r3
 8002c96:	0028      	movs	r0, r5
 8002c98:	f000 f8ea 	bl	8002e70 <__malloc_lock>
 8002c9c:	4a1d      	ldr	r2, [pc, #116]	@ (8002d14 <_free_r+0x90>)
 8002c9e:	6813      	ldr	r3, [r2, #0]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d105      	bne.n	8002cb0 <_free_r+0x2c>
 8002ca4:	6063      	str	r3, [r4, #4]
 8002ca6:	6014      	str	r4, [r2, #0]
 8002ca8:	0028      	movs	r0, r5
 8002caa:	f000 f8e9 	bl	8002e80 <__malloc_unlock>
 8002cae:	bd70      	pop	{r4, r5, r6, pc}
 8002cb0:	42a3      	cmp	r3, r4
 8002cb2:	d908      	bls.n	8002cc6 <_free_r+0x42>
 8002cb4:	6820      	ldr	r0, [r4, #0]
 8002cb6:	1821      	adds	r1, r4, r0
 8002cb8:	428b      	cmp	r3, r1
 8002cba:	d1f3      	bne.n	8002ca4 <_free_r+0x20>
 8002cbc:	6819      	ldr	r1, [r3, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	1809      	adds	r1, r1, r0
 8002cc2:	6021      	str	r1, [r4, #0]
 8002cc4:	e7ee      	b.n	8002ca4 <_free_r+0x20>
 8002cc6:	001a      	movs	r2, r3
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d001      	beq.n	8002cd2 <_free_r+0x4e>
 8002cce:	42a3      	cmp	r3, r4
 8002cd0:	d9f9      	bls.n	8002cc6 <_free_r+0x42>
 8002cd2:	6811      	ldr	r1, [r2, #0]
 8002cd4:	1850      	adds	r0, r2, r1
 8002cd6:	42a0      	cmp	r0, r4
 8002cd8:	d10b      	bne.n	8002cf2 <_free_r+0x6e>
 8002cda:	6820      	ldr	r0, [r4, #0]
 8002cdc:	1809      	adds	r1, r1, r0
 8002cde:	1850      	adds	r0, r2, r1
 8002ce0:	6011      	str	r1, [r2, #0]
 8002ce2:	4283      	cmp	r3, r0
 8002ce4:	d1e0      	bne.n	8002ca8 <_free_r+0x24>
 8002ce6:	6818      	ldr	r0, [r3, #0]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	1841      	adds	r1, r0, r1
 8002cec:	6011      	str	r1, [r2, #0]
 8002cee:	6053      	str	r3, [r2, #4]
 8002cf0:	e7da      	b.n	8002ca8 <_free_r+0x24>
 8002cf2:	42a0      	cmp	r0, r4
 8002cf4:	d902      	bls.n	8002cfc <_free_r+0x78>
 8002cf6:	230c      	movs	r3, #12
 8002cf8:	602b      	str	r3, [r5, #0]
 8002cfa:	e7d5      	b.n	8002ca8 <_free_r+0x24>
 8002cfc:	6820      	ldr	r0, [r4, #0]
 8002cfe:	1821      	adds	r1, r4, r0
 8002d00:	428b      	cmp	r3, r1
 8002d02:	d103      	bne.n	8002d0c <_free_r+0x88>
 8002d04:	6819      	ldr	r1, [r3, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	1809      	adds	r1, r1, r0
 8002d0a:	6021      	str	r1, [r4, #0]
 8002d0c:	6063      	str	r3, [r4, #4]
 8002d0e:	6054      	str	r4, [r2, #4]
 8002d10:	e7ca      	b.n	8002ca8 <_free_r+0x24>
 8002d12:	46c0      	nop			@ (mov r8, r8)
 8002d14:	20000374 	.word	0x20000374

08002d18 <malloc>:
 8002d18:	b510      	push	{r4, lr}
 8002d1a:	4b03      	ldr	r3, [pc, #12]	@ (8002d28 <malloc+0x10>)
 8002d1c:	0001      	movs	r1, r0
 8002d1e:	6818      	ldr	r0, [r3, #0]
 8002d20:	f000 f826 	bl	8002d70 <_malloc_r>
 8002d24:	bd10      	pop	{r4, pc}
 8002d26:	46c0      	nop			@ (mov r8, r8)
 8002d28:	2000002c 	.word	0x2000002c

08002d2c <sbrk_aligned>:
 8002d2c:	b570      	push	{r4, r5, r6, lr}
 8002d2e:	4e0f      	ldr	r6, [pc, #60]	@ (8002d6c <sbrk_aligned+0x40>)
 8002d30:	000d      	movs	r5, r1
 8002d32:	6831      	ldr	r1, [r6, #0]
 8002d34:	0004      	movs	r4, r0
 8002d36:	2900      	cmp	r1, #0
 8002d38:	d102      	bne.n	8002d40 <sbrk_aligned+0x14>
 8002d3a:	f000 f96b 	bl	8003014 <_sbrk_r>
 8002d3e:	6030      	str	r0, [r6, #0]
 8002d40:	0029      	movs	r1, r5
 8002d42:	0020      	movs	r0, r4
 8002d44:	f000 f966 	bl	8003014 <_sbrk_r>
 8002d48:	1c43      	adds	r3, r0, #1
 8002d4a:	d103      	bne.n	8002d54 <sbrk_aligned+0x28>
 8002d4c:	2501      	movs	r5, #1
 8002d4e:	426d      	negs	r5, r5
 8002d50:	0028      	movs	r0, r5
 8002d52:	bd70      	pop	{r4, r5, r6, pc}
 8002d54:	2303      	movs	r3, #3
 8002d56:	1cc5      	adds	r5, r0, #3
 8002d58:	439d      	bics	r5, r3
 8002d5a:	42a8      	cmp	r0, r5
 8002d5c:	d0f8      	beq.n	8002d50 <sbrk_aligned+0x24>
 8002d5e:	1a29      	subs	r1, r5, r0
 8002d60:	0020      	movs	r0, r4
 8002d62:	f000 f957 	bl	8003014 <_sbrk_r>
 8002d66:	3001      	adds	r0, #1
 8002d68:	d1f2      	bne.n	8002d50 <sbrk_aligned+0x24>
 8002d6a:	e7ef      	b.n	8002d4c <sbrk_aligned+0x20>
 8002d6c:	20000370 	.word	0x20000370

08002d70 <_malloc_r>:
 8002d70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002d72:	2203      	movs	r2, #3
 8002d74:	1ccb      	adds	r3, r1, #3
 8002d76:	4393      	bics	r3, r2
 8002d78:	3308      	adds	r3, #8
 8002d7a:	0005      	movs	r5, r0
 8002d7c:	001f      	movs	r7, r3
 8002d7e:	2b0c      	cmp	r3, #12
 8002d80:	d234      	bcs.n	8002dec <_malloc_r+0x7c>
 8002d82:	270c      	movs	r7, #12
 8002d84:	42b9      	cmp	r1, r7
 8002d86:	d833      	bhi.n	8002df0 <_malloc_r+0x80>
 8002d88:	0028      	movs	r0, r5
 8002d8a:	f000 f871 	bl	8002e70 <__malloc_lock>
 8002d8e:	4e37      	ldr	r6, [pc, #220]	@ (8002e6c <_malloc_r+0xfc>)
 8002d90:	6833      	ldr	r3, [r6, #0]
 8002d92:	001c      	movs	r4, r3
 8002d94:	2c00      	cmp	r4, #0
 8002d96:	d12f      	bne.n	8002df8 <_malloc_r+0x88>
 8002d98:	0039      	movs	r1, r7
 8002d9a:	0028      	movs	r0, r5
 8002d9c:	f7ff ffc6 	bl	8002d2c <sbrk_aligned>
 8002da0:	0004      	movs	r4, r0
 8002da2:	1c43      	adds	r3, r0, #1
 8002da4:	d15f      	bne.n	8002e66 <_malloc_r+0xf6>
 8002da6:	6834      	ldr	r4, [r6, #0]
 8002da8:	9400      	str	r4, [sp, #0]
 8002daa:	9b00      	ldr	r3, [sp, #0]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d14a      	bne.n	8002e46 <_malloc_r+0xd6>
 8002db0:	2c00      	cmp	r4, #0
 8002db2:	d052      	beq.n	8002e5a <_malloc_r+0xea>
 8002db4:	6823      	ldr	r3, [r4, #0]
 8002db6:	0028      	movs	r0, r5
 8002db8:	18e3      	adds	r3, r4, r3
 8002dba:	9900      	ldr	r1, [sp, #0]
 8002dbc:	9301      	str	r3, [sp, #4]
 8002dbe:	f000 f929 	bl	8003014 <_sbrk_r>
 8002dc2:	9b01      	ldr	r3, [sp, #4]
 8002dc4:	4283      	cmp	r3, r0
 8002dc6:	d148      	bne.n	8002e5a <_malloc_r+0xea>
 8002dc8:	6823      	ldr	r3, [r4, #0]
 8002dca:	0028      	movs	r0, r5
 8002dcc:	1aff      	subs	r7, r7, r3
 8002dce:	0039      	movs	r1, r7
 8002dd0:	f7ff ffac 	bl	8002d2c <sbrk_aligned>
 8002dd4:	3001      	adds	r0, #1
 8002dd6:	d040      	beq.n	8002e5a <_malloc_r+0xea>
 8002dd8:	6823      	ldr	r3, [r4, #0]
 8002dda:	19db      	adds	r3, r3, r7
 8002ddc:	6023      	str	r3, [r4, #0]
 8002dde:	6833      	ldr	r3, [r6, #0]
 8002de0:	685a      	ldr	r2, [r3, #4]
 8002de2:	2a00      	cmp	r2, #0
 8002de4:	d133      	bne.n	8002e4e <_malloc_r+0xde>
 8002de6:	9b00      	ldr	r3, [sp, #0]
 8002de8:	6033      	str	r3, [r6, #0]
 8002dea:	e019      	b.n	8002e20 <_malloc_r+0xb0>
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	dac9      	bge.n	8002d84 <_malloc_r+0x14>
 8002df0:	230c      	movs	r3, #12
 8002df2:	602b      	str	r3, [r5, #0]
 8002df4:	2000      	movs	r0, #0
 8002df6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002df8:	6821      	ldr	r1, [r4, #0]
 8002dfa:	1bc9      	subs	r1, r1, r7
 8002dfc:	d420      	bmi.n	8002e40 <_malloc_r+0xd0>
 8002dfe:	290b      	cmp	r1, #11
 8002e00:	d90a      	bls.n	8002e18 <_malloc_r+0xa8>
 8002e02:	19e2      	adds	r2, r4, r7
 8002e04:	6027      	str	r7, [r4, #0]
 8002e06:	42a3      	cmp	r3, r4
 8002e08:	d104      	bne.n	8002e14 <_malloc_r+0xa4>
 8002e0a:	6032      	str	r2, [r6, #0]
 8002e0c:	6863      	ldr	r3, [r4, #4]
 8002e0e:	6011      	str	r1, [r2, #0]
 8002e10:	6053      	str	r3, [r2, #4]
 8002e12:	e005      	b.n	8002e20 <_malloc_r+0xb0>
 8002e14:	605a      	str	r2, [r3, #4]
 8002e16:	e7f9      	b.n	8002e0c <_malloc_r+0x9c>
 8002e18:	6862      	ldr	r2, [r4, #4]
 8002e1a:	42a3      	cmp	r3, r4
 8002e1c:	d10e      	bne.n	8002e3c <_malloc_r+0xcc>
 8002e1e:	6032      	str	r2, [r6, #0]
 8002e20:	0028      	movs	r0, r5
 8002e22:	f000 f82d 	bl	8002e80 <__malloc_unlock>
 8002e26:	0020      	movs	r0, r4
 8002e28:	2207      	movs	r2, #7
 8002e2a:	300b      	adds	r0, #11
 8002e2c:	1d23      	adds	r3, r4, #4
 8002e2e:	4390      	bics	r0, r2
 8002e30:	1ac2      	subs	r2, r0, r3
 8002e32:	4298      	cmp	r0, r3
 8002e34:	d0df      	beq.n	8002df6 <_malloc_r+0x86>
 8002e36:	1a1b      	subs	r3, r3, r0
 8002e38:	50a3      	str	r3, [r4, r2]
 8002e3a:	e7dc      	b.n	8002df6 <_malloc_r+0x86>
 8002e3c:	605a      	str	r2, [r3, #4]
 8002e3e:	e7ef      	b.n	8002e20 <_malloc_r+0xb0>
 8002e40:	0023      	movs	r3, r4
 8002e42:	6864      	ldr	r4, [r4, #4]
 8002e44:	e7a6      	b.n	8002d94 <_malloc_r+0x24>
 8002e46:	9c00      	ldr	r4, [sp, #0]
 8002e48:	6863      	ldr	r3, [r4, #4]
 8002e4a:	9300      	str	r3, [sp, #0]
 8002e4c:	e7ad      	b.n	8002daa <_malloc_r+0x3a>
 8002e4e:	001a      	movs	r2, r3
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	42a3      	cmp	r3, r4
 8002e54:	d1fb      	bne.n	8002e4e <_malloc_r+0xde>
 8002e56:	2300      	movs	r3, #0
 8002e58:	e7da      	b.n	8002e10 <_malloc_r+0xa0>
 8002e5a:	230c      	movs	r3, #12
 8002e5c:	0028      	movs	r0, r5
 8002e5e:	602b      	str	r3, [r5, #0]
 8002e60:	f000 f80e 	bl	8002e80 <__malloc_unlock>
 8002e64:	e7c6      	b.n	8002df4 <_malloc_r+0x84>
 8002e66:	6007      	str	r7, [r0, #0]
 8002e68:	e7da      	b.n	8002e20 <_malloc_r+0xb0>
 8002e6a:	46c0      	nop			@ (mov r8, r8)
 8002e6c:	20000374 	.word	0x20000374

08002e70 <__malloc_lock>:
 8002e70:	b510      	push	{r4, lr}
 8002e72:	4802      	ldr	r0, [pc, #8]	@ (8002e7c <__malloc_lock+0xc>)
 8002e74:	f7ff fee5 	bl	8002c42 <__retarget_lock_acquire_recursive>
 8002e78:	bd10      	pop	{r4, pc}
 8002e7a:	46c0      	nop			@ (mov r8, r8)
 8002e7c:	2000036c 	.word	0x2000036c

08002e80 <__malloc_unlock>:
 8002e80:	b510      	push	{r4, lr}
 8002e82:	4802      	ldr	r0, [pc, #8]	@ (8002e8c <__malloc_unlock+0xc>)
 8002e84:	f7ff fede 	bl	8002c44 <__retarget_lock_release_recursive>
 8002e88:	bd10      	pop	{r4, pc}
 8002e8a:	46c0      	nop			@ (mov r8, r8)
 8002e8c:	2000036c 	.word	0x2000036c

08002e90 <__sflush_r>:
 8002e90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002e92:	220c      	movs	r2, #12
 8002e94:	5e8b      	ldrsh	r3, [r1, r2]
 8002e96:	0005      	movs	r5, r0
 8002e98:	000c      	movs	r4, r1
 8002e9a:	071a      	lsls	r2, r3, #28
 8002e9c:	d456      	bmi.n	8002f4c <__sflush_r+0xbc>
 8002e9e:	684a      	ldr	r2, [r1, #4]
 8002ea0:	2a00      	cmp	r2, #0
 8002ea2:	dc02      	bgt.n	8002eaa <__sflush_r+0x1a>
 8002ea4:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8002ea6:	2a00      	cmp	r2, #0
 8002ea8:	dd4e      	ble.n	8002f48 <__sflush_r+0xb8>
 8002eaa:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8002eac:	2f00      	cmp	r7, #0
 8002eae:	d04b      	beq.n	8002f48 <__sflush_r+0xb8>
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	2080      	movs	r0, #128	@ 0x80
 8002eb4:	682e      	ldr	r6, [r5, #0]
 8002eb6:	602a      	str	r2, [r5, #0]
 8002eb8:	001a      	movs	r2, r3
 8002eba:	0140      	lsls	r0, r0, #5
 8002ebc:	6a21      	ldr	r1, [r4, #32]
 8002ebe:	4002      	ands	r2, r0
 8002ec0:	4203      	tst	r3, r0
 8002ec2:	d033      	beq.n	8002f2c <__sflush_r+0x9c>
 8002ec4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002ec6:	89a3      	ldrh	r3, [r4, #12]
 8002ec8:	075b      	lsls	r3, r3, #29
 8002eca:	d506      	bpl.n	8002eda <__sflush_r+0x4a>
 8002ecc:	6863      	ldr	r3, [r4, #4]
 8002ece:	1ad2      	subs	r2, r2, r3
 8002ed0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <__sflush_r+0x4a>
 8002ed6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002ed8:	1ad2      	subs	r2, r2, r3
 8002eda:	2300      	movs	r3, #0
 8002edc:	0028      	movs	r0, r5
 8002ede:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8002ee0:	6a21      	ldr	r1, [r4, #32]
 8002ee2:	47b8      	blx	r7
 8002ee4:	89a2      	ldrh	r2, [r4, #12]
 8002ee6:	1c43      	adds	r3, r0, #1
 8002ee8:	d106      	bne.n	8002ef8 <__sflush_r+0x68>
 8002eea:	6829      	ldr	r1, [r5, #0]
 8002eec:	291d      	cmp	r1, #29
 8002eee:	d846      	bhi.n	8002f7e <__sflush_r+0xee>
 8002ef0:	4b29      	ldr	r3, [pc, #164]	@ (8002f98 <__sflush_r+0x108>)
 8002ef2:	410b      	asrs	r3, r1
 8002ef4:	07db      	lsls	r3, r3, #31
 8002ef6:	d442      	bmi.n	8002f7e <__sflush_r+0xee>
 8002ef8:	2300      	movs	r3, #0
 8002efa:	6063      	str	r3, [r4, #4]
 8002efc:	6923      	ldr	r3, [r4, #16]
 8002efe:	6023      	str	r3, [r4, #0]
 8002f00:	04d2      	lsls	r2, r2, #19
 8002f02:	d505      	bpl.n	8002f10 <__sflush_r+0x80>
 8002f04:	1c43      	adds	r3, r0, #1
 8002f06:	d102      	bne.n	8002f0e <__sflush_r+0x7e>
 8002f08:	682b      	ldr	r3, [r5, #0]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d100      	bne.n	8002f10 <__sflush_r+0x80>
 8002f0e:	6560      	str	r0, [r4, #84]	@ 0x54
 8002f10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002f12:	602e      	str	r6, [r5, #0]
 8002f14:	2900      	cmp	r1, #0
 8002f16:	d017      	beq.n	8002f48 <__sflush_r+0xb8>
 8002f18:	0023      	movs	r3, r4
 8002f1a:	3344      	adds	r3, #68	@ 0x44
 8002f1c:	4299      	cmp	r1, r3
 8002f1e:	d002      	beq.n	8002f26 <__sflush_r+0x96>
 8002f20:	0028      	movs	r0, r5
 8002f22:	f7ff feaf 	bl	8002c84 <_free_r>
 8002f26:	2300      	movs	r3, #0
 8002f28:	6363      	str	r3, [r4, #52]	@ 0x34
 8002f2a:	e00d      	b.n	8002f48 <__sflush_r+0xb8>
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	0028      	movs	r0, r5
 8002f30:	47b8      	blx	r7
 8002f32:	0002      	movs	r2, r0
 8002f34:	1c43      	adds	r3, r0, #1
 8002f36:	d1c6      	bne.n	8002ec6 <__sflush_r+0x36>
 8002f38:	682b      	ldr	r3, [r5, #0]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d0c3      	beq.n	8002ec6 <__sflush_r+0x36>
 8002f3e:	2b1d      	cmp	r3, #29
 8002f40:	d001      	beq.n	8002f46 <__sflush_r+0xb6>
 8002f42:	2b16      	cmp	r3, #22
 8002f44:	d11a      	bne.n	8002f7c <__sflush_r+0xec>
 8002f46:	602e      	str	r6, [r5, #0]
 8002f48:	2000      	movs	r0, #0
 8002f4a:	e01e      	b.n	8002f8a <__sflush_r+0xfa>
 8002f4c:	690e      	ldr	r6, [r1, #16]
 8002f4e:	2e00      	cmp	r6, #0
 8002f50:	d0fa      	beq.n	8002f48 <__sflush_r+0xb8>
 8002f52:	680f      	ldr	r7, [r1, #0]
 8002f54:	600e      	str	r6, [r1, #0]
 8002f56:	1bba      	subs	r2, r7, r6
 8002f58:	9201      	str	r2, [sp, #4]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	079b      	lsls	r3, r3, #30
 8002f5e:	d100      	bne.n	8002f62 <__sflush_r+0xd2>
 8002f60:	694a      	ldr	r2, [r1, #20]
 8002f62:	60a2      	str	r2, [r4, #8]
 8002f64:	9b01      	ldr	r3, [sp, #4]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	ddee      	ble.n	8002f48 <__sflush_r+0xb8>
 8002f6a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002f6c:	0032      	movs	r2, r6
 8002f6e:	001f      	movs	r7, r3
 8002f70:	0028      	movs	r0, r5
 8002f72:	9b01      	ldr	r3, [sp, #4]
 8002f74:	6a21      	ldr	r1, [r4, #32]
 8002f76:	47b8      	blx	r7
 8002f78:	2800      	cmp	r0, #0
 8002f7a:	dc07      	bgt.n	8002f8c <__sflush_r+0xfc>
 8002f7c:	89a2      	ldrh	r2, [r4, #12]
 8002f7e:	2340      	movs	r3, #64	@ 0x40
 8002f80:	2001      	movs	r0, #1
 8002f82:	4313      	orrs	r3, r2
 8002f84:	b21b      	sxth	r3, r3
 8002f86:	81a3      	strh	r3, [r4, #12]
 8002f88:	4240      	negs	r0, r0
 8002f8a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002f8c:	9b01      	ldr	r3, [sp, #4]
 8002f8e:	1836      	adds	r6, r6, r0
 8002f90:	1a1b      	subs	r3, r3, r0
 8002f92:	9301      	str	r3, [sp, #4]
 8002f94:	e7e6      	b.n	8002f64 <__sflush_r+0xd4>
 8002f96:	46c0      	nop			@ (mov r8, r8)
 8002f98:	dfbffffe 	.word	0xdfbffffe

08002f9c <_fflush_r>:
 8002f9c:	690b      	ldr	r3, [r1, #16]
 8002f9e:	b570      	push	{r4, r5, r6, lr}
 8002fa0:	0005      	movs	r5, r0
 8002fa2:	000c      	movs	r4, r1
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d102      	bne.n	8002fae <_fflush_r+0x12>
 8002fa8:	2500      	movs	r5, #0
 8002faa:	0028      	movs	r0, r5
 8002fac:	bd70      	pop	{r4, r5, r6, pc}
 8002fae:	2800      	cmp	r0, #0
 8002fb0:	d004      	beq.n	8002fbc <_fflush_r+0x20>
 8002fb2:	6a03      	ldr	r3, [r0, #32]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d101      	bne.n	8002fbc <_fflush_r+0x20>
 8002fb8:	f7ff fd14 	bl	80029e4 <__sinit>
 8002fbc:	220c      	movs	r2, #12
 8002fbe:	5ea3      	ldrsh	r3, [r4, r2]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d0f1      	beq.n	8002fa8 <_fflush_r+0xc>
 8002fc4:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002fc6:	07d2      	lsls	r2, r2, #31
 8002fc8:	d404      	bmi.n	8002fd4 <_fflush_r+0x38>
 8002fca:	059b      	lsls	r3, r3, #22
 8002fcc:	d402      	bmi.n	8002fd4 <_fflush_r+0x38>
 8002fce:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002fd0:	f7ff fe37 	bl	8002c42 <__retarget_lock_acquire_recursive>
 8002fd4:	0028      	movs	r0, r5
 8002fd6:	0021      	movs	r1, r4
 8002fd8:	f7ff ff5a 	bl	8002e90 <__sflush_r>
 8002fdc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002fde:	0005      	movs	r5, r0
 8002fe0:	07db      	lsls	r3, r3, #31
 8002fe2:	d4e2      	bmi.n	8002faa <_fflush_r+0xe>
 8002fe4:	89a3      	ldrh	r3, [r4, #12]
 8002fe6:	059b      	lsls	r3, r3, #22
 8002fe8:	d4df      	bmi.n	8002faa <_fflush_r+0xe>
 8002fea:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002fec:	f7ff fe2a 	bl	8002c44 <__retarget_lock_release_recursive>
 8002ff0:	e7db      	b.n	8002faa <_fflush_r+0xe>
	...

08002ff4 <fiprintf>:
 8002ff4:	b40e      	push	{r1, r2, r3}
 8002ff6:	b517      	push	{r0, r1, r2, r4, lr}
 8002ff8:	4c05      	ldr	r4, [pc, #20]	@ (8003010 <fiprintf+0x1c>)
 8002ffa:	ab05      	add	r3, sp, #20
 8002ffc:	cb04      	ldmia	r3!, {r2}
 8002ffe:	0001      	movs	r1, r0
 8003000:	6820      	ldr	r0, [r4, #0]
 8003002:	9301      	str	r3, [sp, #4]
 8003004:	f000 f846 	bl	8003094 <_vfiprintf_r>
 8003008:	bc1e      	pop	{r1, r2, r3, r4}
 800300a:	bc08      	pop	{r3}
 800300c:	b003      	add	sp, #12
 800300e:	4718      	bx	r3
 8003010:	2000002c 	.word	0x2000002c

08003014 <_sbrk_r>:
 8003014:	2300      	movs	r3, #0
 8003016:	b570      	push	{r4, r5, r6, lr}
 8003018:	4d06      	ldr	r5, [pc, #24]	@ (8003034 <_sbrk_r+0x20>)
 800301a:	0004      	movs	r4, r0
 800301c:	0008      	movs	r0, r1
 800301e:	602b      	str	r3, [r5, #0]
 8003020:	f7fd fd6a 	bl	8000af8 <_sbrk>
 8003024:	1c43      	adds	r3, r0, #1
 8003026:	d103      	bne.n	8003030 <_sbrk_r+0x1c>
 8003028:	682b      	ldr	r3, [r5, #0]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d000      	beq.n	8003030 <_sbrk_r+0x1c>
 800302e:	6023      	str	r3, [r4, #0]
 8003030:	bd70      	pop	{r4, r5, r6, pc}
 8003032:	46c0      	nop			@ (mov r8, r8)
 8003034:	20000368 	.word	0x20000368

08003038 <abort>:
 8003038:	2006      	movs	r0, #6
 800303a:	b510      	push	{r4, lr}
 800303c:	f000 fb8e 	bl	800375c <raise>
 8003040:	2001      	movs	r0, #1
 8003042:	f7fd fd2b 	bl	8000a9c <_exit>

08003046 <__sfputc_r>:
 8003046:	6893      	ldr	r3, [r2, #8]
 8003048:	b510      	push	{r4, lr}
 800304a:	3b01      	subs	r3, #1
 800304c:	6093      	str	r3, [r2, #8]
 800304e:	2b00      	cmp	r3, #0
 8003050:	da04      	bge.n	800305c <__sfputc_r+0x16>
 8003052:	6994      	ldr	r4, [r2, #24]
 8003054:	42a3      	cmp	r3, r4
 8003056:	db07      	blt.n	8003068 <__sfputc_r+0x22>
 8003058:	290a      	cmp	r1, #10
 800305a:	d005      	beq.n	8003068 <__sfputc_r+0x22>
 800305c:	6813      	ldr	r3, [r2, #0]
 800305e:	1c58      	adds	r0, r3, #1
 8003060:	6010      	str	r0, [r2, #0]
 8003062:	7019      	strb	r1, [r3, #0]
 8003064:	0008      	movs	r0, r1
 8003066:	bd10      	pop	{r4, pc}
 8003068:	f000 faae 	bl	80035c8 <__swbuf_r>
 800306c:	0001      	movs	r1, r0
 800306e:	e7f9      	b.n	8003064 <__sfputc_r+0x1e>

08003070 <__sfputs_r>:
 8003070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003072:	0006      	movs	r6, r0
 8003074:	000f      	movs	r7, r1
 8003076:	0014      	movs	r4, r2
 8003078:	18d5      	adds	r5, r2, r3
 800307a:	42ac      	cmp	r4, r5
 800307c:	d101      	bne.n	8003082 <__sfputs_r+0x12>
 800307e:	2000      	movs	r0, #0
 8003080:	e007      	b.n	8003092 <__sfputs_r+0x22>
 8003082:	7821      	ldrb	r1, [r4, #0]
 8003084:	003a      	movs	r2, r7
 8003086:	0030      	movs	r0, r6
 8003088:	f7ff ffdd 	bl	8003046 <__sfputc_r>
 800308c:	3401      	adds	r4, #1
 800308e:	1c43      	adds	r3, r0, #1
 8003090:	d1f3      	bne.n	800307a <__sfputs_r+0xa>
 8003092:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003094 <_vfiprintf_r>:
 8003094:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003096:	b0a1      	sub	sp, #132	@ 0x84
 8003098:	000f      	movs	r7, r1
 800309a:	0015      	movs	r5, r2
 800309c:	001e      	movs	r6, r3
 800309e:	9003      	str	r0, [sp, #12]
 80030a0:	2800      	cmp	r0, #0
 80030a2:	d004      	beq.n	80030ae <_vfiprintf_r+0x1a>
 80030a4:	6a03      	ldr	r3, [r0, #32]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d101      	bne.n	80030ae <_vfiprintf_r+0x1a>
 80030aa:	f7ff fc9b 	bl	80029e4 <__sinit>
 80030ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80030b0:	07db      	lsls	r3, r3, #31
 80030b2:	d405      	bmi.n	80030c0 <_vfiprintf_r+0x2c>
 80030b4:	89bb      	ldrh	r3, [r7, #12]
 80030b6:	059b      	lsls	r3, r3, #22
 80030b8:	d402      	bmi.n	80030c0 <_vfiprintf_r+0x2c>
 80030ba:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80030bc:	f7ff fdc1 	bl	8002c42 <__retarget_lock_acquire_recursive>
 80030c0:	89bb      	ldrh	r3, [r7, #12]
 80030c2:	071b      	lsls	r3, r3, #28
 80030c4:	d502      	bpl.n	80030cc <_vfiprintf_r+0x38>
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d113      	bne.n	80030f4 <_vfiprintf_r+0x60>
 80030cc:	0039      	movs	r1, r7
 80030ce:	9803      	ldr	r0, [sp, #12]
 80030d0:	f000 fabc 	bl	800364c <__swsetup_r>
 80030d4:	2800      	cmp	r0, #0
 80030d6:	d00d      	beq.n	80030f4 <_vfiprintf_r+0x60>
 80030d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80030da:	07db      	lsls	r3, r3, #31
 80030dc:	d503      	bpl.n	80030e6 <_vfiprintf_r+0x52>
 80030de:	2001      	movs	r0, #1
 80030e0:	4240      	negs	r0, r0
 80030e2:	b021      	add	sp, #132	@ 0x84
 80030e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030e6:	89bb      	ldrh	r3, [r7, #12]
 80030e8:	059b      	lsls	r3, r3, #22
 80030ea:	d4f8      	bmi.n	80030de <_vfiprintf_r+0x4a>
 80030ec:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80030ee:	f7ff fda9 	bl	8002c44 <__retarget_lock_release_recursive>
 80030f2:	e7f4      	b.n	80030de <_vfiprintf_r+0x4a>
 80030f4:	2300      	movs	r3, #0
 80030f6:	ac08      	add	r4, sp, #32
 80030f8:	6163      	str	r3, [r4, #20]
 80030fa:	3320      	adds	r3, #32
 80030fc:	7663      	strb	r3, [r4, #25]
 80030fe:	3310      	adds	r3, #16
 8003100:	76a3      	strb	r3, [r4, #26]
 8003102:	9607      	str	r6, [sp, #28]
 8003104:	002e      	movs	r6, r5
 8003106:	7833      	ldrb	r3, [r6, #0]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d001      	beq.n	8003110 <_vfiprintf_r+0x7c>
 800310c:	2b25      	cmp	r3, #37	@ 0x25
 800310e:	d148      	bne.n	80031a2 <_vfiprintf_r+0x10e>
 8003110:	1b73      	subs	r3, r6, r5
 8003112:	9305      	str	r3, [sp, #20]
 8003114:	42ae      	cmp	r6, r5
 8003116:	d00b      	beq.n	8003130 <_vfiprintf_r+0x9c>
 8003118:	002a      	movs	r2, r5
 800311a:	0039      	movs	r1, r7
 800311c:	9803      	ldr	r0, [sp, #12]
 800311e:	f7ff ffa7 	bl	8003070 <__sfputs_r>
 8003122:	3001      	adds	r0, #1
 8003124:	d100      	bne.n	8003128 <_vfiprintf_r+0x94>
 8003126:	e0ae      	b.n	8003286 <_vfiprintf_r+0x1f2>
 8003128:	6963      	ldr	r3, [r4, #20]
 800312a:	9a05      	ldr	r2, [sp, #20]
 800312c:	189b      	adds	r3, r3, r2
 800312e:	6163      	str	r3, [r4, #20]
 8003130:	7833      	ldrb	r3, [r6, #0]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d100      	bne.n	8003138 <_vfiprintf_r+0xa4>
 8003136:	e0a6      	b.n	8003286 <_vfiprintf_r+0x1f2>
 8003138:	2201      	movs	r2, #1
 800313a:	2300      	movs	r3, #0
 800313c:	4252      	negs	r2, r2
 800313e:	6062      	str	r2, [r4, #4]
 8003140:	a904      	add	r1, sp, #16
 8003142:	3254      	adds	r2, #84	@ 0x54
 8003144:	1852      	adds	r2, r2, r1
 8003146:	1c75      	adds	r5, r6, #1
 8003148:	6023      	str	r3, [r4, #0]
 800314a:	60e3      	str	r3, [r4, #12]
 800314c:	60a3      	str	r3, [r4, #8]
 800314e:	7013      	strb	r3, [r2, #0]
 8003150:	65a3      	str	r3, [r4, #88]	@ 0x58
 8003152:	4b59      	ldr	r3, [pc, #356]	@ (80032b8 <_vfiprintf_r+0x224>)
 8003154:	2205      	movs	r2, #5
 8003156:	0018      	movs	r0, r3
 8003158:	7829      	ldrb	r1, [r5, #0]
 800315a:	9305      	str	r3, [sp, #20]
 800315c:	f000 fb1e 	bl	800379c <memchr>
 8003160:	1c6e      	adds	r6, r5, #1
 8003162:	2800      	cmp	r0, #0
 8003164:	d11f      	bne.n	80031a6 <_vfiprintf_r+0x112>
 8003166:	6822      	ldr	r2, [r4, #0]
 8003168:	06d3      	lsls	r3, r2, #27
 800316a:	d504      	bpl.n	8003176 <_vfiprintf_r+0xe2>
 800316c:	2353      	movs	r3, #83	@ 0x53
 800316e:	a904      	add	r1, sp, #16
 8003170:	185b      	adds	r3, r3, r1
 8003172:	2120      	movs	r1, #32
 8003174:	7019      	strb	r1, [r3, #0]
 8003176:	0713      	lsls	r3, r2, #28
 8003178:	d504      	bpl.n	8003184 <_vfiprintf_r+0xf0>
 800317a:	2353      	movs	r3, #83	@ 0x53
 800317c:	a904      	add	r1, sp, #16
 800317e:	185b      	adds	r3, r3, r1
 8003180:	212b      	movs	r1, #43	@ 0x2b
 8003182:	7019      	strb	r1, [r3, #0]
 8003184:	782b      	ldrb	r3, [r5, #0]
 8003186:	2b2a      	cmp	r3, #42	@ 0x2a
 8003188:	d016      	beq.n	80031b8 <_vfiprintf_r+0x124>
 800318a:	002e      	movs	r6, r5
 800318c:	2100      	movs	r1, #0
 800318e:	200a      	movs	r0, #10
 8003190:	68e3      	ldr	r3, [r4, #12]
 8003192:	7832      	ldrb	r2, [r6, #0]
 8003194:	1c75      	adds	r5, r6, #1
 8003196:	3a30      	subs	r2, #48	@ 0x30
 8003198:	2a09      	cmp	r2, #9
 800319a:	d950      	bls.n	800323e <_vfiprintf_r+0x1aa>
 800319c:	2900      	cmp	r1, #0
 800319e:	d111      	bne.n	80031c4 <_vfiprintf_r+0x130>
 80031a0:	e017      	b.n	80031d2 <_vfiprintf_r+0x13e>
 80031a2:	3601      	adds	r6, #1
 80031a4:	e7af      	b.n	8003106 <_vfiprintf_r+0x72>
 80031a6:	9b05      	ldr	r3, [sp, #20]
 80031a8:	6822      	ldr	r2, [r4, #0]
 80031aa:	1ac0      	subs	r0, r0, r3
 80031ac:	2301      	movs	r3, #1
 80031ae:	4083      	lsls	r3, r0
 80031b0:	4313      	orrs	r3, r2
 80031b2:	0035      	movs	r5, r6
 80031b4:	6023      	str	r3, [r4, #0]
 80031b6:	e7cc      	b.n	8003152 <_vfiprintf_r+0xbe>
 80031b8:	9b07      	ldr	r3, [sp, #28]
 80031ba:	1d19      	adds	r1, r3, #4
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	9107      	str	r1, [sp, #28]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	db01      	blt.n	80031c8 <_vfiprintf_r+0x134>
 80031c4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80031c6:	e004      	b.n	80031d2 <_vfiprintf_r+0x13e>
 80031c8:	425b      	negs	r3, r3
 80031ca:	60e3      	str	r3, [r4, #12]
 80031cc:	2302      	movs	r3, #2
 80031ce:	4313      	orrs	r3, r2
 80031d0:	6023      	str	r3, [r4, #0]
 80031d2:	7833      	ldrb	r3, [r6, #0]
 80031d4:	2b2e      	cmp	r3, #46	@ 0x2e
 80031d6:	d10c      	bne.n	80031f2 <_vfiprintf_r+0x15e>
 80031d8:	7873      	ldrb	r3, [r6, #1]
 80031da:	2b2a      	cmp	r3, #42	@ 0x2a
 80031dc:	d134      	bne.n	8003248 <_vfiprintf_r+0x1b4>
 80031de:	9b07      	ldr	r3, [sp, #28]
 80031e0:	3602      	adds	r6, #2
 80031e2:	1d1a      	adds	r2, r3, #4
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	9207      	str	r2, [sp, #28]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	da01      	bge.n	80031f0 <_vfiprintf_r+0x15c>
 80031ec:	2301      	movs	r3, #1
 80031ee:	425b      	negs	r3, r3
 80031f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80031f2:	4d32      	ldr	r5, [pc, #200]	@ (80032bc <_vfiprintf_r+0x228>)
 80031f4:	2203      	movs	r2, #3
 80031f6:	0028      	movs	r0, r5
 80031f8:	7831      	ldrb	r1, [r6, #0]
 80031fa:	f000 facf 	bl	800379c <memchr>
 80031fe:	2800      	cmp	r0, #0
 8003200:	d006      	beq.n	8003210 <_vfiprintf_r+0x17c>
 8003202:	2340      	movs	r3, #64	@ 0x40
 8003204:	1b40      	subs	r0, r0, r5
 8003206:	4083      	lsls	r3, r0
 8003208:	6822      	ldr	r2, [r4, #0]
 800320a:	3601      	adds	r6, #1
 800320c:	4313      	orrs	r3, r2
 800320e:	6023      	str	r3, [r4, #0]
 8003210:	7831      	ldrb	r1, [r6, #0]
 8003212:	2206      	movs	r2, #6
 8003214:	482a      	ldr	r0, [pc, #168]	@ (80032c0 <_vfiprintf_r+0x22c>)
 8003216:	1c75      	adds	r5, r6, #1
 8003218:	7621      	strb	r1, [r4, #24]
 800321a:	f000 fabf 	bl	800379c <memchr>
 800321e:	2800      	cmp	r0, #0
 8003220:	d040      	beq.n	80032a4 <_vfiprintf_r+0x210>
 8003222:	4b28      	ldr	r3, [pc, #160]	@ (80032c4 <_vfiprintf_r+0x230>)
 8003224:	2b00      	cmp	r3, #0
 8003226:	d122      	bne.n	800326e <_vfiprintf_r+0x1da>
 8003228:	2207      	movs	r2, #7
 800322a:	9b07      	ldr	r3, [sp, #28]
 800322c:	3307      	adds	r3, #7
 800322e:	4393      	bics	r3, r2
 8003230:	3308      	adds	r3, #8
 8003232:	9307      	str	r3, [sp, #28]
 8003234:	6963      	ldr	r3, [r4, #20]
 8003236:	9a04      	ldr	r2, [sp, #16]
 8003238:	189b      	adds	r3, r3, r2
 800323a:	6163      	str	r3, [r4, #20]
 800323c:	e762      	b.n	8003104 <_vfiprintf_r+0x70>
 800323e:	4343      	muls	r3, r0
 8003240:	002e      	movs	r6, r5
 8003242:	2101      	movs	r1, #1
 8003244:	189b      	adds	r3, r3, r2
 8003246:	e7a4      	b.n	8003192 <_vfiprintf_r+0xfe>
 8003248:	2300      	movs	r3, #0
 800324a:	200a      	movs	r0, #10
 800324c:	0019      	movs	r1, r3
 800324e:	3601      	adds	r6, #1
 8003250:	6063      	str	r3, [r4, #4]
 8003252:	7832      	ldrb	r2, [r6, #0]
 8003254:	1c75      	adds	r5, r6, #1
 8003256:	3a30      	subs	r2, #48	@ 0x30
 8003258:	2a09      	cmp	r2, #9
 800325a:	d903      	bls.n	8003264 <_vfiprintf_r+0x1d0>
 800325c:	2b00      	cmp	r3, #0
 800325e:	d0c8      	beq.n	80031f2 <_vfiprintf_r+0x15e>
 8003260:	9109      	str	r1, [sp, #36]	@ 0x24
 8003262:	e7c6      	b.n	80031f2 <_vfiprintf_r+0x15e>
 8003264:	4341      	muls	r1, r0
 8003266:	002e      	movs	r6, r5
 8003268:	2301      	movs	r3, #1
 800326a:	1889      	adds	r1, r1, r2
 800326c:	e7f1      	b.n	8003252 <_vfiprintf_r+0x1be>
 800326e:	aa07      	add	r2, sp, #28
 8003270:	9200      	str	r2, [sp, #0]
 8003272:	0021      	movs	r1, r4
 8003274:	003a      	movs	r2, r7
 8003276:	4b14      	ldr	r3, [pc, #80]	@ (80032c8 <_vfiprintf_r+0x234>)
 8003278:	9803      	ldr	r0, [sp, #12]
 800327a:	e000      	b.n	800327e <_vfiprintf_r+0x1ea>
 800327c:	bf00      	nop
 800327e:	9004      	str	r0, [sp, #16]
 8003280:	9b04      	ldr	r3, [sp, #16]
 8003282:	3301      	adds	r3, #1
 8003284:	d1d6      	bne.n	8003234 <_vfiprintf_r+0x1a0>
 8003286:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003288:	07db      	lsls	r3, r3, #31
 800328a:	d405      	bmi.n	8003298 <_vfiprintf_r+0x204>
 800328c:	89bb      	ldrh	r3, [r7, #12]
 800328e:	059b      	lsls	r3, r3, #22
 8003290:	d402      	bmi.n	8003298 <_vfiprintf_r+0x204>
 8003292:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8003294:	f7ff fcd6 	bl	8002c44 <__retarget_lock_release_recursive>
 8003298:	89bb      	ldrh	r3, [r7, #12]
 800329a:	065b      	lsls	r3, r3, #25
 800329c:	d500      	bpl.n	80032a0 <_vfiprintf_r+0x20c>
 800329e:	e71e      	b.n	80030de <_vfiprintf_r+0x4a>
 80032a0:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80032a2:	e71e      	b.n	80030e2 <_vfiprintf_r+0x4e>
 80032a4:	aa07      	add	r2, sp, #28
 80032a6:	9200      	str	r2, [sp, #0]
 80032a8:	0021      	movs	r1, r4
 80032aa:	003a      	movs	r2, r7
 80032ac:	4b06      	ldr	r3, [pc, #24]	@ (80032c8 <_vfiprintf_r+0x234>)
 80032ae:	9803      	ldr	r0, [sp, #12]
 80032b0:	f000 f87c 	bl	80033ac <_printf_i>
 80032b4:	e7e3      	b.n	800327e <_vfiprintf_r+0x1ea>
 80032b6:	46c0      	nop			@ (mov r8, r8)
 80032b8:	08003a13 	.word	0x08003a13
 80032bc:	08003a19 	.word	0x08003a19
 80032c0:	08003a1d 	.word	0x08003a1d
 80032c4:	00000000 	.word	0x00000000
 80032c8:	08003071 	.word	0x08003071

080032cc <_printf_common>:
 80032cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80032ce:	0016      	movs	r6, r2
 80032d0:	9301      	str	r3, [sp, #4]
 80032d2:	688a      	ldr	r2, [r1, #8]
 80032d4:	690b      	ldr	r3, [r1, #16]
 80032d6:	000c      	movs	r4, r1
 80032d8:	9000      	str	r0, [sp, #0]
 80032da:	4293      	cmp	r3, r2
 80032dc:	da00      	bge.n	80032e0 <_printf_common+0x14>
 80032de:	0013      	movs	r3, r2
 80032e0:	0022      	movs	r2, r4
 80032e2:	6033      	str	r3, [r6, #0]
 80032e4:	3243      	adds	r2, #67	@ 0x43
 80032e6:	7812      	ldrb	r2, [r2, #0]
 80032e8:	2a00      	cmp	r2, #0
 80032ea:	d001      	beq.n	80032f0 <_printf_common+0x24>
 80032ec:	3301      	adds	r3, #1
 80032ee:	6033      	str	r3, [r6, #0]
 80032f0:	6823      	ldr	r3, [r4, #0]
 80032f2:	069b      	lsls	r3, r3, #26
 80032f4:	d502      	bpl.n	80032fc <_printf_common+0x30>
 80032f6:	6833      	ldr	r3, [r6, #0]
 80032f8:	3302      	adds	r3, #2
 80032fa:	6033      	str	r3, [r6, #0]
 80032fc:	6822      	ldr	r2, [r4, #0]
 80032fe:	2306      	movs	r3, #6
 8003300:	0015      	movs	r5, r2
 8003302:	401d      	ands	r5, r3
 8003304:	421a      	tst	r2, r3
 8003306:	d027      	beq.n	8003358 <_printf_common+0x8c>
 8003308:	0023      	movs	r3, r4
 800330a:	3343      	adds	r3, #67	@ 0x43
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	1e5a      	subs	r2, r3, #1
 8003310:	4193      	sbcs	r3, r2
 8003312:	6822      	ldr	r2, [r4, #0]
 8003314:	0692      	lsls	r2, r2, #26
 8003316:	d430      	bmi.n	800337a <_printf_common+0xae>
 8003318:	0022      	movs	r2, r4
 800331a:	9901      	ldr	r1, [sp, #4]
 800331c:	9800      	ldr	r0, [sp, #0]
 800331e:	9d08      	ldr	r5, [sp, #32]
 8003320:	3243      	adds	r2, #67	@ 0x43
 8003322:	47a8      	blx	r5
 8003324:	3001      	adds	r0, #1
 8003326:	d025      	beq.n	8003374 <_printf_common+0xa8>
 8003328:	2206      	movs	r2, #6
 800332a:	6823      	ldr	r3, [r4, #0]
 800332c:	2500      	movs	r5, #0
 800332e:	4013      	ands	r3, r2
 8003330:	2b04      	cmp	r3, #4
 8003332:	d105      	bne.n	8003340 <_printf_common+0x74>
 8003334:	6833      	ldr	r3, [r6, #0]
 8003336:	68e5      	ldr	r5, [r4, #12]
 8003338:	1aed      	subs	r5, r5, r3
 800333a:	43eb      	mvns	r3, r5
 800333c:	17db      	asrs	r3, r3, #31
 800333e:	401d      	ands	r5, r3
 8003340:	68a3      	ldr	r3, [r4, #8]
 8003342:	6922      	ldr	r2, [r4, #16]
 8003344:	4293      	cmp	r3, r2
 8003346:	dd01      	ble.n	800334c <_printf_common+0x80>
 8003348:	1a9b      	subs	r3, r3, r2
 800334a:	18ed      	adds	r5, r5, r3
 800334c:	2600      	movs	r6, #0
 800334e:	42b5      	cmp	r5, r6
 8003350:	d120      	bne.n	8003394 <_printf_common+0xc8>
 8003352:	2000      	movs	r0, #0
 8003354:	e010      	b.n	8003378 <_printf_common+0xac>
 8003356:	3501      	adds	r5, #1
 8003358:	68e3      	ldr	r3, [r4, #12]
 800335a:	6832      	ldr	r2, [r6, #0]
 800335c:	1a9b      	subs	r3, r3, r2
 800335e:	42ab      	cmp	r3, r5
 8003360:	ddd2      	ble.n	8003308 <_printf_common+0x3c>
 8003362:	0022      	movs	r2, r4
 8003364:	2301      	movs	r3, #1
 8003366:	9901      	ldr	r1, [sp, #4]
 8003368:	9800      	ldr	r0, [sp, #0]
 800336a:	9f08      	ldr	r7, [sp, #32]
 800336c:	3219      	adds	r2, #25
 800336e:	47b8      	blx	r7
 8003370:	3001      	adds	r0, #1
 8003372:	d1f0      	bne.n	8003356 <_printf_common+0x8a>
 8003374:	2001      	movs	r0, #1
 8003376:	4240      	negs	r0, r0
 8003378:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800337a:	2030      	movs	r0, #48	@ 0x30
 800337c:	18e1      	adds	r1, r4, r3
 800337e:	3143      	adds	r1, #67	@ 0x43
 8003380:	7008      	strb	r0, [r1, #0]
 8003382:	0021      	movs	r1, r4
 8003384:	1c5a      	adds	r2, r3, #1
 8003386:	3145      	adds	r1, #69	@ 0x45
 8003388:	7809      	ldrb	r1, [r1, #0]
 800338a:	18a2      	adds	r2, r4, r2
 800338c:	3243      	adds	r2, #67	@ 0x43
 800338e:	3302      	adds	r3, #2
 8003390:	7011      	strb	r1, [r2, #0]
 8003392:	e7c1      	b.n	8003318 <_printf_common+0x4c>
 8003394:	0022      	movs	r2, r4
 8003396:	2301      	movs	r3, #1
 8003398:	9901      	ldr	r1, [sp, #4]
 800339a:	9800      	ldr	r0, [sp, #0]
 800339c:	9f08      	ldr	r7, [sp, #32]
 800339e:	321a      	adds	r2, #26
 80033a0:	47b8      	blx	r7
 80033a2:	3001      	adds	r0, #1
 80033a4:	d0e6      	beq.n	8003374 <_printf_common+0xa8>
 80033a6:	3601      	adds	r6, #1
 80033a8:	e7d1      	b.n	800334e <_printf_common+0x82>
	...

080033ac <_printf_i>:
 80033ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033ae:	b08b      	sub	sp, #44	@ 0x2c
 80033b0:	9206      	str	r2, [sp, #24]
 80033b2:	000a      	movs	r2, r1
 80033b4:	3243      	adds	r2, #67	@ 0x43
 80033b6:	9307      	str	r3, [sp, #28]
 80033b8:	9005      	str	r0, [sp, #20]
 80033ba:	9203      	str	r2, [sp, #12]
 80033bc:	7e0a      	ldrb	r2, [r1, #24]
 80033be:	000c      	movs	r4, r1
 80033c0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80033c2:	2a78      	cmp	r2, #120	@ 0x78
 80033c4:	d809      	bhi.n	80033da <_printf_i+0x2e>
 80033c6:	2a62      	cmp	r2, #98	@ 0x62
 80033c8:	d80b      	bhi.n	80033e2 <_printf_i+0x36>
 80033ca:	2a00      	cmp	r2, #0
 80033cc:	d100      	bne.n	80033d0 <_printf_i+0x24>
 80033ce:	e0bc      	b.n	800354a <_printf_i+0x19e>
 80033d0:	497b      	ldr	r1, [pc, #492]	@ (80035c0 <_printf_i+0x214>)
 80033d2:	9104      	str	r1, [sp, #16]
 80033d4:	2a58      	cmp	r2, #88	@ 0x58
 80033d6:	d100      	bne.n	80033da <_printf_i+0x2e>
 80033d8:	e090      	b.n	80034fc <_printf_i+0x150>
 80033da:	0025      	movs	r5, r4
 80033dc:	3542      	adds	r5, #66	@ 0x42
 80033de:	702a      	strb	r2, [r5, #0]
 80033e0:	e022      	b.n	8003428 <_printf_i+0x7c>
 80033e2:	0010      	movs	r0, r2
 80033e4:	3863      	subs	r0, #99	@ 0x63
 80033e6:	2815      	cmp	r0, #21
 80033e8:	d8f7      	bhi.n	80033da <_printf_i+0x2e>
 80033ea:	f7fc fe8d 	bl	8000108 <__gnu_thumb1_case_shi>
 80033ee:	0016      	.short	0x0016
 80033f0:	fff6001f 	.word	0xfff6001f
 80033f4:	fff6fff6 	.word	0xfff6fff6
 80033f8:	001ffff6 	.word	0x001ffff6
 80033fc:	fff6fff6 	.word	0xfff6fff6
 8003400:	fff6fff6 	.word	0xfff6fff6
 8003404:	003600a1 	.word	0x003600a1
 8003408:	fff60080 	.word	0xfff60080
 800340c:	00b2fff6 	.word	0x00b2fff6
 8003410:	0036fff6 	.word	0x0036fff6
 8003414:	fff6fff6 	.word	0xfff6fff6
 8003418:	0084      	.short	0x0084
 800341a:	0025      	movs	r5, r4
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	3542      	adds	r5, #66	@ 0x42
 8003420:	1d11      	adds	r1, r2, #4
 8003422:	6019      	str	r1, [r3, #0]
 8003424:	6813      	ldr	r3, [r2, #0]
 8003426:	702b      	strb	r3, [r5, #0]
 8003428:	2301      	movs	r3, #1
 800342a:	e0a0      	b.n	800356e <_printf_i+0x1c2>
 800342c:	6818      	ldr	r0, [r3, #0]
 800342e:	6809      	ldr	r1, [r1, #0]
 8003430:	1d02      	adds	r2, r0, #4
 8003432:	060d      	lsls	r5, r1, #24
 8003434:	d50b      	bpl.n	800344e <_printf_i+0xa2>
 8003436:	6806      	ldr	r6, [r0, #0]
 8003438:	601a      	str	r2, [r3, #0]
 800343a:	2e00      	cmp	r6, #0
 800343c:	da03      	bge.n	8003446 <_printf_i+0x9a>
 800343e:	232d      	movs	r3, #45	@ 0x2d
 8003440:	9a03      	ldr	r2, [sp, #12]
 8003442:	4276      	negs	r6, r6
 8003444:	7013      	strb	r3, [r2, #0]
 8003446:	4b5e      	ldr	r3, [pc, #376]	@ (80035c0 <_printf_i+0x214>)
 8003448:	270a      	movs	r7, #10
 800344a:	9304      	str	r3, [sp, #16]
 800344c:	e018      	b.n	8003480 <_printf_i+0xd4>
 800344e:	6806      	ldr	r6, [r0, #0]
 8003450:	601a      	str	r2, [r3, #0]
 8003452:	0649      	lsls	r1, r1, #25
 8003454:	d5f1      	bpl.n	800343a <_printf_i+0x8e>
 8003456:	b236      	sxth	r6, r6
 8003458:	e7ef      	b.n	800343a <_printf_i+0x8e>
 800345a:	6808      	ldr	r0, [r1, #0]
 800345c:	6819      	ldr	r1, [r3, #0]
 800345e:	c940      	ldmia	r1!, {r6}
 8003460:	0605      	lsls	r5, r0, #24
 8003462:	d402      	bmi.n	800346a <_printf_i+0xbe>
 8003464:	0640      	lsls	r0, r0, #25
 8003466:	d500      	bpl.n	800346a <_printf_i+0xbe>
 8003468:	b2b6      	uxth	r6, r6
 800346a:	6019      	str	r1, [r3, #0]
 800346c:	4b54      	ldr	r3, [pc, #336]	@ (80035c0 <_printf_i+0x214>)
 800346e:	270a      	movs	r7, #10
 8003470:	9304      	str	r3, [sp, #16]
 8003472:	2a6f      	cmp	r2, #111	@ 0x6f
 8003474:	d100      	bne.n	8003478 <_printf_i+0xcc>
 8003476:	3f02      	subs	r7, #2
 8003478:	0023      	movs	r3, r4
 800347a:	2200      	movs	r2, #0
 800347c:	3343      	adds	r3, #67	@ 0x43
 800347e:	701a      	strb	r2, [r3, #0]
 8003480:	6863      	ldr	r3, [r4, #4]
 8003482:	60a3      	str	r3, [r4, #8]
 8003484:	2b00      	cmp	r3, #0
 8003486:	db03      	blt.n	8003490 <_printf_i+0xe4>
 8003488:	2104      	movs	r1, #4
 800348a:	6822      	ldr	r2, [r4, #0]
 800348c:	438a      	bics	r2, r1
 800348e:	6022      	str	r2, [r4, #0]
 8003490:	2e00      	cmp	r6, #0
 8003492:	d102      	bne.n	800349a <_printf_i+0xee>
 8003494:	9d03      	ldr	r5, [sp, #12]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d00c      	beq.n	80034b4 <_printf_i+0x108>
 800349a:	9d03      	ldr	r5, [sp, #12]
 800349c:	0030      	movs	r0, r6
 800349e:	0039      	movs	r1, r7
 80034a0:	f7fc fec2 	bl	8000228 <__aeabi_uidivmod>
 80034a4:	9b04      	ldr	r3, [sp, #16]
 80034a6:	3d01      	subs	r5, #1
 80034a8:	5c5b      	ldrb	r3, [r3, r1]
 80034aa:	702b      	strb	r3, [r5, #0]
 80034ac:	0033      	movs	r3, r6
 80034ae:	0006      	movs	r6, r0
 80034b0:	429f      	cmp	r7, r3
 80034b2:	d9f3      	bls.n	800349c <_printf_i+0xf0>
 80034b4:	2f08      	cmp	r7, #8
 80034b6:	d109      	bne.n	80034cc <_printf_i+0x120>
 80034b8:	6823      	ldr	r3, [r4, #0]
 80034ba:	07db      	lsls	r3, r3, #31
 80034bc:	d506      	bpl.n	80034cc <_printf_i+0x120>
 80034be:	6862      	ldr	r2, [r4, #4]
 80034c0:	6923      	ldr	r3, [r4, #16]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	dc02      	bgt.n	80034cc <_printf_i+0x120>
 80034c6:	2330      	movs	r3, #48	@ 0x30
 80034c8:	3d01      	subs	r5, #1
 80034ca:	702b      	strb	r3, [r5, #0]
 80034cc:	9b03      	ldr	r3, [sp, #12]
 80034ce:	1b5b      	subs	r3, r3, r5
 80034d0:	6123      	str	r3, [r4, #16]
 80034d2:	9b07      	ldr	r3, [sp, #28]
 80034d4:	0021      	movs	r1, r4
 80034d6:	9300      	str	r3, [sp, #0]
 80034d8:	9805      	ldr	r0, [sp, #20]
 80034da:	9b06      	ldr	r3, [sp, #24]
 80034dc:	aa09      	add	r2, sp, #36	@ 0x24
 80034de:	f7ff fef5 	bl	80032cc <_printf_common>
 80034e2:	3001      	adds	r0, #1
 80034e4:	d148      	bne.n	8003578 <_printf_i+0x1cc>
 80034e6:	2001      	movs	r0, #1
 80034e8:	4240      	negs	r0, r0
 80034ea:	b00b      	add	sp, #44	@ 0x2c
 80034ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034ee:	2220      	movs	r2, #32
 80034f0:	6809      	ldr	r1, [r1, #0]
 80034f2:	430a      	orrs	r2, r1
 80034f4:	6022      	str	r2, [r4, #0]
 80034f6:	2278      	movs	r2, #120	@ 0x78
 80034f8:	4932      	ldr	r1, [pc, #200]	@ (80035c4 <_printf_i+0x218>)
 80034fa:	9104      	str	r1, [sp, #16]
 80034fc:	0021      	movs	r1, r4
 80034fe:	3145      	adds	r1, #69	@ 0x45
 8003500:	700a      	strb	r2, [r1, #0]
 8003502:	6819      	ldr	r1, [r3, #0]
 8003504:	6822      	ldr	r2, [r4, #0]
 8003506:	c940      	ldmia	r1!, {r6}
 8003508:	0610      	lsls	r0, r2, #24
 800350a:	d402      	bmi.n	8003512 <_printf_i+0x166>
 800350c:	0650      	lsls	r0, r2, #25
 800350e:	d500      	bpl.n	8003512 <_printf_i+0x166>
 8003510:	b2b6      	uxth	r6, r6
 8003512:	6019      	str	r1, [r3, #0]
 8003514:	07d3      	lsls	r3, r2, #31
 8003516:	d502      	bpl.n	800351e <_printf_i+0x172>
 8003518:	2320      	movs	r3, #32
 800351a:	4313      	orrs	r3, r2
 800351c:	6023      	str	r3, [r4, #0]
 800351e:	2e00      	cmp	r6, #0
 8003520:	d001      	beq.n	8003526 <_printf_i+0x17a>
 8003522:	2710      	movs	r7, #16
 8003524:	e7a8      	b.n	8003478 <_printf_i+0xcc>
 8003526:	2220      	movs	r2, #32
 8003528:	6823      	ldr	r3, [r4, #0]
 800352a:	4393      	bics	r3, r2
 800352c:	6023      	str	r3, [r4, #0]
 800352e:	e7f8      	b.n	8003522 <_printf_i+0x176>
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	680d      	ldr	r5, [r1, #0]
 8003534:	1d10      	adds	r0, r2, #4
 8003536:	6949      	ldr	r1, [r1, #20]
 8003538:	6018      	str	r0, [r3, #0]
 800353a:	6813      	ldr	r3, [r2, #0]
 800353c:	062e      	lsls	r6, r5, #24
 800353e:	d501      	bpl.n	8003544 <_printf_i+0x198>
 8003540:	6019      	str	r1, [r3, #0]
 8003542:	e002      	b.n	800354a <_printf_i+0x19e>
 8003544:	066d      	lsls	r5, r5, #25
 8003546:	d5fb      	bpl.n	8003540 <_printf_i+0x194>
 8003548:	8019      	strh	r1, [r3, #0]
 800354a:	2300      	movs	r3, #0
 800354c:	9d03      	ldr	r5, [sp, #12]
 800354e:	6123      	str	r3, [r4, #16]
 8003550:	e7bf      	b.n	80034d2 <_printf_i+0x126>
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	1d11      	adds	r1, r2, #4
 8003556:	6019      	str	r1, [r3, #0]
 8003558:	6815      	ldr	r5, [r2, #0]
 800355a:	2100      	movs	r1, #0
 800355c:	0028      	movs	r0, r5
 800355e:	6862      	ldr	r2, [r4, #4]
 8003560:	f000 f91c 	bl	800379c <memchr>
 8003564:	2800      	cmp	r0, #0
 8003566:	d001      	beq.n	800356c <_printf_i+0x1c0>
 8003568:	1b40      	subs	r0, r0, r5
 800356a:	6060      	str	r0, [r4, #4]
 800356c:	6863      	ldr	r3, [r4, #4]
 800356e:	6123      	str	r3, [r4, #16]
 8003570:	2300      	movs	r3, #0
 8003572:	9a03      	ldr	r2, [sp, #12]
 8003574:	7013      	strb	r3, [r2, #0]
 8003576:	e7ac      	b.n	80034d2 <_printf_i+0x126>
 8003578:	002a      	movs	r2, r5
 800357a:	6923      	ldr	r3, [r4, #16]
 800357c:	9906      	ldr	r1, [sp, #24]
 800357e:	9805      	ldr	r0, [sp, #20]
 8003580:	9d07      	ldr	r5, [sp, #28]
 8003582:	47a8      	blx	r5
 8003584:	3001      	adds	r0, #1
 8003586:	d0ae      	beq.n	80034e6 <_printf_i+0x13a>
 8003588:	6823      	ldr	r3, [r4, #0]
 800358a:	079b      	lsls	r3, r3, #30
 800358c:	d415      	bmi.n	80035ba <_printf_i+0x20e>
 800358e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003590:	68e0      	ldr	r0, [r4, #12]
 8003592:	4298      	cmp	r0, r3
 8003594:	daa9      	bge.n	80034ea <_printf_i+0x13e>
 8003596:	0018      	movs	r0, r3
 8003598:	e7a7      	b.n	80034ea <_printf_i+0x13e>
 800359a:	0022      	movs	r2, r4
 800359c:	2301      	movs	r3, #1
 800359e:	9906      	ldr	r1, [sp, #24]
 80035a0:	9805      	ldr	r0, [sp, #20]
 80035a2:	9e07      	ldr	r6, [sp, #28]
 80035a4:	3219      	adds	r2, #25
 80035a6:	47b0      	blx	r6
 80035a8:	3001      	adds	r0, #1
 80035aa:	d09c      	beq.n	80034e6 <_printf_i+0x13a>
 80035ac:	3501      	adds	r5, #1
 80035ae:	68e3      	ldr	r3, [r4, #12]
 80035b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80035b2:	1a9b      	subs	r3, r3, r2
 80035b4:	42ab      	cmp	r3, r5
 80035b6:	dcf0      	bgt.n	800359a <_printf_i+0x1ee>
 80035b8:	e7e9      	b.n	800358e <_printf_i+0x1e2>
 80035ba:	2500      	movs	r5, #0
 80035bc:	e7f7      	b.n	80035ae <_printf_i+0x202>
 80035be:	46c0      	nop			@ (mov r8, r8)
 80035c0:	08003a24 	.word	0x08003a24
 80035c4:	08003a35 	.word	0x08003a35

080035c8 <__swbuf_r>:
 80035c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035ca:	0006      	movs	r6, r0
 80035cc:	000d      	movs	r5, r1
 80035ce:	0014      	movs	r4, r2
 80035d0:	2800      	cmp	r0, #0
 80035d2:	d004      	beq.n	80035de <__swbuf_r+0x16>
 80035d4:	6a03      	ldr	r3, [r0, #32]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d101      	bne.n	80035de <__swbuf_r+0x16>
 80035da:	f7ff fa03 	bl	80029e4 <__sinit>
 80035de:	69a3      	ldr	r3, [r4, #24]
 80035e0:	60a3      	str	r3, [r4, #8]
 80035e2:	89a3      	ldrh	r3, [r4, #12]
 80035e4:	071b      	lsls	r3, r3, #28
 80035e6:	d502      	bpl.n	80035ee <__swbuf_r+0x26>
 80035e8:	6923      	ldr	r3, [r4, #16]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d109      	bne.n	8003602 <__swbuf_r+0x3a>
 80035ee:	0021      	movs	r1, r4
 80035f0:	0030      	movs	r0, r6
 80035f2:	f000 f82b 	bl	800364c <__swsetup_r>
 80035f6:	2800      	cmp	r0, #0
 80035f8:	d003      	beq.n	8003602 <__swbuf_r+0x3a>
 80035fa:	2501      	movs	r5, #1
 80035fc:	426d      	negs	r5, r5
 80035fe:	0028      	movs	r0, r5
 8003600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003602:	6923      	ldr	r3, [r4, #16]
 8003604:	6820      	ldr	r0, [r4, #0]
 8003606:	b2ef      	uxtb	r7, r5
 8003608:	1ac0      	subs	r0, r0, r3
 800360a:	6963      	ldr	r3, [r4, #20]
 800360c:	b2ed      	uxtb	r5, r5
 800360e:	4283      	cmp	r3, r0
 8003610:	dc05      	bgt.n	800361e <__swbuf_r+0x56>
 8003612:	0021      	movs	r1, r4
 8003614:	0030      	movs	r0, r6
 8003616:	f7ff fcc1 	bl	8002f9c <_fflush_r>
 800361a:	2800      	cmp	r0, #0
 800361c:	d1ed      	bne.n	80035fa <__swbuf_r+0x32>
 800361e:	68a3      	ldr	r3, [r4, #8]
 8003620:	3001      	adds	r0, #1
 8003622:	3b01      	subs	r3, #1
 8003624:	60a3      	str	r3, [r4, #8]
 8003626:	6823      	ldr	r3, [r4, #0]
 8003628:	1c5a      	adds	r2, r3, #1
 800362a:	6022      	str	r2, [r4, #0]
 800362c:	701f      	strb	r7, [r3, #0]
 800362e:	6963      	ldr	r3, [r4, #20]
 8003630:	4283      	cmp	r3, r0
 8003632:	d004      	beq.n	800363e <__swbuf_r+0x76>
 8003634:	89a3      	ldrh	r3, [r4, #12]
 8003636:	07db      	lsls	r3, r3, #31
 8003638:	d5e1      	bpl.n	80035fe <__swbuf_r+0x36>
 800363a:	2d0a      	cmp	r5, #10
 800363c:	d1df      	bne.n	80035fe <__swbuf_r+0x36>
 800363e:	0021      	movs	r1, r4
 8003640:	0030      	movs	r0, r6
 8003642:	f7ff fcab 	bl	8002f9c <_fflush_r>
 8003646:	2800      	cmp	r0, #0
 8003648:	d0d9      	beq.n	80035fe <__swbuf_r+0x36>
 800364a:	e7d6      	b.n	80035fa <__swbuf_r+0x32>

0800364c <__swsetup_r>:
 800364c:	4b2d      	ldr	r3, [pc, #180]	@ (8003704 <__swsetup_r+0xb8>)
 800364e:	b570      	push	{r4, r5, r6, lr}
 8003650:	0005      	movs	r5, r0
 8003652:	6818      	ldr	r0, [r3, #0]
 8003654:	000c      	movs	r4, r1
 8003656:	2800      	cmp	r0, #0
 8003658:	d004      	beq.n	8003664 <__swsetup_r+0x18>
 800365a:	6a03      	ldr	r3, [r0, #32]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d101      	bne.n	8003664 <__swsetup_r+0x18>
 8003660:	f7ff f9c0 	bl	80029e4 <__sinit>
 8003664:	230c      	movs	r3, #12
 8003666:	5ee2      	ldrsh	r2, [r4, r3]
 8003668:	0713      	lsls	r3, r2, #28
 800366a:	d423      	bmi.n	80036b4 <__swsetup_r+0x68>
 800366c:	06d3      	lsls	r3, r2, #27
 800366e:	d407      	bmi.n	8003680 <__swsetup_r+0x34>
 8003670:	2309      	movs	r3, #9
 8003672:	602b      	str	r3, [r5, #0]
 8003674:	2340      	movs	r3, #64	@ 0x40
 8003676:	2001      	movs	r0, #1
 8003678:	4313      	orrs	r3, r2
 800367a:	81a3      	strh	r3, [r4, #12]
 800367c:	4240      	negs	r0, r0
 800367e:	e03a      	b.n	80036f6 <__swsetup_r+0xaa>
 8003680:	0752      	lsls	r2, r2, #29
 8003682:	d513      	bpl.n	80036ac <__swsetup_r+0x60>
 8003684:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003686:	2900      	cmp	r1, #0
 8003688:	d008      	beq.n	800369c <__swsetup_r+0x50>
 800368a:	0023      	movs	r3, r4
 800368c:	3344      	adds	r3, #68	@ 0x44
 800368e:	4299      	cmp	r1, r3
 8003690:	d002      	beq.n	8003698 <__swsetup_r+0x4c>
 8003692:	0028      	movs	r0, r5
 8003694:	f7ff faf6 	bl	8002c84 <_free_r>
 8003698:	2300      	movs	r3, #0
 800369a:	6363      	str	r3, [r4, #52]	@ 0x34
 800369c:	2224      	movs	r2, #36	@ 0x24
 800369e:	89a3      	ldrh	r3, [r4, #12]
 80036a0:	4393      	bics	r3, r2
 80036a2:	81a3      	strh	r3, [r4, #12]
 80036a4:	2300      	movs	r3, #0
 80036a6:	6063      	str	r3, [r4, #4]
 80036a8:	6923      	ldr	r3, [r4, #16]
 80036aa:	6023      	str	r3, [r4, #0]
 80036ac:	2308      	movs	r3, #8
 80036ae:	89a2      	ldrh	r2, [r4, #12]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	81a3      	strh	r3, [r4, #12]
 80036b4:	6923      	ldr	r3, [r4, #16]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d10b      	bne.n	80036d2 <__swsetup_r+0x86>
 80036ba:	21a0      	movs	r1, #160	@ 0xa0
 80036bc:	2280      	movs	r2, #128	@ 0x80
 80036be:	89a3      	ldrh	r3, [r4, #12]
 80036c0:	0089      	lsls	r1, r1, #2
 80036c2:	0092      	lsls	r2, r2, #2
 80036c4:	400b      	ands	r3, r1
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d003      	beq.n	80036d2 <__swsetup_r+0x86>
 80036ca:	0021      	movs	r1, r4
 80036cc:	0028      	movs	r0, r5
 80036ce:	f000 f89b 	bl	8003808 <__smakebuf_r>
 80036d2:	230c      	movs	r3, #12
 80036d4:	5ee2      	ldrsh	r2, [r4, r3]
 80036d6:	2101      	movs	r1, #1
 80036d8:	0013      	movs	r3, r2
 80036da:	400b      	ands	r3, r1
 80036dc:	420a      	tst	r2, r1
 80036de:	d00b      	beq.n	80036f8 <__swsetup_r+0xac>
 80036e0:	2300      	movs	r3, #0
 80036e2:	60a3      	str	r3, [r4, #8]
 80036e4:	6963      	ldr	r3, [r4, #20]
 80036e6:	425b      	negs	r3, r3
 80036e8:	61a3      	str	r3, [r4, #24]
 80036ea:	2000      	movs	r0, #0
 80036ec:	6923      	ldr	r3, [r4, #16]
 80036ee:	4283      	cmp	r3, r0
 80036f0:	d101      	bne.n	80036f6 <__swsetup_r+0xaa>
 80036f2:	0613      	lsls	r3, r2, #24
 80036f4:	d4be      	bmi.n	8003674 <__swsetup_r+0x28>
 80036f6:	bd70      	pop	{r4, r5, r6, pc}
 80036f8:	0791      	lsls	r1, r2, #30
 80036fa:	d400      	bmi.n	80036fe <__swsetup_r+0xb2>
 80036fc:	6963      	ldr	r3, [r4, #20]
 80036fe:	60a3      	str	r3, [r4, #8]
 8003700:	e7f3      	b.n	80036ea <__swsetup_r+0x9e>
 8003702:	46c0      	nop			@ (mov r8, r8)
 8003704:	2000002c 	.word	0x2000002c

08003708 <_raise_r>:
 8003708:	b570      	push	{r4, r5, r6, lr}
 800370a:	0004      	movs	r4, r0
 800370c:	000d      	movs	r5, r1
 800370e:	291f      	cmp	r1, #31
 8003710:	d904      	bls.n	800371c <_raise_r+0x14>
 8003712:	2316      	movs	r3, #22
 8003714:	6003      	str	r3, [r0, #0]
 8003716:	2001      	movs	r0, #1
 8003718:	4240      	negs	r0, r0
 800371a:	bd70      	pop	{r4, r5, r6, pc}
 800371c:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800371e:	2b00      	cmp	r3, #0
 8003720:	d004      	beq.n	800372c <_raise_r+0x24>
 8003722:	008a      	lsls	r2, r1, #2
 8003724:	189b      	adds	r3, r3, r2
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	2a00      	cmp	r2, #0
 800372a:	d108      	bne.n	800373e <_raise_r+0x36>
 800372c:	0020      	movs	r0, r4
 800372e:	f000 f831 	bl	8003794 <_getpid_r>
 8003732:	002a      	movs	r2, r5
 8003734:	0001      	movs	r1, r0
 8003736:	0020      	movs	r0, r4
 8003738:	f000 f81a 	bl	8003770 <_kill_r>
 800373c:	e7ed      	b.n	800371a <_raise_r+0x12>
 800373e:	2a01      	cmp	r2, #1
 8003740:	d009      	beq.n	8003756 <_raise_r+0x4e>
 8003742:	1c51      	adds	r1, r2, #1
 8003744:	d103      	bne.n	800374e <_raise_r+0x46>
 8003746:	2316      	movs	r3, #22
 8003748:	6003      	str	r3, [r0, #0]
 800374a:	2001      	movs	r0, #1
 800374c:	e7e5      	b.n	800371a <_raise_r+0x12>
 800374e:	2100      	movs	r1, #0
 8003750:	0028      	movs	r0, r5
 8003752:	6019      	str	r1, [r3, #0]
 8003754:	4790      	blx	r2
 8003756:	2000      	movs	r0, #0
 8003758:	e7df      	b.n	800371a <_raise_r+0x12>
	...

0800375c <raise>:
 800375c:	b510      	push	{r4, lr}
 800375e:	4b03      	ldr	r3, [pc, #12]	@ (800376c <raise+0x10>)
 8003760:	0001      	movs	r1, r0
 8003762:	6818      	ldr	r0, [r3, #0]
 8003764:	f7ff ffd0 	bl	8003708 <_raise_r>
 8003768:	bd10      	pop	{r4, pc}
 800376a:	46c0      	nop			@ (mov r8, r8)
 800376c:	2000002c 	.word	0x2000002c

08003770 <_kill_r>:
 8003770:	2300      	movs	r3, #0
 8003772:	b570      	push	{r4, r5, r6, lr}
 8003774:	4d06      	ldr	r5, [pc, #24]	@ (8003790 <_kill_r+0x20>)
 8003776:	0004      	movs	r4, r0
 8003778:	0008      	movs	r0, r1
 800377a:	0011      	movs	r1, r2
 800377c:	602b      	str	r3, [r5, #0]
 800377e:	f7fd f985 	bl	8000a8c <_kill>
 8003782:	1c43      	adds	r3, r0, #1
 8003784:	d103      	bne.n	800378e <_kill_r+0x1e>
 8003786:	682b      	ldr	r3, [r5, #0]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d000      	beq.n	800378e <_kill_r+0x1e>
 800378c:	6023      	str	r3, [r4, #0]
 800378e:	bd70      	pop	{r4, r5, r6, pc}
 8003790:	20000368 	.word	0x20000368

08003794 <_getpid_r>:
 8003794:	b510      	push	{r4, lr}
 8003796:	f7fd f977 	bl	8000a88 <_getpid>
 800379a:	bd10      	pop	{r4, pc}

0800379c <memchr>:
 800379c:	b2c9      	uxtb	r1, r1
 800379e:	1882      	adds	r2, r0, r2
 80037a0:	4290      	cmp	r0, r2
 80037a2:	d101      	bne.n	80037a8 <memchr+0xc>
 80037a4:	2000      	movs	r0, #0
 80037a6:	4770      	bx	lr
 80037a8:	7803      	ldrb	r3, [r0, #0]
 80037aa:	428b      	cmp	r3, r1
 80037ac:	d0fb      	beq.n	80037a6 <memchr+0xa>
 80037ae:	3001      	adds	r0, #1
 80037b0:	e7f6      	b.n	80037a0 <memchr+0x4>
	...

080037b4 <__swhatbuf_r>:
 80037b4:	b570      	push	{r4, r5, r6, lr}
 80037b6:	000e      	movs	r6, r1
 80037b8:	001d      	movs	r5, r3
 80037ba:	230e      	movs	r3, #14
 80037bc:	5ec9      	ldrsh	r1, [r1, r3]
 80037be:	0014      	movs	r4, r2
 80037c0:	b096      	sub	sp, #88	@ 0x58
 80037c2:	2900      	cmp	r1, #0
 80037c4:	da0c      	bge.n	80037e0 <__swhatbuf_r+0x2c>
 80037c6:	89b2      	ldrh	r2, [r6, #12]
 80037c8:	2380      	movs	r3, #128	@ 0x80
 80037ca:	0011      	movs	r1, r2
 80037cc:	4019      	ands	r1, r3
 80037ce:	421a      	tst	r2, r3
 80037d0:	d114      	bne.n	80037fc <__swhatbuf_r+0x48>
 80037d2:	2380      	movs	r3, #128	@ 0x80
 80037d4:	00db      	lsls	r3, r3, #3
 80037d6:	2000      	movs	r0, #0
 80037d8:	6029      	str	r1, [r5, #0]
 80037da:	6023      	str	r3, [r4, #0]
 80037dc:	b016      	add	sp, #88	@ 0x58
 80037de:	bd70      	pop	{r4, r5, r6, pc}
 80037e0:	466a      	mov	r2, sp
 80037e2:	f000 f853 	bl	800388c <_fstat_r>
 80037e6:	2800      	cmp	r0, #0
 80037e8:	dbed      	blt.n	80037c6 <__swhatbuf_r+0x12>
 80037ea:	23f0      	movs	r3, #240	@ 0xf0
 80037ec:	9901      	ldr	r1, [sp, #4]
 80037ee:	021b      	lsls	r3, r3, #8
 80037f0:	4019      	ands	r1, r3
 80037f2:	4b04      	ldr	r3, [pc, #16]	@ (8003804 <__swhatbuf_r+0x50>)
 80037f4:	18c9      	adds	r1, r1, r3
 80037f6:	424b      	negs	r3, r1
 80037f8:	4159      	adcs	r1, r3
 80037fa:	e7ea      	b.n	80037d2 <__swhatbuf_r+0x1e>
 80037fc:	2100      	movs	r1, #0
 80037fe:	2340      	movs	r3, #64	@ 0x40
 8003800:	e7e9      	b.n	80037d6 <__swhatbuf_r+0x22>
 8003802:	46c0      	nop			@ (mov r8, r8)
 8003804:	ffffe000 	.word	0xffffe000

08003808 <__smakebuf_r>:
 8003808:	b5f0      	push	{r4, r5, r6, r7, lr}
 800380a:	2602      	movs	r6, #2
 800380c:	898b      	ldrh	r3, [r1, #12]
 800380e:	0005      	movs	r5, r0
 8003810:	000c      	movs	r4, r1
 8003812:	b085      	sub	sp, #20
 8003814:	4233      	tst	r3, r6
 8003816:	d007      	beq.n	8003828 <__smakebuf_r+0x20>
 8003818:	0023      	movs	r3, r4
 800381a:	3347      	adds	r3, #71	@ 0x47
 800381c:	6023      	str	r3, [r4, #0]
 800381e:	6123      	str	r3, [r4, #16]
 8003820:	2301      	movs	r3, #1
 8003822:	6163      	str	r3, [r4, #20]
 8003824:	b005      	add	sp, #20
 8003826:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003828:	ab03      	add	r3, sp, #12
 800382a:	aa02      	add	r2, sp, #8
 800382c:	f7ff ffc2 	bl	80037b4 <__swhatbuf_r>
 8003830:	9f02      	ldr	r7, [sp, #8]
 8003832:	9001      	str	r0, [sp, #4]
 8003834:	0039      	movs	r1, r7
 8003836:	0028      	movs	r0, r5
 8003838:	f7ff fa9a 	bl	8002d70 <_malloc_r>
 800383c:	2800      	cmp	r0, #0
 800383e:	d108      	bne.n	8003852 <__smakebuf_r+0x4a>
 8003840:	220c      	movs	r2, #12
 8003842:	5ea3      	ldrsh	r3, [r4, r2]
 8003844:	059a      	lsls	r2, r3, #22
 8003846:	d4ed      	bmi.n	8003824 <__smakebuf_r+0x1c>
 8003848:	2203      	movs	r2, #3
 800384a:	4393      	bics	r3, r2
 800384c:	431e      	orrs	r6, r3
 800384e:	81a6      	strh	r6, [r4, #12]
 8003850:	e7e2      	b.n	8003818 <__smakebuf_r+0x10>
 8003852:	2380      	movs	r3, #128	@ 0x80
 8003854:	89a2      	ldrh	r2, [r4, #12]
 8003856:	6020      	str	r0, [r4, #0]
 8003858:	4313      	orrs	r3, r2
 800385a:	81a3      	strh	r3, [r4, #12]
 800385c:	9b03      	ldr	r3, [sp, #12]
 800385e:	6120      	str	r0, [r4, #16]
 8003860:	6167      	str	r7, [r4, #20]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d00c      	beq.n	8003880 <__smakebuf_r+0x78>
 8003866:	0028      	movs	r0, r5
 8003868:	230e      	movs	r3, #14
 800386a:	5ee1      	ldrsh	r1, [r4, r3]
 800386c:	f000 f820 	bl	80038b0 <_isatty_r>
 8003870:	2800      	cmp	r0, #0
 8003872:	d005      	beq.n	8003880 <__smakebuf_r+0x78>
 8003874:	2303      	movs	r3, #3
 8003876:	89a2      	ldrh	r2, [r4, #12]
 8003878:	439a      	bics	r2, r3
 800387a:	3b02      	subs	r3, #2
 800387c:	4313      	orrs	r3, r2
 800387e:	81a3      	strh	r3, [r4, #12]
 8003880:	89a3      	ldrh	r3, [r4, #12]
 8003882:	9a01      	ldr	r2, [sp, #4]
 8003884:	4313      	orrs	r3, r2
 8003886:	81a3      	strh	r3, [r4, #12]
 8003888:	e7cc      	b.n	8003824 <__smakebuf_r+0x1c>
	...

0800388c <_fstat_r>:
 800388c:	2300      	movs	r3, #0
 800388e:	b570      	push	{r4, r5, r6, lr}
 8003890:	4d06      	ldr	r5, [pc, #24]	@ (80038ac <_fstat_r+0x20>)
 8003892:	0004      	movs	r4, r0
 8003894:	0008      	movs	r0, r1
 8003896:	0011      	movs	r1, r2
 8003898:	602b      	str	r3, [r5, #0]
 800389a:	f7fd f924 	bl	8000ae6 <_fstat>
 800389e:	1c43      	adds	r3, r0, #1
 80038a0:	d103      	bne.n	80038aa <_fstat_r+0x1e>
 80038a2:	682b      	ldr	r3, [r5, #0]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d000      	beq.n	80038aa <_fstat_r+0x1e>
 80038a8:	6023      	str	r3, [r4, #0]
 80038aa:	bd70      	pop	{r4, r5, r6, pc}
 80038ac:	20000368 	.word	0x20000368

080038b0 <_isatty_r>:
 80038b0:	2300      	movs	r3, #0
 80038b2:	b570      	push	{r4, r5, r6, lr}
 80038b4:	4d06      	ldr	r5, [pc, #24]	@ (80038d0 <_isatty_r+0x20>)
 80038b6:	0004      	movs	r4, r0
 80038b8:	0008      	movs	r0, r1
 80038ba:	602b      	str	r3, [r5, #0]
 80038bc:	f7fd f918 	bl	8000af0 <_isatty>
 80038c0:	1c43      	adds	r3, r0, #1
 80038c2:	d103      	bne.n	80038cc <_isatty_r+0x1c>
 80038c4:	682b      	ldr	r3, [r5, #0]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d000      	beq.n	80038cc <_isatty_r+0x1c>
 80038ca:	6023      	str	r3, [r4, #0]
 80038cc:	bd70      	pop	{r4, r5, r6, pc}
 80038ce:	46c0      	nop			@ (mov r8, r8)
 80038d0:	20000368 	.word	0x20000368

080038d4 <_gettimeofday>:
 80038d4:	2258      	movs	r2, #88	@ 0x58
 80038d6:	2001      	movs	r0, #1
 80038d8:	4b01      	ldr	r3, [pc, #4]	@ (80038e0 <_gettimeofday+0xc>)
 80038da:	4240      	negs	r0, r0
 80038dc:	601a      	str	r2, [r3, #0]
 80038de:	4770      	bx	lr
 80038e0:	20000368 	.word	0x20000368

080038e4 <_init>:
 80038e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038e6:	46c0      	nop			@ (mov r8, r8)
 80038e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038ea:	bc08      	pop	{r3}
 80038ec:	469e      	mov	lr, r3
 80038ee:	4770      	bx	lr

080038f0 <_fini>:
 80038f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038f2:	46c0      	nop			@ (mov r8, r8)
 80038f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038f6:	bc08      	pop	{r3}
 80038f8:	469e      	mov	lr, r3
 80038fa:	4770      	bx	lr
