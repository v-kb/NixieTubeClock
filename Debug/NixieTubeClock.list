
NixieTubeClock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063a8  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  08006468  08006468  00007468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065d4  080065d4  000088b8  2**0
                  CONTENTS
  4 .ARM          00000008  080065d4  080065d4  000075d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080065dc  080065dc  000088b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065dc  080065dc  000075dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080065e0  080065e0  000075e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000008b8  20000000  080065e4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000df0  200008b8  08006e9c  000088b8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200016a8  08006e9c  000096a8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000088b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e64f  00000000  00000000  000088e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000047fd  00000000  00000000  00026f2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000b357  00000000  00000000  0002b72c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001388  00000000  00000000  00036a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001457  00000000  00000000  00037e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000150a3  00000000  00000000  00039267  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00022066  00000000  00000000  0004e30a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00077e8d  00000000  00000000  00070370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000e81fd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003bb8  00000000  00000000  000e8240  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000058  00000000  00000000  000ebdf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200008b8 	.word	0x200008b8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006450 	.word	0x08006450

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200008bc 	.word	0x200008bc
 8000104:	08006450 	.word	0x08006450

08000108 <__gnu_thumb1_case_uqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5c09      	ldrb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			@ (mov r8, r8)

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	@ 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	@ 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			@ (mov r8, r8)

08000408 <__aeabi_llsr>:
 8000408:	40d0      	lsrs	r0, r2
 800040a:	000b      	movs	r3, r1
 800040c:	40d1      	lsrs	r1, r2
 800040e:	469c      	mov	ip, r3
 8000410:	3a20      	subs	r2, #32
 8000412:	40d3      	lsrs	r3, r2
 8000414:	4318      	orrs	r0, r3
 8000416:	4252      	negs	r2, r2
 8000418:	4663      	mov	r3, ip
 800041a:	4093      	lsls	r3, r2
 800041c:	4318      	orrs	r0, r3
 800041e:	4770      	bx	lr

08000420 <__aeabi_cfrcmple>:
 8000420:	4684      	mov	ip, r0
 8000422:	0008      	movs	r0, r1
 8000424:	4661      	mov	r1, ip
 8000426:	e7ff      	b.n	8000428 <__aeabi_cfcmpeq>

08000428 <__aeabi_cfcmpeq>:
 8000428:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800042a:	f000 fc87 	bl	8000d3c <__lesf2>
 800042e:	2800      	cmp	r0, #0
 8000430:	d401      	bmi.n	8000436 <__aeabi_cfcmpeq+0xe>
 8000432:	2100      	movs	r1, #0
 8000434:	42c8      	cmn	r0, r1
 8000436:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000438 <__aeabi_fcmpeq>:
 8000438:	b510      	push	{r4, lr}
 800043a:	f000 fc07 	bl	8000c4c <__eqsf2>
 800043e:	4240      	negs	r0, r0
 8000440:	3001      	adds	r0, #1
 8000442:	bd10      	pop	{r4, pc}

08000444 <__aeabi_fcmplt>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f000 fc79 	bl	8000d3c <__lesf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	db01      	blt.n	8000452 <__aeabi_fcmplt+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			@ (mov r8, r8)

08000458 <__aeabi_fcmple>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f000 fc6f 	bl	8000d3c <__lesf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	dd01      	ble.n	8000466 <__aeabi_fcmple+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_fcmpgt>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 fc15 	bl	8000c9c <__gesf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dc01      	bgt.n	800047a <__aeabi_fcmpgt+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_fcmpge>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 fc0b 	bl	8000c9c <__gesf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	da01      	bge.n	800048e <__aeabi_fcmpge+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_uldivmod>:
 8000494:	2b00      	cmp	r3, #0
 8000496:	d111      	bne.n	80004bc <__aeabi_uldivmod+0x28>
 8000498:	2a00      	cmp	r2, #0
 800049a:	d10f      	bne.n	80004bc <__aeabi_uldivmod+0x28>
 800049c:	2900      	cmp	r1, #0
 800049e:	d100      	bne.n	80004a2 <__aeabi_uldivmod+0xe>
 80004a0:	2800      	cmp	r0, #0
 80004a2:	d002      	beq.n	80004aa <__aeabi_uldivmod+0x16>
 80004a4:	2100      	movs	r1, #0
 80004a6:	43c9      	mvns	r1, r1
 80004a8:	0008      	movs	r0, r1
 80004aa:	b407      	push	{r0, r1, r2}
 80004ac:	4802      	ldr	r0, [pc, #8]	@ (80004b8 <__aeabi_uldivmod+0x24>)
 80004ae:	a102      	add	r1, pc, #8	@ (adr r1, 80004b8 <__aeabi_uldivmod+0x24>)
 80004b0:	1840      	adds	r0, r0, r1
 80004b2:	9002      	str	r0, [sp, #8]
 80004b4:	bd03      	pop	{r0, r1, pc}
 80004b6:	46c0      	nop			@ (mov r8, r8)
 80004b8:	ffffff4d 	.word	0xffffff4d
 80004bc:	b403      	push	{r0, r1}
 80004be:	4668      	mov	r0, sp
 80004c0:	b501      	push	{r0, lr}
 80004c2:	9802      	ldr	r0, [sp, #8]
 80004c4:	f000 f84c 	bl	8000560 <__udivmoddi4>
 80004c8:	9b01      	ldr	r3, [sp, #4]
 80004ca:	469e      	mov	lr, r3
 80004cc:	b002      	add	sp, #8
 80004ce:	bc0c      	pop	{r2, r3}
 80004d0:	4770      	bx	lr
 80004d2:	46c0      	nop			@ (mov r8, r8)

080004d4 <__aeabi_lmul>:
 80004d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004d6:	46ce      	mov	lr, r9
 80004d8:	4699      	mov	r9, r3
 80004da:	0c03      	lsrs	r3, r0, #16
 80004dc:	469c      	mov	ip, r3
 80004de:	0413      	lsls	r3, r2, #16
 80004e0:	4647      	mov	r7, r8
 80004e2:	0c1b      	lsrs	r3, r3, #16
 80004e4:	001d      	movs	r5, r3
 80004e6:	000e      	movs	r6, r1
 80004e8:	4661      	mov	r1, ip
 80004ea:	0404      	lsls	r4, r0, #16
 80004ec:	0c24      	lsrs	r4, r4, #16
 80004ee:	b580      	push	{r7, lr}
 80004f0:	0007      	movs	r7, r0
 80004f2:	0c10      	lsrs	r0, r2, #16
 80004f4:	434b      	muls	r3, r1
 80004f6:	4365      	muls	r5, r4
 80004f8:	4341      	muls	r1, r0
 80004fa:	4360      	muls	r0, r4
 80004fc:	0c2c      	lsrs	r4, r5, #16
 80004fe:	18c0      	adds	r0, r0, r3
 8000500:	1824      	adds	r4, r4, r0
 8000502:	468c      	mov	ip, r1
 8000504:	42a3      	cmp	r3, r4
 8000506:	d903      	bls.n	8000510 <__aeabi_lmul+0x3c>
 8000508:	2380      	movs	r3, #128	@ 0x80
 800050a:	025b      	lsls	r3, r3, #9
 800050c:	4698      	mov	r8, r3
 800050e:	44c4      	add	ip, r8
 8000510:	4649      	mov	r1, r9
 8000512:	4379      	muls	r1, r7
 8000514:	4356      	muls	r6, r2
 8000516:	0c23      	lsrs	r3, r4, #16
 8000518:	042d      	lsls	r5, r5, #16
 800051a:	0c2d      	lsrs	r5, r5, #16
 800051c:	1989      	adds	r1, r1, r6
 800051e:	4463      	add	r3, ip
 8000520:	0424      	lsls	r4, r4, #16
 8000522:	1960      	adds	r0, r4, r5
 8000524:	18c9      	adds	r1, r1, r3
 8000526:	bcc0      	pop	{r6, r7}
 8000528:	46b9      	mov	r9, r7
 800052a:	46b0      	mov	r8, r6
 800052c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800052e:	46c0      	nop			@ (mov r8, r8)

08000530 <__aeabi_f2uiz>:
 8000530:	219e      	movs	r1, #158	@ 0x9e
 8000532:	b510      	push	{r4, lr}
 8000534:	05c9      	lsls	r1, r1, #23
 8000536:	1c04      	adds	r4, r0, #0
 8000538:	f7ff ffa2 	bl	8000480 <__aeabi_fcmpge>
 800053c:	2800      	cmp	r0, #0
 800053e:	d103      	bne.n	8000548 <__aeabi_f2uiz+0x18>
 8000540:	1c20      	adds	r0, r4, #0
 8000542:	f000 ff41 	bl	80013c8 <__aeabi_f2iz>
 8000546:	bd10      	pop	{r4, pc}
 8000548:	219e      	movs	r1, #158	@ 0x9e
 800054a:	1c20      	adds	r0, r4, #0
 800054c:	05c9      	lsls	r1, r1, #23
 800054e:	f000 fd81 	bl	8001054 <__aeabi_fsub>
 8000552:	f000 ff39 	bl	80013c8 <__aeabi_f2iz>
 8000556:	2380      	movs	r3, #128	@ 0x80
 8000558:	061b      	lsls	r3, r3, #24
 800055a:	469c      	mov	ip, r3
 800055c:	4460      	add	r0, ip
 800055e:	e7f2      	b.n	8000546 <__aeabi_f2uiz+0x16>

08000560 <__udivmoddi4>:
 8000560:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000562:	4657      	mov	r7, sl
 8000564:	464e      	mov	r6, r9
 8000566:	4645      	mov	r5, r8
 8000568:	46de      	mov	lr, fp
 800056a:	b5e0      	push	{r5, r6, r7, lr}
 800056c:	0004      	movs	r4, r0
 800056e:	000d      	movs	r5, r1
 8000570:	4692      	mov	sl, r2
 8000572:	4699      	mov	r9, r3
 8000574:	b083      	sub	sp, #12
 8000576:	428b      	cmp	r3, r1
 8000578:	d830      	bhi.n	80005dc <__udivmoddi4+0x7c>
 800057a:	d02d      	beq.n	80005d8 <__udivmoddi4+0x78>
 800057c:	4649      	mov	r1, r9
 800057e:	4650      	mov	r0, sl
 8000580:	f001 fbb0 	bl	8001ce4 <__clzdi2>
 8000584:	0029      	movs	r1, r5
 8000586:	0006      	movs	r6, r0
 8000588:	0020      	movs	r0, r4
 800058a:	f001 fbab 	bl	8001ce4 <__clzdi2>
 800058e:	1a33      	subs	r3, r6, r0
 8000590:	4698      	mov	r8, r3
 8000592:	3b20      	subs	r3, #32
 8000594:	d434      	bmi.n	8000600 <__udivmoddi4+0xa0>
 8000596:	469b      	mov	fp, r3
 8000598:	4653      	mov	r3, sl
 800059a:	465a      	mov	r2, fp
 800059c:	4093      	lsls	r3, r2
 800059e:	4642      	mov	r2, r8
 80005a0:	001f      	movs	r7, r3
 80005a2:	4653      	mov	r3, sl
 80005a4:	4093      	lsls	r3, r2
 80005a6:	001e      	movs	r6, r3
 80005a8:	42af      	cmp	r7, r5
 80005aa:	d83b      	bhi.n	8000624 <__udivmoddi4+0xc4>
 80005ac:	42af      	cmp	r7, r5
 80005ae:	d100      	bne.n	80005b2 <__udivmoddi4+0x52>
 80005b0:	e079      	b.n	80006a6 <__udivmoddi4+0x146>
 80005b2:	465b      	mov	r3, fp
 80005b4:	1ba4      	subs	r4, r4, r6
 80005b6:	41bd      	sbcs	r5, r7
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	da00      	bge.n	80005be <__udivmoddi4+0x5e>
 80005bc:	e076      	b.n	80006ac <__udivmoddi4+0x14c>
 80005be:	2200      	movs	r2, #0
 80005c0:	2300      	movs	r3, #0
 80005c2:	9200      	str	r2, [sp, #0]
 80005c4:	9301      	str	r3, [sp, #4]
 80005c6:	2301      	movs	r3, #1
 80005c8:	465a      	mov	r2, fp
 80005ca:	4093      	lsls	r3, r2
 80005cc:	9301      	str	r3, [sp, #4]
 80005ce:	2301      	movs	r3, #1
 80005d0:	4642      	mov	r2, r8
 80005d2:	4093      	lsls	r3, r2
 80005d4:	9300      	str	r3, [sp, #0]
 80005d6:	e029      	b.n	800062c <__udivmoddi4+0xcc>
 80005d8:	4282      	cmp	r2, r0
 80005da:	d9cf      	bls.n	800057c <__udivmoddi4+0x1c>
 80005dc:	2200      	movs	r2, #0
 80005de:	2300      	movs	r3, #0
 80005e0:	9200      	str	r2, [sp, #0]
 80005e2:	9301      	str	r3, [sp, #4]
 80005e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <__udivmoddi4+0x8e>
 80005ea:	601c      	str	r4, [r3, #0]
 80005ec:	605d      	str	r5, [r3, #4]
 80005ee:	9800      	ldr	r0, [sp, #0]
 80005f0:	9901      	ldr	r1, [sp, #4]
 80005f2:	b003      	add	sp, #12
 80005f4:	bcf0      	pop	{r4, r5, r6, r7}
 80005f6:	46bb      	mov	fp, r7
 80005f8:	46b2      	mov	sl, r6
 80005fa:	46a9      	mov	r9, r5
 80005fc:	46a0      	mov	r8, r4
 80005fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000600:	4642      	mov	r2, r8
 8000602:	469b      	mov	fp, r3
 8000604:	2320      	movs	r3, #32
 8000606:	1a9b      	subs	r3, r3, r2
 8000608:	4652      	mov	r2, sl
 800060a:	40da      	lsrs	r2, r3
 800060c:	4641      	mov	r1, r8
 800060e:	0013      	movs	r3, r2
 8000610:	464a      	mov	r2, r9
 8000612:	408a      	lsls	r2, r1
 8000614:	0017      	movs	r7, r2
 8000616:	4642      	mov	r2, r8
 8000618:	431f      	orrs	r7, r3
 800061a:	4653      	mov	r3, sl
 800061c:	4093      	lsls	r3, r2
 800061e:	001e      	movs	r6, r3
 8000620:	42af      	cmp	r7, r5
 8000622:	d9c3      	bls.n	80005ac <__udivmoddi4+0x4c>
 8000624:	2200      	movs	r2, #0
 8000626:	2300      	movs	r3, #0
 8000628:	9200      	str	r2, [sp, #0]
 800062a:	9301      	str	r3, [sp, #4]
 800062c:	4643      	mov	r3, r8
 800062e:	2b00      	cmp	r3, #0
 8000630:	d0d8      	beq.n	80005e4 <__udivmoddi4+0x84>
 8000632:	07fb      	lsls	r3, r7, #31
 8000634:	0872      	lsrs	r2, r6, #1
 8000636:	431a      	orrs	r2, r3
 8000638:	4646      	mov	r6, r8
 800063a:	087b      	lsrs	r3, r7, #1
 800063c:	e00e      	b.n	800065c <__udivmoddi4+0xfc>
 800063e:	42ab      	cmp	r3, r5
 8000640:	d101      	bne.n	8000646 <__udivmoddi4+0xe6>
 8000642:	42a2      	cmp	r2, r4
 8000644:	d80c      	bhi.n	8000660 <__udivmoddi4+0x100>
 8000646:	1aa4      	subs	r4, r4, r2
 8000648:	419d      	sbcs	r5, r3
 800064a:	2001      	movs	r0, #1
 800064c:	1924      	adds	r4, r4, r4
 800064e:	416d      	adcs	r5, r5
 8000650:	2100      	movs	r1, #0
 8000652:	3e01      	subs	r6, #1
 8000654:	1824      	adds	r4, r4, r0
 8000656:	414d      	adcs	r5, r1
 8000658:	2e00      	cmp	r6, #0
 800065a:	d006      	beq.n	800066a <__udivmoddi4+0x10a>
 800065c:	42ab      	cmp	r3, r5
 800065e:	d9ee      	bls.n	800063e <__udivmoddi4+0xde>
 8000660:	3e01      	subs	r6, #1
 8000662:	1924      	adds	r4, r4, r4
 8000664:	416d      	adcs	r5, r5
 8000666:	2e00      	cmp	r6, #0
 8000668:	d1f8      	bne.n	800065c <__udivmoddi4+0xfc>
 800066a:	9800      	ldr	r0, [sp, #0]
 800066c:	9901      	ldr	r1, [sp, #4]
 800066e:	465b      	mov	r3, fp
 8000670:	1900      	adds	r0, r0, r4
 8000672:	4169      	adcs	r1, r5
 8000674:	2b00      	cmp	r3, #0
 8000676:	db24      	blt.n	80006c2 <__udivmoddi4+0x162>
 8000678:	002b      	movs	r3, r5
 800067a:	465a      	mov	r2, fp
 800067c:	4644      	mov	r4, r8
 800067e:	40d3      	lsrs	r3, r2
 8000680:	002a      	movs	r2, r5
 8000682:	40e2      	lsrs	r2, r4
 8000684:	001c      	movs	r4, r3
 8000686:	465b      	mov	r3, fp
 8000688:	0015      	movs	r5, r2
 800068a:	2b00      	cmp	r3, #0
 800068c:	db2a      	blt.n	80006e4 <__udivmoddi4+0x184>
 800068e:	0026      	movs	r6, r4
 8000690:	409e      	lsls	r6, r3
 8000692:	0033      	movs	r3, r6
 8000694:	0026      	movs	r6, r4
 8000696:	4647      	mov	r7, r8
 8000698:	40be      	lsls	r6, r7
 800069a:	0032      	movs	r2, r6
 800069c:	1a80      	subs	r0, r0, r2
 800069e:	4199      	sbcs	r1, r3
 80006a0:	9000      	str	r0, [sp, #0]
 80006a2:	9101      	str	r1, [sp, #4]
 80006a4:	e79e      	b.n	80005e4 <__udivmoddi4+0x84>
 80006a6:	42a3      	cmp	r3, r4
 80006a8:	d8bc      	bhi.n	8000624 <__udivmoddi4+0xc4>
 80006aa:	e782      	b.n	80005b2 <__udivmoddi4+0x52>
 80006ac:	4642      	mov	r2, r8
 80006ae:	2320      	movs	r3, #32
 80006b0:	2100      	movs	r1, #0
 80006b2:	1a9b      	subs	r3, r3, r2
 80006b4:	2200      	movs	r2, #0
 80006b6:	9100      	str	r1, [sp, #0]
 80006b8:	9201      	str	r2, [sp, #4]
 80006ba:	2201      	movs	r2, #1
 80006bc:	40da      	lsrs	r2, r3
 80006be:	9201      	str	r2, [sp, #4]
 80006c0:	e785      	b.n	80005ce <__udivmoddi4+0x6e>
 80006c2:	4642      	mov	r2, r8
 80006c4:	2320      	movs	r3, #32
 80006c6:	1a9b      	subs	r3, r3, r2
 80006c8:	002a      	movs	r2, r5
 80006ca:	4646      	mov	r6, r8
 80006cc:	409a      	lsls	r2, r3
 80006ce:	0023      	movs	r3, r4
 80006d0:	40f3      	lsrs	r3, r6
 80006d2:	4644      	mov	r4, r8
 80006d4:	4313      	orrs	r3, r2
 80006d6:	002a      	movs	r2, r5
 80006d8:	40e2      	lsrs	r2, r4
 80006da:	001c      	movs	r4, r3
 80006dc:	465b      	mov	r3, fp
 80006de:	0015      	movs	r5, r2
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	dad4      	bge.n	800068e <__udivmoddi4+0x12e>
 80006e4:	4642      	mov	r2, r8
 80006e6:	002f      	movs	r7, r5
 80006e8:	2320      	movs	r3, #32
 80006ea:	0026      	movs	r6, r4
 80006ec:	4097      	lsls	r7, r2
 80006ee:	1a9b      	subs	r3, r3, r2
 80006f0:	40de      	lsrs	r6, r3
 80006f2:	003b      	movs	r3, r7
 80006f4:	4333      	orrs	r3, r6
 80006f6:	e7cd      	b.n	8000694 <__udivmoddi4+0x134>

080006f8 <__aeabi_fadd>:
 80006f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006fa:	46ce      	mov	lr, r9
 80006fc:	4647      	mov	r7, r8
 80006fe:	0243      	lsls	r3, r0, #9
 8000700:	0a5a      	lsrs	r2, r3, #9
 8000702:	024e      	lsls	r6, r1, #9
 8000704:	0045      	lsls	r5, r0, #1
 8000706:	0fc4      	lsrs	r4, r0, #31
 8000708:	0048      	lsls	r0, r1, #1
 800070a:	4691      	mov	r9, r2
 800070c:	0e2d      	lsrs	r5, r5, #24
 800070e:	0a72      	lsrs	r2, r6, #9
 8000710:	0e00      	lsrs	r0, r0, #24
 8000712:	4694      	mov	ip, r2
 8000714:	b580      	push	{r7, lr}
 8000716:	099b      	lsrs	r3, r3, #6
 8000718:	0fc9      	lsrs	r1, r1, #31
 800071a:	09b6      	lsrs	r6, r6, #6
 800071c:	1a2a      	subs	r2, r5, r0
 800071e:	428c      	cmp	r4, r1
 8000720:	d021      	beq.n	8000766 <__aeabi_fadd+0x6e>
 8000722:	2a00      	cmp	r2, #0
 8000724:	dd0d      	ble.n	8000742 <__aeabi_fadd+0x4a>
 8000726:	2800      	cmp	r0, #0
 8000728:	d12d      	bne.n	8000786 <__aeabi_fadd+0x8e>
 800072a:	2e00      	cmp	r6, #0
 800072c:	d100      	bne.n	8000730 <__aeabi_fadd+0x38>
 800072e:	e08d      	b.n	800084c <__aeabi_fadd+0x154>
 8000730:	1e51      	subs	r1, r2, #1
 8000732:	2a01      	cmp	r2, #1
 8000734:	d100      	bne.n	8000738 <__aeabi_fadd+0x40>
 8000736:	e11d      	b.n	8000974 <__aeabi_fadd+0x27c>
 8000738:	2aff      	cmp	r2, #255	@ 0xff
 800073a:	d100      	bne.n	800073e <__aeabi_fadd+0x46>
 800073c:	e0ab      	b.n	8000896 <__aeabi_fadd+0x19e>
 800073e:	000a      	movs	r2, r1
 8000740:	e027      	b.n	8000792 <__aeabi_fadd+0x9a>
 8000742:	2a00      	cmp	r2, #0
 8000744:	d04d      	beq.n	80007e2 <__aeabi_fadd+0xea>
 8000746:	1b42      	subs	r2, r0, r5
 8000748:	2d00      	cmp	r5, #0
 800074a:	d000      	beq.n	800074e <__aeabi_fadd+0x56>
 800074c:	e0cc      	b.n	80008e8 <__aeabi_fadd+0x1f0>
 800074e:	2b00      	cmp	r3, #0
 8000750:	d100      	bne.n	8000754 <__aeabi_fadd+0x5c>
 8000752:	e079      	b.n	8000848 <__aeabi_fadd+0x150>
 8000754:	1e54      	subs	r4, r2, #1
 8000756:	2a01      	cmp	r2, #1
 8000758:	d100      	bne.n	800075c <__aeabi_fadd+0x64>
 800075a:	e128      	b.n	80009ae <__aeabi_fadd+0x2b6>
 800075c:	2aff      	cmp	r2, #255	@ 0xff
 800075e:	d100      	bne.n	8000762 <__aeabi_fadd+0x6a>
 8000760:	e097      	b.n	8000892 <__aeabi_fadd+0x19a>
 8000762:	0022      	movs	r2, r4
 8000764:	e0c5      	b.n	80008f2 <__aeabi_fadd+0x1fa>
 8000766:	2a00      	cmp	r2, #0
 8000768:	dc00      	bgt.n	800076c <__aeabi_fadd+0x74>
 800076a:	e096      	b.n	800089a <__aeabi_fadd+0x1a2>
 800076c:	2800      	cmp	r0, #0
 800076e:	d04f      	beq.n	8000810 <__aeabi_fadd+0x118>
 8000770:	2dff      	cmp	r5, #255	@ 0xff
 8000772:	d100      	bne.n	8000776 <__aeabi_fadd+0x7e>
 8000774:	e08f      	b.n	8000896 <__aeabi_fadd+0x19e>
 8000776:	2180      	movs	r1, #128	@ 0x80
 8000778:	04c9      	lsls	r1, r1, #19
 800077a:	430e      	orrs	r6, r1
 800077c:	2a1b      	cmp	r2, #27
 800077e:	dd51      	ble.n	8000824 <__aeabi_fadd+0x12c>
 8000780:	002a      	movs	r2, r5
 8000782:	3301      	adds	r3, #1
 8000784:	e018      	b.n	80007b8 <__aeabi_fadd+0xc0>
 8000786:	2dff      	cmp	r5, #255	@ 0xff
 8000788:	d100      	bne.n	800078c <__aeabi_fadd+0x94>
 800078a:	e084      	b.n	8000896 <__aeabi_fadd+0x19e>
 800078c:	2180      	movs	r1, #128	@ 0x80
 800078e:	04c9      	lsls	r1, r1, #19
 8000790:	430e      	orrs	r6, r1
 8000792:	2101      	movs	r1, #1
 8000794:	2a1b      	cmp	r2, #27
 8000796:	dc08      	bgt.n	80007aa <__aeabi_fadd+0xb2>
 8000798:	0031      	movs	r1, r6
 800079a:	2020      	movs	r0, #32
 800079c:	40d1      	lsrs	r1, r2
 800079e:	1a82      	subs	r2, r0, r2
 80007a0:	4096      	lsls	r6, r2
 80007a2:	0032      	movs	r2, r6
 80007a4:	1e50      	subs	r0, r2, #1
 80007a6:	4182      	sbcs	r2, r0
 80007a8:	4311      	orrs	r1, r2
 80007aa:	1a5b      	subs	r3, r3, r1
 80007ac:	015a      	lsls	r2, r3, #5
 80007ae:	d459      	bmi.n	8000864 <__aeabi_fadd+0x16c>
 80007b0:	2107      	movs	r1, #7
 80007b2:	002a      	movs	r2, r5
 80007b4:	4019      	ands	r1, r3
 80007b6:	d049      	beq.n	800084c <__aeabi_fadd+0x154>
 80007b8:	210f      	movs	r1, #15
 80007ba:	4019      	ands	r1, r3
 80007bc:	2904      	cmp	r1, #4
 80007be:	d000      	beq.n	80007c2 <__aeabi_fadd+0xca>
 80007c0:	3304      	adds	r3, #4
 80007c2:	0159      	lsls	r1, r3, #5
 80007c4:	d542      	bpl.n	800084c <__aeabi_fadd+0x154>
 80007c6:	1c50      	adds	r0, r2, #1
 80007c8:	2afe      	cmp	r2, #254	@ 0xfe
 80007ca:	d03a      	beq.n	8000842 <__aeabi_fadd+0x14a>
 80007cc:	019b      	lsls	r3, r3, #6
 80007ce:	b2c0      	uxtb	r0, r0
 80007d0:	0a5b      	lsrs	r3, r3, #9
 80007d2:	05c0      	lsls	r0, r0, #23
 80007d4:	4318      	orrs	r0, r3
 80007d6:	07e4      	lsls	r4, r4, #31
 80007d8:	4320      	orrs	r0, r4
 80007da:	bcc0      	pop	{r6, r7}
 80007dc:	46b9      	mov	r9, r7
 80007de:	46b0      	mov	r8, r6
 80007e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80007e2:	20fe      	movs	r0, #254	@ 0xfe
 80007e4:	4680      	mov	r8, r0
 80007e6:	1c6f      	adds	r7, r5, #1
 80007e8:	0038      	movs	r0, r7
 80007ea:	4647      	mov	r7, r8
 80007ec:	4207      	tst	r7, r0
 80007ee:	d000      	beq.n	80007f2 <__aeabi_fadd+0xfa>
 80007f0:	e08e      	b.n	8000910 <__aeabi_fadd+0x218>
 80007f2:	2d00      	cmp	r5, #0
 80007f4:	d000      	beq.n	80007f8 <__aeabi_fadd+0x100>
 80007f6:	e0b4      	b.n	8000962 <__aeabi_fadd+0x26a>
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d100      	bne.n	80007fe <__aeabi_fadd+0x106>
 80007fc:	e0db      	b.n	80009b6 <__aeabi_fadd+0x2be>
 80007fe:	2e00      	cmp	r6, #0
 8000800:	d06c      	beq.n	80008dc <__aeabi_fadd+0x1e4>
 8000802:	1b98      	subs	r0, r3, r6
 8000804:	0145      	lsls	r5, r0, #5
 8000806:	d400      	bmi.n	800080a <__aeabi_fadd+0x112>
 8000808:	e0f7      	b.n	80009fa <__aeabi_fadd+0x302>
 800080a:	000c      	movs	r4, r1
 800080c:	1af3      	subs	r3, r6, r3
 800080e:	e03d      	b.n	800088c <__aeabi_fadd+0x194>
 8000810:	2e00      	cmp	r6, #0
 8000812:	d01b      	beq.n	800084c <__aeabi_fadd+0x154>
 8000814:	1e51      	subs	r1, r2, #1
 8000816:	2a01      	cmp	r2, #1
 8000818:	d100      	bne.n	800081c <__aeabi_fadd+0x124>
 800081a:	e082      	b.n	8000922 <__aeabi_fadd+0x22a>
 800081c:	2aff      	cmp	r2, #255	@ 0xff
 800081e:	d03a      	beq.n	8000896 <__aeabi_fadd+0x19e>
 8000820:	000a      	movs	r2, r1
 8000822:	e7ab      	b.n	800077c <__aeabi_fadd+0x84>
 8000824:	0031      	movs	r1, r6
 8000826:	2020      	movs	r0, #32
 8000828:	40d1      	lsrs	r1, r2
 800082a:	1a82      	subs	r2, r0, r2
 800082c:	4096      	lsls	r6, r2
 800082e:	0032      	movs	r2, r6
 8000830:	1e50      	subs	r0, r2, #1
 8000832:	4182      	sbcs	r2, r0
 8000834:	430a      	orrs	r2, r1
 8000836:	189b      	adds	r3, r3, r2
 8000838:	015a      	lsls	r2, r3, #5
 800083a:	d5b9      	bpl.n	80007b0 <__aeabi_fadd+0xb8>
 800083c:	1c6a      	adds	r2, r5, #1
 800083e:	2dfe      	cmp	r5, #254	@ 0xfe
 8000840:	d175      	bne.n	800092e <__aeabi_fadd+0x236>
 8000842:	20ff      	movs	r0, #255	@ 0xff
 8000844:	2300      	movs	r3, #0
 8000846:	e7c4      	b.n	80007d2 <__aeabi_fadd+0xda>
 8000848:	000c      	movs	r4, r1
 800084a:	0033      	movs	r3, r6
 800084c:	08db      	lsrs	r3, r3, #3
 800084e:	2aff      	cmp	r2, #255	@ 0xff
 8000850:	d146      	bne.n	80008e0 <__aeabi_fadd+0x1e8>
 8000852:	2b00      	cmp	r3, #0
 8000854:	d0f5      	beq.n	8000842 <__aeabi_fadd+0x14a>
 8000856:	2280      	movs	r2, #128	@ 0x80
 8000858:	03d2      	lsls	r2, r2, #15
 800085a:	4313      	orrs	r3, r2
 800085c:	025b      	lsls	r3, r3, #9
 800085e:	20ff      	movs	r0, #255	@ 0xff
 8000860:	0a5b      	lsrs	r3, r3, #9
 8000862:	e7b6      	b.n	80007d2 <__aeabi_fadd+0xda>
 8000864:	019f      	lsls	r7, r3, #6
 8000866:	09bf      	lsrs	r7, r7, #6
 8000868:	0038      	movs	r0, r7
 800086a:	f001 fa1d 	bl	8001ca8 <__clzsi2>
 800086e:	3805      	subs	r0, #5
 8000870:	4087      	lsls	r7, r0
 8000872:	4285      	cmp	r5, r0
 8000874:	dc24      	bgt.n	80008c0 <__aeabi_fadd+0x1c8>
 8000876:	003b      	movs	r3, r7
 8000878:	2120      	movs	r1, #32
 800087a:	1b42      	subs	r2, r0, r5
 800087c:	3201      	adds	r2, #1
 800087e:	40d3      	lsrs	r3, r2
 8000880:	1a8a      	subs	r2, r1, r2
 8000882:	4097      	lsls	r7, r2
 8000884:	1e7a      	subs	r2, r7, #1
 8000886:	4197      	sbcs	r7, r2
 8000888:	2200      	movs	r2, #0
 800088a:	433b      	orrs	r3, r7
 800088c:	0759      	lsls	r1, r3, #29
 800088e:	d193      	bne.n	80007b8 <__aeabi_fadd+0xc0>
 8000890:	e797      	b.n	80007c2 <__aeabi_fadd+0xca>
 8000892:	000c      	movs	r4, r1
 8000894:	0033      	movs	r3, r6
 8000896:	08db      	lsrs	r3, r3, #3
 8000898:	e7db      	b.n	8000852 <__aeabi_fadd+0x15a>
 800089a:	2a00      	cmp	r2, #0
 800089c:	d014      	beq.n	80008c8 <__aeabi_fadd+0x1d0>
 800089e:	1b42      	subs	r2, r0, r5
 80008a0:	2d00      	cmp	r5, #0
 80008a2:	d14b      	bne.n	800093c <__aeabi_fadd+0x244>
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d0d0      	beq.n	800084a <__aeabi_fadd+0x152>
 80008a8:	1e51      	subs	r1, r2, #1
 80008aa:	2a01      	cmp	r2, #1
 80008ac:	d100      	bne.n	80008b0 <__aeabi_fadd+0x1b8>
 80008ae:	e09e      	b.n	80009ee <__aeabi_fadd+0x2f6>
 80008b0:	2aff      	cmp	r2, #255	@ 0xff
 80008b2:	d0ef      	beq.n	8000894 <__aeabi_fadd+0x19c>
 80008b4:	000a      	movs	r2, r1
 80008b6:	2a1b      	cmp	r2, #27
 80008b8:	dd5f      	ble.n	800097a <__aeabi_fadd+0x282>
 80008ba:	0002      	movs	r2, r0
 80008bc:	1c73      	adds	r3, r6, #1
 80008be:	e77b      	b.n	80007b8 <__aeabi_fadd+0xc0>
 80008c0:	4b50      	ldr	r3, [pc, #320]	@ (8000a04 <__aeabi_fadd+0x30c>)
 80008c2:	1a2a      	subs	r2, r5, r0
 80008c4:	403b      	ands	r3, r7
 80008c6:	e7e1      	b.n	800088c <__aeabi_fadd+0x194>
 80008c8:	21fe      	movs	r1, #254	@ 0xfe
 80008ca:	1c6a      	adds	r2, r5, #1
 80008cc:	4211      	tst	r1, r2
 80008ce:	d13b      	bne.n	8000948 <__aeabi_fadd+0x250>
 80008d0:	2d00      	cmp	r5, #0
 80008d2:	d15d      	bne.n	8000990 <__aeabi_fadd+0x298>
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d07f      	beq.n	80009d8 <__aeabi_fadd+0x2e0>
 80008d8:	2e00      	cmp	r6, #0
 80008da:	d17f      	bne.n	80009dc <__aeabi_fadd+0x2e4>
 80008dc:	2200      	movs	r2, #0
 80008de:	08db      	lsrs	r3, r3, #3
 80008e0:	025b      	lsls	r3, r3, #9
 80008e2:	0a5b      	lsrs	r3, r3, #9
 80008e4:	b2d0      	uxtb	r0, r2
 80008e6:	e774      	b.n	80007d2 <__aeabi_fadd+0xda>
 80008e8:	28ff      	cmp	r0, #255	@ 0xff
 80008ea:	d0d2      	beq.n	8000892 <__aeabi_fadd+0x19a>
 80008ec:	2480      	movs	r4, #128	@ 0x80
 80008ee:	04e4      	lsls	r4, r4, #19
 80008f0:	4323      	orrs	r3, r4
 80008f2:	2401      	movs	r4, #1
 80008f4:	2a1b      	cmp	r2, #27
 80008f6:	dc07      	bgt.n	8000908 <__aeabi_fadd+0x210>
 80008f8:	001c      	movs	r4, r3
 80008fa:	2520      	movs	r5, #32
 80008fc:	40d4      	lsrs	r4, r2
 80008fe:	1aaa      	subs	r2, r5, r2
 8000900:	4093      	lsls	r3, r2
 8000902:	1e5a      	subs	r2, r3, #1
 8000904:	4193      	sbcs	r3, r2
 8000906:	431c      	orrs	r4, r3
 8000908:	1b33      	subs	r3, r6, r4
 800090a:	0005      	movs	r5, r0
 800090c:	000c      	movs	r4, r1
 800090e:	e74d      	b.n	80007ac <__aeabi_fadd+0xb4>
 8000910:	1b9f      	subs	r7, r3, r6
 8000912:	017a      	lsls	r2, r7, #5
 8000914:	d422      	bmi.n	800095c <__aeabi_fadd+0x264>
 8000916:	2f00      	cmp	r7, #0
 8000918:	d1a6      	bne.n	8000868 <__aeabi_fadd+0x170>
 800091a:	2400      	movs	r4, #0
 800091c:	2000      	movs	r0, #0
 800091e:	2300      	movs	r3, #0
 8000920:	e757      	b.n	80007d2 <__aeabi_fadd+0xda>
 8000922:	199b      	adds	r3, r3, r6
 8000924:	2501      	movs	r5, #1
 8000926:	3201      	adds	r2, #1
 8000928:	0159      	lsls	r1, r3, #5
 800092a:	d400      	bmi.n	800092e <__aeabi_fadd+0x236>
 800092c:	e740      	b.n	80007b0 <__aeabi_fadd+0xb8>
 800092e:	2101      	movs	r1, #1
 8000930:	4835      	ldr	r0, [pc, #212]	@ (8000a08 <__aeabi_fadd+0x310>)
 8000932:	4019      	ands	r1, r3
 8000934:	085b      	lsrs	r3, r3, #1
 8000936:	4003      	ands	r3, r0
 8000938:	430b      	orrs	r3, r1
 800093a:	e7a7      	b.n	800088c <__aeabi_fadd+0x194>
 800093c:	28ff      	cmp	r0, #255	@ 0xff
 800093e:	d0a9      	beq.n	8000894 <__aeabi_fadd+0x19c>
 8000940:	2180      	movs	r1, #128	@ 0x80
 8000942:	04c9      	lsls	r1, r1, #19
 8000944:	430b      	orrs	r3, r1
 8000946:	e7b6      	b.n	80008b6 <__aeabi_fadd+0x1be>
 8000948:	2aff      	cmp	r2, #255	@ 0xff
 800094a:	d100      	bne.n	800094e <__aeabi_fadd+0x256>
 800094c:	e779      	b.n	8000842 <__aeabi_fadd+0x14a>
 800094e:	199b      	adds	r3, r3, r6
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	0759      	lsls	r1, r3, #29
 8000954:	d000      	beq.n	8000958 <__aeabi_fadd+0x260>
 8000956:	e72f      	b.n	80007b8 <__aeabi_fadd+0xc0>
 8000958:	08db      	lsrs	r3, r3, #3
 800095a:	e7c1      	b.n	80008e0 <__aeabi_fadd+0x1e8>
 800095c:	000c      	movs	r4, r1
 800095e:	1af7      	subs	r7, r6, r3
 8000960:	e782      	b.n	8000868 <__aeabi_fadd+0x170>
 8000962:	2b00      	cmp	r3, #0
 8000964:	d12c      	bne.n	80009c0 <__aeabi_fadd+0x2c8>
 8000966:	2e00      	cmp	r6, #0
 8000968:	d193      	bne.n	8000892 <__aeabi_fadd+0x19a>
 800096a:	2380      	movs	r3, #128	@ 0x80
 800096c:	2400      	movs	r4, #0
 800096e:	20ff      	movs	r0, #255	@ 0xff
 8000970:	03db      	lsls	r3, r3, #15
 8000972:	e72e      	b.n	80007d2 <__aeabi_fadd+0xda>
 8000974:	2501      	movs	r5, #1
 8000976:	1b9b      	subs	r3, r3, r6
 8000978:	e718      	b.n	80007ac <__aeabi_fadd+0xb4>
 800097a:	0019      	movs	r1, r3
 800097c:	2520      	movs	r5, #32
 800097e:	40d1      	lsrs	r1, r2
 8000980:	1aaa      	subs	r2, r5, r2
 8000982:	4093      	lsls	r3, r2
 8000984:	1e5a      	subs	r2, r3, #1
 8000986:	4193      	sbcs	r3, r2
 8000988:	430b      	orrs	r3, r1
 800098a:	0005      	movs	r5, r0
 800098c:	199b      	adds	r3, r3, r6
 800098e:	e753      	b.n	8000838 <__aeabi_fadd+0x140>
 8000990:	2b00      	cmp	r3, #0
 8000992:	d100      	bne.n	8000996 <__aeabi_fadd+0x29e>
 8000994:	e77e      	b.n	8000894 <__aeabi_fadd+0x19c>
 8000996:	2e00      	cmp	r6, #0
 8000998:	d100      	bne.n	800099c <__aeabi_fadd+0x2a4>
 800099a:	e77c      	b.n	8000896 <__aeabi_fadd+0x19e>
 800099c:	2280      	movs	r2, #128	@ 0x80
 800099e:	03d2      	lsls	r2, r2, #15
 80009a0:	4591      	cmp	r9, r2
 80009a2:	d302      	bcc.n	80009aa <__aeabi_fadd+0x2b2>
 80009a4:	4594      	cmp	ip, r2
 80009a6:	d200      	bcs.n	80009aa <__aeabi_fadd+0x2b2>
 80009a8:	0033      	movs	r3, r6
 80009aa:	08db      	lsrs	r3, r3, #3
 80009ac:	e753      	b.n	8000856 <__aeabi_fadd+0x15e>
 80009ae:	000c      	movs	r4, r1
 80009b0:	1af3      	subs	r3, r6, r3
 80009b2:	3501      	adds	r5, #1
 80009b4:	e6fa      	b.n	80007ac <__aeabi_fadd+0xb4>
 80009b6:	2e00      	cmp	r6, #0
 80009b8:	d0af      	beq.n	800091a <__aeabi_fadd+0x222>
 80009ba:	000c      	movs	r4, r1
 80009bc:	0033      	movs	r3, r6
 80009be:	e78d      	b.n	80008dc <__aeabi_fadd+0x1e4>
 80009c0:	2e00      	cmp	r6, #0
 80009c2:	d100      	bne.n	80009c6 <__aeabi_fadd+0x2ce>
 80009c4:	e767      	b.n	8000896 <__aeabi_fadd+0x19e>
 80009c6:	2280      	movs	r2, #128	@ 0x80
 80009c8:	03d2      	lsls	r2, r2, #15
 80009ca:	4591      	cmp	r9, r2
 80009cc:	d3ed      	bcc.n	80009aa <__aeabi_fadd+0x2b2>
 80009ce:	4594      	cmp	ip, r2
 80009d0:	d2eb      	bcs.n	80009aa <__aeabi_fadd+0x2b2>
 80009d2:	000c      	movs	r4, r1
 80009d4:	0033      	movs	r3, r6
 80009d6:	e7e8      	b.n	80009aa <__aeabi_fadd+0x2b2>
 80009d8:	0033      	movs	r3, r6
 80009da:	e77f      	b.n	80008dc <__aeabi_fadd+0x1e4>
 80009dc:	199b      	adds	r3, r3, r6
 80009de:	2200      	movs	r2, #0
 80009e0:	0159      	lsls	r1, r3, #5
 80009e2:	d5b9      	bpl.n	8000958 <__aeabi_fadd+0x260>
 80009e4:	4a07      	ldr	r2, [pc, #28]	@ (8000a04 <__aeabi_fadd+0x30c>)
 80009e6:	4013      	ands	r3, r2
 80009e8:	08db      	lsrs	r3, r3, #3
 80009ea:	2201      	movs	r2, #1
 80009ec:	e778      	b.n	80008e0 <__aeabi_fadd+0x1e8>
 80009ee:	199b      	adds	r3, r3, r6
 80009f0:	3201      	adds	r2, #1
 80009f2:	3501      	adds	r5, #1
 80009f4:	0159      	lsls	r1, r3, #5
 80009f6:	d49a      	bmi.n	800092e <__aeabi_fadd+0x236>
 80009f8:	e6da      	b.n	80007b0 <__aeabi_fadd+0xb8>
 80009fa:	1e03      	subs	r3, r0, #0
 80009fc:	d08d      	beq.n	800091a <__aeabi_fadd+0x222>
 80009fe:	08db      	lsrs	r3, r3, #3
 8000a00:	e76e      	b.n	80008e0 <__aeabi_fadd+0x1e8>
 8000a02:	46c0      	nop			@ (mov r8, r8)
 8000a04:	fbffffff 	.word	0xfbffffff
 8000a08:	7dffffff 	.word	0x7dffffff

08000a0c <__aeabi_fdiv>:
 8000a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a0e:	464f      	mov	r7, r9
 8000a10:	4646      	mov	r6, r8
 8000a12:	46d6      	mov	lr, sl
 8000a14:	0244      	lsls	r4, r0, #9
 8000a16:	b5c0      	push	{r6, r7, lr}
 8000a18:	0047      	lsls	r7, r0, #1
 8000a1a:	1c0e      	adds	r6, r1, #0
 8000a1c:	0a64      	lsrs	r4, r4, #9
 8000a1e:	0e3f      	lsrs	r7, r7, #24
 8000a20:	0fc5      	lsrs	r5, r0, #31
 8000a22:	2f00      	cmp	r7, #0
 8000a24:	d03c      	beq.n	8000aa0 <__aeabi_fdiv+0x94>
 8000a26:	2fff      	cmp	r7, #255	@ 0xff
 8000a28:	d042      	beq.n	8000ab0 <__aeabi_fdiv+0xa4>
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	2280      	movs	r2, #128	@ 0x80
 8000a2e:	4699      	mov	r9, r3
 8000a30:	469a      	mov	sl, r3
 8000a32:	00e4      	lsls	r4, r4, #3
 8000a34:	04d2      	lsls	r2, r2, #19
 8000a36:	4314      	orrs	r4, r2
 8000a38:	3f7f      	subs	r7, #127	@ 0x7f
 8000a3a:	0273      	lsls	r3, r6, #9
 8000a3c:	0a5b      	lsrs	r3, r3, #9
 8000a3e:	4698      	mov	r8, r3
 8000a40:	0073      	lsls	r3, r6, #1
 8000a42:	0e1b      	lsrs	r3, r3, #24
 8000a44:	0ff6      	lsrs	r6, r6, #31
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d01b      	beq.n	8000a82 <__aeabi_fdiv+0x76>
 8000a4a:	2bff      	cmp	r3, #255	@ 0xff
 8000a4c:	d013      	beq.n	8000a76 <__aeabi_fdiv+0x6a>
 8000a4e:	4642      	mov	r2, r8
 8000a50:	2180      	movs	r1, #128	@ 0x80
 8000a52:	00d2      	lsls	r2, r2, #3
 8000a54:	04c9      	lsls	r1, r1, #19
 8000a56:	4311      	orrs	r1, r2
 8000a58:	4688      	mov	r8, r1
 8000a5a:	2000      	movs	r0, #0
 8000a5c:	3b7f      	subs	r3, #127	@ 0x7f
 8000a5e:	0029      	movs	r1, r5
 8000a60:	1aff      	subs	r7, r7, r3
 8000a62:	464b      	mov	r3, r9
 8000a64:	4071      	eors	r1, r6
 8000a66:	b2c9      	uxtb	r1, r1
 8000a68:	2b0f      	cmp	r3, #15
 8000a6a:	d900      	bls.n	8000a6e <__aeabi_fdiv+0x62>
 8000a6c:	e0b5      	b.n	8000bda <__aeabi_fdiv+0x1ce>
 8000a6e:	4a74      	ldr	r2, [pc, #464]	@ (8000c40 <__aeabi_fdiv+0x234>)
 8000a70:	009b      	lsls	r3, r3, #2
 8000a72:	58d3      	ldr	r3, [r2, r3]
 8000a74:	469f      	mov	pc, r3
 8000a76:	4643      	mov	r3, r8
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d13f      	bne.n	8000afc <__aeabi_fdiv+0xf0>
 8000a7c:	3fff      	subs	r7, #255	@ 0xff
 8000a7e:	3302      	adds	r3, #2
 8000a80:	e003      	b.n	8000a8a <__aeabi_fdiv+0x7e>
 8000a82:	4643      	mov	r3, r8
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d12d      	bne.n	8000ae4 <__aeabi_fdiv+0xd8>
 8000a88:	2301      	movs	r3, #1
 8000a8a:	0029      	movs	r1, r5
 8000a8c:	464a      	mov	r2, r9
 8000a8e:	4071      	eors	r1, r6
 8000a90:	b2c9      	uxtb	r1, r1
 8000a92:	431a      	orrs	r2, r3
 8000a94:	2a0e      	cmp	r2, #14
 8000a96:	d838      	bhi.n	8000b0a <__aeabi_fdiv+0xfe>
 8000a98:	486a      	ldr	r0, [pc, #424]	@ (8000c44 <__aeabi_fdiv+0x238>)
 8000a9a:	0092      	lsls	r2, r2, #2
 8000a9c:	5882      	ldr	r2, [r0, r2]
 8000a9e:	4697      	mov	pc, r2
 8000aa0:	2c00      	cmp	r4, #0
 8000aa2:	d113      	bne.n	8000acc <__aeabi_fdiv+0xc0>
 8000aa4:	2304      	movs	r3, #4
 8000aa6:	4699      	mov	r9, r3
 8000aa8:	3b03      	subs	r3, #3
 8000aaa:	2700      	movs	r7, #0
 8000aac:	469a      	mov	sl, r3
 8000aae:	e7c4      	b.n	8000a3a <__aeabi_fdiv+0x2e>
 8000ab0:	2c00      	cmp	r4, #0
 8000ab2:	d105      	bne.n	8000ac0 <__aeabi_fdiv+0xb4>
 8000ab4:	2308      	movs	r3, #8
 8000ab6:	4699      	mov	r9, r3
 8000ab8:	3b06      	subs	r3, #6
 8000aba:	27ff      	movs	r7, #255	@ 0xff
 8000abc:	469a      	mov	sl, r3
 8000abe:	e7bc      	b.n	8000a3a <__aeabi_fdiv+0x2e>
 8000ac0:	230c      	movs	r3, #12
 8000ac2:	4699      	mov	r9, r3
 8000ac4:	3b09      	subs	r3, #9
 8000ac6:	27ff      	movs	r7, #255	@ 0xff
 8000ac8:	469a      	mov	sl, r3
 8000aca:	e7b6      	b.n	8000a3a <__aeabi_fdiv+0x2e>
 8000acc:	0020      	movs	r0, r4
 8000ace:	f001 f8eb 	bl	8001ca8 <__clzsi2>
 8000ad2:	2776      	movs	r7, #118	@ 0x76
 8000ad4:	1f43      	subs	r3, r0, #5
 8000ad6:	409c      	lsls	r4, r3
 8000ad8:	2300      	movs	r3, #0
 8000ada:	427f      	negs	r7, r7
 8000adc:	4699      	mov	r9, r3
 8000ade:	469a      	mov	sl, r3
 8000ae0:	1a3f      	subs	r7, r7, r0
 8000ae2:	e7aa      	b.n	8000a3a <__aeabi_fdiv+0x2e>
 8000ae4:	4640      	mov	r0, r8
 8000ae6:	f001 f8df 	bl	8001ca8 <__clzsi2>
 8000aea:	4642      	mov	r2, r8
 8000aec:	1f43      	subs	r3, r0, #5
 8000aee:	409a      	lsls	r2, r3
 8000af0:	2376      	movs	r3, #118	@ 0x76
 8000af2:	425b      	negs	r3, r3
 8000af4:	1a1b      	subs	r3, r3, r0
 8000af6:	4690      	mov	r8, r2
 8000af8:	2000      	movs	r0, #0
 8000afa:	e7b0      	b.n	8000a5e <__aeabi_fdiv+0x52>
 8000afc:	2303      	movs	r3, #3
 8000afe:	464a      	mov	r2, r9
 8000b00:	431a      	orrs	r2, r3
 8000b02:	4691      	mov	r9, r2
 8000b04:	2003      	movs	r0, #3
 8000b06:	33fc      	adds	r3, #252	@ 0xfc
 8000b08:	e7a9      	b.n	8000a5e <__aeabi_fdiv+0x52>
 8000b0a:	000d      	movs	r5, r1
 8000b0c:	20ff      	movs	r0, #255	@ 0xff
 8000b0e:	2200      	movs	r2, #0
 8000b10:	05c0      	lsls	r0, r0, #23
 8000b12:	07ed      	lsls	r5, r5, #31
 8000b14:	4310      	orrs	r0, r2
 8000b16:	4328      	orrs	r0, r5
 8000b18:	bce0      	pop	{r5, r6, r7}
 8000b1a:	46ba      	mov	sl, r7
 8000b1c:	46b1      	mov	r9, r6
 8000b1e:	46a8      	mov	r8, r5
 8000b20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b22:	000d      	movs	r5, r1
 8000b24:	2000      	movs	r0, #0
 8000b26:	2200      	movs	r2, #0
 8000b28:	e7f2      	b.n	8000b10 <__aeabi_fdiv+0x104>
 8000b2a:	4653      	mov	r3, sl
 8000b2c:	2b02      	cmp	r3, #2
 8000b2e:	d0ed      	beq.n	8000b0c <__aeabi_fdiv+0x100>
 8000b30:	2b03      	cmp	r3, #3
 8000b32:	d033      	beq.n	8000b9c <__aeabi_fdiv+0x190>
 8000b34:	46a0      	mov	r8, r4
 8000b36:	2b01      	cmp	r3, #1
 8000b38:	d105      	bne.n	8000b46 <__aeabi_fdiv+0x13a>
 8000b3a:	2000      	movs	r0, #0
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	e7e7      	b.n	8000b10 <__aeabi_fdiv+0x104>
 8000b40:	0035      	movs	r5, r6
 8000b42:	2803      	cmp	r0, #3
 8000b44:	d07a      	beq.n	8000c3c <__aeabi_fdiv+0x230>
 8000b46:	003b      	movs	r3, r7
 8000b48:	337f      	adds	r3, #127	@ 0x7f
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	dd2d      	ble.n	8000baa <__aeabi_fdiv+0x19e>
 8000b4e:	4642      	mov	r2, r8
 8000b50:	0752      	lsls	r2, r2, #29
 8000b52:	d007      	beq.n	8000b64 <__aeabi_fdiv+0x158>
 8000b54:	220f      	movs	r2, #15
 8000b56:	4641      	mov	r1, r8
 8000b58:	400a      	ands	r2, r1
 8000b5a:	2a04      	cmp	r2, #4
 8000b5c:	d002      	beq.n	8000b64 <__aeabi_fdiv+0x158>
 8000b5e:	2204      	movs	r2, #4
 8000b60:	4694      	mov	ip, r2
 8000b62:	44e0      	add	r8, ip
 8000b64:	4642      	mov	r2, r8
 8000b66:	0112      	lsls	r2, r2, #4
 8000b68:	d505      	bpl.n	8000b76 <__aeabi_fdiv+0x16a>
 8000b6a:	4642      	mov	r2, r8
 8000b6c:	4b36      	ldr	r3, [pc, #216]	@ (8000c48 <__aeabi_fdiv+0x23c>)
 8000b6e:	401a      	ands	r2, r3
 8000b70:	003b      	movs	r3, r7
 8000b72:	4690      	mov	r8, r2
 8000b74:	3380      	adds	r3, #128	@ 0x80
 8000b76:	2bfe      	cmp	r3, #254	@ 0xfe
 8000b78:	dcc8      	bgt.n	8000b0c <__aeabi_fdiv+0x100>
 8000b7a:	4642      	mov	r2, r8
 8000b7c:	0192      	lsls	r2, r2, #6
 8000b7e:	0a52      	lsrs	r2, r2, #9
 8000b80:	b2d8      	uxtb	r0, r3
 8000b82:	e7c5      	b.n	8000b10 <__aeabi_fdiv+0x104>
 8000b84:	2280      	movs	r2, #128	@ 0x80
 8000b86:	2500      	movs	r5, #0
 8000b88:	20ff      	movs	r0, #255	@ 0xff
 8000b8a:	03d2      	lsls	r2, r2, #15
 8000b8c:	e7c0      	b.n	8000b10 <__aeabi_fdiv+0x104>
 8000b8e:	2280      	movs	r2, #128	@ 0x80
 8000b90:	03d2      	lsls	r2, r2, #15
 8000b92:	4214      	tst	r4, r2
 8000b94:	d002      	beq.n	8000b9c <__aeabi_fdiv+0x190>
 8000b96:	4643      	mov	r3, r8
 8000b98:	4213      	tst	r3, r2
 8000b9a:	d049      	beq.n	8000c30 <__aeabi_fdiv+0x224>
 8000b9c:	2280      	movs	r2, #128	@ 0x80
 8000b9e:	03d2      	lsls	r2, r2, #15
 8000ba0:	4322      	orrs	r2, r4
 8000ba2:	0252      	lsls	r2, r2, #9
 8000ba4:	20ff      	movs	r0, #255	@ 0xff
 8000ba6:	0a52      	lsrs	r2, r2, #9
 8000ba8:	e7b2      	b.n	8000b10 <__aeabi_fdiv+0x104>
 8000baa:	2201      	movs	r2, #1
 8000bac:	1ad3      	subs	r3, r2, r3
 8000bae:	2b1b      	cmp	r3, #27
 8000bb0:	dcc3      	bgt.n	8000b3a <__aeabi_fdiv+0x12e>
 8000bb2:	4642      	mov	r2, r8
 8000bb4:	40da      	lsrs	r2, r3
 8000bb6:	4643      	mov	r3, r8
 8000bb8:	379e      	adds	r7, #158	@ 0x9e
 8000bba:	40bb      	lsls	r3, r7
 8000bbc:	1e59      	subs	r1, r3, #1
 8000bbe:	418b      	sbcs	r3, r1
 8000bc0:	431a      	orrs	r2, r3
 8000bc2:	0753      	lsls	r3, r2, #29
 8000bc4:	d004      	beq.n	8000bd0 <__aeabi_fdiv+0x1c4>
 8000bc6:	230f      	movs	r3, #15
 8000bc8:	4013      	ands	r3, r2
 8000bca:	2b04      	cmp	r3, #4
 8000bcc:	d000      	beq.n	8000bd0 <__aeabi_fdiv+0x1c4>
 8000bce:	3204      	adds	r2, #4
 8000bd0:	0153      	lsls	r3, r2, #5
 8000bd2:	d529      	bpl.n	8000c28 <__aeabi_fdiv+0x21c>
 8000bd4:	2001      	movs	r0, #1
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	e79a      	b.n	8000b10 <__aeabi_fdiv+0x104>
 8000bda:	4642      	mov	r2, r8
 8000bdc:	0163      	lsls	r3, r4, #5
 8000bde:	0155      	lsls	r5, r2, #5
 8000be0:	42ab      	cmp	r3, r5
 8000be2:	d215      	bcs.n	8000c10 <__aeabi_fdiv+0x204>
 8000be4:	201b      	movs	r0, #27
 8000be6:	2200      	movs	r2, #0
 8000be8:	3f01      	subs	r7, #1
 8000bea:	2601      	movs	r6, #1
 8000bec:	001c      	movs	r4, r3
 8000bee:	0052      	lsls	r2, r2, #1
 8000bf0:	005b      	lsls	r3, r3, #1
 8000bf2:	2c00      	cmp	r4, #0
 8000bf4:	db01      	blt.n	8000bfa <__aeabi_fdiv+0x1ee>
 8000bf6:	429d      	cmp	r5, r3
 8000bf8:	d801      	bhi.n	8000bfe <__aeabi_fdiv+0x1f2>
 8000bfa:	1b5b      	subs	r3, r3, r5
 8000bfc:	4332      	orrs	r2, r6
 8000bfe:	3801      	subs	r0, #1
 8000c00:	2800      	cmp	r0, #0
 8000c02:	d1f3      	bne.n	8000bec <__aeabi_fdiv+0x1e0>
 8000c04:	1e58      	subs	r0, r3, #1
 8000c06:	4183      	sbcs	r3, r0
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	4698      	mov	r8, r3
 8000c0c:	000d      	movs	r5, r1
 8000c0e:	e79a      	b.n	8000b46 <__aeabi_fdiv+0x13a>
 8000c10:	201a      	movs	r0, #26
 8000c12:	2201      	movs	r2, #1
 8000c14:	1b5b      	subs	r3, r3, r5
 8000c16:	e7e8      	b.n	8000bea <__aeabi_fdiv+0x1de>
 8000c18:	3b02      	subs	r3, #2
 8000c1a:	425a      	negs	r2, r3
 8000c1c:	4153      	adcs	r3, r2
 8000c1e:	425b      	negs	r3, r3
 8000c20:	0035      	movs	r5, r6
 8000c22:	2200      	movs	r2, #0
 8000c24:	b2d8      	uxtb	r0, r3
 8000c26:	e773      	b.n	8000b10 <__aeabi_fdiv+0x104>
 8000c28:	0192      	lsls	r2, r2, #6
 8000c2a:	2000      	movs	r0, #0
 8000c2c:	0a52      	lsrs	r2, r2, #9
 8000c2e:	e76f      	b.n	8000b10 <__aeabi_fdiv+0x104>
 8000c30:	431a      	orrs	r2, r3
 8000c32:	0252      	lsls	r2, r2, #9
 8000c34:	0035      	movs	r5, r6
 8000c36:	20ff      	movs	r0, #255	@ 0xff
 8000c38:	0a52      	lsrs	r2, r2, #9
 8000c3a:	e769      	b.n	8000b10 <__aeabi_fdiv+0x104>
 8000c3c:	4644      	mov	r4, r8
 8000c3e:	e7ad      	b.n	8000b9c <__aeabi_fdiv+0x190>
 8000c40:	080064d8 	.word	0x080064d8
 8000c44:	08006518 	.word	0x08006518
 8000c48:	f7ffffff 	.word	0xf7ffffff

08000c4c <__eqsf2>:
 8000c4c:	b570      	push	{r4, r5, r6, lr}
 8000c4e:	0042      	lsls	r2, r0, #1
 8000c50:	024e      	lsls	r6, r1, #9
 8000c52:	004c      	lsls	r4, r1, #1
 8000c54:	0245      	lsls	r5, r0, #9
 8000c56:	0a6d      	lsrs	r5, r5, #9
 8000c58:	0e12      	lsrs	r2, r2, #24
 8000c5a:	0fc3      	lsrs	r3, r0, #31
 8000c5c:	0a76      	lsrs	r6, r6, #9
 8000c5e:	0e24      	lsrs	r4, r4, #24
 8000c60:	0fc9      	lsrs	r1, r1, #31
 8000c62:	2aff      	cmp	r2, #255	@ 0xff
 8000c64:	d010      	beq.n	8000c88 <__eqsf2+0x3c>
 8000c66:	2cff      	cmp	r4, #255	@ 0xff
 8000c68:	d00c      	beq.n	8000c84 <__eqsf2+0x38>
 8000c6a:	2001      	movs	r0, #1
 8000c6c:	42a2      	cmp	r2, r4
 8000c6e:	d10a      	bne.n	8000c86 <__eqsf2+0x3a>
 8000c70:	42b5      	cmp	r5, r6
 8000c72:	d108      	bne.n	8000c86 <__eqsf2+0x3a>
 8000c74:	428b      	cmp	r3, r1
 8000c76:	d00f      	beq.n	8000c98 <__eqsf2+0x4c>
 8000c78:	2a00      	cmp	r2, #0
 8000c7a:	d104      	bne.n	8000c86 <__eqsf2+0x3a>
 8000c7c:	0028      	movs	r0, r5
 8000c7e:	1e43      	subs	r3, r0, #1
 8000c80:	4198      	sbcs	r0, r3
 8000c82:	e000      	b.n	8000c86 <__eqsf2+0x3a>
 8000c84:	2001      	movs	r0, #1
 8000c86:	bd70      	pop	{r4, r5, r6, pc}
 8000c88:	2001      	movs	r0, #1
 8000c8a:	2cff      	cmp	r4, #255	@ 0xff
 8000c8c:	d1fb      	bne.n	8000c86 <__eqsf2+0x3a>
 8000c8e:	4335      	orrs	r5, r6
 8000c90:	d1f9      	bne.n	8000c86 <__eqsf2+0x3a>
 8000c92:	404b      	eors	r3, r1
 8000c94:	0018      	movs	r0, r3
 8000c96:	e7f6      	b.n	8000c86 <__eqsf2+0x3a>
 8000c98:	2000      	movs	r0, #0
 8000c9a:	e7f4      	b.n	8000c86 <__eqsf2+0x3a>

08000c9c <__gesf2>:
 8000c9c:	b530      	push	{r4, r5, lr}
 8000c9e:	0042      	lsls	r2, r0, #1
 8000ca0:	0244      	lsls	r4, r0, #9
 8000ca2:	024d      	lsls	r5, r1, #9
 8000ca4:	0fc3      	lsrs	r3, r0, #31
 8000ca6:	0048      	lsls	r0, r1, #1
 8000ca8:	0a64      	lsrs	r4, r4, #9
 8000caa:	0e12      	lsrs	r2, r2, #24
 8000cac:	0a6d      	lsrs	r5, r5, #9
 8000cae:	0e00      	lsrs	r0, r0, #24
 8000cb0:	0fc9      	lsrs	r1, r1, #31
 8000cb2:	2aff      	cmp	r2, #255	@ 0xff
 8000cb4:	d019      	beq.n	8000cea <__gesf2+0x4e>
 8000cb6:	28ff      	cmp	r0, #255	@ 0xff
 8000cb8:	d00b      	beq.n	8000cd2 <__gesf2+0x36>
 8000cba:	2a00      	cmp	r2, #0
 8000cbc:	d11e      	bne.n	8000cfc <__gesf2+0x60>
 8000cbe:	2800      	cmp	r0, #0
 8000cc0:	d10b      	bne.n	8000cda <__gesf2+0x3e>
 8000cc2:	2d00      	cmp	r5, #0
 8000cc4:	d027      	beq.n	8000d16 <__gesf2+0x7a>
 8000cc6:	2c00      	cmp	r4, #0
 8000cc8:	d134      	bne.n	8000d34 <__gesf2+0x98>
 8000cca:	2900      	cmp	r1, #0
 8000ccc:	d02f      	beq.n	8000d2e <__gesf2+0x92>
 8000cce:	0008      	movs	r0, r1
 8000cd0:	bd30      	pop	{r4, r5, pc}
 8000cd2:	2d00      	cmp	r5, #0
 8000cd4:	d128      	bne.n	8000d28 <__gesf2+0x8c>
 8000cd6:	2a00      	cmp	r2, #0
 8000cd8:	d101      	bne.n	8000cde <__gesf2+0x42>
 8000cda:	2c00      	cmp	r4, #0
 8000cdc:	d0f5      	beq.n	8000cca <__gesf2+0x2e>
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d107      	bne.n	8000cf2 <__gesf2+0x56>
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d023      	beq.n	8000d2e <__gesf2+0x92>
 8000ce6:	0018      	movs	r0, r3
 8000ce8:	e7f2      	b.n	8000cd0 <__gesf2+0x34>
 8000cea:	2c00      	cmp	r4, #0
 8000cec:	d11c      	bne.n	8000d28 <__gesf2+0x8c>
 8000cee:	28ff      	cmp	r0, #255	@ 0xff
 8000cf0:	d014      	beq.n	8000d1c <__gesf2+0x80>
 8000cf2:	1e58      	subs	r0, r3, #1
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	4018      	ands	r0, r3
 8000cf8:	3801      	subs	r0, #1
 8000cfa:	e7e9      	b.n	8000cd0 <__gesf2+0x34>
 8000cfc:	2800      	cmp	r0, #0
 8000cfe:	d0f8      	beq.n	8000cf2 <__gesf2+0x56>
 8000d00:	428b      	cmp	r3, r1
 8000d02:	d1f6      	bne.n	8000cf2 <__gesf2+0x56>
 8000d04:	4282      	cmp	r2, r0
 8000d06:	dcf4      	bgt.n	8000cf2 <__gesf2+0x56>
 8000d08:	dbeb      	blt.n	8000ce2 <__gesf2+0x46>
 8000d0a:	42ac      	cmp	r4, r5
 8000d0c:	d8f1      	bhi.n	8000cf2 <__gesf2+0x56>
 8000d0e:	2000      	movs	r0, #0
 8000d10:	42ac      	cmp	r4, r5
 8000d12:	d2dd      	bcs.n	8000cd0 <__gesf2+0x34>
 8000d14:	e7e5      	b.n	8000ce2 <__gesf2+0x46>
 8000d16:	2c00      	cmp	r4, #0
 8000d18:	d0da      	beq.n	8000cd0 <__gesf2+0x34>
 8000d1a:	e7ea      	b.n	8000cf2 <__gesf2+0x56>
 8000d1c:	2d00      	cmp	r5, #0
 8000d1e:	d103      	bne.n	8000d28 <__gesf2+0x8c>
 8000d20:	428b      	cmp	r3, r1
 8000d22:	d1e6      	bne.n	8000cf2 <__gesf2+0x56>
 8000d24:	2000      	movs	r0, #0
 8000d26:	e7d3      	b.n	8000cd0 <__gesf2+0x34>
 8000d28:	2002      	movs	r0, #2
 8000d2a:	4240      	negs	r0, r0
 8000d2c:	e7d0      	b.n	8000cd0 <__gesf2+0x34>
 8000d2e:	2001      	movs	r0, #1
 8000d30:	4240      	negs	r0, r0
 8000d32:	e7cd      	b.n	8000cd0 <__gesf2+0x34>
 8000d34:	428b      	cmp	r3, r1
 8000d36:	d0e8      	beq.n	8000d0a <__gesf2+0x6e>
 8000d38:	e7db      	b.n	8000cf2 <__gesf2+0x56>
 8000d3a:	46c0      	nop			@ (mov r8, r8)

08000d3c <__lesf2>:
 8000d3c:	b530      	push	{r4, r5, lr}
 8000d3e:	0042      	lsls	r2, r0, #1
 8000d40:	0244      	lsls	r4, r0, #9
 8000d42:	024d      	lsls	r5, r1, #9
 8000d44:	0fc3      	lsrs	r3, r0, #31
 8000d46:	0048      	lsls	r0, r1, #1
 8000d48:	0a64      	lsrs	r4, r4, #9
 8000d4a:	0e12      	lsrs	r2, r2, #24
 8000d4c:	0a6d      	lsrs	r5, r5, #9
 8000d4e:	0e00      	lsrs	r0, r0, #24
 8000d50:	0fc9      	lsrs	r1, r1, #31
 8000d52:	2aff      	cmp	r2, #255	@ 0xff
 8000d54:	d01a      	beq.n	8000d8c <__lesf2+0x50>
 8000d56:	28ff      	cmp	r0, #255	@ 0xff
 8000d58:	d00e      	beq.n	8000d78 <__lesf2+0x3c>
 8000d5a:	2a00      	cmp	r2, #0
 8000d5c:	d11e      	bne.n	8000d9c <__lesf2+0x60>
 8000d5e:	2800      	cmp	r0, #0
 8000d60:	d10e      	bne.n	8000d80 <__lesf2+0x44>
 8000d62:	2d00      	cmp	r5, #0
 8000d64:	d02a      	beq.n	8000dbc <__lesf2+0x80>
 8000d66:	2c00      	cmp	r4, #0
 8000d68:	d00c      	beq.n	8000d84 <__lesf2+0x48>
 8000d6a:	428b      	cmp	r3, r1
 8000d6c:	d01d      	beq.n	8000daa <__lesf2+0x6e>
 8000d6e:	1e58      	subs	r0, r3, #1
 8000d70:	2302      	movs	r3, #2
 8000d72:	4018      	ands	r0, r3
 8000d74:	3801      	subs	r0, #1
 8000d76:	e010      	b.n	8000d9a <__lesf2+0x5e>
 8000d78:	2d00      	cmp	r5, #0
 8000d7a:	d10d      	bne.n	8000d98 <__lesf2+0x5c>
 8000d7c:	2a00      	cmp	r2, #0
 8000d7e:	d120      	bne.n	8000dc2 <__lesf2+0x86>
 8000d80:	2c00      	cmp	r4, #0
 8000d82:	d11e      	bne.n	8000dc2 <__lesf2+0x86>
 8000d84:	2900      	cmp	r1, #0
 8000d86:	d023      	beq.n	8000dd0 <__lesf2+0x94>
 8000d88:	0008      	movs	r0, r1
 8000d8a:	e006      	b.n	8000d9a <__lesf2+0x5e>
 8000d8c:	2c00      	cmp	r4, #0
 8000d8e:	d103      	bne.n	8000d98 <__lesf2+0x5c>
 8000d90:	28ff      	cmp	r0, #255	@ 0xff
 8000d92:	d1ec      	bne.n	8000d6e <__lesf2+0x32>
 8000d94:	2d00      	cmp	r5, #0
 8000d96:	d017      	beq.n	8000dc8 <__lesf2+0x8c>
 8000d98:	2002      	movs	r0, #2
 8000d9a:	bd30      	pop	{r4, r5, pc}
 8000d9c:	2800      	cmp	r0, #0
 8000d9e:	d0e6      	beq.n	8000d6e <__lesf2+0x32>
 8000da0:	428b      	cmp	r3, r1
 8000da2:	d1e4      	bne.n	8000d6e <__lesf2+0x32>
 8000da4:	4282      	cmp	r2, r0
 8000da6:	dce2      	bgt.n	8000d6e <__lesf2+0x32>
 8000da8:	db04      	blt.n	8000db4 <__lesf2+0x78>
 8000daa:	42ac      	cmp	r4, r5
 8000dac:	d8df      	bhi.n	8000d6e <__lesf2+0x32>
 8000dae:	2000      	movs	r0, #0
 8000db0:	42ac      	cmp	r4, r5
 8000db2:	d2f2      	bcs.n	8000d9a <__lesf2+0x5e>
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d00b      	beq.n	8000dd0 <__lesf2+0x94>
 8000db8:	0018      	movs	r0, r3
 8000dba:	e7ee      	b.n	8000d9a <__lesf2+0x5e>
 8000dbc:	2c00      	cmp	r4, #0
 8000dbe:	d0ec      	beq.n	8000d9a <__lesf2+0x5e>
 8000dc0:	e7d5      	b.n	8000d6e <__lesf2+0x32>
 8000dc2:	428b      	cmp	r3, r1
 8000dc4:	d1d3      	bne.n	8000d6e <__lesf2+0x32>
 8000dc6:	e7f5      	b.n	8000db4 <__lesf2+0x78>
 8000dc8:	2000      	movs	r0, #0
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d0e5      	beq.n	8000d9a <__lesf2+0x5e>
 8000dce:	e7ce      	b.n	8000d6e <__lesf2+0x32>
 8000dd0:	2001      	movs	r0, #1
 8000dd2:	4240      	negs	r0, r0
 8000dd4:	e7e1      	b.n	8000d9a <__lesf2+0x5e>
 8000dd6:	46c0      	nop			@ (mov r8, r8)

08000dd8 <__aeabi_fmul>:
 8000dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dda:	464f      	mov	r7, r9
 8000ddc:	4646      	mov	r6, r8
 8000dde:	46d6      	mov	lr, sl
 8000de0:	0243      	lsls	r3, r0, #9
 8000de2:	0a5b      	lsrs	r3, r3, #9
 8000de4:	0045      	lsls	r5, r0, #1
 8000de6:	b5c0      	push	{r6, r7, lr}
 8000de8:	4699      	mov	r9, r3
 8000dea:	1c0f      	adds	r7, r1, #0
 8000dec:	0e2d      	lsrs	r5, r5, #24
 8000dee:	0fc6      	lsrs	r6, r0, #31
 8000df0:	2d00      	cmp	r5, #0
 8000df2:	d100      	bne.n	8000df6 <__aeabi_fmul+0x1e>
 8000df4:	e088      	b.n	8000f08 <__aeabi_fmul+0x130>
 8000df6:	2dff      	cmp	r5, #255	@ 0xff
 8000df8:	d100      	bne.n	8000dfc <__aeabi_fmul+0x24>
 8000dfa:	e08d      	b.n	8000f18 <__aeabi_fmul+0x140>
 8000dfc:	2280      	movs	r2, #128	@ 0x80
 8000dfe:	00db      	lsls	r3, r3, #3
 8000e00:	04d2      	lsls	r2, r2, #19
 8000e02:	431a      	orrs	r2, r3
 8000e04:	2300      	movs	r3, #0
 8000e06:	4691      	mov	r9, r2
 8000e08:	4698      	mov	r8, r3
 8000e0a:	469a      	mov	sl, r3
 8000e0c:	3d7f      	subs	r5, #127	@ 0x7f
 8000e0e:	027c      	lsls	r4, r7, #9
 8000e10:	007b      	lsls	r3, r7, #1
 8000e12:	0a64      	lsrs	r4, r4, #9
 8000e14:	0e1b      	lsrs	r3, r3, #24
 8000e16:	0fff      	lsrs	r7, r7, #31
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d068      	beq.n	8000eee <__aeabi_fmul+0x116>
 8000e1c:	2bff      	cmp	r3, #255	@ 0xff
 8000e1e:	d021      	beq.n	8000e64 <__aeabi_fmul+0x8c>
 8000e20:	2280      	movs	r2, #128	@ 0x80
 8000e22:	00e4      	lsls	r4, r4, #3
 8000e24:	04d2      	lsls	r2, r2, #19
 8000e26:	4314      	orrs	r4, r2
 8000e28:	4642      	mov	r2, r8
 8000e2a:	3b7f      	subs	r3, #127	@ 0x7f
 8000e2c:	195b      	adds	r3, r3, r5
 8000e2e:	2100      	movs	r1, #0
 8000e30:	1c5d      	adds	r5, r3, #1
 8000e32:	2a0a      	cmp	r2, #10
 8000e34:	dc2e      	bgt.n	8000e94 <__aeabi_fmul+0xbc>
 8000e36:	407e      	eors	r6, r7
 8000e38:	4642      	mov	r2, r8
 8000e3a:	2a02      	cmp	r2, #2
 8000e3c:	dc23      	bgt.n	8000e86 <__aeabi_fmul+0xae>
 8000e3e:	3a01      	subs	r2, #1
 8000e40:	2a01      	cmp	r2, #1
 8000e42:	d900      	bls.n	8000e46 <__aeabi_fmul+0x6e>
 8000e44:	e0bd      	b.n	8000fc2 <__aeabi_fmul+0x1ea>
 8000e46:	2902      	cmp	r1, #2
 8000e48:	d06e      	beq.n	8000f28 <__aeabi_fmul+0x150>
 8000e4a:	2901      	cmp	r1, #1
 8000e4c:	d12c      	bne.n	8000ea8 <__aeabi_fmul+0xd0>
 8000e4e:	2000      	movs	r0, #0
 8000e50:	2200      	movs	r2, #0
 8000e52:	05c0      	lsls	r0, r0, #23
 8000e54:	07f6      	lsls	r6, r6, #31
 8000e56:	4310      	orrs	r0, r2
 8000e58:	4330      	orrs	r0, r6
 8000e5a:	bce0      	pop	{r5, r6, r7}
 8000e5c:	46ba      	mov	sl, r7
 8000e5e:	46b1      	mov	r9, r6
 8000e60:	46a8      	mov	r8, r5
 8000e62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e64:	002b      	movs	r3, r5
 8000e66:	33ff      	adds	r3, #255	@ 0xff
 8000e68:	2c00      	cmp	r4, #0
 8000e6a:	d065      	beq.n	8000f38 <__aeabi_fmul+0x160>
 8000e6c:	2203      	movs	r2, #3
 8000e6e:	4641      	mov	r1, r8
 8000e70:	4311      	orrs	r1, r2
 8000e72:	0032      	movs	r2, r6
 8000e74:	3501      	adds	r5, #1
 8000e76:	4688      	mov	r8, r1
 8000e78:	407a      	eors	r2, r7
 8000e7a:	35ff      	adds	r5, #255	@ 0xff
 8000e7c:	290a      	cmp	r1, #10
 8000e7e:	dd00      	ble.n	8000e82 <__aeabi_fmul+0xaa>
 8000e80:	e0d8      	b.n	8001034 <__aeabi_fmul+0x25c>
 8000e82:	0016      	movs	r6, r2
 8000e84:	2103      	movs	r1, #3
 8000e86:	4640      	mov	r0, r8
 8000e88:	2201      	movs	r2, #1
 8000e8a:	4082      	lsls	r2, r0
 8000e8c:	20a6      	movs	r0, #166	@ 0xa6
 8000e8e:	00c0      	lsls	r0, r0, #3
 8000e90:	4202      	tst	r2, r0
 8000e92:	d020      	beq.n	8000ed6 <__aeabi_fmul+0xfe>
 8000e94:	4653      	mov	r3, sl
 8000e96:	2b02      	cmp	r3, #2
 8000e98:	d046      	beq.n	8000f28 <__aeabi_fmul+0x150>
 8000e9a:	2b03      	cmp	r3, #3
 8000e9c:	d100      	bne.n	8000ea0 <__aeabi_fmul+0xc8>
 8000e9e:	e0bb      	b.n	8001018 <__aeabi_fmul+0x240>
 8000ea0:	4651      	mov	r1, sl
 8000ea2:	464c      	mov	r4, r9
 8000ea4:	2901      	cmp	r1, #1
 8000ea6:	d0d2      	beq.n	8000e4e <__aeabi_fmul+0x76>
 8000ea8:	002b      	movs	r3, r5
 8000eaa:	337f      	adds	r3, #127	@ 0x7f
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	dd70      	ble.n	8000f92 <__aeabi_fmul+0x1ba>
 8000eb0:	0762      	lsls	r2, r4, #29
 8000eb2:	d004      	beq.n	8000ebe <__aeabi_fmul+0xe6>
 8000eb4:	220f      	movs	r2, #15
 8000eb6:	4022      	ands	r2, r4
 8000eb8:	2a04      	cmp	r2, #4
 8000eba:	d000      	beq.n	8000ebe <__aeabi_fmul+0xe6>
 8000ebc:	3404      	adds	r4, #4
 8000ebe:	0122      	lsls	r2, r4, #4
 8000ec0:	d503      	bpl.n	8000eca <__aeabi_fmul+0xf2>
 8000ec2:	4b63      	ldr	r3, [pc, #396]	@ (8001050 <__aeabi_fmul+0x278>)
 8000ec4:	401c      	ands	r4, r3
 8000ec6:	002b      	movs	r3, r5
 8000ec8:	3380      	adds	r3, #128	@ 0x80
 8000eca:	2bfe      	cmp	r3, #254	@ 0xfe
 8000ecc:	dc2c      	bgt.n	8000f28 <__aeabi_fmul+0x150>
 8000ece:	01a2      	lsls	r2, r4, #6
 8000ed0:	0a52      	lsrs	r2, r2, #9
 8000ed2:	b2d8      	uxtb	r0, r3
 8000ed4:	e7bd      	b.n	8000e52 <__aeabi_fmul+0x7a>
 8000ed6:	2090      	movs	r0, #144	@ 0x90
 8000ed8:	0080      	lsls	r0, r0, #2
 8000eda:	4202      	tst	r2, r0
 8000edc:	d127      	bne.n	8000f2e <__aeabi_fmul+0x156>
 8000ede:	38b9      	subs	r0, #185	@ 0xb9
 8000ee0:	38ff      	subs	r0, #255	@ 0xff
 8000ee2:	4210      	tst	r0, r2
 8000ee4:	d06d      	beq.n	8000fc2 <__aeabi_fmul+0x1ea>
 8000ee6:	003e      	movs	r6, r7
 8000ee8:	46a1      	mov	r9, r4
 8000eea:	468a      	mov	sl, r1
 8000eec:	e7d2      	b.n	8000e94 <__aeabi_fmul+0xbc>
 8000eee:	2c00      	cmp	r4, #0
 8000ef0:	d141      	bne.n	8000f76 <__aeabi_fmul+0x19e>
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	4642      	mov	r2, r8
 8000ef6:	431a      	orrs	r2, r3
 8000ef8:	4690      	mov	r8, r2
 8000efa:	002b      	movs	r3, r5
 8000efc:	4642      	mov	r2, r8
 8000efe:	2101      	movs	r1, #1
 8000f00:	1c5d      	adds	r5, r3, #1
 8000f02:	2a0a      	cmp	r2, #10
 8000f04:	dd97      	ble.n	8000e36 <__aeabi_fmul+0x5e>
 8000f06:	e7c5      	b.n	8000e94 <__aeabi_fmul+0xbc>
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d126      	bne.n	8000f5a <__aeabi_fmul+0x182>
 8000f0c:	2304      	movs	r3, #4
 8000f0e:	4698      	mov	r8, r3
 8000f10:	3b03      	subs	r3, #3
 8000f12:	2500      	movs	r5, #0
 8000f14:	469a      	mov	sl, r3
 8000f16:	e77a      	b.n	8000e0e <__aeabi_fmul+0x36>
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d118      	bne.n	8000f4e <__aeabi_fmul+0x176>
 8000f1c:	2308      	movs	r3, #8
 8000f1e:	4698      	mov	r8, r3
 8000f20:	3b06      	subs	r3, #6
 8000f22:	25ff      	movs	r5, #255	@ 0xff
 8000f24:	469a      	mov	sl, r3
 8000f26:	e772      	b.n	8000e0e <__aeabi_fmul+0x36>
 8000f28:	20ff      	movs	r0, #255	@ 0xff
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	e791      	b.n	8000e52 <__aeabi_fmul+0x7a>
 8000f2e:	2280      	movs	r2, #128	@ 0x80
 8000f30:	2600      	movs	r6, #0
 8000f32:	20ff      	movs	r0, #255	@ 0xff
 8000f34:	03d2      	lsls	r2, r2, #15
 8000f36:	e78c      	b.n	8000e52 <__aeabi_fmul+0x7a>
 8000f38:	4641      	mov	r1, r8
 8000f3a:	2202      	movs	r2, #2
 8000f3c:	3501      	adds	r5, #1
 8000f3e:	4311      	orrs	r1, r2
 8000f40:	4688      	mov	r8, r1
 8000f42:	35ff      	adds	r5, #255	@ 0xff
 8000f44:	290a      	cmp	r1, #10
 8000f46:	dca5      	bgt.n	8000e94 <__aeabi_fmul+0xbc>
 8000f48:	2102      	movs	r1, #2
 8000f4a:	407e      	eors	r6, r7
 8000f4c:	e774      	b.n	8000e38 <__aeabi_fmul+0x60>
 8000f4e:	230c      	movs	r3, #12
 8000f50:	4698      	mov	r8, r3
 8000f52:	3b09      	subs	r3, #9
 8000f54:	25ff      	movs	r5, #255	@ 0xff
 8000f56:	469a      	mov	sl, r3
 8000f58:	e759      	b.n	8000e0e <__aeabi_fmul+0x36>
 8000f5a:	0018      	movs	r0, r3
 8000f5c:	f000 fea4 	bl	8001ca8 <__clzsi2>
 8000f60:	464a      	mov	r2, r9
 8000f62:	1f43      	subs	r3, r0, #5
 8000f64:	2576      	movs	r5, #118	@ 0x76
 8000f66:	409a      	lsls	r2, r3
 8000f68:	2300      	movs	r3, #0
 8000f6a:	426d      	negs	r5, r5
 8000f6c:	4691      	mov	r9, r2
 8000f6e:	4698      	mov	r8, r3
 8000f70:	469a      	mov	sl, r3
 8000f72:	1a2d      	subs	r5, r5, r0
 8000f74:	e74b      	b.n	8000e0e <__aeabi_fmul+0x36>
 8000f76:	0020      	movs	r0, r4
 8000f78:	f000 fe96 	bl	8001ca8 <__clzsi2>
 8000f7c:	4642      	mov	r2, r8
 8000f7e:	1f43      	subs	r3, r0, #5
 8000f80:	409c      	lsls	r4, r3
 8000f82:	1a2b      	subs	r3, r5, r0
 8000f84:	3b76      	subs	r3, #118	@ 0x76
 8000f86:	2100      	movs	r1, #0
 8000f88:	1c5d      	adds	r5, r3, #1
 8000f8a:	2a0a      	cmp	r2, #10
 8000f8c:	dc00      	bgt.n	8000f90 <__aeabi_fmul+0x1b8>
 8000f8e:	e752      	b.n	8000e36 <__aeabi_fmul+0x5e>
 8000f90:	e780      	b.n	8000e94 <__aeabi_fmul+0xbc>
 8000f92:	2201      	movs	r2, #1
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	2b1b      	cmp	r3, #27
 8000f98:	dd00      	ble.n	8000f9c <__aeabi_fmul+0x1c4>
 8000f9a:	e758      	b.n	8000e4e <__aeabi_fmul+0x76>
 8000f9c:	359e      	adds	r5, #158	@ 0x9e
 8000f9e:	0022      	movs	r2, r4
 8000fa0:	40ac      	lsls	r4, r5
 8000fa2:	40da      	lsrs	r2, r3
 8000fa4:	1e63      	subs	r3, r4, #1
 8000fa6:	419c      	sbcs	r4, r3
 8000fa8:	4322      	orrs	r2, r4
 8000faa:	0753      	lsls	r3, r2, #29
 8000fac:	d004      	beq.n	8000fb8 <__aeabi_fmul+0x1e0>
 8000fae:	230f      	movs	r3, #15
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	2b04      	cmp	r3, #4
 8000fb4:	d000      	beq.n	8000fb8 <__aeabi_fmul+0x1e0>
 8000fb6:	3204      	adds	r2, #4
 8000fb8:	0153      	lsls	r3, r2, #5
 8000fba:	d537      	bpl.n	800102c <__aeabi_fmul+0x254>
 8000fbc:	2001      	movs	r0, #1
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	e747      	b.n	8000e52 <__aeabi_fmul+0x7a>
 8000fc2:	0c21      	lsrs	r1, r4, #16
 8000fc4:	464a      	mov	r2, r9
 8000fc6:	0424      	lsls	r4, r4, #16
 8000fc8:	0c24      	lsrs	r4, r4, #16
 8000fca:	0027      	movs	r7, r4
 8000fcc:	0c10      	lsrs	r0, r2, #16
 8000fce:	0412      	lsls	r2, r2, #16
 8000fd0:	0c12      	lsrs	r2, r2, #16
 8000fd2:	4344      	muls	r4, r0
 8000fd4:	4357      	muls	r7, r2
 8000fd6:	4348      	muls	r0, r1
 8000fd8:	4351      	muls	r1, r2
 8000fda:	0c3a      	lsrs	r2, r7, #16
 8000fdc:	1909      	adds	r1, r1, r4
 8000fde:	1852      	adds	r2, r2, r1
 8000fe0:	4294      	cmp	r4, r2
 8000fe2:	d903      	bls.n	8000fec <__aeabi_fmul+0x214>
 8000fe4:	2180      	movs	r1, #128	@ 0x80
 8000fe6:	0249      	lsls	r1, r1, #9
 8000fe8:	468c      	mov	ip, r1
 8000fea:	4460      	add	r0, ip
 8000fec:	043f      	lsls	r7, r7, #16
 8000fee:	0411      	lsls	r1, r2, #16
 8000ff0:	0c3f      	lsrs	r7, r7, #16
 8000ff2:	19c9      	adds	r1, r1, r7
 8000ff4:	018c      	lsls	r4, r1, #6
 8000ff6:	1e67      	subs	r7, r4, #1
 8000ff8:	41bc      	sbcs	r4, r7
 8000ffa:	0c12      	lsrs	r2, r2, #16
 8000ffc:	0e89      	lsrs	r1, r1, #26
 8000ffe:	1812      	adds	r2, r2, r0
 8001000:	430c      	orrs	r4, r1
 8001002:	0192      	lsls	r2, r2, #6
 8001004:	4314      	orrs	r4, r2
 8001006:	0112      	lsls	r2, r2, #4
 8001008:	d50e      	bpl.n	8001028 <__aeabi_fmul+0x250>
 800100a:	2301      	movs	r3, #1
 800100c:	0862      	lsrs	r2, r4, #1
 800100e:	401c      	ands	r4, r3
 8001010:	4314      	orrs	r4, r2
 8001012:	e749      	b.n	8000ea8 <__aeabi_fmul+0xd0>
 8001014:	003e      	movs	r6, r7
 8001016:	46a1      	mov	r9, r4
 8001018:	2280      	movs	r2, #128	@ 0x80
 800101a:	464b      	mov	r3, r9
 800101c:	03d2      	lsls	r2, r2, #15
 800101e:	431a      	orrs	r2, r3
 8001020:	0252      	lsls	r2, r2, #9
 8001022:	20ff      	movs	r0, #255	@ 0xff
 8001024:	0a52      	lsrs	r2, r2, #9
 8001026:	e714      	b.n	8000e52 <__aeabi_fmul+0x7a>
 8001028:	001d      	movs	r5, r3
 800102a:	e73d      	b.n	8000ea8 <__aeabi_fmul+0xd0>
 800102c:	0192      	lsls	r2, r2, #6
 800102e:	2000      	movs	r0, #0
 8001030:	0a52      	lsrs	r2, r2, #9
 8001032:	e70e      	b.n	8000e52 <__aeabi_fmul+0x7a>
 8001034:	290f      	cmp	r1, #15
 8001036:	d1ed      	bne.n	8001014 <__aeabi_fmul+0x23c>
 8001038:	2280      	movs	r2, #128	@ 0x80
 800103a:	464b      	mov	r3, r9
 800103c:	03d2      	lsls	r2, r2, #15
 800103e:	4213      	tst	r3, r2
 8001040:	d0ea      	beq.n	8001018 <__aeabi_fmul+0x240>
 8001042:	4214      	tst	r4, r2
 8001044:	d1e8      	bne.n	8001018 <__aeabi_fmul+0x240>
 8001046:	003e      	movs	r6, r7
 8001048:	20ff      	movs	r0, #255	@ 0xff
 800104a:	4322      	orrs	r2, r4
 800104c:	e701      	b.n	8000e52 <__aeabi_fmul+0x7a>
 800104e:	46c0      	nop			@ (mov r8, r8)
 8001050:	f7ffffff 	.word	0xf7ffffff

08001054 <__aeabi_fsub>:
 8001054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001056:	4647      	mov	r7, r8
 8001058:	46ce      	mov	lr, r9
 800105a:	024e      	lsls	r6, r1, #9
 800105c:	0243      	lsls	r3, r0, #9
 800105e:	0045      	lsls	r5, r0, #1
 8001060:	0a72      	lsrs	r2, r6, #9
 8001062:	0fc4      	lsrs	r4, r0, #31
 8001064:	0048      	lsls	r0, r1, #1
 8001066:	b580      	push	{r7, lr}
 8001068:	4694      	mov	ip, r2
 800106a:	0a5f      	lsrs	r7, r3, #9
 800106c:	0e2d      	lsrs	r5, r5, #24
 800106e:	099b      	lsrs	r3, r3, #6
 8001070:	0e00      	lsrs	r0, r0, #24
 8001072:	0fc9      	lsrs	r1, r1, #31
 8001074:	09b6      	lsrs	r6, r6, #6
 8001076:	28ff      	cmp	r0, #255	@ 0xff
 8001078:	d024      	beq.n	80010c4 <__aeabi_fsub+0x70>
 800107a:	2201      	movs	r2, #1
 800107c:	4051      	eors	r1, r2
 800107e:	1a2a      	subs	r2, r5, r0
 8001080:	428c      	cmp	r4, r1
 8001082:	d00f      	beq.n	80010a4 <__aeabi_fsub+0x50>
 8001084:	2a00      	cmp	r2, #0
 8001086:	dc00      	bgt.n	800108a <__aeabi_fsub+0x36>
 8001088:	e16a      	b.n	8001360 <__aeabi_fsub+0x30c>
 800108a:	2800      	cmp	r0, #0
 800108c:	d135      	bne.n	80010fa <__aeabi_fsub+0xa6>
 800108e:	2e00      	cmp	r6, #0
 8001090:	d100      	bne.n	8001094 <__aeabi_fsub+0x40>
 8001092:	e0a2      	b.n	80011da <__aeabi_fsub+0x186>
 8001094:	1e51      	subs	r1, r2, #1
 8001096:	2a01      	cmp	r2, #1
 8001098:	d100      	bne.n	800109c <__aeabi_fsub+0x48>
 800109a:	e124      	b.n	80012e6 <__aeabi_fsub+0x292>
 800109c:	2aff      	cmp	r2, #255	@ 0xff
 800109e:	d021      	beq.n	80010e4 <__aeabi_fsub+0x90>
 80010a0:	000a      	movs	r2, r1
 80010a2:	e02f      	b.n	8001104 <__aeabi_fsub+0xb0>
 80010a4:	2a00      	cmp	r2, #0
 80010a6:	dc00      	bgt.n	80010aa <__aeabi_fsub+0x56>
 80010a8:	e167      	b.n	800137a <__aeabi_fsub+0x326>
 80010aa:	2800      	cmp	r0, #0
 80010ac:	d05e      	beq.n	800116c <__aeabi_fsub+0x118>
 80010ae:	2dff      	cmp	r5, #255	@ 0xff
 80010b0:	d018      	beq.n	80010e4 <__aeabi_fsub+0x90>
 80010b2:	2180      	movs	r1, #128	@ 0x80
 80010b4:	04c9      	lsls	r1, r1, #19
 80010b6:	430e      	orrs	r6, r1
 80010b8:	2a1b      	cmp	r2, #27
 80010ba:	dc00      	bgt.n	80010be <__aeabi_fsub+0x6a>
 80010bc:	e076      	b.n	80011ac <__aeabi_fsub+0x158>
 80010be:	002a      	movs	r2, r5
 80010c0:	3301      	adds	r3, #1
 80010c2:	e032      	b.n	800112a <__aeabi_fsub+0xd6>
 80010c4:	002a      	movs	r2, r5
 80010c6:	3aff      	subs	r2, #255	@ 0xff
 80010c8:	4691      	mov	r9, r2
 80010ca:	2e00      	cmp	r6, #0
 80010cc:	d042      	beq.n	8001154 <__aeabi_fsub+0x100>
 80010ce:	428c      	cmp	r4, r1
 80010d0:	d055      	beq.n	800117e <__aeabi_fsub+0x12a>
 80010d2:	464a      	mov	r2, r9
 80010d4:	2a00      	cmp	r2, #0
 80010d6:	d100      	bne.n	80010da <__aeabi_fsub+0x86>
 80010d8:	e09c      	b.n	8001214 <__aeabi_fsub+0x1c0>
 80010da:	2d00      	cmp	r5, #0
 80010dc:	d100      	bne.n	80010e0 <__aeabi_fsub+0x8c>
 80010de:	e077      	b.n	80011d0 <__aeabi_fsub+0x17c>
 80010e0:	000c      	movs	r4, r1
 80010e2:	0033      	movs	r3, r6
 80010e4:	08db      	lsrs	r3, r3, #3
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d100      	bne.n	80010ec <__aeabi_fsub+0x98>
 80010ea:	e06e      	b.n	80011ca <__aeabi_fsub+0x176>
 80010ec:	2280      	movs	r2, #128	@ 0x80
 80010ee:	03d2      	lsls	r2, r2, #15
 80010f0:	4313      	orrs	r3, r2
 80010f2:	025b      	lsls	r3, r3, #9
 80010f4:	20ff      	movs	r0, #255	@ 0xff
 80010f6:	0a5b      	lsrs	r3, r3, #9
 80010f8:	e024      	b.n	8001144 <__aeabi_fsub+0xf0>
 80010fa:	2dff      	cmp	r5, #255	@ 0xff
 80010fc:	d0f2      	beq.n	80010e4 <__aeabi_fsub+0x90>
 80010fe:	2180      	movs	r1, #128	@ 0x80
 8001100:	04c9      	lsls	r1, r1, #19
 8001102:	430e      	orrs	r6, r1
 8001104:	2101      	movs	r1, #1
 8001106:	2a1b      	cmp	r2, #27
 8001108:	dc08      	bgt.n	800111c <__aeabi_fsub+0xc8>
 800110a:	0031      	movs	r1, r6
 800110c:	2020      	movs	r0, #32
 800110e:	40d1      	lsrs	r1, r2
 8001110:	1a82      	subs	r2, r0, r2
 8001112:	4096      	lsls	r6, r2
 8001114:	0032      	movs	r2, r6
 8001116:	1e50      	subs	r0, r2, #1
 8001118:	4182      	sbcs	r2, r0
 800111a:	4311      	orrs	r1, r2
 800111c:	1a5b      	subs	r3, r3, r1
 800111e:	015a      	lsls	r2, r3, #5
 8001120:	d460      	bmi.n	80011e4 <__aeabi_fsub+0x190>
 8001122:	2107      	movs	r1, #7
 8001124:	002a      	movs	r2, r5
 8001126:	4019      	ands	r1, r3
 8001128:	d057      	beq.n	80011da <__aeabi_fsub+0x186>
 800112a:	210f      	movs	r1, #15
 800112c:	4019      	ands	r1, r3
 800112e:	2904      	cmp	r1, #4
 8001130:	d000      	beq.n	8001134 <__aeabi_fsub+0xe0>
 8001132:	3304      	adds	r3, #4
 8001134:	0159      	lsls	r1, r3, #5
 8001136:	d550      	bpl.n	80011da <__aeabi_fsub+0x186>
 8001138:	1c50      	adds	r0, r2, #1
 800113a:	2afe      	cmp	r2, #254	@ 0xfe
 800113c:	d045      	beq.n	80011ca <__aeabi_fsub+0x176>
 800113e:	019b      	lsls	r3, r3, #6
 8001140:	b2c0      	uxtb	r0, r0
 8001142:	0a5b      	lsrs	r3, r3, #9
 8001144:	05c0      	lsls	r0, r0, #23
 8001146:	4318      	orrs	r0, r3
 8001148:	07e4      	lsls	r4, r4, #31
 800114a:	4320      	orrs	r0, r4
 800114c:	bcc0      	pop	{r6, r7}
 800114e:	46b9      	mov	r9, r7
 8001150:	46b0      	mov	r8, r6
 8001152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001154:	2201      	movs	r2, #1
 8001156:	4051      	eors	r1, r2
 8001158:	428c      	cmp	r4, r1
 800115a:	d1ba      	bne.n	80010d2 <__aeabi_fsub+0x7e>
 800115c:	464a      	mov	r2, r9
 800115e:	2a00      	cmp	r2, #0
 8001160:	d010      	beq.n	8001184 <__aeabi_fsub+0x130>
 8001162:	2d00      	cmp	r5, #0
 8001164:	d100      	bne.n	8001168 <__aeabi_fsub+0x114>
 8001166:	e098      	b.n	800129a <__aeabi_fsub+0x246>
 8001168:	2300      	movs	r3, #0
 800116a:	e7bb      	b.n	80010e4 <__aeabi_fsub+0x90>
 800116c:	2e00      	cmp	r6, #0
 800116e:	d034      	beq.n	80011da <__aeabi_fsub+0x186>
 8001170:	1e51      	subs	r1, r2, #1
 8001172:	2a01      	cmp	r2, #1
 8001174:	d06e      	beq.n	8001254 <__aeabi_fsub+0x200>
 8001176:	2aff      	cmp	r2, #255	@ 0xff
 8001178:	d0b4      	beq.n	80010e4 <__aeabi_fsub+0x90>
 800117a:	000a      	movs	r2, r1
 800117c:	e79c      	b.n	80010b8 <__aeabi_fsub+0x64>
 800117e:	2a00      	cmp	r2, #0
 8001180:	d000      	beq.n	8001184 <__aeabi_fsub+0x130>
 8001182:	e088      	b.n	8001296 <__aeabi_fsub+0x242>
 8001184:	20fe      	movs	r0, #254	@ 0xfe
 8001186:	1c6a      	adds	r2, r5, #1
 8001188:	4210      	tst	r0, r2
 800118a:	d000      	beq.n	800118e <__aeabi_fsub+0x13a>
 800118c:	e092      	b.n	80012b4 <__aeabi_fsub+0x260>
 800118e:	2d00      	cmp	r5, #0
 8001190:	d000      	beq.n	8001194 <__aeabi_fsub+0x140>
 8001192:	e0a4      	b.n	80012de <__aeabi_fsub+0x28a>
 8001194:	2b00      	cmp	r3, #0
 8001196:	d100      	bne.n	800119a <__aeabi_fsub+0x146>
 8001198:	e0cb      	b.n	8001332 <__aeabi_fsub+0x2de>
 800119a:	2e00      	cmp	r6, #0
 800119c:	d000      	beq.n	80011a0 <__aeabi_fsub+0x14c>
 800119e:	e0ca      	b.n	8001336 <__aeabi_fsub+0x2e2>
 80011a0:	2200      	movs	r2, #0
 80011a2:	08db      	lsrs	r3, r3, #3
 80011a4:	025b      	lsls	r3, r3, #9
 80011a6:	0a5b      	lsrs	r3, r3, #9
 80011a8:	b2d0      	uxtb	r0, r2
 80011aa:	e7cb      	b.n	8001144 <__aeabi_fsub+0xf0>
 80011ac:	0031      	movs	r1, r6
 80011ae:	2020      	movs	r0, #32
 80011b0:	40d1      	lsrs	r1, r2
 80011b2:	1a82      	subs	r2, r0, r2
 80011b4:	4096      	lsls	r6, r2
 80011b6:	0032      	movs	r2, r6
 80011b8:	1e50      	subs	r0, r2, #1
 80011ba:	4182      	sbcs	r2, r0
 80011bc:	430a      	orrs	r2, r1
 80011be:	189b      	adds	r3, r3, r2
 80011c0:	015a      	lsls	r2, r3, #5
 80011c2:	d5ae      	bpl.n	8001122 <__aeabi_fsub+0xce>
 80011c4:	1c6a      	adds	r2, r5, #1
 80011c6:	2dfe      	cmp	r5, #254	@ 0xfe
 80011c8:	d14a      	bne.n	8001260 <__aeabi_fsub+0x20c>
 80011ca:	20ff      	movs	r0, #255	@ 0xff
 80011cc:	2300      	movs	r3, #0
 80011ce:	e7b9      	b.n	8001144 <__aeabi_fsub+0xf0>
 80011d0:	22ff      	movs	r2, #255	@ 0xff
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d14b      	bne.n	800126e <__aeabi_fsub+0x21a>
 80011d6:	000c      	movs	r4, r1
 80011d8:	0033      	movs	r3, r6
 80011da:	08db      	lsrs	r3, r3, #3
 80011dc:	2aff      	cmp	r2, #255	@ 0xff
 80011de:	d100      	bne.n	80011e2 <__aeabi_fsub+0x18e>
 80011e0:	e781      	b.n	80010e6 <__aeabi_fsub+0x92>
 80011e2:	e7df      	b.n	80011a4 <__aeabi_fsub+0x150>
 80011e4:	019f      	lsls	r7, r3, #6
 80011e6:	09bf      	lsrs	r7, r7, #6
 80011e8:	0038      	movs	r0, r7
 80011ea:	f000 fd5d 	bl	8001ca8 <__clzsi2>
 80011ee:	3805      	subs	r0, #5
 80011f0:	4087      	lsls	r7, r0
 80011f2:	4285      	cmp	r5, r0
 80011f4:	dc21      	bgt.n	800123a <__aeabi_fsub+0x1e6>
 80011f6:	003b      	movs	r3, r7
 80011f8:	2120      	movs	r1, #32
 80011fa:	1b42      	subs	r2, r0, r5
 80011fc:	3201      	adds	r2, #1
 80011fe:	40d3      	lsrs	r3, r2
 8001200:	1a8a      	subs	r2, r1, r2
 8001202:	4097      	lsls	r7, r2
 8001204:	1e7a      	subs	r2, r7, #1
 8001206:	4197      	sbcs	r7, r2
 8001208:	2200      	movs	r2, #0
 800120a:	433b      	orrs	r3, r7
 800120c:	0759      	lsls	r1, r3, #29
 800120e:	d000      	beq.n	8001212 <__aeabi_fsub+0x1be>
 8001210:	e78b      	b.n	800112a <__aeabi_fsub+0xd6>
 8001212:	e78f      	b.n	8001134 <__aeabi_fsub+0xe0>
 8001214:	20fe      	movs	r0, #254	@ 0xfe
 8001216:	1c6a      	adds	r2, r5, #1
 8001218:	4210      	tst	r0, r2
 800121a:	d112      	bne.n	8001242 <__aeabi_fsub+0x1ee>
 800121c:	2d00      	cmp	r5, #0
 800121e:	d152      	bne.n	80012c6 <__aeabi_fsub+0x272>
 8001220:	2b00      	cmp	r3, #0
 8001222:	d07c      	beq.n	800131e <__aeabi_fsub+0x2ca>
 8001224:	2e00      	cmp	r6, #0
 8001226:	d0bb      	beq.n	80011a0 <__aeabi_fsub+0x14c>
 8001228:	1b9a      	subs	r2, r3, r6
 800122a:	0150      	lsls	r0, r2, #5
 800122c:	d400      	bmi.n	8001230 <__aeabi_fsub+0x1dc>
 800122e:	e08b      	b.n	8001348 <__aeabi_fsub+0x2f4>
 8001230:	2401      	movs	r4, #1
 8001232:	2200      	movs	r2, #0
 8001234:	1af3      	subs	r3, r6, r3
 8001236:	400c      	ands	r4, r1
 8001238:	e7e8      	b.n	800120c <__aeabi_fsub+0x1b8>
 800123a:	4b56      	ldr	r3, [pc, #344]	@ (8001394 <__aeabi_fsub+0x340>)
 800123c:	1a2a      	subs	r2, r5, r0
 800123e:	403b      	ands	r3, r7
 8001240:	e7e4      	b.n	800120c <__aeabi_fsub+0x1b8>
 8001242:	1b9f      	subs	r7, r3, r6
 8001244:	017a      	lsls	r2, r7, #5
 8001246:	d446      	bmi.n	80012d6 <__aeabi_fsub+0x282>
 8001248:	2f00      	cmp	r7, #0
 800124a:	d1cd      	bne.n	80011e8 <__aeabi_fsub+0x194>
 800124c:	2400      	movs	r4, #0
 800124e:	2000      	movs	r0, #0
 8001250:	2300      	movs	r3, #0
 8001252:	e777      	b.n	8001144 <__aeabi_fsub+0xf0>
 8001254:	199b      	adds	r3, r3, r6
 8001256:	2501      	movs	r5, #1
 8001258:	3201      	adds	r2, #1
 800125a:	0159      	lsls	r1, r3, #5
 800125c:	d400      	bmi.n	8001260 <__aeabi_fsub+0x20c>
 800125e:	e760      	b.n	8001122 <__aeabi_fsub+0xce>
 8001260:	2101      	movs	r1, #1
 8001262:	484d      	ldr	r0, [pc, #308]	@ (8001398 <__aeabi_fsub+0x344>)
 8001264:	4019      	ands	r1, r3
 8001266:	085b      	lsrs	r3, r3, #1
 8001268:	4003      	ands	r3, r0
 800126a:	430b      	orrs	r3, r1
 800126c:	e7ce      	b.n	800120c <__aeabi_fsub+0x1b8>
 800126e:	1e57      	subs	r7, r2, #1
 8001270:	2a01      	cmp	r2, #1
 8001272:	d05a      	beq.n	800132a <__aeabi_fsub+0x2d6>
 8001274:	000c      	movs	r4, r1
 8001276:	2aff      	cmp	r2, #255	@ 0xff
 8001278:	d033      	beq.n	80012e2 <__aeabi_fsub+0x28e>
 800127a:	2201      	movs	r2, #1
 800127c:	2f1b      	cmp	r7, #27
 800127e:	dc07      	bgt.n	8001290 <__aeabi_fsub+0x23c>
 8001280:	2120      	movs	r1, #32
 8001282:	1bc9      	subs	r1, r1, r7
 8001284:	001a      	movs	r2, r3
 8001286:	408b      	lsls	r3, r1
 8001288:	40fa      	lsrs	r2, r7
 800128a:	1e59      	subs	r1, r3, #1
 800128c:	418b      	sbcs	r3, r1
 800128e:	431a      	orrs	r2, r3
 8001290:	0005      	movs	r5, r0
 8001292:	1ab3      	subs	r3, r6, r2
 8001294:	e743      	b.n	800111e <__aeabi_fsub+0xca>
 8001296:	2d00      	cmp	r5, #0
 8001298:	d123      	bne.n	80012e2 <__aeabi_fsub+0x28e>
 800129a:	22ff      	movs	r2, #255	@ 0xff
 800129c:	2b00      	cmp	r3, #0
 800129e:	d09b      	beq.n	80011d8 <__aeabi_fsub+0x184>
 80012a0:	1e51      	subs	r1, r2, #1
 80012a2:	2a01      	cmp	r2, #1
 80012a4:	d0d6      	beq.n	8001254 <__aeabi_fsub+0x200>
 80012a6:	2aff      	cmp	r2, #255	@ 0xff
 80012a8:	d01b      	beq.n	80012e2 <__aeabi_fsub+0x28e>
 80012aa:	291b      	cmp	r1, #27
 80012ac:	dd2c      	ble.n	8001308 <__aeabi_fsub+0x2b4>
 80012ae:	0002      	movs	r2, r0
 80012b0:	1c73      	adds	r3, r6, #1
 80012b2:	e73a      	b.n	800112a <__aeabi_fsub+0xd6>
 80012b4:	2aff      	cmp	r2, #255	@ 0xff
 80012b6:	d088      	beq.n	80011ca <__aeabi_fsub+0x176>
 80012b8:	199b      	adds	r3, r3, r6
 80012ba:	085b      	lsrs	r3, r3, #1
 80012bc:	0759      	lsls	r1, r3, #29
 80012be:	d000      	beq.n	80012c2 <__aeabi_fsub+0x26e>
 80012c0:	e733      	b.n	800112a <__aeabi_fsub+0xd6>
 80012c2:	08db      	lsrs	r3, r3, #3
 80012c4:	e76e      	b.n	80011a4 <__aeabi_fsub+0x150>
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d110      	bne.n	80012ec <__aeabi_fsub+0x298>
 80012ca:	2e00      	cmp	r6, #0
 80012cc:	d043      	beq.n	8001356 <__aeabi_fsub+0x302>
 80012ce:	2401      	movs	r4, #1
 80012d0:	0033      	movs	r3, r6
 80012d2:	400c      	ands	r4, r1
 80012d4:	e706      	b.n	80010e4 <__aeabi_fsub+0x90>
 80012d6:	2401      	movs	r4, #1
 80012d8:	1af7      	subs	r7, r6, r3
 80012da:	400c      	ands	r4, r1
 80012dc:	e784      	b.n	80011e8 <__aeabi_fsub+0x194>
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d104      	bne.n	80012ec <__aeabi_fsub+0x298>
 80012e2:	0033      	movs	r3, r6
 80012e4:	e6fe      	b.n	80010e4 <__aeabi_fsub+0x90>
 80012e6:	2501      	movs	r5, #1
 80012e8:	1b9b      	subs	r3, r3, r6
 80012ea:	e718      	b.n	800111e <__aeabi_fsub+0xca>
 80012ec:	2e00      	cmp	r6, #0
 80012ee:	d100      	bne.n	80012f2 <__aeabi_fsub+0x29e>
 80012f0:	e6f8      	b.n	80010e4 <__aeabi_fsub+0x90>
 80012f2:	2280      	movs	r2, #128	@ 0x80
 80012f4:	03d2      	lsls	r2, r2, #15
 80012f6:	4297      	cmp	r7, r2
 80012f8:	d304      	bcc.n	8001304 <__aeabi_fsub+0x2b0>
 80012fa:	4594      	cmp	ip, r2
 80012fc:	d202      	bcs.n	8001304 <__aeabi_fsub+0x2b0>
 80012fe:	2401      	movs	r4, #1
 8001300:	0033      	movs	r3, r6
 8001302:	400c      	ands	r4, r1
 8001304:	08db      	lsrs	r3, r3, #3
 8001306:	e6f1      	b.n	80010ec <__aeabi_fsub+0x98>
 8001308:	001a      	movs	r2, r3
 800130a:	2520      	movs	r5, #32
 800130c:	40ca      	lsrs	r2, r1
 800130e:	1a69      	subs	r1, r5, r1
 8001310:	408b      	lsls	r3, r1
 8001312:	1e59      	subs	r1, r3, #1
 8001314:	418b      	sbcs	r3, r1
 8001316:	4313      	orrs	r3, r2
 8001318:	0005      	movs	r5, r0
 800131a:	199b      	adds	r3, r3, r6
 800131c:	e750      	b.n	80011c0 <__aeabi_fsub+0x16c>
 800131e:	2e00      	cmp	r6, #0
 8001320:	d094      	beq.n	800124c <__aeabi_fsub+0x1f8>
 8001322:	2401      	movs	r4, #1
 8001324:	0033      	movs	r3, r6
 8001326:	400c      	ands	r4, r1
 8001328:	e73a      	b.n	80011a0 <__aeabi_fsub+0x14c>
 800132a:	000c      	movs	r4, r1
 800132c:	2501      	movs	r5, #1
 800132e:	1af3      	subs	r3, r6, r3
 8001330:	e6f5      	b.n	800111e <__aeabi_fsub+0xca>
 8001332:	0033      	movs	r3, r6
 8001334:	e734      	b.n	80011a0 <__aeabi_fsub+0x14c>
 8001336:	199b      	adds	r3, r3, r6
 8001338:	2200      	movs	r2, #0
 800133a:	0159      	lsls	r1, r3, #5
 800133c:	d5c1      	bpl.n	80012c2 <__aeabi_fsub+0x26e>
 800133e:	4a15      	ldr	r2, [pc, #84]	@ (8001394 <__aeabi_fsub+0x340>)
 8001340:	4013      	ands	r3, r2
 8001342:	08db      	lsrs	r3, r3, #3
 8001344:	2201      	movs	r2, #1
 8001346:	e72d      	b.n	80011a4 <__aeabi_fsub+0x150>
 8001348:	2a00      	cmp	r2, #0
 800134a:	d100      	bne.n	800134e <__aeabi_fsub+0x2fa>
 800134c:	e77e      	b.n	800124c <__aeabi_fsub+0x1f8>
 800134e:	0013      	movs	r3, r2
 8001350:	2200      	movs	r2, #0
 8001352:	08db      	lsrs	r3, r3, #3
 8001354:	e726      	b.n	80011a4 <__aeabi_fsub+0x150>
 8001356:	2380      	movs	r3, #128	@ 0x80
 8001358:	2400      	movs	r4, #0
 800135a:	20ff      	movs	r0, #255	@ 0xff
 800135c:	03db      	lsls	r3, r3, #15
 800135e:	e6f1      	b.n	8001144 <__aeabi_fsub+0xf0>
 8001360:	2a00      	cmp	r2, #0
 8001362:	d100      	bne.n	8001366 <__aeabi_fsub+0x312>
 8001364:	e756      	b.n	8001214 <__aeabi_fsub+0x1c0>
 8001366:	1b47      	subs	r7, r0, r5
 8001368:	003a      	movs	r2, r7
 800136a:	2d00      	cmp	r5, #0
 800136c:	d100      	bne.n	8001370 <__aeabi_fsub+0x31c>
 800136e:	e730      	b.n	80011d2 <__aeabi_fsub+0x17e>
 8001370:	2280      	movs	r2, #128	@ 0x80
 8001372:	04d2      	lsls	r2, r2, #19
 8001374:	000c      	movs	r4, r1
 8001376:	4313      	orrs	r3, r2
 8001378:	e77f      	b.n	800127a <__aeabi_fsub+0x226>
 800137a:	2a00      	cmp	r2, #0
 800137c:	d100      	bne.n	8001380 <__aeabi_fsub+0x32c>
 800137e:	e701      	b.n	8001184 <__aeabi_fsub+0x130>
 8001380:	1b41      	subs	r1, r0, r5
 8001382:	2d00      	cmp	r5, #0
 8001384:	d101      	bne.n	800138a <__aeabi_fsub+0x336>
 8001386:	000a      	movs	r2, r1
 8001388:	e788      	b.n	800129c <__aeabi_fsub+0x248>
 800138a:	2280      	movs	r2, #128	@ 0x80
 800138c:	04d2      	lsls	r2, r2, #19
 800138e:	4313      	orrs	r3, r2
 8001390:	e78b      	b.n	80012aa <__aeabi_fsub+0x256>
 8001392:	46c0      	nop			@ (mov r8, r8)
 8001394:	fbffffff 	.word	0xfbffffff
 8001398:	7dffffff 	.word	0x7dffffff

0800139c <__aeabi_fcmpun>:
 800139c:	0243      	lsls	r3, r0, #9
 800139e:	024a      	lsls	r2, r1, #9
 80013a0:	0040      	lsls	r0, r0, #1
 80013a2:	0049      	lsls	r1, r1, #1
 80013a4:	0a5b      	lsrs	r3, r3, #9
 80013a6:	0a52      	lsrs	r2, r2, #9
 80013a8:	0e09      	lsrs	r1, r1, #24
 80013aa:	0e00      	lsrs	r0, r0, #24
 80013ac:	28ff      	cmp	r0, #255	@ 0xff
 80013ae:	d006      	beq.n	80013be <__aeabi_fcmpun+0x22>
 80013b0:	2000      	movs	r0, #0
 80013b2:	29ff      	cmp	r1, #255	@ 0xff
 80013b4:	d102      	bne.n	80013bc <__aeabi_fcmpun+0x20>
 80013b6:	1e53      	subs	r3, r2, #1
 80013b8:	419a      	sbcs	r2, r3
 80013ba:	0010      	movs	r0, r2
 80013bc:	4770      	bx	lr
 80013be:	38fe      	subs	r0, #254	@ 0xfe
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d1fb      	bne.n	80013bc <__aeabi_fcmpun+0x20>
 80013c4:	e7f4      	b.n	80013b0 <__aeabi_fcmpun+0x14>
 80013c6:	46c0      	nop			@ (mov r8, r8)

080013c8 <__aeabi_f2iz>:
 80013c8:	0241      	lsls	r1, r0, #9
 80013ca:	0042      	lsls	r2, r0, #1
 80013cc:	0fc3      	lsrs	r3, r0, #31
 80013ce:	0a49      	lsrs	r1, r1, #9
 80013d0:	2000      	movs	r0, #0
 80013d2:	0e12      	lsrs	r2, r2, #24
 80013d4:	2a7e      	cmp	r2, #126	@ 0x7e
 80013d6:	dd03      	ble.n	80013e0 <__aeabi_f2iz+0x18>
 80013d8:	2a9d      	cmp	r2, #157	@ 0x9d
 80013da:	dd02      	ble.n	80013e2 <__aeabi_f2iz+0x1a>
 80013dc:	4a09      	ldr	r2, [pc, #36]	@ (8001404 <__aeabi_f2iz+0x3c>)
 80013de:	1898      	adds	r0, r3, r2
 80013e0:	4770      	bx	lr
 80013e2:	2080      	movs	r0, #128	@ 0x80
 80013e4:	0400      	lsls	r0, r0, #16
 80013e6:	4301      	orrs	r1, r0
 80013e8:	2a95      	cmp	r2, #149	@ 0x95
 80013ea:	dc07      	bgt.n	80013fc <__aeabi_f2iz+0x34>
 80013ec:	2096      	movs	r0, #150	@ 0x96
 80013ee:	1a82      	subs	r2, r0, r2
 80013f0:	40d1      	lsrs	r1, r2
 80013f2:	4248      	negs	r0, r1
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d1f3      	bne.n	80013e0 <__aeabi_f2iz+0x18>
 80013f8:	0008      	movs	r0, r1
 80013fa:	e7f1      	b.n	80013e0 <__aeabi_f2iz+0x18>
 80013fc:	3a96      	subs	r2, #150	@ 0x96
 80013fe:	4091      	lsls	r1, r2
 8001400:	e7f7      	b.n	80013f2 <__aeabi_f2iz+0x2a>
 8001402:	46c0      	nop			@ (mov r8, r8)
 8001404:	7fffffff 	.word	0x7fffffff

08001408 <__aeabi_i2f>:
 8001408:	b570      	push	{r4, r5, r6, lr}
 800140a:	2800      	cmp	r0, #0
 800140c:	d013      	beq.n	8001436 <__aeabi_i2f+0x2e>
 800140e:	17c3      	asrs	r3, r0, #31
 8001410:	18c5      	adds	r5, r0, r3
 8001412:	405d      	eors	r5, r3
 8001414:	0fc4      	lsrs	r4, r0, #31
 8001416:	0028      	movs	r0, r5
 8001418:	f000 fc46 	bl	8001ca8 <__clzsi2>
 800141c:	239e      	movs	r3, #158	@ 0x9e
 800141e:	0001      	movs	r1, r0
 8001420:	1a1b      	subs	r3, r3, r0
 8001422:	2b96      	cmp	r3, #150	@ 0x96
 8001424:	dc0f      	bgt.n	8001446 <__aeabi_i2f+0x3e>
 8001426:	2808      	cmp	r0, #8
 8001428:	d034      	beq.n	8001494 <__aeabi_i2f+0x8c>
 800142a:	3908      	subs	r1, #8
 800142c:	408d      	lsls	r5, r1
 800142e:	026d      	lsls	r5, r5, #9
 8001430:	0a6d      	lsrs	r5, r5, #9
 8001432:	b2d8      	uxtb	r0, r3
 8001434:	e002      	b.n	800143c <__aeabi_i2f+0x34>
 8001436:	2400      	movs	r4, #0
 8001438:	2000      	movs	r0, #0
 800143a:	2500      	movs	r5, #0
 800143c:	05c0      	lsls	r0, r0, #23
 800143e:	4328      	orrs	r0, r5
 8001440:	07e4      	lsls	r4, r4, #31
 8001442:	4320      	orrs	r0, r4
 8001444:	bd70      	pop	{r4, r5, r6, pc}
 8001446:	2b99      	cmp	r3, #153	@ 0x99
 8001448:	dc16      	bgt.n	8001478 <__aeabi_i2f+0x70>
 800144a:	1f42      	subs	r2, r0, #5
 800144c:	2805      	cmp	r0, #5
 800144e:	d000      	beq.n	8001452 <__aeabi_i2f+0x4a>
 8001450:	4095      	lsls	r5, r2
 8001452:	002a      	movs	r2, r5
 8001454:	4811      	ldr	r0, [pc, #68]	@ (800149c <__aeabi_i2f+0x94>)
 8001456:	4002      	ands	r2, r0
 8001458:	076e      	lsls	r6, r5, #29
 800145a:	d009      	beq.n	8001470 <__aeabi_i2f+0x68>
 800145c:	260f      	movs	r6, #15
 800145e:	4035      	ands	r5, r6
 8001460:	2d04      	cmp	r5, #4
 8001462:	d005      	beq.n	8001470 <__aeabi_i2f+0x68>
 8001464:	3204      	adds	r2, #4
 8001466:	0155      	lsls	r5, r2, #5
 8001468:	d502      	bpl.n	8001470 <__aeabi_i2f+0x68>
 800146a:	239f      	movs	r3, #159	@ 0x9f
 800146c:	4002      	ands	r2, r0
 800146e:	1a5b      	subs	r3, r3, r1
 8001470:	0192      	lsls	r2, r2, #6
 8001472:	0a55      	lsrs	r5, r2, #9
 8001474:	b2d8      	uxtb	r0, r3
 8001476:	e7e1      	b.n	800143c <__aeabi_i2f+0x34>
 8001478:	2205      	movs	r2, #5
 800147a:	1a12      	subs	r2, r2, r0
 800147c:	0028      	movs	r0, r5
 800147e:	40d0      	lsrs	r0, r2
 8001480:	0002      	movs	r2, r0
 8001482:	0008      	movs	r0, r1
 8001484:	301b      	adds	r0, #27
 8001486:	4085      	lsls	r5, r0
 8001488:	0028      	movs	r0, r5
 800148a:	1e45      	subs	r5, r0, #1
 800148c:	41a8      	sbcs	r0, r5
 800148e:	4302      	orrs	r2, r0
 8001490:	0015      	movs	r5, r2
 8001492:	e7de      	b.n	8001452 <__aeabi_i2f+0x4a>
 8001494:	026d      	lsls	r5, r5, #9
 8001496:	2096      	movs	r0, #150	@ 0x96
 8001498:	0a6d      	lsrs	r5, r5, #9
 800149a:	e7cf      	b.n	800143c <__aeabi_i2f+0x34>
 800149c:	fbffffff 	.word	0xfbffffff

080014a0 <__aeabi_ui2f>:
 80014a0:	b570      	push	{r4, r5, r6, lr}
 80014a2:	1e04      	subs	r4, r0, #0
 80014a4:	d00e      	beq.n	80014c4 <__aeabi_ui2f+0x24>
 80014a6:	f000 fbff 	bl	8001ca8 <__clzsi2>
 80014aa:	239e      	movs	r3, #158	@ 0x9e
 80014ac:	0001      	movs	r1, r0
 80014ae:	1a1b      	subs	r3, r3, r0
 80014b0:	2b96      	cmp	r3, #150	@ 0x96
 80014b2:	dc0c      	bgt.n	80014ce <__aeabi_ui2f+0x2e>
 80014b4:	2808      	cmp	r0, #8
 80014b6:	d02f      	beq.n	8001518 <__aeabi_ui2f+0x78>
 80014b8:	3908      	subs	r1, #8
 80014ba:	408c      	lsls	r4, r1
 80014bc:	0264      	lsls	r4, r4, #9
 80014be:	0a64      	lsrs	r4, r4, #9
 80014c0:	b2d8      	uxtb	r0, r3
 80014c2:	e001      	b.n	80014c8 <__aeabi_ui2f+0x28>
 80014c4:	2000      	movs	r0, #0
 80014c6:	2400      	movs	r4, #0
 80014c8:	05c0      	lsls	r0, r0, #23
 80014ca:	4320      	orrs	r0, r4
 80014cc:	bd70      	pop	{r4, r5, r6, pc}
 80014ce:	2b99      	cmp	r3, #153	@ 0x99
 80014d0:	dc16      	bgt.n	8001500 <__aeabi_ui2f+0x60>
 80014d2:	1f42      	subs	r2, r0, #5
 80014d4:	2805      	cmp	r0, #5
 80014d6:	d000      	beq.n	80014da <__aeabi_ui2f+0x3a>
 80014d8:	4094      	lsls	r4, r2
 80014da:	0022      	movs	r2, r4
 80014dc:	4810      	ldr	r0, [pc, #64]	@ (8001520 <__aeabi_ui2f+0x80>)
 80014de:	4002      	ands	r2, r0
 80014e0:	0765      	lsls	r5, r4, #29
 80014e2:	d009      	beq.n	80014f8 <__aeabi_ui2f+0x58>
 80014e4:	250f      	movs	r5, #15
 80014e6:	402c      	ands	r4, r5
 80014e8:	2c04      	cmp	r4, #4
 80014ea:	d005      	beq.n	80014f8 <__aeabi_ui2f+0x58>
 80014ec:	3204      	adds	r2, #4
 80014ee:	0154      	lsls	r4, r2, #5
 80014f0:	d502      	bpl.n	80014f8 <__aeabi_ui2f+0x58>
 80014f2:	239f      	movs	r3, #159	@ 0x9f
 80014f4:	4002      	ands	r2, r0
 80014f6:	1a5b      	subs	r3, r3, r1
 80014f8:	0192      	lsls	r2, r2, #6
 80014fa:	0a54      	lsrs	r4, r2, #9
 80014fc:	b2d8      	uxtb	r0, r3
 80014fe:	e7e3      	b.n	80014c8 <__aeabi_ui2f+0x28>
 8001500:	0002      	movs	r2, r0
 8001502:	0020      	movs	r0, r4
 8001504:	321b      	adds	r2, #27
 8001506:	4090      	lsls	r0, r2
 8001508:	0002      	movs	r2, r0
 800150a:	1e50      	subs	r0, r2, #1
 800150c:	4182      	sbcs	r2, r0
 800150e:	2005      	movs	r0, #5
 8001510:	1a40      	subs	r0, r0, r1
 8001512:	40c4      	lsrs	r4, r0
 8001514:	4314      	orrs	r4, r2
 8001516:	e7e0      	b.n	80014da <__aeabi_ui2f+0x3a>
 8001518:	0264      	lsls	r4, r4, #9
 800151a:	2096      	movs	r0, #150	@ 0x96
 800151c:	0a64      	lsrs	r4, r4, #9
 800151e:	e7d3      	b.n	80014c8 <__aeabi_ui2f+0x28>
 8001520:	fbffffff 	.word	0xfbffffff

08001524 <__aeabi_dmul>:
 8001524:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001526:	4657      	mov	r7, sl
 8001528:	46de      	mov	lr, fp
 800152a:	464e      	mov	r6, r9
 800152c:	4645      	mov	r5, r8
 800152e:	b5e0      	push	{r5, r6, r7, lr}
 8001530:	001f      	movs	r7, r3
 8001532:	030b      	lsls	r3, r1, #12
 8001534:	0b1b      	lsrs	r3, r3, #12
 8001536:	0016      	movs	r6, r2
 8001538:	469a      	mov	sl, r3
 800153a:	0fca      	lsrs	r2, r1, #31
 800153c:	004b      	lsls	r3, r1, #1
 800153e:	0004      	movs	r4, r0
 8001540:	4693      	mov	fp, r2
 8001542:	b087      	sub	sp, #28
 8001544:	0d5b      	lsrs	r3, r3, #21
 8001546:	d100      	bne.n	800154a <__aeabi_dmul+0x26>
 8001548:	e0d5      	b.n	80016f6 <__aeabi_dmul+0x1d2>
 800154a:	4abb      	ldr	r2, [pc, #748]	@ (8001838 <__aeabi_dmul+0x314>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d100      	bne.n	8001552 <__aeabi_dmul+0x2e>
 8001550:	e0f8      	b.n	8001744 <__aeabi_dmul+0x220>
 8001552:	4651      	mov	r1, sl
 8001554:	0f42      	lsrs	r2, r0, #29
 8001556:	00c9      	lsls	r1, r1, #3
 8001558:	430a      	orrs	r2, r1
 800155a:	2180      	movs	r1, #128	@ 0x80
 800155c:	0409      	lsls	r1, r1, #16
 800155e:	4311      	orrs	r1, r2
 8001560:	00c2      	lsls	r2, r0, #3
 8001562:	4691      	mov	r9, r2
 8001564:	4ab5      	ldr	r2, [pc, #724]	@ (800183c <__aeabi_dmul+0x318>)
 8001566:	468a      	mov	sl, r1
 8001568:	189d      	adds	r5, r3, r2
 800156a:	2300      	movs	r3, #0
 800156c:	4698      	mov	r8, r3
 800156e:	9302      	str	r3, [sp, #8]
 8001570:	033c      	lsls	r4, r7, #12
 8001572:	007b      	lsls	r3, r7, #1
 8001574:	0ffa      	lsrs	r2, r7, #31
 8001576:	0030      	movs	r0, r6
 8001578:	0b24      	lsrs	r4, r4, #12
 800157a:	0d5b      	lsrs	r3, r3, #21
 800157c:	9200      	str	r2, [sp, #0]
 800157e:	d100      	bne.n	8001582 <__aeabi_dmul+0x5e>
 8001580:	e096      	b.n	80016b0 <__aeabi_dmul+0x18c>
 8001582:	4aad      	ldr	r2, [pc, #692]	@ (8001838 <__aeabi_dmul+0x314>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d031      	beq.n	80015ec <__aeabi_dmul+0xc8>
 8001588:	0f72      	lsrs	r2, r6, #29
 800158a:	00e4      	lsls	r4, r4, #3
 800158c:	4322      	orrs	r2, r4
 800158e:	2480      	movs	r4, #128	@ 0x80
 8001590:	0424      	lsls	r4, r4, #16
 8001592:	4314      	orrs	r4, r2
 8001594:	4aa9      	ldr	r2, [pc, #676]	@ (800183c <__aeabi_dmul+0x318>)
 8001596:	00f0      	lsls	r0, r6, #3
 8001598:	4694      	mov	ip, r2
 800159a:	4463      	add	r3, ip
 800159c:	195b      	adds	r3, r3, r5
 800159e:	1c5a      	adds	r2, r3, #1
 80015a0:	9201      	str	r2, [sp, #4]
 80015a2:	4642      	mov	r2, r8
 80015a4:	2600      	movs	r6, #0
 80015a6:	2a0a      	cmp	r2, #10
 80015a8:	dc42      	bgt.n	8001630 <__aeabi_dmul+0x10c>
 80015aa:	465a      	mov	r2, fp
 80015ac:	9900      	ldr	r1, [sp, #0]
 80015ae:	404a      	eors	r2, r1
 80015b0:	4693      	mov	fp, r2
 80015b2:	4642      	mov	r2, r8
 80015b4:	2a02      	cmp	r2, #2
 80015b6:	dc32      	bgt.n	800161e <__aeabi_dmul+0xfa>
 80015b8:	3a01      	subs	r2, #1
 80015ba:	2a01      	cmp	r2, #1
 80015bc:	d900      	bls.n	80015c0 <__aeabi_dmul+0x9c>
 80015be:	e149      	b.n	8001854 <__aeabi_dmul+0x330>
 80015c0:	2e02      	cmp	r6, #2
 80015c2:	d100      	bne.n	80015c6 <__aeabi_dmul+0xa2>
 80015c4:	e0ca      	b.n	800175c <__aeabi_dmul+0x238>
 80015c6:	2e01      	cmp	r6, #1
 80015c8:	d13d      	bne.n	8001646 <__aeabi_dmul+0x122>
 80015ca:	2300      	movs	r3, #0
 80015cc:	2400      	movs	r4, #0
 80015ce:	2200      	movs	r2, #0
 80015d0:	0010      	movs	r0, r2
 80015d2:	465a      	mov	r2, fp
 80015d4:	051b      	lsls	r3, r3, #20
 80015d6:	4323      	orrs	r3, r4
 80015d8:	07d2      	lsls	r2, r2, #31
 80015da:	4313      	orrs	r3, r2
 80015dc:	0019      	movs	r1, r3
 80015de:	b007      	add	sp, #28
 80015e0:	bcf0      	pop	{r4, r5, r6, r7}
 80015e2:	46bb      	mov	fp, r7
 80015e4:	46b2      	mov	sl, r6
 80015e6:	46a9      	mov	r9, r5
 80015e8:	46a0      	mov	r8, r4
 80015ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015ec:	4b92      	ldr	r3, [pc, #584]	@ (8001838 <__aeabi_dmul+0x314>)
 80015ee:	4326      	orrs	r6, r4
 80015f0:	18eb      	adds	r3, r5, r3
 80015f2:	2e00      	cmp	r6, #0
 80015f4:	d100      	bne.n	80015f8 <__aeabi_dmul+0xd4>
 80015f6:	e0bb      	b.n	8001770 <__aeabi_dmul+0x24c>
 80015f8:	2203      	movs	r2, #3
 80015fa:	4641      	mov	r1, r8
 80015fc:	4311      	orrs	r1, r2
 80015fe:	465a      	mov	r2, fp
 8001600:	4688      	mov	r8, r1
 8001602:	9900      	ldr	r1, [sp, #0]
 8001604:	404a      	eors	r2, r1
 8001606:	2180      	movs	r1, #128	@ 0x80
 8001608:	0109      	lsls	r1, r1, #4
 800160a:	468c      	mov	ip, r1
 800160c:	0029      	movs	r1, r5
 800160e:	4461      	add	r1, ip
 8001610:	9101      	str	r1, [sp, #4]
 8001612:	4641      	mov	r1, r8
 8001614:	290a      	cmp	r1, #10
 8001616:	dd00      	ble.n	800161a <__aeabi_dmul+0xf6>
 8001618:	e233      	b.n	8001a82 <__aeabi_dmul+0x55e>
 800161a:	4693      	mov	fp, r2
 800161c:	2603      	movs	r6, #3
 800161e:	4642      	mov	r2, r8
 8001620:	2701      	movs	r7, #1
 8001622:	4097      	lsls	r7, r2
 8001624:	21a6      	movs	r1, #166	@ 0xa6
 8001626:	003a      	movs	r2, r7
 8001628:	00c9      	lsls	r1, r1, #3
 800162a:	400a      	ands	r2, r1
 800162c:	420f      	tst	r7, r1
 800162e:	d031      	beq.n	8001694 <__aeabi_dmul+0x170>
 8001630:	9e02      	ldr	r6, [sp, #8]
 8001632:	2e02      	cmp	r6, #2
 8001634:	d100      	bne.n	8001638 <__aeabi_dmul+0x114>
 8001636:	e235      	b.n	8001aa4 <__aeabi_dmul+0x580>
 8001638:	2e03      	cmp	r6, #3
 800163a:	d100      	bne.n	800163e <__aeabi_dmul+0x11a>
 800163c:	e1d2      	b.n	80019e4 <__aeabi_dmul+0x4c0>
 800163e:	4654      	mov	r4, sl
 8001640:	4648      	mov	r0, r9
 8001642:	2e01      	cmp	r6, #1
 8001644:	d0c1      	beq.n	80015ca <__aeabi_dmul+0xa6>
 8001646:	9a01      	ldr	r2, [sp, #4]
 8001648:	4b7d      	ldr	r3, [pc, #500]	@ (8001840 <__aeabi_dmul+0x31c>)
 800164a:	4694      	mov	ip, r2
 800164c:	4463      	add	r3, ip
 800164e:	2b00      	cmp	r3, #0
 8001650:	dc00      	bgt.n	8001654 <__aeabi_dmul+0x130>
 8001652:	e0c0      	b.n	80017d6 <__aeabi_dmul+0x2b2>
 8001654:	0742      	lsls	r2, r0, #29
 8001656:	d009      	beq.n	800166c <__aeabi_dmul+0x148>
 8001658:	220f      	movs	r2, #15
 800165a:	4002      	ands	r2, r0
 800165c:	2a04      	cmp	r2, #4
 800165e:	d005      	beq.n	800166c <__aeabi_dmul+0x148>
 8001660:	1d02      	adds	r2, r0, #4
 8001662:	4282      	cmp	r2, r0
 8001664:	4180      	sbcs	r0, r0
 8001666:	4240      	negs	r0, r0
 8001668:	1824      	adds	r4, r4, r0
 800166a:	0010      	movs	r0, r2
 800166c:	01e2      	lsls	r2, r4, #7
 800166e:	d506      	bpl.n	800167e <__aeabi_dmul+0x15a>
 8001670:	4b74      	ldr	r3, [pc, #464]	@ (8001844 <__aeabi_dmul+0x320>)
 8001672:	9a01      	ldr	r2, [sp, #4]
 8001674:	401c      	ands	r4, r3
 8001676:	2380      	movs	r3, #128	@ 0x80
 8001678:	4694      	mov	ip, r2
 800167a:	00db      	lsls	r3, r3, #3
 800167c:	4463      	add	r3, ip
 800167e:	4a72      	ldr	r2, [pc, #456]	@ (8001848 <__aeabi_dmul+0x324>)
 8001680:	4293      	cmp	r3, r2
 8001682:	dc6b      	bgt.n	800175c <__aeabi_dmul+0x238>
 8001684:	0762      	lsls	r2, r4, #29
 8001686:	08c0      	lsrs	r0, r0, #3
 8001688:	0264      	lsls	r4, r4, #9
 800168a:	055b      	lsls	r3, r3, #21
 800168c:	4302      	orrs	r2, r0
 800168e:	0b24      	lsrs	r4, r4, #12
 8001690:	0d5b      	lsrs	r3, r3, #21
 8001692:	e79d      	b.n	80015d0 <__aeabi_dmul+0xac>
 8001694:	2190      	movs	r1, #144	@ 0x90
 8001696:	0089      	lsls	r1, r1, #2
 8001698:	420f      	tst	r7, r1
 800169a:	d163      	bne.n	8001764 <__aeabi_dmul+0x240>
 800169c:	2288      	movs	r2, #136	@ 0x88
 800169e:	423a      	tst	r2, r7
 80016a0:	d100      	bne.n	80016a4 <__aeabi_dmul+0x180>
 80016a2:	e0d7      	b.n	8001854 <__aeabi_dmul+0x330>
 80016a4:	9b00      	ldr	r3, [sp, #0]
 80016a6:	46a2      	mov	sl, r4
 80016a8:	469b      	mov	fp, r3
 80016aa:	4681      	mov	r9, r0
 80016ac:	9602      	str	r6, [sp, #8]
 80016ae:	e7bf      	b.n	8001630 <__aeabi_dmul+0x10c>
 80016b0:	0023      	movs	r3, r4
 80016b2:	4333      	orrs	r3, r6
 80016b4:	d100      	bne.n	80016b8 <__aeabi_dmul+0x194>
 80016b6:	e07f      	b.n	80017b8 <__aeabi_dmul+0x294>
 80016b8:	2c00      	cmp	r4, #0
 80016ba:	d100      	bne.n	80016be <__aeabi_dmul+0x19a>
 80016bc:	e1ad      	b.n	8001a1a <__aeabi_dmul+0x4f6>
 80016be:	0020      	movs	r0, r4
 80016c0:	f000 faf2 	bl	8001ca8 <__clzsi2>
 80016c4:	0002      	movs	r2, r0
 80016c6:	0003      	movs	r3, r0
 80016c8:	3a0b      	subs	r2, #11
 80016ca:	201d      	movs	r0, #29
 80016cc:	0019      	movs	r1, r3
 80016ce:	1a82      	subs	r2, r0, r2
 80016d0:	0030      	movs	r0, r6
 80016d2:	3908      	subs	r1, #8
 80016d4:	40d0      	lsrs	r0, r2
 80016d6:	408c      	lsls	r4, r1
 80016d8:	4304      	orrs	r4, r0
 80016da:	0030      	movs	r0, r6
 80016dc:	4088      	lsls	r0, r1
 80016de:	4a5b      	ldr	r2, [pc, #364]	@ (800184c <__aeabi_dmul+0x328>)
 80016e0:	1aeb      	subs	r3, r5, r3
 80016e2:	4694      	mov	ip, r2
 80016e4:	4463      	add	r3, ip
 80016e6:	1c5a      	adds	r2, r3, #1
 80016e8:	9201      	str	r2, [sp, #4]
 80016ea:	4642      	mov	r2, r8
 80016ec:	2600      	movs	r6, #0
 80016ee:	2a0a      	cmp	r2, #10
 80016f0:	dc00      	bgt.n	80016f4 <__aeabi_dmul+0x1d0>
 80016f2:	e75a      	b.n	80015aa <__aeabi_dmul+0x86>
 80016f4:	e79c      	b.n	8001630 <__aeabi_dmul+0x10c>
 80016f6:	4653      	mov	r3, sl
 80016f8:	4303      	orrs	r3, r0
 80016fa:	4699      	mov	r9, r3
 80016fc:	d054      	beq.n	80017a8 <__aeabi_dmul+0x284>
 80016fe:	4653      	mov	r3, sl
 8001700:	2b00      	cmp	r3, #0
 8001702:	d100      	bne.n	8001706 <__aeabi_dmul+0x1e2>
 8001704:	e177      	b.n	80019f6 <__aeabi_dmul+0x4d2>
 8001706:	4650      	mov	r0, sl
 8001708:	f000 face 	bl	8001ca8 <__clzsi2>
 800170c:	230b      	movs	r3, #11
 800170e:	425b      	negs	r3, r3
 8001710:	469c      	mov	ip, r3
 8001712:	0002      	movs	r2, r0
 8001714:	4484      	add	ip, r0
 8001716:	0011      	movs	r1, r2
 8001718:	4650      	mov	r0, sl
 800171a:	3908      	subs	r1, #8
 800171c:	4088      	lsls	r0, r1
 800171e:	231d      	movs	r3, #29
 8001720:	4680      	mov	r8, r0
 8001722:	4660      	mov	r0, ip
 8001724:	1a1b      	subs	r3, r3, r0
 8001726:	0020      	movs	r0, r4
 8001728:	40d8      	lsrs	r0, r3
 800172a:	0003      	movs	r3, r0
 800172c:	4640      	mov	r0, r8
 800172e:	4303      	orrs	r3, r0
 8001730:	469a      	mov	sl, r3
 8001732:	0023      	movs	r3, r4
 8001734:	408b      	lsls	r3, r1
 8001736:	4699      	mov	r9, r3
 8001738:	2300      	movs	r3, #0
 800173a:	4d44      	ldr	r5, [pc, #272]	@ (800184c <__aeabi_dmul+0x328>)
 800173c:	4698      	mov	r8, r3
 800173e:	1aad      	subs	r5, r5, r2
 8001740:	9302      	str	r3, [sp, #8]
 8001742:	e715      	b.n	8001570 <__aeabi_dmul+0x4c>
 8001744:	4652      	mov	r2, sl
 8001746:	4302      	orrs	r2, r0
 8001748:	4691      	mov	r9, r2
 800174a:	d126      	bne.n	800179a <__aeabi_dmul+0x276>
 800174c:	2200      	movs	r2, #0
 800174e:	001d      	movs	r5, r3
 8001750:	2302      	movs	r3, #2
 8001752:	4692      	mov	sl, r2
 8001754:	3208      	adds	r2, #8
 8001756:	4690      	mov	r8, r2
 8001758:	9302      	str	r3, [sp, #8]
 800175a:	e709      	b.n	8001570 <__aeabi_dmul+0x4c>
 800175c:	2400      	movs	r4, #0
 800175e:	2200      	movs	r2, #0
 8001760:	4b35      	ldr	r3, [pc, #212]	@ (8001838 <__aeabi_dmul+0x314>)
 8001762:	e735      	b.n	80015d0 <__aeabi_dmul+0xac>
 8001764:	2300      	movs	r3, #0
 8001766:	2480      	movs	r4, #128	@ 0x80
 8001768:	469b      	mov	fp, r3
 800176a:	0324      	lsls	r4, r4, #12
 800176c:	4b32      	ldr	r3, [pc, #200]	@ (8001838 <__aeabi_dmul+0x314>)
 800176e:	e72f      	b.n	80015d0 <__aeabi_dmul+0xac>
 8001770:	2202      	movs	r2, #2
 8001772:	4641      	mov	r1, r8
 8001774:	4311      	orrs	r1, r2
 8001776:	2280      	movs	r2, #128	@ 0x80
 8001778:	0112      	lsls	r2, r2, #4
 800177a:	4694      	mov	ip, r2
 800177c:	002a      	movs	r2, r5
 800177e:	4462      	add	r2, ip
 8001780:	4688      	mov	r8, r1
 8001782:	9201      	str	r2, [sp, #4]
 8001784:	290a      	cmp	r1, #10
 8001786:	dd00      	ble.n	800178a <__aeabi_dmul+0x266>
 8001788:	e752      	b.n	8001630 <__aeabi_dmul+0x10c>
 800178a:	465a      	mov	r2, fp
 800178c:	2000      	movs	r0, #0
 800178e:	9900      	ldr	r1, [sp, #0]
 8001790:	0004      	movs	r4, r0
 8001792:	404a      	eors	r2, r1
 8001794:	4693      	mov	fp, r2
 8001796:	2602      	movs	r6, #2
 8001798:	e70b      	b.n	80015b2 <__aeabi_dmul+0x8e>
 800179a:	220c      	movs	r2, #12
 800179c:	001d      	movs	r5, r3
 800179e:	2303      	movs	r3, #3
 80017a0:	4681      	mov	r9, r0
 80017a2:	4690      	mov	r8, r2
 80017a4:	9302      	str	r3, [sp, #8]
 80017a6:	e6e3      	b.n	8001570 <__aeabi_dmul+0x4c>
 80017a8:	2300      	movs	r3, #0
 80017aa:	469a      	mov	sl, r3
 80017ac:	3304      	adds	r3, #4
 80017ae:	4698      	mov	r8, r3
 80017b0:	3b03      	subs	r3, #3
 80017b2:	2500      	movs	r5, #0
 80017b4:	9302      	str	r3, [sp, #8]
 80017b6:	e6db      	b.n	8001570 <__aeabi_dmul+0x4c>
 80017b8:	4642      	mov	r2, r8
 80017ba:	3301      	adds	r3, #1
 80017bc:	431a      	orrs	r2, r3
 80017be:	002b      	movs	r3, r5
 80017c0:	4690      	mov	r8, r2
 80017c2:	1c5a      	adds	r2, r3, #1
 80017c4:	9201      	str	r2, [sp, #4]
 80017c6:	4642      	mov	r2, r8
 80017c8:	2400      	movs	r4, #0
 80017ca:	2000      	movs	r0, #0
 80017cc:	2601      	movs	r6, #1
 80017ce:	2a0a      	cmp	r2, #10
 80017d0:	dc00      	bgt.n	80017d4 <__aeabi_dmul+0x2b0>
 80017d2:	e6ea      	b.n	80015aa <__aeabi_dmul+0x86>
 80017d4:	e72c      	b.n	8001630 <__aeabi_dmul+0x10c>
 80017d6:	2201      	movs	r2, #1
 80017d8:	1ad2      	subs	r2, r2, r3
 80017da:	2a38      	cmp	r2, #56	@ 0x38
 80017dc:	dd00      	ble.n	80017e0 <__aeabi_dmul+0x2bc>
 80017de:	e6f4      	b.n	80015ca <__aeabi_dmul+0xa6>
 80017e0:	2a1f      	cmp	r2, #31
 80017e2:	dc00      	bgt.n	80017e6 <__aeabi_dmul+0x2c2>
 80017e4:	e12a      	b.n	8001a3c <__aeabi_dmul+0x518>
 80017e6:	211f      	movs	r1, #31
 80017e8:	4249      	negs	r1, r1
 80017ea:	1acb      	subs	r3, r1, r3
 80017ec:	0021      	movs	r1, r4
 80017ee:	40d9      	lsrs	r1, r3
 80017f0:	000b      	movs	r3, r1
 80017f2:	2a20      	cmp	r2, #32
 80017f4:	d005      	beq.n	8001802 <__aeabi_dmul+0x2de>
 80017f6:	4a16      	ldr	r2, [pc, #88]	@ (8001850 <__aeabi_dmul+0x32c>)
 80017f8:	9d01      	ldr	r5, [sp, #4]
 80017fa:	4694      	mov	ip, r2
 80017fc:	4465      	add	r5, ip
 80017fe:	40ac      	lsls	r4, r5
 8001800:	4320      	orrs	r0, r4
 8001802:	1e42      	subs	r2, r0, #1
 8001804:	4190      	sbcs	r0, r2
 8001806:	4318      	orrs	r0, r3
 8001808:	2307      	movs	r3, #7
 800180a:	0019      	movs	r1, r3
 800180c:	2400      	movs	r4, #0
 800180e:	4001      	ands	r1, r0
 8001810:	4203      	tst	r3, r0
 8001812:	d00c      	beq.n	800182e <__aeabi_dmul+0x30a>
 8001814:	230f      	movs	r3, #15
 8001816:	4003      	ands	r3, r0
 8001818:	2b04      	cmp	r3, #4
 800181a:	d100      	bne.n	800181e <__aeabi_dmul+0x2fa>
 800181c:	e140      	b.n	8001aa0 <__aeabi_dmul+0x57c>
 800181e:	1d03      	adds	r3, r0, #4
 8001820:	4283      	cmp	r3, r0
 8001822:	41a4      	sbcs	r4, r4
 8001824:	0018      	movs	r0, r3
 8001826:	4264      	negs	r4, r4
 8001828:	0761      	lsls	r1, r4, #29
 800182a:	0264      	lsls	r4, r4, #9
 800182c:	0b24      	lsrs	r4, r4, #12
 800182e:	08c2      	lsrs	r2, r0, #3
 8001830:	2300      	movs	r3, #0
 8001832:	430a      	orrs	r2, r1
 8001834:	e6cc      	b.n	80015d0 <__aeabi_dmul+0xac>
 8001836:	46c0      	nop			@ (mov r8, r8)
 8001838:	000007ff 	.word	0x000007ff
 800183c:	fffffc01 	.word	0xfffffc01
 8001840:	000003ff 	.word	0x000003ff
 8001844:	feffffff 	.word	0xfeffffff
 8001848:	000007fe 	.word	0x000007fe
 800184c:	fffffc0d 	.word	0xfffffc0d
 8001850:	0000043e 	.word	0x0000043e
 8001854:	4649      	mov	r1, r9
 8001856:	464a      	mov	r2, r9
 8001858:	0409      	lsls	r1, r1, #16
 800185a:	0c09      	lsrs	r1, r1, #16
 800185c:	000d      	movs	r5, r1
 800185e:	0c16      	lsrs	r6, r2, #16
 8001860:	0c02      	lsrs	r2, r0, #16
 8001862:	0400      	lsls	r0, r0, #16
 8001864:	0c00      	lsrs	r0, r0, #16
 8001866:	4345      	muls	r5, r0
 8001868:	46ac      	mov	ip, r5
 800186a:	0005      	movs	r5, r0
 800186c:	4375      	muls	r5, r6
 800186e:	46a8      	mov	r8, r5
 8001870:	0015      	movs	r5, r2
 8001872:	000f      	movs	r7, r1
 8001874:	4375      	muls	r5, r6
 8001876:	9200      	str	r2, [sp, #0]
 8001878:	9502      	str	r5, [sp, #8]
 800187a:	002a      	movs	r2, r5
 800187c:	9d00      	ldr	r5, [sp, #0]
 800187e:	436f      	muls	r7, r5
 8001880:	4665      	mov	r5, ip
 8001882:	0c2d      	lsrs	r5, r5, #16
 8001884:	46a9      	mov	r9, r5
 8001886:	4447      	add	r7, r8
 8001888:	444f      	add	r7, r9
 800188a:	45b8      	cmp	r8, r7
 800188c:	d905      	bls.n	800189a <__aeabi_dmul+0x376>
 800188e:	0015      	movs	r5, r2
 8001890:	2280      	movs	r2, #128	@ 0x80
 8001892:	0252      	lsls	r2, r2, #9
 8001894:	4690      	mov	r8, r2
 8001896:	4445      	add	r5, r8
 8001898:	9502      	str	r5, [sp, #8]
 800189a:	0c3d      	lsrs	r5, r7, #16
 800189c:	9503      	str	r5, [sp, #12]
 800189e:	4665      	mov	r5, ip
 80018a0:	042d      	lsls	r5, r5, #16
 80018a2:	043f      	lsls	r7, r7, #16
 80018a4:	0c2d      	lsrs	r5, r5, #16
 80018a6:	46ac      	mov	ip, r5
 80018a8:	003d      	movs	r5, r7
 80018aa:	4465      	add	r5, ip
 80018ac:	9504      	str	r5, [sp, #16]
 80018ae:	0c25      	lsrs	r5, r4, #16
 80018b0:	0424      	lsls	r4, r4, #16
 80018b2:	0c24      	lsrs	r4, r4, #16
 80018b4:	46ac      	mov	ip, r5
 80018b6:	0025      	movs	r5, r4
 80018b8:	4375      	muls	r5, r6
 80018ba:	46a8      	mov	r8, r5
 80018bc:	4665      	mov	r5, ip
 80018be:	000f      	movs	r7, r1
 80018c0:	4369      	muls	r1, r5
 80018c2:	4441      	add	r1, r8
 80018c4:	4689      	mov	r9, r1
 80018c6:	4367      	muls	r7, r4
 80018c8:	0c39      	lsrs	r1, r7, #16
 80018ca:	4449      	add	r1, r9
 80018cc:	436e      	muls	r6, r5
 80018ce:	4588      	cmp	r8, r1
 80018d0:	d903      	bls.n	80018da <__aeabi_dmul+0x3b6>
 80018d2:	2280      	movs	r2, #128	@ 0x80
 80018d4:	0252      	lsls	r2, r2, #9
 80018d6:	4690      	mov	r8, r2
 80018d8:	4446      	add	r6, r8
 80018da:	0c0d      	lsrs	r5, r1, #16
 80018dc:	46a8      	mov	r8, r5
 80018de:	0035      	movs	r5, r6
 80018e0:	4445      	add	r5, r8
 80018e2:	9505      	str	r5, [sp, #20]
 80018e4:	9d03      	ldr	r5, [sp, #12]
 80018e6:	043f      	lsls	r7, r7, #16
 80018e8:	46a8      	mov	r8, r5
 80018ea:	0c3f      	lsrs	r7, r7, #16
 80018ec:	0409      	lsls	r1, r1, #16
 80018ee:	19c9      	adds	r1, r1, r7
 80018f0:	4488      	add	r8, r1
 80018f2:	4645      	mov	r5, r8
 80018f4:	9503      	str	r5, [sp, #12]
 80018f6:	4655      	mov	r5, sl
 80018f8:	042e      	lsls	r6, r5, #16
 80018fa:	0c36      	lsrs	r6, r6, #16
 80018fc:	0c2f      	lsrs	r7, r5, #16
 80018fe:	0035      	movs	r5, r6
 8001900:	4345      	muls	r5, r0
 8001902:	4378      	muls	r0, r7
 8001904:	4681      	mov	r9, r0
 8001906:	0038      	movs	r0, r7
 8001908:	46a8      	mov	r8, r5
 800190a:	0c2d      	lsrs	r5, r5, #16
 800190c:	46aa      	mov	sl, r5
 800190e:	9a00      	ldr	r2, [sp, #0]
 8001910:	4350      	muls	r0, r2
 8001912:	4372      	muls	r2, r6
 8001914:	444a      	add	r2, r9
 8001916:	4452      	add	r2, sl
 8001918:	4591      	cmp	r9, r2
 800191a:	d903      	bls.n	8001924 <__aeabi_dmul+0x400>
 800191c:	2580      	movs	r5, #128	@ 0x80
 800191e:	026d      	lsls	r5, r5, #9
 8001920:	46a9      	mov	r9, r5
 8001922:	4448      	add	r0, r9
 8001924:	0c15      	lsrs	r5, r2, #16
 8001926:	46a9      	mov	r9, r5
 8001928:	4645      	mov	r5, r8
 800192a:	042d      	lsls	r5, r5, #16
 800192c:	0c2d      	lsrs	r5, r5, #16
 800192e:	46a8      	mov	r8, r5
 8001930:	4665      	mov	r5, ip
 8001932:	437d      	muls	r5, r7
 8001934:	0412      	lsls	r2, r2, #16
 8001936:	4448      	add	r0, r9
 8001938:	4490      	add	r8, r2
 800193a:	46a9      	mov	r9, r5
 800193c:	0032      	movs	r2, r6
 800193e:	4665      	mov	r5, ip
 8001940:	4362      	muls	r2, r4
 8001942:	436e      	muls	r6, r5
 8001944:	437c      	muls	r4, r7
 8001946:	0c17      	lsrs	r7, r2, #16
 8001948:	1936      	adds	r6, r6, r4
 800194a:	19bf      	adds	r7, r7, r6
 800194c:	42bc      	cmp	r4, r7
 800194e:	d903      	bls.n	8001958 <__aeabi_dmul+0x434>
 8001950:	2480      	movs	r4, #128	@ 0x80
 8001952:	0264      	lsls	r4, r4, #9
 8001954:	46a4      	mov	ip, r4
 8001956:	44e1      	add	r9, ip
 8001958:	9c02      	ldr	r4, [sp, #8]
 800195a:	9e03      	ldr	r6, [sp, #12]
 800195c:	46a4      	mov	ip, r4
 800195e:	9d05      	ldr	r5, [sp, #20]
 8001960:	4466      	add	r6, ip
 8001962:	428e      	cmp	r6, r1
 8001964:	4189      	sbcs	r1, r1
 8001966:	46ac      	mov	ip, r5
 8001968:	0412      	lsls	r2, r2, #16
 800196a:	043c      	lsls	r4, r7, #16
 800196c:	0c12      	lsrs	r2, r2, #16
 800196e:	18a2      	adds	r2, r4, r2
 8001970:	4462      	add	r2, ip
 8001972:	4249      	negs	r1, r1
 8001974:	1854      	adds	r4, r2, r1
 8001976:	4446      	add	r6, r8
 8001978:	46a4      	mov	ip, r4
 800197a:	4546      	cmp	r6, r8
 800197c:	41a4      	sbcs	r4, r4
 800197e:	4682      	mov	sl, r0
 8001980:	4264      	negs	r4, r4
 8001982:	46a0      	mov	r8, r4
 8001984:	42aa      	cmp	r2, r5
 8001986:	4192      	sbcs	r2, r2
 8001988:	458c      	cmp	ip, r1
 800198a:	4189      	sbcs	r1, r1
 800198c:	44e2      	add	sl, ip
 800198e:	44d0      	add	r8, sl
 8001990:	4249      	negs	r1, r1
 8001992:	4252      	negs	r2, r2
 8001994:	430a      	orrs	r2, r1
 8001996:	45a0      	cmp	r8, r4
 8001998:	41a4      	sbcs	r4, r4
 800199a:	4582      	cmp	sl, r0
 800199c:	4189      	sbcs	r1, r1
 800199e:	4264      	negs	r4, r4
 80019a0:	4249      	negs	r1, r1
 80019a2:	430c      	orrs	r4, r1
 80019a4:	4641      	mov	r1, r8
 80019a6:	0c3f      	lsrs	r7, r7, #16
 80019a8:	19d2      	adds	r2, r2, r7
 80019aa:	1912      	adds	r2, r2, r4
 80019ac:	0dcc      	lsrs	r4, r1, #23
 80019ae:	9904      	ldr	r1, [sp, #16]
 80019b0:	0270      	lsls	r0, r6, #9
 80019b2:	4308      	orrs	r0, r1
 80019b4:	1e41      	subs	r1, r0, #1
 80019b6:	4188      	sbcs	r0, r1
 80019b8:	4641      	mov	r1, r8
 80019ba:	444a      	add	r2, r9
 80019bc:	0df6      	lsrs	r6, r6, #23
 80019be:	0252      	lsls	r2, r2, #9
 80019c0:	4330      	orrs	r0, r6
 80019c2:	0249      	lsls	r1, r1, #9
 80019c4:	4314      	orrs	r4, r2
 80019c6:	4308      	orrs	r0, r1
 80019c8:	01d2      	lsls	r2, r2, #7
 80019ca:	d535      	bpl.n	8001a38 <__aeabi_dmul+0x514>
 80019cc:	2201      	movs	r2, #1
 80019ce:	0843      	lsrs	r3, r0, #1
 80019d0:	4002      	ands	r2, r0
 80019d2:	4313      	orrs	r3, r2
 80019d4:	07e0      	lsls	r0, r4, #31
 80019d6:	4318      	orrs	r0, r3
 80019d8:	0864      	lsrs	r4, r4, #1
 80019da:	e634      	b.n	8001646 <__aeabi_dmul+0x122>
 80019dc:	9b00      	ldr	r3, [sp, #0]
 80019de:	46a2      	mov	sl, r4
 80019e0:	469b      	mov	fp, r3
 80019e2:	4681      	mov	r9, r0
 80019e4:	2480      	movs	r4, #128	@ 0x80
 80019e6:	4653      	mov	r3, sl
 80019e8:	0324      	lsls	r4, r4, #12
 80019ea:	431c      	orrs	r4, r3
 80019ec:	0324      	lsls	r4, r4, #12
 80019ee:	464a      	mov	r2, r9
 80019f0:	4b2e      	ldr	r3, [pc, #184]	@ (8001aac <__aeabi_dmul+0x588>)
 80019f2:	0b24      	lsrs	r4, r4, #12
 80019f4:	e5ec      	b.n	80015d0 <__aeabi_dmul+0xac>
 80019f6:	f000 f957 	bl	8001ca8 <__clzsi2>
 80019fa:	2315      	movs	r3, #21
 80019fc:	469c      	mov	ip, r3
 80019fe:	4484      	add	ip, r0
 8001a00:	0002      	movs	r2, r0
 8001a02:	4663      	mov	r3, ip
 8001a04:	3220      	adds	r2, #32
 8001a06:	2b1c      	cmp	r3, #28
 8001a08:	dc00      	bgt.n	8001a0c <__aeabi_dmul+0x4e8>
 8001a0a:	e684      	b.n	8001716 <__aeabi_dmul+0x1f2>
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	4699      	mov	r9, r3
 8001a10:	0023      	movs	r3, r4
 8001a12:	3808      	subs	r0, #8
 8001a14:	4083      	lsls	r3, r0
 8001a16:	469a      	mov	sl, r3
 8001a18:	e68e      	b.n	8001738 <__aeabi_dmul+0x214>
 8001a1a:	f000 f945 	bl	8001ca8 <__clzsi2>
 8001a1e:	0002      	movs	r2, r0
 8001a20:	0003      	movs	r3, r0
 8001a22:	3215      	adds	r2, #21
 8001a24:	3320      	adds	r3, #32
 8001a26:	2a1c      	cmp	r2, #28
 8001a28:	dc00      	bgt.n	8001a2c <__aeabi_dmul+0x508>
 8001a2a:	e64e      	b.n	80016ca <__aeabi_dmul+0x1a6>
 8001a2c:	0002      	movs	r2, r0
 8001a2e:	0034      	movs	r4, r6
 8001a30:	3a08      	subs	r2, #8
 8001a32:	2000      	movs	r0, #0
 8001a34:	4094      	lsls	r4, r2
 8001a36:	e652      	b.n	80016de <__aeabi_dmul+0x1ba>
 8001a38:	9301      	str	r3, [sp, #4]
 8001a3a:	e604      	b.n	8001646 <__aeabi_dmul+0x122>
 8001a3c:	4b1c      	ldr	r3, [pc, #112]	@ (8001ab0 <__aeabi_dmul+0x58c>)
 8001a3e:	0021      	movs	r1, r4
 8001a40:	469c      	mov	ip, r3
 8001a42:	0003      	movs	r3, r0
 8001a44:	9d01      	ldr	r5, [sp, #4]
 8001a46:	40d3      	lsrs	r3, r2
 8001a48:	4465      	add	r5, ip
 8001a4a:	40a9      	lsls	r1, r5
 8001a4c:	4319      	orrs	r1, r3
 8001a4e:	0003      	movs	r3, r0
 8001a50:	40ab      	lsls	r3, r5
 8001a52:	1e58      	subs	r0, r3, #1
 8001a54:	4183      	sbcs	r3, r0
 8001a56:	4319      	orrs	r1, r3
 8001a58:	0008      	movs	r0, r1
 8001a5a:	40d4      	lsrs	r4, r2
 8001a5c:	074b      	lsls	r3, r1, #29
 8001a5e:	d009      	beq.n	8001a74 <__aeabi_dmul+0x550>
 8001a60:	230f      	movs	r3, #15
 8001a62:	400b      	ands	r3, r1
 8001a64:	2b04      	cmp	r3, #4
 8001a66:	d005      	beq.n	8001a74 <__aeabi_dmul+0x550>
 8001a68:	1d0b      	adds	r3, r1, #4
 8001a6a:	428b      	cmp	r3, r1
 8001a6c:	4180      	sbcs	r0, r0
 8001a6e:	4240      	negs	r0, r0
 8001a70:	1824      	adds	r4, r4, r0
 8001a72:	0018      	movs	r0, r3
 8001a74:	0223      	lsls	r3, r4, #8
 8001a76:	d400      	bmi.n	8001a7a <__aeabi_dmul+0x556>
 8001a78:	e6d6      	b.n	8001828 <__aeabi_dmul+0x304>
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	2400      	movs	r4, #0
 8001a7e:	2200      	movs	r2, #0
 8001a80:	e5a6      	b.n	80015d0 <__aeabi_dmul+0xac>
 8001a82:	290f      	cmp	r1, #15
 8001a84:	d1aa      	bne.n	80019dc <__aeabi_dmul+0x4b8>
 8001a86:	2380      	movs	r3, #128	@ 0x80
 8001a88:	4652      	mov	r2, sl
 8001a8a:	031b      	lsls	r3, r3, #12
 8001a8c:	421a      	tst	r2, r3
 8001a8e:	d0a9      	beq.n	80019e4 <__aeabi_dmul+0x4c0>
 8001a90:	421c      	tst	r4, r3
 8001a92:	d1a7      	bne.n	80019e4 <__aeabi_dmul+0x4c0>
 8001a94:	431c      	orrs	r4, r3
 8001a96:	9b00      	ldr	r3, [sp, #0]
 8001a98:	0002      	movs	r2, r0
 8001a9a:	469b      	mov	fp, r3
 8001a9c:	4b03      	ldr	r3, [pc, #12]	@ (8001aac <__aeabi_dmul+0x588>)
 8001a9e:	e597      	b.n	80015d0 <__aeabi_dmul+0xac>
 8001aa0:	2400      	movs	r4, #0
 8001aa2:	e6c1      	b.n	8001828 <__aeabi_dmul+0x304>
 8001aa4:	2400      	movs	r4, #0
 8001aa6:	4b01      	ldr	r3, [pc, #4]	@ (8001aac <__aeabi_dmul+0x588>)
 8001aa8:	0022      	movs	r2, r4
 8001aaa:	e591      	b.n	80015d0 <__aeabi_dmul+0xac>
 8001aac:	000007ff 	.word	0x000007ff
 8001ab0:	0000041e 	.word	0x0000041e

08001ab4 <__aeabi_i2d>:
 8001ab4:	b570      	push	{r4, r5, r6, lr}
 8001ab6:	2800      	cmp	r0, #0
 8001ab8:	d016      	beq.n	8001ae8 <__aeabi_i2d+0x34>
 8001aba:	17c3      	asrs	r3, r0, #31
 8001abc:	18c5      	adds	r5, r0, r3
 8001abe:	405d      	eors	r5, r3
 8001ac0:	0fc4      	lsrs	r4, r0, #31
 8001ac2:	0028      	movs	r0, r5
 8001ac4:	f000 f8f0 	bl	8001ca8 <__clzsi2>
 8001ac8:	4b10      	ldr	r3, [pc, #64]	@ (8001b0c <__aeabi_i2d+0x58>)
 8001aca:	1a1b      	subs	r3, r3, r0
 8001acc:	055b      	lsls	r3, r3, #21
 8001ace:	0d5b      	lsrs	r3, r3, #21
 8001ad0:	280a      	cmp	r0, #10
 8001ad2:	dc14      	bgt.n	8001afe <__aeabi_i2d+0x4a>
 8001ad4:	0002      	movs	r2, r0
 8001ad6:	002e      	movs	r6, r5
 8001ad8:	3215      	adds	r2, #21
 8001ada:	4096      	lsls	r6, r2
 8001adc:	220b      	movs	r2, #11
 8001ade:	1a12      	subs	r2, r2, r0
 8001ae0:	40d5      	lsrs	r5, r2
 8001ae2:	032d      	lsls	r5, r5, #12
 8001ae4:	0b2d      	lsrs	r5, r5, #12
 8001ae6:	e003      	b.n	8001af0 <__aeabi_i2d+0x3c>
 8001ae8:	2400      	movs	r4, #0
 8001aea:	2300      	movs	r3, #0
 8001aec:	2500      	movs	r5, #0
 8001aee:	2600      	movs	r6, #0
 8001af0:	051b      	lsls	r3, r3, #20
 8001af2:	432b      	orrs	r3, r5
 8001af4:	07e4      	lsls	r4, r4, #31
 8001af6:	4323      	orrs	r3, r4
 8001af8:	0030      	movs	r0, r6
 8001afa:	0019      	movs	r1, r3
 8001afc:	bd70      	pop	{r4, r5, r6, pc}
 8001afe:	380b      	subs	r0, #11
 8001b00:	4085      	lsls	r5, r0
 8001b02:	032d      	lsls	r5, r5, #12
 8001b04:	2600      	movs	r6, #0
 8001b06:	0b2d      	lsrs	r5, r5, #12
 8001b08:	e7f2      	b.n	8001af0 <__aeabi_i2d+0x3c>
 8001b0a:	46c0      	nop			@ (mov r8, r8)
 8001b0c:	0000041e 	.word	0x0000041e

08001b10 <__aeabi_f2d>:
 8001b10:	b570      	push	{r4, r5, r6, lr}
 8001b12:	0242      	lsls	r2, r0, #9
 8001b14:	0043      	lsls	r3, r0, #1
 8001b16:	0fc4      	lsrs	r4, r0, #31
 8001b18:	20fe      	movs	r0, #254	@ 0xfe
 8001b1a:	0e1b      	lsrs	r3, r3, #24
 8001b1c:	1c59      	adds	r1, r3, #1
 8001b1e:	0a55      	lsrs	r5, r2, #9
 8001b20:	4208      	tst	r0, r1
 8001b22:	d00c      	beq.n	8001b3e <__aeabi_f2d+0x2e>
 8001b24:	21e0      	movs	r1, #224	@ 0xe0
 8001b26:	0089      	lsls	r1, r1, #2
 8001b28:	468c      	mov	ip, r1
 8001b2a:	076d      	lsls	r5, r5, #29
 8001b2c:	0b12      	lsrs	r2, r2, #12
 8001b2e:	4463      	add	r3, ip
 8001b30:	051b      	lsls	r3, r3, #20
 8001b32:	4313      	orrs	r3, r2
 8001b34:	07e4      	lsls	r4, r4, #31
 8001b36:	4323      	orrs	r3, r4
 8001b38:	0028      	movs	r0, r5
 8001b3a:	0019      	movs	r1, r3
 8001b3c:	bd70      	pop	{r4, r5, r6, pc}
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d114      	bne.n	8001b6c <__aeabi_f2d+0x5c>
 8001b42:	2d00      	cmp	r5, #0
 8001b44:	d01b      	beq.n	8001b7e <__aeabi_f2d+0x6e>
 8001b46:	0028      	movs	r0, r5
 8001b48:	f000 f8ae 	bl	8001ca8 <__clzsi2>
 8001b4c:	280a      	cmp	r0, #10
 8001b4e:	dc1c      	bgt.n	8001b8a <__aeabi_f2d+0x7a>
 8001b50:	230b      	movs	r3, #11
 8001b52:	002a      	movs	r2, r5
 8001b54:	1a1b      	subs	r3, r3, r0
 8001b56:	40da      	lsrs	r2, r3
 8001b58:	0003      	movs	r3, r0
 8001b5a:	3315      	adds	r3, #21
 8001b5c:	409d      	lsls	r5, r3
 8001b5e:	4b0e      	ldr	r3, [pc, #56]	@ (8001b98 <__aeabi_f2d+0x88>)
 8001b60:	0312      	lsls	r2, r2, #12
 8001b62:	1a1b      	subs	r3, r3, r0
 8001b64:	055b      	lsls	r3, r3, #21
 8001b66:	0b12      	lsrs	r2, r2, #12
 8001b68:	0d5b      	lsrs	r3, r3, #21
 8001b6a:	e7e1      	b.n	8001b30 <__aeabi_f2d+0x20>
 8001b6c:	2d00      	cmp	r5, #0
 8001b6e:	d009      	beq.n	8001b84 <__aeabi_f2d+0x74>
 8001b70:	0b13      	lsrs	r3, r2, #12
 8001b72:	2280      	movs	r2, #128	@ 0x80
 8001b74:	0312      	lsls	r2, r2, #12
 8001b76:	431a      	orrs	r2, r3
 8001b78:	076d      	lsls	r5, r5, #29
 8001b7a:	4b08      	ldr	r3, [pc, #32]	@ (8001b9c <__aeabi_f2d+0x8c>)
 8001b7c:	e7d8      	b.n	8001b30 <__aeabi_f2d+0x20>
 8001b7e:	2300      	movs	r3, #0
 8001b80:	2200      	movs	r2, #0
 8001b82:	e7d5      	b.n	8001b30 <__aeabi_f2d+0x20>
 8001b84:	2200      	movs	r2, #0
 8001b86:	4b05      	ldr	r3, [pc, #20]	@ (8001b9c <__aeabi_f2d+0x8c>)
 8001b88:	e7d2      	b.n	8001b30 <__aeabi_f2d+0x20>
 8001b8a:	0003      	movs	r3, r0
 8001b8c:	002a      	movs	r2, r5
 8001b8e:	3b0b      	subs	r3, #11
 8001b90:	409a      	lsls	r2, r3
 8001b92:	2500      	movs	r5, #0
 8001b94:	e7e3      	b.n	8001b5e <__aeabi_f2d+0x4e>
 8001b96:	46c0      	nop			@ (mov r8, r8)
 8001b98:	00000389 	.word	0x00000389
 8001b9c:	000007ff 	.word	0x000007ff

08001ba0 <__aeabi_d2f>:
 8001ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ba2:	004b      	lsls	r3, r1, #1
 8001ba4:	030f      	lsls	r7, r1, #12
 8001ba6:	0d5b      	lsrs	r3, r3, #21
 8001ba8:	4c3b      	ldr	r4, [pc, #236]	@ (8001c98 <__aeabi_d2f+0xf8>)
 8001baa:	0f45      	lsrs	r5, r0, #29
 8001bac:	b083      	sub	sp, #12
 8001bae:	0a7f      	lsrs	r7, r7, #9
 8001bb0:	1c5e      	adds	r6, r3, #1
 8001bb2:	432f      	orrs	r7, r5
 8001bb4:	9000      	str	r0, [sp, #0]
 8001bb6:	9101      	str	r1, [sp, #4]
 8001bb8:	0fca      	lsrs	r2, r1, #31
 8001bba:	00c5      	lsls	r5, r0, #3
 8001bbc:	4226      	tst	r6, r4
 8001bbe:	d00b      	beq.n	8001bd8 <__aeabi_d2f+0x38>
 8001bc0:	4936      	ldr	r1, [pc, #216]	@ (8001c9c <__aeabi_d2f+0xfc>)
 8001bc2:	185c      	adds	r4, r3, r1
 8001bc4:	2cfe      	cmp	r4, #254	@ 0xfe
 8001bc6:	dd13      	ble.n	8001bf0 <__aeabi_d2f+0x50>
 8001bc8:	20ff      	movs	r0, #255	@ 0xff
 8001bca:	2300      	movs	r3, #0
 8001bcc:	05c0      	lsls	r0, r0, #23
 8001bce:	4318      	orrs	r0, r3
 8001bd0:	07d2      	lsls	r2, r2, #31
 8001bd2:	4310      	orrs	r0, r2
 8001bd4:	b003      	add	sp, #12
 8001bd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d102      	bne.n	8001be2 <__aeabi_d2f+0x42>
 8001bdc:	2000      	movs	r0, #0
 8001bde:	2300      	movs	r3, #0
 8001be0:	e7f4      	b.n	8001bcc <__aeabi_d2f+0x2c>
 8001be2:	433d      	orrs	r5, r7
 8001be4:	d0f0      	beq.n	8001bc8 <__aeabi_d2f+0x28>
 8001be6:	2380      	movs	r3, #128	@ 0x80
 8001be8:	03db      	lsls	r3, r3, #15
 8001bea:	20ff      	movs	r0, #255	@ 0xff
 8001bec:	433b      	orrs	r3, r7
 8001bee:	e7ed      	b.n	8001bcc <__aeabi_d2f+0x2c>
 8001bf0:	2c00      	cmp	r4, #0
 8001bf2:	dd14      	ble.n	8001c1e <__aeabi_d2f+0x7e>
 8001bf4:	9b00      	ldr	r3, [sp, #0]
 8001bf6:	00ff      	lsls	r7, r7, #3
 8001bf8:	019b      	lsls	r3, r3, #6
 8001bfa:	1e58      	subs	r0, r3, #1
 8001bfc:	4183      	sbcs	r3, r0
 8001bfe:	0f69      	lsrs	r1, r5, #29
 8001c00:	433b      	orrs	r3, r7
 8001c02:	430b      	orrs	r3, r1
 8001c04:	0759      	lsls	r1, r3, #29
 8001c06:	d041      	beq.n	8001c8c <__aeabi_d2f+0xec>
 8001c08:	210f      	movs	r1, #15
 8001c0a:	4019      	ands	r1, r3
 8001c0c:	2904      	cmp	r1, #4
 8001c0e:	d028      	beq.n	8001c62 <__aeabi_d2f+0xc2>
 8001c10:	3304      	adds	r3, #4
 8001c12:	0159      	lsls	r1, r3, #5
 8001c14:	d525      	bpl.n	8001c62 <__aeabi_d2f+0xc2>
 8001c16:	3401      	adds	r4, #1
 8001c18:	2300      	movs	r3, #0
 8001c1a:	b2e0      	uxtb	r0, r4
 8001c1c:	e7d6      	b.n	8001bcc <__aeabi_d2f+0x2c>
 8001c1e:	0021      	movs	r1, r4
 8001c20:	3117      	adds	r1, #23
 8001c22:	dbdb      	blt.n	8001bdc <__aeabi_d2f+0x3c>
 8001c24:	2180      	movs	r1, #128	@ 0x80
 8001c26:	201e      	movs	r0, #30
 8001c28:	0409      	lsls	r1, r1, #16
 8001c2a:	4339      	orrs	r1, r7
 8001c2c:	1b00      	subs	r0, r0, r4
 8001c2e:	281f      	cmp	r0, #31
 8001c30:	dd1b      	ble.n	8001c6a <__aeabi_d2f+0xca>
 8001c32:	2602      	movs	r6, #2
 8001c34:	4276      	negs	r6, r6
 8001c36:	1b34      	subs	r4, r6, r4
 8001c38:	000e      	movs	r6, r1
 8001c3a:	40e6      	lsrs	r6, r4
 8001c3c:	0034      	movs	r4, r6
 8001c3e:	2820      	cmp	r0, #32
 8001c40:	d004      	beq.n	8001c4c <__aeabi_d2f+0xac>
 8001c42:	4817      	ldr	r0, [pc, #92]	@ (8001ca0 <__aeabi_d2f+0x100>)
 8001c44:	4684      	mov	ip, r0
 8001c46:	4463      	add	r3, ip
 8001c48:	4099      	lsls	r1, r3
 8001c4a:	430d      	orrs	r5, r1
 8001c4c:	002b      	movs	r3, r5
 8001c4e:	1e59      	subs	r1, r3, #1
 8001c50:	418b      	sbcs	r3, r1
 8001c52:	4323      	orrs	r3, r4
 8001c54:	0759      	lsls	r1, r3, #29
 8001c56:	d015      	beq.n	8001c84 <__aeabi_d2f+0xe4>
 8001c58:	210f      	movs	r1, #15
 8001c5a:	2400      	movs	r4, #0
 8001c5c:	4019      	ands	r1, r3
 8001c5e:	2904      	cmp	r1, #4
 8001c60:	d117      	bne.n	8001c92 <__aeabi_d2f+0xf2>
 8001c62:	019b      	lsls	r3, r3, #6
 8001c64:	0a5b      	lsrs	r3, r3, #9
 8001c66:	b2e0      	uxtb	r0, r4
 8001c68:	e7b0      	b.n	8001bcc <__aeabi_d2f+0x2c>
 8001c6a:	4c0e      	ldr	r4, [pc, #56]	@ (8001ca4 <__aeabi_d2f+0x104>)
 8001c6c:	191c      	adds	r4, r3, r4
 8001c6e:	002b      	movs	r3, r5
 8001c70:	40a5      	lsls	r5, r4
 8001c72:	40c3      	lsrs	r3, r0
 8001c74:	40a1      	lsls	r1, r4
 8001c76:	1e68      	subs	r0, r5, #1
 8001c78:	4185      	sbcs	r5, r0
 8001c7a:	4329      	orrs	r1, r5
 8001c7c:	430b      	orrs	r3, r1
 8001c7e:	2400      	movs	r4, #0
 8001c80:	0759      	lsls	r1, r3, #29
 8001c82:	d1c1      	bne.n	8001c08 <__aeabi_d2f+0x68>
 8001c84:	019b      	lsls	r3, r3, #6
 8001c86:	2000      	movs	r0, #0
 8001c88:	0a5b      	lsrs	r3, r3, #9
 8001c8a:	e79f      	b.n	8001bcc <__aeabi_d2f+0x2c>
 8001c8c:	08db      	lsrs	r3, r3, #3
 8001c8e:	b2e0      	uxtb	r0, r4
 8001c90:	e79c      	b.n	8001bcc <__aeabi_d2f+0x2c>
 8001c92:	3304      	adds	r3, #4
 8001c94:	e7e5      	b.n	8001c62 <__aeabi_d2f+0xc2>
 8001c96:	46c0      	nop			@ (mov r8, r8)
 8001c98:	000007fe 	.word	0x000007fe
 8001c9c:	fffffc80 	.word	0xfffffc80
 8001ca0:	fffffca2 	.word	0xfffffca2
 8001ca4:	fffffc82 	.word	0xfffffc82

08001ca8 <__clzsi2>:
 8001ca8:	211c      	movs	r1, #28
 8001caa:	2301      	movs	r3, #1
 8001cac:	041b      	lsls	r3, r3, #16
 8001cae:	4298      	cmp	r0, r3
 8001cb0:	d301      	bcc.n	8001cb6 <__clzsi2+0xe>
 8001cb2:	0c00      	lsrs	r0, r0, #16
 8001cb4:	3910      	subs	r1, #16
 8001cb6:	0a1b      	lsrs	r3, r3, #8
 8001cb8:	4298      	cmp	r0, r3
 8001cba:	d301      	bcc.n	8001cc0 <__clzsi2+0x18>
 8001cbc:	0a00      	lsrs	r0, r0, #8
 8001cbe:	3908      	subs	r1, #8
 8001cc0:	091b      	lsrs	r3, r3, #4
 8001cc2:	4298      	cmp	r0, r3
 8001cc4:	d301      	bcc.n	8001cca <__clzsi2+0x22>
 8001cc6:	0900      	lsrs	r0, r0, #4
 8001cc8:	3904      	subs	r1, #4
 8001cca:	a202      	add	r2, pc, #8	@ (adr r2, 8001cd4 <__clzsi2+0x2c>)
 8001ccc:	5c10      	ldrb	r0, [r2, r0]
 8001cce:	1840      	adds	r0, r0, r1
 8001cd0:	4770      	bx	lr
 8001cd2:	46c0      	nop			@ (mov r8, r8)
 8001cd4:	02020304 	.word	0x02020304
 8001cd8:	01010101 	.word	0x01010101
	...

08001ce4 <__clzdi2>:
 8001ce4:	b510      	push	{r4, lr}
 8001ce6:	2900      	cmp	r1, #0
 8001ce8:	d103      	bne.n	8001cf2 <__clzdi2+0xe>
 8001cea:	f7ff ffdd 	bl	8001ca8 <__clzsi2>
 8001cee:	3020      	adds	r0, #32
 8001cf0:	e002      	b.n	8001cf8 <__clzdi2+0x14>
 8001cf2:	0008      	movs	r0, r1
 8001cf4:	f7ff ffd8 	bl	8001ca8 <__clzsi2>
 8001cf8:	bd10      	pop	{r4, pc}
 8001cfa:	46c0      	nop			@ (mov r8, r8)

08001cfc <IN12_set>:
//void IN12_set_digit_pairs(uint16_t first_number, uint16_t second_number) {
//	IN12_set(first_number/10, first_number%10, second_number/10, second_number%10);
//}

void IN12_set(void) {
	OUTPUT_DISABLE();
 8001cfc:	20a0      	movs	r0, #160	@ 0xa0
void IN12_set(void) {
 8001cfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

//	shift_reg_send(clock_data.bitmask.tube[3]);
//	shift_reg_send(clock_data.bitmask.tube[2]);
//	shift_reg_send(clock_data.bitmask.tube[1]);
//	shift_reg_send(clock_data.bitmask.tube[0]);
	shift_reg_send(clock_data.bitmask.fused);
 8001d00:	243f      	movs	r4, #63	@ 0x3f
		DATA_SET((data >> bit) & 1);
 8001d02:	2501      	movs	r5, #1
	OUTPUT_DISABLE();
 8001d04:	2201      	movs	r2, #1
 8001d06:	2180      	movs	r1, #128	@ 0x80
 8001d08:	05c0      	lsls	r0, r0, #23
 8001d0a:	f001 fe29 	bl	8003960 <HAL_GPIO_WritePin>
	shift_reg_send(clock_data.bitmask.fused);
 8001d0e:	4b16      	ldr	r3, [pc, #88]	@ (8001d68 <IN12_set+0x6c>)
 8001d10:	6b1e      	ldr	r6, [r3, #48]	@ 0x30
 8001d12:	6b5f      	ldr	r7, [r3, #52]	@ 0x34
		DATA_SET((data >> bit) & 1);
 8001d14:	0022      	movs	r2, r4
 8001d16:	0030      	movs	r0, r6
 8001d18:	0039      	movs	r1, r7
 8001d1a:	f7fe fb75 	bl	8000408 <__aeabi_llsr>
 8001d1e:	0002      	movs	r2, r0
 8001d20:	20a0      	movs	r0, #160	@ 0xa0
 8001d22:	2140      	movs	r1, #64	@ 0x40
 8001d24:	402a      	ands	r2, r5
 8001d26:	05c0      	lsls	r0, r0, #23
 8001d28:	f001 fe1a 	bl	8003960 <HAL_GPIO_WritePin>
	SHIFT_REG_SET(1);
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	2102      	movs	r1, #2
 8001d30:	480e      	ldr	r0, [pc, #56]	@ (8001d6c <IN12_set+0x70>)
 8001d32:	f001 fe15 	bl	8003960 <HAL_GPIO_WritePin>
	SHIFT_REG_SET(0);
 8001d36:	2200      	movs	r2, #0
 8001d38:	2102      	movs	r1, #2
 8001d3a:	480c      	ldr	r0, [pc, #48]	@ (8001d6c <IN12_set+0x70>)
 8001d3c:	f001 fe10 	bl	8003960 <HAL_GPIO_WritePin>
	for (int8_t bit = 63; bit >= 0; --bit) {	// Send least significant bit first
 8001d40:	3c01      	subs	r4, #1
 8001d42:	d2e7      	bcs.n	8001d14 <IN12_set+0x18>
	STORAGE_REG_SET(1);
 8001d44:	2201      	movs	r2, #1
 8001d46:	0011      	movs	r1, r2
 8001d48:	4808      	ldr	r0, [pc, #32]	@ (8001d6c <IN12_set+0x70>)
 8001d4a:	f001 fe09 	bl	8003960 <HAL_GPIO_WritePin>
	STORAGE_REG_SET(0);
 8001d4e:	2200      	movs	r2, #0
 8001d50:	2101      	movs	r1, #1
 8001d52:	4806      	ldr	r0, [pc, #24]	@ (8001d6c <IN12_set+0x70>)
 8001d54:	f001 fe04 	bl	8003960 <HAL_GPIO_WritePin>
	/*
	 * Toggle latch
	 */
	shift_reg_pulse_rclk(PULSE_DURATION_MS);

	OUTPUT_ENABLE();
 8001d58:	20a0      	movs	r0, #160	@ 0xa0
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	2180      	movs	r1, #128	@ 0x80
 8001d5e:	05c0      	lsls	r0, r0, #23
 8001d60:	f001 fdfe 	bl	8003960 <HAL_GPIO_WritePin>
}
 8001d64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d66:	46c0      	nop			@ (mov r8, r8)
 8001d68:	200008d8 	.word	0x200008d8
 8001d6c:	50000400 	.word	0x50000400

08001d70 <bitmask_set>:

void bitmask_set(void) {
 8001d70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	memset(clock_data.is_digit_on, 0, sizeof(bool)*NUM_OF_TUBES*NUM_OF_DIGITS);
 8001d72:	4e22      	ldr	r6, [pc, #136]	@ (8001dfc <bitmask_set+0x8c>)
 8001d74:	2228      	movs	r2, #40	@ 0x28
 8001d76:	2100      	movs	r1, #0
 8001d78:	0030      	movs	r0, r6
 8001d7a:	f003 fe81 	bl	8005a80 <memset>
	clock_data.bitmask.fused = 0;
 8001d7e:	2200      	movs	r2, #0
 8001d80:	2300      	movs	r3, #0
 8001d82:	4c1f      	ldr	r4, [pc, #124]	@ (8001e00 <bitmask_set+0x90>)
//	digit[4] = {
//			*clock_data.first_number,
//			*clock_data.first_number,
//	};

	clock_data.is_digit_on[0][GET_MOST_SIGNIFICANT_DIGIT(*clock_data.first_number)] 	= true;
 8001d84:	210a      	movs	r1, #10
	clock_data.bitmask.fused = 0;
 8001d86:	6322      	str	r2, [r4, #48]	@ 0x30
 8001d88:	6363      	str	r3, [r4, #52]	@ 0x34
	clock_data.is_digit_on[0][GET_MOST_SIGNIFICANT_DIGIT(*clock_data.first_number)] 	= true;
 8001d8a:	6823      	ldr	r3, [r4, #0]
 8001d8c:	2501      	movs	r5, #1
 8001d8e:	881f      	ldrh	r7, [r3, #0]
 8001d90:	0038      	movs	r0, r7
 8001d92:	f7fe f9c3 	bl	800011c <__udivsi3>
 8001d96:	b2c0      	uxtb	r0, r0
 8001d98:	1820      	adds	r0, r4, r0
 8001d9a:	7205      	strb	r5, [r0, #8]
	clock_data.is_digit_on[1][GET_LEAST_SIGNIFICANT_DIGIT(*clock_data.first_number)] 	= true;
 8001d9c:	210a      	movs	r1, #10
 8001d9e:	0038      	movs	r0, r7
 8001da0:	f7fe fa42 	bl	8000228 <__aeabi_uidivmod>
	clock_data.is_digit_on[2][GET_MOST_SIGNIFICANT_DIGIT(*clock_data.second_number)] 	= true;
 8001da4:	6863      	ldr	r3, [r4, #4]
	clock_data.is_digit_on[1][GET_LEAST_SIGNIFICANT_DIGIT(*clock_data.first_number)] 	= true;
 8001da6:	b289      	uxth	r1, r1
	clock_data.is_digit_on[2][GET_MOST_SIGNIFICANT_DIGIT(*clock_data.second_number)] 	= true;
 8001da8:	881f      	ldrh	r7, [r3, #0]
	clock_data.is_digit_on[1][GET_LEAST_SIGNIFICANT_DIGIT(*clock_data.first_number)] 	= true;
 8001daa:	1861      	adds	r1, r4, r1
 8001dac:	748d      	strb	r5, [r1, #18]
	clock_data.is_digit_on[2][GET_MOST_SIGNIFICANT_DIGIT(*clock_data.second_number)] 	= true;
 8001dae:	0038      	movs	r0, r7
 8001db0:	210a      	movs	r1, #10
 8001db2:	f7fe f9b3 	bl	800011c <__udivsi3>
 8001db6:	b2c0      	uxtb	r0, r0
 8001db8:	1820      	adds	r0, r4, r0
 8001dba:	7705      	strb	r5, [r0, #28]
	clock_data.is_digit_on[3][GET_LEAST_SIGNIFICANT_DIGIT(*clock_data.second_number)] 	= true;
 8001dbc:	210a      	movs	r1, #10
 8001dbe:	0038      	movs	r0, r7
 8001dc0:	f7fe fa32 	bl	8000228 <__aeabi_uidivmod>
 8001dc4:	b289      	uxth	r1, r1
 8001dc6:	1861      	adds	r1, r4, r1
 8001dc8:	3107      	adds	r1, #7
 8001dca:	77cd      	strb	r5, [r1, #31]
 8001dcc:	2100      	movs	r1, #0

	for (int t = 0; t < NUM_OF_TUBES; ++t) {
		for (int d = 0; d < NUM_OF_DIGITS; ++d) {
			clock_data.bitmask.tube[t] |= digit_bitmask[d]*clock_data.is_digit_on[t][d];
 8001dce:	4d0d      	ldr	r5, [pc, #52]	@ (8001e04 <bitmask_set+0x94>)
		for (int d = 0; d < NUM_OF_DIGITS; ++d) {
 8001dd0:	2300      	movs	r3, #0
			clock_data.bitmask.tube[t] |= digit_bitmask[d]*clock_data.is_digit_on[t][d];
 8001dd2:	1872      	adds	r2, r6, r1
 8001dd4:	8e27      	ldrh	r7, [r4, #48]	@ 0x30
 8001dd6:	9201      	str	r2, [sp, #4]
 8001dd8:	9a01      	ldr	r2, [sp, #4]
 8001dda:	5cd2      	ldrb	r2, [r2, r3]
 8001ddc:	0010      	movs	r0, r2
 8001dde:	005a      	lsls	r2, r3, #1
 8001de0:	5aaa      	ldrh	r2, [r5, r2]
		for (int d = 0; d < NUM_OF_DIGITS; ++d) {
 8001de2:	3301      	adds	r3, #1
			clock_data.bitmask.tube[t] |= digit_bitmask[d]*clock_data.is_digit_on[t][d];
 8001de4:	4350      	muls	r0, r2
 8001de6:	4307      	orrs	r7, r0
 8001de8:	b2bf      	uxth	r7, r7
		for (int d = 0; d < NUM_OF_DIGITS; ++d) {
 8001dea:	2b0a      	cmp	r3, #10
 8001dec:	d1f4      	bne.n	8001dd8 <bitmask_set+0x68>
	for (int t = 0; t < NUM_OF_TUBES; ++t) {
 8001dee:	310a      	adds	r1, #10
 8001df0:	8627      	strh	r7, [r4, #48]	@ 0x30
 8001df2:	3402      	adds	r4, #2
 8001df4:	2928      	cmp	r1, #40	@ 0x28
 8001df6:	d1eb      	bne.n	8001dd0 <bitmask_set+0x60>
		}
	}
}
 8001df8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8001dfa:	46c0      	nop			@ (mov r8, r8)
 8001dfc:	200008e0 	.word	0x200008e0
 8001e00:	200008d8 	.word	0x200008d8
 8001e04:	08006554 	.word	0x08006554

08001e08 <time_update>:

void time_update(void) {
 8001e08:	b510      	push	{r4, lr}
	// Need to stop PWM first so there is no flickering
	rtc_time.Hours 		= DS3231_GetHour();
 8001e0a:	f001 fa02 	bl	8003212 <DS3231_GetHour>
 8001e0e:	4c04      	ldr	r4, [pc, #16]	@ (8001e20 <time_update+0x18>)
 8001e10:	7020      	strb	r0, [r4, #0]
	rtc_time.Minutes 	= DS3231_GetMinute();
 8001e12:	f001 fa05 	bl	8003220 <DS3231_GetMinute>
 8001e16:	7060      	strb	r0, [r4, #1]
	rtc_time.Seconds 	= DS3231_GetSecond();
 8001e18:	f001 fa09 	bl	800322e <DS3231_GetSecond>
 8001e1c:	70a0      	strb	r0, [r4, #2]


}
 8001e1e:	bd10      	pop	{r4, pc}
 8001e20:	20000920 	.word	0x20000920

08001e24 <IN12_init>:
	rtc_date.Month 		= DS3231_GetMonth();
	rtc_date.Date 		= DS3231_GetDate();
	rtc_date.WeekDay 	= DS3231_GetDayOfWeek();
}

void IN12_init(void) {
 8001e24:	b510      	push	{r4, lr}
	if(DS3231_IsOscillatorStopped()) {
 8001e26:	f001 f9b9 	bl	800319c <DS3231_IsOscillatorStopped>
 8001e2a:	2800      	cmp	r0, #0
 8001e2c:	d007      	beq.n	8001e3e <IN12_init+0x1a>
		// todo: go to the "time set mode" automaticaly
		DS3231_SetFullTime(12, 34, 56);
 8001e2e:	200c      	movs	r0, #12
 8001e30:	2238      	movs	r2, #56	@ 0x38
 8001e32:	2122      	movs	r1, #34	@ 0x22
 8001e34:	f001 fa65 	bl	8003302 <DS3231_SetFullTime>
		DS3231_EnableOscillator(DS3231_ENABLED);
 8001e38:	2001      	movs	r0, #1
 8001e3a:	f001 f954 	bl	80030e6 <DS3231_EnableOscillator>
	}

	time_update();
 8001e3e:	f7ff ffe3 	bl	8001e08 <time_update>
	rtc_date.Year 		= DS3231_GetYear();
 8001e42:	f001 f9d2 	bl	80031ea <DS3231_GetYear>
 8001e46:	4c06      	ldr	r4, [pc, #24]	@ (8001e60 <IN12_init+0x3c>)
 8001e48:	70e0      	strb	r0, [r4, #3]
	rtc_date.Month 		= DS3231_GetMonth();
 8001e4a:	f001 f9c5 	bl	80031d8 <DS3231_GetMonth>
 8001e4e:	7060      	strb	r0, [r4, #1]
	rtc_date.Date 		= DS3231_GetDate();
 8001e50:	f001 f9bb 	bl	80031ca <DS3231_GetDate>
 8001e54:	70a0      	strb	r0, [r4, #2]
	rtc_date.WeekDay 	= DS3231_GetDayOfWeek();
 8001e56:	f001 f9b1 	bl	80031bc <DS3231_GetDayOfWeek>
 8001e5a:	7020      	strb	r0, [r4, #0]
	date_update();
}
 8001e5c:	bd10      	pop	{r4, pc}
 8001e5e:	46c0      	nop			@ (mov r8, r8)
 8001e60:	2000091b 	.word	0x2000091b

08001e64 <tubes_data_source_set>:

void tubes_data_source_set(uint16_t* first_number_src, uint16_t* second_number_src) {
	clock_data.first_number = first_number_src;
 8001e64:	4b01      	ldr	r3, [pc, #4]	@ (8001e6c <tubes_data_source_set+0x8>)
	clock_data.second_number = second_number_src;
 8001e66:	c303      	stmia	r3!, {r0, r1}
}
 8001e68:	4770      	bx	lr
 8001e6a:	46c0      	nop			@ (mov r8, r8)
 8001e6c:	200008d8 	.word	0x200008d8

08001e70 <btns_init>:


/*
 * @brief	Set defaults, add timer handle and start it
 */
HAL_StatusTypeDef btns_init(Buttons_HandleTypeDef *hbtns, Button_InitTypeDef user_buttons[], uint8_t num_of_buttons, TIM_HandleTypeDef *htim, State_TypeDef default_state) {
 8001e70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001e72:	9200      	str	r2, [sp, #0]
 8001e74:	aa08      	add	r2, sp, #32
 8001e76:	7812      	ldrb	r2, [r2, #0]
 8001e78:	0004      	movs	r4, r0
 8001e7a:	9201      	str	r2, [sp, #4]
	assert_param(hbtns 			== NULL);
	assert_param(user_buttons 	== NULL);
	assert_param(htim 			== NULL);

	if(num_of_buttons > MAX_NUMBER_OF_BUTTONS)
 8001e7c:	9a00      	ldr	r2, [sp, #0]
HAL_StatusTypeDef btns_init(Buttons_HandleTypeDef *hbtns, Button_InitTypeDef user_buttons[], uint8_t num_of_buttons, TIM_HandleTypeDef *htim, State_TypeDef default_state) {
 8001e7e:	000d      	movs	r5, r1
		return HAL_ERROR;
 8001e80:	2001      	movs	r0, #1
	if(num_of_buttons > MAX_NUMBER_OF_BUTTONS)
 8001e82:	2a0f      	cmp	r2, #15
 8001e84:	d834      	bhi.n	8001ef0 <btns_init+0x80>

	hbtns->num_of_buttons	= num_of_buttons;
 8001e86:	22f0      	movs	r2, #240	@ 0xf0
 8001e88:	0026      	movs	r6, r4
	hbtns->htim 			= htim;										// Set dedicated to buttons timer

	/*
	 * Register button parameters and fill additional fields
	 */
	for(int id = 0; id < num_of_buttons; ++id) {
 8001e8a:	2700      	movs	r7, #0
	hbtns->num_of_buttons	= num_of_buttons;
 8001e8c:	9900      	ldr	r1, [sp, #0]
 8001e8e:	0052      	lsls	r2, r2, #1
 8001e90:	54a1      	strb	r1, [r4, r2]
	hbtns->htim 			= htim;										// Set dedicated to buttons timer
 8001e92:	3208      	adds	r2, #8
 8001e94:	50a3      	str	r3, [r4, r2]
	for(int id = 0; id < num_of_buttons; ++id) {
 8001e96:	9b00      	ldr	r3, [sp, #0]
 8001e98:	42bb      	cmp	r3, r7
 8001e9a:	dc2a      	bgt.n	8001ef2 <btns_init+0x82>
	hbtns->pressed_btns_mask	= 0; 			// Reset buttons mask
 8001e9c:	23f1      	movs	r3, #241	@ 0xf1
 8001e9e:	2600      	movs	r6, #0
	hbtns->state_current		= new_state;
 8001ea0:	9a01      	ldr	r2, [sp, #4]
	hbtns->pressed_btns_mask	= 0; 			// Reset buttons mask
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	52e6      	strh	r6, [r4, r3]
	hbtns->state_current		= new_state;
 8001ea6:	3302      	adds	r3, #2
 8001ea8:	54e2      	strb	r2, [r4, r3]
	hbtns->state_previous		= new_state;
 8001eaa:	23e6      	movs	r3, #230	@ 0xe6
	btns_state_set(hbtns, default_state);

	/*
	 * Set max count for long presses, e.g. 1000ms/50ms = 20
	 */
	hold_1s_cnt 	= 1000/hbtns->htim->Init.Period;
 8001eac:	25f4      	movs	r5, #244	@ 0xf4
 8001eae:	20fa      	movs	r0, #250	@ 0xfa
	hbtns->state_previous		= new_state;
 8001eb0:	33ff      	adds	r3, #255	@ 0xff
 8001eb2:	54e2      	strb	r2, [r4, r3]
	hbtns->hold_s		= 0;
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	54e6      	strb	r6, [r4, r3]
	hold_1s_cnt 	= 1000/hbtns->htim->Init.Period;
 8001eb8:	006d      	lsls	r5, r5, #1
 8001eba:	5967      	ldr	r7, [r4, r5]
 8001ebc:	0080      	lsls	r0, r0, #2
 8001ebe:	68f9      	ldr	r1, [r7, #12]
 8001ec0:	f7fe f92c 	bl	800011c <__udivsi3>
 8001ec4:	4b15      	ldr	r3, [pc, #84]	@ (8001f1c <btns_init+0xac>)
 8001ec6:	7018      	strb	r0, [r3, #0]
	HAL_TIM_StateTypeDef timer_status = HAL_TIM_Base_GetState(hbtns->htim);
 8001ec8:	0038      	movs	r0, r7
 8001eca:	f003 fa1e 	bl	800530a <HAL_TIM_Base_GetState>
	if (timer_status == HAL_TIM_STATE_READY) {
 8001ece:	2801      	cmp	r0, #1
 8001ed0:	d10e      	bne.n	8001ef0 <btns_init+0x80>
		FIX_TIMER_TRIGGER(hbtns->htim);
 8001ed2:	2202      	movs	r2, #2
 8001ed4:	5960      	ldr	r0, [r4, r5]
 8001ed6:	4252      	negs	r2, r2
 8001ed8:	6803      	ldr	r3, [r0, #0]
 8001eda:	611a      	str	r2, [r3, #16]
		timer_status += HAL_TIM_Base_Start_IT(hbtns->htim);
 8001edc:	f002 fe7e 	bl	8004bdc <HAL_TIM_Base_Start_IT>
		timer_status += HAL_TIM_OC_Start_IT(hbtns->htim, TIM_CHANNEL_1);
 8001ee0:	0031      	movs	r1, r6
		timer_status += HAL_TIM_Base_Start_IT(hbtns->htim);
 8001ee2:	0007      	movs	r7, r0
		timer_status += HAL_TIM_OC_Start_IT(hbtns->htim, TIM_CHANNEL_1);
 8001ee4:	5960      	ldr	r0, [r4, r5]
 8001ee6:	f002 fea3 	bl	8004c30 <HAL_TIM_OC_Start_IT>
 8001eea:	1838      	adds	r0, r7, r0
 8001eec:	3001      	adds	r0, #1
 8001eee:	b2c0      	uxtb	r0, r0

	/*
	 * Start the timer
	 */
	return btns_timer_start(hbtns);
}
 8001ef0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		strcpy(hbtns->list[id].name, user_buttons[id].name);		// Copy name
 8001ef2:	0029      	movs	r1, r5
 8001ef4:	0030      	movs	r0, r6
 8001ef6:	f003 fdf5 	bl	8005ae4 <strcpy>
		hbtns->list[id].mask			= 1 << id;					// Create unique bitmask
 8001efa:	2301      	movs	r3, #1
 8001efc:	40bb      	lsls	r3, r7
 8001efe:	82b3      	strh	r3, [r6, #20]
		hbtns->list[id].port 			= user_buttons[id].port;
 8001f00:	696b      	ldr	r3, [r5, #20]
	for(int id = 0; id < num_of_buttons; ++id) {
 8001f02:	3701      	adds	r7, #1
		hbtns->list[id].port 			= user_buttons[id].port;
 8001f04:	61b3      	str	r3, [r6, #24]
		hbtns->list[id].pin 			= user_buttons[id].pin;
 8001f06:	8b2b      	ldrh	r3, [r5, #24]
 8001f08:	83b3      	strh	r3, [r6, #28]
		hbtns->list[id].state_active 	= user_buttons[id].state_active;
 8001f0a:	7eab      	ldrb	r3, [r5, #26]
 8001f0c:	351c      	adds	r5, #28
 8001f0e:	77b3      	strb	r3, [r6, #30]
		hbtns->list[id].state 			= user_buttons[id].state_active == GPIO_PIN_SET ? GPIO_PIN_RESET : GPIO_PIN_SET; // By default lvl_en is opposite of active
 8001f10:	3b01      	subs	r3, #1
 8001f12:	1e5a      	subs	r2, r3, #1
 8001f14:	4193      	sbcs	r3, r2
 8001f16:	77f3      	strb	r3, [r6, #31]
	for(int id = 0; id < num_of_buttons; ++id) {
 8001f18:	3620      	adds	r6, #32
 8001f1a:	e7bc      	b.n	8001e96 <btns_init+0x26>
 8001f1c:	20000940 	.word	0x20000940

08001f20 <btns_check>:
void btns_check(Buttons_HandleTypeDef *hbtns) {
 8001f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	hbtns->state_current = RELEASED;
 8001f22:	23f2      	movs	r3, #242	@ 0xf2
 8001f24:	2500      	movs	r5, #0
 8001f26:	0006      	movs	r6, r0
			hbtns->pressed_btns_mask |= hbtns->list[i].mask;
 8001f28:	27f1      	movs	r7, #241	@ 0xf1
void btns_check(Buttons_HandleTypeDef *hbtns) {
 8001f2a:	0004      	movs	r4, r0
	hbtns->state_current = RELEASED;
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	54c5      	strb	r5, [r0, r3]
	for(int i = 0; i < hbtns->num_of_buttons; ++i) {
 8001f30:	3614      	adds	r6, #20
			hbtns->pressed_btns_mask |= hbtns->list[i].mask;
 8001f32:	007f      	lsls	r7, r7, #1
	for(int i = 0; i < hbtns->num_of_buttons; ++i) {
 8001f34:	23f0      	movs	r3, #240	@ 0xf0
 8001f36:	005b      	lsls	r3, r3, #1
 8001f38:	5ce3      	ldrb	r3, [r4, r3]
 8001f3a:	429d      	cmp	r5, r3
 8001f3c:	db14      	blt.n	8001f68 <btns_check+0x48>
	if (hbtns->state_current != hbtns->state_previous) {
 8001f3e:	21f2      	movs	r1, #242	@ 0xf2
 8001f40:	22e6      	movs	r2, #230	@ 0xe6
 8001f42:	0049      	lsls	r1, r1, #1
 8001f44:	32ff      	adds	r2, #255	@ 0xff
 8001f46:	5c63      	ldrb	r3, [r4, r1]
 8001f48:	5ca2      	ldrb	r2, [r4, r2]
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d02b      	beq.n	8001fa6 <btns_check+0x86>
		if (hbtns->state_current == PRESSED) {
 8001f4e:	25f1      	movs	r5, #241	@ 0xf1
 8001f50:	22f3      	movs	r2, #243	@ 0xf3
 8001f52:	006d      	lsls	r5, r5, #1
 8001f54:	0052      	lsls	r2, r2, #1
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d118      	bne.n	8001f8c <btns_check+0x6c>
	hbtns->state_current		= new_state;
 8001f5a:	2002      	movs	r0, #2
	hbtns->pressed_btns_mask	= 0; 			// Reset buttons mask
 8001f5c:	2300      	movs	r3, #0
	hbtns->state_current		= new_state;
 8001f5e:	30ff      	adds	r0, #255	@ 0xff
	hbtns->pressed_btns_mask	= 0; 			// Reset buttons mask
 8001f60:	5363      	strh	r3, [r4, r5]
	hbtns->state_current		= new_state;
 8001f62:	5260      	strh	r0, [r4, r1]
	hbtns->hold_s		= 0;
 8001f64:	54a3      	strb	r3, [r4, r2]
}
 8001f66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		gpio_state = HAL_GPIO_ReadPin(hbtns->list[i].port, hbtns->list[i].pin);
 8001f68:	8931      	ldrh	r1, [r6, #8]
 8001f6a:	6870      	ldr	r0, [r6, #4]
 8001f6c:	f001 fcf2 	bl	8003954 <HAL_GPIO_ReadPin>
		if(gpio_state == hbtns->list[i].state_active) {
 8001f70:	7ab3      	ldrb	r3, [r6, #10]
 8001f72:	4283      	cmp	r3, r0
 8001f74:	d107      	bne.n	8001f86 <btns_check+0x66>
			hbtns->pressed_btns_mask |= hbtns->list[i].mask;
 8001f76:	8832      	ldrh	r2, [r6, #0]
 8001f78:	5be3      	ldrh	r3, [r4, r7]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	53e3      	strh	r3, [r4, r7]
			hbtns->state_current = PRESSED;
 8001f7e:	23f2      	movs	r3, #242	@ 0xf2
 8001f80:	2201      	movs	r2, #1
 8001f82:	005b      	lsls	r3, r3, #1
 8001f84:	54e2      	strb	r2, [r4, r3]
	for(int i = 0; i < hbtns->num_of_buttons; ++i) {
 8001f86:	3501      	adds	r5, #1
 8001f88:	3620      	adds	r6, #32
 8001f8a:	e7d3      	b.n	8001f34 <btns_check+0x14>
			if (hbtns->hold_s < 2) {
 8001f8c:	5ca1      	ldrb	r1, [r4, r2]
 8001f8e:	2901      	cmp	r1, #1
 8001f90:	d802      	bhi.n	8001f98 <btns_check+0x78>
				btns_callback(hbtns->pressed_btns_mask, hbtns->hold_s);
 8001f92:	5b60      	ldrh	r0, [r4, r5]
 8001f94:	f000 f824 	bl	8001fe0 <btns_callback>
	hbtns->state_current		= new_state;
 8001f98:	22f2      	movs	r2, #242	@ 0xf2
	hbtns->pressed_btns_mask	= 0; 			// Reset buttons mask
 8001f9a:	2300      	movs	r3, #0
	hbtns->state_current		= new_state;
 8001f9c:	0052      	lsls	r2, r2, #1
	hbtns->pressed_btns_mask	= 0; 			// Reset buttons mask
 8001f9e:	5363      	strh	r3, [r4, r5]
	hbtns->state_current		= new_state;
 8001fa0:	52a3      	strh	r3, [r4, r2]
	hbtns->hold_s		= 0;
 8001fa2:	3202      	adds	r2, #2
 8001fa4:	e7de      	b.n	8001f64 <btns_check+0x44>
		if(hbtns->state_previous == PRESSED) {
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d1dd      	bne.n	8001f66 <btns_check+0x46>
			if(++cnt > hold_1s_cnt) {
 8001faa:	4a0b      	ldr	r2, [pc, #44]	@ (8001fd8 <btns_check+0xb8>)
 8001fac:	490b      	ldr	r1, [pc, #44]	@ (8001fdc <btns_check+0xbc>)
 8001fae:	7813      	ldrb	r3, [r2, #0]
 8001fb0:	7809      	ldrb	r1, [r1, #0]
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	7013      	strb	r3, [r2, #0]
 8001fb8:	4299      	cmp	r1, r3
 8001fba:	d2d4      	bcs.n	8001f66 <btns_check+0x46>
				cnt = 0;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	7013      	strb	r3, [r2, #0]
				++hbtns->hold_s;
 8001fc0:	33e7      	adds	r3, #231	@ 0xe7
 8001fc2:	33ff      	adds	r3, #255	@ 0xff
 8001fc4:	5ce1      	ldrb	r1, [r4, r3]
 8001fc6:	3101      	adds	r1, #1
 8001fc8:	b2c9      	uxtb	r1, r1
 8001fca:	54e1      	strb	r1, [r4, r3]
				btns_callback(hbtns->pressed_btns_mask, hbtns->hold_s);
 8001fcc:	3b04      	subs	r3, #4
 8001fce:	5ae0      	ldrh	r0, [r4, r3]
 8001fd0:	f000 f806 	bl	8001fe0 <btns_callback>
}
 8001fd4:	e7c7      	b.n	8001f66 <btns_check+0x46>
 8001fd6:	46c0      	nop			@ (mov r8, r8)
 8001fd8:	20000934 	.word	0x20000934
 8001fdc:	20000940 	.word	0x20000940

08001fe0 <btns_callback>:

extern uint8_t duty_cycles[4];


void btns_callback(uint16_t mask, PressType_TypeDef press_type) {
	shared_mask 		= mask;
 8001fe0:	4b02      	ldr	r3, [pc, #8]	@ (8001fec <btns_callback+0xc>)
 8001fe2:	6018      	str	r0, [r3, #0]
	shared_press_type 	= press_type;
 8001fe4:	4b02      	ldr	r3, [pc, #8]	@ (8001ff0 <btns_callback+0x10>)
 8001fe6:	6019      	str	r1, [r3, #0]
}
 8001fe8:	4770      	bx	lr
 8001fea:	46c0      	nop			@ (mov r8, r8)
 8001fec:	2000093c 	.word	0x2000093c
 8001ff0:	20000938 	.word	0x20000938

08001ff4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
	static uint32_t count_50_ms = 0;
	if(htim == &htim2) {
 8001ff4:	4b10      	ldr	r3, [pc, #64]	@ (8002038 <HAL_TIM_PeriodElapsedCallback+0x44>)
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001ff6:	b510      	push	{r4, lr}
 8001ff8:	0004      	movs	r4, r0
	if(htim == &htim2) {
 8001ffa:	4298      	cmp	r0, r3
 8001ffc:	d107      	bne.n	800200e <HAL_TIM_PeriodElapsedCallback+0x1a>
		bitmask_set(); // restore values
 8001ffe:	f7ff feb7 	bl	8001d70 <bitmask_set>
		if(!flag_upd_tubes)
 8002002:	4b0e      	ldr	r3, [pc, #56]	@ (800203c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002004:	781a      	ldrb	r2, [r3, #0]
 8002006:	2a00      	cmp	r2, #0
 8002008:	d101      	bne.n	800200e <HAL_TIM_PeriodElapsedCallback+0x1a>
			flag_upd_tubes = 1;
 800200a:	3201      	adds	r2, #1
 800200c:	701a      	strb	r2, [r3, #0]
	}

	if(htim == &htim21) {
 800200e:	4b0c      	ldr	r3, [pc, #48]	@ (8002040 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002010:	429c      	cmp	r4, r3
 8002012:	d10f      	bne.n	8002034 <HAL_TIM_PeriodElapsedCallback+0x40>
		++count_50_ms;
 8002014:	4a0b      	ldr	r2, [pc, #44]	@ (8002044 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002016:	6813      	ldr	r3, [r2, #0]
 8002018:	3301      	adds	r3, #1
 800201a:	6013      	str	r3, [r2, #0]
		if (count_50_ms >= 20) {
 800201c:	2b13      	cmp	r3, #19
 800201e:	d906      	bls.n	800202e <HAL_TIM_PeriodElapsedCallback+0x3a>
			flag_upd_time = 1;
 8002020:	2101      	movs	r1, #1
 8002022:	4b09      	ldr	r3, [pc, #36]	@ (8002048 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8002024:	7019      	strb	r1, [r3, #0]
			flag_upd_dots = 1;
 8002026:	4b09      	ldr	r3, [pc, #36]	@ (800204c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8002028:	7019      	strb	r1, [r3, #0]
			count_50_ms = 0;
 800202a:	2300      	movs	r3, #0
 800202c:	6013      	str	r3, [r2, #0]
		}
		if (count_50_ms % 1000 == 0) {
		}
		btns_check(&hbtns);
 800202e:	4808      	ldr	r0, [pc, #32]	@ (8002050 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8002030:	f7ff ff76 	bl	8001f20 <btns_check>
	}
}
 8002034:	bd10      	pop	{r4, pc}
 8002036:	46c0      	nop			@ (mov r8, r8)
 8002038:	20000cac 	.word	0x20000cac
 800203c:	2000091a 	.word	0x2000091a
 8002040:	20000c6c 	.word	0x20000c6c
 8002044:	20000944 	.word	0x20000944
 8002048:	20000919 	.word	0x20000919
 800204c:	20000918 	.word	0x20000918
 8002050:	20000958 	.word	0x20000958

08002054 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
	if(htim == &htim2) {
 8002054:	4b11      	ldr	r3, [pc, #68]	@ (800209c <HAL_TIM_PWM_PulseFinishedCallback+0x48>)
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8002056:	b500      	push	{lr}
	if(htim == &htim2) {
 8002058:	4298      	cmp	r0, r3
 800205a:	d112      	bne.n	8002082 <HAL_TIM_PWM_PulseFinishedCallback+0x2e>
		switch (htim->Channel) {
 800205c:	7e00      	ldrb	r0, [r0, #24]
 800205e:	3801      	subs	r0, #1
 8002060:	2807      	cmp	r0, #7
 8002062:	d808      	bhi.n	8002076 <HAL_TIM_PWM_PulseFinishedCallback+0x22>
 8002064:	f7fe f850 	bl	8000108 <__gnu_thumb1_case_uqi>
 8002068:	12070e04 	.word	0x12070e04
 800206c:	16070707 	.word	0x16070707
			case HAL_TIM_ACTIVE_CHANNEL_1: clock_data.bitmask.tube[0] = 0; break;// E.g. "if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {...}"
 8002070:	2200      	movs	r2, #0
 8002072:	4b0b      	ldr	r3, [pc, #44]	@ (80020a0 <HAL_TIM_PWM_PulseFinishedCallback+0x4c>)
 8002074:	861a      	strh	r2, [r3, #48]	@ 0x30
			case HAL_TIM_ACTIVE_CHANNEL_2: clock_data.bitmask.tube[1] = 0; break;
			case HAL_TIM_ACTIVE_CHANNEL_3: clock_data.bitmask.tube[2] = 0; break;
			case HAL_TIM_ACTIVE_CHANNEL_4: clock_data.bitmask.tube[3] = 0; break;
			default: break;
		}
		if(!flag_upd_tubes)
 8002076:	4b0b      	ldr	r3, [pc, #44]	@ (80020a4 <HAL_TIM_PWM_PulseFinishedCallback+0x50>)
 8002078:	781a      	ldrb	r2, [r3, #0]
 800207a:	2a00      	cmp	r2, #0
 800207c:	d101      	bne.n	8002082 <HAL_TIM_PWM_PulseFinishedCallback+0x2e>
			flag_upd_tubes = 1;
 800207e:	3201      	adds	r2, #1
 8002080:	701a      	strb	r2, [r3, #0]
	}
}
 8002082:	bd00      	pop	{pc}
			case HAL_TIM_ACTIVE_CHANNEL_2: clock_data.bitmask.tube[1] = 0; break;
 8002084:	2200      	movs	r2, #0
 8002086:	4b06      	ldr	r3, [pc, #24]	@ (80020a0 <HAL_TIM_PWM_PulseFinishedCallback+0x4c>)
 8002088:	865a      	strh	r2, [r3, #50]	@ 0x32
 800208a:	e7f4      	b.n	8002076 <HAL_TIM_PWM_PulseFinishedCallback+0x22>
			case HAL_TIM_ACTIVE_CHANNEL_3: clock_data.bitmask.tube[2] = 0; break;
 800208c:	2200      	movs	r2, #0
 800208e:	4b04      	ldr	r3, [pc, #16]	@ (80020a0 <HAL_TIM_PWM_PulseFinishedCallback+0x4c>)
 8002090:	869a      	strh	r2, [r3, #52]	@ 0x34
 8002092:	e7f0      	b.n	8002076 <HAL_TIM_PWM_PulseFinishedCallback+0x22>
			case HAL_TIM_ACTIVE_CHANNEL_4: clock_data.bitmask.tube[3] = 0; break;
 8002094:	2200      	movs	r2, #0
 8002096:	4b02      	ldr	r3, [pc, #8]	@ (80020a0 <HAL_TIM_PWM_PulseFinishedCallback+0x4c>)
 8002098:	86da      	strh	r2, [r3, #54]	@ 0x36
 800209a:	e7ec      	b.n	8002076 <HAL_TIM_PWM_PulseFinishedCallback+0x22>
 800209c:	20000cac 	.word	0x20000cac
 80020a0:	200008d8 	.word	0x200008d8
 80020a4:	2000091a 	.word	0x2000091a

080020a8 <update_flags>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void update_flags(void) {
	is_update_battery 			= 0;//hntm.standby.status == OFF && is_battery_value_ready;
 80020a8:	2300      	movs	r3, #0
 80020aa:	4a05      	ldr	r2, [pc, #20]	@ (80020c0 <update_flags+0x18>)
 80020ac:	7013      	strb	r3, [r2, #0]
	is_update_distance 			= 0;//hntm.standby.status == OFF && (hrangefinder.status == DISTANCE_ACQUIRED);
 80020ae:	4a05      	ldr	r2, [pc, #20]	@ (80020c4 <update_flags+0x1c>)
 80020b0:	7013      	strb	r3, [r2, #0]
	is_update_temp_and_press	= 0;//hntm.standby.status == OFF && (auto_pressure == ON || auto_temperature == ON);
 80020b2:	4a05      	ldr	r2, [pc, #20]	@ (80020c8 <update_flags+0x20>)
 80020b4:	7013      	strb	r3, [r2, #0]
	is_update_gui				= 0;//hntm.standby.status == OFF;
 80020b6:	4a05      	ldr	r2, [pc, #20]	@ (80020cc <update_flags+0x24>)
 80020b8:	7013      	strb	r3, [r2, #0]
	is_update_ntm_flags 		= 0;//(!settings.power_saving) && (settings.power_saving_timer > 0);
 80020ba:	4a05      	ldr	r2, [pc, #20]	@ (80020d0 <update_flags+0x28>)
 80020bc:	7013      	strb	r3, [r2, #0]
	//	is_show_menu				= 0;//action != NONE &&
}
 80020be:	4770      	bx	lr
 80020c0:	2000094c 	.word	0x2000094c
 80020c4:	2000094b 	.word	0x2000094b
 80020c8:	2000094a 	.word	0x2000094a
 80020cc:	20000949 	.word	0x20000949
 80020d0:	20000948 	.word	0x20000948

080020d4 <update_running_time>:

static void collapse_menu(void) {
}

static void update_running_time(void) {
}
 80020d4:	4770      	bx	lr

080020d6 <update_ntm_flags>:
}

static void update_hall(void) {
}

static void update_ntm_flags(void) {
 80020d6:	4770      	bx	lr

080020d8 <update_battery>:
static void update_battery(void) {
 80020d8:	4770      	bx	lr

080020da <update_distance>:
static void update_distance(void) {
 80020da:	4770      	bx	lr

080020dc <update_temp_and_press>:
static void update_temp_and_press(void) {
 80020dc:	4770      	bx	lr

080020de <update_angles>:
static void update_angles(void) {
 80020de:	4770      	bx	lr

080020e0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80020e0:	b510      	push	{r4, lr}
 80020e2:	b098      	sub	sp, #96	@ 0x60
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020e4:	2220      	movs	r2, #32
 80020e6:	2100      	movs	r1, #0
 80020e8:	a80c      	add	r0, sp, #48	@ 0x30
 80020ea:	f003 fcc9 	bl	8005a80 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020ee:	2214      	movs	r2, #20
 80020f0:	2100      	movs	r1, #0
 80020f2:	4668      	mov	r0, sp
 80020f4:	f003 fcc4 	bl	8005a80 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020f8:	2218      	movs	r2, #24
 80020fa:	2100      	movs	r1, #0
 80020fc:	a805      	add	r0, sp, #20
 80020fe:	f003 fcbf 	bl	8005a80 <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002102:	4920      	ldr	r1, [pc, #128]	@ (8002184 <SystemClock_Config+0xa4>)
 8002104:	4b20      	ldr	r3, [pc, #128]	@ (8002188 <SystemClock_Config+0xa8>)
 8002106:	680a      	ldr	r2, [r1, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002108:	2401      	movs	r4, #1
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800210a:	401a      	ands	r2, r3
 800210c:	2380      	movs	r3, #128	@ 0x80
 800210e:	011b      	lsls	r3, r3, #4
 8002110:	4313      	orrs	r3, r2
 8002112:	600b      	str	r3, [r1, #0]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8002114:	230a      	movs	r3, #10
 8002116:	930b      	str	r3, [sp, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002118:	3306      	adds	r3, #6
 800211a:	930f      	str	r3, [sp, #60]	@ 0x3c
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800211c:	3b0e      	subs	r3, #14
 800211e:	9314      	str	r3, [sp, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002120:	2300      	movs	r3, #0
 8002122:	9315      	str	r3, [sp, #84]	@ 0x54
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8002124:	2380      	movs	r3, #128	@ 0x80
 8002126:	02db      	lsls	r3, r3, #11
 8002128:	9316      	str	r3, [sp, #88]	@ 0x58
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 800212a:	2380      	movs	r3, #128	@ 0x80
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800212c:	a80b      	add	r0, sp, #44	@ 0x2c
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 800212e:	03db      	lsls	r3, r3, #15
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002130:	940e      	str	r4, [sp, #56]	@ 0x38
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002132:	9410      	str	r4, [sp, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8002134:	9317      	str	r3, [sp, #92]	@ 0x5c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002136:	f002 f835 	bl	80041a4 <HAL_RCC_OscConfig>
 800213a:	2800      	cmp	r0, #0
 800213c:	d001      	beq.n	8002142 <SystemClock_Config+0x62>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800213e:	b672      	cpsid	i
void Error_Handler(void)
{
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002140:	e7fe      	b.n	8002140 <SystemClock_Config+0x60>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002142:	230f      	movs	r3, #15
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002144:	9002      	str	r0, [sp, #8]
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002146:	9300      	str	r3, [sp, #0]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002148:	9003      	str	r0, [sp, #12]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800214a:	3b0c      	subs	r3, #12
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800214c:	9004      	str	r0, [sp, #16]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800214e:	0021      	movs	r1, r4
 8002150:	4668      	mov	r0, sp
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002152:	9301      	str	r3, [sp, #4]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002154:	f002 fa74 	bl	8004640 <HAL_RCC_ClockConfig>
 8002158:	2800      	cmp	r0, #0
 800215a:	d001      	beq.n	8002160 <SystemClock_Config+0x80>
 800215c:	b672      	cpsid	i
	while (1)
 800215e:	e7fe      	b.n	800215e <SystemClock_Config+0x7e>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_LPUART1
 8002160:	232e      	movs	r3, #46	@ 0x2e
 8002162:	9305      	str	r3, [sp, #20]
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002164:	2380      	movs	r3, #128	@ 0x80
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002166:	9007      	str	r0, [sp, #28]
	PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002168:	9008      	str	r0, [sp, #32]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800216a:	9009      	str	r0, [sp, #36]	@ 0x24
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800216c:	029b      	lsls	r3, r3, #10
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800216e:	a805      	add	r0, sp, #20
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002170:	9306      	str	r3, [sp, #24]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002172:	f002 fb43 	bl	80047fc <HAL_RCCEx_PeriphCLKConfig>
 8002176:	2800      	cmp	r0, #0
 8002178:	d001      	beq.n	800217e <SystemClock_Config+0x9e>
 800217a:	b672      	cpsid	i
	while (1)
 800217c:	e7fe      	b.n	800217c <SystemClock_Config+0x9c>
}
 800217e:	b018      	add	sp, #96	@ 0x60
 8002180:	bd10      	pop	{r4, pc}
 8002182:	46c0      	nop			@ (mov r8, r8)
 8002184:	40007000 	.word	0x40007000
 8002188:	ffffe7ff 	.word	0xffffe7ff

0800218c <main>:
{
 800218c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800218e:	b0ad      	sub	sp, #180	@ 0xb4
	HAL_Init();
 8002190:	f001 f8e8 	bl	8003364 <HAL_Init>
	SystemClock_Config();
 8002194:	f7ff ffa4 	bl	80020e0 <SystemClock_Config>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002198:	2214      	movs	r2, #20
 800219a:	2100      	movs	r1, #0
 800219c:	a825      	add	r0, sp, #148	@ 0x94
 800219e:	f003 fc6f 	bl	8005a80 <memset>
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80021a2:	2204      	movs	r2, #4
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80021a4:	2501      	movs	r5, #1
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80021a6:	2702      	movs	r7, #2
	HAL_GPIO_WritePin(GPIOC, DIMM_LED_1_Pin|DIMM_LED_2_Pin, GPIO_PIN_RESET);
 80021a8:	24c0      	movs	r4, #192	@ 0xc0
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80021aa:	4ec0      	ldr	r6, [pc, #768]	@ (80024ac <main+0x320>)
	HAL_GPIO_WritePin(GPIOC, DIMM_LED_1_Pin|DIMM_LED_2_Pin, GPIO_PIN_RESET);
 80021ac:	0224      	lsls	r4, r4, #8
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80021ae:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
	HAL_GPIO_WritePin(GPIOC, DIMM_LED_1_Pin|DIMM_LED_2_Pin, GPIO_PIN_RESET);
 80021b0:	0021      	movs	r1, r4
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80021b2:	4313      	orrs	r3, r2
 80021b4:	62f3      	str	r3, [r6, #44]	@ 0x2c
 80021b6:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
	HAL_GPIO_WritePin(GPIOC, DIMM_LED_1_Pin|DIMM_LED_2_Pin, GPIO_PIN_RESET);
 80021b8:	48bd      	ldr	r0, [pc, #756]	@ (80024b0 <main+0x324>)
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80021ba:	4013      	ands	r3, r2
 80021bc:	9306      	str	r3, [sp, #24]
 80021be:	9b06      	ldr	r3, [sp, #24]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80021c0:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
	HAL_GPIO_WritePin(GPIOC, DIMM_LED_1_Pin|DIMM_LED_2_Pin, GPIO_PIN_RESET);
 80021c2:	2200      	movs	r2, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80021c4:	432b      	orrs	r3, r5
 80021c6:	62f3      	str	r3, [r6, #44]	@ 0x2c
 80021c8:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
 80021ca:	402b      	ands	r3, r5
 80021cc:	9307      	str	r3, [sp, #28]
 80021ce:	9b07      	ldr	r3, [sp, #28]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80021d0:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
 80021d2:	433b      	orrs	r3, r7
 80021d4:	62f3      	str	r3, [r6, #44]	@ 0x2c
 80021d6:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
 80021d8:	403b      	ands	r3, r7
 80021da:	9308      	str	r3, [sp, #32]
 80021dc:	9b08      	ldr	r3, [sp, #32]
	HAL_GPIO_WritePin(GPIOC, DIMM_LED_1_Pin|DIMM_LED_2_Pin, GPIO_PIN_RESET);
 80021de:	f001 fbbf 	bl	8003960 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TXS_OE_GPIO_Port, TXS_OE_Pin, GPIO_PIN_SET);
 80021e2:	20a0      	movs	r0, #160	@ 0xa0
 80021e4:	002a      	movs	r2, r5
 80021e6:	0039      	movs	r1, r7
 80021e8:	05c0      	lsls	r0, r0, #23
 80021ea:	f001 fbb9 	bl	8003960 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, SHDN_170V_3V3_Pin|INS_EN_3V3_Pin|DIN_3V3_Pin|OE_3V3_Pin, GPIO_PIN_RESET);
 80021ee:	20a0      	movs	r0, #160	@ 0xa0
 80021f0:	2200      	movs	r2, #0
 80021f2:	21f0      	movs	r1, #240	@ 0xf0
 80021f4:	05c0      	lsls	r0, r0, #23
 80021f6:	f001 fbb3 	bl	8003960 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, RCK_3V3_Pin|SCK_3V3_Pin, GPIO_PIN_RESET);
 80021fa:	2200      	movs	r2, #0
 80021fc:	2103      	movs	r1, #3
 80021fe:	48ad      	ldr	r0, [pc, #692]	@ (80024b4 <main+0x328>)
 8002200:	f001 fbae 	bl	8003960 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = DIMM_LED_1_Pin|DIMM_LED_2_Pin;
 8002204:	9425      	str	r4, [sp, #148]	@ 0x94
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002206:	2400      	movs	r4, #0
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002208:	48a9      	ldr	r0, [pc, #676]	@ (80024b0 <main+0x324>)
 800220a:	a925      	add	r1, sp, #148	@ 0x94
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800220c:	9526      	str	r5, [sp, #152]	@ 0x98
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220e:	9427      	str	r4, [sp, #156]	@ 0x9c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002210:	9428      	str	r4, [sp, #160]	@ 0xa0
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002212:	f001 faeb 	bl	80037ec <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002216:	20a0      	movs	r0, #160	@ 0xa0
	GPIO_InitStruct.Pin = BTN_4_Pin|INT_SQW_Pin|INT_OPT_Pin|JDY_STAT_Pin
 8002218:	4ba7      	ldr	r3, [pc, #668]	@ (80024b8 <main+0x32c>)
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800221a:	a925      	add	r1, sp, #148	@ 0x94
 800221c:	05c0      	lsls	r0, r0, #23
	GPIO_InitStruct.Pin = BTN_4_Pin|INT_SQW_Pin|INT_OPT_Pin|JDY_STAT_Pin
 800221e:	9325      	str	r3, [sp, #148]	@ 0x94
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002220:	9426      	str	r4, [sp, #152]	@ 0x98
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002222:	9427      	str	r4, [sp, #156]	@ 0x9c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002224:	f001 fae2 	bl	80037ec <HAL_GPIO_Init>
	HAL_GPIO_Init(TXS_OE_GPIO_Port, &GPIO_InitStruct);
 8002228:	20a0      	movs	r0, #160	@ 0xa0
 800222a:	a925      	add	r1, sp, #148	@ 0x94
 800222c:	05c0      	lsls	r0, r0, #23
	GPIO_InitStruct.Pin = TXS_OE_Pin;
 800222e:	9725      	str	r7, [sp, #148]	@ 0x94
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002230:	9526      	str	r5, [sp, #152]	@ 0x98
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002232:	9527      	str	r5, [sp, #156]	@ 0x9c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002234:	9428      	str	r4, [sp, #160]	@ 0xa0
	HAL_GPIO_Init(TXS_OE_GPIO_Port, &GPIO_InitStruct);
 8002236:	f001 fad9 	bl	80037ec <HAL_GPIO_Init>
	HAL_GPIO_Init(SHDN_170V_3V3_GPIO_Port, &GPIO_InitStruct);
 800223a:	20a0      	movs	r0, #160	@ 0xa0
	GPIO_InitStruct.Pin = SHDN_170V_3V3_Pin;
 800223c:	2310      	movs	r3, #16
	HAL_GPIO_Init(SHDN_170V_3V3_GPIO_Port, &GPIO_InitStruct);
 800223e:	a925      	add	r1, sp, #148	@ 0x94
 8002240:	05c0      	lsls	r0, r0, #23
	GPIO_InitStruct.Pin = SHDN_170V_3V3_Pin;
 8002242:	9325      	str	r3, [sp, #148]	@ 0x94
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002244:	9526      	str	r5, [sp, #152]	@ 0x98
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002246:	9727      	str	r7, [sp, #156]	@ 0x9c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002248:	9428      	str	r4, [sp, #160]	@ 0xa0
	HAL_GPIO_Init(SHDN_170V_3V3_GPIO_Port, &GPIO_InitStruct);
 800224a:	f001 facf 	bl	80037ec <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = INS_EN_3V3_Pin|DIN_3V3_Pin|OE_3V3_Pin;
 800224e:	23e0      	movs	r3, #224	@ 0xe0
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002250:	20a0      	movs	r0, #160	@ 0xa0
	GPIO_InitStruct.Pin = INS_EN_3V3_Pin|DIN_3V3_Pin|OE_3V3_Pin;
 8002252:	9325      	str	r3, [sp, #148]	@ 0x94
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002254:	a925      	add	r1, sp, #148	@ 0x94
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002256:	3bdd      	subs	r3, #221	@ 0xdd
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002258:	05c0      	lsls	r0, r0, #23
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800225a:	9328      	str	r3, [sp, #160]	@ 0xa0
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800225c:	9526      	str	r5, [sp, #152]	@ 0x98
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225e:	9427      	str	r4, [sp, #156]	@ 0x9c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002260:	f001 fac4 	bl	80037ec <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = RCK_3V3_Pin|SCK_3V3_Pin;
 8002264:	2303      	movs	r3, #3
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002266:	4893      	ldr	r0, [pc, #588]	@ (80024b4 <main+0x328>)
 8002268:	a925      	add	r1, sp, #148	@ 0x94
	GPIO_InitStruct.Pin = RCK_3V3_Pin|SCK_3V3_Pin;
 800226a:	9325      	str	r3, [sp, #148]	@ 0x94
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800226c:	9328      	str	r3, [sp, #160]	@ 0xa0
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800226e:	9526      	str	r5, [sp, #152]	@ 0x98
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002270:	9427      	str	r4, [sp, #156]	@ 0x9c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002272:	f001 fabb 	bl	80037ec <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = BTN_3_Pin|BTN_2_Pin|BTN_1_Pin;
 8002276:	2338      	movs	r3, #56	@ 0x38
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002278:	488e      	ldr	r0, [pc, #568]	@ (80024b4 <main+0x328>)
 800227a:	a925      	add	r1, sp, #148	@ 0x94
	GPIO_InitStruct.Pin = BTN_3_Pin|BTN_2_Pin|BTN_1_Pin;
 800227c:	9325      	str	r3, [sp, #148]	@ 0x94
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800227e:	9426      	str	r4, [sp, #152]	@ 0x98
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002280:	9427      	str	r4, [sp, #156]	@ 0x9c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002282:	f001 fab3 	bl	80037ec <HAL_GPIO_Init>
	__HAL_RCC_DMA1_CLK_ENABLE();
 8002286:	6b33      	ldr	r3, [r6, #48]	@ 0x30
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8002288:	0022      	movs	r2, r4
	__HAL_RCC_DMA1_CLK_ENABLE();
 800228a:	432b      	orrs	r3, r5
 800228c:	6333      	str	r3, [r6, #48]	@ 0x30
 800228e:	6b33      	ldr	r3, [r6, #48]	@ 0x30
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8002290:	0039      	movs	r1, r7
	__HAL_RCC_DMA1_CLK_ENABLE();
 8002292:	402b      	ands	r3, r5
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8002294:	2009      	movs	r0, #9
	__HAL_RCC_DMA1_CLK_ENABLE();
 8002296:	9305      	str	r3, [sp, #20]
 8002298:	9b05      	ldr	r3, [sp, #20]
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 800229a:	f001 f89b 	bl	80033d4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800229e:	2009      	movs	r0, #9
 80022a0:	f001 f8c2 	bl	8003428 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 2, 0);
 80022a4:	0022      	movs	r2, r4
 80022a6:	0039      	movs	r1, r7
 80022a8:	200a      	movs	r0, #10
 80022aa:	f001 f893 	bl	80033d4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80022ae:	200a      	movs	r0, #10
 80022b0:	f001 f8ba 	bl	8003428 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 2, 0);
 80022b4:	0039      	movs	r1, r7
 80022b6:	0022      	movs	r2, r4
 80022b8:	200b      	movs	r0, #11
 80022ba:	f001 f88b 	bl	80033d4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 80022be:	200b      	movs	r0, #11
 80022c0:	f001 f8b2 	bl	8003428 <HAL_NVIC_EnableIRQ>
	hi2c1.Instance = I2C1;
 80022c4:	4e7d      	ldr	r6, [pc, #500]	@ (80024bc <main+0x330>)
 80022c6:	4b7e      	ldr	r3, [pc, #504]	@ (80024c0 <main+0x334>)
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80022c8:	0030      	movs	r0, r6
	hi2c1.Instance = I2C1;
 80022ca:	6033      	str	r3, [r6, #0]
	hi2c1.Init.Timing = 0x00707CBB;
 80022cc:	4b7d      	ldr	r3, [pc, #500]	@ (80024c4 <main+0x338>)
	hi2c1.Init.OwnAddress1 = 0;
 80022ce:	60b4      	str	r4, [r6, #8]
	hi2c1.Init.Timing = 0x00707CBB;
 80022d0:	6073      	str	r3, [r6, #4]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80022d2:	60f5      	str	r5, [r6, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80022d4:	6134      	str	r4, [r6, #16]
	hi2c1.Init.OwnAddress2 = 0;
 80022d6:	6174      	str	r4, [r6, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80022d8:	61b4      	str	r4, [r6, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80022da:	61f4      	str	r4, [r6, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80022dc:	6234      	str	r4, [r6, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80022de:	f001 fcc5 	bl	8003c6c <HAL_I2C_Init>
 80022e2:	0001      	movs	r1, r0
 80022e4:	42a0      	cmp	r0, r4
 80022e6:	d001      	beq.n	80022ec <main+0x160>
 80022e8:	b672      	cpsid	i
	while (1)
 80022ea:	e7fe      	b.n	80022ea <main+0x15e>
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80022ec:	0030      	movs	r0, r6
 80022ee:	f001 fec5 	bl	800407c <HAL_I2CEx_ConfigAnalogFilter>
 80022f2:	1e01      	subs	r1, r0, #0
 80022f4:	d001      	beq.n	80022fa <main+0x16e>
 80022f6:	b672      	cpsid	i
	while (1)
 80022f8:	e7fe      	b.n	80022f8 <main+0x16c>
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80022fa:	0030      	movs	r0, r6
 80022fc:	f001 fee4 	bl	80040c8 <HAL_I2CEx_ConfigDigitalFilter>
 8002300:	1e03      	subs	r3, r0, #0
 8002302:	d001      	beq.n	8002308 <main+0x17c>
 8002304:	b672      	cpsid	i
	while (1)
 8002306:	e7fe      	b.n	8002306 <main+0x17a>
	hlpuart1.Instance = LPUART1;
 8002308:	486f      	ldr	r0, [pc, #444]	@ (80024c8 <main+0x33c>)
 800230a:	4a70      	ldr	r2, [pc, #448]	@ (80024cc <main+0x340>)
	hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800230c:	240c      	movs	r4, #12
	hlpuart1.Instance = LPUART1;
 800230e:	6002      	str	r2, [r0, #0]
	hlpuart1.Init.BaudRate = 209700;
 8002310:	4a6f      	ldr	r2, [pc, #444]	@ (80024d0 <main+0x344>)
	hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002312:	60c3      	str	r3, [r0, #12]
	hlpuart1.Init.BaudRate = 209700;
 8002314:	6042      	str	r2, [r0, #4]
	hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8002316:	2280      	movs	r2, #128	@ 0x80
 8002318:	0552      	lsls	r2, r2, #21
	hlpuart1.Init.Parity = UART_PARITY_NONE;
 800231a:	6103      	str	r3, [r0, #16]
	hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800231c:	6183      	str	r3, [r0, #24]
	hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800231e:	6203      	str	r3, [r0, #32]
	hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002320:	6243      	str	r3, [r0, #36]	@ 0x24
	hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8002322:	6082      	str	r2, [r0, #8]
	hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002324:	6144      	str	r4, [r0, #20]
	if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002326:	f003 fa3d 	bl	80057a4 <HAL_UART_Init>
 800232a:	1e03      	subs	r3, r0, #0
 800232c:	d001      	beq.n	8002332 <main+0x1a6>
 800232e:	b672      	cpsid	i
	while (1)
 8002330:	e7fe      	b.n	8002330 <main+0x1a4>
	huart2.Instance = USART2;
 8002332:	4868      	ldr	r0, [pc, #416]	@ (80024d4 <main+0x348>)
 8002334:	4a68      	ldr	r2, [pc, #416]	@ (80024d8 <main+0x34c>)
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002336:	6083      	str	r3, [r0, #8]
	huart2.Instance = USART2;
 8002338:	6002      	str	r2, [r0, #0]
	huart2.Init.BaudRate = 115200;
 800233a:	22e1      	movs	r2, #225	@ 0xe1
 800233c:	0252      	lsls	r2, r2, #9
	huart2.Init.StopBits = UART_STOPBITS_1;
 800233e:	60c3      	str	r3, [r0, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8002340:	6103      	str	r3, [r0, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002342:	6183      	str	r3, [r0, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002344:	61c3      	str	r3, [r0, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002346:	6203      	str	r3, [r0, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002348:	6243      	str	r3, [r0, #36]	@ 0x24
	huart2.Init.BaudRate = 115200;
 800234a:	6042      	str	r2, [r0, #4]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800234c:	6144      	str	r4, [r0, #20]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 800234e:	f003 fa29 	bl	80057a4 <HAL_UART_Init>
 8002352:	1e03      	subs	r3, r0, #0
 8002354:	d001      	beq.n	800235a <main+0x1ce>
 8002356:	b672      	cpsid	i
	while (1)
 8002358:	e7fe      	b.n	8002358 <main+0x1cc>
	hrtc.Instance = RTC;
 800235a:	4860      	ldr	r0, [pc, #384]	@ (80024dc <main+0x350>)
 800235c:	4a60      	ldr	r2, [pc, #384]	@ (80024e0 <main+0x354>)
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800235e:	6043      	str	r3, [r0, #4]
	hrtc.Instance = RTC;
 8002360:	6002      	str	r2, [r0, #0]
	hrtc.Init.AsynchPrediv = 127;
 8002362:	227f      	movs	r2, #127	@ 0x7f
 8002364:	6082      	str	r2, [r0, #8]
	hrtc.Init.SynchPrediv = 255;
 8002366:	3280      	adds	r2, #128	@ 0x80
 8002368:	60c2      	str	r2, [r0, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800236a:	6103      	str	r3, [r0, #16]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800236c:	6143      	str	r3, [r0, #20]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800236e:	6183      	str	r3, [r0, #24]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002370:	61c3      	str	r3, [r0, #28]
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002372:	f002 fb55 	bl	8004a20 <HAL_RTC_Init>
 8002376:	1e05      	subs	r5, r0, #0
 8002378:	d001      	beq.n	800237e <main+0x1f2>
 800237a:	b672      	cpsid	i
	while (1)
 800237c:	e7fe      	b.n	800237c <main+0x1f0>
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800237e:	0001      	movs	r1, r0
 8002380:	2210      	movs	r2, #16
 8002382:	a825      	add	r0, sp, #148	@ 0x94
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002384:	ac21      	add	r4, sp, #132	@ 0x84
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002386:	f003 fb7b 	bl	8005a80 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800238a:	2208      	movs	r2, #8
 800238c:	0029      	movs	r1, r5
 800238e:	0020      	movs	r0, r4
 8002390:	f003 fb76 	bl	8005a80 <memset>
	htim21.Instance = TIM21;
 8002394:	4e53      	ldr	r6, [pc, #332]	@ (80024e4 <main+0x358>)
 8002396:	4b54      	ldr	r3, [pc, #336]	@ (80024e8 <main+0x35c>)
	if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 8002398:	0030      	movs	r0, r6
	htim21.Instance = TIM21;
 800239a:	6033      	str	r3, [r6, #0]
	htim21.Init.Prescaler = 32000-1;
 800239c:	4b53      	ldr	r3, [pc, #332]	@ (80024ec <main+0x360>)
	htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 800239e:	60b5      	str	r5, [r6, #8]
	htim21.Init.Prescaler = 32000-1;
 80023a0:	6073      	str	r3, [r6, #4]
	htim21.Init.Period = 50-1;
 80023a2:	2331      	movs	r3, #49	@ 0x31
	htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023a4:	6135      	str	r5, [r6, #16]
	htim21.Init.Period = 50-1;
 80023a6:	60f3      	str	r3, [r6, #12]
	htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023a8:	6175      	str	r5, [r6, #20]
	if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 80023aa:	f002 fbf2 	bl	8004b92 <HAL_TIM_Base_Init>
 80023ae:	2800      	cmp	r0, #0
 80023b0:	d001      	beq.n	80023b6 <main+0x22a>
 80023b2:	b672      	cpsid	i
	while (1)
 80023b4:	e7fe      	b.n	80023b4 <main+0x228>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023b6:	2380      	movs	r3, #128	@ 0x80
	if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 80023b8:	0030      	movs	r0, r6
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023ba:	015b      	lsls	r3, r3, #5
	if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 80023bc:	a925      	add	r1, sp, #148	@ 0x94
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023be:	9325      	str	r3, [sp, #148]	@ 0x94
	if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 80023c0:	f002 fdf2 	bl	8004fa8 <HAL_TIM_ConfigClockSource>
 80023c4:	2800      	cmp	r0, #0
 80023c6:	d001      	beq.n	80023cc <main+0x240>
 80023c8:	b672      	cpsid	i
	while (1)
 80023ca:	e7fe      	b.n	80023ca <main+0x23e>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023cc:	9021      	str	r0, [sp, #132]	@ 0x84
	if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 80023ce:	0021      	movs	r1, r4
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023d0:	6060      	str	r0, [r4, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 80023d2:	0030      	movs	r0, r6
 80023d4:	f002 ff9e 	bl	8005314 <HAL_TIMEx_MasterConfigSynchronization>
 80023d8:	1e06      	subs	r6, r0, #0
 80023da:	d001      	beq.n	80023e0 <main+0x254>
 80023dc:	b672      	cpsid	i
	while (1)
 80023de:	e7fe      	b.n	80023de <main+0x252>
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023e0:	0001      	movs	r1, r0
 80023e2:	2210      	movs	r2, #16
 80023e4:	0020      	movs	r0, r4
 80023e6:	f003 fb4b 	bl	8005a80 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023ea:	2208      	movs	r2, #8
 80023ec:	0031      	movs	r1, r6
 80023ee:	a81d      	add	r0, sp, #116	@ 0x74
 80023f0:	f003 fb46 	bl	8005a80 <memset>
	TIM_OC_InitTypeDef sConfigOC = {0};
 80023f4:	2210      	movs	r2, #16
 80023f6:	0031      	movs	r1, r6
 80023f8:	a825      	add	r0, sp, #148	@ 0x94
 80023fa:	f003 fb41 	bl	8005a80 <memset>
	htim2.Instance = TIM2;
 80023fe:	2380      	movs	r3, #128	@ 0x80
 8002400:	4f3b      	ldr	r7, [pc, #236]	@ (80024f0 <main+0x364>)
 8002402:	05db      	lsls	r3, r3, #23
 8002404:	603b      	str	r3, [r7, #0]
	htim2.Init.Prescaler = 3200-1;
 8002406:	4b3b      	ldr	r3, [pc, #236]	@ (80024f4 <main+0x368>)
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002408:	0038      	movs	r0, r7
	htim2.Init.Prescaler = 3200-1;
 800240a:	607b      	str	r3, [r7, #4]
	htim2.Init.Period = 100-1;
 800240c:	2363      	movs	r3, #99	@ 0x63
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800240e:	60be      	str	r6, [r7, #8]
	htim2.Init.Period = 100-1;
 8002410:	60fb      	str	r3, [r7, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002412:	613e      	str	r6, [r7, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002414:	617e      	str	r6, [r7, #20]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002416:	f002 fbbc 	bl	8004b92 <HAL_TIM_Base_Init>
 800241a:	2800      	cmp	r0, #0
 800241c:	d001      	beq.n	8002422 <main+0x296>
 800241e:	b672      	cpsid	i
	while (1)
 8002420:	e7fe      	b.n	8002420 <main+0x294>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002422:	2380      	movs	r3, #128	@ 0x80
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002424:	0021      	movs	r1, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002426:	015b      	lsls	r3, r3, #5
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002428:	0038      	movs	r0, r7
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800242a:	9321      	str	r3, [sp, #132]	@ 0x84
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800242c:	f002 fdbc 	bl	8004fa8 <HAL_TIM_ConfigClockSource>
 8002430:	2800      	cmp	r0, #0
 8002432:	d001      	beq.n	8002438 <main+0x2ac>
 8002434:	b672      	cpsid	i
	while (1)
 8002436:	e7fe      	b.n	8002436 <main+0x2aa>
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002438:	0038      	movs	r0, r7
 800243a:	f002 fcfe 	bl	8004e3a <HAL_TIM_PWM_Init>
 800243e:	2800      	cmp	r0, #0
 8002440:	d001      	beq.n	8002446 <main+0x2ba>
 8002442:	b672      	cpsid	i
	while (1)
 8002444:	e7fe      	b.n	8002444 <main+0x2b8>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002446:	901d      	str	r0, [sp, #116]	@ 0x74
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002448:	901e      	str	r0, [sp, #120]	@ 0x78
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800244a:	a91d      	add	r1, sp, #116	@ 0x74
 800244c:	0038      	movs	r0, r7
 800244e:	f002 ff61 	bl	8005314 <HAL_TIMEx_MasterConfigSynchronization>
 8002452:	1e02      	subs	r2, r0, #0
 8002454:	d001      	beq.n	800245a <main+0x2ce>
 8002456:	b672      	cpsid	i
	while (1)
 8002458:	e7fe      	b.n	8002458 <main+0x2cc>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800245a:	2360      	movs	r3, #96	@ 0x60
	sConfigOC.Pulse = 0;
 800245c:	9026      	str	r0, [sp, #152]	@ 0x98
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800245e:	9027      	str	r0, [sp, #156]	@ 0x9c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002460:	9028      	str	r0, [sp, #160]	@ 0xa0
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002462:	a925      	add	r1, sp, #148	@ 0x94
 8002464:	0038      	movs	r0, r7
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002466:	9325      	str	r3, [sp, #148]	@ 0x94
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002468:	f002 fd10 	bl	8004e8c <HAL_TIM_PWM_ConfigChannel>
 800246c:	2800      	cmp	r0, #0
 800246e:	d001      	beq.n	8002474 <main+0x2e8>
 8002470:	b672      	cpsid	i
	while (1)
 8002472:	e7fe      	b.n	8002472 <main+0x2e6>
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002474:	2204      	movs	r2, #4
 8002476:	0038      	movs	r0, r7
 8002478:	a925      	add	r1, sp, #148	@ 0x94
 800247a:	f002 fd07 	bl	8004e8c <HAL_TIM_PWM_ConfigChannel>
 800247e:	2800      	cmp	r0, #0
 8002480:	d001      	beq.n	8002486 <main+0x2fa>
 8002482:	b672      	cpsid	i
	while (1)
 8002484:	e7fe      	b.n	8002484 <main+0x2f8>
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002486:	2208      	movs	r2, #8
 8002488:	0038      	movs	r0, r7
 800248a:	a925      	add	r1, sp, #148	@ 0x94
 800248c:	f002 fcfe 	bl	8004e8c <HAL_TIM_PWM_ConfigChannel>
 8002490:	2800      	cmp	r0, #0
 8002492:	d001      	beq.n	8002498 <main+0x30c>
 8002494:	b672      	cpsid	i
	while (1)
 8002496:	e7fe      	b.n	8002496 <main+0x30a>
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002498:	220c      	movs	r2, #12
 800249a:	0038      	movs	r0, r7
 800249c:	a925      	add	r1, sp, #148	@ 0x94
 800249e:	f002 fcf5 	bl	8004e8c <HAL_TIM_PWM_ConfigChannel>
 80024a2:	2800      	cmp	r0, #0
 80024a4:	d028      	beq.n	80024f8 <main+0x36c>
 80024a6:	b672      	cpsid	i
	while (1)
 80024a8:	e7fe      	b.n	80024a8 <main+0x31c>
 80024aa:	46c0      	nop			@ (mov r8, r8)
 80024ac:	40021000 	.word	0x40021000
 80024b0:	50000800 	.word	0x50000800
 80024b4:	50000400 	.word	0x50000400
 80024b8:	00009901 	.word	0x00009901
 80024bc:	20000e20 	.word	0x20000e20
 80024c0:	40005400 	.word	0x40005400
 80024c4:	00707cbb 	.word	0x00707cbb
 80024c8:	20000d98 	.word	0x20000d98
 80024cc:	40004800 	.word	0x40004800
 80024d0:	00033324 	.word	0x00033324
 80024d4:	20000d10 	.word	0x20000d10
 80024d8:	40004400 	.word	0x40004400
 80024dc:	20000cec 	.word	0x20000cec
 80024e0:	40002800 	.word	0x40002800
 80024e4:	20000c6c 	.word	0x20000c6c
 80024e8:	40010800 	.word	0x40010800
 80024ec:	00007cff 	.word	0x00007cff
 80024f0:	20000cac 	.word	0x20000cac
 80024f4:	00000c7f 	.word	0x00000c7f
	btns_init(&hbtns, btns_list, num_of_btns, &htim21, PRESSED);
 80024f8:	2501      	movs	r5, #1
	settings_init(s_ptr, settings_size);
 80024fa:	4b7d      	ldr	r3, [pc, #500]	@ (80026f0 <main+0x564>)
 80024fc:	487d      	ldr	r0, [pc, #500]	@ (80026f4 <main+0x568>)
 80024fe:	8819      	ldrh	r1, [r3, #0]
 8002500:	f003 fa42 	bl	8005988 <settings_init>
	IN12_init();
 8002504:	f7ff fc8e 	bl	8001e24 <IN12_init>
	DS3231_Init(&hi2c1);
 8002508:	4f7b      	ldr	r7, [pc, #492]	@ (80026f8 <main+0x56c>)
 800250a:	0038      	movs	r0, r7
 800250c:	f000 fe32 	bl	8003174 <DS3231_Init>
	init_menu_items(&hmenu, items_list, NUM_OF_MENUS, NUM_OF_ITEMS);
 8002510:	4e7a      	ldr	r6, [pc, #488]	@ (80026fc <main+0x570>)
 8002512:	2309      	movs	r3, #9
 8002514:	2203      	movs	r2, #3
 8002516:	0031      	movs	r1, r6
 8002518:	4879      	ldr	r0, [pc, #484]	@ (8002700 <main+0x574>)
 800251a:	f000 facb 	bl	8002ab4 <init_menu_items>
	btns_init(&hbtns, btns_list, num_of_btns, &htim21, PRESSED);
 800251e:	4a79      	ldr	r2, [pc, #484]	@ (8002704 <main+0x578>)
 8002520:	4b79      	ldr	r3, [pc, #484]	@ (8002708 <main+0x57c>)
 8002522:	7812      	ldrb	r2, [r2, #0]
 8002524:	4979      	ldr	r1, [pc, #484]	@ (800270c <main+0x580>)
 8002526:	9500      	str	r5, [sp, #0]
 8002528:	4879      	ldr	r0, [pc, #484]	@ (8002710 <main+0x584>)
 800252a:	f7ff fca1 	bl	8001e70 <btns_init>
	Tmp75_Init(&hi2c1);
 800252e:	0038      	movs	r0, r7
 8002530:	f000 fd2a 	bl	8002f88 <Tmp75_Init>
	opt3001_init();
 8002534:	f000 fb60 	bl	8002bf8 <opt3001_init>
	update_request running_time 	= {&always_update, 				1000, 	0, update_running_time};
 8002538:	4b76      	ldr	r3, [pc, #472]	@ (8002714 <main+0x588>)
 800253a:	aa09      	add	r2, sp, #36	@ 0x24
 800253c:	0019      	movs	r1, r3
 800253e:	c9a1      	ldmia	r1!, {r0, r5, r7}
 8002540:	c2a1      	stmia	r2!, {r0, r5, r7}
 8002542:	6809      	ldr	r1, [r1, #0]
 8002544:	6011      	str	r1, [r2, #0]
	update_request temp_and_press 	= {&is_update_temp_and_press, 	100, 	0, update_temp_and_press};
 8002546:	001a      	movs	r2, r3
 8002548:	a90d      	add	r1, sp, #52	@ 0x34
 800254a:	3210      	adds	r2, #16
 800254c:	caa1      	ldmia	r2!, {r0, r5, r7}
 800254e:	c1a1      	stmia	r1!, {r0, r5, r7}
 8002550:	6812      	ldr	r2, [r2, #0]
 8002552:	600a      	str	r2, [r1, #0]
	update_request distance 		= {&is_update_distance, 		100, 	0, update_distance};
 8002554:	001a      	movs	r2, r3
 8002556:	a911      	add	r1, sp, #68	@ 0x44
 8002558:	3220      	adds	r2, #32
 800255a:	caa1      	ldmia	r2!, {r0, r5, r7}
 800255c:	c1a1      	stmia	r1!, {r0, r5, r7}
 800255e:	6812      	ldr	r2, [r2, #0]
 8002560:	600a      	str	r2, [r1, #0]
	update_request angles			= {&always_update, 				50, 	0, update_angles};
 8002562:	001a      	movs	r2, r3
 8002564:	a915      	add	r1, sp, #84	@ 0x54
 8002566:	3230      	adds	r2, #48	@ 0x30
 8002568:	caa1      	ldmia	r2!, {r0, r5, r7}
 800256a:	c1a1      	stmia	r1!, {r0, r5, r7}
 800256c:	6812      	ldr	r2, [r2, #0]
 800256e:	600a      	str	r2, [r1, #0]
	update_request battery 			= {&is_update_battery, 			50, 	0, update_battery};
 8002570:	aa19      	add	r2, sp, #100	@ 0x64
 8002572:	4694      	mov	ip, r2
 8002574:	001a      	movs	r2, r3
 8002576:	4661      	mov	r1, ip
 8002578:	3240      	adds	r2, #64	@ 0x40
 800257a:	caa1      	ldmia	r2!, {r0, r5, r7}
 800257c:	c1a1      	stmia	r1!, {r0, r5, r7}
 800257e:	6812      	ldr	r2, [r2, #0]
 8002580:	600a      	str	r2, [r1, #0]
	update_request flags 			= {&always_update, 				10, 	0, update_flags};
 8002582:	001a      	movs	r2, r3
 8002584:	a91d      	add	r1, sp, #116	@ 0x74
 8002586:	3250      	adds	r2, #80	@ 0x50
 8002588:	caa1      	ldmia	r2!, {r0, r5, r7}
 800258a:	c1a1      	stmia	r1!, {r0, r5, r7}
 800258c:	6812      	ldr	r2, [r2, #0]
	update_request ntm_flags 		= {&is_update_ntm_flags, 		10, 	0, update_ntm_flags};
 800258e:	3360      	adds	r3, #96	@ 0x60
	update_request flags 			= {&always_update, 				10, 	0, update_flags};
 8002590:	600a      	str	r2, [r1, #0]
	update_request ntm_flags 		= {&is_update_ntm_flags, 		10, 	0, update_ntm_flags};
 8002592:	0022      	movs	r2, r4
 8002594:	cb83      	ldmia	r3!, {r0, r1, r7}
 8002596:	c283      	stmia	r2!, {r0, r1, r7}
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	6013      	str	r3, [r2, #0]
	update_request* requests[] = {
 800259c:	ab09      	add	r3, sp, #36	@ 0x24
 800259e:	9325      	str	r3, [sp, #148]	@ 0x94
 80025a0:	ab0d      	add	r3, sp, #52	@ 0x34
 80025a2:	9326      	str	r3, [sp, #152]	@ 0x98
 80025a4:	ab11      	add	r3, sp, #68	@ 0x44
 80025a6:	9327      	str	r3, [sp, #156]	@ 0x9c
 80025a8:	ab15      	add	r3, sp, #84	@ 0x54
 80025aa:	9328      	str	r3, [sp, #160]	@ 0xa0
 80025ac:	4663      	mov	r3, ip
 80025ae:	9329      	str	r3, [sp, #164]	@ 0xa4
 80025b0:	ab1d      	add	r3, sp, #116	@ 0x74
 80025b2:	932a      	str	r3, [sp, #168]	@ 0xa8
 80025b4:	942b      	str	r4, [sp, #172]	@ 0xac
		if(flag_upd_time) {
 80025b6:	4c58      	ldr	r4, [pc, #352]	@ (8002718 <main+0x58c>)
 80025b8:	7823      	ldrb	r3, [r4, #0]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d03c      	beq.n	8002638 <main+0x4ac>
			time_update();
 80025be:	f7ff fc23 	bl	8001e08 <time_update>
			items_list[YEAR].numbers[0] = 20;
 80025c2:	0033      	movs	r3, r6
 80025c4:	2214      	movs	r2, #20
 80025c6:	33e2      	adds	r3, #226	@ 0xe2
 80025c8:	801a      	strh	r2, [r3, #0]
			items_list[YEAR].numbers[1] = DS3231_GetYear() - 2000;
 80025ca:	f000 fe0e 	bl	80031ea <DS3231_GetYear>
 80025ce:	4b53      	ldr	r3, [pc, #332]	@ (800271c <main+0x590>)
 80025d0:	18c0      	adds	r0, r0, r3
 80025d2:	0033      	movs	r3, r6
 80025d4:	33e4      	adds	r3, #228	@ 0xe4
 80025d6:	8018      	strh	r0, [r3, #0]
			items_list[DAY_MONTH].numbers[0] = DS3231_GetDate();
 80025d8:	f000 fdf7 	bl	80031ca <DS3231_GetDate>
 80025dc:	23dd      	movs	r3, #221	@ 0xdd
 80025de:	005b      	lsls	r3, r3, #1
 80025e0:	52f0      	strh	r0, [r6, r3]
			items_list[DAY_MONTH].numbers[1] = DS3231_GetMonth();
 80025e2:	f000 fdf9 	bl	80031d8 <DS3231_GetMonth>
 80025e6:	23de      	movs	r3, #222	@ 0xde
 80025e8:	005b      	lsls	r3, r3, #1
 80025ea:	52f0      	strh	r0, [r6, r3]
			items_list[HOURS_MINUTES].numbers[0] = DS3231_GetHour();
 80025ec:	f000 fe11 	bl	8003212 <DS3231_GetHour>
 80025f0:	4b4b      	ldr	r3, [pc, #300]	@ (8002720 <main+0x594>)
 80025f2:	52f0      	strh	r0, [r6, r3]
			items_list[HOURS_MINUTES].numbers[1] = DS3231_GetMinute();
 80025f4:	f000 fe14 	bl	8003220 <DS3231_GetMinute>
 80025f8:	23a5      	movs	r3, #165	@ 0xa5
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	52f0      	strh	r0, [r6, r3]
			items_list[MINUTES_SECONDS].numbers[0] = items_list[HOURS_MINUTES].numbers[1];
 80025fe:	4b49      	ldr	r3, [pc, #292]	@ (8002724 <main+0x598>)
 8002600:	52f0      	strh	r0, [r6, r3]
			items_list[MINUTES_SECONDS].numbers[1] = DS3231_GetSecond();
 8002602:	f000 fe14 	bl	800322e <DS3231_GetSecond>
 8002606:	23db      	movs	r3, #219	@ 0xdb
			Read_TempCelsius(&t);
 8002608:	4d47      	ldr	r5, [pc, #284]	@ (8002728 <main+0x59c>)
			items_list[MINUTES_SECONDS].numbers[1] = DS3231_GetSecond();
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	52f0      	strh	r0, [r6, r3]
			Read_TempCelsius(&t);
 800260e:	0028      	movs	r0, r5
 8002610:	f000 fcea 	bl	8002fe8 <Read_TempCelsius>
			items_list[TEMPERATURE].numbers[0] = t;
 8002614:	6828      	ldr	r0, [r5, #0]
 8002616:	f7fd ff8b 	bl	8000530 <__aeabi_f2uiz>
 800261a:	4b44      	ldr	r3, [pc, #272]	@ (800272c <main+0x5a0>)
			items_list[TEMPERATURE].numbers[1] = ((int)(t*100))%100;
 800261c:	4944      	ldr	r1, [pc, #272]	@ (8002730 <main+0x5a4>)
			items_list[TEMPERATURE].numbers[0] = t;
 800261e:	52f0      	strh	r0, [r6, r3]
			items_list[TEMPERATURE].numbers[1] = ((int)(t*100))%100;
 8002620:	6828      	ldr	r0, [r5, #0]
 8002622:	f7fe fbd9 	bl	8000dd8 <__aeabi_fmul>
 8002626:	f7fe fecf 	bl	80013c8 <__aeabi_f2iz>
 800262a:	2164      	movs	r1, #100	@ 0x64
 800262c:	f7fd fee6 	bl	80003fc <__aeabi_idivmod>
 8002630:	4b40      	ldr	r3, [pc, #256]	@ (8002734 <main+0x5a8>)
 8002632:	52f1      	strh	r1, [r6, r3]
			flag_upd_time = 0;
 8002634:	2300      	movs	r3, #0
 8002636:	7023      	strb	r3, [r4, #0]
		if(flag_upd_tubes) {
 8002638:	4c3f      	ldr	r4, [pc, #252]	@ (8002738 <main+0x5ac>)
 800263a:	7823      	ldrb	r3, [r4, #0]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d003      	beq.n	8002648 <main+0x4bc>
			IN12_set();
 8002640:	f7ff fb5c 	bl	8001cfc <IN12_set>
			flag_upd_tubes = 0;
 8002644:	2300      	movs	r3, #0
 8002646:	7023      	strb	r3, [r4, #0]
		if(flag_upd_dots) {
 8002648:	4b3c      	ldr	r3, [pc, #240]	@ (800273c <main+0x5b0>)
 800264a:	781a      	ldrb	r2, [r3, #0]
 800264c:	2a00      	cmp	r2, #0
 800264e:	d006      	beq.n	800265e <main+0x4d2>
			HAL_GPIO_TogglePin(INS_EN_3V3_GPIO_Port, INS_EN_3V3_Pin);
 8002650:	20a0      	movs	r0, #160	@ 0xa0
			flag_upd_dots = 0;
 8002652:	2200      	movs	r2, #0
			HAL_GPIO_TogglePin(INS_EN_3V3_GPIO_Port, INS_EN_3V3_Pin);
 8002654:	2120      	movs	r1, #32
 8002656:	05c0      	lsls	r0, r0, #23
			flag_upd_dots = 0;
 8002658:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(INS_EN_3V3_GPIO_Port, INS_EN_3V3_Pin);
 800265a:	f001 f987 	bl	800396c <HAL_GPIO_TogglePin>
		if(logic[hmenu.current_item][shared_mask][shared_press_type][hmenu.is_selected] != NULL) {
 800265e:	4c28      	ldr	r4, [pc, #160]	@ (8002700 <main+0x574>)
 8002660:	4d37      	ldr	r5, [pc, #220]	@ (8002740 <main+0x5b4>)
 8002662:	7923      	ldrb	r3, [r4, #4]
 8002664:	682a      	ldr	r2, [r5, #0]
 8002666:	469c      	mov	ip, r3
 8002668:	2303      	movs	r3, #3
 800266a:	4353      	muls	r3, r2
 800266c:	7961      	ldrb	r1, [r4, #5]
 800266e:	4662      	mov	r2, ip
 8002670:	9303      	str	r3, [sp, #12]
 8002672:	2330      	movs	r3, #48	@ 0x30
 8002674:	4353      	muls	r3, r2
 8002676:	9a03      	ldr	r2, [sp, #12]
 8002678:	4f32      	ldr	r7, [pc, #200]	@ (8002744 <main+0x5b8>)
 800267a:	18d3      	adds	r3, r2, r3
 800267c:	2206      	movs	r2, #6
 800267e:	6838      	ldr	r0, [r7, #0]
 8002680:	4342      	muls	r2, r0
 8002682:	189b      	adds	r3, r3, r2
 8002684:	185b      	adds	r3, r3, r1
 8002686:	4a30      	ldr	r2, [pc, #192]	@ (8002748 <main+0x5bc>)
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	589b      	ldr	r3, [r3, r2]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d00e      	beq.n	80026ae <main+0x522>
			(*logic[hmenu.current_item][shared_mask][shared_press_type][hmenu.is_selected])();
 8002690:	4798      	blx	r3
			tubes_data_source_set(&(items_list[hmenu.current_item].numbers[0]), &(items_list[hmenu.current_item].numbers[1]));
 8002692:	20d8      	movs	r0, #216	@ 0xd8
 8002694:	7923      	ldrb	r3, [r4, #4]
 8002696:	4358      	muls	r0, r3
 8002698:	0001      	movs	r1, r0
 800269a:	4b18      	ldr	r3, [pc, #96]	@ (80026fc <main+0x570>)
 800269c:	310c      	adds	r1, #12
 800269e:	300a      	adds	r0, #10
 80026a0:	18c9      	adds	r1, r1, r3
 80026a2:	18c0      	adds	r0, r0, r3
 80026a4:	f7ff fbde 	bl	8001e64 <tubes_data_source_set>
			shared_mask = 0;
 80026a8:	2300      	movs	r3, #0
 80026aa:	603b      	str	r3, [r7, #0]
			shared_press_type = 0;
 80026ac:	602b      	str	r3, [r5, #0]
		lux = calculate_lux();
 80026ae:	f000 fabb 	bl	8002c28 <calculate_lux>
	for (int i = 0; i < num_of_tasks; ++i) {
 80026b2:	2500      	movs	r5, #0
		lux = calculate_lux();
 80026b4:	4b25      	ldr	r3, [pc, #148]	@ (800274c <main+0x5c0>)
 80026b6:	6018      	str	r0, [r3, #0]
		update_request* request = secondary_tasks[i];
 80026b8:	00ab      	lsls	r3, r5, #2
 80026ba:	aa25      	add	r2, sp, #148	@ 0x94
 80026bc:	589c      	ldr	r4, [r3, r2]
		if(*(request->start_condition) == 1) {
 80026be:	6823      	ldr	r3, [r4, #0]
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d10d      	bne.n	80026e2 <main+0x556>
			uint32_t current_tick = HAL_GetTick();
 80026c6:	f000 fe6d 	bl	80033a4 <HAL_GetTick>
			if(current_tick - request->last_upd > request->period) {
 80026ca:	68a3      	ldr	r3, [r4, #8]
 80026cc:	6862      	ldr	r2, [r4, #4]
			uint32_t current_tick = HAL_GetTick();
 80026ce:	0007      	movs	r7, r0
			if(current_tick - request->last_upd > request->period) {
 80026d0:	1ac3      	subs	r3, r0, r3
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d905      	bls.n	80026e2 <main+0x556>
				if(request->upd_func != NULL) {
 80026d6:	68e3      	ldr	r3, [r4, #12]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d006      	beq.n	80026ea <main+0x55e>
					(request->upd_func)();
 80026dc:	68e3      	ldr	r3, [r4, #12]
 80026de:	4798      	blx	r3
					request->last_upd = current_tick;
 80026e0:	60a7      	str	r7, [r4, #8]
	for (int i = 0; i < num_of_tasks; ++i) {
 80026e2:	3501      	adds	r5, #1
 80026e4:	2d07      	cmp	r5, #7
 80026e6:	d1e7      	bne.n	80026b8 <main+0x52c>
 80026e8:	e765      	b.n	80025b6 <main+0x42a>
 80026ea:	b672      	cpsid	i
	while (1)
 80026ec:	e7fe      	b.n	80026ec <main+0x560>
 80026ee:	46c0      	nop			@ (mov r8, r8)
 80026f0:	20000002 	.word	0x20000002
 80026f4:	2000079c 	.word	0x2000079c
 80026f8:	20000e20 	.word	0x20000e20
 80026fc:	20000004 	.word	0x20000004
 8002700:	20000b44 	.word	0x20000b44
 8002704:	20000001 	.word	0x20000001
 8002708:	20000c6c 	.word	0x20000c6c
 800270c:	200007fc 	.word	0x200007fc
 8002710:	20000958 	.word	0x20000958
 8002714:	08006468 	.word	0x08006468
 8002718:	20000919 	.word	0x20000919
 800271c:	fffff830 	.word	0xfffff830
 8002720:	00000292 	.word	0x00000292
 8002724:	0000036a 	.word	0x0000036a
 8002728:	20000954 	.word	0x20000954
 800272c:	00000442 	.word	0x00000442
 8002730:	42c80000 	.word	0x42c80000
 8002734:	00000444 	.word	0x00000444
 8002738:	2000091a 	.word	0x2000091a
 800273c:	20000918 	.word	0x20000918
 8002740:	20000938 	.word	0x20000938
 8002744:	2000093c 	.word	0x2000093c
 8002748:	20000e78 	.word	0x20000e78
 800274c:	20000950 	.word	0x20000950

08002750 <Error_Handler>:
 8002750:	b672      	cpsid	i
 8002752:	e7fe      	b.n	8002752 <Error_Handler+0x2>

08002754 <item_goto_prev>:

	 tubes_data_source_set(&(items[menu->current_item].numbers[0]), &(items[menu->current_item].numbers[1]));
}

void item_goto_prev(void) {
	menu->current_item = items[menu->current_item].prev;
 8002754:	22d8      	movs	r2, #216	@ 0xd8
 8002756:	4b05      	ldr	r3, [pc, #20]	@ (800276c <item_goto_prev+0x18>)
 8002758:	6819      	ldr	r1, [r3, #0]
 800275a:	4b05      	ldr	r3, [pc, #20]	@ (8002770 <item_goto_prev+0x1c>)
 800275c:	7908      	ldrb	r0, [r1, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4342      	muls	r2, r0
 8002762:	189b      	adds	r3, r3, r2
 8002764:	7a1b      	ldrb	r3, [r3, #8]
 8002766:	710b      	strb	r3, [r1, #4]
}
 8002768:	4770      	bx	lr
 800276a:	46c0      	nop			@ (mov r8, r8)
 800276c:	20001540 	.word	0x20001540
 8002770:	2000153c 	.word	0x2000153c

08002774 <item_goto_next>:

void item_goto_next(void) {
	menu->current_item = items[menu->current_item].next;
 8002774:	22d8      	movs	r2, #216	@ 0xd8
 8002776:	4b05      	ldr	r3, [pc, #20]	@ (800278c <item_goto_next+0x18>)
 8002778:	6819      	ldr	r1, [r3, #0]
 800277a:	4b05      	ldr	r3, [pc, #20]	@ (8002790 <item_goto_next+0x1c>)
 800277c:	7908      	ldrb	r0, [r1, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4342      	muls	r2, r0
 8002782:	189b      	adds	r3, r3, r2
 8002784:	7a5b      	ldrb	r3, [r3, #9]
 8002786:	710b      	strb	r3, [r1, #4]
}
 8002788:	4770      	bx	lr
 800278a:	46c0      	nop			@ (mov r8, r8)
 800278c:	20001540 	.word	0x20001540
 8002790:	2000153c 	.word	0x2000153c

08002794 <item_selection_cycle>:
void item_selection_cycle(void) {
//	menu->is_selected = menu->is_selected < NUM_OF_SELECTIONS-1 ? menu->is_selected + 1 : 0;
	switch (menu->is_selected) {
 8002794:	4b13      	ldr	r3, [pc, #76]	@ (80027e4 <item_selection_cycle+0x50>)
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	7953      	ldrb	r3, [r2, #5]
 800279a:	2b01      	cmp	r3, #1
 800279c:	d017      	beq.n	80027ce <item_selection_cycle+0x3a>
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d019      	beq.n	80027d6 <item_selection_cycle+0x42>
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d112      	bne.n	80027cc <item_selection_cycle+0x38>
		case DESELECTED:
			if(menu->current_item == YEAR) {
 80027a6:	7911      	ldrb	r1, [r2, #4]
 80027a8:	4b0f      	ldr	r3, [pc, #60]	@ (80027e8 <item_selection_cycle+0x54>)
 80027aa:	2901      	cmp	r1, #1
 80027ac:	d106      	bne.n	80027bc <item_selection_cycle+0x28>
				menu->is_selected = SELECTED_SECOND_NUM;
 80027ae:	3101      	adds	r1, #1
 80027b0:	7151      	strb	r1, [r2, #5]
				duty_cycles[2] = duty_cycles[3] = 30;
			}
			break;
		case SELECTED_FIRST_NUM:
			menu->is_selected = SELECTED_SECOND_NUM;
			duty_cycles[0] = duty_cycles[1] = 30;
 80027b2:	221e      	movs	r2, #30
 80027b4:	705a      	strb	r2, [r3, #1]
 80027b6:	701a      	strb	r2, [r3, #0]
			duty_cycles[2] = duty_cycles[3] = 90;
 80027b8:	323c      	adds	r2, #60	@ 0x3c
 80027ba:	e005      	b.n	80027c8 <item_selection_cycle+0x34>
				menu->is_selected = SELECTED_FIRST_NUM;
 80027bc:	2101      	movs	r1, #1
 80027be:	7151      	strb	r1, [r2, #5]
				duty_cycles[0] = duty_cycles[1] = 90;
 80027c0:	225a      	movs	r2, #90	@ 0x5a
 80027c2:	705a      	strb	r2, [r3, #1]
 80027c4:	701a      	strb	r2, [r3, #0]
				duty_cycles[2] = duty_cycles[3] = 30;
 80027c6:	3a3c      	subs	r2, #60	@ 0x3c
			break;
		case SELECTED_SECOND_NUM:
			menu->is_selected = DESELECTED;
			duty_cycles[0] = duty_cycles[1] = 90;
			duty_cycles[2] = duty_cycles[3] = 90;
 80027c8:	70da      	strb	r2, [r3, #3]
 80027ca:	709a      	strb	r2, [r3, #2]
			break;
		default:
			break;
	}
}
 80027cc:	4770      	bx	lr
			menu->is_selected = SELECTED_SECOND_NUM;
 80027ce:	2302      	movs	r3, #2
 80027d0:	7153      	strb	r3, [r2, #5]
			duty_cycles[0] = duty_cycles[1] = 30;
 80027d2:	4b05      	ldr	r3, [pc, #20]	@ (80027e8 <item_selection_cycle+0x54>)
 80027d4:	e7ed      	b.n	80027b2 <item_selection_cycle+0x1e>
			menu->is_selected = DESELECTED;
 80027d6:	2300      	movs	r3, #0
 80027d8:	7153      	strb	r3, [r2, #5]
			duty_cycles[0] = duty_cycles[1] = 90;
 80027da:	225a      	movs	r2, #90	@ 0x5a
 80027dc:	4b02      	ldr	r3, [pc, #8]	@ (80027e8 <item_selection_cycle+0x54>)
 80027de:	705a      	strb	r2, [r3, #1]
 80027e0:	701a      	strb	r2, [r3, #0]
 80027e2:	e7f1      	b.n	80027c8 <item_selection_cycle+0x34>
 80027e4:	20001540 	.word	0x20001540
 80027e8:	20000850 	.word	0x20000850

080027ec <year_decrease>:

void year_decrease(void) {
 80027ec:	b510      	push	{r4, lr}
	items[YEAR].numbers[1] = items[YEAR].numbers[1] > 0 ? items[YEAR].numbers[1] - 1 : 99;
 80027ee:	4b08      	ldr	r3, [pc, #32]	@ (8002810 <year_decrease+0x24>)
 80027f0:	2063      	movs	r0, #99	@ 0x63
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	33d8      	adds	r3, #216	@ 0xd8
 80027f6:	899a      	ldrh	r2, [r3, #12]
 80027f8:	2a00      	cmp	r2, #0
 80027fa:	d001      	beq.n	8002800 <year_decrease+0x14>
 80027fc:	3a01      	subs	r2, #1
 80027fe:	b290      	uxth	r0, r2
 8002800:	8198      	strh	r0, [r3, #12]
	DS3231_SetYear(2000 + (uint8_t)items[YEAR].numbers[1]);
 8002802:	23fa      	movs	r3, #250	@ 0xfa
 8002804:	00db      	lsls	r3, r3, #3
 8002806:	b2c0      	uxtb	r0, r0
 8002808:	18c0      	adds	r0, r0, r3
 800280a:	f000 fd3d 	bl	8003288 <DS3231_SetYear>
}
 800280e:	bd10      	pop	{r4, pc}
 8002810:	2000153c 	.word	0x2000153c

08002814 <year_increase>:
void year_increase(void) {
 8002814:	b510      	push	{r4, lr}
	items[YEAR].numbers[1] = items[YEAR].numbers[1] < 99 ? items[YEAR].numbers[1] + 1 : 0;
 8002816:	4b08      	ldr	r3, [pc, #32]	@ (8002838 <year_increase+0x24>)
 8002818:	2000      	movs	r0, #0
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	33d8      	adds	r3, #216	@ 0xd8
 800281e:	899a      	ldrh	r2, [r3, #12]
 8002820:	2a62      	cmp	r2, #98	@ 0x62
 8002822:	d801      	bhi.n	8002828 <year_increase+0x14>
 8002824:	3201      	adds	r2, #1
 8002826:	b290      	uxth	r0, r2
 8002828:	8198      	strh	r0, [r3, #12]
	DS3231_SetYear(2000 + (uint8_t)items[YEAR].numbers[1]);
 800282a:	23fa      	movs	r3, #250	@ 0xfa
 800282c:	00db      	lsls	r3, r3, #3
 800282e:	18c0      	adds	r0, r0, r3
 8002830:	b280      	uxth	r0, r0
 8002832:	f000 fd29 	bl	8003288 <DS3231_SetYear>
}
 8002836:	bd10      	pop	{r4, pc}
 8002838:	2000153c 	.word	0x2000153c

0800283c <month_decrease>:
		day_max = 31;
	}
}

void month_decrease(void) {
	items[DAY_MONTH].numbers[1] = items[DAY_MONTH].numbers[1] > 1 ? items[DAY_MONTH].numbers[1] - 1 : 12;
 800283c:	4b07      	ldr	r3, [pc, #28]	@ (800285c <month_decrease+0x20>)
void month_decrease(void) {
 800283e:	b510      	push	{r4, lr}
	items[DAY_MONTH].numbers[1] = items[DAY_MONTH].numbers[1] > 1 ? items[DAY_MONTH].numbers[1] - 1 : 12;
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	200c      	movs	r0, #12
 8002844:	33b1      	adds	r3, #177	@ 0xb1
 8002846:	33ff      	adds	r3, #255	@ 0xff
 8002848:	899a      	ldrh	r2, [r3, #12]
 800284a:	2a01      	cmp	r2, #1
 800284c:	d901      	bls.n	8002852 <month_decrease+0x16>
 800284e:	3a01      	subs	r2, #1
 8002850:	b290      	uxth	r0, r2
 8002852:	8198      	strh	r0, [r3, #12]
	DS3231_SetMonth((uint8_t)items[DAY_MONTH].numbers[1]);
 8002854:	b2c0      	uxtb	r0, r0
 8002856:	f000 fd06 	bl	8003266 <DS3231_SetMonth>
}
 800285a:	bd10      	pop	{r4, pc}
 800285c:	2000153c 	.word	0x2000153c

08002860 <month_increase>:
void month_increase(void) {
	items[DAY_MONTH].numbers[1] = items[DAY_MONTH].numbers[1] < 11 ? items[DAY_MONTH].numbers[1] + 1 : 1;
 8002860:	4b07      	ldr	r3, [pc, #28]	@ (8002880 <month_increase+0x20>)
void month_increase(void) {
 8002862:	b510      	push	{r4, lr}
	items[DAY_MONTH].numbers[1] = items[DAY_MONTH].numbers[1] < 11 ? items[DAY_MONTH].numbers[1] + 1 : 1;
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	2001      	movs	r0, #1
 8002868:	33b1      	adds	r3, #177	@ 0xb1
 800286a:	33ff      	adds	r3, #255	@ 0xff
 800286c:	899a      	ldrh	r2, [r3, #12]
 800286e:	2a0a      	cmp	r2, #10
 8002870:	d801      	bhi.n	8002876 <month_increase+0x16>
 8002872:	1812      	adds	r2, r2, r0
 8002874:	b290      	uxth	r0, r2
 8002876:	8198      	strh	r0, [r3, #12]
	DS3231_SetMonth((uint8_t)items[DAY_MONTH].numbers[1]);
 8002878:	b2c0      	uxtb	r0, r0
 800287a:	f000 fcf4 	bl	8003266 <DS3231_SetMonth>
}
 800287e:	bd10      	pop	{r4, pc}
 8002880:	2000153c 	.word	0x2000153c

08002884 <hours_decrease>:
	items[DAY_MONTH].numbers[0] = items[DAY_MONTH].numbers[0] < day_max ? items[DAY_MONTH].numbers[0] + 1 : 1;
	DS3231_SetDate((uint8_t)items[DAY_MONTH].numbers[0]);
}

void hours_decrease(void) {
	items[HOURS_MINUTES].numbers[0] = items[HOURS_MINUTES].numbers[0] > 0 ? items[HOURS_MINUTES].numbers[0] - 1 : 23;
 8002884:	22a2      	movs	r2, #162	@ 0xa2
void hours_decrease(void) {
 8002886:	b510      	push	{r4, lr}
	items[HOURS_MINUTES].numbers[0] = items[HOURS_MINUTES].numbers[0] > 0 ? items[HOURS_MINUTES].numbers[0] - 1 : 23;
 8002888:	4b07      	ldr	r3, [pc, #28]	@ (80028a8 <hours_decrease+0x24>)
 800288a:	0092      	lsls	r2, r2, #2
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2017      	movs	r0, #23
 8002890:	189b      	adds	r3, r3, r2
 8002892:	895a      	ldrh	r2, [r3, #10]
 8002894:	2a00      	cmp	r2, #0
 8002896:	d001      	beq.n	800289c <hours_decrease+0x18>
 8002898:	3a01      	subs	r2, #1
 800289a:	b290      	uxth	r0, r2
 800289c:	8158      	strh	r0, [r3, #10]
	DS3231_SetHour((uint8_t)items[HOURS_MINUTES].numbers[0]);
 800289e:	b2c0      	uxtb	r0, r0
 80028a0:	f000 fd15 	bl	80032ce <DS3231_SetHour>
}
 80028a4:	bd10      	pop	{r4, pc}
 80028a6:	46c0      	nop			@ (mov r8, r8)
 80028a8:	2000153c 	.word	0x2000153c

080028ac <hours_increase>:
void hours_increase(void) {
	items[HOURS_MINUTES].numbers[0] = items[HOURS_MINUTES].numbers[0] < 23 ? items[HOURS_MINUTES].numbers[0] + 1 : 0;
 80028ac:	22a2      	movs	r2, #162	@ 0xa2
void hours_increase(void) {
 80028ae:	b510      	push	{r4, lr}
	items[HOURS_MINUTES].numbers[0] = items[HOURS_MINUTES].numbers[0] < 23 ? items[HOURS_MINUTES].numbers[0] + 1 : 0;
 80028b0:	4b07      	ldr	r3, [pc, #28]	@ (80028d0 <hours_increase+0x24>)
 80028b2:	0092      	lsls	r2, r2, #2
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	2000      	movs	r0, #0
 80028b8:	189b      	adds	r3, r3, r2
 80028ba:	895a      	ldrh	r2, [r3, #10]
 80028bc:	2a16      	cmp	r2, #22
 80028be:	d801      	bhi.n	80028c4 <hours_increase+0x18>
 80028c0:	3201      	adds	r2, #1
 80028c2:	b290      	uxth	r0, r2
 80028c4:	8158      	strh	r0, [r3, #10]
	DS3231_SetHour((uint8_t)items[HOURS_MINUTES].numbers[0]);
 80028c6:	b2c0      	uxtb	r0, r0
 80028c8:	f000 fd01 	bl	80032ce <DS3231_SetHour>
}
 80028cc:	bd10      	pop	{r4, pc}
 80028ce:	46c0      	nop			@ (mov r8, r8)
 80028d0:	2000153c 	.word	0x2000153c

080028d4 <minutes_decrease>:
void minutes_decrease(void) {
	items[HOURS_MINUTES].numbers[1] = items[HOURS_MINUTES].numbers[1] > 0 ? items[HOURS_MINUTES].numbers[1] - 1 : 59;
 80028d4:	22a2      	movs	r2, #162	@ 0xa2
void minutes_decrease(void) {
 80028d6:	b510      	push	{r4, lr}
	items[HOURS_MINUTES].numbers[1] = items[HOURS_MINUTES].numbers[1] > 0 ? items[HOURS_MINUTES].numbers[1] - 1 : 59;
 80028d8:	4b08      	ldr	r3, [pc, #32]	@ (80028fc <minutes_decrease+0x28>)
 80028da:	0092      	lsls	r2, r2, #2
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	203b      	movs	r0, #59	@ 0x3b
 80028e0:	189b      	adds	r3, r3, r2
 80028e2:	899a      	ldrh	r2, [r3, #12]
 80028e4:	2a00      	cmp	r2, #0
 80028e6:	d001      	beq.n	80028ec <minutes_decrease+0x18>
 80028e8:	3a01      	subs	r2, #1
 80028ea:	b290      	uxth	r0, r2
 80028ec:	8198      	strh	r0, [r3, #12]
	DS3231_SetMinute((uint8_t)items[HOURS_MINUTES].numbers[1]);
 80028ee:	b2c0      	uxtb	r0, r0
 80028f0:	f000 fcf7 	bl	80032e2 <DS3231_SetMinute>
	DS3231_SetSecond(0);
 80028f4:	2000      	movs	r0, #0
 80028f6:	f000 fcfc 	bl	80032f2 <DS3231_SetSecond>
}
 80028fa:	bd10      	pop	{r4, pc}
 80028fc:	2000153c 	.word	0x2000153c

08002900 <minutes_increase>:
void minutes_increase(void) {
	items[HOURS_MINUTES].numbers[1] = items[HOURS_MINUTES].numbers[1] < 59 ? items[HOURS_MINUTES].numbers[1] + 1 : 0;
 8002900:	22a2      	movs	r2, #162	@ 0xa2
void minutes_increase(void) {
 8002902:	b510      	push	{r4, lr}
	items[HOURS_MINUTES].numbers[1] = items[HOURS_MINUTES].numbers[1] < 59 ? items[HOURS_MINUTES].numbers[1] + 1 : 0;
 8002904:	4b08      	ldr	r3, [pc, #32]	@ (8002928 <minutes_increase+0x28>)
 8002906:	0092      	lsls	r2, r2, #2
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	2000      	movs	r0, #0
 800290c:	189b      	adds	r3, r3, r2
 800290e:	899a      	ldrh	r2, [r3, #12]
 8002910:	2a3a      	cmp	r2, #58	@ 0x3a
 8002912:	d801      	bhi.n	8002918 <minutes_increase+0x18>
 8002914:	3201      	adds	r2, #1
 8002916:	b290      	uxth	r0, r2
 8002918:	8198      	strh	r0, [r3, #12]
	DS3231_SetMinute((uint8_t)items[HOURS_MINUTES].numbers[1]);
 800291a:	b2c0      	uxtb	r0, r0
 800291c:	f000 fce1 	bl	80032e2 <DS3231_SetMinute>
	DS3231_SetSecond(0);
 8002920:	2000      	movs	r0, #0
 8002922:	f000 fce6 	bl	80032f2 <DS3231_SetSecond>
}
 8002926:	bd10      	pop	{r4, pc}
 8002928:	2000153c 	.word	0x2000153c

0800292c <numbers_on_off>:
}

static void numbers_on_off(void) {
	static int status = 0;

	if(status == 0) {
 800292c:	4b08      	ldr	r3, [pc, #32]	@ (8002950 <numbers_on_off+0x24>)
static void numbers_on_off(void) {
 800292e:	b510      	push	{r4, lr}
	if(status == 0) {
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	2a00      	cmp	r2, #0
 8002934:	d107      	bne.n	8002946 <numbers_on_off+0x1a>
		status = 1;
 8002936:	2101      	movs	r1, #1
 8002938:	6019      	str	r1, [r3, #0]
	HAL_GPIO_WritePin(SHDN_170V_3V3_GPIO_Port, SHDN_170V_3V3_Pin, GPIO_PIN_RESET);
 800293a:	310f      	adds	r1, #15
	HAL_GPIO_WritePin(SHDN_170V_3V3_GPIO_Port, SHDN_170V_3V3_Pin, GPIO_PIN_SET);
 800293c:	20a0      	movs	r0, #160	@ 0xa0
 800293e:	05c0      	lsls	r0, r0, #23
 8002940:	f001 f80e 	bl	8003960 <HAL_GPIO_WritePin>
		status = 0;
		numbers_hide();
	}

//	TOGGLE_170V();
}
 8002944:	bd10      	pop	{r4, pc}
		status = 0;
 8002946:	2200      	movs	r2, #0
	HAL_GPIO_WritePin(SHDN_170V_3V3_GPIO_Port, SHDN_170V_3V3_Pin, GPIO_PIN_SET);
 8002948:	2110      	movs	r1, #16
		status = 0;
 800294a:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(SHDN_170V_3V3_GPIO_Port, SHDN_170V_3V3_Pin, GPIO_PIN_SET);
 800294c:	3201      	adds	r2, #1
 800294e:	e7f5      	b.n	800293c <numbers_on_off+0x10>
 8002950:	20000e74 	.word	0x20000e74

08002954 <check_max_date.isra.0>:
static uint8_t check_max_date() {
 8002954:	b510      	push	{r4, lr}
	uint8_t year = DS3231_GetYear();
 8002956:	f000 fc48 	bl	80031ea <DS3231_GetYear>
 800295a:	0004      	movs	r4, r0
	if(DS3231_GetMonth()%2 == 0) {
 800295c:	f000 fc3c 	bl	80031d8 <DS3231_GetMonth>
 8002960:	211f      	movs	r1, #31
 8002962:	07c0      	lsls	r0, r0, #31
 8002964:	d40f      	bmi.n	8002986 <check_max_date.isra.0+0x32>
		if(DS3231_GetMonth() == 2) {	// If February
 8002966:	f000 fc37 	bl	80031d8 <DS3231_GetMonth>
 800296a:	211e      	movs	r1, #30
 800296c:	2802      	cmp	r0, #2
 800296e:	d10a      	bne.n	8002986 <check_max_date.isra.0+0x32>
	uint8_t year = DS3231_GetYear();
 8002970:	b2e0      	uxtb	r0, r4
			day_max = (year%4 == 0) && (year%100 != 0) ? 29 : 28; // Check for leap year
 8002972:	3902      	subs	r1, #2
 8002974:	07a4      	lsls	r4, r4, #30
 8002976:	d106      	bne.n	8002986 <check_max_date.isra.0+0x32>
 8002978:	3148      	adds	r1, #72	@ 0x48
 800297a:	f7fd fc55 	bl	8000228 <__aeabi_uidivmod>
 800297e:	b2c9      	uxtb	r1, r1
 8002980:	1e4b      	subs	r3, r1, #1
 8002982:	4199      	sbcs	r1, r3
 8002984:	311c      	adds	r1, #28
 8002986:	4b01      	ldr	r3, [pc, #4]	@ (800298c <check_max_date.isra.0+0x38>)
 8002988:	7019      	strb	r1, [r3, #0]
}
 800298a:	bd10      	pop	{r4, pc}
 800298c:	20001538 	.word	0x20001538

08002990 <days_increase>:
void days_increase(void) {
 8002990:	b510      	push	{r4, lr}
	check_max_date();
 8002992:	f7ff ffdf 	bl	8002954 <check_max_date.isra.0>
	items[DAY_MONTH].numbers[0] = items[DAY_MONTH].numbers[0] < day_max ? items[DAY_MONTH].numbers[0] + 1 : 1;
 8002996:	4b08      	ldr	r3, [pc, #32]	@ (80029b8 <days_increase+0x28>)
 8002998:	4908      	ldr	r1, [pc, #32]	@ (80029bc <days_increase+0x2c>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	7809      	ldrb	r1, [r1, #0]
 800299e:	33b1      	adds	r3, #177	@ 0xb1
 80029a0:	33ff      	adds	r3, #255	@ 0xff
 80029a2:	895a      	ldrh	r2, [r3, #10]
 80029a4:	2001      	movs	r0, #1
 80029a6:	4291      	cmp	r1, r2
 80029a8:	d901      	bls.n	80029ae <days_increase+0x1e>
 80029aa:	1812      	adds	r2, r2, r0
 80029ac:	b290      	uxth	r0, r2
 80029ae:	8158      	strh	r0, [r3, #10]
	DS3231_SetDate((uint8_t)items[DAY_MONTH].numbers[0]);
 80029b0:	b2c0      	uxtb	r0, r0
 80029b2:	f000 fc50 	bl	8003256 <DS3231_SetDate>
}
 80029b6:	bd10      	pop	{r4, pc}
 80029b8:	2000153c 	.word	0x2000153c
 80029bc:	20001538 	.word	0x20001538

080029c0 <days_decrease>:
void days_decrease(void) {
 80029c0:	b510      	push	{r4, lr}
	check_max_date();
 80029c2:	f7ff ffc7 	bl	8002954 <check_max_date.isra.0>
	items[DAY_MONTH].numbers[0] = items[DAY_MONTH].numbers[0] > 1 ? items[DAY_MONTH].numbers[0] - 1 : day_max;
 80029c6:	4b08      	ldr	r3, [pc, #32]	@ (80029e8 <days_decrease+0x28>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	33b1      	adds	r3, #177	@ 0xb1
 80029cc:	33ff      	adds	r3, #255	@ 0xff
 80029ce:	8958      	ldrh	r0, [r3, #10]
 80029d0:	2801      	cmp	r0, #1
 80029d2:	d906      	bls.n	80029e2 <days_decrease+0x22>
 80029d4:	3801      	subs	r0, #1
 80029d6:	b280      	uxth	r0, r0
 80029d8:	8158      	strh	r0, [r3, #10]
	DS3231_SetDate((uint8_t)items[DAY_MONTH].numbers[0]);
 80029da:	b2c0      	uxtb	r0, r0
 80029dc:	f000 fc3b 	bl	8003256 <DS3231_SetDate>
}
 80029e0:	bd10      	pop	{r4, pc}
	items[DAY_MONTH].numbers[0] = items[DAY_MONTH].numbers[0] > 1 ? items[DAY_MONTH].numbers[0] - 1 : day_max;
 80029e2:	4a02      	ldr	r2, [pc, #8]	@ (80029ec <days_decrease+0x2c>)
 80029e4:	7810      	ldrb	r0, [r2, #0]
 80029e6:	e7f7      	b.n	80029d8 <days_decrease+0x18>
 80029e8:	2000153c 	.word	0x2000153c
 80029ec:	20001538 	.word	0x20001538

080029f0 <init_menu_functions>:

static menu_toggle(void) {

}

void init_menu_functions(void) {
 80029f0:	b5f0      	push	{r4, r5, r6, r7, lr}
	for(int item = 0; item < NUM_OF_ITEMS; ++item) {
 80029f2:	2400      	movs	r4, #0
 80029f4:	4a20      	ldr	r2, [pc, #128]	@ (8002a78 <init_menu_functions+0x88>)
			}
		}
		logic[item][MASK_ENTER]	[CLICK][DESELECTED] = numbers_on_off; //item_selection_cycle;
		logic[item][MASK_ENTER]	[HOLD][DESELECTED] = item_selection_cycle;

		logic[item][MASK_LEFT]	[CLICK][DESELECTED] = item_goto_prev; // Goes to a previous item when "is_selected == 0" and decreases parameter
 80029f6:	4921      	ldr	r1, [pc, #132]	@ (8002a7c <init_menu_functions+0x8c>)
 80029f8:	0013      	movs	r3, r2
					logic[item][mask][press][selection] 	= NULL;
 80029fa:	0020      	movs	r0, r4
		logic[item][MASK_LEFT]	[CLICK][DESELECTED] = item_goto_prev; // Goes to a previous item when "is_selected == 0" and decreases parameter
 80029fc:	468c      	mov	ip, r1
		logic[item][MASK_ENTER]	[CLICK][DESELECTED] = numbers_on_off; //item_selection_cycle;
 80029fe:	4f20      	ldr	r7, [pc, #128]	@ (8002a80 <init_menu_functions+0x90>)
		logic[item][MASK_ENTER]	[HOLD][DESELECTED] = item_selection_cycle;
 8002a00:	4e20      	ldr	r6, [pc, #128]	@ (8002a84 <init_menu_functions+0x94>)
void init_menu_functions(void) {
 8002a02:	0011      	movs	r1, r2
		for(int mask = 0; mask < NUM_OF_BTN_COMBINATIONS; ++mask) {
 8002a04:	2500      	movs	r5, #0
 8002a06:	3501      	adds	r5, #1
					logic[item][mask][press][selection] 	= NULL;
 8002a08:	6008      	str	r0, [r1, #0]
 8002a0a:	6048      	str	r0, [r1, #4]
 8002a0c:	6088      	str	r0, [r1, #8]
 8002a0e:	60c8      	str	r0, [r1, #12]
 8002a10:	6108      	str	r0, [r1, #16]
 8002a12:	6148      	str	r0, [r1, #20]
		for(int mask = 0; mask < NUM_OF_BTN_COMBINATIONS; ++mask) {
 8002a14:	3118      	adds	r1, #24
 8002a16:	2d08      	cmp	r5, #8
 8002a18:	d1f5      	bne.n	8002a06 <init_menu_functions+0x16>
		logic[item][MASK_LEFT]	[CLICK][DESELECTED] = item_goto_prev; // Goes to a previous item when "is_selected == 0" and decreases parameter
 8002a1a:	4661      	mov	r1, ip
 8002a1c:	6191      	str	r1, [r2, #24]
		logic[item][MASK_RIGHT]	[CLICK][DESELECTED] = item_goto_next; // Goes to a previous item when "is_selected == 0" and decreases parameter
 8002a1e:	491a      	ldr	r1, [pc, #104]	@ (8002a88 <init_menu_functions+0x98>)
	for(int item = 0; item < NUM_OF_ITEMS; ++item) {
 8002a20:	3401      	adds	r4, #1
		logic[item][MASK_ENTER]	[CLICK][DESELECTED] = numbers_on_off; //item_selection_cycle;
 8002a22:	6317      	str	r7, [r2, #48]	@ 0x30
		logic[item][MASK_ENTER]	[HOLD][DESELECTED] = item_selection_cycle;
 8002a24:	63d6      	str	r6, [r2, #60]	@ 0x3c
		logic[item][MASK_RIGHT]	[CLICK][DESELECTED] = item_goto_next; // Goes to a previous item when "is_selected == 0" and decreases parameter
 8002a26:	6611      	str	r1, [r2, #96]	@ 0x60
		logic[item][MASK_ENTER]	[CLICK][SELECTED_FIRST_NUM] = item_selection_cycle;
 8002a28:	6356      	str	r6, [r2, #52]	@ 0x34
		logic[item][MASK_ENTER]	[CLICK][SELECTED_SECOND_NUM] = item_selection_cycle;
 8002a2a:	6396      	str	r6, [r2, #56]	@ 0x38
	for(int item = 0; item < NUM_OF_ITEMS; ++item) {
 8002a2c:	32c0      	adds	r2, #192	@ 0xc0
 8002a2e:	2c09      	cmp	r4, #9
 8002a30:	d1e7      	bne.n	8002a02 <init_menu_functions+0x12>
//		logic[item][MASK_ENTER]	[HOLD] 	= confirm_parameter_value;
	}

	logic[YEAR][MASK_LEFT]	[CLICK][SELECTED_SECOND_NUM] = year_decrease; // Goes to a previous item when "is_selected == 0" and decreases parameter
 8002a32:	001a      	movs	r2, r3
 8002a34:	4915      	ldr	r1, [pc, #84]	@ (8002a8c <init_menu_functions+0x9c>)
 8002a36:	32e0      	adds	r2, #224	@ 0xe0
 8002a38:	6011      	str	r1, [r2, #0]
	logic[YEAR][MASK_RIGHT][CLICK][SELECTED_SECOND_NUM] = year_increase;
 8002a3a:	001a      	movs	r2, r3
 8002a3c:	4914      	ldr	r1, [pc, #80]	@ (8002a90 <init_menu_functions+0xa0>)
 8002a3e:	32fc      	adds	r2, #252	@ 0xfc
 8002a40:	62d1      	str	r1, [r2, #44]	@ 0x2c

	logic[DAY_MONTH][MASK_LEFT]	[CLICK][SELECTED_FIRST_NUM] = days_decrease; // Goes to a previous item when "is_selected == 0" and decreases parameter
 8002a42:	21ce      	movs	r1, #206	@ 0xce
 8002a44:	4a13      	ldr	r2, [pc, #76]	@ (8002a94 <init_menu_functions+0xa4>)
 8002a46:	0049      	lsls	r1, r1, #1
 8002a48:	505a      	str	r2, [r3, r1]
	logic[DAY_MONTH][MASK_RIGHT][CLICK][SELECTED_FIRST_NUM] = days_increase;
 8002a4a:	4a13      	ldr	r2, [pc, #76]	@ (8002a98 <init_menu_functions+0xa8>)
 8002a4c:	3148      	adds	r1, #72	@ 0x48
 8002a4e:	505a      	str	r2, [r3, r1]
	logic[DAY_MONTH][MASK_LEFT]	[CLICK][SELECTED_SECOND_NUM] = month_decrease; // Goes to a previous item when "is_selected == 0" and decreases parameter
 8002a50:	4a12      	ldr	r2, [pc, #72]	@ (8002a9c <init_menu_functions+0xac>)
 8002a52:	3944      	subs	r1, #68	@ 0x44
 8002a54:	505a      	str	r2, [r3, r1]
	logic[DAY_MONTH][MASK_RIGHT][CLICK][SELECTED_SECOND_NUM] = month_increase;
 8002a56:	4a12      	ldr	r2, [pc, #72]	@ (8002aa0 <init_menu_functions+0xb0>)
 8002a58:	3148      	adds	r1, #72	@ 0x48
 8002a5a:	505a      	str	r2, [r3, r1]

	logic[HOURS_MINUTES][MASK_LEFT]	[CLICK][SELECTED_FIRST_NUM] = hours_decrease; // Goes to a previous item when "is_selected == 0" and decreases parameter
 8002a5c:	4a11      	ldr	r2, [pc, #68]	@ (8002aa4 <init_menu_functions+0xb4>)
 8002a5e:	3174      	adds	r1, #116	@ 0x74
 8002a60:	505a      	str	r2, [r3, r1]
	logic[HOURS_MINUTES][MASK_RIGHT][CLICK][SELECTED_FIRST_NUM] = hours_increase;
 8002a62:	4a11      	ldr	r2, [pc, #68]	@ (8002aa8 <init_menu_functions+0xb8>)
 8002a64:	3148      	adds	r1, #72	@ 0x48
 8002a66:	505a      	str	r2, [r3, r1]
	logic[HOURS_MINUTES][MASK_LEFT]	[CLICK][SELECTED_SECOND_NUM] = minutes_decrease; // Goes to a previous item when "is_selected == 0" and decreases parameter
 8002a68:	4a10      	ldr	r2, [pc, #64]	@ (8002aac <init_menu_functions+0xbc>)
 8002a6a:	3944      	subs	r1, #68	@ 0x44
 8002a6c:	505a      	str	r2, [r3, r1]
	logic[HOURS_MINUTES][MASK_RIGHT][CLICK][SELECTED_SECOND_NUM] = minutes_increase;
 8002a6e:	4a10      	ldr	r2, [pc, #64]	@ (8002ab0 <init_menu_functions+0xc0>)
 8002a70:	3148      	adds	r1, #72	@ 0x48
 8002a72:	505a      	str	r2, [r3, r1]
}
 8002a74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a76:	46c0      	nop			@ (mov r8, r8)
 8002a78:	20000e78 	.word	0x20000e78
 8002a7c:	08002755 	.word	0x08002755
 8002a80:	0800292d 	.word	0x0800292d
 8002a84:	08002795 	.word	0x08002795
 8002a88:	08002775 	.word	0x08002775
 8002a8c:	080027ed 	.word	0x080027ed
 8002a90:	08002815 	.word	0x08002815
 8002a94:	080029c1 	.word	0x080029c1
 8002a98:	08002991 	.word	0x08002991
 8002a9c:	0800283d 	.word	0x0800283d
 8002aa0:	08002861 	.word	0x08002861
 8002aa4:	08002885 	.word	0x08002885
 8002aa8:	080028ad 	.word	0x080028ad
 8002aac:	080028d5 	.word	0x080028d5
 8002ab0:	08002901 	.word	0x08002901

08002ab4 <init_menu_items>:
void init_menu_items(Menu_HandleTypeDef* user_menu, Item_TypeDef* user_items, uint16_t number_of_menus, uint16_t number_of_items) {
 8002ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
	items 				= user_items;
 8002ab6:	4b36      	ldr	r3, [pc, #216]	@ (8002b90 <init_menu_items+0xdc>)
void init_menu_items(Menu_HandleTypeDef* user_menu, Item_TypeDef* user_items, uint16_t number_of_menus, uint16_t number_of_items) {
 8002ab8:	b085      	sub	sp, #20
	items 				= user_items;
 8002aba:	9301      	str	r3, [sp, #4]
 8002abc:	6019      	str	r1, [r3, #0]
	for(MenuType target_menu = 0; target_menu < NUM_OF_MENUS; ++target_menu) {
 8002abe:	2200      	movs	r2, #0
	ItemType selected 	= 1;
 8002ac0:	2301      	movs	r3, #1
			if(items[i].menu == target_menu) {
 8002ac2:	24d8      	movs	r4, #216	@ 0xd8
	menu 				= user_menu;
 8002ac4:	4e33      	ldr	r6, [pc, #204]	@ (8002b94 <init_menu_items+0xe0>)
 8002ac6:	6030      	str	r0, [r6, #0]
void init_menu_items(Menu_HandleTypeDef* user_menu, Item_TypeDef* user_items, uint16_t number_of_menus, uint16_t number_of_items) {
 8002ac8:	2700      	movs	r7, #0
 8002aca:	0038      	movs	r0, r7
			if(items[i].menu == target_menu) {
 8002acc:	0025      	movs	r5, r4
 8002ace:	437d      	muls	r5, r7
 8002ad0:	5d4d      	ldrb	r5, [r1, r5]
 8002ad2:	4295      	cmp	r5, r2
 8002ad4:	d106      	bne.n	8002ae4 <init_menu_items+0x30>
 8002ad6:	b2fd      	uxtb	r5, r7
				if(first_item == 0) {
 8002ad8:	2800      	cmp	r0, #0
 8002ada:	d056      	beq.n	8002b8a <init_menu_items+0xd6>
				items[selected].next = i;
 8002adc:	4363      	muls	r3, r4
 8002ade:	18cb      	adds	r3, r1, r3
 8002ae0:	725d      	strb	r5, [r3, #9]
 8002ae2:	002b      	movs	r3, r5
		for(ItemType i = 0; i < NUM_OF_ITEMS; ++i) {
 8002ae4:	3701      	adds	r7, #1
 8002ae6:	2f09      	cmp	r7, #9
 8002ae8:	d1f0      	bne.n	8002acc <init_menu_items+0x18>
		items[selected].next = first_item;
 8002aea:	4363      	muls	r3, r4
	for(MenuType target_menu = 0; target_menu < NUM_OF_MENUS; ++target_menu) {
 8002aec:	3201      	adds	r2, #1
		items[selected].next = first_item;
 8002aee:	18cb      	adds	r3, r1, r3
	for(MenuType target_menu = 0; target_menu < NUM_OF_MENUS; ++target_menu) {
 8002af0:	b2d2      	uxtb	r2, r2
		items[selected].next = first_item;
 8002af2:	7258      	strb	r0, [r3, #9]
		selected = first_item = 0;
 8002af4:	2300      	movs	r3, #0
	for(MenuType target_menu = 0; target_menu < NUM_OF_MENUS; ++target_menu) {
 8002af6:	2a03      	cmp	r2, #3
 8002af8:	d1e6      	bne.n	8002ac8 <init_menu_items+0x14>
			if(items[prev].next == current)
 8002afa:	000f      	movs	r7, r1
	for(int current = 1; current < NUM_OF_ITEMS; ++current) {
 8002afc:	2201      	movs	r2, #1
 8002afe:	20d8      	movs	r0, #216	@ 0xd8
			if(items[prev].next == current)
 8002b00:	3709      	adds	r7, #9
				items[current].prev = prev;
 8002b02:	3108      	adds	r1, #8
		for(int prev = 1; prev < NUM_OF_ITEMS; ++prev) {
 8002b04:	0004      	movs	r4, r0
 8002b06:	2301      	movs	r3, #1
 8002b08:	4354      	muls	r4, r2
			if(items[prev].next == current)
 8002b0a:	0005      	movs	r5, r0
 8002b0c:	435d      	muls	r5, r3
 8002b0e:	5d7d      	ldrb	r5, [r7, r5]
 8002b10:	4295      	cmp	r5, r2
 8002b12:	d100      	bne.n	8002b16 <init_menu_items+0x62>
				items[current].prev = prev;
 8002b14:	550b      	strb	r3, [r1, r4]
		for(int prev = 1; prev < NUM_OF_ITEMS; ++prev) {
 8002b16:	3301      	adds	r3, #1
 8002b18:	2b09      	cmp	r3, #9
 8002b1a:	d1f6      	bne.n	8002b0a <init_menu_items+0x56>
	for(int current = 1; current < NUM_OF_ITEMS; ++current) {
 8002b1c:	3201      	adds	r2, #1
 8002b1e:	2a09      	cmp	r2, #9
 8002b20:	d1f0      	bne.n	8002b04 <init_menu_items+0x50>
	init_menu_functions();
 8002b22:	f7ff ff65 	bl	80029f0 <init_menu_functions>
	volatile HAL_StatusTypeDef status = 0;
 8002b26:	2100      	movs	r1, #0
	status = HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t *)&duty_cycles[0], 1);
 8002b28:	4c1b      	ldr	r4, [pc, #108]	@ (8002b98 <init_menu_items+0xe4>)
	volatile HAL_StatusTypeDef status = 0;
 8002b2a:	ab02      	add	r3, sp, #8
 8002b2c:	1ddf      	adds	r7, r3, #7
 8002b2e:	71d9      	strb	r1, [r3, #7]
	status = HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t *)&duty_cycles[0], 1);
 8002b30:	0020      	movs	r0, r4
 8002b32:	2301      	movs	r3, #1
 8002b34:	4a19      	ldr	r2, [pc, #100]	@ (8002b9c <init_menu_items+0xe8>)
 8002b36:	f002 f9a4 	bl	8004e82 <HAL_TIM_PWM_Start_DMA>
	status = HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_2, (uint32_t *)&duty_cycles[1], 1);
 8002b3a:	2301      	movs	r3, #1
	status = HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t *)&duty_cycles[0], 1);
 8002b3c:	7038      	strb	r0, [r7, #0]
	status = HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_2, (uint32_t *)&duty_cycles[1], 1);
 8002b3e:	2104      	movs	r1, #4
 8002b40:	0020      	movs	r0, r4
 8002b42:	4a17      	ldr	r2, [pc, #92]	@ (8002ba0 <init_menu_items+0xec>)
 8002b44:	f002 f99d 	bl	8004e82 <HAL_TIM_PWM_Start_DMA>
	status = HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_3, (uint32_t *)&duty_cycles[2], 1);
 8002b48:	2301      	movs	r3, #1
	status = HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_2, (uint32_t *)&duty_cycles[1], 1);
 8002b4a:	7038      	strb	r0, [r7, #0]
	status = HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_3, (uint32_t *)&duty_cycles[2], 1);
 8002b4c:	2108      	movs	r1, #8
 8002b4e:	0020      	movs	r0, r4
 8002b50:	4a14      	ldr	r2, [pc, #80]	@ (8002ba4 <init_menu_items+0xf0>)
 8002b52:	f002 f996 	bl	8004e82 <HAL_TIM_PWM_Start_DMA>
	status = HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_4, (uint32_t *)&duty_cycles[3], 1);
 8002b56:	2301      	movs	r3, #1
 8002b58:	210c      	movs	r1, #12
 8002b5a:	4a13      	ldr	r2, [pc, #76]	@ (8002ba8 <init_menu_items+0xf4>)
	status = HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_3, (uint32_t *)&duty_cycles[2], 1);
 8002b5c:	7038      	strb	r0, [r7, #0]
	status = HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_4, (uint32_t *)&duty_cycles[3], 1);
 8002b5e:	0020      	movs	r0, r4
 8002b60:	f002 f98f 	bl	8004e82 <HAL_TIM_PWM_Start_DMA>
 8002b64:	7038      	strb	r0, [r7, #0]
	status = HAL_TIM_Base_Start_IT(&htim2);
 8002b66:	0020      	movs	r0, r4
 8002b68:	f002 f838 	bl	8004bdc <HAL_TIM_Base_Start_IT>
	menu->current_item = HOURS_MINUTES;
 8002b6c:	2203      	movs	r2, #3
 8002b6e:	6833      	ldr	r3, [r6, #0]
	status = HAL_TIM_Base_Start_IT(&htim2);
 8002b70:	7038      	strb	r0, [r7, #0]
	menu->current_item = HOURS_MINUTES;
 8002b72:	711a      	strb	r2, [r3, #4]
	 tubes_data_source_set(&(items[menu->current_item].numbers[0]), &(items[menu->current_item].numbers[1]));
 8002b74:	9b01      	ldr	r3, [sp, #4]
 8002b76:	6818      	ldr	r0, [r3, #0]
 8002b78:	23a5      	movs	r3, #165	@ 0xa5
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	18c1      	adds	r1, r0, r3
 8002b7e:	4b0b      	ldr	r3, [pc, #44]	@ (8002bac <init_menu_items+0xf8>)
 8002b80:	18c0      	adds	r0, r0, r3
 8002b82:	f7ff f96f 	bl	8001e64 <tubes_data_source_set>
}
 8002b86:	b005      	add	sp, #20
 8002b88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b8a:	0028      	movs	r0, r5
 8002b8c:	002b      	movs	r3, r5
 8002b8e:	e7a9      	b.n	8002ae4 <init_menu_items+0x30>
 8002b90:	2000153c 	.word	0x2000153c
 8002b94:	20001540 	.word	0x20001540
 8002b98:	20000cac 	.word	0x20000cac
 8002b9c:	20000850 	.word	0x20000850
 8002ba0:	20000851 	.word	0x20000851
 8002ba4:	20000852 	.word	0x20000852
 8002ba8:	20000853 	.word	0x20000853
 8002bac:	00000292 	.word	0x00000292

08002bb0 <opt3001_writedata>:

static uint8_t device_addr= OPT3001_ADDR1;
static uint16_t config_data= 0xCE10;        //The sensor works in continuous operation mode by default.


void opt3001_writedata(uint8_t device_addr, uint8_t register_addr, uint16_t data){
 8002bb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002bb2:	0013      	movs	r3, r2

	 uint8_t buffer[3];
	 buffer[0] = register_addr;
 8002bb4:	aa03      	add	r2, sp, #12
 8002bb6:	7011      	strb	r1, [r2, #0]
	 buffer[1] = (data)>>8;
	 buffer[2] = (data)& 0x00FF;
 8002bb8:	7093      	strb	r3, [r2, #2]
	 buffer[1] = (data)>>8;
 8002bba:	0a19      	lsrs	r1, r3, #8
	 HAL_I2C_Master_Transmit(&hi2c1, device_addr<<1, buffer, 3, 50);
 8002bbc:	2332      	movs	r3, #50	@ 0x32
	 buffer[1] = (data)>>8;
 8002bbe:	7051      	strb	r1, [r2, #1]
	 HAL_I2C_Master_Transmit(&hi2c1, device_addr<<1, buffer, 3, 50);
 8002bc0:	0041      	lsls	r1, r0, #1
 8002bc2:	9300      	str	r3, [sp, #0]
 8002bc4:	4802      	ldr	r0, [pc, #8]	@ (8002bd0 <opt3001_writedata+0x20>)
 8002bc6:	3b2f      	subs	r3, #47	@ 0x2f
 8002bc8:	f001 f8a6 	bl	8003d18 <HAL_I2C_Master_Transmit>
 }
 8002bcc:	b005      	add	sp, #20
 8002bce:	bd00      	pop	{pc}
 8002bd0:	20000e20 	.word	0x20000e20

08002bd4 <opt3001_readdata>:


uint16_t opt3001_readdata(){
 8002bd4:	b51f      	push	{r0, r1, r2, r3, r4, lr}

	uint8_t readbuffer[2];
	uint16_t received_data;
	HAL_I2C_Master_Receive(&hi2c1, device_addr<<1, readbuffer, 2, 50);
 8002bd6:	2332      	movs	r3, #50	@ 0x32
 8002bd8:	ac03      	add	r4, sp, #12
 8002bda:	9300      	str	r3, [sp, #0]
 8002bdc:	0022      	movs	r2, r4
 8002bde:	2188      	movs	r1, #136	@ 0x88
 8002be0:	3b30      	subs	r3, #48	@ 0x30
 8002be2:	4804      	ldr	r0, [pc, #16]	@ (8002bf4 <opt3001_readdata+0x20>)
 8002be4:	f001 f924 	bl	8003e30 <HAL_I2C_Master_Receive>
	received_data = ((readbuffer[0] << 8) | readbuffer[1]);
 8002be8:	8820      	ldrh	r0, [r4, #0]
 8002bea:	ba40      	rev16	r0, r0
 8002bec:	b280      	uxth	r0, r0
	
	return received_data;
}
 8002bee:	b004      	add	sp, #16
 8002bf0:	bd10      	pop	{r4, pc}
 8002bf2:	46c0      	nop			@ (mov r8, r8)
 8002bf4:	20000e20 	.word	0x20000e20

08002bf8 <opt3001_init>:

uint8_t opt3001_init(){

	if (HAL_I2C_IsDeviceReady(&hi2c1, device_addr<<1, 1, 20000) != HAL_OK){
 8002bf8:	4b08      	ldr	r3, [pc, #32]	@ (8002c1c <opt3001_init+0x24>)
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	2188      	movs	r1, #136	@ 0x88
uint8_t opt3001_init(){
 8002bfe:	b510      	push	{r4, lr}
	if (HAL_I2C_IsDeviceReady(&hi2c1, device_addr<<1, 1, 20000) != HAL_OK){
 8002c00:	4807      	ldr	r0, [pc, #28]	@ (8002c20 <opt3001_init+0x28>)
 8002c02:	f001 f9a3 	bl	8003f4c <HAL_I2C_IsDeviceReady>
		/* Return false */
		return 0;
 8002c06:	2300      	movs	r3, #0
	if (HAL_I2C_IsDeviceReady(&hi2c1, device_addr<<1, 1, 20000) != HAL_OK){
 8002c08:	4298      	cmp	r0, r3
 8002c0a:	d105      	bne.n	8002c18 <opt3001_init+0x20>
	}

	opt3001_writedata(device_addr, OPT3001_ConfigReg, config_data);
 8002c0c:	2101      	movs	r1, #1
 8002c0e:	2044      	movs	r0, #68	@ 0x44
 8002c10:	4a04      	ldr	r2, [pc, #16]	@ (8002c24 <opt3001_init+0x2c>)
 8002c12:	f7ff ffcd 	bl	8002bb0 <opt3001_writedata>
	return 1;
 8002c16:	2301      	movs	r3, #1
}
 8002c18:	0018      	movs	r0, r3
 8002c1a:	bd10      	pop	{r4, pc}
 8002c1c:	00004e20 	.word	0x00004e20
 8002c20:	20000e20 	.word	0x20000e20
 8002c24:	0000ce10 	.word	0x0000ce10

08002c28 <calculate_lux>:
	
	uint16_t iExponent, iMantissa;
    float final_lux;
    uint16_t rawlux;

    opt3001_writedata(device_addr, OPT3001_ResultReg, 0x00);
 8002c28:	2200      	movs	r2, #0
float calculate_lux(){
 8002c2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    opt3001_writedata(device_addr, OPT3001_ResultReg, 0x00);
 8002c2c:	0011      	movs	r1, r2
 8002c2e:	2044      	movs	r0, #68	@ 0x44
 8002c30:	f7ff ffbe 	bl	8002bb0 <opt3001_writedata>
    HAL_Delay(50);
 8002c34:	2032      	movs	r0, #50	@ 0x32
 8002c36:	f000 fbbb 	bl	80033b0 <HAL_Delay>
    rawlux = opt3001_readdata();
 8002c3a:	f7ff ffcb 	bl	8002bd4 <opt3001_readdata>
 8002c3e:	0004      	movs	r4, r0
    iMantissa = rawlux & 0x0FFF;
    iExponent = (rawlux & 0xF000) >> 12;
 8002c40:	0b00      	lsrs	r0, r0, #12
    final_lux = iMantissa * (0.01 * powf(2, iExponent));
 8002c42:	b280      	uxth	r0, r0
 8002c44:	f7fe fc2c 	bl	80014a0 <__aeabi_ui2f>
 8002c48:	1c01      	adds	r1, r0, #0
 8002c4a:	2080      	movs	r0, #128	@ 0x80
 8002c4c:	05c0      	lsls	r0, r0, #23
 8002c4e:	f002 ff51 	bl	8005af4 <powf>
    iMantissa = rawlux & 0x0FFF;
 8002c52:	0524      	lsls	r4, r4, #20
    final_lux = iMantissa * (0.01 * powf(2, iExponent));
 8002c54:	1c05      	adds	r5, r0, #0
 8002c56:	0d20      	lsrs	r0, r4, #20
 8002c58:	f7fe ff2c 	bl	8001ab4 <__aeabi_i2d>
 8002c5c:	0006      	movs	r6, r0
 8002c5e:	1c28      	adds	r0, r5, #0
 8002c60:	000f      	movs	r7, r1
 8002c62:	f7fe ff55 	bl	8001b10 <__aeabi_f2d>
 8002c66:	4a06      	ldr	r2, [pc, #24]	@ (8002c80 <calculate_lux+0x58>)
 8002c68:	4b06      	ldr	r3, [pc, #24]	@ (8002c84 <calculate_lux+0x5c>)
 8002c6a:	f7fe fc5b 	bl	8001524 <__aeabi_dmul>
 8002c6e:	0002      	movs	r2, r0
 8002c70:	000b      	movs	r3, r1
 8002c72:	0030      	movs	r0, r6
 8002c74:	0039      	movs	r1, r7
 8002c76:	f7fe fc55 	bl	8001524 <__aeabi_dmul>
 8002c7a:	f7fe ff91 	bl	8001ba0 <__aeabi_d2f>
	
    return final_lux;
}
 8002c7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c80:	47ae147b 	.word	0x47ae147b
 8002c84:	3f847ae1 	.word	0x3f847ae1

08002c88 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c88:	2201      	movs	r2, #1
 8002c8a:	4b05      	ldr	r3, [pc, #20]	@ (8002ca0 <HAL_MspInit+0x18>)
 8002c8c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002c8e:	430a      	orrs	r2, r1
 8002c90:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c92:	2280      	movs	r2, #128	@ 0x80
 8002c94:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8002c96:	0552      	lsls	r2, r2, #21
 8002c98:	430a      	orrs	r2, r1
 8002c9a:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c9c:	4770      	bx	lr
 8002c9e:	46c0      	nop			@ (mov r8, r8)
 8002ca0:	40021000 	.word	0x40021000

08002ca4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ca4:	b510      	push	{r4, lr}
 8002ca6:	0004      	movs	r4, r0
 8002ca8:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002caa:	2214      	movs	r2, #20
 8002cac:	2100      	movs	r1, #0
 8002cae:	a801      	add	r0, sp, #4
 8002cb0:	f002 fee6 	bl	8005a80 <memset>
  if(hi2c->Instance==I2C1)
 8002cb4:	4b10      	ldr	r3, [pc, #64]	@ (8002cf8 <HAL_I2C_MspInit+0x54>)
 8002cb6:	6822      	ldr	r2, [r4, #0]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d11a      	bne.n	8002cf2 <HAL_I2C_MspInit+0x4e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	4c0f      	ldr	r4, [pc, #60]	@ (8002cfc <HAL_I2C_MspInit+0x58>)
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cc0:	20a0      	movs	r0, #160	@ 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cc2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cc4:	a901      	add	r1, sp, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cc6:	431a      	orrs	r2, r3
 8002cc8:	62e2      	str	r2, [r4, #44]	@ 0x2c
 8002cca:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ccc:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cce:	401a      	ands	r2, r3
 8002cd0:	9200      	str	r2, [sp, #0]
 8002cd2:	9a00      	ldr	r2, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002cd4:	22c0      	movs	r2, #192	@ 0xc0
 8002cd6:	00d2      	lsls	r2, r2, #3
 8002cd8:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002cda:	2212      	movs	r2, #18
 8002cdc:	9202      	str	r2, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cde:	3a0f      	subs	r2, #15
 8002ce0:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8002ce2:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ce4:	f000 fd82 	bl	80037ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002ce8:	2380      	movs	r3, #128	@ 0x80
 8002cea:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8002cec:	039b      	lsls	r3, r3, #14
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	63a3      	str	r3, [r4, #56]	@ 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002cf2:	b006      	add	sp, #24
 8002cf4:	bd10      	pop	{r4, pc}
 8002cf6:	46c0      	nop			@ (mov r8, r8)
 8002cf8:	40005400 	.word	0x40005400
 8002cfc:	40021000 	.word	0x40021000

08002d00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d00:	b510      	push	{r4, lr}
 8002d02:	0004      	movs	r4, r0
 8002d04:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d06:	2214      	movs	r2, #20
 8002d08:	2100      	movs	r1, #0
 8002d0a:	a803      	add	r0, sp, #12
 8002d0c:	f002 feb8 	bl	8005a80 <memset>
  if(huart->Instance==LPUART1)
 8002d10:	6823      	ldr	r3, [r4, #0]
 8002d12:	4a1c      	ldr	r2, [pc, #112]	@ (8002d84 <HAL_UART_MspInit+0x84>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d11c      	bne.n	8002d52 <HAL_UART_MspInit+0x52>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002d18:	2280      	movs	r2, #128	@ 0x80
 8002d1a:	4b1b      	ldr	r3, [pc, #108]	@ (8002d88 <HAL_UART_MspInit+0x88>)
 8002d1c:	02d2      	lsls	r2, r2, #11
 8002d1e:	6b99      	ldr	r1, [r3, #56]	@ 0x38
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d20:	20a0      	movs	r0, #160	@ 0xa0
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002d22:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d24:	2101      	movs	r1, #1
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002d26:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d2a:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d2c:	430a      	orrs	r2, r1
 8002d2e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002d30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d32:	400b      	ands	r3, r1
 8002d34:	9301      	str	r3, [sp, #4]
 8002d36:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002d38:	230c      	movs	r3, #12
 8002d3a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d3c:	3b0a      	subs	r3, #10
 8002d3e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d40:	185b      	adds	r3, r3, r1
 8002d42:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8002d44:	3303      	adds	r3, #3
 8002d46:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d48:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF0_USART2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d4a:	f000 fd4f 	bl	80037ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002d4e:	b008      	add	sp, #32
 8002d50:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART2)
 8002d52:	4a0e      	ldr	r2, [pc, #56]	@ (8002d8c <HAL_UART_MspInit+0x8c>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d1fa      	bne.n	8002d4e <HAL_UART_MspInit+0x4e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d58:	2280      	movs	r2, #128	@ 0x80
 8002d5a:	4b0b      	ldr	r3, [pc, #44]	@ (8002d88 <HAL_UART_MspInit+0x88>)
 8002d5c:	0292      	lsls	r2, r2, #10
 8002d5e:	6b99      	ldr	r1, [r3, #56]	@ 0x38
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d60:	480b      	ldr	r0, [pc, #44]	@ (8002d90 <HAL_UART_MspInit+0x90>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d62:	430a      	orrs	r2, r1
 8002d64:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d66:	2202      	movs	r2, #2
 8002d68:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002d6a:	4311      	orrs	r1, r2
 8002d6c:	62d9      	str	r1, [r3, #44]	@ 0x2c
 8002d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d70:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d72:	4013      	ands	r3, r2
 8002d74:	9302      	str	r3, [sp, #8]
 8002d76:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002d78:	23c0      	movs	r3, #192	@ 0xc0
 8002d7a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d7c:	3bbd      	subs	r3, #189	@ 0xbd
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d7e:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d80:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d82:	e7e2      	b.n	8002d4a <HAL_UART_MspInit+0x4a>
 8002d84:	40004800 	.word	0x40004800
 8002d88:	40021000 	.word	0x40021000
 8002d8c:	40004400 	.word	0x40004400
 8002d90:	50000400 	.word	0x50000400

08002d94 <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 8002d94:	4b05      	ldr	r3, [pc, #20]	@ (8002dac <HAL_RTC_MspInit+0x18>)
 8002d96:	6802      	ldr	r2, [r0, #0]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d105      	bne.n	8002da8 <HAL_RTC_MspInit+0x14>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002d9c:	2380      	movs	r3, #128	@ 0x80
 8002d9e:	4a04      	ldr	r2, [pc, #16]	@ (8002db0 <HAL_RTC_MspInit+0x1c>)
 8002da0:	02db      	lsls	r3, r3, #11
 8002da2:	6d11      	ldr	r1, [r2, #80]	@ 0x50
 8002da4:	430b      	orrs	r3, r1
 8002da6:	6513      	str	r3, [r2, #80]	@ 0x50
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002da8:	4770      	bx	lr
 8002daa:	46c0      	nop			@ (mov r8, r8)
 8002dac:	40002800 	.word	0x40002800
 8002db0:	40021000 	.word	0x40021000

08002db4 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 8002db4:	2280      	movs	r2, #128	@ 0x80
 8002db6:	6803      	ldr	r3, [r0, #0]
{
 8002db8:	b570      	push	{r4, r5, r6, lr}
  if(htim_base->Instance==TIM2)
 8002dba:	05d2      	lsls	r2, r2, #23
{
 8002dbc:	0005      	movs	r5, r0
  if(htim_base->Instance==TIM2)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d000      	beq.n	8002dc4 <HAL_TIM_Base_MspInit+0x10>
 8002dc2:	e075      	b.n	8002eb0 <HAL_TIM_Base_MspInit+0xfc>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	4a42      	ldr	r2, [pc, #264]	@ (8002ed0 <HAL_TIM_Base_MspInit+0x11c>)

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 8002dc8:	4c42      	ldr	r4, [pc, #264]	@ (8002ed4 <HAL_TIM_Base_MspInit+0x120>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002dca:	6b91      	ldr	r1, [r2, #56]	@ 0x38
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_DISABLE;
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8002dcc:	0020      	movs	r0, r4
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002dce:	430b      	orrs	r3, r1
 8002dd0:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 8002dd2:	4b41      	ldr	r3, [pc, #260]	@ (8002ed8 <HAL_TIM_Base_MspInit+0x124>)
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002dd4:	2280      	movs	r2, #128	@ 0x80
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 8002dd6:	6023      	str	r3, [r4, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_8;
 8002dd8:	2308      	movs	r3, #8
 8002dda:	6063      	str	r3, [r4, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ddc:	18db      	adds	r3, r3, r3
 8002dde:	60a3      	str	r3, [r4, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002de0:	2300      	movs	r3, #0
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002de2:	0052      	lsls	r2, r2, #1
 8002de4:	6162      	str	r2, [r4, #20]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8002de6:	3ae0      	subs	r2, #224	@ 0xe0
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002de8:	60e3      	str	r3, [r4, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_DISABLE;
 8002dea:	6123      	str	r3, [r4, #16]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002dec:	61a3      	str	r3, [r4, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8002dee:	61e2      	str	r2, [r4, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002df0:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8002df2:	f000 fb3f 	bl	8003474 <HAL_DMA_Init>
 8002df6:	2800      	cmp	r0, #0
 8002df8:	d001      	beq.n	8002dfe <HAL_TIM_Base_MspInit+0x4a>
    {
      Error_Handler();
 8002dfa:	f7ff fca9 	bl	8002750 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8002dfe:	622c      	str	r4, [r5, #32]

    /* TIM2_CH2 Init */
    hdma_tim2_ch2.Instance = DMA1_Channel3;
 8002e00:	4b36      	ldr	r3, [pc, #216]	@ (8002edc <HAL_TIM_Base_MspInit+0x128>)
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8002e02:	62a5      	str	r5, [r4, #40]	@ 0x28
    hdma_tim2_ch2.Instance = DMA1_Channel3;
 8002e04:	4c36      	ldr	r4, [pc, #216]	@ (8002ee0 <HAL_TIM_Base_MspInit+0x12c>)
    hdma_tim2_ch2.Init.Request = DMA_REQUEST_8;
    hdma_tim2_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_tim2_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_tim2_ch2.Init.MemInc = DMA_MINC_DISABLE;
    hdma_tim2_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002e06:	2280      	movs	r2, #128	@ 0x80
    hdma_tim2_ch2.Instance = DMA1_Channel3;
 8002e08:	6023      	str	r3, [r4, #0]
    hdma_tim2_ch2.Init.Request = DMA_REQUEST_8;
 8002e0a:	2308      	movs	r3, #8
 8002e0c:	6063      	str	r3, [r4, #4]
    hdma_tim2_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e0e:	18db      	adds	r3, r3, r3
 8002e10:	60a3      	str	r3, [r4, #8]
    hdma_tim2_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e12:	2300      	movs	r3, #0
    hdma_tim2_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002e14:	0052      	lsls	r2, r2, #1
 8002e16:	6162      	str	r2, [r4, #20]
    hdma_tim2_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_tim2_ch2.Init.Mode = DMA_CIRCULAR;
    hdma_tim2_ch2.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_tim2_ch2) != HAL_OK)
 8002e18:	0020      	movs	r0, r4
    hdma_tim2_ch2.Init.Mode = DMA_CIRCULAR;
 8002e1a:	3ae0      	subs	r2, #224	@ 0xe0
    hdma_tim2_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e1c:	60e3      	str	r3, [r4, #12]
    hdma_tim2_ch2.Init.MemInc = DMA_MINC_DISABLE;
 8002e1e:	6123      	str	r3, [r4, #16]
    hdma_tim2_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e20:	61a3      	str	r3, [r4, #24]
    hdma_tim2_ch2.Init.Mode = DMA_CIRCULAR;
 8002e22:	61e2      	str	r2, [r4, #28]
    hdma_tim2_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8002e24:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch2) != HAL_OK)
 8002e26:	f000 fb25 	bl	8003474 <HAL_DMA_Init>
 8002e2a:	2800      	cmp	r0, #0
 8002e2c:	d001      	beq.n	8002e32 <HAL_TIM_Base_MspInit+0x7e>
    {
      Error_Handler();
 8002e2e:	f7ff fc8f 	bl	8002750 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2);

    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Channel1;
 8002e32:	4b2c      	ldr	r3, [pc, #176]	@ (8002ee4 <HAL_TIM_Base_MspInit+0x130>)
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2);
 8002e34:	626c      	str	r4, [r5, #36]	@ 0x24
 8002e36:	62a5      	str	r5, [r4, #40]	@ 0x28
    hdma_tim2_ch3.Instance = DMA1_Channel1;
 8002e38:	4c2b      	ldr	r4, [pc, #172]	@ (8002ee8 <HAL_TIM_Base_MspInit+0x134>)
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_8;
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_DISABLE;
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002e3a:	2280      	movs	r2, #128	@ 0x80
    hdma_tim2_ch3.Instance = DMA1_Channel1;
 8002e3c:	6023      	str	r3, [r4, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_8;
 8002e3e:	2308      	movs	r3, #8
 8002e40:	6063      	str	r3, [r4, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e42:	18db      	adds	r3, r3, r3
 8002e44:	60a3      	str	r3, [r4, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e46:	2300      	movs	r3, #0
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002e48:	0052      	lsls	r2, r2, #1
 8002e4a:	6162      	str	r2, [r4, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_tim2_ch3.Init.Mode = DMA_CIRCULAR;
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 8002e4c:	0020      	movs	r0, r4
    hdma_tim2_ch3.Init.Mode = DMA_CIRCULAR;
 8002e4e:	3ae0      	subs	r2, #224	@ 0xe0
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e50:	60e3      	str	r3, [r4, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_DISABLE;
 8002e52:	6123      	str	r3, [r4, #16]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e54:	61a3      	str	r3, [r4, #24]
    hdma_tim2_ch3.Init.Mode = DMA_CIRCULAR;
 8002e56:	61e2      	str	r2, [r4, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8002e58:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 8002e5a:	f000 fb0b 	bl	8003474 <HAL_DMA_Init>
 8002e5e:	2800      	cmp	r0, #0
 8002e60:	d001      	beq.n	8002e66 <HAL_TIM_Base_MspInit+0xb2>
    {
      Error_Handler();
 8002e62:	f7ff fc75 	bl	8002750 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);

    /* TIM2_CH4 Init */
    hdma_tim2_ch4.Instance = DMA1_Channel4;
 8002e66:	4b21      	ldr	r3, [pc, #132]	@ (8002eec <HAL_TIM_Base_MspInit+0x138>)
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 8002e68:	62ac      	str	r4, [r5, #40]	@ 0x28
 8002e6a:	62a5      	str	r5, [r4, #40]	@ 0x28
    hdma_tim2_ch4.Instance = DMA1_Channel4;
 8002e6c:	4c20      	ldr	r4, [pc, #128]	@ (8002ef0 <HAL_TIM_Base_MspInit+0x13c>)
    hdma_tim2_ch4.Init.Request = DMA_REQUEST_8;
    hdma_tim2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_tim2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_tim2_ch4.Init.MemInc = DMA_MINC_DISABLE;
    hdma_tim2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002e6e:	2280      	movs	r2, #128	@ 0x80
    hdma_tim2_ch4.Instance = DMA1_Channel4;
 8002e70:	6023      	str	r3, [r4, #0]
    hdma_tim2_ch4.Init.Request = DMA_REQUEST_8;
 8002e72:	2308      	movs	r3, #8
 8002e74:	6063      	str	r3, [r4, #4]
    hdma_tim2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e76:	18db      	adds	r3, r3, r3
 8002e78:	60a3      	str	r3, [r4, #8]
    hdma_tim2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e7a:	2300      	movs	r3, #0
    hdma_tim2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002e7c:	0052      	lsls	r2, r2, #1
 8002e7e:	6162      	str	r2, [r4, #20]
    hdma_tim2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_tim2_ch4.Init.Mode = DMA_CIRCULAR;
    hdma_tim2_ch4.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_tim2_ch4) != HAL_OK)
 8002e80:	0020      	movs	r0, r4
    hdma_tim2_ch4.Init.Mode = DMA_CIRCULAR;
 8002e82:	3ae0      	subs	r2, #224	@ 0xe0
    hdma_tim2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e84:	60e3      	str	r3, [r4, #12]
    hdma_tim2_ch4.Init.MemInc = DMA_MINC_DISABLE;
 8002e86:	6123      	str	r3, [r4, #16]
    hdma_tim2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e88:	61a3      	str	r3, [r4, #24]
    hdma_tim2_ch4.Init.Mode = DMA_CIRCULAR;
 8002e8a:	61e2      	str	r2, [r4, #28]
    hdma_tim2_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8002e8c:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch4) != HAL_OK)
 8002e8e:	f000 faf1 	bl	8003474 <HAL_DMA_Init>
 8002e92:	2800      	cmp	r0, #0
 8002e94:	d001      	beq.n	8002e9a <HAL_TIM_Base_MspInit+0xe6>
    {
      Error_Handler();
 8002e96:	f7ff fc5b 	bl	8002750 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch4);

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8002e9a:	200f      	movs	r0, #15
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	2101      	movs	r1, #1
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch4);
 8002ea0:	62ec      	str	r4, [r5, #44]	@ 0x2c
 8002ea2:	62a5      	str	r5, [r4, #40]	@ 0x28
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8002ea4:	f000 fa96 	bl	80033d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002ea8:	200f      	movs	r0, #15
  /* USER CODE END TIM21_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM21_CLK_ENABLE();
    /* TIM21 interrupt Init */
    HAL_NVIC_SetPriority(TIM21_IRQn, 3, 0);
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
 8002eaa:	f000 fabd 	bl	8003428 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM21_MspInit 1 */

  /* USER CODE END TIM21_MspInit 1 */
  }

}
 8002eae:	bd70      	pop	{r4, r5, r6, pc}
  else if(htim_base->Instance==TIM21)
 8002eb0:	4a10      	ldr	r2, [pc, #64]	@ (8002ef4 <HAL_TIM_Base_MspInit+0x140>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d1fb      	bne.n	8002eae <HAL_TIM_Base_MspInit+0xfa>
    __HAL_RCC_TIM21_CLK_ENABLE();
 8002eb6:	2304      	movs	r3, #4
 8002eb8:	4a05      	ldr	r2, [pc, #20]	@ (8002ed0 <HAL_TIM_Base_MspInit+0x11c>)
    HAL_NVIC_SetPriority(TIM21_IRQn, 3, 0);
 8002eba:	2014      	movs	r0, #20
    __HAL_RCC_TIM21_CLK_ENABLE();
 8002ebc:	6b51      	ldr	r1, [r2, #52]	@ 0x34
 8002ebe:	430b      	orrs	r3, r1
 8002ec0:	6353      	str	r3, [r2, #52]	@ 0x34
    HAL_NVIC_SetPriority(TIM21_IRQn, 3, 0);
 8002ec2:	2103      	movs	r1, #3
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f000 fa85 	bl	80033d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
 8002eca:	2014      	movs	r0, #20
 8002ecc:	e7ed      	b.n	8002eaa <HAL_TIM_Base_MspInit+0xf6>
 8002ece:	46c0      	nop			@ (mov r8, r8)
 8002ed0:	40021000 	.word	0x40021000
 8002ed4:	20000c24 	.word	0x20000c24
 8002ed8:	40020058 	.word	0x40020058
 8002edc:	40020030 	.word	0x40020030
 8002ee0:	20000bdc 	.word	0x20000bdc
 8002ee4:	40020008 	.word	0x40020008
 8002ee8:	20000b94 	.word	0x20000b94
 8002eec:	40020044 	.word	0x40020044
 8002ef0:	20000b4c 	.word	0x20000b4c
 8002ef4:	40010800 	.word	0x40010800

08002ef8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ef8:	e7fe      	b.n	8002ef8 <NMI_Handler>

08002efa <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002efa:	e7fe      	b.n	8002efa <HardFault_Handler>

08002efc <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002efc:	4770      	bx	lr

08002efe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8002efe:	4770      	bx	lr

08002f00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f00:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f02:	f000 fa43 	bl	800338c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f06:	bd10      	pop	{r4, pc}

08002f08 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002f08:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 8002f0a:	4802      	ldr	r0, [pc, #8]	@ (8002f14 <DMA1_Channel1_IRQHandler+0xc>)
 8002f0c:	f000 fb34 	bl	8003578 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002f10:	bd10      	pop	{r4, pc}
 8002f12:	46c0      	nop			@ (mov r8, r8)
 8002f14:	20000b94 	.word	0x20000b94

08002f18 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8002f18:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2);
 8002f1a:	4802      	ldr	r0, [pc, #8]	@ (8002f24 <DMA1_Channel2_3_IRQHandler+0xc>)
 8002f1c:	f000 fb2c 	bl	8003578 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8002f20:	bd10      	pop	{r4, pc}
 8002f22:	46c0      	nop			@ (mov r8, r8)
 8002f24:	20000bdc 	.word	0x20000bdc

08002f28 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8002f28:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch4);
 8002f2a:	4803      	ldr	r0, [pc, #12]	@ (8002f38 <DMA1_Channel4_5_6_7_IRQHandler+0x10>)
 8002f2c:	f000 fb24 	bl	8003578 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8002f30:	4802      	ldr	r0, [pc, #8]	@ (8002f3c <DMA1_Channel4_5_6_7_IRQHandler+0x14>)
 8002f32:	f000 fb21 	bl	8003578 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8002f36:	bd10      	pop	{r4, pc}
 8002f38:	20000b4c 	.word	0x20000b4c
 8002f3c:	20000c24 	.word	0x20000c24

08002f40 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002f40:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002f42:	4802      	ldr	r0, [pc, #8]	@ (8002f4c <TIM2_IRQHandler+0xc>)
 8002f44:	f002 f92a 	bl	800519c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002f48:	bd10      	pop	{r4, pc}
 8002f4a:	46c0      	nop			@ (mov r8, r8)
 8002f4c:	20000cac 	.word	0x20000cac

08002f50 <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 8002f50:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM21_IRQn 0 */

  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
 8002f52:	4802      	ldr	r0, [pc, #8]	@ (8002f5c <TIM21_IRQHandler+0xc>)
 8002f54:	f002 f922 	bl	800519c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 8002f58:	bd10      	pop	{r4, pc}
 8002f5a:	46c0      	nop			@ (mov r8, r8)
 8002f5c:	20000c6c 	.word	0x20000c6c

08002f60 <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f60:	4770      	bx	lr
	...

08002f64 <Write_Register>:
	Write_Register(0x01, 0x2000);


}

void Write_Register(uint8_t register_pointer, uint16_t register_value) {
 8002f64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t data[3];
	data[0] = register_pointer;     // TMP75_ADDR
	data[1] = register_value >> 8;    // MSB byte of 16bit data
 8002f66:	0a0b      	lsrs	r3, r1, #8
	data[0] = register_pointer;     // TMP75_ADDR
 8002f68:	aa03      	add	r2, sp, #12
	data[1] = register_value >> 8;    // MSB byte of 16bit data
 8002f6a:	7053      	strb	r3, [r2, #1]
	data[2] = register_value;       // LSB byte of 16bit data

	HAL_I2C_Master_Transmit(i2c, TMP75_ADDR, data, 3, 100);
 8002f6c:	2364      	movs	r3, #100	@ 0x64
	data[0] = register_pointer;     // TMP75_ADDR
 8002f6e:	7010      	strb	r0, [r2, #0]
	HAL_I2C_Master_Transmit(i2c, TMP75_ADDR, data, 3, 100);
 8002f70:	4804      	ldr	r0, [pc, #16]	@ (8002f84 <Write_Register+0x20>)
	data[2] = register_value;       // LSB byte of 16bit data
 8002f72:	7091      	strb	r1, [r2, #2]
	HAL_I2C_Master_Transmit(i2c, TMP75_ADDR, data, 3, 100);
 8002f74:	9300      	str	r3, [sp, #0]
 8002f76:	2190      	movs	r1, #144	@ 0x90
 8002f78:	3b61      	subs	r3, #97	@ 0x61
 8002f7a:	6800      	ldr	r0, [r0, #0]
 8002f7c:	f000 fecc 	bl	8003d18 <HAL_I2C_Master_Transmit>

}
 8002f80:	b005      	add	sp, #20
 8002f82:	bd00      	pop	{pc}
 8002f84:	20001544 	.word	0x20001544

08002f88 <Tmp75_Init>:
void Tmp75_Init(I2C_HandleTypeDef* handle) {
 8002f88:	b513      	push	{r0, r1, r4, lr}
 8002f8a:	4c0a      	ldr	r4, [pc, #40]	@ (8002fb4 <Tmp75_Init+0x2c>)
	if(handle != NULL) i2c = handle;
 8002f8c:	2800      	cmp	r0, #0
 8002f8e:	d000      	beq.n	8002f92 <Tmp75_Init+0xa>
 8002f90:	6020      	str	r0, [r4, #0]
	volatile HAL_StatusTypeDef stat = HAL_I2C_IsDeviceReady(i2c, TMP75_ADDR, 3, 100);
 8002f92:	2364      	movs	r3, #100	@ 0x64
 8002f94:	2203      	movs	r2, #3
 8002f96:	2190      	movs	r1, #144	@ 0x90
 8002f98:	6820      	ldr	r0, [r4, #0]
 8002f9a:	f000 ffd7 	bl	8003f4c <HAL_I2C_IsDeviceReady>
 8002f9e:	466b      	mov	r3, sp
	Write_Register(0x01, 0x2000);
 8002fa0:	2180      	movs	r1, #128	@ 0x80
	stat = 0;
 8002fa2:	2200      	movs	r2, #0
	volatile HAL_StatusTypeDef stat = HAL_I2C_IsDeviceReady(i2c, TMP75_ADDR, 3, 100);
 8002fa4:	71d8      	strb	r0, [r3, #7]
	Write_Register(0x01, 0x2000);
 8002fa6:	0189      	lsls	r1, r1, #6
 8002fa8:	2001      	movs	r0, #1
	stat = 0;
 8002faa:	71da      	strb	r2, [r3, #7]
	Write_Register(0x01, 0x2000);
 8002fac:	f7ff ffda 	bl	8002f64 <Write_Register>
}
 8002fb0:	bd13      	pop	{r0, r1, r4, pc}
 8002fb2:	46c0      	nop			@ (mov r8, r8)
 8002fb4:	20001544 	.word	0x20001544

08002fb8 <Read_Register>:

void Read_Register(uint8_t register_pointer, uint8_t* receive_buffer) {
 8002fb8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8002fba:	220f      	movs	r2, #15
	// first set the register pointer to the register wanted to be read
	HAL_I2C_Master_Transmit(i2c, TMP75_ADDR, &register_pointer, 1, 100);
 8002fbc:	2664      	movs	r6, #100	@ 0x64
void Read_Register(uint8_t register_pointer, uint8_t* receive_buffer) {
 8002fbe:	000d      	movs	r5, r1
	HAL_I2C_Master_Transmit(i2c, TMP75_ADDR, &register_pointer, 1, 100);
 8002fc0:	4c08      	ldr	r4, [pc, #32]	@ (8002fe4 <Read_Register+0x2c>)
void Read_Register(uint8_t register_pointer, uint8_t* receive_buffer) {
 8002fc2:	446a      	add	r2, sp
 8002fc4:	7010      	strb	r0, [r2, #0]
	HAL_I2C_Master_Transmit(i2c, TMP75_ADDR, &register_pointer, 1, 100);
 8002fc6:	9600      	str	r6, [sp, #0]
 8002fc8:	2301      	movs	r3, #1
 8002fca:	2190      	movs	r1, #144	@ 0x90
 8002fcc:	6820      	ldr	r0, [r4, #0]
 8002fce:	f000 fea3 	bl	8003d18 <HAL_I2C_Master_Transmit>

	// receive the 2 x 8bit data into the receive buffer
	HAL_I2C_Master_Receive(i2c, TMP75_ADDR, receive_buffer, 2, 100);
 8002fd2:	9600      	str	r6, [sp, #0]
 8002fd4:	002a      	movs	r2, r5
 8002fd6:	2302      	movs	r3, #2
 8002fd8:	2190      	movs	r1, #144	@ 0x90
 8002fda:	6820      	ldr	r0, [r4, #0]
 8002fdc:	f000 ff28 	bl	8003e30 <HAL_I2C_Master_Receive>
}
 8002fe0:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
 8002fe2:	46c0      	nop			@ (mov r8, r8)
 8002fe4:	20001544 	.word	0x20001544

08002fe8 <Read_TempCelsius>:
void One_ShotTemp(void) {
	//One-Shot register = 0x04 and write any value to start aconversion
	Write_Register(0x04, 0x0000);
}

void Read_TempCelsius(float *receive_buffer) {
 8002fe8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t buffer[2];
	uint16_t TempSum;
	Read_Register(0x00, buffer);
 8002fea:	ad01      	add	r5, sp, #4
 8002fec:	0029      	movs	r1, r5
void Read_TempCelsius(float *receive_buffer) {
 8002fee:	0004      	movs	r4, r0
	Read_Register(0x00, buffer);
 8002ff0:	2000      	movs	r0, #0
 8002ff2:	f7ff ffe1 	bl	8002fb8 <Read_Register>
	TempSum = (((buffer[0] << 8) | buffer[1]) >> 4);
 8002ff6:	882b      	ldrh	r3, [r5, #0]
 8002ff8:	ba5b      	rev16	r3, r3
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	1118      	asrs	r0, r3, #4
	*receive_buffer = (TempSum * FTMP75_TEMP_AD_STEP);
 8002ffe:	f7fe fd59 	bl	8001ab4 <__aeabi_i2d>
 8003002:	2200      	movs	r2, #0
 8003004:	4b03      	ldr	r3, [pc, #12]	@ (8003014 <Read_TempCelsius+0x2c>)
 8003006:	f7fe fa8d 	bl	8001524 <__aeabi_dmul>
 800300a:	f7fe fdc9 	bl	8001ba0 <__aeabi_d2f>
 800300e:	6020      	str	r0, [r4, #0]
}
 8003010:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 8003012:	46c0      	nop			@ (mov r8, r8)
 8003014:	3fb00000 	.word	0x3fb00000

08003018 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8003018:	480d      	ldr	r0, [pc, #52]	@ (8003050 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800301a:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 800301c:	f7ff ffa0 	bl	8002f60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003020:	480c      	ldr	r0, [pc, #48]	@ (8003054 <LoopForever+0x6>)
  ldr r1, =_edata
 8003022:	490d      	ldr	r1, [pc, #52]	@ (8003058 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003024:	4a0d      	ldr	r2, [pc, #52]	@ (800305c <LoopForever+0xe>)
  movs r3, #0
 8003026:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003028:	e002      	b.n	8003030 <LoopCopyDataInit>

0800302a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800302a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800302c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800302e:	3304      	adds	r3, #4

08003030 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003030:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003032:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003034:	d3f9      	bcc.n	800302a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003036:	4a0a      	ldr	r2, [pc, #40]	@ (8003060 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003038:	4c0a      	ldr	r4, [pc, #40]	@ (8003064 <LoopForever+0x16>)
  movs r3, #0
 800303a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800303c:	e001      	b.n	8003042 <LoopFillZerobss>

0800303e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800303e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003040:	3204      	adds	r2, #4

08003042 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003042:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003044:	d3fb      	bcc.n	800303e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003046:	f002 fd29 	bl	8005a9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800304a:	f7ff f89f 	bl	800218c <main>

0800304e <LoopForever>:

LoopForever:
    b LoopForever
 800304e:	e7fe      	b.n	800304e <LoopForever>
   ldr   r0, =_estack
 8003050:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8003054:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003058:	200008b8 	.word	0x200008b8
  ldr r2, =_sidata
 800305c:	080065e4 	.word	0x080065e4
  ldr r2, =_sbss
 8003060:	200008b8 	.word	0x200008b8
  ldr r4, =_ebss
 8003064:	200016a8 	.word	0x200016a8

08003068 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003068:	e7fe      	b.n	8003068 <ADC1_COMP_IRQHandler>
	...

0800306c <DS3231_SetRegByte>:
/**
 * @brief Set the byte in the designated DS3231 register to value.
 * @param regAddr Register address to write.
 * @param val Value to set, 0 to 255.
 */
void DS3231_SetRegByte(uint8_t regAddr, uint8_t val) {
 800306c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t bytes[2] = { regAddr, val };
 800306e:	466b      	mov	r3, sp
 8003070:	7318      	strb	r0, [r3, #12]
 8003072:	7359      	strb	r1, [r3, #13]
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, bytes, 2, DS3231_TIMEOUT);
 8003074:	2301      	movs	r3, #1
 8003076:	4805      	ldr	r0, [pc, #20]	@ (800308c <DS3231_SetRegByte+0x20>)
 8003078:	425b      	negs	r3, r3
 800307a:	9300      	str	r3, [sp, #0]
 800307c:	21d0      	movs	r1, #208	@ 0xd0
 800307e:	3303      	adds	r3, #3
 8003080:	aa03      	add	r2, sp, #12
 8003082:	6800      	ldr	r0, [r0, #0]
 8003084:	f000 fe48 	bl	8003d18 <HAL_I2C_Master_Transmit>
}
 8003088:	b005      	add	sp, #20
 800308a:	bd00      	pop	{pc}
 800308c:	20001548 	.word	0x20001548

08003090 <DS3231_GetRegByte>:
/**
 * @brief Gets the byte in the designated DS3231 register.
 * @param regAddr Register address to read.
 * @return Value stored in the register, 0 to 255.
 */
uint8_t DS3231_GetRegByte(uint8_t regAddr) {
 8003090:	b570      	push	{r4, r5, r6, lr}
 8003092:	220f      	movs	r2, #15
	uint8_t val;
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &regAddr, 1, DS3231_TIMEOUT);
 8003094:	2601      	movs	r6, #1
	HAL_I2C_Master_Receive(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &val, 1, DS3231_TIMEOUT);
 8003096:	2517      	movs	r5, #23
uint8_t DS3231_GetRegByte(uint8_t regAddr) {
 8003098:	b086      	sub	sp, #24
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &regAddr, 1, DS3231_TIMEOUT);
 800309a:	4c0a      	ldr	r4, [pc, #40]	@ (80030c4 <DS3231_GetRegByte+0x34>)
uint8_t DS3231_GetRegByte(uint8_t regAddr) {
 800309c:	446a      	add	r2, sp
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &regAddr, 1, DS3231_TIMEOUT);
 800309e:	4276      	negs	r6, r6
uint8_t DS3231_GetRegByte(uint8_t regAddr) {
 80030a0:	7010      	strb	r0, [r2, #0]
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &regAddr, 1, DS3231_TIMEOUT);
 80030a2:	9600      	str	r6, [sp, #0]
 80030a4:	2301      	movs	r3, #1
 80030a6:	21d0      	movs	r1, #208	@ 0xd0
 80030a8:	6820      	ldr	r0, [r4, #0]
 80030aa:	f000 fe35 	bl	8003d18 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &val, 1, DS3231_TIMEOUT);
 80030ae:	446d      	add	r5, sp
 80030b0:	9600      	str	r6, [sp, #0]
 80030b2:	2301      	movs	r3, #1
 80030b4:	002a      	movs	r2, r5
 80030b6:	21d0      	movs	r1, #208	@ 0xd0
 80030b8:	6820      	ldr	r0, [r4, #0]
 80030ba:	f000 feb9 	bl	8003e30 <HAL_I2C_Master_Receive>
	return val;
 80030be:	7828      	ldrb	r0, [r5, #0]
}
 80030c0:	b006      	add	sp, #24
 80030c2:	bd70      	pop	{r4, r5, r6, pc}
 80030c4:	20001548 	.word	0x20001548

080030c8 <DS3231_SetInterruptMode>:

/**
 * @brief Set the interrupt mode to either alarm interrupt or square wave interrupt.
 * @param mode Interrupt mode to set, DS3231_ALARM_INTERRUPT or DS3231_SQUARE_WAVE_INTERRUPT.
 */
void DS3231_SetInterruptMode(DS3231_InterruptMode mode){
 80030c8:	b510      	push	{r4, lr}
 80030ca:	0004      	movs	r4, r0
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 80030cc:	200e      	movs	r0, #14
 80030ce:	f7ff ffdf 	bl	8003090 <DS3231_GetRegByte>
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfb) | ((mode & 0x01) << DS3231_INTCN));
 80030d2:	2304      	movs	r3, #4
 80030d4:	00a4      	lsls	r4, r4, #2
 80030d6:	4398      	bics	r0, r3
 80030d8:	401c      	ands	r4, r3
 80030da:	4304      	orrs	r4, r0
 80030dc:	b2e1      	uxtb	r1, r4
 80030de:	200e      	movs	r0, #14
 80030e0:	f7ff ffc4 	bl	800306c <DS3231_SetRegByte>
}
 80030e4:	bd10      	pop	{r4, pc}

080030e6 <DS3231_EnableOscillator>:

/**
 * @brief Enables clock oscillator.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableOscillator(DS3231_State enable){
 80030e6:	b510      	push	{r4, lr}
 80030e8:	0004      	movs	r4, r0
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 80030ea:	200e      	movs	r0, #14
 80030ec:	f7ff ffd0 	bl	8003090 <DS3231_GetRegByte>
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0x7f) | ((!enable & 0x01) << DS3231_EOSC));
 80030f0:	4263      	negs	r3, r4
 80030f2:	415c      	adcs	r4, r3
 80030f4:	237f      	movs	r3, #127	@ 0x7f
 80030f6:	01e1      	lsls	r1, r4, #7
 80030f8:	4018      	ands	r0, r3
 80030fa:	4301      	orrs	r1, r0
 80030fc:	200e      	movs	r0, #14
 80030fe:	f7ff ffb5 	bl	800306c <DS3231_SetRegByte>
}
 8003102:	bd10      	pop	{r4, pc}

08003104 <DS3231_EnableAlarm2>:

/**
 * @brief Enables alarm 2.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableAlarm2(DS3231_State enable){
 8003104:	b510      	push	{r4, lr}
 8003106:	0004      	movs	r4, r0
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8003108:	200e      	movs	r0, #14
 800310a:	f7ff ffc1 	bl	8003090 <DS3231_GetRegByte>
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfd) | ((enable & 0x01) << DS3231_A2IE));
 800310e:	2302      	movs	r3, #2
 8003110:	0064      	lsls	r4, r4, #1
 8003112:	4398      	bics	r0, r3
 8003114:	401c      	ands	r4, r3
 8003116:	4304      	orrs	r4, r0
 8003118:	b2e1      	uxtb	r1, r4
 800311a:	200e      	movs	r0, #14
 800311c:	f7ff ffa6 	bl	800306c <DS3231_SetRegByte>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 8003120:	2001      	movs	r0, #1
 8003122:	f7ff ffd1 	bl	80030c8 <DS3231_SetInterruptMode>
}
 8003126:	bd10      	pop	{r4, pc}

08003128 <DS3231_ClearAlarm2Flag>:

/**
 * @brief Clears alarm 2 matched flag. Matched flags must be cleared before the next match or the next interrupt will be masked.
 */
void DS3231_ClearAlarm2Flag(){
 8003128:	b510      	push	{r4, lr}
	uint8_t status = DS3231_GetRegByte(DS3231_REG_STATUS) & 0xfd;
 800312a:	200f      	movs	r0, #15
 800312c:	f7ff ffb0 	bl	8003090 <DS3231_GetRegByte>
 8003130:	21fd      	movs	r1, #253	@ 0xfd
	DS3231_SetRegByte(DS3231_REG_STATUS, status & ~(0x01 << DS3231_A2F));
 8003132:	4001      	ands	r1, r0
 8003134:	200f      	movs	r0, #15
 8003136:	f7ff ff99 	bl	800306c <DS3231_SetRegByte>
}
 800313a:	bd10      	pop	{r4, pc}

0800313c <DS3231_EnableAlarm1>:

/**
 * @brief Enables alarm 1.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableAlarm1(DS3231_State enable){
 800313c:	b570      	push	{r4, r5, r6, lr}
 800313e:	0005      	movs	r5, r0
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8003140:	200e      	movs	r0, #14
 8003142:	f7ff ffa5 	bl	8003090 <DS3231_GetRegByte>
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfe) | ((enable & 0x01) << DS3231_A1IE));
 8003146:	2401      	movs	r4, #1
 8003148:	0001      	movs	r1, r0
 800314a:	4025      	ands	r5, r4
 800314c:	43a1      	bics	r1, r4
 800314e:	4329      	orrs	r1, r5
 8003150:	b2c9      	uxtb	r1, r1
 8003152:	200e      	movs	r0, #14
 8003154:	f7ff ff8a 	bl	800306c <DS3231_SetRegByte>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 8003158:	0020      	movs	r0, r4
 800315a:	f7ff ffb5 	bl	80030c8 <DS3231_SetInterruptMode>
}
 800315e:	bd70      	pop	{r4, r5, r6, pc}

08003160 <DS3231_ClearAlarm1Flag>:

/**
 * @brief Clears alarm 1 matched flag. Matched flags must be cleared before the next match or the next interrupt will be masked.
 */
void DS3231_ClearAlarm1Flag(){
 8003160:	b510      	push	{r4, lr}
	uint8_t status = DS3231_GetRegByte(DS3231_REG_STATUS) & 0xfe;
 8003162:	200f      	movs	r0, #15
 8003164:	f7ff ff94 	bl	8003090 <DS3231_GetRegByte>
 8003168:	21fe      	movs	r1, #254	@ 0xfe
	DS3231_SetRegByte(DS3231_REG_STATUS, status & ~(0x01 << DS3231_A1F));
 800316a:	4001      	ands	r1, r0
 800316c:	200f      	movs	r0, #15
 800316e:	f7ff ff7d 	bl	800306c <DS3231_SetRegByte>
}
 8003172:	bd10      	pop	{r4, pc}

08003174 <DS3231_Init>:
void DS3231_Init(I2C_HandleTypeDef *hi2c) {
 8003174:	b510      	push	{r4, lr}
	_ds3231_ui2c = hi2c;
 8003176:	4b08      	ldr	r3, [pc, #32]	@ (8003198 <DS3231_Init+0x24>)
 8003178:	6018      	str	r0, [r3, #0]
	DS3231_EnableAlarm1(DS3231_DISABLED);
 800317a:	2000      	movs	r0, #0
 800317c:	f7ff ffde 	bl	800313c <DS3231_EnableAlarm1>
	DS3231_EnableAlarm2(DS3231_DISABLED);
 8003180:	2000      	movs	r0, #0
 8003182:	f7ff ffbf 	bl	8003104 <DS3231_EnableAlarm2>
	DS3231_ClearAlarm1Flag();
 8003186:	f7ff ffeb 	bl	8003160 <DS3231_ClearAlarm1Flag>
	DS3231_ClearAlarm2Flag();
 800318a:	f7ff ffcd 	bl	8003128 <DS3231_ClearAlarm2Flag>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 800318e:	2001      	movs	r0, #1
 8003190:	f7ff ff9a 	bl	80030c8 <DS3231_SetInterruptMode>
}
 8003194:	bd10      	pop	{r4, pc}
 8003196:	46c0      	nop			@ (mov r8, r8)
 8003198:	20001548 	.word	0x20001548

0800319c <DS3231_IsOscillatorStopped>:

/**
 * @brief Check whether the clock oscillator is stopped.
 * @return Oscillator stopped flag (OSF) bit, 0 or 1.
 */
uint8_t DS3231_IsOscillatorStopped(){
 800319c:	b510      	push	{r4, lr}
	return (DS3231_GetRegByte(DS3231_REG_STATUS) >> DS3231_OSF) & 0x01;
 800319e:	200f      	movs	r0, #15
 80031a0:	f7ff ff76 	bl	8003090 <DS3231_GetRegByte>
 80031a4:	09c0      	lsrs	r0, r0, #7
 80031a6:	b2c0      	uxtb	r0, r0
}
 80031a8:	bd10      	pop	{r4, pc}

080031aa <DS3231_DecodeBCD>:
 * @brief Decodes the raw binary value stored in registers to decimal format.
 * @param bin Binary-coded decimal value retrieved from register, 0 to 255.
 * @return Decoded decimal value.
 */
uint8_t DS3231_DecodeBCD(uint8_t bin) {
	return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
 80031aa:	0903      	lsrs	r3, r0, #4
uint8_t DS3231_DecodeBCD(uint8_t bin) {
 80031ac:	0002      	movs	r2, r0
	return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
 80031ae:	200a      	movs	r0, #10
 80031b0:	210f      	movs	r1, #15
 80031b2:	4358      	muls	r0, r3
 80031b4:	400a      	ands	r2, r1
 80031b6:	1880      	adds	r0, r0, r2
 80031b8:	b2c0      	uxtb	r0, r0
}
 80031ba:	4770      	bx	lr

080031bc <DS3231_GetDayOfWeek>:
uint8_t DS3231_GetDayOfWeek(void) {
 80031bc:	b510      	push	{r4, lr}
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_DOW));
 80031be:	2003      	movs	r0, #3
 80031c0:	f7ff ff66 	bl	8003090 <DS3231_GetRegByte>
 80031c4:	f7ff fff1 	bl	80031aa <DS3231_DecodeBCD>
}
 80031c8:	bd10      	pop	{r4, pc}

080031ca <DS3231_GetDate>:
uint8_t DS3231_GetDate(void) {
 80031ca:	b510      	push	{r4, lr}
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_DATE));
 80031cc:	2004      	movs	r0, #4
 80031ce:	f7ff ff5f 	bl	8003090 <DS3231_GetRegByte>
 80031d2:	f7ff ffea 	bl	80031aa <DS3231_DecodeBCD>
}
 80031d6:	bd10      	pop	{r4, pc}

080031d8 <DS3231_GetMonth>:
uint8_t DS3231_GetMonth(void) {
 80031d8:	b510      	push	{r4, lr}
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_MONTH) & 0x7f);
 80031da:	2005      	movs	r0, #5
 80031dc:	f7ff ff58 	bl	8003090 <DS3231_GetRegByte>
 80031e0:	237f      	movs	r3, #127	@ 0x7f
 80031e2:	4018      	ands	r0, r3
 80031e4:	f7ff ffe1 	bl	80031aa <DS3231_DecodeBCD>
}
 80031e8:	bd10      	pop	{r4, pc}

080031ea <DS3231_GetYear>:
uint16_t DS3231_GetYear(void) {
 80031ea:	b510      	push	{r4, lr}
	uint8_t decYear = DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_YEAR));
 80031ec:	2006      	movs	r0, #6
 80031ee:	f7ff ff4f 	bl	8003090 <DS3231_GetRegByte>
 80031f2:	f7ff ffda 	bl	80031aa <DS3231_DecodeBCD>
 80031f6:	0004      	movs	r4, r0
	uint16_t century = (DS3231_GetRegByte(DS3231_REG_MONTH) >> DS3231_CENTURY) * 100 + 2000;
 80031f8:	2005      	movs	r0, #5
 80031fa:	f7ff ff49 	bl	8003090 <DS3231_GetRegByte>
 80031fe:	2364      	movs	r3, #100	@ 0x64
 8003200:	09c0      	lsrs	r0, r0, #7
 8003202:	b2c0      	uxtb	r0, r0
 8003204:	4358      	muls	r0, r3
	return century + decYear;
 8003206:	23fa      	movs	r3, #250	@ 0xfa
 8003208:	00db      	lsls	r3, r3, #3
 800320a:	18e4      	adds	r4, r4, r3
 800320c:	1900      	adds	r0, r0, r4
 800320e:	b280      	uxth	r0, r0
}
 8003210:	bd10      	pop	{r4, pc}

08003212 <DS3231_GetHour>:
uint8_t DS3231_GetHour(void) {
 8003212:	b510      	push	{r4, lr}
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_HOUR));
 8003214:	2002      	movs	r0, #2
 8003216:	f7ff ff3b 	bl	8003090 <DS3231_GetRegByte>
 800321a:	f7ff ffc6 	bl	80031aa <DS3231_DecodeBCD>
}
 800321e:	bd10      	pop	{r4, pc}

08003220 <DS3231_GetMinute>:
uint8_t DS3231_GetMinute(void) {
 8003220:	b510      	push	{r4, lr}
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_MINUTE));
 8003222:	2001      	movs	r0, #1
 8003224:	f7ff ff34 	bl	8003090 <DS3231_GetRegByte>
 8003228:	f7ff ffbf 	bl	80031aa <DS3231_DecodeBCD>
}
 800322c:	bd10      	pop	{r4, pc}

0800322e <DS3231_GetSecond>:
uint8_t DS3231_GetSecond(void) {
 800322e:	b510      	push	{r4, lr}
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_SECOND));
 8003230:	2000      	movs	r0, #0
 8003232:	f7ff ff2d 	bl	8003090 <DS3231_GetRegByte>
 8003236:	f7ff ffb8 	bl	80031aa <DS3231_DecodeBCD>
}
 800323a:	bd10      	pop	{r4, pc}

0800323c <DS3231_EncodeBCD>:
/**
 * @brief Encodes a decimal number to binaty-coded decimal for storage in registers.
 * @param dec Decimal number to encode.
 * @return Encoded binary-coded decimal value.
 */
uint8_t DS3231_EncodeBCD(uint8_t dec) {
 800323c:	b570      	push	{r4, r5, r6, lr}
	return (dec % 10 + ((dec / 10) << 4));
 800323e:	210a      	movs	r1, #10
uint8_t DS3231_EncodeBCD(uint8_t dec) {
 8003240:	0005      	movs	r5, r0
	return (dec % 10 + ((dec / 10) << 4));
 8003242:	f7fc ff6b 	bl	800011c <__udivsi3>
 8003246:	210a      	movs	r1, #10
 8003248:	0104      	lsls	r4, r0, #4
 800324a:	0028      	movs	r0, r5
 800324c:	f7fc ffec 	bl	8000228 <__aeabi_uidivmod>
 8003250:	1860      	adds	r0, r4, r1
 8003252:	b2c0      	uxtb	r0, r0
}
 8003254:	bd70      	pop	{r4, r5, r6, pc}

08003256 <DS3231_SetDate>:
void DS3231_SetDate(uint8_t date) {
 8003256:	b510      	push	{r4, lr}
	DS3231_SetRegByte(DS3231_REG_DATE, DS3231_EncodeBCD(date));
 8003258:	f7ff fff0 	bl	800323c <DS3231_EncodeBCD>
 800325c:	0001      	movs	r1, r0
 800325e:	2004      	movs	r0, #4
 8003260:	f7ff ff04 	bl	800306c <DS3231_SetRegByte>
}
 8003264:	bd10      	pop	{r4, pc}

08003266 <DS3231_SetMonth>:
void DS3231_SetMonth(uint8_t month) {
 8003266:	b570      	push	{r4, r5, r6, lr}
 8003268:	0005      	movs	r5, r0
	uint8_t century = DS3231_GetRegByte(DS3231_REG_MONTH) & 0x80;
 800326a:	2005      	movs	r0, #5
 800326c:	f7ff ff10 	bl	8003090 <DS3231_GetRegByte>
 8003270:	0004      	movs	r4, r0
	DS3231_SetRegByte(DS3231_REG_MONTH, DS3231_EncodeBCD(month) | century);
 8003272:	0028      	movs	r0, r5
 8003274:	f7ff ffe2 	bl	800323c <DS3231_EncodeBCD>
	uint8_t century = DS3231_GetRegByte(DS3231_REG_MONTH) & 0x80;
 8003278:	237f      	movs	r3, #127	@ 0x7f
 800327a:	439c      	bics	r4, r3
	DS3231_SetRegByte(DS3231_REG_MONTH, DS3231_EncodeBCD(month) | century);
 800327c:	4320      	orrs	r0, r4
 800327e:	b2c1      	uxtb	r1, r0
 8003280:	2005      	movs	r0, #5
 8003282:	f7ff fef3 	bl	800306c <DS3231_SetRegByte>
}
 8003286:	bd70      	pop	{r4, r5, r6, pc}

08003288 <DS3231_SetYear>:
void DS3231_SetYear(uint16_t year) {
 8003288:	b570      	push	{r4, r5, r6, lr}
 800328a:	0004      	movs	r4, r0
	uint8_t monthReg = (DS3231_GetRegByte(DS3231_REG_MONTH) & 0x7f) | (century << DS3231_CENTURY);
 800328c:	2005      	movs	r0, #5
 800328e:	f7ff feff 	bl	8003090 <DS3231_GetRegByte>
	uint8_t century = (year / 100) % 20;
 8003292:	2164      	movs	r1, #100	@ 0x64
	uint8_t monthReg = (DS3231_GetRegByte(DS3231_REG_MONTH) & 0x7f) | (century << DS3231_CENTURY);
 8003294:	0005      	movs	r5, r0
	uint8_t century = (year / 100) % 20;
 8003296:	0020      	movs	r0, r4
 8003298:	f7fc ff40 	bl	800011c <__udivsi3>
 800329c:	2114      	movs	r1, #20
 800329e:	b280      	uxth	r0, r0
 80032a0:	f7fc ffc2 	bl	8000228 <__aeabi_uidivmod>
	uint8_t monthReg = (DS3231_GetRegByte(DS3231_REG_MONTH) & 0x7f) | (century << DS3231_CENTURY);
 80032a4:	237f      	movs	r3, #127	@ 0x7f
 80032a6:	b289      	uxth	r1, r1
 80032a8:	401d      	ands	r5, r3
 80032aa:	01c9      	lsls	r1, r1, #7
 80032ac:	4329      	orrs	r1, r5
	DS3231_SetRegByte(DS3231_REG_MONTH, monthReg);
 80032ae:	2005      	movs	r0, #5
 80032b0:	b2c9      	uxtb	r1, r1
 80032b2:	f7ff fedb 	bl	800306c <DS3231_SetRegByte>
	DS3231_SetRegByte(DS3231_REG_YEAR, DS3231_EncodeBCD(year % 100));
 80032b6:	0020      	movs	r0, r4
 80032b8:	2164      	movs	r1, #100	@ 0x64
 80032ba:	f7fc ffb5 	bl	8000228 <__aeabi_uidivmod>
 80032be:	b2c8      	uxtb	r0, r1
 80032c0:	f7ff ffbc 	bl	800323c <DS3231_EncodeBCD>
 80032c4:	0001      	movs	r1, r0
 80032c6:	2006      	movs	r0, #6
 80032c8:	f7ff fed0 	bl	800306c <DS3231_SetRegByte>
}
 80032cc:	bd70      	pop	{r4, r5, r6, pc}

080032ce <DS3231_SetHour>:
	DS3231_SetRegByte(DS3231_REG_HOUR, DS3231_EncodeBCD(hour_24mode & 0x3f));
 80032ce:	233f      	movs	r3, #63	@ 0x3f
void DS3231_SetHour(uint8_t hour_24mode) {
 80032d0:	b510      	push	{r4, lr}
	DS3231_SetRegByte(DS3231_REG_HOUR, DS3231_EncodeBCD(hour_24mode & 0x3f));
 80032d2:	4018      	ands	r0, r3
 80032d4:	f7ff ffb2 	bl	800323c <DS3231_EncodeBCD>
 80032d8:	0001      	movs	r1, r0
 80032da:	2002      	movs	r0, #2
 80032dc:	f7ff fec6 	bl	800306c <DS3231_SetRegByte>
}
 80032e0:	bd10      	pop	{r4, pc}

080032e2 <DS3231_SetMinute>:
void DS3231_SetMinute(uint8_t minute) {
 80032e2:	b510      	push	{r4, lr}
	DS3231_SetRegByte(DS3231_REG_MINUTE, DS3231_EncodeBCD(minute));
 80032e4:	f7ff ffaa 	bl	800323c <DS3231_EncodeBCD>
 80032e8:	0001      	movs	r1, r0
 80032ea:	2001      	movs	r0, #1
 80032ec:	f7ff febe 	bl	800306c <DS3231_SetRegByte>
}
 80032f0:	bd10      	pop	{r4, pc}

080032f2 <DS3231_SetSecond>:
void DS3231_SetSecond(uint8_t second) {
 80032f2:	b510      	push	{r4, lr}
	DS3231_SetRegByte(DS3231_REG_SECOND, DS3231_EncodeBCD(second));
 80032f4:	f7ff ffa2 	bl	800323c <DS3231_EncodeBCD>
 80032f8:	0001      	movs	r1, r0
 80032fa:	2000      	movs	r0, #0
 80032fc:	f7ff feb6 	bl	800306c <DS3231_SetRegByte>
}
 8003300:	bd10      	pop	{r4, pc}

08003302 <DS3231_SetFullTime>:
void DS3231_SetFullTime(uint8_t  hour_24mode, uint8_t minute, uint8_t second){
 8003302:	b570      	push	{r4, r5, r6, lr}
 8003304:	000d      	movs	r5, r1
 8003306:	0014      	movs	r4, r2
	DS3231_SetHour(hour_24mode);
 8003308:	f7ff ffe1 	bl	80032ce <DS3231_SetHour>
	DS3231_SetMinute(minute);
 800330c:	0028      	movs	r0, r5
 800330e:	f7ff ffe8 	bl	80032e2 <DS3231_SetMinute>
	DS3231_SetSecond(second);
 8003312:	0020      	movs	r0, r4
 8003314:	f7ff ffed 	bl	80032f2 <DS3231_SetSecond>
}
 8003318:	bd70      	pop	{r4, r5, r6, pc}
	...

0800331c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800331c:	b570      	push	{r4, r5, r6, lr}
 800331e:	0005      	movs	r5, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003320:	20fa      	movs	r0, #250	@ 0xfa
 8003322:	4b0d      	ldr	r3, [pc, #52]	@ (8003358 <HAL_InitTick+0x3c>)
 8003324:	0080      	lsls	r0, r0, #2
 8003326:	7819      	ldrb	r1, [r3, #0]
 8003328:	f7fc fef8 	bl	800011c <__udivsi3>
 800332c:	4c0b      	ldr	r4, [pc, #44]	@ (800335c <HAL_InitTick+0x40>)
 800332e:	0001      	movs	r1, r0
 8003330:	6820      	ldr	r0, [r4, #0]
 8003332:	f7fc fef3 	bl	800011c <__udivsi3>
 8003336:	f000 f883 	bl	8003440 <HAL_SYSTICK_Config>
 800333a:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 800333c:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800333e:	2c00      	cmp	r4, #0
 8003340:	d109      	bne.n	8003356 <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003342:	2d03      	cmp	r5, #3
 8003344:	d807      	bhi.n	8003356 <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003346:	3802      	subs	r0, #2
 8003348:	0022      	movs	r2, r4
 800334a:	0029      	movs	r1, r5
 800334c:	f000 f842 	bl	80033d4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003350:	0020      	movs	r0, r4
 8003352:	4b03      	ldr	r3, [pc, #12]	@ (8003360 <HAL_InitTick+0x44>)
 8003354:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8003356:	bd70      	pop	{r4, r5, r6, pc}
 8003358:	20000858 	.word	0x20000858
 800335c:	20000854 	.word	0x20000854
 8003360:	2000085c 	.word	0x2000085c

08003364 <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8003364:	2340      	movs	r3, #64	@ 0x40
 8003366:	4a08      	ldr	r2, [pc, #32]	@ (8003388 <HAL_Init+0x24>)
{
 8003368:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800336a:	6811      	ldr	r1, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800336c:	2003      	movs	r0, #3
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800336e:	430b      	orrs	r3, r1
 8003370:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003372:	f7ff ffd3 	bl	800331c <HAL_InitTick>
 8003376:	1e04      	subs	r4, r0, #0
 8003378:	d103      	bne.n	8003382 <HAL_Init+0x1e>
    HAL_MspInit();
 800337a:	f7ff fc85 	bl	8002c88 <HAL_MspInit>
}
 800337e:	0020      	movs	r0, r4
 8003380:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8003382:	2401      	movs	r4, #1
 8003384:	e7fb      	b.n	800337e <HAL_Init+0x1a>
 8003386:	46c0      	nop			@ (mov r8, r8)
 8003388:	40022000 	.word	0x40022000

0800338c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800338c:	4a03      	ldr	r2, [pc, #12]	@ (800339c <HAL_IncTick+0x10>)
 800338e:	4b04      	ldr	r3, [pc, #16]	@ (80033a0 <HAL_IncTick+0x14>)
 8003390:	6811      	ldr	r1, [r2, #0]
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	185b      	adds	r3, r3, r1
 8003396:	6013      	str	r3, [r2, #0]
}
 8003398:	4770      	bx	lr
 800339a:	46c0      	nop			@ (mov r8, r8)
 800339c:	2000154c 	.word	0x2000154c
 80033a0:	20000858 	.word	0x20000858

080033a4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80033a4:	4b01      	ldr	r3, [pc, #4]	@ (80033ac <HAL_GetTick+0x8>)
 80033a6:	6818      	ldr	r0, [r3, #0]
}
 80033a8:	4770      	bx	lr
 80033aa:	46c0      	nop			@ (mov r8, r8)
 80033ac:	2000154c 	.word	0x2000154c

080033b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033b0:	b570      	push	{r4, r5, r6, lr}
 80033b2:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80033b4:	f7ff fff6 	bl	80033a4 <HAL_GetTick>
 80033b8:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033ba:	1c63      	adds	r3, r4, #1
 80033bc:	d002      	beq.n	80033c4 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80033be:	4b04      	ldr	r3, [pc, #16]	@ (80033d0 <HAL_Delay+0x20>)
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80033c4:	f7ff ffee 	bl	80033a4 <HAL_GetTick>
 80033c8:	1b40      	subs	r0, r0, r5
 80033ca:	42a0      	cmp	r0, r4
 80033cc:	d3fa      	bcc.n	80033c4 <HAL_Delay+0x14>
  {
  }
}
 80033ce:	bd70      	pop	{r4, r5, r6, pc}
 80033d0:	20000858 	.word	0x20000858

080033d4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033d4:	b510      	push	{r4, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80033d6:	24ff      	movs	r4, #255	@ 0xff
 80033d8:	2203      	movs	r2, #3
 80033da:	000b      	movs	r3, r1
 80033dc:	0021      	movs	r1, r4
 80033de:	4002      	ands	r2, r0
 80033e0:	00d2      	lsls	r2, r2, #3
 80033e2:	4091      	lsls	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80033e4:	019b      	lsls	r3, r3, #6
 80033e6:	4023      	ands	r3, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80033e8:	43c9      	mvns	r1, r1
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80033ea:	4093      	lsls	r3, r2
  if ((int32_t)(IRQn) >= 0)
 80033ec:	2800      	cmp	r0, #0
 80033ee:	db0a      	blt.n	8003406 <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80033f0:	24c0      	movs	r4, #192	@ 0xc0
 80033f2:	4a0b      	ldr	r2, [pc, #44]	@ (8003420 <HAL_NVIC_SetPriority+0x4c>)
 80033f4:	0880      	lsrs	r0, r0, #2
 80033f6:	0080      	lsls	r0, r0, #2
 80033f8:	1880      	adds	r0, r0, r2
 80033fa:	00a4      	lsls	r4, r4, #2
 80033fc:	5902      	ldr	r2, [r0, r4]
 80033fe:	400a      	ands	r2, r1
 8003400:	4313      	orrs	r3, r2
 8003402:	5103      	str	r3, [r0, r4]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8003404:	bd10      	pop	{r4, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003406:	220f      	movs	r2, #15
 8003408:	4010      	ands	r0, r2
 800340a:	3808      	subs	r0, #8
 800340c:	4a05      	ldr	r2, [pc, #20]	@ (8003424 <HAL_NVIC_SetPriority+0x50>)
 800340e:	0880      	lsrs	r0, r0, #2
 8003410:	0080      	lsls	r0, r0, #2
 8003412:	1880      	adds	r0, r0, r2
 8003414:	69c2      	ldr	r2, [r0, #28]
 8003416:	4011      	ands	r1, r2
 8003418:	4319      	orrs	r1, r3
 800341a:	61c1      	str	r1, [r0, #28]
 800341c:	e7f2      	b.n	8003404 <HAL_NVIC_SetPriority+0x30>
 800341e:	46c0      	nop			@ (mov r8, r8)
 8003420:	e000e100 	.word	0xe000e100
 8003424:	e000ed00 	.word	0xe000ed00

08003428 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003428:	2800      	cmp	r0, #0
 800342a:	db05      	blt.n	8003438 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800342c:	231f      	movs	r3, #31
 800342e:	4018      	ands	r0, r3
 8003430:	3b1e      	subs	r3, #30
 8003432:	4083      	lsls	r3, r0
 8003434:	4a01      	ldr	r2, [pc, #4]	@ (800343c <HAL_NVIC_EnableIRQ+0x14>)
 8003436:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003438:	4770      	bx	lr
 800343a:	46c0      	nop			@ (mov r8, r8)
 800343c:	e000e100 	.word	0xe000e100

08003440 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003440:	2280      	movs	r2, #128	@ 0x80
 8003442:	1e43      	subs	r3, r0, #1
 8003444:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8003446:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003448:	4293      	cmp	r3, r2
 800344a:	d20d      	bcs.n	8003468 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800344c:	21c0      	movs	r1, #192	@ 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800344e:	4a07      	ldr	r2, [pc, #28]	@ (800346c <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003450:	4807      	ldr	r0, [pc, #28]	@ (8003470 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003452:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003454:	6a03      	ldr	r3, [r0, #32]
 8003456:	0609      	lsls	r1, r1, #24
 8003458:	021b      	lsls	r3, r3, #8
 800345a:	0a1b      	lsrs	r3, r3, #8
 800345c:	430b      	orrs	r3, r1
 800345e:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003460:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003462:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003464:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003466:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8003468:	4770      	bx	lr
 800346a:	46c0      	nop			@ (mov r8, r8)
 800346c:	e000e010 	.word	0xe000e010
 8003470:	e000ed00 	.word	0xe000ed00

08003474 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003476:	0004      	movs	r4, r0
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 8003478:	2001      	movs	r0, #1
  if(hdma == NULL)
 800347a:	2c00      	cmp	r4, #0
 800347c:	d035      	beq.n	80034ea <HAL_DMA_Init+0x76>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800347e:	6825      	ldr	r5, [r4, #0]
 8003480:	4b1a      	ldr	r3, [pc, #104]	@ (80034ec <HAL_DMA_Init+0x78>)
 8003482:	2114      	movs	r1, #20
 8003484:	18e8      	adds	r0, r5, r3
 8003486:	f7fc fe49 	bl	800011c <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 800348a:	4b19      	ldr	r3, [pc, #100]	@ (80034f0 <HAL_DMA_Init+0x7c>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800348c:	0080      	lsls	r0, r0, #2
  hdma->DmaBaseAddress = DMA1;
 800348e:	6423      	str	r3, [r4, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003490:	2302      	movs	r3, #2
 8003492:	1da2      	adds	r2, r4, #6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003494:	6460      	str	r0, [r4, #68]	@ 0x44
  hdma->State = HAL_DMA_STATE_BUSY;
 8003496:	77d3      	strb	r3, [r2, #31]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003498:	682e      	ldr	r6, [r5, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800349a:	4b16      	ldr	r3, [pc, #88]	@ (80034f4 <HAL_DMA_Init+0x80>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800349c:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800349e:	401e      	ands	r6, r3
  tmp |=  hdma->Init.Direction        |
 80034a0:	68e3      	ldr	r3, [r4, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034a2:	6927      	ldr	r7, [r4, #16]
  tmp |=  hdma->Init.Direction        |
 80034a4:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034a6:	433b      	orrs	r3, r7
 80034a8:	6967      	ldr	r7, [r4, #20]
 80034aa:	433b      	orrs	r3, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034ac:	69a7      	ldr	r7, [r4, #24]
 80034ae:	433b      	orrs	r3, r7
 80034b0:	69e7      	ldr	r7, [r4, #28]
 80034b2:	433b      	orrs	r3, r7
          hdma->Init.Mode                | hdma->Init.Priority;
 80034b4:	6a27      	ldr	r7, [r4, #32]
 80034b6:	433b      	orrs	r3, r7
  tmp |=  hdma->Init.Direction        |
 80034b8:	4333      	orrs	r3, r6

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80034ba:	602b      	str	r3, [r5, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80034bc:	2380      	movs	r3, #128	@ 0x80
 80034be:	01db      	lsls	r3, r3, #7
 80034c0:	4299      	cmp	r1, r3
 80034c2:	d00c      	beq.n	80034de <HAL_DMA_Init+0x6a>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80034c4:	251c      	movs	r5, #28
 80034c6:	4028      	ands	r0, r5
 80034c8:	3d0d      	subs	r5, #13
 80034ca:	4085      	lsls	r5, r0
 80034cc:	490a      	ldr	r1, [pc, #40]	@ (80034f8 <HAL_DMA_Init+0x84>)
 80034ce:	680b      	ldr	r3, [r1, #0]
 80034d0:	43ab      	bics	r3, r5
 80034d2:	600b      	str	r3, [r1, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80034d4:	6863      	ldr	r3, [r4, #4]
 80034d6:	680d      	ldr	r5, [r1, #0]
 80034d8:	4083      	lsls	r3, r0
 80034da:	432b      	orrs	r3, r5
 80034dc:	600b      	str	r3, [r1, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034de:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80034e0:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034e2:	63e0      	str	r0, [r4, #60]	@ 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80034e4:	3405      	adds	r4, #5
  hdma->State  = HAL_DMA_STATE_READY;
 80034e6:	77d3      	strb	r3, [r2, #31]
  hdma->Lock = HAL_UNLOCKED;
 80034e8:	77e0      	strb	r0, [r4, #31]

  return HAL_OK;
}
 80034ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80034ec:	bffdfff8 	.word	0xbffdfff8
 80034f0:	40020000 	.word	0x40020000
 80034f4:	ffff800f 	.word	0xffff800f
 80034f8:	400200a8 	.word	0x400200a8

080034fc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80034fe:	1d44      	adds	r4, r0, #5
{
 8003500:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hdma);
 8003502:	7fe5      	ldrb	r5, [r4, #31]
 8003504:	2d01      	cmp	r5, #1
 8003506:	d035      	beq.n	8003574 <HAL_DMA_Start_IT+0x78>
 8003508:	2501      	movs	r5, #1

  if(HAL_DMA_STATE_READY == hdma->State)
 800350a:	1d87      	adds	r7, r0, #6
  __HAL_LOCK(hdma);
 800350c:	77e5      	strb	r5, [r4, #31]
  if(HAL_DMA_STATE_READY == hdma->State)
 800350e:	7ffd      	ldrb	r5, [r7, #31]
 8003510:	2600      	movs	r6, #0
 8003512:	46ac      	mov	ip, r5
 8003514:	4663      	mov	r3, ip
 8003516:	b2ed      	uxtb	r5, r5
 8003518:	2b01      	cmp	r3, #1
 800351a:	d12a      	bne.n	8003572 <HAL_DMA_Start_IT+0x76>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800351c:	2402      	movs	r4, #2
 800351e:	77fc      	strb	r4, [r7, #31]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003520:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003522:	63c6      	str	r6, [r0, #60]	@ 0x3c
    __HAL_DMA_DISABLE(hdma);
 8003524:	6826      	ldr	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003526:	331b      	adds	r3, #27
    __HAL_DMA_DISABLE(hdma);
 8003528:	43ae      	bics	r6, r5
 800352a:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800352c:	6c46      	ldr	r6, [r0, #68]	@ 0x44
 800352e:	6c07      	ldr	r7, [r0, #64]	@ 0x40
 8003530:	401e      	ands	r6, r3
 8003532:	40b5      	lsls	r5, r6

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003534:	9b01      	ldr	r3, [sp, #4]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003536:	607d      	str	r5, [r7, #4]
  hdma->Instance->CNDTR = DataLength;
 8003538:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800353a:	6883      	ldr	r3, [r0, #8]
 800353c:	2b10      	cmp	r3, #16
 800353e:	d10e      	bne.n	800355e <HAL_DMA_Start_IT+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003540:	60a2      	str	r2, [r4, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003542:	60e1      	str	r1, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8003544:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8003546:	2b00      	cmp	r3, #0
 8003548:	d00c      	beq.n	8003564 <HAL_DMA_Start_IT+0x68>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800354a:	230e      	movs	r3, #14
 800354c:	6822      	ldr	r2, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800354e:	4313      	orrs	r3, r2
 8003550:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8003552:	2301      	movs	r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 8003554:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8003556:	6822      	ldr	r2, [r4, #0]
 8003558:	4313      	orrs	r3, r2
 800355a:	6023      	str	r3, [r4, #0]
}
 800355c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800355e:	60a1      	str	r1, [r4, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8003560:	60e2      	str	r2, [r4, #12]
 8003562:	e7ef      	b.n	8003544 <HAL_DMA_Start_IT+0x48>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003564:	2204      	movs	r2, #4
 8003566:	6823      	ldr	r3, [r4, #0]
 8003568:	4393      	bics	r3, r2
 800356a:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800356c:	6822      	ldr	r2, [r4, #0]
 800356e:	230a      	movs	r3, #10
 8003570:	e7ed      	b.n	800354e <HAL_DMA_Start_IT+0x52>
    __HAL_UNLOCK(hdma);
 8003572:	77e6      	strb	r6, [r4, #31]
  __HAL_LOCK(hdma);
 8003574:	2002      	movs	r0, #2
 8003576:	e7f1      	b.n	800355c <HAL_DMA_Start_IT+0x60>

08003578 <HAL_DMA_IRQHandler>:
{
 8003578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800357a:	261c      	movs	r6, #28
 800357c:	2704      	movs	r7, #4
 800357e:	6c42      	ldr	r2, [r0, #68]	@ 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003580:	6c01      	ldr	r1, [r0, #64]	@ 0x40
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8003582:	4032      	ands	r2, r6
 8003584:	003e      	movs	r6, r7
 8003586:	4096      	lsls	r6, r2
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003588:	680d      	ldr	r5, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800358a:	6803      	ldr	r3, [r0, #0]
 800358c:	681c      	ldr	r4, [r3, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800358e:	4235      	tst	r5, r6
 8003590:	d00d      	beq.n	80035ae <HAL_DMA_IRQHandler+0x36>
 8003592:	423c      	tst	r4, r7
 8003594:	d00b      	beq.n	80035ae <HAL_DMA_IRQHandler+0x36>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	0692      	lsls	r2, r2, #26
 800359a:	d402      	bmi.n	80035a2 <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	43ba      	bics	r2, r7
 80035a0:	601a      	str	r2, [r3, #0]
     if(hdma->XferHalfCpltCallback != NULL)
 80035a2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 80035a4:	604e      	str	r6, [r1, #4]
     if(hdma->XferHalfCpltCallback != NULL)
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d019      	beq.n	80035de <HAL_DMA_IRQHandler+0x66>
      hdma->XferErrorCallback(hdma);
 80035aa:	4798      	blx	r3
  return;
 80035ac:	e017      	b.n	80035de <HAL_DMA_IRQHandler+0x66>
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80035ae:	2702      	movs	r7, #2
 80035b0:	003e      	movs	r6, r7
 80035b2:	4096      	lsls	r6, r2
 80035b4:	4235      	tst	r5, r6
 80035b6:	d013      	beq.n	80035e0 <HAL_DMA_IRQHandler+0x68>
 80035b8:	423c      	tst	r4, r7
 80035ba:	d011      	beq.n	80035e0 <HAL_DMA_IRQHandler+0x68>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	0692      	lsls	r2, r2, #26
 80035c0:	d406      	bmi.n	80035d0 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80035c2:	240a      	movs	r4, #10
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	43a2      	bics	r2, r4
 80035c8:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80035ca:	2201      	movs	r2, #1
 80035cc:	1d83      	adds	r3, r0, #6
 80035ce:	77da      	strb	r2, [r3, #31]
    __HAL_UNLOCK(hdma);
 80035d0:	2200      	movs	r2, #0
 80035d2:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80035d4:	604e      	str	r6, [r1, #4]
    __HAL_UNLOCK(hdma);
 80035d6:	77da      	strb	r2, [r3, #31]
    if(hdma->XferCpltCallback != NULL)
 80035d8:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    if (hdma->XferErrorCallback != NULL)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d1e5      	bne.n	80035aa <HAL_DMA_IRQHandler+0x32>
}
 80035de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 80035e0:	2608      	movs	r6, #8
 80035e2:	0037      	movs	r7, r6
 80035e4:	4097      	lsls	r7, r2
 80035e6:	423d      	tst	r5, r7
 80035e8:	d0f9      	beq.n	80035de <HAL_DMA_IRQHandler+0x66>
 80035ea:	4234      	tst	r4, r6
 80035ec:	d0f7      	beq.n	80035de <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035ee:	250e      	movs	r5, #14
 80035f0:	681c      	ldr	r4, [r3, #0]
 80035f2:	43ac      	bics	r4, r5
 80035f4:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80035f6:	2301      	movs	r3, #1
 80035f8:	001c      	movs	r4, r3
 80035fa:	4094      	lsls	r4, r2
    hdma->State = HAL_DMA_STATE_READY;
 80035fc:	1d82      	adds	r2, r0, #6
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80035fe:	604c      	str	r4, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003600:	63c3      	str	r3, [r0, #60]	@ 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8003602:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma);
 8003604:	2200      	movs	r2, #0
 8003606:	1d43      	adds	r3, r0, #5
 8003608:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 800360a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800360c:	e7e5      	b.n	80035da <HAL_DMA_IRQHandler+0x62>
	...

08003610 <FLASH_SetErrorCode>:
  */
static void FLASH_SetErrorCode(void)
{
  uint32_t flags = 0;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8003610:	4a28      	ldr	r2, [pc, #160]	@ (80036b4 <FLASH_SetErrorCode+0xa4>)
 8003612:	2180      	movs	r1, #128	@ 0x80
 8003614:	6990      	ldr	r0, [r2, #24]
 8003616:	0049      	lsls	r1, r1, #1
 8003618:	0003      	movs	r3, r0
{
 800361a:	b530      	push	{r4, r5, lr}
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800361c:	400b      	ands	r3, r1
 800361e:	4208      	tst	r0, r1
 8003620:	d005      	beq.n	800362e <FLASH_SetErrorCode+0x1e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003622:	2302      	movs	r3, #2
 8003624:	4824      	ldr	r0, [pc, #144]	@ (80036b8 <FLASH_SetErrorCode+0xa8>)
 8003626:	6944      	ldr	r4, [r0, #20]
 8003628:	4323      	orrs	r3, r4
 800362a:	6143      	str	r3, [r0, #20]
    flags |= FLASH_FLAG_WRPERR;
 800362c:	000b      	movs	r3, r1
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 800362e:	2080      	movs	r0, #128	@ 0x80
 8003630:	6991      	ldr	r1, [r2, #24]
 8003632:	0080      	lsls	r0, r0, #2
 8003634:	4201      	tst	r1, r0
 8003636:	d005      	beq.n	8003644 <FLASH_SetErrorCode+0x34>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8003638:	2101      	movs	r1, #1
 800363a:	4c1f      	ldr	r4, [pc, #124]	@ (80036b8 <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_PGAERR;
 800363c:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800363e:	6965      	ldr	r5, [r4, #20]
 8003640:	4329      	orrs	r1, r5
 8003642:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 8003644:	2080      	movs	r0, #128	@ 0x80
 8003646:	6991      	ldr	r1, [r2, #24]
 8003648:	00c0      	lsls	r0, r0, #3
 800364a:	4201      	tst	r1, r0
 800364c:	d005      	beq.n	800365a <FLASH_SetErrorCode+0x4a>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 800364e:	2108      	movs	r1, #8
 8003650:	4c19      	ldr	r4, [pc, #100]	@ (80036b8 <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_SIZERR;
 8003652:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 8003654:	6965      	ldr	r5, [r4, #20]
 8003656:	4329      	orrs	r1, r5
 8003658:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800365a:	2080      	movs	r0, #128	@ 0x80
 800365c:	6991      	ldr	r1, [r2, #24]
 800365e:	0100      	lsls	r0, r0, #4
 8003660:	4201      	tst	r1, r0
 8003662:	d005      	beq.n	8003670 <FLASH_SetErrorCode+0x60>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8003664:	2104      	movs	r1, #4
 8003666:	4c14      	ldr	r4, [pc, #80]	@ (80036b8 <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_OPTVERR;
 8003668:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800366a:	6965      	ldr	r5, [r4, #20]
 800366c:	4329      	orrs	r1, r5
 800366e:	6161      	str	r1, [r4, #20]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 8003670:	2080      	movs	r0, #128	@ 0x80
 8003672:	6991      	ldr	r1, [r2, #24]
 8003674:	0180      	lsls	r0, r0, #6
 8003676:	4201      	tst	r1, r0
 8003678:	d005      	beq.n	8003686 <FLASH_SetErrorCode+0x76>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800367a:	2110      	movs	r1, #16
 800367c:	4c0e      	ldr	r4, [pc, #56]	@ (80036b8 <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_RDERR;
 800367e:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8003680:	6965      	ldr	r5, [r4, #20]
 8003682:	4329      	orrs	r1, r5
 8003684:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 8003686:	6991      	ldr	r1, [r2, #24]
 8003688:	0389      	lsls	r1, r1, #14
 800368a:	d505      	bpl.n	8003698 <FLASH_SetErrorCode+0x88>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 800368c:	2020      	movs	r0, #32
 800368e:	4c0a      	ldr	r4, [pc, #40]	@ (80036b8 <FLASH_SetErrorCode+0xa8>)
    flags |= HAL_FLASH_ERROR_FWWERR;
 8003690:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 8003692:	6961      	ldr	r1, [r4, #20]
 8003694:	4301      	orrs	r1, r0
 8003696:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 8003698:	2080      	movs	r0, #128	@ 0x80
 800369a:	6991      	ldr	r1, [r2, #24]
 800369c:	0240      	lsls	r0, r0, #9
 800369e:	4201      	tst	r1, r0
 80036a0:	d005      	beq.n	80036ae <FLASH_SetErrorCode+0x9e>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 80036a2:	2140      	movs	r1, #64	@ 0x40
 80036a4:	4c04      	ldr	r4, [pc, #16]	@ (80036b8 <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_NOTZEROERR;
 80036a6:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 80036a8:	6965      	ldr	r5, [r4, #20]
 80036aa:	4329      	orrs	r1, r5
 80036ac:	6161      	str	r1, [r4, #20]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80036ae:	6193      	str	r3, [r2, #24]
}  
 80036b0:	bd30      	pop	{r4, r5, pc}
 80036b2:	46c0      	nop			@ (mov r8, r8)
 80036b4:	40022000 	.word	0x40022000
 80036b8:	20001550 	.word	0x20001550

080036bc <FLASH_WaitForLastOperation>:
{
 80036bc:	b570      	push	{r4, r5, r6, lr}
 80036be:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80036c0:	f7ff fe70 	bl	80033a4 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80036c4:	2601      	movs	r6, #1
  uint32_t tickstart = HAL_GetTick();
 80036c6:	0005      	movs	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80036c8:	4b18      	ldr	r3, [pc, #96]	@ (800372c <FLASH_WaitForLastOperation+0x70>)
 80036ca:	699a      	ldr	r2, [r3, #24]
 80036cc:	4232      	tst	r2, r6
 80036ce:	d121      	bne.n	8003714 <FLASH_WaitForLastOperation+0x58>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80036d0:	2202      	movs	r2, #2
 80036d2:	6999      	ldr	r1, [r3, #24]
 80036d4:	4211      	tst	r1, r2
 80036d6:	d000      	beq.n	80036da <FLASH_WaitForLastOperation+0x1e>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80036d8:	619a      	str	r2, [r3, #24]
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 80036da:	699a      	ldr	r2, [r3, #24]
 80036dc:	05d2      	lsls	r2, r2, #23
 80036de:	d415      	bmi.n	800370c <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 80036e0:	699a      	ldr	r2, [r3, #24]
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 80036e2:	0592      	lsls	r2, r2, #22
 80036e4:	d412      	bmi.n	800370c <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 80036e6:	699a      	ldr	r2, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 80036e8:	0552      	lsls	r2, r2, #21
 80036ea:	d40f      	bmi.n	800370c <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 80036ec:	699a      	ldr	r2, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 80036ee:	0512      	lsls	r2, r2, #20
 80036f0:	d40c      	bmi.n	800370c <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 80036f2:	699a      	ldr	r2, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 80036f4:	0492      	lsls	r2, r2, #18
 80036f6:	d409      	bmi.n	800370c <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 80036f8:	6999      	ldr	r1, [r3, #24]
 80036fa:	2280      	movs	r2, #128	@ 0x80
 80036fc:	0008      	movs	r0, r1
 80036fe:	0292      	lsls	r2, r2, #10
 8003700:	4010      	ands	r0, r2
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8003702:	4211      	tst	r1, r2
 8003704:	d102      	bne.n	800370c <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 8003706:	699b      	ldr	r3, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8003708:	03db      	lsls	r3, r3, #15
 800370a:	d508      	bpl.n	800371e <FLASH_WaitForLastOperation+0x62>
    FLASH_SetErrorCode();
 800370c:	f7ff ff80 	bl	8003610 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003710:	2001      	movs	r0, #1
 8003712:	e004      	b.n	800371e <FLASH_WaitForLastOperation+0x62>
    if (Timeout != HAL_MAX_DELAY)
 8003714:	1c62      	adds	r2, r4, #1
 8003716:	d0d8      	beq.n	80036ca <FLASH_WaitForLastOperation+0xe>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003718:	2c00      	cmp	r4, #0
 800371a:	d101      	bne.n	8003720 <FLASH_WaitForLastOperation+0x64>
        return HAL_TIMEOUT;
 800371c:	2003      	movs	r0, #3
}
 800371e:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003720:	f7ff fe40 	bl	80033a4 <HAL_GetTick>
 8003724:	1b40      	subs	r0, r0, r5
 8003726:	42a0      	cmp	r0, r4
 8003728:	d9ce      	bls.n	80036c8 <FLASH_WaitForLastOperation+0xc>
 800372a:	e7f7      	b.n	800371c <FLASH_WaitForLastOperation+0x60>
 800372c:	40022000 	.word	0x40022000

08003730 <HAL_FLASHEx_DATAEEPROM_Unlock>:
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 8003730:	2201      	movs	r2, #1
 8003732:	4b08      	ldr	r3, [pc, #32]	@ (8003754 <HAL_FLASHEx_DATAEEPROM_Unlock+0x24>)
    {
      return HAL_ERROR;
    }
  }

  return HAL_OK;  
 8003734:	2000      	movs	r0, #0
  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 8003736:	6859      	ldr	r1, [r3, #4]
 8003738:	4211      	tst	r1, r2
 800373a:	d00a      	beq.n	8003752 <HAL_FLASHEx_DATAEEPROM_Unlock+0x22>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800373c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8003740:	b672      	cpsid	i
    FLASH->PEKEYR = FLASH_PEKEY1;
 8003742:	4805      	ldr	r0, [pc, #20]	@ (8003758 <HAL_FLASHEx_DATAEEPROM_Unlock+0x28>)
 8003744:	60d8      	str	r0, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 8003746:	4805      	ldr	r0, [pc, #20]	@ (800375c <HAL_FLASHEx_DATAEEPROM_Unlock+0x2c>)
 8003748:	60d8      	str	r0, [r3, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800374a:	f381 8810 	msr	PRIMASK, r1
    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800374e:	6858      	ldr	r0, [r3, #4]
 8003750:	4010      	ands	r0, r2
}
 8003752:	4770      	bx	lr
 8003754:	40022000 	.word	0x40022000
 8003758:	89abcdef 	.word	0x89abcdef
 800375c:	02030405 	.word	0x02030405

08003760 <HAL_FLASHEx_DATAEEPROM_Lock>:
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 8003760:	2301      	movs	r3, #1
 8003762:	4a03      	ldr	r2, [pc, #12]	@ (8003770 <HAL_FLASHEx_DATAEEPROM_Lock+0x10>)
  
  return HAL_OK;
}
 8003764:	2000      	movs	r0, #0
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 8003766:	6851      	ldr	r1, [r2, #4]
 8003768:	430b      	orrs	r3, r1
 800376a:	6053      	str	r3, [r2, #4]
}
 800376c:	4770      	bx	lr
 800376e:	46c0      	nop			@ (mov r8, r8)
 8003770:	40022000 	.word	0x40022000

08003774 <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect 
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t Address)
{
 8003774:	b510      	push	{r4, lr}
 8003776:	0004      	movs	r4, r0
  
  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003778:	4805      	ldr	r0, [pc, #20]	@ (8003790 <HAL_FLASHEx_DATAEEPROM_Erase+0x1c>)
 800377a:	f7ff ff9f 	bl	80036bc <FLASH_WaitForLastOperation>
  
  if(status == HAL_OK)
 800377e:	2800      	cmp	r0, #0
 8003780:	d105      	bne.n	800378e <HAL_FLASHEx_DATAEEPROM_Erase+0x1a>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003782:	4b04      	ldr	r3, [pc, #16]	@ (8003794 <HAL_FLASHEx_DATAEEPROM_Erase+0x20>)
 8003784:	6158      	str	r0, [r3, #20]

      /* Write 00000000h to valid address in the data memory */
      *(__IO uint32_t *) Address = 0x00000000U;
 8003786:	6020      	str	r0, [r4, #0]

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003788:	4801      	ldr	r0, [pc, #4]	@ (8003790 <HAL_FLASHEx_DATAEEPROM_Erase+0x1c>)
 800378a:	f7ff ff97 	bl	80036bc <FLASH_WaitForLastOperation>
  }
   
  /* Return the erase status */
  return status;
}  
 800378e:	bd10      	pop	{r4, pc}
 8003790:	0000c350 	.word	0x0000c350
 8003794:	20001550 	.word	0x20001550

08003798 <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 8003798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef status = HAL_ERROR;
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800379a:	4f12      	ldr	r7, [pc, #72]	@ (80037e4 <HAL_FLASHEx_DATAEEPROM_Program+0x4c>)
{
 800379c:	0006      	movs	r6, r0
  __HAL_LOCK(&pFlash);
 800379e:	7c3b      	ldrb	r3, [r7, #16]
{
 80037a0:	000d      	movs	r5, r1
 80037a2:	0014      	movs	r4, r2
  __HAL_LOCK(&pFlash);
 80037a4:	2002      	movs	r0, #2
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d00f      	beq.n	80037ca <HAL_FLASHEx_DATAEEPROM_Program+0x32>
 80037aa:	2301      	movs	r3, #1
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80037ac:	480e      	ldr	r0, [pc, #56]	@ (80037e8 <HAL_FLASHEx_DATAEEPROM_Program+0x50>)
  __HAL_LOCK(&pFlash);
 80037ae:	743b      	strb	r3, [r7, #16]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80037b0:	f7ff ff84 	bl	80036bc <FLASH_WaitForLastOperation>
  
  if(status == HAL_OK)
 80037b4:	2800      	cmp	r0, #0
 80037b6:	d106      	bne.n	80037c6 <HAL_FLASHEx_DATAEEPROM_Program+0x2e>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80037b8:	6178      	str	r0, [r7, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 80037ba:	2e02      	cmp	r6, #2
 80037bc:	d106      	bne.n	80037cc <HAL_FLASHEx_DATAEEPROM_Program+0x34>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 80037be:	602c      	str	r4, [r5, #0]
    }

    if (status == HAL_OK)
    {
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80037c0:	4809      	ldr	r0, [pc, #36]	@ (80037e8 <HAL_FLASHEx_DATAEEPROM_Program+0x50>)
 80037c2:	f7ff ff7b 	bl	80036bc <FLASH_WaitForLastOperation>
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80037c6:	2300      	movs	r3, #0
 80037c8:	743b      	strb	r3, [r7, #16]

  return status;
}
 80037ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 80037cc:	2e01      	cmp	r6, #1
 80037ce:	d102      	bne.n	80037d6 <HAL_FLASHEx_DATAEEPROM_Program+0x3e>
      *(__IO uint16_t *)Address = (uint16_t) Data;
 80037d0:	b2a4      	uxth	r4, r4
 80037d2:	802c      	strh	r4, [r5, #0]
 80037d4:	e7f4      	b.n	80037c0 <HAL_FLASHEx_DATAEEPROM_Program+0x28>
      status = HAL_ERROR;
 80037d6:	2001      	movs	r0, #1
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 80037d8:	2e00      	cmp	r6, #0
 80037da:	d1f4      	bne.n	80037c6 <HAL_FLASHEx_DATAEEPROM_Program+0x2e>
      *(__IO uint8_t *)Address = (uint8_t) Data;
 80037dc:	b2e4      	uxtb	r4, r4
 80037de:	702c      	strb	r4, [r5, #0]
 80037e0:	e7ee      	b.n	80037c0 <HAL_FLASHEx_DATAEEPROM_Program+0x28>
 80037e2:	46c0      	nop			@ (mov r8, r8)
 80037e4:	20001550 	.word	0x20001550
 80037e8:	0000c350 	.word	0x0000c350

080037ec <HAL_GPIO_Init>:
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00U;
 80037ec:	2300      	movs	r3, #0
{
 80037ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037f0:	b085      	sub	sp, #20
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80037f2:	680a      	ldr	r2, [r1, #0]
 80037f4:	0014      	movs	r4, r2
 80037f6:	40dc      	lsrs	r4, r3
 80037f8:	d101      	bne.n	80037fe <HAL_GPIO_Init+0x12>
        EXTI->IMR = temp;
      }
    }
    position++;
  }
}
 80037fa:	b005      	add	sp, #20
 80037fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80037fe:	2501      	movs	r5, #1
 8003800:	0014      	movs	r4, r2
 8003802:	409d      	lsls	r5, r3
 8003804:	402c      	ands	r4, r5
 8003806:	9400      	str	r4, [sp, #0]
    if (iocurrent)
 8003808:	422a      	tst	r2, r5
 800380a:	d100      	bne.n	800380e <HAL_GPIO_Init+0x22>
 800380c:	e094      	b.n	8003938 <HAL_GPIO_Init+0x14c>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800380e:	684a      	ldr	r2, [r1, #4]
 8003810:	005f      	lsls	r7, r3, #1
 8003812:	4694      	mov	ip, r2
 8003814:	2203      	movs	r2, #3
 8003816:	4664      	mov	r4, ip
 8003818:	4022      	ands	r2, r4
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800381a:	2403      	movs	r4, #3
 800381c:	40bc      	lsls	r4, r7
 800381e:	43e4      	mvns	r4, r4
 8003820:	9401      	str	r4, [sp, #4]
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003822:	1e54      	subs	r4, r2, #1
 8003824:	2c01      	cmp	r4, #1
 8003826:	d82e      	bhi.n	8003886 <HAL_GPIO_Init+0x9a>
        temp = GPIOx->OSPEEDR;
 8003828:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800382a:	9c01      	ldr	r4, [sp, #4]
 800382c:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 800382e:	68cc      	ldr	r4, [r1, #12]
 8003830:	40bc      	lsls	r4, r7
 8003832:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8003834:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8003836:	6844      	ldr	r4, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003838:	2601      	movs	r6, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800383a:	43ac      	bics	r4, r5
 800383c:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800383e:	4664      	mov	r4, ip
 8003840:	0924      	lsrs	r4, r4, #4
 8003842:	4034      	ands	r4, r6
 8003844:	409c      	lsls	r4, r3
 8003846:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8003848:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 800384a:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800384c:	9c01      	ldr	r4, [sp, #4]
 800384e:	4025      	ands	r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003850:	688c      	ldr	r4, [r1, #8]
 8003852:	40bc      	lsls	r4, r7
 8003854:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 8003856:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003858:	2a02      	cmp	r2, #2
 800385a:	d116      	bne.n	800388a <HAL_GPIO_Init+0x9e>
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800385c:	2507      	movs	r5, #7
 800385e:	260f      	movs	r6, #15
 8003860:	401d      	ands	r5, r3
 8003862:	00ad      	lsls	r5, r5, #2
 8003864:	40ae      	lsls	r6, r5
        temp = GPIOx->AFR[position >> 3U];
 8003866:	08dc      	lsrs	r4, r3, #3
 8003868:	00a4      	lsls	r4, r4, #2
 800386a:	1904      	adds	r4, r0, r4
 800386c:	9402      	str	r4, [sp, #8]
 800386e:	6a24      	ldr	r4, [r4, #32]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8003870:	9603      	str	r6, [sp, #12]
 8003872:	0026      	movs	r6, r4
 8003874:	9c03      	ldr	r4, [sp, #12]
 8003876:	43a6      	bics	r6, r4
 8003878:	0034      	movs	r4, r6
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800387a:	690e      	ldr	r6, [r1, #16]
 800387c:	40ae      	lsls	r6, r5
 800387e:	4326      	orrs	r6, r4
        GPIOx->AFR[position >> 3U] = temp;
 8003880:	9c02      	ldr	r4, [sp, #8]
 8003882:	6226      	str	r6, [r4, #32]
 8003884:	e001      	b.n	800388a <HAL_GPIO_Init+0x9e>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003886:	2a03      	cmp	r2, #3
 8003888:	d1df      	bne.n	800384a <HAL_GPIO_Init+0x5e>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800388a:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 800388c:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800388e:	9d01      	ldr	r5, [sp, #4]
 8003890:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003892:	432a      	orrs	r2, r5
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003894:	24c0      	movs	r4, #192	@ 0xc0
      GPIOx->MODER = temp;
 8003896:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003898:	4662      	mov	r2, ip
 800389a:	02a4      	lsls	r4, r4, #10
 800389c:	4222      	tst	r2, r4
 800389e:	d04b      	beq.n	8003938 <HAL_GPIO_Init+0x14c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038a0:	2501      	movs	r5, #1
 80038a2:	4c26      	ldr	r4, [pc, #152]	@ (800393c <HAL_GPIO_Init+0x150>)
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80038a4:	27a0      	movs	r7, #160	@ 0xa0
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038a6:	6b62      	ldr	r2, [r4, #52]	@ 0x34
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80038a8:	05ff      	lsls	r7, r7, #23
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038aa:	432a      	orrs	r2, r5
 80038ac:	6362      	str	r2, [r4, #52]	@ 0x34
        temp = SYSCFG->EXTICR[position >> 2U];
 80038ae:	4a24      	ldr	r2, [pc, #144]	@ (8003940 <HAL_GPIO_Init+0x154>)
 80038b0:	089c      	lsrs	r4, r3, #2
 80038b2:	00a4      	lsls	r4, r4, #2
 80038b4:	18a4      	adds	r4, r4, r2
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80038b6:	220f      	movs	r2, #15
 80038b8:	3502      	adds	r5, #2
 80038ba:	401d      	ands	r5, r3
 80038bc:	00ad      	lsls	r5, r5, #2
 80038be:	40aa      	lsls	r2, r5
        temp = SYSCFG->EXTICR[position >> 2U];
 80038c0:	68a6      	ldr	r6, [r4, #8]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80038c2:	4396      	bics	r6, r2
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80038c4:	2200      	movs	r2, #0
 80038c6:	42b8      	cmp	r0, r7
 80038c8:	d00c      	beq.n	80038e4 <HAL_GPIO_Init+0xf8>
 80038ca:	4f1e      	ldr	r7, [pc, #120]	@ (8003944 <HAL_GPIO_Init+0x158>)
 80038cc:	3201      	adds	r2, #1
 80038ce:	42b8      	cmp	r0, r7
 80038d0:	d008      	beq.n	80038e4 <HAL_GPIO_Init+0xf8>
 80038d2:	4f1d      	ldr	r7, [pc, #116]	@ (8003948 <HAL_GPIO_Init+0x15c>)
 80038d4:	3201      	adds	r2, #1
 80038d6:	42b8      	cmp	r0, r7
 80038d8:	d004      	beq.n	80038e4 <HAL_GPIO_Init+0xf8>
 80038da:	4a1c      	ldr	r2, [pc, #112]	@ (800394c <HAL_GPIO_Init+0x160>)
 80038dc:	1882      	adds	r2, r0, r2
 80038de:	1e57      	subs	r7, r2, #1
 80038e0:	41ba      	sbcs	r2, r7
 80038e2:	3205      	adds	r2, #5
 80038e4:	40aa      	lsls	r2, r5
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80038e6:	4667      	mov	r7, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80038e8:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 80038ea:	60a2      	str	r2, [r4, #8]
        temp = EXTI->RTSR;
 80038ec:	4a18      	ldr	r2, [pc, #96]	@ (8003950 <HAL_GPIO_Init+0x164>)
        temp &= ~((uint32_t)iocurrent);
 80038ee:	9c00      	ldr	r4, [sp, #0]
        temp = EXTI->RTSR;
 80038f0:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 80038f2:	9d00      	ldr	r5, [sp, #0]
        temp &= ~((uint32_t)iocurrent);
 80038f4:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 80038f6:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80038f8:	02ff      	lsls	r7, r7, #11
 80038fa:	d401      	bmi.n	8003900 <HAL_GPIO_Init+0x114>
        temp &= ~((uint32_t)iocurrent);
 80038fc:	0035      	movs	r5, r6
 80038fe:	4025      	ands	r5, r4
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003900:	4667      	mov	r7, ip
        EXTI->RTSR = temp;
 8003902:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8003904:	68d6      	ldr	r6, [r2, #12]
          temp |= iocurrent;
 8003906:	9d00      	ldr	r5, [sp, #0]
 8003908:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800390a:	02bf      	lsls	r7, r7, #10
 800390c:	d401      	bmi.n	8003912 <HAL_GPIO_Init+0x126>
        temp &= ~((uint32_t)iocurrent);
 800390e:	0035      	movs	r5, r6
 8003910:	4025      	ands	r5, r4
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003912:	4667      	mov	r7, ip
        EXTI->FTSR = temp;
 8003914:	60d5      	str	r5, [r2, #12]
        temp = EXTI->EMR;
 8003916:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 8003918:	9d00      	ldr	r5, [sp, #0]
 800391a:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800391c:	03bf      	lsls	r7, r7, #14
 800391e:	d401      	bmi.n	8003924 <HAL_GPIO_Init+0x138>
        temp &= ~((uint32_t)iocurrent);
 8003920:	0035      	movs	r5, r6
 8003922:	4025      	ands	r5, r4
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003924:	4667      	mov	r7, ip
        EXTI->EMR = temp;
 8003926:	6055      	str	r5, [r2, #4]
        temp = EXTI->IMR;
 8003928:	6815      	ldr	r5, [r2, #0]
          temp |= iocurrent;
 800392a:	9e00      	ldr	r6, [sp, #0]
 800392c:	432e      	orrs	r6, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800392e:	03ff      	lsls	r7, r7, #15
 8003930:	d401      	bmi.n	8003936 <HAL_GPIO_Init+0x14a>
        temp &= ~((uint32_t)iocurrent);
 8003932:	4025      	ands	r5, r4
 8003934:	002e      	movs	r6, r5
        EXTI->IMR = temp;
 8003936:	6016      	str	r6, [r2, #0]
    position++;
 8003938:	3301      	adds	r3, #1
 800393a:	e75a      	b.n	80037f2 <HAL_GPIO_Init+0x6>
 800393c:	40021000 	.word	0x40021000
 8003940:	40010000 	.word	0x40010000
 8003944:	50000400 	.word	0x50000400
 8003948:	50000800 	.word	0x50000800
 800394c:	afffe400 	.word	0xafffe400
 8003950:	40010400 	.word	0x40010400

08003954 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003954:	6900      	ldr	r0, [r0, #16]
 8003956:	4008      	ands	r0, r1
 8003958:	1e43      	subs	r3, r0, #1
 800395a:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 800395c:	b2c0      	uxtb	r0, r0
}
 800395e:	4770      	bx	lr

08003960 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003960:	2a00      	cmp	r2, #0
 8003962:	d001      	beq.n	8003968 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003964:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8003966:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 8003968:	6281      	str	r1, [r0, #40]	@ 0x28
}
 800396a:	e7fc      	b.n	8003966 <HAL_GPIO_WritePin+0x6>

0800396c <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800396c:	6942      	ldr	r2, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800396e:	0013      	movs	r3, r2
 8003970:	400b      	ands	r3, r1
 8003972:	041b      	lsls	r3, r3, #16
 8003974:	4391      	bics	r1, r2
 8003976:	430b      	orrs	r3, r1
 8003978:	6183      	str	r3, [r0, #24]
}
 800397a:	4770      	bx	lr

0800397c <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800397c:	6803      	ldr	r3, [r0, #0]
 800397e:	699a      	ldr	r2, [r3, #24]
 8003980:	0792      	lsls	r2, r2, #30
 8003982:	d501      	bpl.n	8003988 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003984:	2200      	movs	r2, #0
 8003986:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003988:	2201      	movs	r2, #1
 800398a:	6999      	ldr	r1, [r3, #24]
 800398c:	4211      	tst	r1, r2
 800398e:	d102      	bne.n	8003996 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003990:	6999      	ldr	r1, [r3, #24]
 8003992:	430a      	orrs	r2, r1
 8003994:	619a      	str	r2, [r3, #24]
  }
}
 8003996:	4770      	bx	lr

08003998 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003998:	b530      	push	{r4, r5, lr}
 800399a:	9c03      	ldr	r4, [sp, #12]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800399c:	6800      	ldr	r0, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800399e:	4323      	orrs	r3, r4
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80039a0:	0412      	lsls	r2, r2, #16
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80039a2:	0589      	lsls	r1, r1, #22
 80039a4:	431a      	orrs	r2, r3
 80039a6:	0d89      	lsrs	r1, r1, #22
  MODIFY_REG(hi2c->Instance->CR2, \
 80039a8:	4b05      	ldr	r3, [pc, #20]	@ (80039c0 <I2C_TransferConfig+0x28>)
 80039aa:	6845      	ldr	r5, [r0, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80039ac:	430a      	orrs	r2, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 80039ae:	0d64      	lsrs	r4, r4, #21
 80039b0:	4323      	orrs	r3, r4
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80039b2:	0052      	lsls	r2, r2, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 80039b4:	439d      	bics	r5, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80039b6:	0852      	lsrs	r2, r2, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 80039b8:	432a      	orrs	r2, r5
 80039ba:	6042      	str	r2, [r0, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80039bc:	bd30      	pop	{r4, r5, pc}
 80039be:	46c0      	nop			@ (mov r8, r8)
 80039c0:	03ff63ff 	.word	0x03ff63ff

080039c4 <I2C_IsErrorOccurred>:
{
 80039c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80039c6:	0015      	movs	r5, r2
  uint32_t itflag   = hi2c->Instance->ISR;
 80039c8:	6802      	ldr	r2, [r0, #0]
{
 80039ca:	000e      	movs	r6, r1
  uint32_t itflag   = hi2c->Instance->ISR;
 80039cc:	6991      	ldr	r1, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80039ce:	2310      	movs	r3, #16
 80039d0:	000f      	movs	r7, r1
{
 80039d2:	0004      	movs	r4, r0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80039d4:	401f      	ands	r7, r3
  HAL_StatusTypeDef status = HAL_OK;
 80039d6:	2000      	movs	r0, #0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80039d8:	4219      	tst	r1, r3
 80039da:	d00d      	beq.n	80039f8 <I2C_IsErrorOccurred+0x34>
  HAL_StatusTypeDef status = HAL_OK;
 80039dc:	0007      	movs	r7, r0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039de:	61d3      	str	r3, [r2, #28]
  uint32_t error_code = 0;
 80039e0:	9001      	str	r0, [sp, #4]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80039e2:	6823      	ldr	r3, [r4, #0]
 80039e4:	2120      	movs	r1, #32
 80039e6:	699a      	ldr	r2, [r3, #24]
 80039e8:	420a      	tst	r2, r1
 80039ea:	d15f      	bne.n	8003aac <I2C_IsErrorOccurred+0xe8>
 80039ec:	2f00      	cmp	r7, #0
 80039ee:	d031      	beq.n	8003a54 <I2C_IsErrorOccurred+0x90>
    error_code |= HAL_I2C_ERROR_AF;
 80039f0:	2704      	movs	r7, #4
    status = HAL_ERROR;
 80039f2:	2001      	movs	r0, #1
    error_code |= HAL_I2C_ERROR_AF;
 80039f4:	9b01      	ldr	r3, [sp, #4]
 80039f6:	431f      	orrs	r7, r3
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80039f8:	2280      	movs	r2, #128	@ 0x80
  itflag = hi2c->Instance->ISR;
 80039fa:	6825      	ldr	r5, [r4, #0]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80039fc:	0052      	lsls	r2, r2, #1
  itflag = hi2c->Instance->ISR;
 80039fe:	69ab      	ldr	r3, [r5, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003a00:	4213      	tst	r3, r2
 8003a02:	d002      	beq.n	8003a0a <I2C_IsErrorOccurred+0x46>
    error_code |= HAL_I2C_ERROR_BERR;
 8003a04:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003a06:	61ea      	str	r2, [r5, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 8003a08:	4307      	orrs	r7, r0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003a0a:	2280      	movs	r2, #128	@ 0x80
 8003a0c:	00d2      	lsls	r2, r2, #3
 8003a0e:	4213      	tst	r3, r2
 8003a10:	d003      	beq.n	8003a1a <I2C_IsErrorOccurred+0x56>
    error_code |= HAL_I2C_ERROR_OVR;
 8003a12:	2108      	movs	r1, #8
    status = HAL_ERROR;
 8003a14:	2001      	movs	r0, #1
    error_code |= HAL_I2C_ERROR_OVR;
 8003a16:	430f      	orrs	r7, r1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003a18:	61ea      	str	r2, [r5, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003a1a:	2280      	movs	r2, #128	@ 0x80
 8003a1c:	0092      	lsls	r2, r2, #2
 8003a1e:	4213      	tst	r3, r2
 8003a20:	d049      	beq.n	8003ab6 <I2C_IsErrorOccurred+0xf2>
    error_code |= HAL_I2C_ERROR_ARLO;
 8003a22:	2302      	movs	r3, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003a24:	61ea      	str	r2, [r5, #28]
    error_code |= HAL_I2C_ERROR_ARLO;
 8003a26:	431f      	orrs	r7, r3
    I2C_Flush_TXDR(hi2c);
 8003a28:	0020      	movs	r0, r4
 8003a2a:	f7ff ffa7 	bl	800397c <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8003a2e:	686b      	ldr	r3, [r5, #4]
 8003a30:	4a22      	ldr	r2, [pc, #136]	@ (8003abc <I2C_IsErrorOccurred+0xf8>)
    __HAL_UNLOCK(hi2c);
 8003a32:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 8003a34:	4013      	ands	r3, r2
 8003a36:	606b      	str	r3, [r5, #4]
    hi2c->ErrorCode |= error_code;
 8003a38:	6c63      	ldr	r3, [r4, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003a3a:	2220      	movs	r2, #32
    hi2c->ErrorCode |= error_code;
 8003a3c:	433b      	orrs	r3, r7
 8003a3e:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003a40:	0023      	movs	r3, r4
 8003a42:	3341      	adds	r3, #65	@ 0x41
 8003a44:	701a      	strb	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a46:	0022      	movs	r2, r4
 8003a48:	2300      	movs	r3, #0
 8003a4a:	3242      	adds	r2, #66	@ 0x42
    __HAL_UNLOCK(hi2c);
 8003a4c:	3440      	adds	r4, #64	@ 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a4e:	7013      	strb	r3, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8003a50:	7023      	strb	r3, [r4, #0]
 8003a52:	e032      	b.n	8003aba <I2C_IsErrorOccurred+0xf6>
      if (Timeout != HAL_MAX_DELAY)
 8003a54:	1c72      	adds	r2, r6, #1
 8003a56:	d0c5      	beq.n	80039e4 <I2C_IsErrorOccurred+0x20>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003a58:	f7ff fca4 	bl	80033a4 <HAL_GetTick>
 8003a5c:	1b40      	subs	r0, r0, r5
 8003a5e:	42b0      	cmp	r0, r6
 8003a60:	d801      	bhi.n	8003a66 <I2C_IsErrorOccurred+0xa2>
 8003a62:	2e00      	cmp	r6, #0
 8003a64:	d1bd      	bne.n	80039e2 <I2C_IsErrorOccurred+0x1e>
          tmp2 = hi2c->Mode;
 8003a66:	0022      	movs	r2, r4
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003a68:	6823      	ldr	r3, [r4, #0]
          tmp2 = hi2c->Mode;
 8003a6a:	3242      	adds	r2, #66	@ 0x42
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003a6c:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 8003a6e:	7811      	ldrb	r1, [r2, #0]
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003a70:	699a      	ldr	r2, [r3, #24]
          tmp2 = hi2c->Mode;
 8003a72:	b2c9      	uxtb	r1, r1
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003a74:	0412      	lsls	r2, r2, #16
 8003a76:	d50b      	bpl.n	8003a90 <I2C_IsErrorOccurred+0xcc>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003a78:	2280      	movs	r2, #128	@ 0x80
 8003a7a:	01d2      	lsls	r2, r2, #7
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003a7c:	4210      	tst	r0, r2
 8003a7e:	d107      	bne.n	8003a90 <I2C_IsErrorOccurred+0xcc>
              (tmp1 != I2C_CR2_STOP) && \
 8003a80:	2920      	cmp	r1, #32
 8003a82:	d005      	beq.n	8003a90 <I2C_IsErrorOccurred+0xcc>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003a84:	6859      	ldr	r1, [r3, #4]
 8003a86:	430a      	orrs	r2, r1
 8003a88:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8003a8a:	f7ff fc8b 	bl	80033a4 <HAL_GetTick>
 8003a8e:	0005      	movs	r5, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a90:	2220      	movs	r2, #32
 8003a92:	6823      	ldr	r3, [r4, #0]
 8003a94:	699b      	ldr	r3, [r3, #24]
 8003a96:	4213      	tst	r3, r2
 8003a98:	d1a3      	bne.n	80039e2 <I2C_IsErrorOccurred+0x1e>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003a9a:	f7ff fc83 	bl	80033a4 <HAL_GetTick>
 8003a9e:	1b40      	subs	r0, r0, r5
 8003aa0:	2819      	cmp	r0, #25
 8003aa2:	d9f5      	bls.n	8003a90 <I2C_IsErrorOccurred+0xcc>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003aa4:	2320      	movs	r3, #32
              status = HAL_ERROR;
 8003aa6:	2701      	movs	r7, #1
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003aa8:	9301      	str	r3, [sp, #4]
 8003aaa:	e79a      	b.n	80039e2 <I2C_IsErrorOccurred+0x1e>
    if (status == HAL_OK)
 8003aac:	2f00      	cmp	r7, #0
 8003aae:	d19f      	bne.n	80039f0 <I2C_IsErrorOccurred+0x2c>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ab0:	2220      	movs	r2, #32
 8003ab2:	61da      	str	r2, [r3, #28]
 8003ab4:	e79c      	b.n	80039f0 <I2C_IsErrorOccurred+0x2c>
  if (status != HAL_OK)
 8003ab6:	2800      	cmp	r0, #0
 8003ab8:	d1b6      	bne.n	8003a28 <I2C_IsErrorOccurred+0x64>
}
 8003aba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003abc:	fe00e800 	.word	0xfe00e800

08003ac0 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8003ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ac2:	0004      	movs	r4, r0
 8003ac4:	000d      	movs	r5, r1
 8003ac6:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003ac8:	2702      	movs	r7, #2
 8003aca:	6823      	ldr	r3, [r4, #0]
 8003acc:	699b      	ldr	r3, [r3, #24]
 8003ace:	423b      	tst	r3, r7
 8003ad0:	d001      	beq.n	8003ad6 <I2C_WaitOnTXISFlagUntilTimeout+0x16>
  return HAL_OK;
 8003ad2:	2000      	movs	r0, #0
 8003ad4:	e021      	b.n	8003b1a <I2C_WaitOnTXISFlagUntilTimeout+0x5a>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ad6:	0032      	movs	r2, r6
 8003ad8:	0029      	movs	r1, r5
 8003ada:	0020      	movs	r0, r4
 8003adc:	f7ff ff72 	bl	80039c4 <I2C_IsErrorOccurred>
 8003ae0:	2800      	cmp	r0, #0
 8003ae2:	d119      	bne.n	8003b18 <I2C_WaitOnTXISFlagUntilTimeout+0x58>
    if (Timeout != HAL_MAX_DELAY)
 8003ae4:	1c6b      	adds	r3, r5, #1
 8003ae6:	d0f0      	beq.n	8003aca <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ae8:	f7ff fc5c 	bl	80033a4 <HAL_GetTick>
 8003aec:	1b80      	subs	r0, r0, r6
 8003aee:	42a8      	cmp	r0, r5
 8003af0:	d801      	bhi.n	8003af6 <I2C_WaitOnTXISFlagUntilTimeout+0x36>
 8003af2:	2d00      	cmp	r5, #0
 8003af4:	d1e9      	bne.n	8003aca <I2C_WaitOnTXISFlagUntilTimeout+0xa>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003af6:	6823      	ldr	r3, [r4, #0]
 8003af8:	6999      	ldr	r1, [r3, #24]
 8003afa:	2302      	movs	r3, #2
 8003afc:	000a      	movs	r2, r1
 8003afe:	401a      	ands	r2, r3
 8003b00:	4219      	tst	r1, r3
 8003b02:	d1e2      	bne.n	8003aca <I2C_WaitOnTXISFlagUntilTimeout+0xa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b04:	2120      	movs	r1, #32
 8003b06:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8003b08:	430b      	orrs	r3, r1
 8003b0a:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003b0c:	0023      	movs	r3, r4
          __HAL_UNLOCK(hi2c);
 8003b0e:	3440      	adds	r4, #64	@ 0x40
          hi2c->State = HAL_I2C_STATE_READY;
 8003b10:	3341      	adds	r3, #65	@ 0x41
 8003b12:	7019      	strb	r1, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b14:	705a      	strb	r2, [r3, #1]
          __HAL_UNLOCK(hi2c);
 8003b16:	7022      	strb	r2, [r4, #0]
      return HAL_ERROR;
 8003b18:	2001      	movs	r0, #1
}
 8003b1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003b1c <I2C_WaitOnFlagUntilTimeout>:
{
 8003b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b1e:	0004      	movs	r4, r0
 8003b20:	000d      	movs	r5, r1
 8003b22:	0017      	movs	r7, r2
 8003b24:	001e      	movs	r6, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b26:	6822      	ldr	r2, [r4, #0]
 8003b28:	6993      	ldr	r3, [r2, #24]
 8003b2a:	402b      	ands	r3, r5
 8003b2c:	1b5b      	subs	r3, r3, r5
 8003b2e:	4259      	negs	r1, r3
 8003b30:	414b      	adcs	r3, r1
 8003b32:	42bb      	cmp	r3, r7
 8003b34:	d001      	beq.n	8003b3a <I2C_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 8003b36:	2000      	movs	r0, #0
 8003b38:	e01f      	b.n	8003b7a <I2C_WaitOnFlagUntilTimeout+0x5e>
    if (Timeout != HAL_MAX_DELAY)
 8003b3a:	1c73      	adds	r3, r6, #1
 8003b3c:	d0f4      	beq.n	8003b28 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b3e:	f7ff fc31 	bl	80033a4 <HAL_GetTick>
 8003b42:	9b06      	ldr	r3, [sp, #24]
 8003b44:	1ac0      	subs	r0, r0, r3
 8003b46:	42b0      	cmp	r0, r6
 8003b48:	d801      	bhi.n	8003b4e <I2C_WaitOnFlagUntilTimeout+0x32>
 8003b4a:	2e00      	cmp	r6, #0
 8003b4c:	d1eb      	bne.n	8003b26 <I2C_WaitOnFlagUntilTimeout+0xa>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003b4e:	6823      	ldr	r3, [r4, #0]
 8003b50:	699b      	ldr	r3, [r3, #24]
 8003b52:	402b      	ands	r3, r5
 8003b54:	1b5b      	subs	r3, r3, r5
 8003b56:	425a      	negs	r2, r3
 8003b58:	4153      	adcs	r3, r2
 8003b5a:	42bb      	cmp	r3, r7
 8003b5c:	d1e3      	bne.n	8003b26 <I2C_WaitOnFlagUntilTimeout+0xa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b5e:	2220      	movs	r2, #32
 8003b60:	6c63      	ldr	r3, [r4, #68]	@ 0x44
          return HAL_ERROR;
 8003b62:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b64:	4313      	orrs	r3, r2
 8003b66:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003b68:	0023      	movs	r3, r4
 8003b6a:	3341      	adds	r3, #65	@ 0x41
 8003b6c:	701a      	strb	r2, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b6e:	0022      	movs	r2, r4
 8003b70:	2300      	movs	r3, #0
 8003b72:	3242      	adds	r2, #66	@ 0x42
          __HAL_UNLOCK(hi2c);
 8003b74:	3440      	adds	r4, #64	@ 0x40
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b76:	7013      	strb	r3, [r2, #0]
          __HAL_UNLOCK(hi2c);
 8003b78:	7023      	strb	r3, [r4, #0]
}
 8003b7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003b7c <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8003b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b7e:	0004      	movs	r4, r0
 8003b80:	000e      	movs	r6, r1
 8003b82:	0017      	movs	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b84:	2520      	movs	r5, #32
 8003b86:	6823      	ldr	r3, [r4, #0]
 8003b88:	699b      	ldr	r3, [r3, #24]
 8003b8a:	422b      	tst	r3, r5
 8003b8c:	d001      	beq.n	8003b92 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 8003b8e:	2000      	movs	r0, #0
 8003b90:	e01d      	b.n	8003bce <I2C_WaitOnSTOPFlagUntilTimeout+0x52>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b92:	003a      	movs	r2, r7
 8003b94:	0031      	movs	r1, r6
 8003b96:	0020      	movs	r0, r4
 8003b98:	f7ff ff14 	bl	80039c4 <I2C_IsErrorOccurred>
 8003b9c:	2800      	cmp	r0, #0
 8003b9e:	d115      	bne.n	8003bcc <I2C_WaitOnSTOPFlagUntilTimeout+0x50>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ba0:	f7ff fc00 	bl	80033a4 <HAL_GetTick>
 8003ba4:	1bc0      	subs	r0, r0, r7
 8003ba6:	42b0      	cmp	r0, r6
 8003ba8:	d801      	bhi.n	8003bae <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
 8003baa:	2e00      	cmp	r6, #0
 8003bac:	d1eb      	bne.n	8003b86 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003bae:	6823      	ldr	r3, [r4, #0]
 8003bb0:	699b      	ldr	r3, [r3, #24]
 8003bb2:	001a      	movs	r2, r3
 8003bb4:	402a      	ands	r2, r5
 8003bb6:	422b      	tst	r3, r5
 8003bb8:	d1e5      	bne.n	8003b86 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003bba:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8003bbc:	432b      	orrs	r3, r5
 8003bbe:	6463      	str	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003bc0:	0023      	movs	r3, r4
        __HAL_UNLOCK(hi2c);
 8003bc2:	3440      	adds	r4, #64	@ 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 8003bc4:	3341      	adds	r3, #65	@ 0x41
 8003bc6:	701d      	strb	r5, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bc8:	705a      	strb	r2, [r3, #1]
        __HAL_UNLOCK(hi2c);
 8003bca:	7022      	strb	r2, [r4, #0]
      return HAL_ERROR;
 8003bcc:	2001      	movs	r0, #1
}
 8003bce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003bd0 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8003bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bd2:	0004      	movs	r4, r0
 8003bd4:	000d      	movs	r5, r1
 8003bd6:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003bd8:	2704      	movs	r7, #4
 8003bda:	6823      	ldr	r3, [r4, #0]
 8003bdc:	699b      	ldr	r3, [r3, #24]
 8003bde:	423b      	tst	r3, r7
 8003be0:	d111      	bne.n	8003c06 <I2C_WaitOnRXNEFlagUntilTimeout+0x36>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003be2:	0032      	movs	r2, r6
 8003be4:	0029      	movs	r1, r5
 8003be6:	0020      	movs	r0, r4
 8003be8:	f7ff feec 	bl	80039c4 <I2C_IsErrorOccurred>
 8003bec:	2800      	cmp	r0, #0
 8003bee:	d123      	bne.n	8003c38 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003bf0:	2120      	movs	r1, #32
 8003bf2:	6823      	ldr	r3, [r4, #0]
 8003bf4:	699a      	ldr	r2, [r3, #24]
 8003bf6:	420a      	tst	r2, r1
 8003bf8:	d022      	beq.n	8003c40 <I2C_WaitOnRXNEFlagUntilTimeout+0x70>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003bfa:	699a      	ldr	r2, [r3, #24]
 8003bfc:	423a      	tst	r2, r7
 8003bfe:	d004      	beq.n	8003c0a <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
 8003c00:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 8003c02:	2a00      	cmp	r2, #0
 8003c04:	d001      	beq.n	8003c0a <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
        return HAL_OK;
 8003c06:	2000      	movs	r0, #0
}
 8003c08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c0a:	6999      	ldr	r1, [r3, #24]
 8003c0c:	2210      	movs	r2, #16
 8003c0e:	0008      	movs	r0, r1
 8003c10:	4010      	ands	r0, r2
 8003c12:	4211      	tst	r1, r2
 8003c14:	d012      	beq.n	8003c3c <I2C_WaitOnRXNEFlagUntilTimeout+0x6c>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c16:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003c18:	3a0c      	subs	r2, #12
 8003c1a:	6462      	str	r2, [r4, #68]	@ 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c1c:	2120      	movs	r1, #32
 8003c1e:	61d9      	str	r1, [r3, #28]
        I2C_RESET_CR2(hi2c);
 8003c20:	685a      	ldr	r2, [r3, #4]
 8003c22:	4811      	ldr	r0, [pc, #68]	@ (8003c68 <I2C_WaitOnRXNEFlagUntilTimeout+0x98>)
 8003c24:	4002      	ands	r2, r0
 8003c26:	605a      	str	r2, [r3, #4]
        hi2c->State = HAL_I2C_STATE_READY;
 8003c28:	0023      	movs	r3, r4
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c2a:	2200      	movs	r2, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8003c2c:	3341      	adds	r3, #65	@ 0x41
 8003c2e:	7019      	strb	r1, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c30:	705a      	strb	r2, [r3, #1]
        __HAL_UNLOCK(hi2c);
 8003c32:	2300      	movs	r3, #0
 8003c34:	3440      	adds	r4, #64	@ 0x40
 8003c36:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 8003c38:	2001      	movs	r0, #1
 8003c3a:	e7e5      	b.n	8003c08 <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c3c:	6460      	str	r0, [r4, #68]	@ 0x44
 8003c3e:	e7ed      	b.n	8003c1c <I2C_WaitOnRXNEFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c40:	f7ff fbb0 	bl	80033a4 <HAL_GetTick>
 8003c44:	1b80      	subs	r0, r0, r6
 8003c46:	42a8      	cmp	r0, r5
 8003c48:	d801      	bhi.n	8003c4e <I2C_WaitOnRXNEFlagUntilTimeout+0x7e>
 8003c4a:	2d00      	cmp	r5, #0
 8003c4c:	d1c5      	bne.n	8003bda <I2C_WaitOnRXNEFlagUntilTimeout+0xa>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003c4e:	6823      	ldr	r3, [r4, #0]
 8003c50:	699b      	ldr	r3, [r3, #24]
 8003c52:	423b      	tst	r3, r7
 8003c54:	d1c1      	bne.n	8003bda <I2C_WaitOnRXNEFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c56:	2220      	movs	r2, #32
 8003c58:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	6463      	str	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003c5e:	0023      	movs	r3, r4
 8003c60:	3341      	adds	r3, #65	@ 0x41
 8003c62:	701a      	strb	r2, [r3, #0]
        return HAL_ERROR;
 8003c64:	e7e5      	b.n	8003c32 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8003c66:	46c0      	nop			@ (mov r8, r8)
 8003c68:	fe00e800 	.word	0xfe00e800

08003c6c <HAL_I2C_Init>:
{
 8003c6c:	b570      	push	{r4, r5, r6, lr}
 8003c6e:	0004      	movs	r4, r0
    return HAL_ERROR;
 8003c70:	2001      	movs	r0, #1
  if (hi2c == NULL)
 8003c72:	2c00      	cmp	r4, #0
 8003c74:	d03f      	beq.n	8003cf6 <HAL_I2C_Init+0x8a>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c76:	0025      	movs	r5, r4
 8003c78:	3541      	adds	r5, #65	@ 0x41
 8003c7a:	782b      	ldrb	r3, [r5, #0]
 8003c7c:	b2da      	uxtb	r2, r3
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d105      	bne.n	8003c8e <HAL_I2C_Init+0x22>
    hi2c->Lock = HAL_UNLOCKED;
 8003c82:	0023      	movs	r3, r4
 8003c84:	3340      	adds	r3, #64	@ 0x40
    HAL_I2C_MspInit(hi2c);
 8003c86:	0020      	movs	r0, r4
    hi2c->Lock = HAL_UNLOCKED;
 8003c88:	701a      	strb	r2, [r3, #0]
    HAL_I2C_MspInit(hi2c);
 8003c8a:	f7ff f80b 	bl	8002ca4 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c8e:	2324      	movs	r3, #36	@ 0x24
  __HAL_I2C_DISABLE(hi2c);
 8003c90:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c92:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 8003c94:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c96:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8003c98:	681a      	ldr	r2, [r3, #0]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003c9a:	68a6      	ldr	r6, [r4, #8]
  __HAL_I2C_DISABLE(hi2c);
 8003c9c:	438a      	bics	r2, r1
 8003c9e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003ca0:	491a      	ldr	r1, [pc, #104]	@ (8003d0c <HAL_I2C_Init+0xa0>)
 8003ca2:	6862      	ldr	r2, [r4, #4]
 8003ca4:	400a      	ands	r2, r1
 8003ca6:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003ca8:	689a      	ldr	r2, [r3, #8]
 8003caa:	4919      	ldr	r1, [pc, #100]	@ (8003d10 <HAL_I2C_Init+0xa4>)
 8003cac:	400a      	ands	r2, r1
 8003cae:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003cb0:	2801      	cmp	r0, #1
 8003cb2:	d121      	bne.n	8003cf8 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003cb4:	2280      	movs	r2, #128	@ 0x80
 8003cb6:	0212      	lsls	r2, r2, #8
 8003cb8:	4332      	orrs	r2, r6
 8003cba:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003cbc:	6858      	ldr	r0, [r3, #4]
 8003cbe:	4a15      	ldr	r2, [pc, #84]	@ (8003d14 <HAL_I2C_Init+0xa8>)
 8003cc0:	4302      	orrs	r2, r0
 8003cc2:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003cc4:	68da      	ldr	r2, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cc6:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003cc8:	400a      	ands	r2, r1
 8003cca:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003ccc:	6961      	ldr	r1, [r4, #20]
 8003cce:	6922      	ldr	r2, [r4, #16]
 8003cd0:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003cd2:	69a1      	ldr	r1, [r4, #24]
 8003cd4:	0209      	lsls	r1, r1, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003cd6:	430a      	orrs	r2, r1
 8003cd8:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003cda:	6a21      	ldr	r1, [r4, #32]
 8003cdc:	69e2      	ldr	r2, [r4, #28]
 8003cde:	430a      	orrs	r2, r1
 8003ce0:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	6819      	ldr	r1, [r3, #0]
 8003ce6:	430a      	orrs	r2, r1
 8003ce8:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8003cea:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cec:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003cee:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003cf0:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cf2:	3442      	adds	r4, #66	@ 0x42
 8003cf4:	7020      	strb	r0, [r4, #0]
}
 8003cf6:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003cf8:	2284      	movs	r2, #132	@ 0x84
 8003cfa:	0212      	lsls	r2, r2, #8
 8003cfc:	4332      	orrs	r2, r6
 8003cfe:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003d00:	2802      	cmp	r0, #2
 8003d02:	d1db      	bne.n	8003cbc <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003d04:	2280      	movs	r2, #128	@ 0x80
 8003d06:	0112      	lsls	r2, r2, #4
 8003d08:	605a      	str	r2, [r3, #4]
 8003d0a:	e7d7      	b.n	8003cbc <HAL_I2C_Init+0x50>
 8003d0c:	f0ffffff 	.word	0xf0ffffff
 8003d10:	ffff7fff 	.word	0xffff7fff
 8003d14:	02008000 	.word	0x02008000

08003d18 <HAL_I2C_Master_Transmit>:
{
 8003d18:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d1a:	0006      	movs	r6, r0
{
 8003d1c:	b085      	sub	sp, #20
 8003d1e:	9202      	str	r2, [sp, #8]
 8003d20:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d22:	3641      	adds	r6, #65	@ 0x41
 8003d24:	7833      	ldrb	r3, [r6, #0]
{
 8003d26:	0004      	movs	r4, r0
 8003d28:	000f      	movs	r7, r1
    __HAL_LOCK(hi2c);
 8003d2a:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d2c:	2b20      	cmp	r3, #32
 8003d2e:	d114      	bne.n	8003d5a <HAL_I2C_Master_Transmit+0x42>
    __HAL_LOCK(hi2c);
 8003d30:	0023      	movs	r3, r4
 8003d32:	3340      	adds	r3, #64	@ 0x40
 8003d34:	781a      	ldrb	r2, [r3, #0]
 8003d36:	2a01      	cmp	r2, #1
 8003d38:	d00f      	beq.n	8003d5a <HAL_I2C_Master_Transmit+0x42>
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8003d3e:	f7ff fb31 	bl	80033a4 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003d42:	2180      	movs	r1, #128	@ 0x80
    tickstart = HAL_GetTick();
 8003d44:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003d46:	9000      	str	r0, [sp, #0]
 8003d48:	2319      	movs	r3, #25
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	0020      	movs	r0, r4
 8003d4e:	0209      	lsls	r1, r1, #8
 8003d50:	f7ff fee4 	bl	8003b1c <I2C_WaitOnFlagUntilTimeout>
 8003d54:	2800      	cmp	r0, #0
 8003d56:	d002      	beq.n	8003d5e <HAL_I2C_Master_Transmit+0x46>
      return HAL_ERROR;
 8003d58:	2001      	movs	r0, #1
}
 8003d5a:	b005      	add	sp, #20
 8003d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003d5e:	2321      	movs	r3, #33	@ 0x21
 8003d60:	7033      	strb	r3, [r6, #0]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003d62:	0026      	movs	r6, r4
 8003d64:	3b11      	subs	r3, #17
 8003d66:	3642      	adds	r6, #66	@ 0x42
 8003d68:	7033      	strb	r3, [r6, #0]
    hi2c->pBuffPtr  = pData;
 8003d6a:	9b02      	ldr	r3, [sp, #8]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d6c:	6460      	str	r0, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
 8003d6e:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003d70:	9b03      	ldr	r3, [sp, #12]
    hi2c->XferISR   = NULL;
 8003d72:	6360      	str	r0, [r4, #52]	@ 0x34
    hi2c->XferCount = Size;
 8003d74:	8563      	strh	r3, [r4, #42]	@ 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d76:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8003d78:	4b2b      	ldr	r3, [pc, #172]	@ (8003e28 <HAL_I2C_Master_Transmit+0x110>)
 8003d7a:	2aff      	cmp	r2, #255	@ 0xff
 8003d7c:	d920      	bls.n	8003dc0 <HAL_I2C_Master_Transmit+0xa8>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d7e:	22ff      	movs	r2, #255	@ 0xff
 8003d80:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003d82:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003d84:	2380      	movs	r3, #128	@ 0x80
 8003d86:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003d88:	0039      	movs	r1, r7
 8003d8a:	0020      	movs	r0, r4
 8003d8c:	f7ff fe04 	bl	8003998 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003d90:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d92:	002a      	movs	r2, r5
 8003d94:	0020      	movs	r0, r4
 8003d96:	990a      	ldr	r1, [sp, #40]	@ 0x28
    while (hi2c->XferCount > 0U)
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d119      	bne.n	8003dd0 <HAL_I2C_Master_Transmit+0xb8>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d9c:	f7ff feee 	bl	8003b7c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003da0:	2800      	cmp	r0, #0
 8003da2:	d1d9      	bne.n	8003d58 <HAL_I2C_Master_Transmit+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003da4:	2120      	movs	r1, #32
 8003da6:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8003da8:	4d20      	ldr	r5, [pc, #128]	@ (8003e2c <HAL_I2C_Master_Transmit+0x114>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003daa:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8003dac:	685a      	ldr	r2, [r3, #4]
 8003dae:	402a      	ands	r2, r5
 8003db0:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003db2:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 8003db4:	3440      	adds	r4, #64	@ 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8003db6:	3341      	adds	r3, #65	@ 0x41
 8003db8:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003dba:	7030      	strb	r0, [r6, #0]
    __HAL_UNLOCK(hi2c);
 8003dbc:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8003dbe:	e7cc      	b.n	8003d5a <HAL_I2C_Master_Transmit+0x42>
      hi2c->XferSize = hi2c->XferCount;
 8003dc0:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8003dc2:	b292      	uxth	r2, r2
 8003dc4:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003dc6:	b2d2      	uxtb	r2, r2
 8003dc8:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003dca:	2380      	movs	r3, #128	@ 0x80
 8003dcc:	049b      	lsls	r3, r3, #18
 8003dce:	e7db      	b.n	8003d88 <HAL_I2C_Master_Transmit+0x70>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dd0:	f7ff fe76 	bl	8003ac0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003dd4:	2800      	cmp	r0, #0
 8003dd6:	d1bf      	bne.n	8003d58 <HAL_I2C_Master_Transmit+0x40>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003dd8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003dda:	6822      	ldr	r2, [r4, #0]
 8003ddc:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 8003dde:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003de0:	6291      	str	r1, [r2, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8003de2:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8003de4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8003de6:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8003de8:	3b01      	subs	r3, #1
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	8563      	strh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8003dee:	3a01      	subs	r2, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003df0:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8003df2:	b292      	uxth	r2, r2
 8003df4:	8522      	strh	r2, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d0ca      	beq.n	8003d90 <HAL_I2C_Master_Transmit+0x78>
 8003dfa:	2a00      	cmp	r2, #0
 8003dfc:	d1c8      	bne.n	8003d90 <HAL_I2C_Master_Transmit+0x78>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003dfe:	2180      	movs	r1, #128	@ 0x80
 8003e00:	0020      	movs	r0, r4
 8003e02:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003e04:	9500      	str	r5, [sp, #0]
 8003e06:	f7ff fe89 	bl	8003b1c <I2C_WaitOnFlagUntilTimeout>
 8003e0a:	2800      	cmp	r0, #0
 8003e0c:	d1a4      	bne.n	8003d58 <HAL_I2C_Master_Transmit+0x40>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e0e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003e10:	2bff      	cmp	r3, #255	@ 0xff
 8003e12:	d903      	bls.n	8003e1c <HAL_I2C_Master_Transmit+0x104>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e14:	22ff      	movs	r2, #255	@ 0xff
 8003e16:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003e18:	9000      	str	r0, [sp, #0]
 8003e1a:	e7b3      	b.n	8003d84 <HAL_I2C_Master_Transmit+0x6c>
          hi2c->XferSize = hi2c->XferCount;
 8003e1c:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8003e1e:	b292      	uxth	r2, r2
 8003e20:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003e22:	b2d2      	uxtb	r2, r2
 8003e24:	9000      	str	r0, [sp, #0]
 8003e26:	e7d0      	b.n	8003dca <HAL_I2C_Master_Transmit+0xb2>
 8003e28:	80002000 	.word	0x80002000
 8003e2c:	fe00e800 	.word	0xfe00e800

08003e30 <HAL_I2C_Master_Receive>:
{
 8003e30:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e32:	0006      	movs	r6, r0
{
 8003e34:	b085      	sub	sp, #20
 8003e36:	9202      	str	r2, [sp, #8]
 8003e38:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e3a:	3641      	adds	r6, #65	@ 0x41
 8003e3c:	7833      	ldrb	r3, [r6, #0]
{
 8003e3e:	0004      	movs	r4, r0
 8003e40:	000f      	movs	r7, r1
    __HAL_LOCK(hi2c);
 8003e42:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e44:	2b20      	cmp	r3, #32
 8003e46:	d114      	bne.n	8003e72 <HAL_I2C_Master_Receive+0x42>
    __HAL_LOCK(hi2c);
 8003e48:	0023      	movs	r3, r4
 8003e4a:	3340      	adds	r3, #64	@ 0x40
 8003e4c:	781a      	ldrb	r2, [r3, #0]
 8003e4e:	2a01      	cmp	r2, #1
 8003e50:	d00f      	beq.n	8003e72 <HAL_I2C_Master_Receive+0x42>
 8003e52:	2201      	movs	r2, #1
 8003e54:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8003e56:	f7ff faa5 	bl	80033a4 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003e5a:	2180      	movs	r1, #128	@ 0x80
    tickstart = HAL_GetTick();
 8003e5c:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003e5e:	9000      	str	r0, [sp, #0]
 8003e60:	2319      	movs	r3, #25
 8003e62:	2201      	movs	r2, #1
 8003e64:	0020      	movs	r0, r4
 8003e66:	0209      	lsls	r1, r1, #8
 8003e68:	f7ff fe58 	bl	8003b1c <I2C_WaitOnFlagUntilTimeout>
 8003e6c:	2800      	cmp	r0, #0
 8003e6e:	d002      	beq.n	8003e76 <HAL_I2C_Master_Receive+0x46>
      return HAL_ERROR;
 8003e70:	2001      	movs	r0, #1
}
 8003e72:	b005      	add	sp, #20
 8003e74:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003e76:	2322      	movs	r3, #34	@ 0x22
 8003e78:	7033      	strb	r3, [r6, #0]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003e7a:	0026      	movs	r6, r4
 8003e7c:	3b12      	subs	r3, #18
 8003e7e:	3642      	adds	r6, #66	@ 0x42
 8003e80:	7033      	strb	r3, [r6, #0]
    hi2c->pBuffPtr  = pData;
 8003e82:	9b02      	ldr	r3, [sp, #8]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e84:	6460      	str	r0, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
 8003e86:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003e88:	9b03      	ldr	r3, [sp, #12]
    hi2c->XferISR   = NULL;
 8003e8a:	6360      	str	r0, [r4, #52]	@ 0x34
    hi2c->XferCount = Size;
 8003e8c:	8563      	strh	r3, [r4, #42]	@ 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e8e:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8003e90:	4b2c      	ldr	r3, [pc, #176]	@ (8003f44 <HAL_I2C_Master_Receive+0x114>)
 8003e92:	2aff      	cmp	r2, #255	@ 0xff
 8003e94:	d920      	bls.n	8003ed8 <HAL_I2C_Master_Receive+0xa8>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e96:	22ff      	movs	r2, #255	@ 0xff
 8003e98:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003e9a:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003e9c:	2380      	movs	r3, #128	@ 0x80
 8003e9e:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ea0:	0039      	movs	r1, r7
 8003ea2:	0020      	movs	r0, r4
 8003ea4:	f7ff fd78 	bl	8003998 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003ea8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003eaa:	002a      	movs	r2, r5
 8003eac:	0020      	movs	r0, r4
 8003eae:	990a      	ldr	r1, [sp, #40]	@ 0x28
    while (hi2c->XferCount > 0U)
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d119      	bne.n	8003ee8 <HAL_I2C_Master_Receive+0xb8>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003eb4:	f7ff fe62 	bl	8003b7c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003eb8:	2800      	cmp	r0, #0
 8003eba:	d1d9      	bne.n	8003e70 <HAL_I2C_Master_Receive+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ebc:	2120      	movs	r1, #32
 8003ebe:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8003ec0:	4d21      	ldr	r5, [pc, #132]	@ (8003f48 <HAL_I2C_Master_Receive+0x118>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ec2:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8003ec4:	685a      	ldr	r2, [r3, #4]
 8003ec6:	402a      	ands	r2, r5
 8003ec8:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003eca:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 8003ecc:	3440      	adds	r4, #64	@ 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8003ece:	3341      	adds	r3, #65	@ 0x41
 8003ed0:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003ed2:	7030      	strb	r0, [r6, #0]
    __HAL_UNLOCK(hi2c);
 8003ed4:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8003ed6:	e7cc      	b.n	8003e72 <HAL_I2C_Master_Receive+0x42>
      hi2c->XferSize = hi2c->XferCount;
 8003ed8:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8003eda:	b292      	uxth	r2, r2
 8003edc:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ede:	b2d2      	uxtb	r2, r2
 8003ee0:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ee2:	2380      	movs	r3, #128	@ 0x80
 8003ee4:	049b      	lsls	r3, r3, #18
 8003ee6:	e7db      	b.n	8003ea0 <HAL_I2C_Master_Receive+0x70>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ee8:	f7ff fe72 	bl	8003bd0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003eec:	2800      	cmp	r0, #0
 8003eee:	d1bf      	bne.n	8003e70 <HAL_I2C_Master_Receive+0x40>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003ef0:	6823      	ldr	r3, [r4, #0]
 8003ef2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003ef4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003ef6:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8003ef8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 8003efa:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8003efc:	3301      	adds	r3, #1
 8003efe:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8003f00:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8003f02:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8003f04:	3b01      	subs	r3, #1
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003f0a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8003f0c:	b292      	uxth	r2, r2
 8003f0e:	8522      	strh	r2, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d0c9      	beq.n	8003ea8 <HAL_I2C_Master_Receive+0x78>
 8003f14:	2a00      	cmp	r2, #0
 8003f16:	d1c7      	bne.n	8003ea8 <HAL_I2C_Master_Receive+0x78>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003f18:	2180      	movs	r1, #128	@ 0x80
 8003f1a:	0020      	movs	r0, r4
 8003f1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003f1e:	9500      	str	r5, [sp, #0]
 8003f20:	f7ff fdfc 	bl	8003b1c <I2C_WaitOnFlagUntilTimeout>
 8003f24:	2800      	cmp	r0, #0
 8003f26:	d1a3      	bne.n	8003e70 <HAL_I2C_Master_Receive+0x40>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f28:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003f2a:	2bff      	cmp	r3, #255	@ 0xff
 8003f2c:	d903      	bls.n	8003f36 <HAL_I2C_Master_Receive+0x106>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f2e:	22ff      	movs	r2, #255	@ 0xff
 8003f30:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003f32:	9000      	str	r0, [sp, #0]
 8003f34:	e7b2      	b.n	8003e9c <HAL_I2C_Master_Receive+0x6c>
          hi2c->XferSize = hi2c->XferCount;
 8003f36:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8003f38:	b292      	uxth	r2, r2
 8003f3a:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003f3c:	b2d2      	uxtb	r2, r2
 8003f3e:	9000      	str	r0, [sp, #0]
 8003f40:	e7cf      	b.n	8003ee2 <HAL_I2C_Master_Receive+0xb2>
 8003f42:	46c0      	nop			@ (mov r8, r8)
 8003f44:	80002400 	.word	0x80002400
 8003f48:	fe00e800 	.word	0xfe00e800

08003f4c <HAL_I2C_IsDeviceReady>:
{
 8003f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f4e:	001d      	movs	r5, r3
  __IO uint32_t I2C_Trials = 0UL;
 8003f50:	2300      	movs	r3, #0
{
 8003f52:	b089      	sub	sp, #36	@ 0x24
  __IO uint32_t I2C_Trials = 0UL;
 8003f54:	9307      	str	r3, [sp, #28]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f56:	0003      	movs	r3, r0
 8003f58:	3341      	adds	r3, #65	@ 0x41
{
 8003f5a:	9205      	str	r2, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f5c:	9303      	str	r3, [sp, #12]
 8003f5e:	781b      	ldrb	r3, [r3, #0]
{
 8003f60:	0004      	movs	r4, r0
      return HAL_BUSY;
 8003f62:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f64:	2b20      	cmp	r3, #32
 8003f66:	d158      	bne.n	800401a <HAL_I2C_IsDeviceReady+0xce>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003f68:	6823      	ldr	r3, [r4, #0]
 8003f6a:	699e      	ldr	r6, [r3, #24]
 8003f6c:	2380      	movs	r3, #128	@ 0x80
 8003f6e:	0032      	movs	r2, r6
 8003f70:	021b      	lsls	r3, r3, #8
 8003f72:	401a      	ands	r2, r3
 8003f74:	421e      	tst	r6, r3
 8003f76:	d150      	bne.n	800401a <HAL_I2C_IsDeviceReady+0xce>
    __HAL_LOCK(hi2c);
 8003f78:	0023      	movs	r3, r4
 8003f7a:	3340      	adds	r3, #64	@ 0x40
 8003f7c:	781e      	ldrb	r6, [r3, #0]
 8003f7e:	2e01      	cmp	r6, #1
 8003f80:	d04b      	beq.n	800401a <HAL_I2C_IsDeviceReady+0xce>
 8003f82:	2601      	movs	r6, #1
 8003f84:	701e      	strb	r6, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f86:	2324      	movs	r3, #36	@ 0x24
 8003f88:	9803      	ldr	r0, [sp, #12]
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8003f8a:	0589      	lsls	r1, r1, #22
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f8c:	7003      	strb	r3, [r0, #0]
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8003f8e:	0d8b      	lsrs	r3, r1, #22
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f90:	6462      	str	r2, [r4, #68]	@ 0x44
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8003f92:	9304      	str	r3, [sp, #16]
 8003f94:	68e3      	ldr	r3, [r4, #12]
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d129      	bne.n	8003fee <HAL_I2C_IsDeviceReady+0xa2>
 8003f9a:	4b36      	ldr	r3, [pc, #216]	@ (8004074 <HAL_I2C_IsDeviceReady+0x128>)
 8003f9c:	9a04      	ldr	r2, [sp, #16]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	6822      	ldr	r2, [r4, #0]
 8003fa2:	6053      	str	r3, [r2, #4]
      tickstart = HAL_GetTick();
 8003fa4:	f7ff f9fe 	bl	80033a4 <HAL_GetTick>
 8003fa8:	9002      	str	r0, [sp, #8]
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003faa:	6822      	ldr	r2, [r4, #0]
 8003fac:	6993      	ldr	r3, [r2, #24]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003fae:	6992      	ldr	r2, [r2, #24]
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fb0:	095b      	lsrs	r3, r3, #5
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003fb2:	0912      	lsrs	r2, r2, #4
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fb4:	4033      	ands	r3, r6
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003fb6:	4032      	ands	r2, r6
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	d01a      	beq.n	8003ff2 <HAL_I2C_IsDeviceReady+0xa6>
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8003fbc:	6823      	ldr	r3, [r4, #0]
 8003fbe:	2710      	movs	r7, #16
 8003fc0:	699b      	ldr	r3, [r3, #24]
 8003fc2:	001a      	movs	r2, r3
 8003fc4:	403a      	ands	r2, r7
 8003fc6:	423b      	tst	r3, r7
 8003fc8:	d129      	bne.n	800401e <HAL_I2C_IsDeviceReady+0xd2>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003fca:	9b02      	ldr	r3, [sp, #8]
 8003fcc:	2120      	movs	r1, #32
 8003fce:	9300      	str	r3, [sp, #0]
 8003fd0:	0020      	movs	r0, r4
 8003fd2:	002b      	movs	r3, r5
 8003fd4:	f7ff fda2 	bl	8003b1c <I2C_WaitOnFlagUntilTimeout>
 8003fd8:	2800      	cmp	r0, #0
 8003fda:	d11d      	bne.n	8004018 <HAL_I2C_IsDeviceReady+0xcc>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fdc:	2320      	movs	r3, #32
 8003fde:	6822      	ldr	r2, [r4, #0]
 8003fe0:	61d3      	str	r3, [r2, #28]
        hi2c->State = HAL_I2C_STATE_READY;
 8003fe2:	0022      	movs	r2, r4
        __HAL_UNLOCK(hi2c);
 8003fe4:	3440      	adds	r4, #64	@ 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 8003fe6:	3241      	adds	r2, #65	@ 0x41
 8003fe8:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 8003fea:	7020      	strb	r0, [r4, #0]
        return HAL_OK;
 8003fec:	e015      	b.n	800401a <HAL_I2C_IsDeviceReady+0xce>
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8003fee:	4b22      	ldr	r3, [pc, #136]	@ (8004078 <HAL_I2C_IsDeviceReady+0x12c>)
 8003ff0:	e7d4      	b.n	8003f9c <HAL_I2C_IsDeviceReady+0x50>
        if (Timeout != HAL_MAX_DELAY)
 8003ff2:	1c6b      	adds	r3, r5, #1
 8003ff4:	d0d9      	beq.n	8003faa <HAL_I2C_IsDeviceReady+0x5e>
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003ff6:	f7ff f9d5 	bl	80033a4 <HAL_GetTick>
 8003ffa:	9b02      	ldr	r3, [sp, #8]
 8003ffc:	1ac0      	subs	r0, r0, r3
 8003ffe:	42a8      	cmp	r0, r5
 8004000:	d801      	bhi.n	8004006 <HAL_I2C_IsDeviceReady+0xba>
 8004002:	2d00      	cmp	r5, #0
 8004004:	d1d1      	bne.n	8003faa <HAL_I2C_IsDeviceReady+0x5e>
            hi2c->State = HAL_I2C_STATE_READY;
 8004006:	2320      	movs	r3, #32
 8004008:	9a03      	ldr	r2, [sp, #12]
            __HAL_UNLOCK(hi2c);
 800400a:	3440      	adds	r4, #64	@ 0x40
            hi2c->State = HAL_I2C_STATE_READY;
 800400c:	7013      	strb	r3, [r2, #0]
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800400e:	6862      	ldr	r2, [r4, #4]
 8004010:	4313      	orrs	r3, r2
 8004012:	6063      	str	r3, [r4, #4]
            __HAL_UNLOCK(hi2c);
 8004014:	2300      	movs	r3, #0
 8004016:	7023      	strb	r3, [r4, #0]
            return HAL_ERROR;
 8004018:	2001      	movs	r0, #1
}
 800401a:	b009      	add	sp, #36	@ 0x24
 800401c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800401e:	9b02      	ldr	r3, [sp, #8]
 8004020:	2200      	movs	r2, #0
 8004022:	9300      	str	r3, [sp, #0]
 8004024:	2120      	movs	r1, #32
 8004026:	002b      	movs	r3, r5
 8004028:	0020      	movs	r0, r4
 800402a:	f7ff fd77 	bl	8003b1c <I2C_WaitOnFlagUntilTimeout>
 800402e:	1e02      	subs	r2, r0, #0
 8004030:	d1f2      	bne.n	8004018 <HAL_I2C_IsDeviceReady+0xcc>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004032:	6823      	ldr	r3, [r4, #0]
      if (I2C_Trials == Trials)
 8004034:	9805      	ldr	r0, [sp, #20]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004036:	61df      	str	r7, [r3, #28]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004038:	2720      	movs	r7, #32
 800403a:	61df      	str	r7, [r3, #28]
      if (I2C_Trials == Trials)
 800403c:	9907      	ldr	r1, [sp, #28]
 800403e:	4281      	cmp	r1, r0
 8004040:	d10f      	bne.n	8004062 <HAL_I2C_IsDeviceReady+0x116>
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004042:	2180      	movs	r1, #128	@ 0x80
 8004044:	6858      	ldr	r0, [r3, #4]
 8004046:	01c9      	lsls	r1, r1, #7
 8004048:	4301      	orrs	r1, r0
 800404a:	6059      	str	r1, [r3, #4]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800404c:	9b02      	ldr	r3, [sp, #8]
 800404e:	0039      	movs	r1, r7
 8004050:	9300      	str	r3, [sp, #0]
 8004052:	0020      	movs	r0, r4
 8004054:	002b      	movs	r3, r5
 8004056:	f7ff fd61 	bl	8003b1c <I2C_WaitOnFlagUntilTimeout>
 800405a:	2800      	cmp	r0, #0
 800405c:	d1dc      	bne.n	8004018 <HAL_I2C_IsDeviceReady+0xcc>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800405e:	6823      	ldr	r3, [r4, #0]
 8004060:	61df      	str	r7, [r3, #28]
      I2C_Trials++;
 8004062:	9b07      	ldr	r3, [sp, #28]
    } while (I2C_Trials < Trials);
 8004064:	9a05      	ldr	r2, [sp, #20]
      I2C_Trials++;
 8004066:	3301      	adds	r3, #1
 8004068:	9307      	str	r3, [sp, #28]
    } while (I2C_Trials < Trials);
 800406a:	9b07      	ldr	r3, [sp, #28]
 800406c:	4293      	cmp	r3, r2
 800406e:	d200      	bcs.n	8004072 <HAL_I2C_IsDeviceReady+0x126>
 8004070:	e790      	b.n	8003f94 <HAL_I2C_IsDeviceReady+0x48>
 8004072:	e7c8      	b.n	8004006 <HAL_I2C_IsDeviceReady+0xba>
 8004074:	02002000 	.word	0x02002000
 8004078:	02002800 	.word	0x02002800

0800407c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800407c:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800407e:	0004      	movs	r4, r0
 8004080:	3441      	adds	r4, #65	@ 0x41
 8004082:	7822      	ldrb	r2, [r4, #0]
{
 8004084:	0003      	movs	r3, r0
 8004086:	000f      	movs	r7, r1
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004088:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800408a:	b2d6      	uxtb	r6, r2
 800408c:	2a20      	cmp	r2, #32
 800408e:	d118      	bne.n	80040c2 <HAL_I2CEx_ConfigAnalogFilter+0x46>
    __HAL_LOCK(hi2c);
 8004090:	001d      	movs	r5, r3
 8004092:	3540      	adds	r5, #64	@ 0x40
 8004094:	782a      	ldrb	r2, [r5, #0]
 8004096:	2a01      	cmp	r2, #1
 8004098:	d013      	beq.n	80040c2 <HAL_I2CEx_ConfigAnalogFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800409a:	2224      	movs	r2, #36	@ 0x24
 800409c:	7022      	strb	r2, [r4, #0]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	3a23      	subs	r2, #35	@ 0x23
 80040a2:	6819      	ldr	r1, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80040a4:	4807      	ldr	r0, [pc, #28]	@ (80040c4 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
    __HAL_I2C_DISABLE(hi2c);
 80040a6:	4391      	bics	r1, r2
 80040a8:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80040aa:	6819      	ldr	r1, [r3, #0]
 80040ac:	4001      	ands	r1, r0
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040ae:	2000      	movs	r0, #0
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80040b0:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 80040b2:	6819      	ldr	r1, [r3, #0]
 80040b4:	4339      	orrs	r1, r7
 80040b6:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 80040b8:	6819      	ldr	r1, [r3, #0]
 80040ba:	430a      	orrs	r2, r1
 80040bc:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80040be:	7026      	strb	r6, [r4, #0]
    __HAL_UNLOCK(hi2c);
 80040c0:	7028      	strb	r0, [r5, #0]
  }
  else
  {
    return HAL_BUSY;
  }
}
 80040c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040c4:	ffffefff 	.word	0xffffefff

080040c8 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040c8:	0002      	movs	r2, r0
{
 80040ca:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 80040cc:	3241      	adds	r2, #65	@ 0x41
 80040ce:	7814      	ldrb	r4, [r2, #0]
{
 80040d0:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80040d2:	b2e5      	uxtb	r5, r4
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040d4:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80040d6:	2c20      	cmp	r4, #32
 80040d8:	d117      	bne.n	800410a <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 80040da:	001c      	movs	r4, r3
 80040dc:	3440      	adds	r4, #64	@ 0x40
 80040de:	7826      	ldrb	r6, [r4, #0]
 80040e0:	2e01      	cmp	r6, #1
 80040e2:	d012      	beq.n	800410a <HAL_I2CEx_ConfigDigitalFilter+0x42>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80040e4:	3022      	adds	r0, #34	@ 0x22
 80040e6:	7010      	strb	r0, [r2, #0]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	3823      	subs	r0, #35	@ 0x23
 80040ec:	681e      	ldr	r6, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80040ee:	4f07      	ldr	r7, [pc, #28]	@ (800410c <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    __HAL_I2C_DISABLE(hi2c);
 80040f0:	4386      	bics	r6, r0
 80040f2:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 80040f4:	681e      	ldr	r6, [r3, #0]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80040f6:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 80040f8:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 80040fa:	4331      	orrs	r1, r6

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80040fc:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80040fe:	6819      	ldr	r1, [r3, #0]
 8004100:	4308      	orrs	r0, r1
 8004102:	6018      	str	r0, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004104:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8004106:	7015      	strb	r5, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8004108:	7020      	strb	r0, [r4, #0]
  }
  else
  {
    return HAL_BUSY;
  }
}
 800410a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800410c:	fffff0ff 	.word	0xfffff0ff

08004110 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004110:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8004112:	4b1e      	ldr	r3, [pc, #120]	@ (800418c <HAL_RCC_GetSysClockFreq+0x7c>)
{
 8004114:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 8004116:	68dc      	ldr	r4, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 8004118:	4022      	ands	r2, r4
 800411a:	2a08      	cmp	r2, #8
 800411c:	d034      	beq.n	8004188 <HAL_RCC_GetSysClockFreq+0x78>
 800411e:	2a0c      	cmp	r2, #12
 8004120:	d00c      	beq.n	800413c <HAL_RCC_GetSysClockFreq+0x2c>
 8004122:	2a04      	cmp	r2, #4
 8004124:	d128      	bne.n	8004178 <HAL_RCC_GetSysClockFreq+0x68>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004126:	6818      	ldr	r0, [r3, #0]
 8004128:	2310      	movs	r3, #16
 800412a:	4018      	ands	r0, r3
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800412c:	4243      	negs	r3, r0
 800412e:	4158      	adcs	r0, r3
 8004130:	4b17      	ldr	r3, [pc, #92]	@ (8004190 <HAL_RCC_GetSysClockFreq+0x80>)
 8004132:	4240      	negs	r0, r0
 8004134:	4018      	ands	r0, r3
 8004136:	4b17      	ldr	r3, [pc, #92]	@ (8004194 <HAL_RCC_GetSysClockFreq+0x84>)
 8004138:	18c0      	adds	r0, r0, r3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 800413a:	bd70      	pop	{r4, r5, r6, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800413c:	02a2      	lsls	r2, r4, #10
 800413e:	4816      	ldr	r0, [pc, #88]	@ (8004198 <HAL_RCC_GetSysClockFreq+0x88>)
 8004140:	0f12      	lsrs	r2, r2, #28
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004142:	5c80      	ldrb	r0, [r0, r2]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004144:	2280      	movs	r2, #128	@ 0x80
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004146:	0224      	lsls	r4, r4, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004148:	68d9      	ldr	r1, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800414a:	0fa4      	lsrs	r4, r4, #30
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800414c:	0252      	lsls	r2, r2, #9
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800414e:	3401      	adds	r4, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004150:	4211      	tst	r1, r2
 8004152:	d009      	beq.n	8004168 <HAL_RCC_GetSysClockFreq+0x58>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004154:	4a11      	ldr	r2, [pc, #68]	@ (800419c <HAL_RCC_GetSysClockFreq+0x8c>)
 8004156:	2300      	movs	r3, #0
 8004158:	2100      	movs	r1, #0
 800415a:	f7fc f9bb 	bl	80004d4 <__aeabi_lmul>
 800415e:	0022      	movs	r2, r4
 8004160:	2300      	movs	r3, #0
 8004162:	f7fc f997 	bl	8000494 <__aeabi_uldivmod>
 8004166:	e7e8      	b.n	800413a <HAL_RCC_GetSysClockFreq+0x2a>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	2310      	movs	r3, #16
 800416c:	421a      	tst	r2, r3
 800416e:	d001      	beq.n	8004174 <HAL_RCC_GetSysClockFreq+0x64>
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8004170:	4a08      	ldr	r2, [pc, #32]	@ (8004194 <HAL_RCC_GetSysClockFreq+0x84>)
 8004172:	e7f0      	b.n	8004156 <HAL_RCC_GetSysClockFreq+0x46>
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004174:	4a0a      	ldr	r2, [pc, #40]	@ (80041a0 <HAL_RCC_GetSysClockFreq+0x90>)
 8004176:	e7ee      	b.n	8004156 <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004178:	2080      	movs	r0, #128	@ 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800417a:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800417c:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800417e:	041b      	lsls	r3, r3, #16
 8004180:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004182:	3301      	adds	r3, #1
 8004184:	4098      	lsls	r0, r3
      break;
 8004186:	e7d8      	b.n	800413a <HAL_RCC_GetSysClockFreq+0x2a>
  switch (tmpreg & RCC_CFGR_SWS)
 8004188:	4804      	ldr	r0, [pc, #16]	@ (800419c <HAL_RCC_GetSysClockFreq+0x8c>)
 800418a:	e7d6      	b.n	800413a <HAL_RCC_GetSysClockFreq+0x2a>
 800418c:	40021000 	.word	0x40021000
 8004190:	00b71b00 	.word	0x00b71b00
 8004194:	003d0900 	.word	0x003d0900
 8004198:	0800659b 	.word	0x0800659b
 800419c:	007a1200 	.word	0x007a1200
 80041a0:	00f42400 	.word	0x00f42400

080041a4 <HAL_RCC_OscConfig>:
{
 80041a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041a6:	0005      	movs	r5, r0
 80041a8:	b085      	sub	sp, #20
  if(RCC_OscInitStruct == NULL)
 80041aa:	2800      	cmp	r0, #0
 80041ac:	d055      	beq.n	800425a <HAL_RCC_OscConfig+0xb6>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041ae:	230c      	movs	r3, #12
 80041b0:	4cc0      	ldr	r4, [pc, #768]	@ (80044b4 <HAL_RCC_OscConfig+0x310>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041b2:	6802      	ldr	r2, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041b4:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041b6:	68e7      	ldr	r7, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041b8:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041ba:	2380      	movs	r3, #128	@ 0x80
 80041bc:	025b      	lsls	r3, r3, #9
 80041be:	0019      	movs	r1, r3
 80041c0:	401f      	ands	r7, r3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041c2:	07d2      	lsls	r2, r2, #31
 80041c4:	d43d      	bmi.n	8004242 <HAL_RCC_OscConfig+0x9e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041c6:	682b      	ldr	r3, [r5, #0]
 80041c8:	079b      	lsls	r3, r3, #30
 80041ca:	d500      	bpl.n	80041ce <HAL_RCC_OscConfig+0x2a>
 80041cc:	e086      	b.n	80042dc <HAL_RCC_OscConfig+0x138>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80041ce:	682b      	ldr	r3, [r5, #0]
 80041d0:	06db      	lsls	r3, r3, #27
 80041d2:	d528      	bpl.n	8004226 <HAL_RCC_OscConfig+0x82>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80041d4:	2e00      	cmp	r6, #0
 80041d6:	d000      	beq.n	80041da <HAL_RCC_OscConfig+0x36>
 80041d8:	e0df      	b.n	800439a <HAL_RCC_OscConfig+0x1f6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80041da:	6823      	ldr	r3, [r4, #0]
 80041dc:	059b      	lsls	r3, r3, #22
 80041de:	d502      	bpl.n	80041e6 <HAL_RCC_OscConfig+0x42>
 80041e0:	69ab      	ldr	r3, [r5, #24]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d039      	beq.n	800425a <HAL_RCC_OscConfig+0xb6>
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80041e6:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041e8:	6862      	ldr	r2, [r4, #4]
 80041ea:	49b3      	ldr	r1, [pc, #716]	@ (80044b8 <HAL_RCC_OscConfig+0x314>)
 80041ec:	6a2b      	ldr	r3, [r5, #32]
 80041ee:	400a      	ands	r2, r1
 80041f0:	431a      	orrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80041f2:	0b5b      	lsrs	r3, r3, #13
 80041f4:	3301      	adds	r3, #1
 80041f6:	023f      	lsls	r7, r7, #8
 80041f8:	409f      	lsls	r7, r3
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041fa:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041fc:	6861      	ldr	r1, [r4, #4]
 80041fe:	69ea      	ldr	r2, [r5, #28]
 8004200:	0209      	lsls	r1, r1, #8
 8004202:	0a09      	lsrs	r1, r1, #8
 8004204:	0612      	lsls	r2, r2, #24
 8004206:	430a      	orrs	r2, r1
 8004208:	6062      	str	r2, [r4, #4]
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800420a:	68e1      	ldr	r1, [r4, #12]
 800420c:	48ab      	ldr	r0, [pc, #684]	@ (80044bc <HAL_RCC_OscConfig+0x318>)
 800420e:	060b      	lsls	r3, r1, #24
 8004210:	0f1b      	lsrs	r3, r3, #28
 8004212:	5cc3      	ldrb	r3, [r0, r3]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004214:	4aaa      	ldr	r2, [pc, #680]	@ (80044c0 <HAL_RCC_OscConfig+0x31c>)
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004216:	40df      	lsrs	r7, r3
        status = HAL_InitTick (uwTickPrio);
 8004218:	4baa      	ldr	r3, [pc, #680]	@ (80044c4 <HAL_RCC_OscConfig+0x320>)
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800421a:	6017      	str	r7, [r2, #0]
        status = HAL_InitTick (uwTickPrio);
 800421c:	6818      	ldr	r0, [r3, #0]
 800421e:	f7ff f87d 	bl	800331c <HAL_InitTick>
        if(status != HAL_OK)
 8004222:	2800      	cmp	r0, #0
 8004224:	d130      	bne.n	8004288 <HAL_RCC_OscConfig+0xe4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004226:	682b      	ldr	r3, [r5, #0]
 8004228:	071b      	lsls	r3, r3, #28
 800422a:	d500      	bpl.n	800422e <HAL_RCC_OscConfig+0x8a>
 800422c:	e0ec      	b.n	8004408 <HAL_RCC_OscConfig+0x264>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800422e:	682b      	ldr	r3, [r5, #0]
 8004230:	075b      	lsls	r3, r3, #29
 8004232:	d500      	bpl.n	8004236 <HAL_RCC_OscConfig+0x92>
 8004234:	e10e      	b.n	8004454 <HAL_RCC_OscConfig+0x2b0>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004236:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8004238:	2b00      	cmp	r3, #0
 800423a:	d000      	beq.n	800423e <HAL_RCC_OscConfig+0x9a>
 800423c:	e193      	b.n	8004566 <HAL_RCC_OscConfig+0x3c2>
  return HAL_OK;
 800423e:	2000      	movs	r0, #0
 8004240:	e022      	b.n	8004288 <HAL_RCC_OscConfig+0xe4>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004242:	2e08      	cmp	r6, #8
 8004244:	d003      	beq.n	800424e <HAL_RCC_OscConfig+0xaa>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004246:	2e0c      	cmp	r6, #12
 8004248:	d109      	bne.n	800425e <HAL_RCC_OscConfig+0xba>
 800424a:	2f00      	cmp	r7, #0
 800424c:	d007      	beq.n	800425e <HAL_RCC_OscConfig+0xba>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800424e:	6823      	ldr	r3, [r4, #0]
 8004250:	039b      	lsls	r3, r3, #14
 8004252:	d5b8      	bpl.n	80041c6 <HAL_RCC_OscConfig+0x22>
 8004254:	686b      	ldr	r3, [r5, #4]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d1b5      	bne.n	80041c6 <HAL_RCC_OscConfig+0x22>
    return HAL_ERROR;
 800425a:	2001      	movs	r0, #1
 800425c:	e014      	b.n	8004288 <HAL_RCC_OscConfig+0xe4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800425e:	686a      	ldr	r2, [r5, #4]
 8004260:	428a      	cmp	r2, r1
 8004262:	d113      	bne.n	800428c <HAL_RCC_OscConfig+0xe8>
 8004264:	6822      	ldr	r2, [r4, #0]
 8004266:	4313      	orrs	r3, r2
 8004268:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800426a:	f7ff f89b 	bl	80033a4 <HAL_GetTick>
 800426e:	9000      	str	r0, [sp, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004270:	2280      	movs	r2, #128	@ 0x80
 8004272:	6823      	ldr	r3, [r4, #0]
 8004274:	0292      	lsls	r2, r2, #10
 8004276:	4213      	tst	r3, r2
 8004278:	d1a5      	bne.n	80041c6 <HAL_RCC_OscConfig+0x22>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800427a:	f7ff f893 	bl	80033a4 <HAL_GetTick>
 800427e:	9b00      	ldr	r3, [sp, #0]
 8004280:	1ac0      	subs	r0, r0, r3
 8004282:	2864      	cmp	r0, #100	@ 0x64
 8004284:	d9f4      	bls.n	8004270 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 8004286:	2003      	movs	r0, #3
}
 8004288:	b005      	add	sp, #20
 800428a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800428c:	21a0      	movs	r1, #160	@ 0xa0
 800428e:	02c9      	lsls	r1, r1, #11
 8004290:	428a      	cmp	r2, r1
 8004292:	d105      	bne.n	80042a0 <HAL_RCC_OscConfig+0xfc>
 8004294:	2280      	movs	r2, #128	@ 0x80
 8004296:	6821      	ldr	r1, [r4, #0]
 8004298:	02d2      	lsls	r2, r2, #11
 800429a:	430a      	orrs	r2, r1
 800429c:	6022      	str	r2, [r4, #0]
 800429e:	e7e1      	b.n	8004264 <HAL_RCC_OscConfig+0xc0>
 80042a0:	6821      	ldr	r1, [r4, #0]
 80042a2:	4889      	ldr	r0, [pc, #548]	@ (80044c8 <HAL_RCC_OscConfig+0x324>)
 80042a4:	4001      	ands	r1, r0
 80042a6:	6021      	str	r1, [r4, #0]
 80042a8:	6821      	ldr	r1, [r4, #0]
 80042aa:	400b      	ands	r3, r1
 80042ac:	9303      	str	r3, [sp, #12]
 80042ae:	9b03      	ldr	r3, [sp, #12]
 80042b0:	4986      	ldr	r1, [pc, #536]	@ (80044cc <HAL_RCC_OscConfig+0x328>)
 80042b2:	6823      	ldr	r3, [r4, #0]
 80042b4:	400b      	ands	r3, r1
 80042b6:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042b8:	2a00      	cmp	r2, #0
 80042ba:	d1d6      	bne.n	800426a <HAL_RCC_OscConfig+0xc6>
        tickstart = HAL_GetTick();
 80042bc:	f7ff f872 	bl	80033a4 <HAL_GetTick>
 80042c0:	9000      	str	r0, [sp, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80042c2:	2280      	movs	r2, #128	@ 0x80
 80042c4:	6823      	ldr	r3, [r4, #0]
 80042c6:	0292      	lsls	r2, r2, #10
 80042c8:	4213      	tst	r3, r2
 80042ca:	d100      	bne.n	80042ce <HAL_RCC_OscConfig+0x12a>
 80042cc:	e77b      	b.n	80041c6 <HAL_RCC_OscConfig+0x22>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042ce:	f7ff f869 	bl	80033a4 <HAL_GetTick>
 80042d2:	9b00      	ldr	r3, [sp, #0]
 80042d4:	1ac0      	subs	r0, r0, r3
 80042d6:	2864      	cmp	r0, #100	@ 0x64
 80042d8:	d9f3      	bls.n	80042c2 <HAL_RCC_OscConfig+0x11e>
 80042da:	e7d4      	b.n	8004286 <HAL_RCC_OscConfig+0xe2>
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80042dc:	2220      	movs	r2, #32
    hsi_state = RCC_OscInitStruct->HSIState;
 80042de:	68eb      	ldr	r3, [r5, #12]
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80042e0:	4213      	tst	r3, r2
 80042e2:	d003      	beq.n	80042ec <HAL_RCC_OscConfig+0x148>
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80042e4:	6821      	ldr	r1, [r4, #0]
      hsi_state &= ~RCC_CR_HSIOUTEN;
 80042e6:	4393      	bics	r3, r2
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80042e8:	4311      	orrs	r1, r2
 80042ea:	6021      	str	r1, [r4, #0]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80042ec:	2e04      	cmp	r6, #4
 80042ee:	d003      	beq.n	80042f8 <HAL_RCC_OscConfig+0x154>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80042f0:	2e0c      	cmp	r6, #12
 80042f2:	d124      	bne.n	800433e <HAL_RCC_OscConfig+0x19a>
 80042f4:	2f00      	cmp	r7, #0
 80042f6:	d122      	bne.n	800433e <HAL_RCC_OscConfig+0x19a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80042f8:	6822      	ldr	r2, [r4, #0]
 80042fa:	0752      	lsls	r2, r2, #29
 80042fc:	d501      	bpl.n	8004302 <HAL_RCC_OscConfig+0x15e>
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d0ab      	beq.n	800425a <HAL_RCC_OscConfig+0xb6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004302:	6861      	ldr	r1, [r4, #4]
 8004304:	692a      	ldr	r2, [r5, #16]
 8004306:	4872      	ldr	r0, [pc, #456]	@ (80044d0 <HAL_RCC_OscConfig+0x32c>)
 8004308:	0212      	lsls	r2, r2, #8
 800430a:	4001      	ands	r1, r0
 800430c:	430a      	orrs	r2, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800430e:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004310:	6062      	str	r2, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004312:	6822      	ldr	r2, [r4, #0]
 8004314:	438a      	bics	r2, r1
 8004316:	4313      	orrs	r3, r2
 8004318:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800431a:	f7ff fef9 	bl	8004110 <HAL_RCC_GetSysClockFreq>
 800431e:	68e3      	ldr	r3, [r4, #12]
 8004320:	4a66      	ldr	r2, [pc, #408]	@ (80044bc <HAL_RCC_OscConfig+0x318>)
 8004322:	061b      	lsls	r3, r3, #24
 8004324:	0f1b      	lsrs	r3, r3, #28
 8004326:	5cd3      	ldrb	r3, [r2, r3]
 8004328:	4965      	ldr	r1, [pc, #404]	@ (80044c0 <HAL_RCC_OscConfig+0x31c>)
 800432a:	40d8      	lsrs	r0, r3
      status = HAL_InitTick (uwTickPrio);
 800432c:	4b65      	ldr	r3, [pc, #404]	@ (80044c4 <HAL_RCC_OscConfig+0x320>)
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800432e:	6008      	str	r0, [r1, #0]
      status = HAL_InitTick (uwTickPrio);
 8004330:	6818      	ldr	r0, [r3, #0]
 8004332:	f7fe fff3 	bl	800331c <HAL_InitTick>
      if(status != HAL_OK)
 8004336:	2800      	cmp	r0, #0
 8004338:	d100      	bne.n	800433c <HAL_RCC_OscConfig+0x198>
 800433a:	e748      	b.n	80041ce <HAL_RCC_OscConfig+0x2a>
 800433c:	e7a4      	b.n	8004288 <HAL_RCC_OscConfig+0xe4>
      if(hsi_state != RCC_HSI_OFF)
 800433e:	2b00      	cmp	r3, #0
 8004340:	d019      	beq.n	8004376 <HAL_RCC_OscConfig+0x1d2>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004342:	2109      	movs	r1, #9
 8004344:	6822      	ldr	r2, [r4, #0]
 8004346:	438a      	bics	r2, r1
 8004348:	4313      	orrs	r3, r2
 800434a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800434c:	f7ff f82a 	bl	80033a4 <HAL_GetTick>
 8004350:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004352:	2204      	movs	r2, #4
 8004354:	6823      	ldr	r3, [r4, #0]
 8004356:	4213      	tst	r3, r2
 8004358:	d007      	beq.n	800436a <HAL_RCC_OscConfig+0x1c6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800435a:	6862      	ldr	r2, [r4, #4]
 800435c:	692b      	ldr	r3, [r5, #16]
 800435e:	495c      	ldr	r1, [pc, #368]	@ (80044d0 <HAL_RCC_OscConfig+0x32c>)
 8004360:	021b      	lsls	r3, r3, #8
 8004362:	400a      	ands	r2, r1
 8004364:	4313      	orrs	r3, r2
 8004366:	6063      	str	r3, [r4, #4]
 8004368:	e731      	b.n	80041ce <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800436a:	f7ff f81b 	bl	80033a4 <HAL_GetTick>
 800436e:	1bc0      	subs	r0, r0, r7
 8004370:	2802      	cmp	r0, #2
 8004372:	d9ee      	bls.n	8004352 <HAL_RCC_OscConfig+0x1ae>
 8004374:	e787      	b.n	8004286 <HAL_RCC_OscConfig+0xe2>
        __HAL_RCC_HSI_DISABLE();
 8004376:	2201      	movs	r2, #1
 8004378:	6823      	ldr	r3, [r4, #0]
 800437a:	4393      	bics	r3, r2
 800437c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800437e:	f7ff f811 	bl	80033a4 <HAL_GetTick>
 8004382:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004384:	2204      	movs	r2, #4
 8004386:	6823      	ldr	r3, [r4, #0]
 8004388:	4213      	tst	r3, r2
 800438a:	d100      	bne.n	800438e <HAL_RCC_OscConfig+0x1ea>
 800438c:	e71f      	b.n	80041ce <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800438e:	f7ff f809 	bl	80033a4 <HAL_GetTick>
 8004392:	1bc0      	subs	r0, r0, r7
 8004394:	2802      	cmp	r0, #2
 8004396:	d9f5      	bls.n	8004384 <HAL_RCC_OscConfig+0x1e0>
 8004398:	e775      	b.n	8004286 <HAL_RCC_OscConfig+0xe2>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800439a:	69ab      	ldr	r3, [r5, #24]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d020      	beq.n	80043e2 <HAL_RCC_OscConfig+0x23e>
        __HAL_RCC_MSI_ENABLE();
 80043a0:	2380      	movs	r3, #128	@ 0x80
 80043a2:	6822      	ldr	r2, [r4, #0]
 80043a4:	005b      	lsls	r3, r3, #1
 80043a6:	4313      	orrs	r3, r2
 80043a8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80043aa:	f7fe fffb 	bl	80033a4 <HAL_GetTick>
 80043ae:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80043b0:	2280      	movs	r2, #128	@ 0x80
 80043b2:	6823      	ldr	r3, [r4, #0]
 80043b4:	0092      	lsls	r2, r2, #2
 80043b6:	4213      	tst	r3, r2
 80043b8:	d00d      	beq.n	80043d6 <HAL_RCC_OscConfig+0x232>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80043ba:	6863      	ldr	r3, [r4, #4]
 80043bc:	4a3e      	ldr	r2, [pc, #248]	@ (80044b8 <HAL_RCC_OscConfig+0x314>)
 80043be:	4013      	ands	r3, r2
 80043c0:	6a2a      	ldr	r2, [r5, #32]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80043c6:	6862      	ldr	r2, [r4, #4]
 80043c8:	69eb      	ldr	r3, [r5, #28]
 80043ca:	0212      	lsls	r2, r2, #8
 80043cc:	061b      	lsls	r3, r3, #24
 80043ce:	0a12      	lsrs	r2, r2, #8
 80043d0:	4313      	orrs	r3, r2
 80043d2:	6063      	str	r3, [r4, #4]
 80043d4:	e727      	b.n	8004226 <HAL_RCC_OscConfig+0x82>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80043d6:	f7fe ffe5 	bl	80033a4 <HAL_GetTick>
 80043da:	1bc0      	subs	r0, r0, r7
 80043dc:	2802      	cmp	r0, #2
 80043de:	d9e7      	bls.n	80043b0 <HAL_RCC_OscConfig+0x20c>
 80043e0:	e751      	b.n	8004286 <HAL_RCC_OscConfig+0xe2>
        __HAL_RCC_MSI_DISABLE();
 80043e2:	6823      	ldr	r3, [r4, #0]
 80043e4:	4a3b      	ldr	r2, [pc, #236]	@ (80044d4 <HAL_RCC_OscConfig+0x330>)
 80043e6:	4013      	ands	r3, r2
 80043e8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80043ea:	f7fe ffdb 	bl	80033a4 <HAL_GetTick>
 80043ee:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80043f0:	2280      	movs	r2, #128	@ 0x80
 80043f2:	6823      	ldr	r3, [r4, #0]
 80043f4:	0092      	lsls	r2, r2, #2
 80043f6:	4213      	tst	r3, r2
 80043f8:	d100      	bne.n	80043fc <HAL_RCC_OscConfig+0x258>
 80043fa:	e714      	b.n	8004226 <HAL_RCC_OscConfig+0x82>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80043fc:	f7fe ffd2 	bl	80033a4 <HAL_GetTick>
 8004400:	1bc0      	subs	r0, r0, r7
 8004402:	2802      	cmp	r0, #2
 8004404:	d9f4      	bls.n	80043f0 <HAL_RCC_OscConfig+0x24c>
 8004406:	e73e      	b.n	8004286 <HAL_RCC_OscConfig+0xe2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004408:	696a      	ldr	r2, [r5, #20]
 800440a:	2301      	movs	r3, #1
 800440c:	2a00      	cmp	r2, #0
 800440e:	d010      	beq.n	8004432 <HAL_RCC_OscConfig+0x28e>
      __HAL_RCC_LSI_ENABLE();
 8004410:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8004412:	4313      	orrs	r3, r2
 8004414:	6523      	str	r3, [r4, #80]	@ 0x50
      tickstart = HAL_GetTick();
 8004416:	f7fe ffc5 	bl	80033a4 <HAL_GetTick>
 800441a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800441c:	2202      	movs	r2, #2
 800441e:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8004420:	4213      	tst	r3, r2
 8004422:	d000      	beq.n	8004426 <HAL_RCC_OscConfig+0x282>
 8004424:	e703      	b.n	800422e <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004426:	f7fe ffbd 	bl	80033a4 <HAL_GetTick>
 800442a:	1bc0      	subs	r0, r0, r7
 800442c:	2802      	cmp	r0, #2
 800442e:	d9f5      	bls.n	800441c <HAL_RCC_OscConfig+0x278>
 8004430:	e729      	b.n	8004286 <HAL_RCC_OscConfig+0xe2>
      __HAL_RCC_LSI_DISABLE();
 8004432:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8004434:	439a      	bics	r2, r3
 8004436:	6522      	str	r2, [r4, #80]	@ 0x50
      tickstart = HAL_GetTick();
 8004438:	f7fe ffb4 	bl	80033a4 <HAL_GetTick>
 800443c:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800443e:	2202      	movs	r2, #2
 8004440:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8004442:	4213      	tst	r3, r2
 8004444:	d100      	bne.n	8004448 <HAL_RCC_OscConfig+0x2a4>
 8004446:	e6f2      	b.n	800422e <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004448:	f7fe ffac 	bl	80033a4 <HAL_GetTick>
 800444c:	1bc0      	subs	r0, r0, r7
 800444e:	2802      	cmp	r0, #2
 8004450:	d9f5      	bls.n	800443e <HAL_RCC_OscConfig+0x29a>
 8004452:	e718      	b.n	8004286 <HAL_RCC_OscConfig+0xe2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004454:	2380      	movs	r3, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 8004456:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004458:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800445a:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 800445c:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800445e:	421a      	tst	r2, r3
 8004460:	d104      	bne.n	800446c <HAL_RCC_OscConfig+0x2c8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004462:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8004464:	4313      	orrs	r3, r2
 8004466:	63a3      	str	r3, [r4, #56]	@ 0x38
      pwrclkchanged = SET;
 8004468:	2301      	movs	r3, #1
 800446a:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800446c:	2280      	movs	r2, #128	@ 0x80
 800446e:	4f1a      	ldr	r7, [pc, #104]	@ (80044d8 <HAL_RCC_OscConfig+0x334>)
 8004470:	0052      	lsls	r2, r2, #1
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	4213      	tst	r3, r2
 8004476:	d008      	beq.n	800448a <HAL_RCC_OscConfig+0x2e6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004478:	2280      	movs	r2, #128	@ 0x80
 800447a:	68ab      	ldr	r3, [r5, #8]
 800447c:	0052      	lsls	r2, r2, #1
 800447e:	4293      	cmp	r3, r2
 8004480:	d12c      	bne.n	80044dc <HAL_RCC_OscConfig+0x338>
 8004482:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8004484:	4313      	orrs	r3, r2
 8004486:	6523      	str	r3, [r4, #80]	@ 0x50
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004488:	e04d      	b.n	8004526 <HAL_RCC_OscConfig+0x382>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800448a:	2280      	movs	r2, #128	@ 0x80
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	0052      	lsls	r2, r2, #1
 8004490:	4313      	orrs	r3, r2
 8004492:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8004494:	f7fe ff86 	bl	80033a4 <HAL_GetTick>
 8004498:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800449a:	2280      	movs	r2, #128	@ 0x80
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	0052      	lsls	r2, r2, #1
 80044a0:	4213      	tst	r3, r2
 80044a2:	d1e9      	bne.n	8004478 <HAL_RCC_OscConfig+0x2d4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044a4:	f7fe ff7e 	bl	80033a4 <HAL_GetTick>
 80044a8:	9b01      	ldr	r3, [sp, #4]
 80044aa:	1ac0      	subs	r0, r0, r3
 80044ac:	2864      	cmp	r0, #100	@ 0x64
 80044ae:	d9f4      	bls.n	800449a <HAL_RCC_OscConfig+0x2f6>
 80044b0:	e6e9      	b.n	8004286 <HAL_RCC_OscConfig+0xe2>
 80044b2:	46c0      	nop			@ (mov r8, r8)
 80044b4:	40021000 	.word	0x40021000
 80044b8:	ffff1fff 	.word	0xffff1fff
 80044bc:	080065ac 	.word	0x080065ac
 80044c0:	20000854 	.word	0x20000854
 80044c4:	2000085c 	.word	0x2000085c
 80044c8:	fffeffff 	.word	0xfffeffff
 80044cc:	fffbffff 	.word	0xfffbffff
 80044d0:	ffffe0ff 	.word	0xffffe0ff
 80044d4:	fffffeff 	.word	0xfffffeff
 80044d8:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d116      	bne.n	800450e <HAL_RCC_OscConfig+0x36a>
 80044e0:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80044e2:	4a51      	ldr	r2, [pc, #324]	@ (8004628 <HAL_RCC_OscConfig+0x484>)
 80044e4:	4013      	ands	r3, r2
 80044e6:	6523      	str	r3, [r4, #80]	@ 0x50
 80044e8:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80044ea:	4a50      	ldr	r2, [pc, #320]	@ (800462c <HAL_RCC_OscConfig+0x488>)
 80044ec:	4013      	ands	r3, r2
 80044ee:	6523      	str	r3, [r4, #80]	@ 0x50
      tickstart = HAL_GetTick();
 80044f0:	f7fe ff58 	bl	80033a4 <HAL_GetTick>
 80044f4:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80044f6:	2280      	movs	r2, #128	@ 0x80
 80044f8:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80044fa:	0092      	lsls	r2, r2, #2
 80044fc:	4213      	tst	r3, r2
 80044fe:	d01a      	beq.n	8004536 <HAL_RCC_OscConfig+0x392>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004500:	f7fe ff50 	bl	80033a4 <HAL_GetTick>
 8004504:	4b4a      	ldr	r3, [pc, #296]	@ (8004630 <HAL_RCC_OscConfig+0x48c>)
 8004506:	1bc0      	subs	r0, r0, r7
 8004508:	4298      	cmp	r0, r3
 800450a:	d9f4      	bls.n	80044f6 <HAL_RCC_OscConfig+0x352>
 800450c:	e6bb      	b.n	8004286 <HAL_RCC_OscConfig+0xe2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800450e:	21a0      	movs	r1, #160	@ 0xa0
 8004510:	00c9      	lsls	r1, r1, #3
 8004512:	428b      	cmp	r3, r1
 8004514:	d118      	bne.n	8004548 <HAL_RCC_OscConfig+0x3a4>
 8004516:	2380      	movs	r3, #128	@ 0x80
 8004518:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 800451a:	00db      	lsls	r3, r3, #3
 800451c:	430b      	orrs	r3, r1
 800451e:	6523      	str	r3, [r4, #80]	@ 0x50
 8004520:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8004522:	431a      	orrs	r2, r3
 8004524:	6522      	str	r2, [r4, #80]	@ 0x50
      tickstart = HAL_GetTick();
 8004526:	f7fe ff3d 	bl	80033a4 <HAL_GetTick>
 800452a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800452c:	2280      	movs	r2, #128	@ 0x80
 800452e:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8004530:	0092      	lsls	r2, r2, #2
 8004532:	4213      	tst	r3, r2
 8004534:	d010      	beq.n	8004558 <HAL_RCC_OscConfig+0x3b4>
    if(pwrclkchanged == SET)
 8004536:	9b00      	ldr	r3, [sp, #0]
 8004538:	2b01      	cmp	r3, #1
 800453a:	d000      	beq.n	800453e <HAL_RCC_OscConfig+0x39a>
 800453c:	e67b      	b.n	8004236 <HAL_RCC_OscConfig+0x92>
      __HAL_RCC_PWR_CLK_DISABLE();
 800453e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004540:	4a3c      	ldr	r2, [pc, #240]	@ (8004634 <HAL_RCC_OscConfig+0x490>)
 8004542:	4013      	ands	r3, r2
 8004544:	63a3      	str	r3, [r4, #56]	@ 0x38
 8004546:	e676      	b.n	8004236 <HAL_RCC_OscConfig+0x92>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004548:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800454a:	4a37      	ldr	r2, [pc, #220]	@ (8004628 <HAL_RCC_OscConfig+0x484>)
 800454c:	4013      	ands	r3, r2
 800454e:	6523      	str	r3, [r4, #80]	@ 0x50
 8004550:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8004552:	4a36      	ldr	r2, [pc, #216]	@ (800462c <HAL_RCC_OscConfig+0x488>)
 8004554:	4013      	ands	r3, r2
 8004556:	e796      	b.n	8004486 <HAL_RCC_OscConfig+0x2e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004558:	f7fe ff24 	bl	80033a4 <HAL_GetTick>
 800455c:	4b34      	ldr	r3, [pc, #208]	@ (8004630 <HAL_RCC_OscConfig+0x48c>)
 800455e:	1bc0      	subs	r0, r0, r7
 8004560:	4298      	cmp	r0, r3
 8004562:	d9e3      	bls.n	800452c <HAL_RCC_OscConfig+0x388>
 8004564:	e68f      	b.n	8004286 <HAL_RCC_OscConfig+0xe2>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004566:	2e0c      	cmp	r6, #12
 8004568:	d043      	beq.n	80045f2 <HAL_RCC_OscConfig+0x44e>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800456a:	4a33      	ldr	r2, [pc, #204]	@ (8004638 <HAL_RCC_OscConfig+0x494>)
 800456c:	2b02      	cmp	r3, #2
 800456e:	d12e      	bne.n	80045ce <HAL_RCC_OscConfig+0x42a>
        __HAL_RCC_PLL_DISABLE();
 8004570:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004572:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8004574:	4013      	ands	r3, r2
 8004576:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004578:	f7fe ff14 	bl	80033a4 <HAL_GetTick>
 800457c:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800457e:	04bf      	lsls	r7, r7, #18
 8004580:	6823      	ldr	r3, [r4, #0]
 8004582:	423b      	tst	r3, r7
 8004584:	d11d      	bne.n	80045c2 <HAL_RCC_OscConfig+0x41e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004586:	6ae9      	ldr	r1, [r5, #44]	@ 0x2c
 8004588:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 800458a:	68e2      	ldr	r2, [r4, #12]
 800458c:	430b      	orrs	r3, r1
 800458e:	492b      	ldr	r1, [pc, #172]	@ (800463c <HAL_RCC_OscConfig+0x498>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004590:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004592:	400a      	ands	r2, r1
 8004594:	4313      	orrs	r3, r2
 8004596:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004598:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800459a:	4313      	orrs	r3, r2
 800459c:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 800459e:	2380      	movs	r3, #128	@ 0x80
 80045a0:	6822      	ldr	r2, [r4, #0]
 80045a2:	045b      	lsls	r3, r3, #17
 80045a4:	4313      	orrs	r3, r2
 80045a6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80045a8:	f7fe fefc 	bl	80033a4 <HAL_GetTick>
 80045ac:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80045ae:	6823      	ldr	r3, [r4, #0]
 80045b0:	4233      	tst	r3, r6
 80045b2:	d000      	beq.n	80045b6 <HAL_RCC_OscConfig+0x412>
 80045b4:	e643      	b.n	800423e <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045b6:	f7fe fef5 	bl	80033a4 <HAL_GetTick>
 80045ba:	1b40      	subs	r0, r0, r5
 80045bc:	2802      	cmp	r0, #2
 80045be:	d9f6      	bls.n	80045ae <HAL_RCC_OscConfig+0x40a>
 80045c0:	e661      	b.n	8004286 <HAL_RCC_OscConfig+0xe2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045c2:	f7fe feef 	bl	80033a4 <HAL_GetTick>
 80045c6:	1b80      	subs	r0, r0, r6
 80045c8:	2802      	cmp	r0, #2
 80045ca:	d9d9      	bls.n	8004580 <HAL_RCC_OscConfig+0x3dc>
 80045cc:	e65b      	b.n	8004286 <HAL_RCC_OscConfig+0xe2>
        __HAL_RCC_PLL_DISABLE();
 80045ce:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80045d0:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 80045d2:	4013      	ands	r3, r2
 80045d4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80045d6:	f7fe fee5 	bl	80033a4 <HAL_GetTick>
 80045da:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80045dc:	04b6      	lsls	r6, r6, #18
 80045de:	6823      	ldr	r3, [r4, #0]
 80045e0:	4233      	tst	r3, r6
 80045e2:	d100      	bne.n	80045e6 <HAL_RCC_OscConfig+0x442>
 80045e4:	e62b      	b.n	800423e <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045e6:	f7fe fedd 	bl	80033a4 <HAL_GetTick>
 80045ea:	1b40      	subs	r0, r0, r5
 80045ec:	2802      	cmp	r0, #2
 80045ee:	d9f6      	bls.n	80045de <HAL_RCC_OscConfig+0x43a>
 80045f0:	e649      	b.n	8004286 <HAL_RCC_OscConfig+0xe2>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d100      	bne.n	80045f8 <HAL_RCC_OscConfig+0x454>
 80045f6:	e630      	b.n	800425a <HAL_RCC_OscConfig+0xb6>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045f8:	2380      	movs	r3, #128	@ 0x80
        pll_config = RCC->CFGR;
 80045fa:	68e0      	ldr	r0, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045fc:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 80045fe:	025b      	lsls	r3, r3, #9
 8004600:	4003      	ands	r3, r0
 8004602:	4293      	cmp	r3, r2
 8004604:	d000      	beq.n	8004608 <HAL_RCC_OscConfig+0x464>
 8004606:	e628      	b.n	800425a <HAL_RCC_OscConfig+0xb6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004608:	23f0      	movs	r3, #240	@ 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800460a:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800460c:	039b      	lsls	r3, r3, #14
 800460e:	4003      	ands	r3, r0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004610:	4293      	cmp	r3, r2
 8004612:	d000      	beq.n	8004616 <HAL_RCC_OscConfig+0x472>
 8004614:	e621      	b.n	800425a <HAL_RCC_OscConfig+0xb6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004616:	23c0      	movs	r3, #192	@ 0xc0
 8004618:	041b      	lsls	r3, r3, #16
 800461a:	4018      	ands	r0, r3
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800461c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800461e:	1ac0      	subs	r0, r0, r3
 8004620:	1e43      	subs	r3, r0, #1
 8004622:	4198      	sbcs	r0, r3
 8004624:	b2c0      	uxtb	r0, r0
 8004626:	e62f      	b.n	8004288 <HAL_RCC_OscConfig+0xe4>
 8004628:	fffffeff 	.word	0xfffffeff
 800462c:	fffffbff 	.word	0xfffffbff
 8004630:	00001388 	.word	0x00001388
 8004634:	efffffff 	.word	0xefffffff
 8004638:	feffffff 	.word	0xfeffffff
 800463c:	ff02ffff 	.word	0xff02ffff

08004640 <HAL_RCC_ClockConfig>:
{
 8004640:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004642:	1e04      	subs	r4, r0, #0
 8004644:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 8004646:	d101      	bne.n	800464c <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 8004648:	2001      	movs	r0, #1
}
 800464a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800464c:	2501      	movs	r5, #1
 800464e:	4e5b      	ldr	r6, [pc, #364]	@ (80047bc <HAL_RCC_ClockConfig+0x17c>)
 8004650:	9a01      	ldr	r2, [sp, #4]
 8004652:	6833      	ldr	r3, [r6, #0]
 8004654:	402b      	ands	r3, r5
 8004656:	4293      	cmp	r3, r2
 8004658:	d331      	bcc.n	80046be <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800465a:	6822      	ldr	r2, [r4, #0]
 800465c:	0793      	lsls	r3, r2, #30
 800465e:	d443      	bmi.n	80046e8 <HAL_RCC_ClockConfig+0xa8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004660:	07d2      	lsls	r2, r2, #31
 8004662:	d449      	bmi.n	80046f8 <HAL_RCC_ClockConfig+0xb8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004664:	2501      	movs	r5, #1
 8004666:	6833      	ldr	r3, [r6, #0]
 8004668:	9a01      	ldr	r2, [sp, #4]
 800466a:	402b      	ands	r3, r5
 800466c:	4293      	cmp	r3, r2
 800466e:	d909      	bls.n	8004684 <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004670:	6833      	ldr	r3, [r6, #0]
 8004672:	43ab      	bics	r3, r5
 8004674:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8004676:	f7fe fe95 	bl	80033a4 <HAL_GetTick>
 800467a:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800467c:	6833      	ldr	r3, [r6, #0]
 800467e:	422b      	tst	r3, r5
 8004680:	d000      	beq.n	8004684 <HAL_RCC_ClockConfig+0x44>
 8004682:	e08c      	b.n	800479e <HAL_RCC_ClockConfig+0x15e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004684:	6822      	ldr	r2, [r4, #0]
 8004686:	4d4e      	ldr	r5, [pc, #312]	@ (80047c0 <HAL_RCC_ClockConfig+0x180>)
 8004688:	0753      	lsls	r3, r2, #29
 800468a:	d500      	bpl.n	800468e <HAL_RCC_ClockConfig+0x4e>
 800468c:	e08f      	b.n	80047ae <HAL_RCC_ClockConfig+0x16e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800468e:	0712      	lsls	r2, r2, #28
 8004690:	d506      	bpl.n	80046a0 <HAL_RCC_ClockConfig+0x60>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004692:	68ea      	ldr	r2, [r5, #12]
 8004694:	6923      	ldr	r3, [r4, #16]
 8004696:	494b      	ldr	r1, [pc, #300]	@ (80047c4 <HAL_RCC_ClockConfig+0x184>)
 8004698:	00db      	lsls	r3, r3, #3
 800469a:	400a      	ands	r2, r1
 800469c:	4313      	orrs	r3, r2
 800469e:	60eb      	str	r3, [r5, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80046a0:	f7ff fd36 	bl	8004110 <HAL_RCC_GetSysClockFreq>
 80046a4:	68eb      	ldr	r3, [r5, #12]
 80046a6:	4a48      	ldr	r2, [pc, #288]	@ (80047c8 <HAL_RCC_ClockConfig+0x188>)
 80046a8:	061b      	lsls	r3, r3, #24
 80046aa:	0f1b      	lsrs	r3, r3, #28
 80046ac:	5cd3      	ldrb	r3, [r2, r3]
 80046ae:	4947      	ldr	r1, [pc, #284]	@ (80047cc <HAL_RCC_ClockConfig+0x18c>)
 80046b0:	40d8      	lsrs	r0, r3
  status = HAL_InitTick(uwTickPrio);
 80046b2:	4b47      	ldr	r3, [pc, #284]	@ (80047d0 <HAL_RCC_ClockConfig+0x190>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80046b4:	6008      	str	r0, [r1, #0]
  status = HAL_InitTick(uwTickPrio);
 80046b6:	6818      	ldr	r0, [r3, #0]
 80046b8:	f7fe fe30 	bl	800331c <HAL_InitTick>
  if(status != HAL_OK)
 80046bc:	e7c5      	b.n	800464a <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046be:	6833      	ldr	r3, [r6, #0]
 80046c0:	9a01      	ldr	r2, [sp, #4]
 80046c2:	43ab      	bics	r3, r5
 80046c4:	4313      	orrs	r3, r2
 80046c6:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80046c8:	f7fe fe6c 	bl	80033a4 <HAL_GetTick>
 80046cc:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046ce:	6833      	ldr	r3, [r6, #0]
 80046d0:	9a01      	ldr	r2, [sp, #4]
 80046d2:	402b      	ands	r3, r5
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d0c0      	beq.n	800465a <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046d8:	f7fe fe64 	bl	80033a4 <HAL_GetTick>
 80046dc:	4b3d      	ldr	r3, [pc, #244]	@ (80047d4 <HAL_RCC_ClockConfig+0x194>)
 80046de:	1bc0      	subs	r0, r0, r7
 80046e0:	4298      	cmp	r0, r3
 80046e2:	d9f4      	bls.n	80046ce <HAL_RCC_ClockConfig+0x8e>
        return HAL_TIMEOUT;
 80046e4:	2003      	movs	r0, #3
 80046e6:	e7b0      	b.n	800464a <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046e8:	20f0      	movs	r0, #240	@ 0xf0
 80046ea:	4935      	ldr	r1, [pc, #212]	@ (80047c0 <HAL_RCC_ClockConfig+0x180>)
 80046ec:	68cb      	ldr	r3, [r1, #12]
 80046ee:	4383      	bics	r3, r0
 80046f0:	68a0      	ldr	r0, [r4, #8]
 80046f2:	4303      	orrs	r3, r0
 80046f4:	60cb      	str	r3, [r1, #12]
 80046f6:	e7b3      	b.n	8004660 <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046f8:	4d31      	ldr	r5, [pc, #196]	@ (80047c0 <HAL_RCC_ClockConfig+0x180>)
 80046fa:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80046fc:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046fe:	2a02      	cmp	r2, #2
 8004700:	d118      	bne.n	8004734 <HAL_RCC_ClockConfig+0xf4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004702:	039b      	lsls	r3, r3, #14
 8004704:	d5a0      	bpl.n	8004648 <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004706:	2103      	movs	r1, #3
 8004708:	68eb      	ldr	r3, [r5, #12]
 800470a:	438b      	bics	r3, r1
 800470c:	4313      	orrs	r3, r2
 800470e:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 8004710:	f7fe fe48 	bl	80033a4 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004714:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8004716:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004718:	2b02      	cmp	r3, #2
 800471a:	d118      	bne.n	800474e <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800471c:	220c      	movs	r2, #12
 800471e:	68eb      	ldr	r3, [r5, #12]
 8004720:	4013      	ands	r3, r2
 8004722:	2b08      	cmp	r3, #8
 8004724:	d09e      	beq.n	8004664 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004726:	f7fe fe3d 	bl	80033a4 <HAL_GetTick>
 800472a:	4b2a      	ldr	r3, [pc, #168]	@ (80047d4 <HAL_RCC_ClockConfig+0x194>)
 800472c:	1bc0      	subs	r0, r0, r7
 800472e:	4298      	cmp	r0, r3
 8004730:	d9f4      	bls.n	800471c <HAL_RCC_ClockConfig+0xdc>
 8004732:	e7d7      	b.n	80046e4 <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004734:	2a03      	cmp	r2, #3
 8004736:	d102      	bne.n	800473e <HAL_RCC_ClockConfig+0xfe>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004738:	019b      	lsls	r3, r3, #6
 800473a:	d4e4      	bmi.n	8004706 <HAL_RCC_ClockConfig+0xc6>
 800473c:	e784      	b.n	8004648 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800473e:	2a01      	cmp	r2, #1
 8004740:	d102      	bne.n	8004748 <HAL_RCC_ClockConfig+0x108>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004742:	075b      	lsls	r3, r3, #29
 8004744:	d4df      	bmi.n	8004706 <HAL_RCC_ClockConfig+0xc6>
 8004746:	e77f      	b.n	8004648 <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004748:	059b      	lsls	r3, r3, #22
 800474a:	d4dc      	bmi.n	8004706 <HAL_RCC_ClockConfig+0xc6>
 800474c:	e77c      	b.n	8004648 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800474e:	2b03      	cmp	r3, #3
 8004750:	d10b      	bne.n	800476a <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004752:	220c      	movs	r2, #12
 8004754:	68eb      	ldr	r3, [r5, #12]
 8004756:	4013      	ands	r3, r2
 8004758:	4293      	cmp	r3, r2
 800475a:	d083      	beq.n	8004664 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800475c:	f7fe fe22 	bl	80033a4 <HAL_GetTick>
 8004760:	4b1c      	ldr	r3, [pc, #112]	@ (80047d4 <HAL_RCC_ClockConfig+0x194>)
 8004762:	1bc0      	subs	r0, r0, r7
 8004764:	4298      	cmp	r0, r3
 8004766:	d9f4      	bls.n	8004752 <HAL_RCC_ClockConfig+0x112>
 8004768:	e7bc      	b.n	80046e4 <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800476a:	2b01      	cmp	r3, #1
 800476c:	d011      	beq.n	8004792 <HAL_RCC_ClockConfig+0x152>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800476e:	220c      	movs	r2, #12
 8004770:	68eb      	ldr	r3, [r5, #12]
 8004772:	4213      	tst	r3, r2
 8004774:	d100      	bne.n	8004778 <HAL_RCC_ClockConfig+0x138>
 8004776:	e775      	b.n	8004664 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004778:	f7fe fe14 	bl	80033a4 <HAL_GetTick>
 800477c:	4b15      	ldr	r3, [pc, #84]	@ (80047d4 <HAL_RCC_ClockConfig+0x194>)
 800477e:	1bc0      	subs	r0, r0, r7
 8004780:	4298      	cmp	r0, r3
 8004782:	d9f4      	bls.n	800476e <HAL_RCC_ClockConfig+0x12e>
 8004784:	e7ae      	b.n	80046e4 <HAL_RCC_ClockConfig+0xa4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004786:	f7fe fe0d 	bl	80033a4 <HAL_GetTick>
 800478a:	4b12      	ldr	r3, [pc, #72]	@ (80047d4 <HAL_RCC_ClockConfig+0x194>)
 800478c:	1bc0      	subs	r0, r0, r7
 800478e:	4298      	cmp	r0, r3
 8004790:	d8a8      	bhi.n	80046e4 <HAL_RCC_ClockConfig+0xa4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004792:	220c      	movs	r2, #12
 8004794:	68eb      	ldr	r3, [r5, #12]
 8004796:	4013      	ands	r3, r2
 8004798:	2b04      	cmp	r3, #4
 800479a:	d1f4      	bne.n	8004786 <HAL_RCC_ClockConfig+0x146>
 800479c:	e762      	b.n	8004664 <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800479e:	f7fe fe01 	bl	80033a4 <HAL_GetTick>
 80047a2:	4b0c      	ldr	r3, [pc, #48]	@ (80047d4 <HAL_RCC_ClockConfig+0x194>)
 80047a4:	1bc0      	subs	r0, r0, r7
 80047a6:	4298      	cmp	r0, r3
 80047a8:	d800      	bhi.n	80047ac <HAL_RCC_ClockConfig+0x16c>
 80047aa:	e767      	b.n	800467c <HAL_RCC_ClockConfig+0x3c>
 80047ac:	e79a      	b.n	80046e4 <HAL_RCC_ClockConfig+0xa4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047ae:	68eb      	ldr	r3, [r5, #12]
 80047b0:	4909      	ldr	r1, [pc, #36]	@ (80047d8 <HAL_RCC_ClockConfig+0x198>)
 80047b2:	400b      	ands	r3, r1
 80047b4:	68e1      	ldr	r1, [r4, #12]
 80047b6:	430b      	orrs	r3, r1
 80047b8:	60eb      	str	r3, [r5, #12]
 80047ba:	e768      	b.n	800468e <HAL_RCC_ClockConfig+0x4e>
 80047bc:	40022000 	.word	0x40022000
 80047c0:	40021000 	.word	0x40021000
 80047c4:	ffffc7ff 	.word	0xffffc7ff
 80047c8:	080065ac 	.word	0x080065ac
 80047cc:	20000854 	.word	0x20000854
 80047d0:	2000085c 	.word	0x2000085c
 80047d4:	00001388 	.word	0x00001388
 80047d8:	fffff8ff 	.word	0xfffff8ff

080047dc <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80047dc:	4b04      	ldr	r3, [pc, #16]	@ (80047f0 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 80047de:	4a05      	ldr	r2, [pc, #20]	@ (80047f4 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	4905      	ldr	r1, [pc, #20]	@ (80047f8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80047e4:	055b      	lsls	r3, r3, #21
 80047e6:	0f5b      	lsrs	r3, r3, #29
 80047e8:	5ccb      	ldrb	r3, [r1, r3]
 80047ea:	6810      	ldr	r0, [r2, #0]
 80047ec:	40d8      	lsrs	r0, r3
}
 80047ee:	4770      	bx	lr
 80047f0:	40021000 	.word	0x40021000
 80047f4:	20000854 	.word	0x20000854
 80047f8:	080065a4 	.word	0x080065a4

080047fc <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80047fc:	6803      	ldr	r3, [r0, #0]
{
 80047fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004800:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004802:	069b      	lsls	r3, r3, #26
 8004804:	d52b      	bpl.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x62>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004806:	2380      	movs	r3, #128	@ 0x80
  FlagStatus       pwrclkchanged = RESET;
 8004808:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800480a:	4c51      	ldr	r4, [pc, #324]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800480c:	055b      	lsls	r3, r3, #21
 800480e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
  FlagStatus       pwrclkchanged = RESET;
 8004810:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004812:	421a      	tst	r2, r3
 8004814:	d104      	bne.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x24>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004816:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8004818:	4313      	orrs	r3, r2
 800481a:	63a3      	str	r3, [r4, #56]	@ 0x38
      pwrclkchanged = SET;
 800481c:	2301      	movs	r3, #1
 800481e:	9300      	str	r3, [sp, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004820:	2780      	movs	r7, #128	@ 0x80
 8004822:	4e4c      	ldr	r6, [pc, #304]	@ (8004954 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8004824:	007f      	lsls	r7, r7, #1
 8004826:	6833      	ldr	r3, [r6, #0]
 8004828:	423b      	tst	r3, r7
 800482a:	d038      	beq.n	800489e <HAL_RCCEx_PeriphCLKConfig+0xa2>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800482c:	20c0      	movs	r0, #192	@ 0xc0
 800482e:	22c0      	movs	r2, #192	@ 0xc0
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8004830:	6821      	ldr	r1, [r4, #0]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004832:	686b      	ldr	r3, [r5, #4]
 8004834:	0380      	lsls	r0, r0, #14
 8004836:	4059      	eors	r1, r3
 8004838:	0292      	lsls	r2, r2, #10
 800483a:	4201      	tst	r1, r0
 800483c:	d140      	bne.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800483e:	6d20      	ldr	r0, [r4, #80]	@ 0x50

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004840:	6829      	ldr	r1, [r5, #0]
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8004842:	0006      	movs	r6, r0
 8004844:	4016      	ands	r6, r2
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8004846:	4210      	tst	r0, r2
 8004848:	d143      	bne.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800484a:	682b      	ldr	r3, [r5, #0]
 800484c:	069b      	lsls	r3, r3, #26
 800484e:	d454      	bmi.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004850:	9b00      	ldr	r3, [sp, #0]
 8004852:	2b01      	cmp	r3, #1
 8004854:	d103      	bne.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004856:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004858:	4a3f      	ldr	r2, [pc, #252]	@ (8004958 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800485a:	4013      	ands	r3, r2
 800485c:	63a3      	str	r3, [r4, #56]	@ 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800485e:	682b      	ldr	r3, [r5, #0]
 8004860:	079a      	lsls	r2, r3, #30
 8004862:	d506      	bpl.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004864:	200c      	movs	r0, #12
 8004866:	493a      	ldr	r1, [pc, #232]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8004868:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 800486a:	4382      	bics	r2, r0
 800486c:	68a8      	ldr	r0, [r5, #8]
 800486e:	4302      	orrs	r2, r0
 8004870:	64ca      	str	r2, [r1, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004872:	075a      	lsls	r2, r3, #29
 8004874:	d506      	bpl.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004876:	4936      	ldr	r1, [pc, #216]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8004878:	4838      	ldr	r0, [pc, #224]	@ (800495c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800487a:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 800487c:	4002      	ands	r2, r0
 800487e:	68e8      	ldr	r0, [r5, #12]
 8004880:	4302      	orrs	r2, r0
 8004882:	64ca      	str	r2, [r1, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004884:	071a      	lsls	r2, r3, #28
 8004886:	d506      	bpl.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004888:	4931      	ldr	r1, [pc, #196]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800488a:	4835      	ldr	r0, [pc, #212]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800488c:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 800488e:	4002      	ands	r2, r0
 8004890:	6928      	ldr	r0, [r5, #16]
 8004892:	4302      	orrs	r2, r0
 8004894:	64ca      	str	r2, [r1, #76]	@ 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004896:	061b      	lsls	r3, r3, #24
 8004898:	d452      	bmi.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x144>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 800489a:	2000      	movs	r0, #0
 800489c:	e00f      	b.n	80048be <HAL_RCCEx_PeriphCLKConfig+0xc2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800489e:	6833      	ldr	r3, [r6, #0]
 80048a0:	433b      	orrs	r3, r7
 80048a2:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80048a4:	f7fe fd7e 	bl	80033a4 <HAL_GetTick>
 80048a8:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048aa:	6833      	ldr	r3, [r6, #0]
 80048ac:	423b      	tst	r3, r7
 80048ae:	d1bd      	bne.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048b0:	f7fe fd78 	bl	80033a4 <HAL_GetTick>
 80048b4:	9b01      	ldr	r3, [sp, #4]
 80048b6:	1ac0      	subs	r0, r0, r3
 80048b8:	2864      	cmp	r0, #100	@ 0x64
 80048ba:	d9f6      	bls.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0xae>
          return HAL_TIMEOUT;
 80048bc:	2003      	movs	r0, #3
}
 80048be:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80048c0:	0019      	movs	r1, r3
 80048c2:	4011      	ands	r1, r2
 80048c4:	4291      	cmp	r1, r2
 80048c6:	d1ba      	bne.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x42>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80048c8:	6821      	ldr	r1, [r4, #0]
          return HAL_ERROR;
 80048ca:	2001      	movs	r0, #1
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80048cc:	0389      	lsls	r1, r1, #14
 80048ce:	d5b6      	bpl.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x42>
 80048d0:	e7f5      	b.n	80048be <HAL_RCCEx_PeriphCLKConfig+0xc2>
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80048d2:	4013      	ands	r3, r2
 80048d4:	42b3      	cmp	r3, r6
 80048d6:	d0b8      	beq.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x4e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80048d8:	0689      	lsls	r1, r1, #26
 80048da:	d5b9      	bpl.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x54>
      __HAL_RCC_BACKUPRESET_FORCE();
 80048dc:	2180      	movs	r1, #128	@ 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80048de:	6d23      	ldr	r3, [r4, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 80048e0:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 80048e2:	0309      	lsls	r1, r1, #12
 80048e4:	4301      	orrs	r1, r0
 80048e6:	6521      	str	r1, [r4, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80048e8:	6d21      	ldr	r1, [r4, #80]	@ 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80048ea:	4a1e      	ldr	r2, [pc, #120]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x168>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 80048ec:	481e      	ldr	r0, [pc, #120]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x16c>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80048ee:	401a      	ands	r2, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 80048f0:	4001      	ands	r1, r0
 80048f2:	6521      	str	r1, [r4, #80]	@ 0x50
      RCC->CSR = temp_reg;
 80048f4:	6522      	str	r2, [r4, #80]	@ 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80048f6:	05db      	lsls	r3, r3, #23
 80048f8:	d412      	bmi.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x124>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80048fa:	6869      	ldr	r1, [r5, #4]
 80048fc:	23c0      	movs	r3, #192	@ 0xc0
 80048fe:	000a      	movs	r2, r1
 8004900:	029b      	lsls	r3, r3, #10
 8004902:	401a      	ands	r2, r3
 8004904:	429a      	cmp	r2, r3
 8004906:	d107      	bne.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8004908:	6823      	ldr	r3, [r4, #0]
 800490a:	4818      	ldr	r0, [pc, #96]	@ (800496c <HAL_RCCEx_PeriphCLKConfig+0x170>)
 800490c:	4003      	ands	r3, r0
 800490e:	20c0      	movs	r0, #192	@ 0xc0
 8004910:	0380      	lsls	r0, r0, #14
 8004912:	4001      	ands	r1, r0
 8004914:	430b      	orrs	r3, r1
 8004916:	6023      	str	r3, [r4, #0]
 8004918:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800491a:	431a      	orrs	r2, r3
 800491c:	6522      	str	r2, [r4, #80]	@ 0x50
 800491e:	e797      	b.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x54>
        tickstart = HAL_GetTick();
 8004920:	f7fe fd40 	bl	80033a4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004924:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 8004926:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004928:	00bf      	lsls	r7, r7, #2
 800492a:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800492c:	423b      	tst	r3, r7
 800492e:	d000      	beq.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004930:	e78b      	b.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x4e>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004932:	f7fe fd37 	bl	80033a4 <HAL_GetTick>
 8004936:	4b0e      	ldr	r3, [pc, #56]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x174>)
 8004938:	1b80      	subs	r0, r0, r6
 800493a:	4298      	cmp	r0, r3
 800493c:	d9f5      	bls.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x12e>
 800493e:	e7bd      	b.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8004940:	4a03      	ldr	r2, [pc, #12]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8004942:	490c      	ldr	r1, [pc, #48]	@ (8004974 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8004944:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8004946:	400b      	ands	r3, r1
 8004948:	6969      	ldr	r1, [r5, #20]
 800494a:	430b      	orrs	r3, r1
 800494c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800494e:	e7a4      	b.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8004950:	40021000 	.word	0x40021000
 8004954:	40007000 	.word	0x40007000
 8004958:	efffffff 	.word	0xefffffff
 800495c:	fffff3ff 	.word	0xfffff3ff
 8004960:	ffffcfff 	.word	0xffffcfff
 8004964:	fffcffff 	.word	0xfffcffff
 8004968:	fff7ffff 	.word	0xfff7ffff
 800496c:	ffcfffff 	.word	0xffcfffff
 8004970:	00001388 	.word	0x00001388
 8004974:	fff3ffff 	.word	0xfff3ffff

08004978 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart = 0U;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800497a:	4a0b      	ldr	r2, [pc, #44]	@ (80049a8 <HAL_RTC_WaitForSynchro+0x30>)
 800497c:	6803      	ldr	r3, [r0, #0]
{
 800497e:	0004      	movs	r4, r0
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8004980:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004982:	f7fe fd0f 	bl	80033a4 <HAL_GetTick>

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004986:	27fa      	movs	r7, #250	@ 0xfa
  tickstart = HAL_GetTick();
 8004988:	0005      	movs	r5, r0
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800498a:	2620      	movs	r6, #32
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800498c:	00bf      	lsls	r7, r7, #2
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800498e:	6823      	ldr	r3, [r4, #0]
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	4233      	tst	r3, r6
 8004994:	d001      	beq.n	800499a <HAL_RTC_WaitForSynchro+0x22>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8004996:	2000      	movs	r0, #0
}
 8004998:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800499a:	f7fe fd03 	bl	80033a4 <HAL_GetTick>
 800499e:	1b40      	subs	r0, r0, r5
 80049a0:	42b8      	cmp	r0, r7
 80049a2:	d9f4      	bls.n	800498e <HAL_RTC_WaitForSynchro+0x16>
      return HAL_TIMEOUT;
 80049a4:	2003      	movs	r0, #3
 80049a6:	e7f7      	b.n	8004998 <HAL_RTC_WaitForSynchro+0x20>
 80049a8:	0001ff5f 	.word	0x0001ff5f

080049ac <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80049ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tickstart = 0U;
  HAL_StatusTypeDef status = HAL_OK;

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80049ae:	2640      	movs	r6, #64	@ 0x40
 80049b0:	6803      	ldr	r3, [r0, #0]
{
 80049b2:	0004      	movs	r4, r0
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80049b4:	68da      	ldr	r2, [r3, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80049b6:	2500      	movs	r5, #0
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80049b8:	4232      	tst	r2, r6
 80049ba:	d10e      	bne.n	80049da <RTC_EnterInitMode+0x2e>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80049bc:	2280      	movs	r2, #128	@ 0x80
 80049be:	68d9      	ldr	r1, [r3, #12]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80049c0:	27fa      	movs	r7, #250	@ 0xfa
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80049c2:	430a      	orrs	r2, r1
 80049c4:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 80049c6:	f7fe fced 	bl	80033a4 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80049ca:	00bf      	lsls	r7, r7, #2
    tickstart = HAL_GetTick();
 80049cc:	9001      	str	r0, [sp, #4]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80049ce:	6823      	ldr	r3, [r4, #0]
 80049d0:	68db      	ldr	r3, [r3, #12]
 80049d2:	4233      	tst	r3, r6
 80049d4:	d101      	bne.n	80049da <RTC_EnterInitMode+0x2e>
 80049d6:	2d01      	cmp	r5, #1
 80049d8:	d101      	bne.n	80049de <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
}
 80049da:	0028      	movs	r0, r5
 80049dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80049de:	f7fe fce1 	bl	80033a4 <HAL_GetTick>
 80049e2:	9b01      	ldr	r3, [sp, #4]
 80049e4:	1ac0      	subs	r0, r0, r3
 80049e6:	42b8      	cmp	r0, r7
 80049e8:	d9f1      	bls.n	80049ce <RTC_EnterInitMode+0x22>
        hrtc->State = HAL_RTC_STATE_ERROR;
 80049ea:	2204      	movs	r2, #4
 80049ec:	1ca3      	adds	r3, r4, #2
        status = HAL_ERROR;
 80049ee:	2501      	movs	r5, #1
        hrtc->State = HAL_RTC_STATE_ERROR;
 80049f0:	77da      	strb	r2, [r3, #31]
        status = HAL_ERROR;
 80049f2:	e7ec      	b.n	80049ce <RTC_EnterInitMode+0x22>

080049f4 <RTC_ExitInitMode>:
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80049f4:	2180      	movs	r1, #128	@ 0x80
 80049f6:	6803      	ldr	r3, [r0, #0]
{
 80049f8:	b510      	push	{r4, lr}
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80049fa:	68da      	ldr	r2, [r3, #12]
{
 80049fc:	0004      	movs	r4, r0
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80049fe:	438a      	bics	r2, r1
 8004a00:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	069b      	lsls	r3, r3, #26
 8004a06:	d501      	bpl.n	8004a0c <RTC_ExitInitMode+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8004a08:	2000      	movs	r0, #0
      status = HAL_ERROR;
    }
  }

  return status;
}
 8004a0a:	bd10      	pop	{r4, pc}
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004a0c:	f7ff ffb4 	bl	8004978 <HAL_RTC_WaitForSynchro>
 8004a10:	2800      	cmp	r0, #0
 8004a12:	d0f9      	beq.n	8004a08 <RTC_ExitInitMode+0x14>
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004a14:	2304      	movs	r3, #4
 8004a16:	3402      	adds	r4, #2
      status = HAL_ERROR;
 8004a18:	2001      	movs	r0, #1
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004a1a:	77e3      	strb	r3, [r4, #31]
      status = HAL_ERROR;
 8004a1c:	e7f5      	b.n	8004a0a <RTC_ExitInitMode+0x16>
	...

08004a20 <HAL_RTC_Init>:
{
 8004a20:	b570      	push	{r4, r5, r6, lr}
 8004a22:	0004      	movs	r4, r0
    return HAL_ERROR;
 8004a24:	2001      	movs	r0, #1
  if (hrtc == NULL)
 8004a26:	2c00      	cmp	r4, #0
 8004a28:	d012      	beq.n	8004a50 <HAL_RTC_Init+0x30>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004a2a:	1ca5      	adds	r5, r4, #2
 8004a2c:	7feb      	ldrb	r3, [r5, #31]
 8004a2e:	b2da      	uxtb	r2, r3
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d104      	bne.n	8004a3e <HAL_RTC_Init+0x1e>
    hrtc->Lock = HAL_UNLOCKED;
 8004a34:	1823      	adds	r3, r4, r0
 8004a36:	77da      	strb	r2, [r3, #31]
    HAL_RTC_MspInit(hrtc);
 8004a38:	0020      	movs	r0, r4
 8004a3a:	f7fe f9ab 	bl	8002d94 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004a3e:	2302      	movs	r3, #2
 8004a40:	77eb      	strb	r3, [r5, #31]
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004a42:	6823      	ldr	r3, [r4, #0]
 8004a44:	68da      	ldr	r2, [r3, #12]
 8004a46:	06d2      	lsls	r2, r2, #27
 8004a48:	d503      	bpl.n	8004a52 <HAL_RTC_Init+0x32>
    hrtc->State = HAL_RTC_STATE_READY;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	2000      	movs	r0, #0
 8004a4e:	77eb      	strb	r3, [r5, #31]
}
 8004a50:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004a52:	22ca      	movs	r2, #202	@ 0xca
 8004a54:	625a      	str	r2, [r3, #36]	@ 0x24
 8004a56:	3a77      	subs	r2, #119	@ 0x77
    status = RTC_EnterInitMode(hrtc);
 8004a58:	0020      	movs	r0, r4
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004a5a:	625a      	str	r2, [r3, #36]	@ 0x24
    status = RTC_EnterInitMode(hrtc);
 8004a5c:	f7ff ffa6 	bl	80049ac <RTC_EnterInitMode>
    if (status == HAL_OK)
 8004a60:	2800      	cmp	r0, #0
 8004a62:	d123      	bne.n	8004aac <HAL_RTC_Init+0x8c>
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004a64:	6823      	ldr	r3, [r4, #0]
 8004a66:	4914      	ldr	r1, [pc, #80]	@ (8004ab8 <HAL_RTC_Init+0x98>)
 8004a68:	689a      	ldr	r2, [r3, #8]
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004a6a:	6920      	ldr	r0, [r4, #16]
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004a6c:	400a      	ands	r2, r1
 8004a6e:	609a      	str	r2, [r3, #8]
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004a70:	6862      	ldr	r2, [r4, #4]
 8004a72:	6899      	ldr	r1, [r3, #8]
 8004a74:	4302      	orrs	r2, r0
 8004a76:	69a0      	ldr	r0, [r4, #24]
 8004a78:	4302      	orrs	r2, r0
 8004a7a:	430a      	orrs	r2, r1
 8004a7c:	609a      	str	r2, [r3, #8]
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004a7e:	68e2      	ldr	r2, [r4, #12]
      status = RTC_ExitInitMode(hrtc);
 8004a80:	0020      	movs	r0, r4
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004a82:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004a84:	68a2      	ldr	r2, [r4, #8]
 8004a86:	6919      	ldr	r1, [r3, #16]
 8004a88:	0412      	lsls	r2, r2, #16
 8004a8a:	430a      	orrs	r2, r1
 8004a8c:	611a      	str	r2, [r3, #16]
      status = RTC_ExitInitMode(hrtc);
 8004a8e:	f7ff ffb1 	bl	80049f4 <RTC_ExitInitMode>
    if (status == HAL_OK)
 8004a92:	2800      	cmp	r0, #0
 8004a94:	d10a      	bne.n	8004aac <HAL_RTC_Init+0x8c>
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 8004a96:	2103      	movs	r1, #3
 8004a98:	6822      	ldr	r2, [r4, #0]
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004a9a:	6966      	ldr	r6, [r4, #20]
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 8004a9c:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8004a9e:	438b      	bics	r3, r1
 8004aa0:	64d3      	str	r3, [r2, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004aa2:	69e3      	ldr	r3, [r4, #28]
 8004aa4:	6cd1      	ldr	r1, [r2, #76]	@ 0x4c
 8004aa6:	4333      	orrs	r3, r6
 8004aa8:	430b      	orrs	r3, r1
 8004aaa:	64d3      	str	r3, [r2, #76]	@ 0x4c
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004aac:	22ff      	movs	r2, #255	@ 0xff
 8004aae:	6823      	ldr	r3, [r4, #0]
 8004ab0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (status == HAL_OK)
 8004ab2:	2800      	cmp	r0, #0
 8004ab4:	d0c9      	beq.n	8004a4a <HAL_RTC_Init+0x2a>
 8004ab6:	e7cb      	b.n	8004a50 <HAL_RTC_Init+0x30>
 8004ab8:	ff8fffbf 	.word	0xff8fffbf

08004abc <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004abc:	2280      	movs	r2, #128	@ 0x80
{
 8004abe:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 8004ac0:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ac2:	05d2      	lsls	r2, r2, #23
 8004ac4:	4290      	cmp	r0, r2
 8004ac6:	d005      	beq.n	8004ad4 <TIM_Base_SetConfig+0x18>
 8004ac8:	4c10      	ldr	r4, [pc, #64]	@ (8004b0c <TIM_Base_SetConfig+0x50>)
 8004aca:	42a0      	cmp	r0, r4
 8004acc:	d002      	beq.n	8004ad4 <TIM_Base_SetConfig+0x18>
 8004ace:	4c10      	ldr	r4, [pc, #64]	@ (8004b10 <TIM_Base_SetConfig+0x54>)
 8004ad0:	42a0      	cmp	r0, r4
 8004ad2:	d10f      	bne.n	8004af4 <TIM_Base_SetConfig+0x38>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ad4:	2470      	movs	r4, #112	@ 0x70
 8004ad6:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 8004ad8:	684c      	ldr	r4, [r1, #4]
 8004ada:	4323      	orrs	r3, r4
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004adc:	4290      	cmp	r0, r2
 8004ade:	d005      	beq.n	8004aec <TIM_Base_SetConfig+0x30>
 8004ae0:	4a0a      	ldr	r2, [pc, #40]	@ (8004b0c <TIM_Base_SetConfig+0x50>)
 8004ae2:	4290      	cmp	r0, r2
 8004ae4:	d002      	beq.n	8004aec <TIM_Base_SetConfig+0x30>
 8004ae6:	4a0a      	ldr	r2, [pc, #40]	@ (8004b10 <TIM_Base_SetConfig+0x54>)
 8004ae8:	4290      	cmp	r0, r2
 8004aea:	d103      	bne.n	8004af4 <TIM_Base_SetConfig+0x38>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004aec:	4a09      	ldr	r2, [pc, #36]	@ (8004b14 <TIM_Base_SetConfig+0x58>)
 8004aee:	401a      	ands	r2, r3
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004af0:	68cb      	ldr	r3, [r1, #12]
 8004af2:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004af4:	2280      	movs	r2, #128	@ 0x80
 8004af6:	4393      	bics	r3, r2
 8004af8:	690a      	ldr	r2, [r1, #16]
 8004afa:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8004afc:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004afe:	688b      	ldr	r3, [r1, #8]
 8004b00:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b02:	680b      	ldr	r3, [r1, #0]
 8004b04:	6283      	str	r3, [r0, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b06:	2301      	movs	r3, #1
 8004b08:	6143      	str	r3, [r0, #20]
}
 8004b0a:	bd10      	pop	{r4, pc}
 8004b0c:	40010800 	.word	0x40010800
 8004b10:	40011400 	.word	0x40011400
 8004b14:	fffffcff 	.word	0xfffffcff

08004b18 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b18:	2201      	movs	r2, #1
{
 8004b1a:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b1c:	2573      	movs	r5, #115	@ 0x73
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b1e:	6a03      	ldr	r3, [r0, #32]
 8004b20:	4393      	bics	r3, r2
 8004b22:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8004b24:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8004b26:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8004b28:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b2a:	43aa      	bics	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b2c:	680d      	ldr	r5, [r1, #0]
 8004b2e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b30:	2502      	movs	r5, #2
 8004b32:	43ab      	bics	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b34:	688d      	ldr	r5, [r1, #8]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b36:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b38:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004b3a:	684a      	ldr	r2, [r1, #4]
  tmpccer |= OC_Config->OCPolarity;
 8004b3c:	432b      	orrs	r3, r5
  TIMx->CCR1 = OC_Config->Pulse;
 8004b3e:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b40:	6203      	str	r3, [r0, #32]
}
 8004b42:	bd30      	pop	{r4, r5, pc}

08004b44 <TIM_OC2_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b44:	2210      	movs	r2, #16
 8004b46:	6a03      	ldr	r3, [r0, #32]
{
 8004b48:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b4a:	4393      	bics	r3, r2
 8004b4c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b4e:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b50:	4a08      	ldr	r2, [pc, #32]	@ (8004b74 <TIM_OC2_SetConfig+0x30>)
  tmpcr2 =  TIMx->CR2;
 8004b52:	6845      	ldr	r5, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8004b54:	6983      	ldr	r3, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b56:	4013      	ands	r3, r2

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b58:	680a      	ldr	r2, [r1, #0]
 8004b5a:	0212      	lsls	r2, r2, #8
 8004b5c:	431a      	orrs	r2, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b5e:	2320      	movs	r3, #32
 8004b60:	439c      	bics	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b62:	688b      	ldr	r3, [r1, #8]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b64:	6045      	str	r5, [r0, #4]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b66:	011b      	lsls	r3, r3, #4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b68:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b6a:	684a      	ldr	r2, [r1, #4]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b6c:	4323      	orrs	r3, r4
  TIMx->CCR2 = OC_Config->Pulse;
 8004b6e:	6382      	str	r2, [r0, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b70:	6203      	str	r3, [r0, #32]
}
 8004b72:	bd30      	pop	{r4, r5, pc}
 8004b74:	ffff8cff 	.word	0xffff8cff

08004b78 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004b78:	231f      	movs	r3, #31
{
 8004b7a:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004b7c:	2401      	movs	r4, #1
 8004b7e:	4019      	ands	r1, r3
 8004b80:	408c      	lsls	r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004b82:	408a      	lsls	r2, r1
  TIMx->CCER &= ~tmp;
 8004b84:	6a03      	ldr	r3, [r0, #32]
 8004b86:	43a3      	bics	r3, r4
 8004b88:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004b8a:	6a03      	ldr	r3, [r0, #32]
 8004b8c:	431a      	orrs	r2, r3
 8004b8e:	6202      	str	r2, [r0, #32]
}
 8004b90:	bd10      	pop	{r4, pc}

08004b92 <HAL_TIM_Base_Init>:
{
 8004b92:	b570      	push	{r4, r5, r6, lr}
 8004b94:	0004      	movs	r4, r0
    return HAL_ERROR;
 8004b96:	2001      	movs	r0, #1
  if (htim == NULL)
 8004b98:	2c00      	cmp	r4, #0
 8004b9a:	d01d      	beq.n	8004bd8 <HAL_TIM_Base_Init+0x46>
  if (htim->State == HAL_TIM_STATE_RESET)
 8004b9c:	0025      	movs	r5, r4
 8004b9e:	3539      	adds	r5, #57	@ 0x39
 8004ba0:	782b      	ldrb	r3, [r5, #0]
 8004ba2:	b2da      	uxtb	r2, r3
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d105      	bne.n	8004bb4 <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8004ba8:	0023      	movs	r3, r4
 8004baa:	3338      	adds	r3, #56	@ 0x38
    HAL_TIM_Base_MspInit(htim);
 8004bac:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 8004bae:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_MspInit(htim);
 8004bb0:	f7fe f900 	bl	8002db4 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8004bb4:	2302      	movs	r3, #2
 8004bb6:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bb8:	6820      	ldr	r0, [r4, #0]
 8004bba:	1d21      	adds	r1, r4, #4
 8004bbc:	f7ff ff7e 	bl	8004abc <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bc0:	0022      	movs	r2, r4
 8004bc2:	2301      	movs	r3, #1
  return HAL_OK;
 8004bc4:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bc6:	323e      	adds	r2, #62	@ 0x3e
 8004bc8:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bca:	343d      	adds	r4, #61	@ 0x3d
 8004bcc:	3a04      	subs	r2, #4
 8004bce:	7013      	strb	r3, [r2, #0]
 8004bd0:	7053      	strb	r3, [r2, #1]
 8004bd2:	7093      	strb	r3, [r2, #2]
 8004bd4:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 8004bd6:	702b      	strb	r3, [r5, #0]
}
 8004bd8:	bd70      	pop	{r4, r5, r6, pc}
	...

08004bdc <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8004bdc:	0001      	movs	r1, r0
{
 8004bde:	0003      	movs	r3, r0
    return HAL_ERROR;
 8004be0:	2001      	movs	r0, #1
{
 8004be2:	b510      	push	{r4, lr}
  if (htim->State != HAL_TIM_STATE_READY)
 8004be4:	3139      	adds	r1, #57	@ 0x39
 8004be6:	780c      	ldrb	r4, [r1, #0]
 8004be8:	b2e2      	uxtb	r2, r4
 8004bea:	4284      	cmp	r4, r0
 8004bec:	d119      	bne.n	8004c22 <HAL_TIM_Base_Start_IT+0x46>
  htim->State = HAL_TIM_STATE_BUSY;
 8004bee:	1800      	adds	r0, r0, r0
 8004bf0:	7008      	strb	r0, [r1, #0]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	68d9      	ldr	r1, [r3, #12]
 8004bf6:	4311      	orrs	r1, r2
 8004bf8:	60d9      	str	r1, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bfa:	2180      	movs	r1, #128	@ 0x80
 8004bfc:	05c9      	lsls	r1, r1, #23
 8004bfe:	428b      	cmp	r3, r1
 8004c00:	d005      	beq.n	8004c0e <HAL_TIM_Base_Start_IT+0x32>
 8004c02:	4909      	ldr	r1, [pc, #36]	@ (8004c28 <HAL_TIM_Base_Start_IT+0x4c>)
 8004c04:	428b      	cmp	r3, r1
 8004c06:	d002      	beq.n	8004c0e <HAL_TIM_Base_Start_IT+0x32>
 8004c08:	4908      	ldr	r1, [pc, #32]	@ (8004c2c <HAL_TIM_Base_Start_IT+0x50>)
 8004c0a:	428b      	cmp	r3, r1
 8004c0c:	d10a      	bne.n	8004c24 <HAL_TIM_Base_Start_IT+0x48>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c0e:	2107      	movs	r1, #7
 8004c10:	689a      	ldr	r2, [r3, #8]
 8004c12:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c14:	2a06      	cmp	r2, #6
 8004c16:	d003      	beq.n	8004c20 <HAL_TIM_Base_Start_IT+0x44>
      __HAL_TIM_ENABLE(htim);
 8004c18:	2201      	movs	r2, #1
 8004c1a:	6819      	ldr	r1, [r3, #0]
 8004c1c:	430a      	orrs	r2, r1
 8004c1e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004c20:	2000      	movs	r0, #0
}
 8004c22:	bd10      	pop	{r4, pc}
    __HAL_TIM_ENABLE(htim);
 8004c24:	6819      	ldr	r1, [r3, #0]
 8004c26:	e7f9      	b.n	8004c1c <HAL_TIM_Base_Start_IT+0x40>
 8004c28:	40010800 	.word	0x40010800
 8004c2c:	40011400 	.word	0x40011400

08004c30 <HAL_TIM_OC_Start_IT>:
{
 8004c30:	b510      	push	{r4, lr}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004c32:	2900      	cmp	r1, #0
 8004c34:	d106      	bne.n	8004c44 <HAL_TIM_OC_Start_IT+0x14>
 8004c36:	0002      	movs	r2, r0
 8004c38:	323a      	adds	r2, #58	@ 0x3a
 8004c3a:	7813      	ldrb	r3, [r2, #0]
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d034      	beq.n	8004caa <HAL_TIM_OC_Start_IT+0x7a>
{
 8004c40:	2001      	movs	r0, #1
 8004c42:	e021      	b.n	8004c88 <HAL_TIM_OC_Start_IT+0x58>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004c44:	0003      	movs	r3, r0
 8004c46:	2904      	cmp	r1, #4
 8004c48:	d11f      	bne.n	8004c8a <HAL_TIM_OC_Start_IT+0x5a>
 8004c4a:	333b      	adds	r3, #59	@ 0x3b
 8004c4c:	781a      	ldrb	r2, [r3, #0]
 8004c4e:	2a01      	cmp	r2, #1
 8004c50:	d1f6      	bne.n	8004c40 <HAL_TIM_OC_Start_IT+0x10>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c52:	2202      	movs	r2, #2
 8004c54:	701a      	strb	r2, [r3, #0]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004c56:	6802      	ldr	r2, [r0, #0]
 8004c58:	68d3      	ldr	r3, [r2, #12]
 8004c5a:	430b      	orrs	r3, r1
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c5c:	6804      	ldr	r4, [r0, #0]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004c5e:	60d3      	str	r3, [r2, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c60:	0020      	movs	r0, r4
 8004c62:	2201      	movs	r2, #1
 8004c64:	f7ff ff88 	bl	8004b78 <TIM_CCxChannelCmd>
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c68:	2380      	movs	r3, #128	@ 0x80
 8004c6a:	05db      	lsls	r3, r3, #23
 8004c6c:	429c      	cmp	r4, r3
 8004c6e:	d005      	beq.n	8004c7c <HAL_TIM_OC_Start_IT+0x4c>
 8004c70:	4b13      	ldr	r3, [pc, #76]	@ (8004cc0 <HAL_TIM_OC_Start_IT+0x90>)
 8004c72:	429c      	cmp	r4, r3
 8004c74:	d002      	beq.n	8004c7c <HAL_TIM_OC_Start_IT+0x4c>
 8004c76:	4b13      	ldr	r3, [pc, #76]	@ (8004cc4 <HAL_TIM_OC_Start_IT+0x94>)
 8004c78:	429c      	cmp	r4, r3
 8004c7a:	d11c      	bne.n	8004cb6 <HAL_TIM_OC_Start_IT+0x86>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c7c:	2207      	movs	r2, #7
 8004c7e:	68a3      	ldr	r3, [r4, #8]
 8004c80:	4013      	ands	r3, r2
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c82:	2b06      	cmp	r3, #6
 8004c84:	d117      	bne.n	8004cb6 <HAL_TIM_OC_Start_IT+0x86>
{
 8004c86:	2000      	movs	r0, #0
}
 8004c88:	bd10      	pop	{r4, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004c8a:	2908      	cmp	r1, #8
 8004c8c:	d101      	bne.n	8004c92 <HAL_TIM_OC_Start_IT+0x62>
 8004c8e:	333c      	adds	r3, #60	@ 0x3c
 8004c90:	e7dc      	b.n	8004c4c <HAL_TIM_OC_Start_IT+0x1c>
 8004c92:	333d      	adds	r3, #61	@ 0x3d
 8004c94:	781a      	ldrb	r2, [r3, #0]
 8004c96:	2a01      	cmp	r2, #1
 8004c98:	d1d2      	bne.n	8004c40 <HAL_TIM_OC_Start_IT+0x10>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c9a:	2202      	movs	r2, #2
 8004c9c:	701a      	strb	r2, [r3, #0]
  switch (Channel)
 8004c9e:	290c      	cmp	r1, #12
 8004ca0:	d1ce      	bne.n	8004c40 <HAL_TIM_OC_Start_IT+0x10>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004ca2:	6802      	ldr	r2, [r0, #0]
 8004ca4:	2310      	movs	r3, #16
 8004ca6:	68d4      	ldr	r4, [r2, #12]
 8004ca8:	e003      	b.n	8004cb2 <HAL_TIM_OC_Start_IT+0x82>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004caa:	2302      	movs	r3, #2
 8004cac:	7013      	strb	r3, [r2, #0]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004cae:	6802      	ldr	r2, [r0, #0]
 8004cb0:	68d4      	ldr	r4, [r2, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004cb2:	4323      	orrs	r3, r4
 8004cb4:	e7d2      	b.n	8004c5c <HAL_TIM_OC_Start_IT+0x2c>
      __HAL_TIM_ENABLE(htim);
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	6822      	ldr	r2, [r4, #0]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	6023      	str	r3, [r4, #0]
 8004cbe:	e7e2      	b.n	8004c86 <HAL_TIM_OC_Start_IT+0x56>
 8004cc0:	40010800 	.word	0x40010800
 8004cc4:	40011400 	.word	0x40011400

08004cc8 <HAL_TIM_OC_Start_DMA>:
{
 8004cc8:	b570      	push	{r4, r5, r6, lr}
 8004cca:	000e      	movs	r6, r1
 8004ccc:	0005      	movs	r5, r0
 8004cce:	0011      	movs	r1, r2
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8004cd0:	0002      	movs	r2, r0
 8004cd2:	2e00      	cmp	r6, #0
 8004cd4:	d109      	bne.n	8004cea <HAL_TIM_OC_Start_DMA+0x22>
 8004cd6:	323a      	adds	r2, #58	@ 0x3a
 8004cd8:	7814      	ldrb	r4, [r2, #0]
    return HAL_BUSY;
 8004cda:	2002      	movs	r0, #2
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8004cdc:	3c02      	subs	r4, #2
 8004cde:	4262      	negs	r2, r4
 8004ce0:	4154      	adcs	r4, r2
 8004ce2:	b2e4      	uxtb	r4, r4
 8004ce4:	2c00      	cmp	r4, #0
 8004ce6:	d00a      	beq.n	8004cfe <HAL_TIM_OC_Start_DMA+0x36>
}
 8004ce8:	bd70      	pop	{r4, r5, r6, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8004cea:	2e04      	cmp	r6, #4
 8004cec:	d101      	bne.n	8004cf2 <HAL_TIM_OC_Start_DMA+0x2a>
 8004cee:	323b      	adds	r2, #59	@ 0x3b
 8004cf0:	e7f2      	b.n	8004cd8 <HAL_TIM_OC_Start_DMA+0x10>
 8004cf2:	2e08      	cmp	r6, #8
 8004cf4:	d101      	bne.n	8004cfa <HAL_TIM_OC_Start_DMA+0x32>
 8004cf6:	323c      	adds	r2, #60	@ 0x3c
 8004cf8:	e7ee      	b.n	8004cd8 <HAL_TIM_OC_Start_DMA+0x10>
 8004cfa:	323d      	adds	r2, #61	@ 0x3d
 8004cfc:	e7ec      	b.n	8004cd8 <HAL_TIM_OC_Start_DMA+0x10>
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8004cfe:	002a      	movs	r2, r5
 8004d00:	2e00      	cmp	r6, #0
 8004d02:	d109      	bne.n	8004d18 <HAL_TIM_OC_Start_DMA+0x50>
 8004d04:	323a      	adds	r2, #58	@ 0x3a
 8004d06:	7812      	ldrb	r2, [r2, #0]
 8004d08:	3a01      	subs	r2, #1
 8004d0a:	4250      	negs	r0, r2
 8004d0c:	4142      	adcs	r2, r0
 8004d0e:	b2d2      	uxtb	r2, r2
 8004d10:	2a00      	cmp	r2, #0
 8004d12:	d10b      	bne.n	8004d2c <HAL_TIM_OC_Start_DMA+0x64>
      return HAL_ERROR;
 8004d14:	2001      	movs	r0, #1
 8004d16:	e7e7      	b.n	8004ce8 <HAL_TIM_OC_Start_DMA+0x20>
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8004d18:	2e04      	cmp	r6, #4
 8004d1a:	d101      	bne.n	8004d20 <HAL_TIM_OC_Start_DMA+0x58>
 8004d1c:	323b      	adds	r2, #59	@ 0x3b
 8004d1e:	e7f2      	b.n	8004d06 <HAL_TIM_OC_Start_DMA+0x3e>
 8004d20:	2e08      	cmp	r6, #8
 8004d22:	d101      	bne.n	8004d28 <HAL_TIM_OC_Start_DMA+0x60>
 8004d24:	323c      	adds	r2, #60	@ 0x3c
 8004d26:	e7ee      	b.n	8004d06 <HAL_TIM_OC_Start_DMA+0x3e>
 8004d28:	323d      	adds	r2, #61	@ 0x3d
 8004d2a:	e7ec      	b.n	8004d06 <HAL_TIM_OC_Start_DMA+0x3e>
    if ((pData == NULL) || (Length == 0U))
 8004d2c:	2900      	cmp	r1, #0
 8004d2e:	d0f1      	beq.n	8004d14 <HAL_TIM_OC_Start_DMA+0x4c>
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d0ef      	beq.n	8004d14 <HAL_TIM_OC_Start_DMA+0x4c>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d34:	2202      	movs	r2, #2
 8004d36:	0028      	movs	r0, r5
 8004d38:	2e00      	cmp	r6, #0
 8004d3a:	d12f      	bne.n	8004d9c <HAL_TIM_OC_Start_DMA+0xd4>
 8004d3c:	303a      	adds	r0, #58	@ 0x3a
 8004d3e:	7002      	strb	r2, [r0, #0]
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004d40:	6a28      	ldr	r0, [r5, #32]
 8004d42:	4a38      	ldr	r2, [pc, #224]	@ (8004e24 <HAL_TIM_OC_Start_DMA+0x15c>)
 8004d44:	62c2      	str	r2, [r0, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004d46:	4a38      	ldr	r2, [pc, #224]	@ (8004e28 <HAL_TIM_OC_Start_DMA+0x160>)
 8004d48:	6302      	str	r2, [r0, #48]	@ 0x30
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004d4a:	4a38      	ldr	r2, [pc, #224]	@ (8004e2c <HAL_TIM_OC_Start_DMA+0x164>)
 8004d4c:	6342      	str	r2, [r0, #52]	@ 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8004d4e:	682a      	ldr	r2, [r5, #0]
 8004d50:	3234      	adds	r2, #52	@ 0x34
 8004d52:	f7fe fbd3 	bl	80034fc <HAL_DMA_Start_IT>
 8004d56:	2800      	cmp	r0, #0
 8004d58:	d1dc      	bne.n	8004d14 <HAL_TIM_OC_Start_DMA+0x4c>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004d5a:	2380      	movs	r3, #128	@ 0x80
 8004d5c:	682a      	ldr	r2, [r5, #0]
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	68d1      	ldr	r1, [r2, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004d62:	682c      	ldr	r4, [r5, #0]
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004d64:	430b      	orrs	r3, r1
 8004d66:	60d3      	str	r3, [r2, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004d68:	0031      	movs	r1, r6
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	0020      	movs	r0, r4
 8004d6e:	f7ff ff03 	bl	8004b78 <TIM_CCxChannelCmd>
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d72:	2380      	movs	r3, #128	@ 0x80
 8004d74:	05db      	lsls	r3, r3, #23
 8004d76:	429c      	cmp	r4, r3
 8004d78:	d005      	beq.n	8004d86 <HAL_TIM_OC_Start_DMA+0xbe>
 8004d7a:	4b2d      	ldr	r3, [pc, #180]	@ (8004e30 <HAL_TIM_OC_Start_DMA+0x168>)
 8004d7c:	429c      	cmp	r4, r3
 8004d7e:	d002      	beq.n	8004d86 <HAL_TIM_OC_Start_DMA+0xbe>
 8004d80:	4b2c      	ldr	r3, [pc, #176]	@ (8004e34 <HAL_TIM_OC_Start_DMA+0x16c>)
 8004d82:	429c      	cmp	r4, r3
 8004d84:	d104      	bne.n	8004d90 <HAL_TIM_OC_Start_DMA+0xc8>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d86:	2207      	movs	r2, #7
 8004d88:	68a3      	ldr	r3, [r4, #8]
 8004d8a:	4013      	ands	r3, r2
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d8c:	2b06      	cmp	r3, #6
 8004d8e:	d003      	beq.n	8004d98 <HAL_TIM_OC_Start_DMA+0xd0>
        __HAL_TIM_ENABLE(htim);
 8004d90:	2301      	movs	r3, #1
 8004d92:	6822      	ldr	r2, [r4, #0]
 8004d94:	4313      	orrs	r3, r2
 8004d96:	6023      	str	r3, [r4, #0]
    return HAL_BUSY;
 8004d98:	2000      	movs	r0, #0
 8004d9a:	e7a5      	b.n	8004ce8 <HAL_TIM_OC_Start_DMA+0x20>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d9c:	2e04      	cmp	r6, #4
 8004d9e:	d113      	bne.n	8004dc8 <HAL_TIM_OC_Start_DMA+0x100>
 8004da0:	303b      	adds	r0, #59	@ 0x3b
 8004da2:	7002      	strb	r2, [r0, #0]
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004da4:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8004da6:	4a1f      	ldr	r2, [pc, #124]	@ (8004e24 <HAL_TIM_OC_Start_DMA+0x15c>)
 8004da8:	62c2      	str	r2, [r0, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004daa:	4a1f      	ldr	r2, [pc, #124]	@ (8004e28 <HAL_TIM_OC_Start_DMA+0x160>)
 8004dac:	6302      	str	r2, [r0, #48]	@ 0x30
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004dae:	4a1f      	ldr	r2, [pc, #124]	@ (8004e2c <HAL_TIM_OC_Start_DMA+0x164>)
 8004db0:	6342      	str	r2, [r0, #52]	@ 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8004db2:	682a      	ldr	r2, [r5, #0]
 8004db4:	3238      	adds	r2, #56	@ 0x38
 8004db6:	f7fe fba1 	bl	80034fc <HAL_DMA_Start_IT>
 8004dba:	2800      	cmp	r0, #0
 8004dbc:	d1aa      	bne.n	8004d14 <HAL_TIM_OC_Start_DMA+0x4c>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8004dbe:	2380      	movs	r3, #128	@ 0x80
 8004dc0:	682a      	ldr	r2, [r5, #0]
 8004dc2:	00db      	lsls	r3, r3, #3
 8004dc4:	68d1      	ldr	r1, [r2, #12]
 8004dc6:	e7cc      	b.n	8004d62 <HAL_TIM_OC_Start_DMA+0x9a>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004dc8:	2e08      	cmp	r6, #8
 8004dca:	d113      	bne.n	8004df4 <HAL_TIM_OC_Start_DMA+0x12c>
 8004dcc:	303c      	adds	r0, #60	@ 0x3c
 8004dce:	7002      	strb	r2, [r0, #0]
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004dd0:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8004dd2:	4a14      	ldr	r2, [pc, #80]	@ (8004e24 <HAL_TIM_OC_Start_DMA+0x15c>)
 8004dd4:	62c2      	str	r2, [r0, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004dd6:	4a14      	ldr	r2, [pc, #80]	@ (8004e28 <HAL_TIM_OC_Start_DMA+0x160>)
 8004dd8:	6302      	str	r2, [r0, #48]	@ 0x30
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004dda:	4a14      	ldr	r2, [pc, #80]	@ (8004e2c <HAL_TIM_OC_Start_DMA+0x164>)
 8004ddc:	6342      	str	r2, [r0, #52]	@ 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8004dde:	682a      	ldr	r2, [r5, #0]
 8004de0:	323c      	adds	r2, #60	@ 0x3c
 8004de2:	f7fe fb8b 	bl	80034fc <HAL_DMA_Start_IT>
 8004de6:	2800      	cmp	r0, #0
 8004de8:	d194      	bne.n	8004d14 <HAL_TIM_OC_Start_DMA+0x4c>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8004dea:	2380      	movs	r3, #128	@ 0x80
 8004dec:	682a      	ldr	r2, [r5, #0]
 8004dee:	011b      	lsls	r3, r3, #4
 8004df0:	68d1      	ldr	r1, [r2, #12]
 8004df2:	e7b6      	b.n	8004d62 <HAL_TIM_OC_Start_DMA+0x9a>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004df4:	303d      	adds	r0, #61	@ 0x3d
 8004df6:	7002      	strb	r2, [r0, #0]
  switch (Channel)
 8004df8:	2e0c      	cmp	r6, #12
 8004dfa:	d18b      	bne.n	8004d14 <HAL_TIM_OC_Start_DMA+0x4c>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004dfc:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8004dfe:	4a09      	ldr	r2, [pc, #36]	@ (8004e24 <HAL_TIM_OC_Start_DMA+0x15c>)
 8004e00:	62c2      	str	r2, [r0, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004e02:	4a09      	ldr	r2, [pc, #36]	@ (8004e28 <HAL_TIM_OC_Start_DMA+0x160>)
 8004e04:	6302      	str	r2, [r0, #48]	@ 0x30
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004e06:	4a09      	ldr	r2, [pc, #36]	@ (8004e2c <HAL_TIM_OC_Start_DMA+0x164>)
 8004e08:	6342      	str	r2, [r0, #52]	@ 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8004e0a:	682a      	ldr	r2, [r5, #0]
 8004e0c:	3240      	adds	r2, #64	@ 0x40
 8004e0e:	f7fe fb75 	bl	80034fc <HAL_DMA_Start_IT>
 8004e12:	2800      	cmp	r0, #0
 8004e14:	d000      	beq.n	8004e18 <HAL_TIM_OC_Start_DMA+0x150>
 8004e16:	e77d      	b.n	8004d14 <HAL_TIM_OC_Start_DMA+0x4c>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004e18:	2380      	movs	r3, #128	@ 0x80
 8004e1a:	682a      	ldr	r2, [r5, #0]
 8004e1c:	015b      	lsls	r3, r3, #5
 8004e1e:	68d1      	ldr	r1, [r2, #12]
 8004e20:	e79f      	b.n	8004d62 <HAL_TIM_OC_Start_DMA+0x9a>
 8004e22:	46c0      	nop			@ (mov r8, r8)
 8004e24:	080050f1 	.word	0x080050f1
 8004e28:	08005163 	.word	0x08005163
 8004e2c:	080052af 	.word	0x080052af
 8004e30:	40010800 	.word	0x40010800
 8004e34:	40011400 	.word	0x40011400

08004e38 <HAL_TIM_PWM_MspInit>:
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
 8004e38:	4770      	bx	lr

08004e3a <HAL_TIM_PWM_Init>:
{
 8004e3a:	b570      	push	{r4, r5, r6, lr}
 8004e3c:	0004      	movs	r4, r0
    return HAL_ERROR;
 8004e3e:	2001      	movs	r0, #1
  if (htim == NULL)
 8004e40:	2c00      	cmp	r4, #0
 8004e42:	d01d      	beq.n	8004e80 <HAL_TIM_PWM_Init+0x46>
  if (htim->State == HAL_TIM_STATE_RESET)
 8004e44:	0025      	movs	r5, r4
 8004e46:	3539      	adds	r5, #57	@ 0x39
 8004e48:	782b      	ldrb	r3, [r5, #0]
 8004e4a:	b2da      	uxtb	r2, r3
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d105      	bne.n	8004e5c <HAL_TIM_PWM_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8004e50:	0023      	movs	r3, r4
 8004e52:	3338      	adds	r3, #56	@ 0x38
    HAL_TIM_PWM_MspInit(htim);
 8004e54:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 8004e56:	701a      	strb	r2, [r3, #0]
    HAL_TIM_PWM_MspInit(htim);
 8004e58:	f7ff ffee 	bl	8004e38 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8004e5c:	2302      	movs	r3, #2
 8004e5e:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e60:	6820      	ldr	r0, [r4, #0]
 8004e62:	1d21      	adds	r1, r4, #4
 8004e64:	f7ff fe2a 	bl	8004abc <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e68:	0022      	movs	r2, r4
 8004e6a:	2301      	movs	r3, #1
  return HAL_OK;
 8004e6c:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e6e:	323e      	adds	r2, #62	@ 0x3e
 8004e70:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e72:	343d      	adds	r4, #61	@ 0x3d
 8004e74:	3a04      	subs	r2, #4
 8004e76:	7013      	strb	r3, [r2, #0]
 8004e78:	7053      	strb	r3, [r2, #1]
 8004e7a:	7093      	strb	r3, [r2, #2]
 8004e7c:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 8004e7e:	702b      	strb	r3, [r5, #0]
}
 8004e80:	bd70      	pop	{r4, r5, r6, pc}

08004e82 <HAL_TIM_PWM_Start_DMA>:
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
 8004e82:	b510      	push	{r4, lr}
 8004e84:	f7ff ff20 	bl	8004cc8 <HAL_TIM_OC_Start_DMA>
 8004e88:	bd10      	pop	{r4, pc}
	...

08004e8c <HAL_TIM_PWM_ConfigChannel>:
{
 8004e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8004e8e:	0005      	movs	r5, r0
 8004e90:	3538      	adds	r5, #56	@ 0x38
{
 8004e92:	000c      	movs	r4, r1
  __HAL_LOCK(htim);
 8004e94:	7829      	ldrb	r1, [r5, #0]
{
 8004e96:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8004e98:	2002      	movs	r0, #2
 8004e9a:	2901      	cmp	r1, #1
 8004e9c:	d00a      	beq.n	8004eb4 <HAL_TIM_PWM_ConfigChannel+0x28>
 8004e9e:	3801      	subs	r0, #1
 8004ea0:	7028      	strb	r0, [r5, #0]
  switch (Channel)
 8004ea2:	2a08      	cmp	r2, #8
 8004ea4:	d052      	beq.n	8004f4c <HAL_TIM_PWM_ConfigChannel+0xc0>
 8004ea6:	d806      	bhi.n	8004eb6 <HAL_TIM_PWM_ConfigChannel+0x2a>
 8004ea8:	2a00      	cmp	r2, #0
 8004eaa:	d02a      	beq.n	8004f02 <HAL_TIM_PWM_ConfigChannel+0x76>
 8004eac:	2a04      	cmp	r2, #4
 8004eae:	d03b      	beq.n	8004f28 <HAL_TIM_PWM_ConfigChannel+0x9c>
  __HAL_UNLOCK(htim);
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	702b      	strb	r3, [r5, #0]
}
 8004eb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (Channel)
 8004eb6:	2a0c      	cmp	r2, #12
 8004eb8:	d1fa      	bne.n	8004eb0 <HAL_TIM_PWM_ConfigChannel+0x24>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004eba:	681b      	ldr	r3, [r3, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ebc:	4934      	ldr	r1, [pc, #208]	@ (8004f90 <HAL_TIM_PWM_ConfigChannel+0x104>)
 8004ebe:	6a1a      	ldr	r2, [r3, #32]
 8004ec0:	400a      	ands	r2, r1
 8004ec2:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8004ec4:	6a18      	ldr	r0, [r3, #32]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ec6:	4933      	ldr	r1, [pc, #204]	@ (8004f94 <HAL_TIM_PWM_ConfigChannel+0x108>)
  tmpcr2 =  TIMx->CR2;
 8004ec8:	685e      	ldr	r6, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8004eca:	69da      	ldr	r2, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ecc:	400a      	ands	r2, r1
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ece:	6821      	ldr	r1, [r4, #0]
 8004ed0:	0209      	lsls	r1, r1, #8
 8004ed2:	4311      	orrs	r1, r2
  tmpccer &= ~TIM_CCER_CC4P;
 8004ed4:	4a30      	ldr	r2, [pc, #192]	@ (8004f98 <HAL_TIM_PWM_ConfigChannel+0x10c>)
 8004ed6:	4010      	ands	r0, r2
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ed8:	68a2      	ldr	r2, [r4, #8]
  TIMx->CR2 = tmpcr2;
 8004eda:	605e      	str	r6, [r3, #4]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004edc:	0312      	lsls	r2, r2, #12
  TIMx->CCMR2 = tmpccmrx;
 8004ede:	61d9      	str	r1, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8004ee0:	6861      	ldr	r1, [r4, #4]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ee2:	4302      	orrs	r2, r0
  TIMx->CCR4 = OC_Config->Pulse;
 8004ee4:	6419      	str	r1, [r3, #64]	@ 0x40
  TIMx->CCER = tmpccer;
 8004ee6:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004ee8:	2280      	movs	r2, #128	@ 0x80
 8004eea:	69d9      	ldr	r1, [r3, #28]
 8004eec:	0112      	lsls	r2, r2, #4
 8004eee:	430a      	orrs	r2, r1
 8004ef0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004ef2:	69da      	ldr	r2, [r3, #28]
 8004ef4:	4929      	ldr	r1, [pc, #164]	@ (8004f9c <HAL_TIM_PWM_ConfigChannel+0x110>)
 8004ef6:	400a      	ands	r2, r1
 8004ef8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004efa:	68e2      	ldr	r2, [r4, #12]
 8004efc:	69d9      	ldr	r1, [r3, #28]
 8004efe:	0212      	lsls	r2, r2, #8
 8004f00:	e043      	b.n	8004f8a <HAL_TIM_PWM_ConfigChannel+0xfe>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f02:	681e      	ldr	r6, [r3, #0]
 8004f04:	0021      	movs	r1, r4
 8004f06:	0030      	movs	r0, r6
 8004f08:	f7ff fe06 	bl	8004b18 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f0c:	2308      	movs	r3, #8
 8004f0e:	69b2      	ldr	r2, [r6, #24]
 8004f10:	4313      	orrs	r3, r2
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f12:	2204      	movs	r2, #4
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f14:	61b3      	str	r3, [r6, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f16:	69b3      	ldr	r3, [r6, #24]
 8004f18:	4393      	bics	r3, r2
 8004f1a:	61b3      	str	r3, [r6, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f1c:	69b3      	ldr	r3, [r6, #24]
 8004f1e:	68e2      	ldr	r2, [r4, #12]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f20:	4313      	orrs	r3, r2
 8004f22:	61b3      	str	r3, [r6, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8004f24:	2000      	movs	r0, #0
 8004f26:	e7c3      	b.n	8004eb0 <HAL_TIM_PWM_ConfigChannel+0x24>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f28:	681e      	ldr	r6, [r3, #0]
 8004f2a:	0021      	movs	r1, r4
 8004f2c:	0030      	movs	r0, r6
 8004f2e:	f7ff fe09 	bl	8004b44 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f32:	2380      	movs	r3, #128	@ 0x80
 8004f34:	69b2      	ldr	r2, [r6, #24]
 8004f36:	011b      	lsls	r3, r3, #4
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	61b3      	str	r3, [r6, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f3c:	69b3      	ldr	r3, [r6, #24]
 8004f3e:	4a17      	ldr	r2, [pc, #92]	@ (8004f9c <HAL_TIM_PWM_ConfigChannel+0x110>)
 8004f40:	4013      	ands	r3, r2
 8004f42:	61b3      	str	r3, [r6, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f44:	68e3      	ldr	r3, [r4, #12]
 8004f46:	69b2      	ldr	r2, [r6, #24]
 8004f48:	021b      	lsls	r3, r3, #8
 8004f4a:	e7e9      	b.n	8004f20 <HAL_TIM_PWM_ConfigChannel+0x94>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f4c:	681b      	ldr	r3, [r3, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f4e:	4814      	ldr	r0, [pc, #80]	@ (8004fa0 <HAL_TIM_PWM_ConfigChannel+0x114>)
 8004f50:	6a19      	ldr	r1, [r3, #32]
 8004f52:	4001      	ands	r1, r0
 8004f54:	6219      	str	r1, [r3, #32]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f56:	2173      	movs	r1, #115	@ 0x73
  tmpccer = TIMx->CCER;
 8004f58:	6a1f      	ldr	r7, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8004f5a:	685e      	ldr	r6, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8004f5c:	69d8      	ldr	r0, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f5e:	4388      	bics	r0, r1
  tmpccmrx |= OC_Config->OCMode;
 8004f60:	6821      	ldr	r1, [r4, #0]
 8004f62:	4308      	orrs	r0, r1
  tmpccer &= ~TIM_CCER_CC3P;
 8004f64:	490f      	ldr	r1, [pc, #60]	@ (8004fa4 <HAL_TIM_PWM_ConfigChannel+0x118>)
 8004f66:	400f      	ands	r7, r1
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f68:	68a1      	ldr	r1, [r4, #8]
  TIMx->CR2 = tmpcr2;
 8004f6a:	605e      	str	r6, [r3, #4]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f6c:	0209      	lsls	r1, r1, #8
  TIMx->CCMR2 = tmpccmrx;
 8004f6e:	61d8      	str	r0, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8004f70:	6860      	ldr	r0, [r4, #4]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f72:	4339      	orrs	r1, r7
  TIMx->CCR3 = OC_Config->Pulse;
 8004f74:	63d8      	str	r0, [r3, #60]	@ 0x3c
  TIMx->CCER = tmpccer;
 8004f76:	6219      	str	r1, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f78:	69d9      	ldr	r1, [r3, #28]
 8004f7a:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004f7c:	2104      	movs	r1, #4
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f7e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004f80:	69da      	ldr	r2, [r3, #28]
 8004f82:	438a      	bics	r2, r1
 8004f84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004f86:	69da      	ldr	r2, [r3, #28]
 8004f88:	68e1      	ldr	r1, [r4, #12]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f8a:	430a      	orrs	r2, r1
 8004f8c:	61da      	str	r2, [r3, #28]
      break;
 8004f8e:	e7c9      	b.n	8004f24 <HAL_TIM_PWM_ConfigChannel+0x98>
 8004f90:	ffffefff 	.word	0xffffefff
 8004f94:	ffff8cff 	.word	0xffff8cff
 8004f98:	ffffdfff 	.word	0xffffdfff
 8004f9c:	fffffbff 	.word	0xfffffbff
 8004fa0:	fffffeff 	.word	0xfffffeff
 8004fa4:	fffffdff 	.word	0xfffffdff

08004fa8 <HAL_TIM_ConfigClockSource>:
{
 8004fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8004faa:	0004      	movs	r4, r0
 8004fac:	2202      	movs	r2, #2
 8004fae:	3438      	adds	r4, #56	@ 0x38
 8004fb0:	7825      	ldrb	r5, [r4, #0]
{
 8004fb2:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8004fb4:	0010      	movs	r0, r2
 8004fb6:	2d01      	cmp	r5, #1
 8004fb8:	d01c      	beq.n	8004ff4 <HAL_TIM_ConfigClockSource+0x4c>
  htim->State = HAL_TIM_STATE_BUSY;
 8004fba:	001d      	movs	r5, r3
  __HAL_LOCK(htim);
 8004fbc:	3801      	subs	r0, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8004fbe:	3539      	adds	r5, #57	@ 0x39
  __HAL_LOCK(htim);
 8004fc0:	7020      	strb	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004fc2:	702a      	strb	r2, [r5, #0]
  tmpsmcr = htim->Instance->SMCR;
 8004fc4:	681b      	ldr	r3, [r3, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fc6:	4e46      	ldr	r6, [pc, #280]	@ (80050e0 <HAL_TIM_ConfigClockSource+0x138>)
  tmpsmcr = htim->Instance->SMCR;
 8004fc8:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fca:	4032      	ands	r2, r6
  htim->Instance->SMCR = tmpsmcr;
 8004fcc:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8004fce:	680a      	ldr	r2, [r1, #0]
 8004fd0:	2a60      	cmp	r2, #96	@ 0x60
 8004fd2:	d059      	beq.n	8005088 <HAL_TIM_ConfigClockSource+0xe0>
 8004fd4:	d82e      	bhi.n	8005034 <HAL_TIM_ConfigClockSource+0x8c>
 8004fd6:	2a40      	cmp	r2, #64	@ 0x40
 8004fd8:	d100      	bne.n	8004fdc <HAL_TIM_ConfigClockSource+0x34>
 8004fda:	e06c      	b.n	80050b6 <HAL_TIM_ConfigClockSource+0x10e>
 8004fdc:	d813      	bhi.n	8005006 <HAL_TIM_ConfigClockSource+0x5e>
 8004fde:	2a20      	cmp	r2, #32
 8004fe0:	d00b      	beq.n	8004ffa <HAL_TIM_ConfigClockSource+0x52>
 8004fe2:	d808      	bhi.n	8004ff6 <HAL_TIM_ConfigClockSource+0x4e>
 8004fe4:	2110      	movs	r1, #16
 8004fe6:	0016      	movs	r6, r2
 8004fe8:	438e      	bics	r6, r1
 8004fea:	d006      	beq.n	8004ffa <HAL_TIM_ConfigClockSource+0x52>
  htim->State = HAL_TIM_STATE_READY;
 8004fec:	2301      	movs	r3, #1
 8004fee:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	7023      	strb	r3, [r4, #0]
}
 8004ff4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  switch (sClockSourceConfig->ClockSource)
 8004ff6:	2a30      	cmp	r2, #48	@ 0x30
 8004ff8:	d1f8      	bne.n	8004fec <HAL_TIM_ConfigClockSource+0x44>
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ffa:	2070      	movs	r0, #112	@ 0x70
  tmpsmcr = TIMx->SMCR;
 8004ffc:	6899      	ldr	r1, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ffe:	4381      	bics	r1, r0
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005000:	430a      	orrs	r2, r1
 8005002:	2107      	movs	r1, #7
 8005004:	e02d      	b.n	8005062 <HAL_TIM_ConfigClockSource+0xba>
  switch (sClockSourceConfig->ClockSource)
 8005006:	2a50      	cmp	r2, #80	@ 0x50
 8005008:	d1f0      	bne.n	8004fec <HAL_TIM_ConfigClockSource+0x44>
                               sClockSourceConfig->ClockPolarity,
 800500a:	684e      	ldr	r6, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 800500c:	68ca      	ldr	r2, [r1, #12]
  tmpccer = TIMx->CCER;
 800500e:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005010:	6a1f      	ldr	r7, [r3, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005012:	0112      	lsls	r2, r2, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005014:	4387      	bics	r7, r0
 8005016:	621f      	str	r7, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005018:	27f0      	movs	r7, #240	@ 0xf0
  tmpccmr1 = TIMx->CCMR1;
 800501a:	6998      	ldr	r0, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800501c:	43b8      	bics	r0, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800501e:	4302      	orrs	r2, r0
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005020:	200a      	movs	r0, #10
  TIMx->CCMR1 = tmpccmr1;
 8005022:	619a      	str	r2, [r3, #24]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005024:	2270      	movs	r2, #112	@ 0x70
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005026:	4381      	bics	r1, r0
  tmpccer |= TIM_ICPolarity;
 8005028:	4331      	orrs	r1, r6
  TIMx->CCER = tmpccer;
 800502a:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 800502c:	6899      	ldr	r1, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800502e:	4391      	bics	r1, r2
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005030:	3a19      	subs	r2, #25
 8005032:	e016      	b.n	8005062 <HAL_TIM_ConfigClockSource+0xba>
  switch (sClockSourceConfig->ClockSource)
 8005034:	2680      	movs	r6, #128	@ 0x80
 8005036:	0176      	lsls	r6, r6, #5
 8005038:	42b2      	cmp	r2, r6
 800503a:	d014      	beq.n	8005066 <HAL_TIM_ConfigClockSource+0xbe>
 800503c:	2680      	movs	r6, #128	@ 0x80
 800503e:	01b6      	lsls	r6, r6, #6
 8005040:	42b2      	cmp	r2, r6
 8005042:	d012      	beq.n	800506a <HAL_TIM_ConfigClockSource+0xc2>
 8005044:	2a70      	cmp	r2, #112	@ 0x70
 8005046:	d1d1      	bne.n	8004fec <HAL_TIM_ConfigClockSource+0x44>
  tmpsmcr = TIMx->SMCR;
 8005048:	6898      	ldr	r0, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800504a:	4a26      	ldr	r2, [pc, #152]	@ (80050e4 <HAL_TIM_ConfigClockSource+0x13c>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800504c:	684e      	ldr	r6, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800504e:	4010      	ands	r0, r2
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005050:	688a      	ldr	r2, [r1, #8]
 8005052:	68c9      	ldr	r1, [r1, #12]
 8005054:	4332      	orrs	r2, r6
 8005056:	0209      	lsls	r1, r1, #8
 8005058:	430a      	orrs	r2, r1
 800505a:	4302      	orrs	r2, r0
  TIMx->SMCR = tmpsmcr;
 800505c:	609a      	str	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800505e:	2277      	movs	r2, #119	@ 0x77
      tmpsmcr = htim->Instance->SMCR;
 8005060:	6899      	ldr	r1, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005062:	430a      	orrs	r2, r1
      htim->Instance->SMCR = tmpsmcr;
 8005064:	609a      	str	r2, [r3, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005066:	2000      	movs	r0, #0
 8005068:	e7c0      	b.n	8004fec <HAL_TIM_ConfigClockSource+0x44>
  tmpsmcr = TIMx->SMCR;
 800506a:	6898      	ldr	r0, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800506c:	4a1d      	ldr	r2, [pc, #116]	@ (80050e4 <HAL_TIM_ConfigClockSource+0x13c>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800506e:	684e      	ldr	r6, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005070:	4010      	ands	r0, r2
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005072:	688a      	ldr	r2, [r1, #8]
 8005074:	68c9      	ldr	r1, [r1, #12]
 8005076:	4332      	orrs	r2, r6
 8005078:	0209      	lsls	r1, r1, #8
 800507a:	430a      	orrs	r2, r1
 800507c:	4302      	orrs	r2, r0
  TIMx->SMCR = tmpsmcr;
 800507e:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005080:	2280      	movs	r2, #128	@ 0x80
 8005082:	6899      	ldr	r1, [r3, #8]
 8005084:	01d2      	lsls	r2, r2, #7
 8005086:	e7ec      	b.n	8005062 <HAL_TIM_ConfigClockSource+0xba>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005088:	2610      	movs	r6, #16
 800508a:	6a18      	ldr	r0, [r3, #32]
                               sClockSourceConfig->ClockPolarity,
 800508c:	684a      	ldr	r2, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800508e:	43b0      	bics	r0, r6
                               sClockSourceConfig->ClockFilter);
 8005090:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005092:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005094:	699e      	ldr	r6, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005096:	4f14      	ldr	r7, [pc, #80]	@ (80050e8 <HAL_TIM_ConfigClockSource+0x140>)
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005098:	0309      	lsls	r1, r1, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800509a:	403e      	ands	r6, r7
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800509c:	4331      	orrs	r1, r6
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800509e:	26a0      	movs	r6, #160	@ 0xa0
  tmpccer = TIMx->CCER;
 80050a0:	6a18      	ldr	r0, [r3, #32]
  tmpccer |= (TIM_ICPolarity << 4U);
 80050a2:	0112      	lsls	r2, r2, #4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80050a4:	43b0      	bics	r0, r6
  tmpccer |= (TIM_ICPolarity << 4U);
 80050a6:	4302      	orrs	r2, r0
  TIMx->CCMR1 = tmpccmr1 ;
 80050a8:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 80050aa:	621a      	str	r2, [r3, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 80050ac:	2270      	movs	r2, #112	@ 0x70
  tmpsmcr = TIMx->SMCR;
 80050ae:	6899      	ldr	r1, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80050b0:	4391      	bics	r1, r2
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80050b2:	3a09      	subs	r2, #9
 80050b4:	e7d5      	b.n	8005062 <HAL_TIM_ConfigClockSource+0xba>
                               sClockSourceConfig->ClockPolarity,
 80050b6:	684e      	ldr	r6, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80050b8:	68ca      	ldr	r2, [r1, #12]
  tmpccer = TIMx->CCER;
 80050ba:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050bc:	6a1f      	ldr	r7, [r3, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80050be:	0112      	lsls	r2, r2, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050c0:	4387      	bics	r7, r0
 80050c2:	621f      	str	r7, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050c4:	27f0      	movs	r7, #240	@ 0xf0
  tmpccmr1 = TIMx->CCMR1;
 80050c6:	6998      	ldr	r0, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050c8:	43b8      	bics	r0, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80050ca:	4302      	orrs	r2, r0
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050cc:	200a      	movs	r0, #10
  TIMx->CCMR1 = tmpccmr1;
 80050ce:	619a      	str	r2, [r3, #24]
  tmpsmcr &= ~TIM_SMCR_TS;
 80050d0:	2270      	movs	r2, #112	@ 0x70
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050d2:	4381      	bics	r1, r0
  tmpccer |= TIM_ICPolarity;
 80050d4:	4331      	orrs	r1, r6
  TIMx->CCER = tmpccer;
 80050d6:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 80050d8:	6899      	ldr	r1, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80050da:	4391      	bics	r1, r2
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80050dc:	3a29      	subs	r2, #41	@ 0x29
 80050de:	e7c0      	b.n	8005062 <HAL_TIM_ConfigClockSource+0xba>
 80050e0:	ffff0088 	.word	0xffff0088
 80050e4:	ffff00ff 	.word	0xffff00ff
 80050e8:	ffff0fff 	.word	0xffff0fff

080050ec <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 80050ec:	4770      	bx	lr

080050ee <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 80050ee:	4770      	bx	lr

080050f0 <TIM_DMADelayPulseCplt>:
{
 80050f0:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050f2:	6a84      	ldr	r4, [r0, #40]	@ 0x28
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80050f4:	6a22      	ldr	r2, [r4, #32]
 80050f6:	4282      	cmp	r2, r0
 80050f8:	d10d      	bne.n	8005116 <TIM_DMADelayPulseCplt+0x26>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050fa:	2301      	movs	r3, #1
 80050fc:	7623      	strb	r3, [r4, #24]
    if (hdma->Init.Mode == DMA_NORMAL)
 80050fe:	69d2      	ldr	r2, [r2, #28]
 8005100:	2a00      	cmp	r2, #0
 8005102:	d102      	bne.n	800510a <TIM_DMADelayPulseCplt+0x1a>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005104:	0022      	movs	r2, r4
 8005106:	323a      	adds	r2, #58	@ 0x3a
 8005108:	7013      	strb	r3, [r2, #0]
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800510a:	0020      	movs	r0, r4
 800510c:	f7fc ffa2 	bl	8002054 <HAL_TIM_PWM_PulseFinishedCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005110:	2300      	movs	r3, #0
 8005112:	7623      	strb	r3, [r4, #24]
}
 8005114:	bd10      	pop	{r4, pc}
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005116:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005118:	4283      	cmp	r3, r0
 800511a:	d109      	bne.n	8005130 <TIM_DMADelayPulseCplt+0x40>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800511c:	2202      	movs	r2, #2
 800511e:	7622      	strb	r2, [r4, #24]
    if (hdma->Init.Mode == DMA_NORMAL)
 8005120:	69db      	ldr	r3, [r3, #28]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d1f1      	bne.n	800510a <TIM_DMADelayPulseCplt+0x1a>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005126:	0023      	movs	r3, r4
 8005128:	3a01      	subs	r2, #1
 800512a:	333b      	adds	r3, #59	@ 0x3b
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800512c:	701a      	strb	r2, [r3, #0]
 800512e:	e7ec      	b.n	800510a <TIM_DMADelayPulseCplt+0x1a>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005130:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8005132:	4283      	cmp	r3, r0
 8005134:	d108      	bne.n	8005148 <TIM_DMADelayPulseCplt+0x58>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005136:	2204      	movs	r2, #4
 8005138:	7622      	strb	r2, [r4, #24]
    if (hdma->Init.Mode == DMA_NORMAL)
 800513a:	69db      	ldr	r3, [r3, #28]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d1e4      	bne.n	800510a <TIM_DMADelayPulseCplt+0x1a>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005140:	0023      	movs	r3, r4
 8005142:	3a03      	subs	r2, #3
 8005144:	333c      	adds	r3, #60	@ 0x3c
 8005146:	e7f1      	b.n	800512c <TIM_DMADelayPulseCplt+0x3c>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005148:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800514a:	4283      	cmp	r3, r0
 800514c:	d1dd      	bne.n	800510a <TIM_DMADelayPulseCplt+0x1a>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800514e:	2208      	movs	r2, #8
 8005150:	7622      	strb	r2, [r4, #24]
    if (hdma->Init.Mode == DMA_NORMAL)
 8005152:	69db      	ldr	r3, [r3, #28]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d1d8      	bne.n	800510a <TIM_DMADelayPulseCplt+0x1a>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005158:	0023      	movs	r3, r4
 800515a:	3a07      	subs	r2, #7
 800515c:	333d      	adds	r3, #61	@ 0x3d
 800515e:	e7e5      	b.n	800512c <TIM_DMADelayPulseCplt+0x3c>

08005160 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
 8005160:	4770      	bx	lr

08005162 <TIM_DMADelayPulseHalfCplt>:
{
 8005162:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005164:	6a84      	ldr	r4, [r0, #40]	@ 0x28
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005166:	6a23      	ldr	r3, [r4, #32]
 8005168:	4283      	cmp	r3, r0
 800516a:	d107      	bne.n	800517c <TIM_DMADelayPulseHalfCplt+0x1a>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800516c:	2301      	movs	r3, #1
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800516e:	7623      	strb	r3, [r4, #24]
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8005170:	0020      	movs	r0, r4
 8005172:	f7ff fff5 	bl	8005160 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005176:	2300      	movs	r3, #0
 8005178:	7623      	strb	r3, [r4, #24]
}
 800517a:	bd10      	pop	{r4, pc}
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800517c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800517e:	4283      	cmp	r3, r0
 8005180:	d101      	bne.n	8005186 <TIM_DMADelayPulseHalfCplt+0x24>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005182:	2302      	movs	r3, #2
 8005184:	e7f3      	b.n	800516e <TIM_DMADelayPulseHalfCplt+0xc>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005186:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8005188:	4283      	cmp	r3, r0
 800518a:	d101      	bne.n	8005190 <TIM_DMADelayPulseHalfCplt+0x2e>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800518c:	2304      	movs	r3, #4
 800518e:	e7ee      	b.n	800516e <TIM_DMADelayPulseHalfCplt+0xc>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005190:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8005192:	4283      	cmp	r3, r0
 8005194:	d1ec      	bne.n	8005170 <TIM_DMADelayPulseHalfCplt+0xe>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005196:	2308      	movs	r3, #8
 8005198:	e7e9      	b.n	800516e <TIM_DMADelayPulseHalfCplt+0xc>

0800519a <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 800519a:	4770      	bx	lr

0800519c <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800519c:	2202      	movs	r2, #2
 800519e:	6803      	ldr	r3, [r0, #0]
{
 80051a0:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80051a2:	6919      	ldr	r1, [r3, #16]
{
 80051a4:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80051a6:	4211      	tst	r1, r2
 80051a8:	d00d      	beq.n	80051c6 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80051aa:	68d9      	ldr	r1, [r3, #12]
 80051ac:	4211      	tst	r1, r2
 80051ae:	d00a      	beq.n	80051c6 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80051b0:	3a05      	subs	r2, #5
 80051b2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051b4:	3204      	adds	r2, #4
 80051b6:	7602      	strb	r2, [r0, #24]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051b8:	699b      	ldr	r3, [r3, #24]
 80051ba:	079b      	lsls	r3, r3, #30
 80051bc:	d05e      	beq.n	800527c <HAL_TIM_IRQHandler+0xe0>
          HAL_TIM_IC_CaptureCallback(htim);
 80051be:	f7ff ff96 	bl	80050ee <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051c2:	2300      	movs	r3, #0
 80051c4:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80051c6:	2204      	movs	r2, #4
 80051c8:	6823      	ldr	r3, [r4, #0]
 80051ca:	6919      	ldr	r1, [r3, #16]
 80051cc:	4211      	tst	r1, r2
 80051ce:	d010      	beq.n	80051f2 <HAL_TIM_IRQHandler+0x56>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80051d0:	68d9      	ldr	r1, [r3, #12]
 80051d2:	4211      	tst	r1, r2
 80051d4:	d00d      	beq.n	80051f2 <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80051d6:	3a09      	subs	r2, #9
 80051d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051da:	3207      	adds	r2, #7
 80051dc:	7622      	strb	r2, [r4, #24]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80051de:	699a      	ldr	r2, [r3, #24]
 80051e0:	23c0      	movs	r3, #192	@ 0xc0
 80051e2:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 80051e4:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80051e6:	421a      	tst	r2, r3
 80051e8:	d04e      	beq.n	8005288 <HAL_TIM_IRQHandler+0xec>
        HAL_TIM_IC_CaptureCallback(htim);
 80051ea:	f7ff ff80 	bl	80050ee <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051ee:	2300      	movs	r3, #0
 80051f0:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80051f2:	2208      	movs	r2, #8
 80051f4:	6823      	ldr	r3, [r4, #0]
 80051f6:	6919      	ldr	r1, [r3, #16]
 80051f8:	4211      	tst	r1, r2
 80051fa:	d00e      	beq.n	800521a <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80051fc:	68d9      	ldr	r1, [r3, #12]
 80051fe:	4211      	tst	r1, r2
 8005200:	d00b      	beq.n	800521a <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005202:	3a11      	subs	r2, #17
 8005204:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005206:	320d      	adds	r2, #13
 8005208:	7622      	strb	r2, [r4, #24]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800520a:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 800520c:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800520e:	079b      	lsls	r3, r3, #30
 8005210:	d040      	beq.n	8005294 <HAL_TIM_IRQHandler+0xf8>
        HAL_TIM_IC_CaptureCallback(htim);
 8005212:	f7ff ff6c 	bl	80050ee <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005216:	2300      	movs	r3, #0
 8005218:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800521a:	2210      	movs	r2, #16
 800521c:	6823      	ldr	r3, [r4, #0]
 800521e:	6919      	ldr	r1, [r3, #16]
 8005220:	4211      	tst	r1, r2
 8005222:	d010      	beq.n	8005246 <HAL_TIM_IRQHandler+0xaa>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005224:	68d9      	ldr	r1, [r3, #12]
 8005226:	4211      	tst	r1, r2
 8005228:	d00d      	beq.n	8005246 <HAL_TIM_IRQHandler+0xaa>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800522a:	3a21      	subs	r2, #33	@ 0x21
 800522c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800522e:	3219      	adds	r2, #25
 8005230:	7622      	strb	r2, [r4, #24]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005232:	69da      	ldr	r2, [r3, #28]
 8005234:	23c0      	movs	r3, #192	@ 0xc0
 8005236:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8005238:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800523a:	421a      	tst	r2, r3
 800523c:	d030      	beq.n	80052a0 <HAL_TIM_IRQHandler+0x104>
        HAL_TIM_IC_CaptureCallback(htim);
 800523e:	f7ff ff56 	bl	80050ee <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005242:	2300      	movs	r3, #0
 8005244:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005246:	2201      	movs	r2, #1
 8005248:	6823      	ldr	r3, [r4, #0]
 800524a:	6919      	ldr	r1, [r3, #16]
 800524c:	4211      	tst	r1, r2
 800524e:	d007      	beq.n	8005260 <HAL_TIM_IRQHandler+0xc4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005250:	68d9      	ldr	r1, [r3, #12]
 8005252:	4211      	tst	r1, r2
 8005254:	d004      	beq.n	8005260 <HAL_TIM_IRQHandler+0xc4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005256:	3a03      	subs	r2, #3
      HAL_TIM_PeriodElapsedCallback(htim);
 8005258:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800525a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800525c:	f7fc feca 	bl	8001ff4 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005260:	2240      	movs	r2, #64	@ 0x40
 8005262:	6823      	ldr	r3, [r4, #0]
 8005264:	6919      	ldr	r1, [r3, #16]
 8005266:	4211      	tst	r1, r2
 8005268:	d007      	beq.n	800527a <HAL_TIM_IRQHandler+0xde>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800526a:	68d9      	ldr	r1, [r3, #12]
 800526c:	4211      	tst	r1, r2
 800526e:	d004      	beq.n	800527a <HAL_TIM_IRQHandler+0xde>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005270:	3a81      	subs	r2, #129	@ 0x81
      HAL_TIM_TriggerCallback(htim);
 8005272:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005274:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8005276:	f7ff ff90 	bl	800519a <HAL_TIM_TriggerCallback>
}
 800527a:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800527c:	f7ff ff36 	bl	80050ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005280:	0020      	movs	r0, r4
 8005282:	f7fc fee7 	bl	8002054 <HAL_TIM_PWM_PulseFinishedCallback>
 8005286:	e79c      	b.n	80051c2 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005288:	f7ff ff30 	bl	80050ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800528c:	0020      	movs	r0, r4
 800528e:	f7fc fee1 	bl	8002054 <HAL_TIM_PWM_PulseFinishedCallback>
 8005292:	e7ac      	b.n	80051ee <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005294:	f7ff ff2a 	bl	80050ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005298:	0020      	movs	r0, r4
 800529a:	f7fc fedb 	bl	8002054 <HAL_TIM_PWM_PulseFinishedCallback>
 800529e:	e7ba      	b.n	8005216 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052a0:	f7ff ff24 	bl	80050ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052a4:	0020      	movs	r0, r4
 80052a6:	f7fc fed5 	bl	8002054 <HAL_TIM_PWM_PulseFinishedCallback>
 80052aa:	e7ca      	b.n	8005242 <HAL_TIM_IRQHandler+0xa6>

080052ac <HAL_TIM_ErrorCallback>:
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
 80052ac:	4770      	bx	lr

080052ae <TIM_DMAError>:
{
 80052ae:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052b0:	6a84      	ldr	r4, [r0, #40]	@ 0x28
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80052b2:	6a23      	ldr	r3, [r4, #32]
 80052b4:	4283      	cmp	r3, r0
 80052b6:	d105      	bne.n	80052c4 <TIM_DMAError+0x16>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052b8:	2301      	movs	r3, #1
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80052ba:	0022      	movs	r2, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052bc:	7623      	strb	r3, [r4, #24]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80052be:	323a      	adds	r2, #58	@ 0x3a
    htim->State = HAL_TIM_STATE_READY;
 80052c0:	7013      	strb	r3, [r2, #0]
 80052c2:	e008      	b.n	80052d6 <TIM_DMAError+0x28>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80052c4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80052c6:	4283      	cmp	r3, r0
 80052c8:	d10b      	bne.n	80052e2 <TIM_DMAError+0x34>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052ca:	2302      	movs	r3, #2
 80052cc:	7623      	strb	r3, [r4, #24]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80052ce:	0023      	movs	r3, r4
 80052d0:	2201      	movs	r2, #1
 80052d2:	333b      	adds	r3, #59	@ 0x3b
 80052d4:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ErrorCallback(htim);
 80052d6:	0020      	movs	r0, r4
 80052d8:	f7ff ffe8 	bl	80052ac <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052dc:	2300      	movs	r3, #0
 80052de:	7623      	strb	r3, [r4, #24]
}
 80052e0:	bd10      	pop	{r4, pc}
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80052e2:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80052e4:	2301      	movs	r3, #1
 80052e6:	4282      	cmp	r2, r0
 80052e8:	d104      	bne.n	80052f4 <TIM_DMAError+0x46>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052ea:	2204      	movs	r2, #4
 80052ec:	7622      	strb	r2, [r4, #24]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80052ee:	0022      	movs	r2, r4
 80052f0:	323c      	adds	r2, #60	@ 0x3c
 80052f2:	e7e5      	b.n	80052c0 <TIM_DMAError+0x12>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80052f4:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80052f6:	4282      	cmp	r2, r0
 80052f8:	d104      	bne.n	8005304 <TIM_DMAError+0x56>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052fa:	2208      	movs	r2, #8
 80052fc:	7622      	strb	r2, [r4, #24]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80052fe:	0022      	movs	r2, r4
 8005300:	323d      	adds	r2, #61	@ 0x3d
 8005302:	e7dd      	b.n	80052c0 <TIM_DMAError+0x12>
    htim->State = HAL_TIM_STATE_READY;
 8005304:	0022      	movs	r2, r4
 8005306:	3239      	adds	r2, #57	@ 0x39
 8005308:	e7da      	b.n	80052c0 <TIM_DMAError+0x12>

0800530a <HAL_TIM_Base_GetState>:
  return htim->State;
 800530a:	3039      	adds	r0, #57	@ 0x39
 800530c:	7800      	ldrb	r0, [r0, #0]
 800530e:	b2c0      	uxtb	r0, r0
}
 8005310:	4770      	bx	lr
	...

08005314 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005314:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005316:	0004      	movs	r4, r0
 8005318:	2202      	movs	r2, #2
 800531a:	3438      	adds	r4, #56	@ 0x38
 800531c:	7825      	ldrb	r5, [r4, #0]
{
 800531e:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8005320:	0010      	movs	r0, r2
 8005322:	2d01      	cmp	r5, #1
 8005324:	d01d      	beq.n	8005362 <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005326:	001d      	movs	r5, r3

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005328:	2670      	movs	r6, #112	@ 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 800532a:	3539      	adds	r5, #57	@ 0x39
 800532c:	702a      	strb	r2, [r5, #0]
  tmpcr2 = htim->Instance->CR2;
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8005332:	689a      	ldr	r2, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8005334:	43b0      	bics	r0, r6
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005336:	680e      	ldr	r6, [r1, #0]
 8005338:	4330      	orrs	r0, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800533a:	6058      	str	r0, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800533c:	2080      	movs	r0, #128	@ 0x80
 800533e:	05c0      	lsls	r0, r0, #23
 8005340:	4283      	cmp	r3, r0
 8005342:	d005      	beq.n	8005350 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8005344:	4807      	ldr	r0, [pc, #28]	@ (8005364 <HAL_TIMEx_MasterConfigSynchronization+0x50>)
 8005346:	4283      	cmp	r3, r0
 8005348:	d002      	beq.n	8005350 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 800534a:	4807      	ldr	r0, [pc, #28]	@ (8005368 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
 800534c:	4283      	cmp	r3, r0
 800534e:	d104      	bne.n	800535a <HAL_TIMEx_MasterConfigSynchronization+0x46>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005350:	2080      	movs	r0, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005352:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005354:	4382      	bics	r2, r0
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005356:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005358:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800535a:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 800535c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800535e:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 8005360:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8005362:	bd70      	pop	{r4, r5, r6, pc}
 8005364:	40010800 	.word	0x40010800
 8005368:	40011400 	.word	0x40011400

0800536c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800536c:	b530      	push	{r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800536e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005372:	2201      	movs	r2, #1
 8005374:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005378:	6801      	ldr	r1, [r0, #0]
 800537a:	4d12      	ldr	r5, [pc, #72]	@ (80053c4 <UART_EndRxTransfer+0x58>)
 800537c:	680b      	ldr	r3, [r1, #0]
 800537e:	402b      	ands	r3, r5
 8005380:	600b      	str	r3, [r1, #0]
 8005382:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005386:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800538a:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800538e:	6801      	ldr	r1, [r0, #0]
 8005390:	688b      	ldr	r3, [r1, #8]
 8005392:	4393      	bics	r3, r2
 8005394:	608b      	str	r3, [r1, #8]
 8005396:	f384 8810 	msr	PRIMASK, r4

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800539a:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 800539c:	4293      	cmp	r3, r2
 800539e:	d10a      	bne.n	80053b6 <UART_EndRxTransfer+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053a0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053a4:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053a8:	2410      	movs	r4, #16
 80053aa:	6802      	ldr	r2, [r0, #0]
 80053ac:	6813      	ldr	r3, [r2, #0]
 80053ae:	43a3      	bics	r3, r4
 80053b0:	6013      	str	r3, [r2, #0]
 80053b2:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80053b6:	2220      	movs	r2, #32
 80053b8:	1d03      	adds	r3, r0, #4
 80053ba:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053bc:	2300      	movs	r3, #0
 80053be:	6603      	str	r3, [r0, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80053c0:	6683      	str	r3, [r0, #104]	@ 0x68
}
 80053c2:	bd30      	pop	{r4, r5, pc}
 80053c4:	fffffedf 	.word	0xfffffedf

080053c8 <UART_SetConfig>:
{
 80053c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053ca:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80053cc:	6925      	ldr	r5, [r4, #16]
 80053ce:	68a1      	ldr	r1, [r4, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 80053d0:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80053d2:	4329      	orrs	r1, r5
 80053d4:	6965      	ldr	r5, [r4, #20]
 80053d6:	69c3      	ldr	r3, [r0, #28]
 80053d8:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80053da:	6810      	ldr	r0, [r2, #0]
 80053dc:	4d60      	ldr	r5, [pc, #384]	@ (8005560 <UART_SetConfig+0x198>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80053de:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80053e0:	4028      	ands	r0, r5
 80053e2:	4301      	orrs	r1, r0
 80053e4:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053e6:	6851      	ldr	r1, [r2, #4]
 80053e8:	485e      	ldr	r0, [pc, #376]	@ (8005564 <UART_SetConfig+0x19c>)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80053ea:	4d5f      	ldr	r5, [pc, #380]	@ (8005568 <UART_SetConfig+0x1a0>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053ec:	4001      	ands	r1, r0
 80053ee:	68e0      	ldr	r0, [r4, #12]
 80053f0:	4301      	orrs	r1, r0
 80053f2:	6051      	str	r1, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80053f4:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80053f6:	42aa      	cmp	r2, r5
 80053f8:	d001      	beq.n	80053fe <UART_SetConfig+0x36>
    tmpreg |= huart->Init.OneBitSampling;
 80053fa:	6a21      	ldr	r1, [r4, #32]
 80053fc:	4308      	orrs	r0, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80053fe:	6891      	ldr	r1, [r2, #8]
 8005400:	4e5a      	ldr	r6, [pc, #360]	@ (800556c <UART_SetConfig+0x1a4>)
 8005402:	4031      	ands	r1, r6
 8005404:	4301      	orrs	r1, r0
 8005406:	6091      	str	r1, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005408:	4959      	ldr	r1, [pc, #356]	@ (8005570 <UART_SetConfig+0x1a8>)
 800540a:	428a      	cmp	r2, r1
 800540c:	d116      	bne.n	800543c <UART_SetConfig+0x74>
 800540e:	200c      	movs	r0, #12
 8005410:	4958      	ldr	r1, [pc, #352]	@ (8005574 <UART_SetConfig+0x1ac>)
 8005412:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 8005414:	4002      	ands	r2, r0
 8005416:	2a08      	cmp	r2, #8
 8005418:	d100      	bne.n	800541c <UART_SetConfig+0x54>
 800541a:	e08a      	b.n	8005532 <UART_SetConfig+0x16a>
 800541c:	d807      	bhi.n	800542e <UART_SetConfig+0x66>
 800541e:	2a00      	cmp	r2, #0
 8005420:	d100      	bne.n	8005424 <UART_SetConfig+0x5c>
 8005422:	e07d      	b.n	8005520 <UART_SetConfig+0x158>
 8005424:	2a04      	cmp	r2, #4
 8005426:	d100      	bne.n	800542a <UART_SetConfig+0x62>
 8005428:	e073      	b.n	8005512 <UART_SetConfig+0x14a>
          pclk = (uint32_t) HSI_VALUE;
 800542a:	2001      	movs	r0, #1
 800542c:	e047      	b.n	80054be <UART_SetConfig+0xf6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800542e:	2a0c      	cmp	r2, #12
 8005430:	d1fb      	bne.n	800542a <UART_SetConfig+0x62>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005432:	2080      	movs	r0, #128	@ 0x80
 8005434:	0200      	lsls	r0, r0, #8
 8005436:	4283      	cmp	r3, r0
 8005438:	d049      	beq.n	80054ce <UART_SetConfig+0x106>
 800543a:	e088      	b.n	800554e <UART_SetConfig+0x186>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800543c:	42aa      	cmp	r2, r5
 800543e:	d1f4      	bne.n	800542a <UART_SetConfig+0x62>
 8005440:	21c0      	movs	r1, #192	@ 0xc0
 8005442:	2080      	movs	r0, #128	@ 0x80
 8005444:	4a4b      	ldr	r2, [pc, #300]	@ (8005574 <UART_SetConfig+0x1ac>)
 8005446:	0109      	lsls	r1, r1, #4
 8005448:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800544a:	0100      	lsls	r0, r0, #4
 800544c:	400b      	ands	r3, r1
 800544e:	4283      	cmp	r3, r0
 8005450:	d00e      	beq.n	8005470 <UART_SetConfig+0xa8>
 8005452:	d808      	bhi.n	8005466 <UART_SetConfig+0x9e>
 8005454:	2b00      	cmp	r3, #0
 8005456:	d02d      	beq.n	80054b4 <UART_SetConfig+0xec>
 8005458:	2280      	movs	r2, #128	@ 0x80
 800545a:	00d2      	lsls	r2, r2, #3
 800545c:	4293      	cmp	r3, r2
 800545e:	d1e4      	bne.n	800542a <UART_SetConfig+0x62>
        pclk = HAL_RCC_GetSysClockFreq();
 8005460:	f7fe fe56 	bl	8004110 <HAL_RCC_GetSysClockFreq>
        break;
 8005464:	e028      	b.n	80054b8 <UART_SetConfig+0xf0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005466:	428b      	cmp	r3, r1
 8005468:	d1df      	bne.n	800542a <UART_SetConfig+0x62>
 800546a:	2080      	movs	r0, #128	@ 0x80
 800546c:	0200      	lsls	r0, r0, #8
 800546e:	e006      	b.n	800547e <UART_SetConfig+0xb6>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005470:	6810      	ldr	r0, [r2, #0]
          pclk = (uint32_t) HSI_VALUE;
 8005472:	4b41      	ldr	r3, [pc, #260]	@ (8005578 <UART_SetConfig+0x1b0>)
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005474:	06c0      	lsls	r0, r0, #27
          pclk = (uint32_t) HSI_VALUE;
 8005476:	17c0      	asrs	r0, r0, #31
 8005478:	4018      	ands	r0, r3
 800547a:	4b40      	ldr	r3, [pc, #256]	@ (800557c <UART_SetConfig+0x1b4>)
 800547c:	18c0      	adds	r0, r0, r3
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800547e:	2303      	movs	r3, #3
 8005480:	6862      	ldr	r2, [r4, #4]
 8005482:	4353      	muls	r3, r2
 8005484:	4283      	cmp	r3, r0
 8005486:	d8d0      	bhi.n	800542a <UART_SetConfig+0x62>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005488:	0313      	lsls	r3, r2, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800548a:	4283      	cmp	r3, r0
 800548c:	d3cd      	bcc.n	800542a <UART_SetConfig+0x62>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800548e:	2100      	movs	r1, #0
 8005490:	0e07      	lsrs	r7, r0, #24
 8005492:	0206      	lsls	r6, r0, #8
 8005494:	0850      	lsrs	r0, r2, #1
 8005496:	1836      	adds	r6, r6, r0
 8005498:	414f      	adcs	r7, r1
 800549a:	000b      	movs	r3, r1
 800549c:	0030      	movs	r0, r6
 800549e:	0039      	movs	r1, r7
 80054a0:	f7fa fff8 	bl	8000494 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80054a4:	4b36      	ldr	r3, [pc, #216]	@ (8005580 <UART_SetConfig+0x1b8>)
 80054a6:	18c2      	adds	r2, r0, r3
 80054a8:	4b36      	ldr	r3, [pc, #216]	@ (8005584 <UART_SetConfig+0x1bc>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d8bd      	bhi.n	800542a <UART_SetConfig+0x62>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80054ae:	6823      	ldr	r3, [r4, #0]
 80054b0:	60d8      	str	r0, [r3, #12]
 80054b2:	e003      	b.n	80054bc <UART_SetConfig+0xf4>
        pclk = HAL_RCC_GetPCLK1Freq();
 80054b4:	f7ff f992 	bl	80047dc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80054b8:	2800      	cmp	r0, #0
 80054ba:	d1e0      	bne.n	800547e <UART_SetConfig+0xb6>
          pclk = (uint32_t) HSI_VALUE;
 80054bc:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 80054be:	2300      	movs	r3, #0
 80054c0:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 80054c2:	66e3      	str	r3, [r4, #108]	@ 0x6c
}
 80054c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pclk = HAL_RCC_GetPCLK1Freq();
 80054c6:	f7ff f989 	bl	80047dc <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 80054ca:	1e03      	subs	r3, r0, #0
    if (pclk != 0U)
 80054cc:	d0f6      	beq.n	80054bc <UART_SetConfig+0xf4>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80054ce:	6861      	ldr	r1, [r4, #4]
 80054d0:	005b      	lsls	r3, r3, #1
 80054d2:	0848      	lsrs	r0, r1, #1
 80054d4:	1818      	adds	r0, r3, r0
 80054d6:	f7fa fe21 	bl	800011c <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054da:	0002      	movs	r2, r0
 80054dc:	4b2a      	ldr	r3, [pc, #168]	@ (8005588 <UART_SetConfig+0x1c0>)
 80054de:	3a10      	subs	r2, #16
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d8a2      	bhi.n	800542a <UART_SetConfig+0x62>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80054e4:	230f      	movs	r3, #15
 80054e6:	0002      	movs	r2, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80054e8:	0700      	lsls	r0, r0, #28
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80054ea:	439a      	bics	r2, r3
 80054ec:	b293      	uxth	r3, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80054ee:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 80054f0:	6822      	ldr	r2, [r4, #0]
 80054f2:	4303      	orrs	r3, r0
 80054f4:	60d3      	str	r3, [r2, #12]
 80054f6:	e7e1      	b.n	80054bc <UART_SetConfig+0xf4>
        pclk = HAL_RCC_GetSysClockFreq();
 80054f8:	f7fe fe0a 	bl	8004110 <HAL_RCC_GetSysClockFreq>
 80054fc:	e7e5      	b.n	80054ca <UART_SetConfig+0x102>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80054fe:	680b      	ldr	r3, [r1, #0]
 8005500:	4013      	ands	r3, r2
          pclk = (uint32_t) HSI_VALUE;
 8005502:	1e5a      	subs	r2, r3, #1
 8005504:	4193      	sbcs	r3, r2
 8005506:	4a1c      	ldr	r2, [pc, #112]	@ (8005578 <UART_SetConfig+0x1b0>)
 8005508:	425b      	negs	r3, r3
 800550a:	4013      	ands	r3, r2
 800550c:	4a1b      	ldr	r2, [pc, #108]	@ (800557c <UART_SetConfig+0x1b4>)
 800550e:	189b      	adds	r3, r3, r2
 8005510:	e7dd      	b.n	80054ce <UART_SetConfig+0x106>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005512:	2280      	movs	r2, #128	@ 0x80
 8005514:	0212      	lsls	r2, r2, #8
 8005516:	4293      	cmp	r3, r2
 8005518:	d0ee      	beq.n	80054f8 <UART_SetConfig+0x130>
        pclk = HAL_RCC_GetSysClockFreq();
 800551a:	f7fe fdf9 	bl	8004110 <HAL_RCC_GetSysClockFreq>
        break;
 800551e:	e005      	b.n	800552c <UART_SetConfig+0x164>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005520:	2280      	movs	r2, #128	@ 0x80
 8005522:	0212      	lsls	r2, r2, #8
 8005524:	4293      	cmp	r3, r2
 8005526:	d0ce      	beq.n	80054c6 <UART_SetConfig+0xfe>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005528:	f7ff f958 	bl	80047dc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800552c:	2800      	cmp	r0, #0
 800552e:	d0c5      	beq.n	80054bc <UART_SetConfig+0xf4>
 8005530:	e00d      	b.n	800554e <UART_SetConfig+0x186>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005532:	2080      	movs	r0, #128	@ 0x80
 8005534:	2210      	movs	r2, #16
 8005536:	0200      	lsls	r0, r0, #8
 8005538:	4283      	cmp	r3, r0
 800553a:	d0e0      	beq.n	80054fe <UART_SetConfig+0x136>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800553c:	6808      	ldr	r0, [r1, #0]
 800553e:	4010      	ands	r0, r2
          pclk = (uint32_t) HSI_VALUE;
 8005540:	1e43      	subs	r3, r0, #1
 8005542:	4198      	sbcs	r0, r3
 8005544:	4b0c      	ldr	r3, [pc, #48]	@ (8005578 <UART_SetConfig+0x1b0>)
 8005546:	4240      	negs	r0, r0
 8005548:	4018      	ands	r0, r3
 800554a:	4b0c      	ldr	r3, [pc, #48]	@ (800557c <UART_SetConfig+0x1b4>)
 800554c:	18c0      	adds	r0, r0, r3
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800554e:	6861      	ldr	r1, [r4, #4]
 8005550:	084b      	lsrs	r3, r1, #1
 8005552:	1818      	adds	r0, r3, r0
 8005554:	f7fa fde2 	bl	800011c <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005558:	0002      	movs	r2, r0
 800555a:	4b0b      	ldr	r3, [pc, #44]	@ (8005588 <UART_SetConfig+0x1c0>)
 800555c:	3a10      	subs	r2, #16
 800555e:	e7a4      	b.n	80054aa <UART_SetConfig+0xe2>
 8005560:	efff69f3 	.word	0xefff69f3
 8005564:	ffffcfff 	.word	0xffffcfff
 8005568:	40004800 	.word	0x40004800
 800556c:	fffff4ff 	.word	0xfffff4ff
 8005570:	40004400 	.word	0x40004400
 8005574:	40021000 	.word	0x40021000
 8005578:	ff48e500 	.word	0xff48e500
 800557c:	00f42400 	.word	0x00f42400
 8005580:	fffffd00 	.word	0xfffffd00
 8005584:	000ffcff 	.word	0x000ffcff
 8005588:	0000ffef 	.word	0x0000ffef

0800558c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800558c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
{
 800558e:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005590:	07da      	lsls	r2, r3, #31
 8005592:	d506      	bpl.n	80055a2 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005594:	6801      	ldr	r1, [r0, #0]
 8005596:	4c28      	ldr	r4, [pc, #160]	@ (8005638 <UART_AdvFeatureConfig+0xac>)
 8005598:	684a      	ldr	r2, [r1, #4]
 800559a:	4022      	ands	r2, r4
 800559c:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800559e:	4322      	orrs	r2, r4
 80055a0:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80055a2:	079a      	lsls	r2, r3, #30
 80055a4:	d506      	bpl.n	80055b4 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80055a6:	6801      	ldr	r1, [r0, #0]
 80055a8:	4c24      	ldr	r4, [pc, #144]	@ (800563c <UART_AdvFeatureConfig+0xb0>)
 80055aa:	684a      	ldr	r2, [r1, #4]
 80055ac:	4022      	ands	r2, r4
 80055ae:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 80055b0:	4322      	orrs	r2, r4
 80055b2:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80055b4:	075a      	lsls	r2, r3, #29
 80055b6:	d506      	bpl.n	80055c6 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80055b8:	6801      	ldr	r1, [r0, #0]
 80055ba:	4c21      	ldr	r4, [pc, #132]	@ (8005640 <UART_AdvFeatureConfig+0xb4>)
 80055bc:	684a      	ldr	r2, [r1, #4]
 80055be:	4022      	ands	r2, r4
 80055c0:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 80055c2:	4322      	orrs	r2, r4
 80055c4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80055c6:	071a      	lsls	r2, r3, #28
 80055c8:	d506      	bpl.n	80055d8 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80055ca:	6801      	ldr	r1, [r0, #0]
 80055cc:	4c1d      	ldr	r4, [pc, #116]	@ (8005644 <UART_AdvFeatureConfig+0xb8>)
 80055ce:	684a      	ldr	r2, [r1, #4]
 80055d0:	4022      	ands	r2, r4
 80055d2:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 80055d4:	4322      	orrs	r2, r4
 80055d6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80055d8:	06da      	lsls	r2, r3, #27
 80055da:	d506      	bpl.n	80055ea <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80055dc:	6801      	ldr	r1, [r0, #0]
 80055de:	4c1a      	ldr	r4, [pc, #104]	@ (8005648 <UART_AdvFeatureConfig+0xbc>)
 80055e0:	688a      	ldr	r2, [r1, #8]
 80055e2:	4022      	ands	r2, r4
 80055e4:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 80055e6:	4322      	orrs	r2, r4
 80055e8:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80055ea:	069a      	lsls	r2, r3, #26
 80055ec:	d506      	bpl.n	80055fc <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80055ee:	6801      	ldr	r1, [r0, #0]
 80055f0:	4c16      	ldr	r4, [pc, #88]	@ (800564c <UART_AdvFeatureConfig+0xc0>)
 80055f2:	688a      	ldr	r2, [r1, #8]
 80055f4:	4022      	ands	r2, r4
 80055f6:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 80055f8:	4322      	orrs	r2, r4
 80055fa:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80055fc:	065a      	lsls	r2, r3, #25
 80055fe:	d510      	bpl.n	8005622 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005600:	6801      	ldr	r1, [r0, #0]
 8005602:	4d13      	ldr	r5, [pc, #76]	@ (8005650 <UART_AdvFeatureConfig+0xc4>)
 8005604:	684a      	ldr	r2, [r1, #4]
 8005606:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8005608:	402a      	ands	r2, r5
 800560a:	4322      	orrs	r2, r4
 800560c:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800560e:	2280      	movs	r2, #128	@ 0x80
 8005610:	0352      	lsls	r2, r2, #13
 8005612:	4294      	cmp	r4, r2
 8005614:	d105      	bne.n	8005622 <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005616:	684a      	ldr	r2, [r1, #4]
 8005618:	4c0e      	ldr	r4, [pc, #56]	@ (8005654 <UART_AdvFeatureConfig+0xc8>)
 800561a:	4022      	ands	r2, r4
 800561c:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 800561e:	4322      	orrs	r2, r4
 8005620:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005622:	061b      	lsls	r3, r3, #24
 8005624:	d506      	bpl.n	8005634 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005626:	6802      	ldr	r2, [r0, #0]
 8005628:	490b      	ldr	r1, [pc, #44]	@ (8005658 <UART_AdvFeatureConfig+0xcc>)
 800562a:	6853      	ldr	r3, [r2, #4]
 800562c:	400b      	ands	r3, r1
 800562e:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8005630:	430b      	orrs	r3, r1
 8005632:	6053      	str	r3, [r2, #4]
}
 8005634:	bd30      	pop	{r4, r5, pc}
 8005636:	46c0      	nop			@ (mov r8, r8)
 8005638:	fffdffff 	.word	0xfffdffff
 800563c:	fffeffff 	.word	0xfffeffff
 8005640:	fffbffff 	.word	0xfffbffff
 8005644:	ffff7fff 	.word	0xffff7fff
 8005648:	ffffefff 	.word	0xffffefff
 800564c:	ffffdfff 	.word	0xffffdfff
 8005650:	ffefffff 	.word	0xffefffff
 8005654:	ff9fffff 	.word	0xff9fffff
 8005658:	fff7ffff 	.word	0xfff7ffff

0800565c <UART_WaitOnFlagUntilTimeout>:
{
 800565c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800565e:	0004      	movs	r4, r0
 8005660:	000d      	movs	r5, r1
 8005662:	0017      	movs	r7, r2
 8005664:	9300      	str	r3, [sp, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005666:	6822      	ldr	r2, [r4, #0]
 8005668:	69d3      	ldr	r3, [r2, #28]
 800566a:	402b      	ands	r3, r5
 800566c:	1b5b      	subs	r3, r3, r5
 800566e:	4259      	negs	r1, r3
 8005670:	414b      	adcs	r3, r1
 8005672:	42bb      	cmp	r3, r7
 8005674:	d001      	beq.n	800567a <UART_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 8005676:	2000      	movs	r0, #0
 8005678:	e020      	b.n	80056bc <UART_WaitOnFlagUntilTimeout+0x60>
    if (Timeout != HAL_MAX_DELAY)
 800567a:	9b08      	ldr	r3, [sp, #32]
 800567c:	3301      	adds	r3, #1
 800567e:	d0f3      	beq.n	8005668 <UART_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005680:	f7fd fe90 	bl	80033a4 <HAL_GetTick>
 8005684:	9b00      	ldr	r3, [sp, #0]
 8005686:	1ac0      	subs	r0, r0, r3
 8005688:	9b08      	ldr	r3, [sp, #32]
 800568a:	4298      	cmp	r0, r3
 800568c:	d827      	bhi.n	80056de <UART_WaitOnFlagUntilTimeout+0x82>
 800568e:	2b00      	cmp	r3, #0
 8005690:	d025      	beq.n	80056de <UART_WaitOnFlagUntilTimeout+0x82>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005692:	6823      	ldr	r3, [r4, #0]
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	0752      	lsls	r2, r2, #29
 8005698:	d5e5      	bpl.n	8005666 <UART_WaitOnFlagUntilTimeout+0xa>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800569a:	69da      	ldr	r2, [r3, #28]
 800569c:	2608      	movs	r6, #8
 800569e:	0011      	movs	r1, r2
 80056a0:	4031      	ands	r1, r6
 80056a2:	9101      	str	r1, [sp, #4]
 80056a4:	4232      	tst	r2, r6
 80056a6:	d00a      	beq.n	80056be <UART_WaitOnFlagUntilTimeout+0x62>
           UART_EndRxTransfer(huart);
 80056a8:	0020      	movs	r0, r4
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80056aa:	621e      	str	r6, [r3, #32]
           UART_EndRxTransfer(huart);
 80056ac:	f7ff fe5e 	bl	800536c <UART_EndRxTransfer>
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80056b0:	19a3      	adds	r3, r4, r6
 80056b2:	67de      	str	r6, [r3, #124]	@ 0x7c
           __HAL_UNLOCK(huart);
 80056b4:	2300      	movs	r3, #0
           return HAL_ERROR;
 80056b6:	2001      	movs	r0, #1
           __HAL_UNLOCK(huart);
 80056b8:	3478      	adds	r4, #120	@ 0x78
 80056ba:	7023      	strb	r3, [r4, #0]
}
 80056bc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80056be:	2280      	movs	r2, #128	@ 0x80
 80056c0:	69d9      	ldr	r1, [r3, #28]
 80056c2:	0112      	lsls	r2, r2, #4
 80056c4:	4211      	tst	r1, r2
 80056c6:	d0ce      	beq.n	8005666 <UART_WaitOnFlagUntilTimeout+0xa>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056c8:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 80056ca:	0020      	movs	r0, r4
 80056cc:	f7ff fe4e 	bl	800536c <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80056d0:	0023      	movs	r3, r4
 80056d2:	2220      	movs	r2, #32
 80056d4:	3308      	adds	r3, #8
 80056d6:	67da      	str	r2, [r3, #124]	@ 0x7c
          __HAL_UNLOCK(huart);
 80056d8:	9b01      	ldr	r3, [sp, #4]
 80056da:	3478      	adds	r4, #120	@ 0x78
 80056dc:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 80056de:	2003      	movs	r0, #3
 80056e0:	e7ec      	b.n	80056bc <UART_WaitOnFlagUntilTimeout+0x60>
	...

080056e4 <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056e4:	0003      	movs	r3, r0
{
 80056e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056e8:	2500      	movs	r5, #0
{
 80056ea:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056ec:	3308      	adds	r3, #8
 80056ee:	67dd      	str	r5, [r3, #124]	@ 0x7c
  tickstart = HAL_GetTick();
 80056f0:	f7fd fe58 	bl	80033a4 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80056f4:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80056f6:	0006      	movs	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	071b      	lsls	r3, r3, #28
 80056fc:	d51d      	bpl.n	800573a <UART_CheckIdleState+0x56>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056fe:	2180      	movs	r1, #128	@ 0x80
 8005700:	4b26      	ldr	r3, [pc, #152]	@ (800579c <UART_CheckIdleState+0xb8>)
 8005702:	002a      	movs	r2, r5
 8005704:	9300      	str	r3, [sp, #0]
 8005706:	0389      	lsls	r1, r1, #14
 8005708:	0003      	movs	r3, r0
 800570a:	0020      	movs	r0, r4
 800570c:	f7ff ffa6 	bl	800565c <UART_WaitOnFlagUntilTimeout>
 8005710:	42a8      	cmp	r0, r5
 8005712:	d012      	beq.n	800573a <UART_CheckIdleState+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005714:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005718:	2301      	movs	r3, #1
 800571a:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800571e:	2080      	movs	r0, #128	@ 0x80
 8005720:	6822      	ldr	r2, [r4, #0]
 8005722:	6813      	ldr	r3, [r2, #0]
 8005724:	4383      	bics	r3, r0
 8005726:	6013      	str	r3, [r2, #0]
 8005728:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 800572c:	2320      	movs	r3, #32
 800572e:	67e3      	str	r3, [r4, #124]	@ 0x7c
      return HAL_TIMEOUT;
 8005730:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 8005732:	2300      	movs	r3, #0
 8005734:	3478      	adds	r4, #120	@ 0x78
 8005736:	7023      	strb	r3, [r4, #0]
}
 8005738:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800573a:	0025      	movs	r5, r4
 800573c:	cd08      	ldmia	r5!, {r3}
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	075b      	lsls	r3, r3, #29
 8005742:	d523      	bpl.n	800578c <UART_CheckIdleState+0xa8>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005744:	2180      	movs	r1, #128	@ 0x80
 8005746:	4b15      	ldr	r3, [pc, #84]	@ (800579c <UART_CheckIdleState+0xb8>)
 8005748:	2200      	movs	r2, #0
 800574a:	9300      	str	r3, [sp, #0]
 800574c:	0020      	movs	r0, r4
 800574e:	0033      	movs	r3, r6
 8005750:	03c9      	lsls	r1, r1, #15
 8005752:	f7ff ff83 	bl	800565c <UART_WaitOnFlagUntilTimeout>
 8005756:	2800      	cmp	r0, #0
 8005758:	d018      	beq.n	800578c <UART_CheckIdleState+0xa8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800575a:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800575e:	2201      	movs	r2, #1
 8005760:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005764:	6821      	ldr	r1, [r4, #0]
 8005766:	4e0e      	ldr	r6, [pc, #56]	@ (80057a0 <UART_CheckIdleState+0xbc>)
 8005768:	680b      	ldr	r3, [r1, #0]
 800576a:	4033      	ands	r3, r6
 800576c:	600b      	str	r3, [r1, #0]
 800576e:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005772:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005776:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800577a:	6821      	ldr	r1, [r4, #0]
 800577c:	688b      	ldr	r3, [r1, #8]
 800577e:	4393      	bics	r3, r2
 8005780:	608b      	str	r3, [r1, #8]
 8005782:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 8005786:	2320      	movs	r3, #32
 8005788:	67eb      	str	r3, [r5, #124]	@ 0x7c
      return HAL_TIMEOUT;
 800578a:	e7d1      	b.n	8005730 <UART_CheckIdleState+0x4c>
  huart->gState = HAL_UART_STATE_READY;
 800578c:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800578e:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8005790:	67e3      	str	r3, [r4, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005792:	67eb      	str	r3, [r5, #124]	@ 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005794:	6620      	str	r0, [r4, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005796:	6660      	str	r0, [r4, #100]	@ 0x64
  return HAL_OK;
 8005798:	e7cb      	b.n	8005732 <UART_CheckIdleState+0x4e>
 800579a:	46c0      	nop			@ (mov r8, r8)
 800579c:	01ffffff 	.word	0x01ffffff
 80057a0:	fffffedf 	.word	0xfffffedf

080057a4 <HAL_UART_Init>:
{
 80057a4:	b510      	push	{r4, lr}
 80057a6:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 80057a8:	d101      	bne.n	80057ae <HAL_UART_Init+0xa>
    return HAL_ERROR;
 80057aa:	2001      	movs	r0, #1
}
 80057ac:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 80057ae:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d104      	bne.n	80057be <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 80057b4:	0002      	movs	r2, r0
 80057b6:	3278      	adds	r2, #120	@ 0x78
 80057b8:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 80057ba:	f7fd faa1 	bl	8002d00 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80057be:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 80057c0:	2101      	movs	r1, #1
 80057c2:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80057c4:	67e3      	str	r3, [r4, #124]	@ 0x7c
  __HAL_UART_DISABLE(huart);
 80057c6:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80057c8:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 80057ca:	438b      	bics	r3, r1
 80057cc:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80057ce:	f7ff fdfb 	bl	80053c8 <UART_SetConfig>
 80057d2:	2801      	cmp	r0, #1
 80057d4:	d0e9      	beq.n	80057aa <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80057d6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d002      	beq.n	80057e2 <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 80057dc:	0020      	movs	r0, r4
 80057de:	f7ff fed5 	bl	800558c <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057e2:	6823      	ldr	r3, [r4, #0]
 80057e4:	4907      	ldr	r1, [pc, #28]	@ (8005804 <HAL_UART_Init+0x60>)
 80057e6:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 80057e8:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057ea:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057ec:	212a      	movs	r1, #42	@ 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057f0:	689a      	ldr	r2, [r3, #8]
 80057f2:	438a      	bics	r2, r1
 80057f4:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80057f6:	2201      	movs	r2, #1
 80057f8:	6819      	ldr	r1, [r3, #0]
 80057fa:	430a      	orrs	r2, r1
 80057fc:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80057fe:	f7ff ff71 	bl	80056e4 <UART_CheckIdleState>
 8005802:	e7d3      	b.n	80057ac <HAL_UART_Init+0x8>
 8005804:	ffffb7ff 	.word	0xffffb7ff

08005808 <flash_read>:
  * @param  size: is the number of 32bit words to be written.
  * @note   This function todo: MIGHT BE for various uCs.
  */
static void flash_read(int* dest, uint32_t src, uint32_t size) {
#ifdef STM32L031xx
	for (int i = 0; i < size; ++i)
 8005808:	0092      	lsls	r2, r2, #2
 800580a:	1852      	adds	r2, r2, r1
		dest[i] = *( (volatile int*)(src + 4*i) );
 800580c:	1a40      	subs	r0, r0, r1
	for (int i = 0; i < size; ++i)
 800580e:	4291      	cmp	r1, r2
 8005810:	d100      	bne.n	8005814 <flash_read+0xc>
#elif defined(STM32G0B1xx)
	for (int i = 0; i < size; ++i)
		dest[i] = (int)(*(volatile uint64_t *)(src + 8*i)); // Go to next 8 bytes (doubleword)
#else
#endif
}
 8005812:	4770      	bx	lr
		dest[i] = *( (volatile int*)(src + 4*i) );
 8005814:	680b      	ldr	r3, [r1, #0]
 8005816:	5043      	str	r3, [r0, r1]
	for (int i = 0; i < size; ++i)
 8005818:	3104      	adds	r1, #4
 800581a:	e7f8      	b.n	800580e <flash_read+0x6>

0800581c <flash_check_is_empty>:
  * @retval	return 1 if falsh NOT empty, 0 if empty
  * @note   This function todo: MIGHT BE for various uCs.
  */
static int flash_check_is_empty(void) {
#ifdef STM32L031xx
	int temp_buf[EEPROM_SIZE/4] = {0};
 800581c:	2280      	movs	r2, #128	@ 0x80
static int flash_check_is_empty(void) {
 800581e:	b580      	push	{r7, lr}
 8005820:	4f0f      	ldr	r7, [pc, #60]	@ (8005860 <flash_check_is_empty+0x44>)
	int temp_buf[EEPROM_SIZE/4] = {0};
 8005822:	2100      	movs	r1, #0
static int flash_check_is_empty(void) {
 8005824:	44bd      	add	sp, r7
	int temp_buf[EEPROM_SIZE/4] = {0};
 8005826:	00d2      	lsls	r2, r2, #3
 8005828:	4668      	mov	r0, sp
 800582a:	f000 f929 	bl	8005a80 <memset>

	flash_read(temp_buf, USER_DATA_BASEADDR, EEPROM_SIZE/4);
 800582e:	2280      	movs	r2, #128	@ 0x80
 8005830:	4668      	mov	r0, sp
 8005832:	0052      	lsls	r2, r2, #1
 8005834:	490b      	ldr	r1, [pc, #44]	@ (8005864 <flash_check_is_empty+0x48>)
 8005836:	f7ff ffe7 	bl	8005808 <flash_read>

	for (int i = 0; i < EEPROM_SIZE/4; ++i)
 800583a:	2280      	movs	r2, #128	@ 0x80
 800583c:	2300      	movs	r3, #0
 800583e:	0052      	lsls	r2, r2, #1
		if (temp_buf[i] != 0) return 0;	// Break on the first non-zero value
 8005840:	4668      	mov	r0, sp
 8005842:	0099      	lsls	r1, r3, #2
 8005844:	5841      	ldr	r1, [r0, r1]
 8005846:	2900      	cmp	r1, #0
 8005848:	d107      	bne.n	800585a <flash_check_is_empty+0x3e>
	for (int i = 0; i < EEPROM_SIZE/4; ++i)
 800584a:	3301      	adds	r3, #1
 800584c:	4293      	cmp	r3, r2
 800584e:	d1f7      	bne.n	8005840 <flash_check_is_empty+0x24>
		if (temp_buf[i] != 0) return 0;	// Break on the first non-zero value
#else
#endif


	return 1;
 8005850:	2001      	movs	r0, #1
}
 8005852:	2380      	movs	r3, #128	@ 0x80
 8005854:	00db      	lsls	r3, r3, #3
 8005856:	449d      	add	sp, r3
 8005858:	bd80      	pop	{r7, pc}
		if (temp_buf[i] != 0) return 0;	// Break on the first non-zero value
 800585a:	2000      	movs	r0, #0
 800585c:	e7f9      	b.n	8005852 <flash_check_is_empty+0x36>
 800585e:	46c0      	nop			@ (mov r8, r8)
 8005860:	fffffc00 	.word	0xfffffc00
 8005864:	08080000 	.word	0x08080000

08005868 <flash_write>:
static int flash_write(uint32_t dest, int* src, uint32_t size) {
 8005868:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800586a:	0006      	movs	r6, r0
 800586c:	000f      	movs	r7, r1
 800586e:	0014      	movs	r4, r2
	status = HAL_FLASHEx_DATAEEPROM_Unlock();
 8005870:	f7fd ff5e 	bl	8003730 <HAL_FLASHEx_DATAEEPROM_Unlock>
	if (status != HAL_OK) return status;
 8005874:	2800      	cmp	r0, #0
 8005876:	d119      	bne.n	80058ac <flash_write+0x44>
 8005878:	00a4      	lsls	r4, r4, #2
 800587a:	19a3      	adds	r3, r4, r6
 800587c:	0034      	movs	r4, r6
 800587e:	9301      	str	r3, [sp, #4]
	for (int i = 0; i < size; ++i) {
 8005880:	9b01      	ldr	r3, [sp, #4]
 8005882:	42a3      	cmp	r3, r4
 8005884:	d101      	bne.n	800588a <flash_write+0x22>
 8005886:	2500      	movs	r5, #0
 8005888:	e00d      	b.n	80058a6 <flash_write+0x3e>
		status += HAL_FLASHEx_DATAEEPROM_Erase(dest + 4*i);
 800588a:	0020      	movs	r0, r4
 800588c:	f7fd ff72 	bl	8003774 <HAL_FLASHEx_DATAEEPROM_Erase>
		status += HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_WORD, dest + 4*i, src[i]);
 8005890:	1bbb      	subs	r3, r7, r6
		status += HAL_FLASHEx_DATAEEPROM_Erase(dest + 4*i);
 8005892:	0005      	movs	r5, r0
		status += HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_WORD, dest + 4*i, src[i]);
 8005894:	0021      	movs	r1, r4
 8005896:	591a      	ldr	r2, [r3, r4]
 8005898:	2002      	movs	r0, #2
 800589a:	f7fd ff7d 	bl	8003798 <HAL_FLASHEx_DATAEEPROM_Program>
 800589e:	182d      	adds	r5, r5, r0
		if (status != HAL_OK) break;
 80058a0:	3404      	adds	r4, #4
 80058a2:	2d00      	cmp	r5, #0
 80058a4:	d0ec      	beq.n	8005880 <flash_write+0x18>
	status += HAL_FLASHEx_DATAEEPROM_Lock();
 80058a6:	f7fd ff5b 	bl	8003760 <HAL_FLASHEx_DATAEEPROM_Lock>
 80058aa:	1940      	adds	r0, r0, r5
}
 80058ac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

080058b0 <settings_read>:
#endif

void settings_read(Setting_TypeDef *s_ptr) {
	assert_param(s_ptr == NULL);

	int temp_buffer[TEMP_BUF_SIZE] = {0};
 80058b0:	22c8      	movs	r2, #200	@ 0xc8
void settings_read(Setting_TypeDef *s_ptr) {
 80058b2:	b530      	push	{r4, r5, lr}
 80058b4:	4c0e      	ldr	r4, [pc, #56]	@ (80058f0 <settings_read+0x40>)
	int temp_buffer[TEMP_BUF_SIZE] = {0};
 80058b6:	2100      	movs	r1, #0
void settings_read(Setting_TypeDef *s_ptr) {
 80058b8:	44a5      	add	sp, r4
	int temp_buffer[TEMP_BUF_SIZE] = {0};
 80058ba:	0092      	lsls	r2, r2, #2
void settings_read(Setting_TypeDef *s_ptr) {
 80058bc:	0004      	movs	r4, r0
	int temp_buffer[TEMP_BUF_SIZE] = {0};
 80058be:	4668      	mov	r0, sp
 80058c0:	f000 f8de 	bl	8005a80 <memset>

	/* Copy all settings (N x uint32_t) from FLASH to the buffer */
	flash_read(temp_buffer, ADDR_SETTINGS, num_of_settings);
 80058c4:	4b0b      	ldr	r3, [pc, #44]	@ (80058f4 <settings_read+0x44>)
 80058c6:	4668      	mov	r0, sp
 80058c8:	681d      	ldr	r5, [r3, #0]
 80058ca:	490b      	ldr	r1, [pc, #44]	@ (80058f8 <settings_read+0x48>)
 80058cc:	002a      	movs	r2, r5
 80058ce:	f7ff ff9b 	bl	8005808 <flash_read>

	/* Transfer them to the structures */
	for (Settings_IDs id = 0; id < num_of_settings; ++id)
 80058d2:	2300      	movs	r3, #0
 80058d4:	429d      	cmp	r5, r3
 80058d6:	d803      	bhi.n	80058e0 <settings_read+0x30>
		s_ptr->val = temp_buffer[id];
}
 80058d8:	23c9      	movs	r3, #201	@ 0xc9
 80058da:	009b      	lsls	r3, r3, #2
 80058dc:	449d      	add	sp, r3
 80058de:	bd30      	pop	{r4, r5, pc}
		s_ptr->val = temp_buffer[id];
 80058e0:	4669      	mov	r1, sp
 80058e2:	009a      	lsls	r2, r3, #2
 80058e4:	588a      	ldr	r2, [r1, r2]
	for (Settings_IDs id = 0; id < num_of_settings; ++id)
 80058e6:	3301      	adds	r3, #1
		s_ptr->val = temp_buffer[id];
 80058e8:	6062      	str	r2, [r4, #4]
	for (Settings_IDs id = 0; id < num_of_settings; ++id)
 80058ea:	b2db      	uxtb	r3, r3
 80058ec:	e7f2      	b.n	80058d4 <settings_read+0x24>
 80058ee:	46c0      	nop			@ (mov r8, r8)
 80058f0:	fffffcdc 	.word	0xfffffcdc
 80058f4:	2000156c 	.word	0x2000156c
 80058f8:	08080010 	.word	0x08080010

080058fc <settings_write>:

int settings_write(Setting_TypeDef *s_ptr) {
	assert_param(s_ptr == NULL);

	int	status = 0;
	int temp_buffer[TEMP_BUF_SIZE] = {0};
 80058fc:	22c8      	movs	r2, #200	@ 0xc8
int settings_write(Setting_TypeDef *s_ptr) {
 80058fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005900:	4c1a      	ldr	r4, [pc, #104]	@ (800596c <settings_write+0x70>)
 8005902:	0005      	movs	r5, r0
 8005904:	44a5      	add	sp, r4
	int temp_buffer[TEMP_BUF_SIZE] = {0};
 8005906:	2100      	movs	r1, #0
 8005908:	0092      	lsls	r2, r2, #2
 800590a:	4668      	mov	r0, sp
 800590c:	f000 f8b8 	bl	8005a80 <memset>

	/* Copy values to the temp buffer */
	for (int i = 0; i < num_of_settings; ++i) {
 8005910:	2200      	movs	r2, #0
 8005912:	4e17      	ldr	r6, [pc, #92]	@ (8005970 <settings_write+0x74>)
		temp_buffer[i] = s_ptr[i].val;
 8005914:	1d29      	adds	r1, r5, #4
	for (int i = 0; i < num_of_settings; ++i) {
 8005916:	6833      	ldr	r3, [r6, #0]
 8005918:	429a      	cmp	r2, r3
 800591a:	d114      	bne.n	8005946 <settings_write+0x4a>
	}

	/* Write from temp buffer to the FLASH memory */
	status = flash_write(ADDR_SETTINGS, temp_buffer, num_of_settings);
 800591c:	4669      	mov	r1, sp
 800591e:	4815      	ldr	r0, [pc, #84]	@ (8005974 <settings_write+0x78>)
 8005920:	f7ff ffa2 	bl	8005868 <flash_write>
 8005924:	1e04      	subs	r4, r0, #0
	if(status != 0) return status;
 8005926:	d109      	bne.n	800593c <settings_write+0x40>
	/*
	 * Check Read:
	 * Copy from memory to the temp again
	 * and compare with values in structures
	 */
	flash_read(temp_buffer, ADDR_SETTINGS, num_of_settings);
 8005928:	6836      	ldr	r6, [r6, #0]
 800592a:	4668      	mov	r0, sp
 800592c:	0032      	movs	r2, r6
 800592e:	4911      	ldr	r1, [pc, #68]	@ (8005974 <settings_write+0x78>)
 8005930:	f7ff ff6a 	bl	8005808 <flash_read>

	for (int i = 0; i < num_of_settings; ++i) {
 8005934:	0023      	movs	r3, r4
		if (temp_buffer[i] != s_ptr[i].val) ++status;
 8005936:	3504      	adds	r5, #4
	for (int i = 0; i < num_of_settings; ++i) {
 8005938:	42b3      	cmp	r3, r6
 800593a:	d10b      	bne.n	8005954 <settings_write+0x58>
	}

	/* If both data match, then status == 0 (everything is ok, return 0) */
	return status;
}
 800593c:	0020      	movs	r0, r4
 800593e:	23c9      	movs	r3, #201	@ 0xc9
 8005940:	009b      	lsls	r3, r3, #2
 8005942:	449d      	add	sp, r3
 8005944:	bdf0      	pop	{r4, r5, r6, r7, pc}
		temp_buffer[i] = s_ptr[i].val;
 8005946:	466f      	mov	r7, sp
 8005948:	0154      	lsls	r4, r2, #5
 800594a:	590c      	ldr	r4, [r1, r4]
 800594c:	0090      	lsls	r0, r2, #2
 800594e:	503c      	str	r4, [r7, r0]
	for (int i = 0; i < num_of_settings; ++i) {
 8005950:	3201      	adds	r2, #1
 8005952:	e7e1      	b.n	8005918 <settings_write+0x1c>
		if (temp_buffer[i] != s_ptr[i].val) ++status;
 8005954:	4668      	mov	r0, sp
 8005956:	009a      	lsls	r2, r3, #2
 8005958:	0159      	lsls	r1, r3, #5
 800595a:	5869      	ldr	r1, [r5, r1]
 800595c:	5882      	ldr	r2, [r0, r2]
	for (int i = 0; i < num_of_settings; ++i) {
 800595e:	3301      	adds	r3, #1
		if (temp_buffer[i] != s_ptr[i].val) ++status;
 8005960:	1a52      	subs	r2, r2, r1
 8005962:	1e51      	subs	r1, r2, #1
 8005964:	418a      	sbcs	r2, r1
 8005966:	18a4      	adds	r4, r4, r2
	for (int i = 0; i < num_of_settings; ++i) {
 8005968:	e7e6      	b.n	8005938 <settings_write+0x3c>
 800596a:	46c0      	nop			@ (mov r8, r8)
 800596c:	fffffcdc 	.word	0xfffffcdc
 8005970:	2000156c 	.word	0x2000156c
 8005974:	08080010 	.word	0x08080010

08005978 <settings_value_reset_all>:
 * @param  *s_ptr:
 * @retval returns -2 if ID is not found; -1 if s_ptr is NULL; 0 if OK.
 */
void settings_value_reset_all(Setting_TypeDef *s_ptr) {
	assert_param(s_ptr == NULL);
	for (int i = 0; i < NUM_OF_SETTINGS; ++i)
 8005978:	1d03      	adds	r3, r0, #4
 800597a:	30a4      	adds	r0, #164	@ 0xa4
		s_ptr[i].val = s_ptr[i].def;
 800597c:	685a      	ldr	r2, [r3, #4]
 800597e:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < NUM_OF_SETTINGS; ++i)
 8005980:	3320      	adds	r3, #32
 8005982:	4283      	cmp	r3, r0
 8005984:	d1fa      	bne.n	800597c <settings_value_reset_all+0x4>
}
 8005986:	4770      	bx	lr

08005988 <settings_init>:
Settings_Status settings_init(Setting_TypeDef *s_ptr, uint16_t number_of_settings) {
 8005988:	b5f0      	push	{r4, r5, r6, r7, lr}
	num_of_settings = number_of_settings;
 800598a:	4f37      	ldr	r7, [pc, #220]	@ (8005a68 <settings_init+0xe0>)
Settings_Status settings_init(Setting_TypeDef *s_ptr, uint16_t number_of_settings) {
 800598c:	b089      	sub	sp, #36	@ 0x24
 800598e:	0004      	movs	r4, r0
 8005990:	9101      	str	r1, [sp, #4]
	num_of_settings = number_of_settings;
 8005992:	6039      	str	r1, [r7, #0]
	volatile uint8_t is_empty = flash_check_is_empty();
 8005994:	f7ff ff42 	bl	800581c <flash_check_is_empty>
 8005998:	ab02      	add	r3, sp, #8
 800599a:	b2c0      	uxtb	r0, r0
 800599c:	7098      	strb	r0, [r3, #2]
 800599e:	3302      	adds	r3, #2
	if (is_empty) {
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	b2dd      	uxtb	r5, r3
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d15a      	bne.n	8005a5e <settings_init+0xd6>
	return *( (volatile uint32_t*)ADDR_DEVICE_ID );
 80059a8:	4b30      	ldr	r3, [pc, #192]	@ (8005a6c <settings_init+0xe4>)
 80059aa:	681b      	ldr	r3, [r3, #0]
		volatile uint32_t id 	= device_id_read	();
 80059ac:	9303      	str	r3, [sp, #12]
    return *( (volatile uint32_t*)ADDR_DEVICE_FW );
 80059ae:	4b30      	ldr	r3, [pc, #192]	@ (8005a70 <settings_init+0xe8>)
 80059b0:	681b      	ldr	r3, [r3, #0]
		volatile uint32_t fw 	= device_fw_read	();
 80059b2:	9304      	str	r3, [sp, #16]
	return *( (volatile uint32_t*)ADDR_SETTINGS_SIZE );
 80059b4:	4b2f      	ldr	r3, [pc, #188]	@ (8005a74 <settings_init+0xec>)
 80059b6:	681b      	ldr	r3, [r3, #0]
		volatile uint32_t size 	= settings_size_read();
 80059b8:	9305      	str	r3, [sp, #20]
		if (id == DEVICE_ID && size == num_of_settings && fw >= DEVICE_FW_MIN) {
 80059ba:	9b03      	ldr	r3, [sp, #12]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d150      	bne.n	8005a62 <settings_init+0xda>
 80059c0:	9b05      	ldr	r3, [sp, #20]
 80059c2:	9a01      	ldr	r2, [sp, #4]
			status |= (ID_WRONG | SIZE_WRONG);
 80059c4:	2644      	movs	r6, #68	@ 0x44
		if (id == DEVICE_ID && size == num_of_settings && fw >= DEVICE_FW_MIN) {
 80059c6:	429a      	cmp	r2, r3
 80059c8:	d116      	bne.n	80059f8 <settings_init+0x70>
 80059ca:	2380      	movs	r3, #128	@ 0x80
 80059cc:	9a04      	ldr	r2, [sp, #16]
 80059ce:	045b      	lsls	r3, r3, #17
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d311      	bcc.n	80059f8 <settings_init+0x70>
			settings_read(s_ptr);
 80059d4:	0020      	movs	r0, r4
 80059d6:	f7ff ff6b 	bl	80058b0 <settings_read>
	for (Settings_IDs id = 0; id < num_of_settings; ++id) {
 80059da:	002b      	movs	r3, r5
 80059dc:	9a01      	ldr	r2, [sp, #4]
 80059de:	429a      	cmp	r2, r3
 80059e0:	d82f      	bhi.n	8005a42 <settings_init+0xba>
	if(non_valid_values > 0) return 0;
 80059e2:	426b      	negs	r3, r5
 80059e4:	415d      	adcs	r5, r3
	Settings_Status status 					= 0;
 80059e6:	2600      	movs	r6, #0
			volatile uint8_t is_valid = settings_check_is_valid(s_ptr);
 80059e8:	ab02      	add	r3, sp, #8
	if(non_valid_values > 0) return 0;
 80059ea:	b2ed      	uxtb	r5, r5
			volatile uint8_t is_valid = settings_check_is_valid(s_ptr);
 80059ec:	70dd      	strb	r5, [r3, #3]
 80059ee:	3303      	adds	r3, #3
			if (!is_valid) {
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	42b3      	cmp	r3, r6
 80059f4:	d11e      	bne.n	8005a34 <settings_init+0xac>
				status |= OUT_OF_RANGE;
 80059f6:	3680      	adds	r6, #128	@ 0x80
		settings_value_reset_all(s_ptr);
 80059f8:	0020      	movs	r0, r4
 80059fa:	f7ff ffbd 	bl	8005978 <settings_value_reset_all>
	int data[2] = {((ID1 << 16) | ID2), ((FW1 << 24) | (FW2 << 16) | FW3)};
 80059fe:	2300      	movs	r3, #0
    return flash_write(ADDR_DEVICE_ID, data, 2);
 8005a00:	2202      	movs	r2, #2
	int data[2] = {((ID1 << 16) | ID2), ((FW1 << 24) | (FW2 << 16) | FW3)};
 8005a02:	9306      	str	r3, [sp, #24]
    return flash_write(ADDR_DEVICE_ID, data, 2);
 8005a04:	a906      	add	r1, sp, #24
	int data[2] = {((ID1 << 16) | ID2), ((FW1 << 24) | (FW2 << 16) | FW3)};
 8005a06:	3305      	adds	r3, #5
    return flash_write(ADDR_DEVICE_ID, data, 2);
 8005a08:	4818      	ldr	r0, [pc, #96]	@ (8005a6c <settings_init+0xe4>)
	int data[2] = {((ID1 << 16) | ID2), ((FW1 << 24) | (FW2 << 16) | FW3)};
 8005a0a:	9307      	str	r3, [sp, #28]
    return flash_write(ADDR_DEVICE_ID, data, 2);
 8005a0c:	f7ff ff2c 	bl	8005868 <flash_write>
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	0005      	movs	r5, r0
	return flash_write(ADDR_SETTINGS_SIZE, &size, 1);
 8005a14:	2201      	movs	r2, #1
 8005a16:	a906      	add	r1, sp, #24
 8005a18:	4816      	ldr	r0, [pc, #88]	@ (8005a74 <settings_init+0xec>)
 8005a1a:	9306      	str	r3, [sp, #24]
 8005a1c:	f7ff ff24 	bl	8005868 <flash_write>
		res += settings_size_write	(num_of_settings); // What if size will overlay RTC values?
 8005a20:	1945      	adds	r5, r0, r5
		res += settings_write		(s_ptr);
 8005a22:	0020      	movs	r0, r4
 8005a24:	f7ff ff6a 	bl	80058fc <settings_write>
 8005a28:	182d      	adds	r5, r5, r0
		if (res > 0) status |= WRITE_FAIL;
 8005a2a:	2d00      	cmp	r5, #0
 8005a2c:	dd02      	ble.n	8005a34 <settings_init+0xac>
 8005a2e:	2380      	movs	r3, #128	@ 0x80
 8005a30:	005b      	lsls	r3, r3, #1
 8005a32:	431e      	orrs	r6, r3
};
 8005a34:	0030      	movs	r0, r6
		previous_running_time = *( (volatile uint32_t*)ADDR_DEVICE_RT );
 8005a36:	4b10      	ldr	r3, [pc, #64]	@ (8005a78 <settings_init+0xf0>)
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	4b10      	ldr	r3, [pc, #64]	@ (8005a7c <settings_init+0xf4>)
 8005a3c:	601a      	str	r2, [r3, #0]
};
 8005a3e:	b009      	add	sp, #36	@ 0x24
 8005a40:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(s_ptr->val > s_ptr->max || s_ptr->val < s_ptr->min) {
 8005a42:	6862      	ldr	r2, [r4, #4]
 8005a44:	6961      	ldr	r1, [r4, #20]
 8005a46:	428a      	cmp	r2, r1
 8005a48:	dc02      	bgt.n	8005a50 <settings_init+0xc8>
 8005a4a:	6921      	ldr	r1, [r4, #16]
 8005a4c:	428a      	cmp	r2, r1
 8005a4e:	da03      	bge.n	8005a58 <settings_init+0xd0>
			s_ptr->val = s_ptr->def;
 8005a50:	68a2      	ldr	r2, [r4, #8]
			++non_valid_values;
 8005a52:	3501      	adds	r5, #1
			s_ptr->val = s_ptr->def;
 8005a54:	6062      	str	r2, [r4, #4]
			++non_valid_values;
 8005a56:	b2ed      	uxtb	r5, r5
	for (Settings_IDs id = 0; id < num_of_settings; ++id) {
 8005a58:	3301      	adds	r3, #1
 8005a5a:	b2db      	uxtb	r3, r3
 8005a5c:	e7be      	b.n	80059dc <settings_init+0x54>
		status |= FLASH_EMPTY;
 8005a5e:	2602      	movs	r6, #2
 8005a60:	e7ca      	b.n	80059f8 <settings_init+0x70>
			status |= (ID_WRONG | SIZE_WRONG);
 8005a62:	2644      	movs	r6, #68	@ 0x44
 8005a64:	e7c8      	b.n	80059f8 <settings_init+0x70>
 8005a66:	46c0      	nop			@ (mov r8, r8)
 8005a68:	2000156c 	.word	0x2000156c
 8005a6c:	08080000 	.word	0x08080000
 8005a70:	08080004 	.word	0x08080004
 8005a74:	0808000c 	.word	0x0808000c
 8005a78:	08080008 	.word	0x08080008
 8005a7c:	20001568 	.word	0x20001568

08005a80 <memset>:
 8005a80:	0003      	movs	r3, r0
 8005a82:	1882      	adds	r2, r0, r2
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d100      	bne.n	8005a8a <memset+0xa>
 8005a88:	4770      	bx	lr
 8005a8a:	7019      	strb	r1, [r3, #0]
 8005a8c:	3301      	adds	r3, #1
 8005a8e:	e7f9      	b.n	8005a84 <memset+0x4>

08005a90 <__errno>:
 8005a90:	4b01      	ldr	r3, [pc, #4]	@ (8005a98 <__errno+0x8>)
 8005a92:	6818      	ldr	r0, [r3, #0]
 8005a94:	4770      	bx	lr
 8005a96:	46c0      	nop			@ (mov r8, r8)
 8005a98:	20000860 	.word	0x20000860

08005a9c <__libc_init_array>:
 8005a9c:	b570      	push	{r4, r5, r6, lr}
 8005a9e:	2600      	movs	r6, #0
 8005aa0:	4c0c      	ldr	r4, [pc, #48]	@ (8005ad4 <__libc_init_array+0x38>)
 8005aa2:	4d0d      	ldr	r5, [pc, #52]	@ (8005ad8 <__libc_init_array+0x3c>)
 8005aa4:	1b64      	subs	r4, r4, r5
 8005aa6:	10a4      	asrs	r4, r4, #2
 8005aa8:	42a6      	cmp	r6, r4
 8005aaa:	d109      	bne.n	8005ac0 <__libc_init_array+0x24>
 8005aac:	2600      	movs	r6, #0
 8005aae:	f000 fccf 	bl	8006450 <_init>
 8005ab2:	4c0a      	ldr	r4, [pc, #40]	@ (8005adc <__libc_init_array+0x40>)
 8005ab4:	4d0a      	ldr	r5, [pc, #40]	@ (8005ae0 <__libc_init_array+0x44>)
 8005ab6:	1b64      	subs	r4, r4, r5
 8005ab8:	10a4      	asrs	r4, r4, #2
 8005aba:	42a6      	cmp	r6, r4
 8005abc:	d105      	bne.n	8005aca <__libc_init_array+0x2e>
 8005abe:	bd70      	pop	{r4, r5, r6, pc}
 8005ac0:	00b3      	lsls	r3, r6, #2
 8005ac2:	58eb      	ldr	r3, [r5, r3]
 8005ac4:	4798      	blx	r3
 8005ac6:	3601      	adds	r6, #1
 8005ac8:	e7ee      	b.n	8005aa8 <__libc_init_array+0xc>
 8005aca:	00b3      	lsls	r3, r6, #2
 8005acc:	58eb      	ldr	r3, [r5, r3]
 8005ace:	4798      	blx	r3
 8005ad0:	3601      	adds	r6, #1
 8005ad2:	e7f2      	b.n	8005aba <__libc_init_array+0x1e>
 8005ad4:	080065dc 	.word	0x080065dc
 8005ad8:	080065dc 	.word	0x080065dc
 8005adc:	080065e0 	.word	0x080065e0
 8005ae0:	080065dc 	.word	0x080065dc

08005ae4 <strcpy>:
 8005ae4:	0003      	movs	r3, r0
 8005ae6:	780a      	ldrb	r2, [r1, #0]
 8005ae8:	3101      	adds	r1, #1
 8005aea:	701a      	strb	r2, [r3, #0]
 8005aec:	3301      	adds	r3, #1
 8005aee:	2a00      	cmp	r2, #0
 8005af0:	d1f9      	bne.n	8005ae6 <strcpy+0x2>
 8005af2:	4770      	bx	lr

08005af4 <powf>:
 8005af4:	b570      	push	{r4, r5, r6, lr}
 8005af6:	1c0c      	adds	r4, r1, #0
 8005af8:	1c06      	adds	r6, r0, #0
 8005afa:	f000 f859 	bl	8005bb0 <__ieee754_powf>
 8005afe:	1c21      	adds	r1, r4, #0
 8005b00:	1c05      	adds	r5, r0, #0
 8005b02:	1c20      	adds	r0, r4, #0
 8005b04:	f7fb fc4a 	bl	800139c <__aeabi_fcmpun>
 8005b08:	2800      	cmp	r0, #0
 8005b0a:	d133      	bne.n	8005b74 <powf+0x80>
 8005b0c:	2100      	movs	r1, #0
 8005b0e:	1c30      	adds	r0, r6, #0
 8005b10:	f7fa fc92 	bl	8000438 <__aeabi_fcmpeq>
 8005b14:	2800      	cmp	r0, #0
 8005b16:	d014      	beq.n	8005b42 <powf+0x4e>
 8005b18:	2100      	movs	r1, #0
 8005b1a:	1c20      	adds	r0, r4, #0
 8005b1c:	f7fa fc8c 	bl	8000438 <__aeabi_fcmpeq>
 8005b20:	2800      	cmp	r0, #0
 8005b22:	d138      	bne.n	8005b96 <powf+0xa2>
 8005b24:	1c20      	adds	r0, r4, #0
 8005b26:	f000 f839 	bl	8005b9c <finitef>
 8005b2a:	2800      	cmp	r0, #0
 8005b2c:	d022      	beq.n	8005b74 <powf+0x80>
 8005b2e:	2100      	movs	r1, #0
 8005b30:	1c20      	adds	r0, r4, #0
 8005b32:	f7fa fc87 	bl	8000444 <__aeabi_fcmplt>
 8005b36:	2800      	cmp	r0, #0
 8005b38:	d01c      	beq.n	8005b74 <powf+0x80>
 8005b3a:	f7ff ffa9 	bl	8005a90 <__errno>
 8005b3e:	2322      	movs	r3, #34	@ 0x22
 8005b40:	e017      	b.n	8005b72 <powf+0x7e>
 8005b42:	1c28      	adds	r0, r5, #0
 8005b44:	f000 f82a 	bl	8005b9c <finitef>
 8005b48:	2800      	cmp	r0, #0
 8005b4a:	d115      	bne.n	8005b78 <powf+0x84>
 8005b4c:	1c30      	adds	r0, r6, #0
 8005b4e:	f000 f825 	bl	8005b9c <finitef>
 8005b52:	2800      	cmp	r0, #0
 8005b54:	d010      	beq.n	8005b78 <powf+0x84>
 8005b56:	1c20      	adds	r0, r4, #0
 8005b58:	f000 f820 	bl	8005b9c <finitef>
 8005b5c:	2800      	cmp	r0, #0
 8005b5e:	d00b      	beq.n	8005b78 <powf+0x84>
 8005b60:	1c29      	adds	r1, r5, #0
 8005b62:	1c28      	adds	r0, r5, #0
 8005b64:	f7fb fc1a 	bl	800139c <__aeabi_fcmpun>
 8005b68:	2800      	cmp	r0, #0
 8005b6a:	d0e6      	beq.n	8005b3a <powf+0x46>
 8005b6c:	f7ff ff90 	bl	8005a90 <__errno>
 8005b70:	2321      	movs	r3, #33	@ 0x21
 8005b72:	6003      	str	r3, [r0, #0]
 8005b74:	1c28      	adds	r0, r5, #0
 8005b76:	bd70      	pop	{r4, r5, r6, pc}
 8005b78:	2100      	movs	r1, #0
 8005b7a:	1c28      	adds	r0, r5, #0
 8005b7c:	f7fa fc5c 	bl	8000438 <__aeabi_fcmpeq>
 8005b80:	2800      	cmp	r0, #0
 8005b82:	d0f7      	beq.n	8005b74 <powf+0x80>
 8005b84:	1c30      	adds	r0, r6, #0
 8005b86:	f000 f809 	bl	8005b9c <finitef>
 8005b8a:	2800      	cmp	r0, #0
 8005b8c:	d0f2      	beq.n	8005b74 <powf+0x80>
 8005b8e:	1c20      	adds	r0, r4, #0
 8005b90:	f000 f804 	bl	8005b9c <finitef>
 8005b94:	e7cf      	b.n	8005b36 <powf+0x42>
 8005b96:	25fe      	movs	r5, #254	@ 0xfe
 8005b98:	05ad      	lsls	r5, r5, #22
 8005b9a:	e7eb      	b.n	8005b74 <powf+0x80>

08005b9c <finitef>:
 8005b9c:	22ff      	movs	r2, #255	@ 0xff
 8005b9e:	0043      	lsls	r3, r0, #1
 8005ba0:	085b      	lsrs	r3, r3, #1
 8005ba2:	2001      	movs	r0, #1
 8005ba4:	05d2      	lsls	r2, r2, #23
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	db00      	blt.n	8005bac <finitef+0x10>
 8005baa:	2000      	movs	r0, #0
 8005bac:	4770      	bx	lr
	...

08005bb0 <__ieee754_powf>:
 8005bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bb2:	b08b      	sub	sp, #44	@ 0x2c
 8005bb4:	9101      	str	r1, [sp, #4]
 8005bb6:	9f01      	ldr	r7, [sp, #4]
 8005bb8:	1c04      	adds	r4, r0, #0
 8005bba:	007b      	lsls	r3, r7, #1
 8005bbc:	9004      	str	r0, [sp, #16]
 8005bbe:	085e      	lsrs	r6, r3, #1
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d10d      	bne.n	8005be0 <__ieee754_powf+0x30>
 8005bc4:	2380      	movs	r3, #128	@ 0x80
 8005bc6:	03db      	lsls	r3, r3, #15
 8005bc8:	4043      	eors	r3, r0
 8005bca:	4a96      	ldr	r2, [pc, #600]	@ (8005e24 <__ieee754_powf+0x274>)
 8005bcc:	005b      	lsls	r3, r3, #1
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d800      	bhi.n	8005bd4 <__ieee754_powf+0x24>
 8005bd2:	e310      	b.n	80061f6 <__ieee754_powf+0x646>
 8005bd4:	9901      	ldr	r1, [sp, #4]
 8005bd6:	1c20      	adds	r0, r4, #0
 8005bd8:	f7fa fd8e 	bl	80006f8 <__aeabi_fadd>
 8005bdc:	b00b      	add	sp, #44	@ 0x2c
 8005bde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005be0:	23ff      	movs	r3, #255	@ 0xff
 8005be2:	22fe      	movs	r2, #254	@ 0xfe
 8005be4:	0045      	lsls	r5, r0, #1
 8005be6:	086d      	lsrs	r5, r5, #1
 8005be8:	05db      	lsls	r3, r3, #23
 8005bea:	0592      	lsls	r2, r2, #22
 8005bec:	429d      	cmp	r5, r3
 8005bee:	d801      	bhi.n	8005bf4 <__ieee754_powf+0x44>
 8005bf0:	429e      	cmp	r6, r3
 8005bf2:	d906      	bls.n	8005c02 <__ieee754_powf+0x52>
 8005bf4:	4294      	cmp	r4, r2
 8005bf6:	d1ed      	bne.n	8005bd4 <__ieee754_powf+0x24>
 8005bf8:	2380      	movs	r3, #128	@ 0x80
 8005bfa:	9a01      	ldr	r2, [sp, #4]
 8005bfc:	03db      	lsls	r3, r3, #15
 8005bfe:	4053      	eors	r3, r2
 8005c00:	e7e3      	b.n	8005bca <__ieee754_powf+0x1a>
 8005c02:	2100      	movs	r1, #0
 8005c04:	9102      	str	r1, [sp, #8]
 8005c06:	2800      	cmp	r0, #0
 8005c08:	da22      	bge.n	8005c50 <__ieee754_powf+0xa0>
 8005c0a:	2197      	movs	r1, #151	@ 0x97
 8005c0c:	05c9      	lsls	r1, r1, #23
 8005c0e:	428e      	cmp	r6, r1
 8005c10:	d21c      	bcs.n	8005c4c <__ieee754_powf+0x9c>
 8005c12:	4296      	cmp	r6, r2
 8005c14:	d332      	bcc.n	8005c7c <__ieee754_powf+0xcc>
 8005c16:	2296      	movs	r2, #150	@ 0x96
 8005c18:	15f3      	asrs	r3, r6, #23
 8005c1a:	1ad2      	subs	r2, r2, r3
 8005c1c:	0033      	movs	r3, r6
 8005c1e:	4113      	asrs	r3, r2
 8005c20:	0019      	movs	r1, r3
 8005c22:	4091      	lsls	r1, r2
 8005c24:	42b1      	cmp	r1, r6
 8005c26:	d104      	bne.n	8005c32 <__ieee754_powf+0x82>
 8005c28:	2201      	movs	r2, #1
 8005c2a:	4013      	ands	r3, r2
 8005c2c:	1892      	adds	r2, r2, r2
 8005c2e:	1ad3      	subs	r3, r2, r3
 8005c30:	9302      	str	r3, [sp, #8]
 8005c32:	23fe      	movs	r3, #254	@ 0xfe
 8005c34:	059b      	lsls	r3, r3, #22
 8005c36:	429e      	cmp	r6, r3
 8005c38:	d120      	bne.n	8005c7c <__ieee754_powf+0xcc>
 8005c3a:	1c20      	adds	r0, r4, #0
 8005c3c:	2f00      	cmp	r7, #0
 8005c3e:	dacd      	bge.n	8005bdc <__ieee754_powf+0x2c>
 8005c40:	20fe      	movs	r0, #254	@ 0xfe
 8005c42:	1c21      	adds	r1, r4, #0
 8005c44:	0580      	lsls	r0, r0, #22
 8005c46:	f7fa fee1 	bl	8000a0c <__aeabi_fdiv>
 8005c4a:	e7c7      	b.n	8005bdc <__ieee754_powf+0x2c>
 8005c4c:	2202      	movs	r2, #2
 8005c4e:	9202      	str	r2, [sp, #8]
 8005c50:	429e      	cmp	r6, r3
 8005c52:	d1ee      	bne.n	8005c32 <__ieee754_powf+0x82>
 8005c54:	23fe      	movs	r3, #254	@ 0xfe
 8005c56:	059b      	lsls	r3, r3, #22
 8005c58:	429d      	cmp	r5, r3
 8005c5a:	d100      	bne.n	8005c5e <__ieee754_powf+0xae>
 8005c5c:	e2cb      	b.n	80061f6 <__ieee754_powf+0x646>
 8005c5e:	d904      	bls.n	8005c6a <__ieee754_powf+0xba>
 8005c60:	9801      	ldr	r0, [sp, #4]
 8005c62:	2f00      	cmp	r7, #0
 8005c64:	daba      	bge.n	8005bdc <__ieee754_powf+0x2c>
 8005c66:	2000      	movs	r0, #0
 8005c68:	e7b8      	b.n	8005bdc <__ieee754_powf+0x2c>
 8005c6a:	2f00      	cmp	r7, #0
 8005c6c:	dafb      	bge.n	8005c66 <__ieee754_powf+0xb6>
 8005c6e:	2280      	movs	r2, #128	@ 0x80
 8005c70:	0612      	lsls	r2, r2, #24
 8005c72:	4694      	mov	ip, r2
 8005c74:	9b01      	ldr	r3, [sp, #4]
 8005c76:	4463      	add	r3, ip
 8005c78:	0018      	movs	r0, r3
 8005c7a:	e7af      	b.n	8005bdc <__ieee754_powf+0x2c>
 8005c7c:	2380      	movs	r3, #128	@ 0x80
 8005c7e:	05db      	lsls	r3, r3, #23
 8005c80:	429f      	cmp	r7, r3
 8005c82:	d104      	bne.n	8005c8e <__ieee754_powf+0xde>
 8005c84:	1c21      	adds	r1, r4, #0
 8005c86:	1c20      	adds	r0, r4, #0
 8005c88:	f7fb f8a6 	bl	8000dd8 <__aeabi_fmul>
 8005c8c:	e7a6      	b.n	8005bdc <__ieee754_powf+0x2c>
 8005c8e:	23fc      	movs	r3, #252	@ 0xfc
 8005c90:	059b      	lsls	r3, r3, #22
 8005c92:	429f      	cmp	r7, r3
 8005c94:	d105      	bne.n	8005ca2 <__ieee754_powf+0xf2>
 8005c96:	2c00      	cmp	r4, #0
 8005c98:	db03      	blt.n	8005ca2 <__ieee754_powf+0xf2>
 8005c9a:	1c20      	adds	r0, r4, #0
 8005c9c:	f000 fb60 	bl	8006360 <__ieee754_sqrtf>
 8005ca0:	e79c      	b.n	8005bdc <__ieee754_powf+0x2c>
 8005ca2:	1c20      	adds	r0, r4, #0
 8005ca4:	9503      	str	r5, [sp, #12]
 8005ca6:	f000 fadf 	bl	8006268 <fabsf>
 8005caa:	22fe      	movs	r2, #254	@ 0xfe
 8005cac:	00a3      	lsls	r3, r4, #2
 8005cae:	089b      	lsrs	r3, r3, #2
 8005cb0:	0592      	lsls	r2, r2, #22
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d001      	beq.n	8005cba <__ieee754_powf+0x10a>
 8005cb6:	2d00      	cmp	r5, #0
 8005cb8:	d11c      	bne.n	8005cf4 <__ieee754_powf+0x144>
 8005cba:	2f00      	cmp	r7, #0
 8005cbc:	da04      	bge.n	8005cc8 <__ieee754_powf+0x118>
 8005cbe:	1c01      	adds	r1, r0, #0
 8005cc0:	20fe      	movs	r0, #254	@ 0xfe
 8005cc2:	0580      	lsls	r0, r0, #22
 8005cc4:	f7fa fea2 	bl	8000a0c <__aeabi_fdiv>
 8005cc8:	9b04      	ldr	r3, [sp, #16]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	db00      	blt.n	8005cd0 <__ieee754_powf+0x120>
 8005cce:	e785      	b.n	8005bdc <__ieee754_powf+0x2c>
 8005cd0:	4b55      	ldr	r3, [pc, #340]	@ (8005e28 <__ieee754_powf+0x278>)
 8005cd2:	18ed      	adds	r5, r5, r3
 8005cd4:	9b02      	ldr	r3, [sp, #8]
 8005cd6:	431d      	orrs	r5, r3
 8005cd8:	d104      	bne.n	8005ce4 <__ieee754_powf+0x134>
 8005cda:	1c01      	adds	r1, r0, #0
 8005cdc:	f7fb f9ba 	bl	8001054 <__aeabi_fsub>
 8005ce0:	1c01      	adds	r1, r0, #0
 8005ce2:	e7b0      	b.n	8005c46 <__ieee754_powf+0x96>
 8005ce4:	9b02      	ldr	r3, [sp, #8]
 8005ce6:	2b01      	cmp	r3, #1
 8005ce8:	d000      	beq.n	8005cec <__ieee754_powf+0x13c>
 8005cea:	e777      	b.n	8005bdc <__ieee754_powf+0x2c>
 8005cec:	2380      	movs	r3, #128	@ 0x80
 8005cee:	061b      	lsls	r3, r3, #24
 8005cf0:	18c0      	adds	r0, r0, r3
 8005cf2:	e773      	b.n	8005bdc <__ieee754_powf+0x2c>
 8005cf4:	0fe3      	lsrs	r3, r4, #31
 8005cf6:	3b01      	subs	r3, #1
 8005cf8:	9305      	str	r3, [sp, #20]
 8005cfa:	9a05      	ldr	r2, [sp, #20]
 8005cfc:	9b02      	ldr	r3, [sp, #8]
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	d102      	bne.n	8005d08 <__ieee754_powf+0x158>
 8005d02:	1c21      	adds	r1, r4, #0
 8005d04:	1c20      	adds	r0, r4, #0
 8005d06:	e7e9      	b.n	8005cdc <__ieee754_powf+0x12c>
 8005d08:	239a      	movs	r3, #154	@ 0x9a
 8005d0a:	05db      	lsls	r3, r3, #23
 8005d0c:	429e      	cmp	r6, r3
 8005d0e:	d800      	bhi.n	8005d12 <__ieee754_powf+0x162>
 8005d10:	e098      	b.n	8005e44 <__ieee754_powf+0x294>
 8005d12:	4b46      	ldr	r3, [pc, #280]	@ (8005e2c <__ieee754_powf+0x27c>)
 8005d14:	429d      	cmp	r5, r3
 8005d16:	d805      	bhi.n	8005d24 <__ieee754_powf+0x174>
 8005d18:	2f00      	cmp	r7, #0
 8005d1a:	da08      	bge.n	8005d2e <__ieee754_powf+0x17e>
 8005d1c:	2000      	movs	r0, #0
 8005d1e:	f000 fb19 	bl	8006354 <__math_oflowf>
 8005d22:	e75b      	b.n	8005bdc <__ieee754_powf+0x2c>
 8005d24:	4b42      	ldr	r3, [pc, #264]	@ (8005e30 <__ieee754_powf+0x280>)
 8005d26:	429d      	cmp	r5, r3
 8005d28:	d905      	bls.n	8005d36 <__ieee754_powf+0x186>
 8005d2a:	2f00      	cmp	r7, #0
 8005d2c:	dcf6      	bgt.n	8005d1c <__ieee754_powf+0x16c>
 8005d2e:	2000      	movs	r0, #0
 8005d30:	f000 fb0a 	bl	8006348 <__math_uflowf>
 8005d34:	e752      	b.n	8005bdc <__ieee754_powf+0x2c>
 8005d36:	21fe      	movs	r1, #254	@ 0xfe
 8005d38:	0589      	lsls	r1, r1, #22
 8005d3a:	f7fb f98b 	bl	8001054 <__aeabi_fsub>
 8005d3e:	493d      	ldr	r1, [pc, #244]	@ (8005e34 <__ieee754_powf+0x284>)
 8005d40:	1c04      	adds	r4, r0, #0
 8005d42:	f7fb f849 	bl	8000dd8 <__aeabi_fmul>
 8005d46:	493c      	ldr	r1, [pc, #240]	@ (8005e38 <__ieee754_powf+0x288>)
 8005d48:	1c05      	adds	r5, r0, #0
 8005d4a:	1c20      	adds	r0, r4, #0
 8005d4c:	f7fb f844 	bl	8000dd8 <__aeabi_fmul>
 8005d50:	21fa      	movs	r1, #250	@ 0xfa
 8005d52:	1c06      	adds	r6, r0, #0
 8005d54:	0589      	lsls	r1, r1, #22
 8005d56:	1c20      	adds	r0, r4, #0
 8005d58:	f7fb f83e 	bl	8000dd8 <__aeabi_fmul>
 8005d5c:	1c01      	adds	r1, r0, #0
 8005d5e:	4837      	ldr	r0, [pc, #220]	@ (8005e3c <__ieee754_powf+0x28c>)
 8005d60:	f7fb f978 	bl	8001054 <__aeabi_fsub>
 8005d64:	1c21      	adds	r1, r4, #0
 8005d66:	f7fb f837 	bl	8000dd8 <__aeabi_fmul>
 8005d6a:	1c01      	adds	r1, r0, #0
 8005d6c:	20fc      	movs	r0, #252	@ 0xfc
 8005d6e:	0580      	lsls	r0, r0, #22
 8005d70:	f7fb f970 	bl	8001054 <__aeabi_fsub>
 8005d74:	1c21      	adds	r1, r4, #0
 8005d76:	1c07      	adds	r7, r0, #0
 8005d78:	1c20      	adds	r0, r4, #0
 8005d7a:	f7fb f82d 	bl	8000dd8 <__aeabi_fmul>
 8005d7e:	1c01      	adds	r1, r0, #0
 8005d80:	1c38      	adds	r0, r7, #0
 8005d82:	f7fb f829 	bl	8000dd8 <__aeabi_fmul>
 8005d86:	492e      	ldr	r1, [pc, #184]	@ (8005e40 <__ieee754_powf+0x290>)
 8005d88:	f7fb f826 	bl	8000dd8 <__aeabi_fmul>
 8005d8c:	1c01      	adds	r1, r0, #0
 8005d8e:	1c30      	adds	r0, r6, #0
 8005d90:	f7fb f960 	bl	8001054 <__aeabi_fsub>
 8005d94:	1c01      	adds	r1, r0, #0
 8005d96:	1c06      	adds	r6, r0, #0
 8005d98:	1c28      	adds	r0, r5, #0
 8005d9a:	f7fa fcad 	bl	80006f8 <__aeabi_fadd>
 8005d9e:	0b04      	lsrs	r4, r0, #12
 8005da0:	0324      	lsls	r4, r4, #12
 8005da2:	1c29      	adds	r1, r5, #0
 8005da4:	1c20      	adds	r0, r4, #0
 8005da6:	f7fb f955 	bl	8001054 <__aeabi_fsub>
 8005daa:	1c01      	adds	r1, r0, #0
 8005dac:	1c30      	adds	r0, r6, #0
 8005dae:	f7fb f951 	bl	8001054 <__aeabi_fsub>
 8005db2:	9b02      	ldr	r3, [sp, #8]
 8005db4:	9a05      	ldr	r2, [sp, #20]
 8005db6:	3b01      	subs	r3, #1
 8005db8:	1c06      	adds	r6, r0, #0
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	d100      	bne.n	8005dc0 <__ieee754_powf+0x210>
 8005dbe:	e14e      	b.n	800605e <__ieee754_powf+0x4ae>
 8005dc0:	27fe      	movs	r7, #254	@ 0xfe
 8005dc2:	05bf      	lsls	r7, r7, #22
 8005dc4:	9b01      	ldr	r3, [sp, #4]
 8005dc6:	9801      	ldr	r0, [sp, #4]
 8005dc8:	0b1d      	lsrs	r5, r3, #12
 8005dca:	032d      	lsls	r5, r5, #12
 8005dcc:	1c29      	adds	r1, r5, #0
 8005dce:	f7fb f941 	bl	8001054 <__aeabi_fsub>
 8005dd2:	1c21      	adds	r1, r4, #0
 8005dd4:	f7fb f800 	bl	8000dd8 <__aeabi_fmul>
 8005dd8:	9901      	ldr	r1, [sp, #4]
 8005dda:	9002      	str	r0, [sp, #8]
 8005ddc:	1c30      	adds	r0, r6, #0
 8005dde:	f7fa fffb 	bl	8000dd8 <__aeabi_fmul>
 8005de2:	1c01      	adds	r1, r0, #0
 8005de4:	9802      	ldr	r0, [sp, #8]
 8005de6:	f7fa fc87 	bl	80006f8 <__aeabi_fadd>
 8005dea:	1c29      	adds	r1, r5, #0
 8005dec:	9001      	str	r0, [sp, #4]
 8005dee:	1c20      	adds	r0, r4, #0
 8005df0:	f7fa fff2 	bl	8000dd8 <__aeabi_fmul>
 8005df4:	1c01      	adds	r1, r0, #0
 8005df6:	1c04      	adds	r4, r0, #0
 8005df8:	9801      	ldr	r0, [sp, #4]
 8005dfa:	f7fa fc7d 	bl	80006f8 <__aeabi_fadd>
 8005dfe:	0043      	lsls	r3, r0, #1
 8005e00:	1c06      	adds	r6, r0, #0
 8005e02:	9002      	str	r0, [sp, #8]
 8005e04:	085b      	lsrs	r3, r3, #1
 8005e06:	2800      	cmp	r0, #0
 8005e08:	dc00      	bgt.n	8005e0c <__ieee754_powf+0x25c>
 8005e0a:	e13e      	b.n	800608a <__ieee754_powf+0x4da>
 8005e0c:	2286      	movs	r2, #134	@ 0x86
 8005e0e:	05d2      	lsls	r2, r2, #23
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d800      	bhi.n	8005e16 <__ieee754_powf+0x266>
 8005e14:	e125      	b.n	8006062 <__ieee754_powf+0x4b2>
 8005e16:	2100      	movs	r1, #0
 8005e18:	1c38      	adds	r0, r7, #0
 8005e1a:	f7fa fb13 	bl	8000444 <__aeabi_fcmplt>
 8005e1e:	1e43      	subs	r3, r0, #1
 8005e20:	4198      	sbcs	r0, r3
 8005e22:	e77c      	b.n	8005d1e <__ieee754_powf+0x16e>
 8005e24:	ff800000 	.word	0xff800000
 8005e28:	c0800000 	.word	0xc0800000
 8005e2c:	3f7ffff3 	.word	0x3f7ffff3
 8005e30:	3f800007 	.word	0x3f800007
 8005e34:	3fb8aa00 	.word	0x3fb8aa00
 8005e38:	36eca570 	.word	0x36eca570
 8005e3c:	3eaaaaab 	.word	0x3eaaaaab
 8005e40:	3fb8aa3b 	.word	0x3fb8aa3b
 8005e44:	23ff      	movs	r3, #255	@ 0xff
 8005e46:	05db      	lsls	r3, r3, #23
 8005e48:	2200      	movs	r2, #0
 8005e4a:	4223      	tst	r3, r4
 8005e4c:	d106      	bne.n	8005e5c <__ieee754_powf+0x2ac>
 8005e4e:	2197      	movs	r1, #151	@ 0x97
 8005e50:	05c9      	lsls	r1, r1, #23
 8005e52:	f7fa ffc1 	bl	8000dd8 <__aeabi_fmul>
 8005e56:	2218      	movs	r2, #24
 8005e58:	9003      	str	r0, [sp, #12]
 8005e5a:	4252      	negs	r2, r2
 8005e5c:	24fe      	movs	r4, #254	@ 0xfe
 8005e5e:	9b03      	ldr	r3, [sp, #12]
 8005e60:	05a4      	lsls	r4, r4, #22
 8005e62:	15db      	asrs	r3, r3, #23
 8005e64:	3b7f      	subs	r3, #127	@ 0x7f
 8005e66:	189b      	adds	r3, r3, r2
 8005e68:	9304      	str	r3, [sp, #16]
 8005e6a:	9b03      	ldr	r3, [sp, #12]
 8005e6c:	4ae3      	ldr	r2, [pc, #908]	@ (80061fc <__ieee754_powf+0x64c>)
 8005e6e:	025b      	lsls	r3, r3, #9
 8005e70:	0a5b      	lsrs	r3, r3, #9
 8005e72:	2500      	movs	r5, #0
 8005e74:	431c      	orrs	r4, r3
 8005e76:	4293      	cmp	r3, r2
 8005e78:	dd09      	ble.n	8005e8e <__ieee754_powf+0x2de>
 8005e7a:	4ae1      	ldr	r2, [pc, #900]	@ (8006200 <__ieee754_powf+0x650>)
 8005e7c:	3501      	adds	r5, #1
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	dd05      	ble.n	8005e8e <__ieee754_powf+0x2de>
 8005e82:	9b04      	ldr	r3, [sp, #16]
 8005e84:	195b      	adds	r3, r3, r5
 8005e86:	2500      	movs	r5, #0
 8005e88:	9304      	str	r3, [sp, #16]
 8005e8a:	4bde      	ldr	r3, [pc, #888]	@ (8006204 <__ieee754_powf+0x654>)
 8005e8c:	18e4      	adds	r4, r4, r3
 8005e8e:	4bde      	ldr	r3, [pc, #888]	@ (8006208 <__ieee754_powf+0x658>)
 8005e90:	00aa      	lsls	r2, r5, #2
 8005e92:	58d7      	ldr	r7, [r2, r3]
 8005e94:	1c20      	adds	r0, r4, #0
 8005e96:	1c39      	adds	r1, r7, #0
 8005e98:	9206      	str	r2, [sp, #24]
 8005e9a:	9409      	str	r4, [sp, #36]	@ 0x24
 8005e9c:	f7fb f8da 	bl	8001054 <__aeabi_fsub>
 8005ea0:	1c21      	adds	r1, r4, #0
 8005ea2:	9007      	str	r0, [sp, #28]
 8005ea4:	1c38      	adds	r0, r7, #0
 8005ea6:	f7fa fc27 	bl	80006f8 <__aeabi_fadd>
 8005eaa:	1c01      	adds	r1, r0, #0
 8005eac:	20fe      	movs	r0, #254	@ 0xfe
 8005eae:	0580      	lsls	r0, r0, #22
 8005eb0:	f7fa fdac 	bl	8000a0c <__aeabi_fdiv>
 8005eb4:	1c01      	adds	r1, r0, #0
 8005eb6:	9008      	str	r0, [sp, #32]
 8005eb8:	9807      	ldr	r0, [sp, #28]
 8005eba:	f7fa ff8d 	bl	8000dd8 <__aeabi_fmul>
 8005ebe:	9003      	str	r0, [sp, #12]
 8005ec0:	9b03      	ldr	r3, [sp, #12]
 8005ec2:	2280      	movs	r2, #128	@ 0x80
 8005ec4:	0b1e      	lsrs	r6, r3, #12
 8005ec6:	2380      	movs	r3, #128	@ 0x80
 8005ec8:	1064      	asrs	r4, r4, #1
 8005eca:	0592      	lsls	r2, r2, #22
 8005ecc:	02db      	lsls	r3, r3, #11
 8005ece:	4322      	orrs	r2, r4
 8005ed0:	18d2      	adds	r2, r2, r3
 8005ed2:	056d      	lsls	r5, r5, #21
 8005ed4:	1955      	adds	r5, r2, r5
 8005ed6:	0336      	lsls	r6, r6, #12
 8005ed8:	1c29      	adds	r1, r5, #0
 8005eda:	1c30      	adds	r0, r6, #0
 8005edc:	f7fa ff7c 	bl	8000dd8 <__aeabi_fmul>
 8005ee0:	1c01      	adds	r1, r0, #0
 8005ee2:	9807      	ldr	r0, [sp, #28]
 8005ee4:	f7fb f8b6 	bl	8001054 <__aeabi_fsub>
 8005ee8:	1c39      	adds	r1, r7, #0
 8005eea:	1c04      	adds	r4, r0, #0
 8005eec:	1c28      	adds	r0, r5, #0
 8005eee:	f7fb f8b1 	bl	8001054 <__aeabi_fsub>
 8005ef2:	1c01      	adds	r1, r0, #0
 8005ef4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005ef6:	f7fb f8ad 	bl	8001054 <__aeabi_fsub>
 8005efa:	1c31      	adds	r1, r6, #0
 8005efc:	f7fa ff6c 	bl	8000dd8 <__aeabi_fmul>
 8005f00:	1c01      	adds	r1, r0, #0
 8005f02:	1c20      	adds	r0, r4, #0
 8005f04:	f7fb f8a6 	bl	8001054 <__aeabi_fsub>
 8005f08:	9908      	ldr	r1, [sp, #32]
 8005f0a:	f7fa ff65 	bl	8000dd8 <__aeabi_fmul>
 8005f0e:	9903      	ldr	r1, [sp, #12]
 8005f10:	9007      	str	r0, [sp, #28]
 8005f12:	1c08      	adds	r0, r1, #0
 8005f14:	f7fa ff60 	bl	8000dd8 <__aeabi_fmul>
 8005f18:	49bc      	ldr	r1, [pc, #752]	@ (800620c <__ieee754_powf+0x65c>)
 8005f1a:	1c04      	adds	r4, r0, #0
 8005f1c:	f7fa ff5c 	bl	8000dd8 <__aeabi_fmul>
 8005f20:	49bb      	ldr	r1, [pc, #748]	@ (8006210 <__ieee754_powf+0x660>)
 8005f22:	f7fa fbe9 	bl	80006f8 <__aeabi_fadd>
 8005f26:	1c21      	adds	r1, r4, #0
 8005f28:	f7fa ff56 	bl	8000dd8 <__aeabi_fmul>
 8005f2c:	49b9      	ldr	r1, [pc, #740]	@ (8006214 <__ieee754_powf+0x664>)
 8005f2e:	f7fa fbe3 	bl	80006f8 <__aeabi_fadd>
 8005f32:	1c21      	adds	r1, r4, #0
 8005f34:	f7fa ff50 	bl	8000dd8 <__aeabi_fmul>
 8005f38:	49b7      	ldr	r1, [pc, #732]	@ (8006218 <__ieee754_powf+0x668>)
 8005f3a:	f7fa fbdd 	bl	80006f8 <__aeabi_fadd>
 8005f3e:	1c21      	adds	r1, r4, #0
 8005f40:	f7fa ff4a 	bl	8000dd8 <__aeabi_fmul>
 8005f44:	49b5      	ldr	r1, [pc, #724]	@ (800621c <__ieee754_powf+0x66c>)
 8005f46:	f7fa fbd7 	bl	80006f8 <__aeabi_fadd>
 8005f4a:	1c21      	adds	r1, r4, #0
 8005f4c:	f7fa ff44 	bl	8000dd8 <__aeabi_fmul>
 8005f50:	49b3      	ldr	r1, [pc, #716]	@ (8006220 <__ieee754_powf+0x670>)
 8005f52:	f7fa fbd1 	bl	80006f8 <__aeabi_fadd>
 8005f56:	1c21      	adds	r1, r4, #0
 8005f58:	1c05      	adds	r5, r0, #0
 8005f5a:	1c20      	adds	r0, r4, #0
 8005f5c:	f7fa ff3c 	bl	8000dd8 <__aeabi_fmul>
 8005f60:	1c01      	adds	r1, r0, #0
 8005f62:	1c28      	adds	r0, r5, #0
 8005f64:	f7fa ff38 	bl	8000dd8 <__aeabi_fmul>
 8005f68:	1c31      	adds	r1, r6, #0
 8005f6a:	1c04      	adds	r4, r0, #0
 8005f6c:	9803      	ldr	r0, [sp, #12]
 8005f6e:	f7fa fbc3 	bl	80006f8 <__aeabi_fadd>
 8005f72:	9907      	ldr	r1, [sp, #28]
 8005f74:	f7fa ff30 	bl	8000dd8 <__aeabi_fmul>
 8005f78:	1c21      	adds	r1, r4, #0
 8005f7a:	f7fa fbbd 	bl	80006f8 <__aeabi_fadd>
 8005f7e:	1c31      	adds	r1, r6, #0
 8005f80:	9008      	str	r0, [sp, #32]
 8005f82:	1c30      	adds	r0, r6, #0
 8005f84:	f7fa ff28 	bl	8000dd8 <__aeabi_fmul>
 8005f88:	49a6      	ldr	r1, [pc, #664]	@ (8006224 <__ieee754_powf+0x674>)
 8005f8a:	1c07      	adds	r7, r0, #0
 8005f8c:	f7fa fbb4 	bl	80006f8 <__aeabi_fadd>
 8005f90:	9908      	ldr	r1, [sp, #32]
 8005f92:	f7fa fbb1 	bl	80006f8 <__aeabi_fadd>
 8005f96:	0b04      	lsrs	r4, r0, #12
 8005f98:	0324      	lsls	r4, r4, #12
 8005f9a:	1c21      	adds	r1, r4, #0
 8005f9c:	1c30      	adds	r0, r6, #0
 8005f9e:	f7fa ff1b 	bl	8000dd8 <__aeabi_fmul>
 8005fa2:	49a0      	ldr	r1, [pc, #640]	@ (8006224 <__ieee754_powf+0x674>)
 8005fa4:	1c05      	adds	r5, r0, #0
 8005fa6:	1c20      	adds	r0, r4, #0
 8005fa8:	f7fb f854 	bl	8001054 <__aeabi_fsub>
 8005fac:	1c39      	adds	r1, r7, #0
 8005fae:	f7fb f851 	bl	8001054 <__aeabi_fsub>
 8005fb2:	1c01      	adds	r1, r0, #0
 8005fb4:	9808      	ldr	r0, [sp, #32]
 8005fb6:	f7fb f84d 	bl	8001054 <__aeabi_fsub>
 8005fba:	9903      	ldr	r1, [sp, #12]
 8005fbc:	f7fa ff0c 	bl	8000dd8 <__aeabi_fmul>
 8005fc0:	1c21      	adds	r1, r4, #0
 8005fc2:	1c06      	adds	r6, r0, #0
 8005fc4:	9807      	ldr	r0, [sp, #28]
 8005fc6:	f7fa ff07 	bl	8000dd8 <__aeabi_fmul>
 8005fca:	1c01      	adds	r1, r0, #0
 8005fcc:	1c30      	adds	r0, r6, #0
 8005fce:	f7fa fb93 	bl	80006f8 <__aeabi_fadd>
 8005fd2:	1c06      	adds	r6, r0, #0
 8005fd4:	1c01      	adds	r1, r0, #0
 8005fd6:	1c28      	adds	r0, r5, #0
 8005fd8:	f7fa fb8e 	bl	80006f8 <__aeabi_fadd>
 8005fdc:	0b04      	lsrs	r4, r0, #12
 8005fde:	0324      	lsls	r4, r4, #12
 8005fe0:	4991      	ldr	r1, [pc, #580]	@ (8006228 <__ieee754_powf+0x678>)
 8005fe2:	1c20      	adds	r0, r4, #0
 8005fe4:	f7fa fef8 	bl	8000dd8 <__aeabi_fmul>
 8005fe8:	1c29      	adds	r1, r5, #0
 8005fea:	9003      	str	r0, [sp, #12]
 8005fec:	1c20      	adds	r0, r4, #0
 8005fee:	f7fb f831 	bl	8001054 <__aeabi_fsub>
 8005ff2:	1c01      	adds	r1, r0, #0
 8005ff4:	1c30      	adds	r0, r6, #0
 8005ff6:	f7fb f82d 	bl	8001054 <__aeabi_fsub>
 8005ffa:	498c      	ldr	r1, [pc, #560]	@ (800622c <__ieee754_powf+0x67c>)
 8005ffc:	f7fa feec 	bl	8000dd8 <__aeabi_fmul>
 8006000:	498b      	ldr	r1, [pc, #556]	@ (8006230 <__ieee754_powf+0x680>)
 8006002:	1c05      	adds	r5, r0, #0
 8006004:	1c20      	adds	r0, r4, #0
 8006006:	f7fa fee7 	bl	8000dd8 <__aeabi_fmul>
 800600a:	1c01      	adds	r1, r0, #0
 800600c:	1c28      	adds	r0, r5, #0
 800600e:	f7fa fb73 	bl	80006f8 <__aeabi_fadd>
 8006012:	9a06      	ldr	r2, [sp, #24]
 8006014:	4b87      	ldr	r3, [pc, #540]	@ (8006234 <__ieee754_powf+0x684>)
 8006016:	58d1      	ldr	r1, [r2, r3]
 8006018:	f7fa fb6e 	bl	80006f8 <__aeabi_fadd>
 800601c:	1c05      	adds	r5, r0, #0
 800601e:	9804      	ldr	r0, [sp, #16]
 8006020:	f7fb f9f2 	bl	8001408 <__aeabi_i2f>
 8006024:	4b84      	ldr	r3, [pc, #528]	@ (8006238 <__ieee754_powf+0x688>)
 8006026:	9a06      	ldr	r2, [sp, #24]
 8006028:	1c06      	adds	r6, r0, #0
 800602a:	58d7      	ldr	r7, [r2, r3]
 800602c:	1c29      	adds	r1, r5, #0
 800602e:	9803      	ldr	r0, [sp, #12]
 8006030:	f7fa fb62 	bl	80006f8 <__aeabi_fadd>
 8006034:	1c39      	adds	r1, r7, #0
 8006036:	f7fa fb5f 	bl	80006f8 <__aeabi_fadd>
 800603a:	1c31      	adds	r1, r6, #0
 800603c:	f7fa fb5c 	bl	80006f8 <__aeabi_fadd>
 8006040:	0b04      	lsrs	r4, r0, #12
 8006042:	0324      	lsls	r4, r4, #12
 8006044:	1c31      	adds	r1, r6, #0
 8006046:	1c20      	adds	r0, r4, #0
 8006048:	f7fb f804 	bl	8001054 <__aeabi_fsub>
 800604c:	1c39      	adds	r1, r7, #0
 800604e:	f7fb f801 	bl	8001054 <__aeabi_fsub>
 8006052:	9903      	ldr	r1, [sp, #12]
 8006054:	f7fa fffe 	bl	8001054 <__aeabi_fsub>
 8006058:	1c01      	adds	r1, r0, #0
 800605a:	1c28      	adds	r0, r5, #0
 800605c:	e6a7      	b.n	8005dae <__ieee754_powf+0x1fe>
 800605e:	4f77      	ldr	r7, [pc, #476]	@ (800623c <__ieee754_powf+0x68c>)
 8006060:	e6b0      	b.n	8005dc4 <__ieee754_powf+0x214>
 8006062:	4293      	cmp	r3, r2
 8006064:	d126      	bne.n	80060b4 <__ieee754_powf+0x504>
 8006066:	4976      	ldr	r1, [pc, #472]	@ (8006240 <__ieee754_powf+0x690>)
 8006068:	9801      	ldr	r0, [sp, #4]
 800606a:	f7fa fb45 	bl	80006f8 <__aeabi_fadd>
 800606e:	1c21      	adds	r1, r4, #0
 8006070:	1c05      	adds	r5, r0, #0
 8006072:	1c30      	adds	r0, r6, #0
 8006074:	f7fa ffee 	bl	8001054 <__aeabi_fsub>
 8006078:	1c01      	adds	r1, r0, #0
 800607a:	1c28      	adds	r0, r5, #0
 800607c:	f7fa f9f6 	bl	800046c <__aeabi_fcmpgt>
 8006080:	2800      	cmp	r0, #0
 8006082:	d000      	beq.n	8006086 <__ieee754_powf+0x4d6>
 8006084:	e6c7      	b.n	8005e16 <__ieee754_powf+0x266>
 8006086:	2386      	movs	r3, #134	@ 0x86
 8006088:	e01a      	b.n	80060c0 <__ieee754_powf+0x510>
 800608a:	4a6e      	ldr	r2, [pc, #440]	@ (8006244 <__ieee754_powf+0x694>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d906      	bls.n	800609e <__ieee754_powf+0x4ee>
 8006090:	2100      	movs	r1, #0
 8006092:	1c38      	adds	r0, r7, #0
 8006094:	f7fa f9d6 	bl	8000444 <__aeabi_fcmplt>
 8006098:	1e43      	subs	r3, r0, #1
 800609a:	4198      	sbcs	r0, r3
 800609c:	e648      	b.n	8005d30 <__ieee754_powf+0x180>
 800609e:	4293      	cmp	r3, r2
 80060a0:	d108      	bne.n	80060b4 <__ieee754_powf+0x504>
 80060a2:	1c21      	adds	r1, r4, #0
 80060a4:	f7fa ffd6 	bl	8001054 <__aeabi_fsub>
 80060a8:	9901      	ldr	r1, [sp, #4]
 80060aa:	f7fa f9e9 	bl	8000480 <__aeabi_fcmpge>
 80060ae:	2800      	cmp	r0, #0
 80060b0:	d0e9      	beq.n	8006086 <__ieee754_powf+0x4d6>
 80060b2:	e7ed      	b.n	8006090 <__ieee754_powf+0x4e0>
 80060b4:	22fc      	movs	r2, #252	@ 0xfc
 80060b6:	2500      	movs	r5, #0
 80060b8:	0592      	lsls	r2, r2, #22
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d91a      	bls.n	80060f4 <__ieee754_powf+0x544>
 80060be:	15db      	asrs	r3, r3, #23
 80060c0:	2580      	movs	r5, #128	@ 0x80
 80060c2:	042d      	lsls	r5, r5, #16
 80060c4:	002a      	movs	r2, r5
 80060c6:	3b7e      	subs	r3, #126	@ 0x7e
 80060c8:	411a      	asrs	r2, r3
 80060ca:	1993      	adds	r3, r2, r6
 80060cc:	15da      	asrs	r2, r3, #23
 80060ce:	494d      	ldr	r1, [pc, #308]	@ (8006204 <__ieee754_powf+0x654>)
 80060d0:	b2d2      	uxtb	r2, r2
 80060d2:	3a7f      	subs	r2, #127	@ 0x7f
 80060d4:	4111      	asrs	r1, r2
 80060d6:	4019      	ands	r1, r3
 80060d8:	025b      	lsls	r3, r3, #9
 80060da:	0a5b      	lsrs	r3, r3, #9
 80060dc:	431d      	orrs	r5, r3
 80060de:	2317      	movs	r3, #23
 80060e0:	1a9b      	subs	r3, r3, r2
 80060e2:	411d      	asrs	r5, r3
 80060e4:	9b02      	ldr	r3, [sp, #8]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	da00      	bge.n	80060ec <__ieee754_powf+0x53c>
 80060ea:	426d      	negs	r5, r5
 80060ec:	1c20      	adds	r0, r4, #0
 80060ee:	f7fa ffb1 	bl	8001054 <__aeabi_fsub>
 80060f2:	1c04      	adds	r4, r0, #0
 80060f4:	9901      	ldr	r1, [sp, #4]
 80060f6:	1c20      	adds	r0, r4, #0
 80060f8:	f7fa fafe 	bl	80006f8 <__aeabi_fadd>
 80060fc:	0b00      	lsrs	r0, r0, #12
 80060fe:	0303      	lsls	r3, r0, #12
 8006100:	1c18      	adds	r0, r3, #0
 8006102:	4951      	ldr	r1, [pc, #324]	@ (8006248 <__ieee754_powf+0x698>)
 8006104:	001e      	movs	r6, r3
 8006106:	f7fa fe67 	bl	8000dd8 <__aeabi_fmul>
 800610a:	1c21      	adds	r1, r4, #0
 800610c:	9002      	str	r0, [sp, #8]
 800610e:	1c30      	adds	r0, r6, #0
 8006110:	f7fa ffa0 	bl	8001054 <__aeabi_fsub>
 8006114:	1c01      	adds	r1, r0, #0
 8006116:	9801      	ldr	r0, [sp, #4]
 8006118:	f7fa ff9c 	bl	8001054 <__aeabi_fsub>
 800611c:	494b      	ldr	r1, [pc, #300]	@ (800624c <__ieee754_powf+0x69c>)
 800611e:	f7fa fe5b 	bl	8000dd8 <__aeabi_fmul>
 8006122:	494b      	ldr	r1, [pc, #300]	@ (8006250 <__ieee754_powf+0x6a0>)
 8006124:	1c04      	adds	r4, r0, #0
 8006126:	1c30      	adds	r0, r6, #0
 8006128:	f7fa fe56 	bl	8000dd8 <__aeabi_fmul>
 800612c:	1c01      	adds	r1, r0, #0
 800612e:	1c20      	adds	r0, r4, #0
 8006130:	f7fa fae2 	bl	80006f8 <__aeabi_fadd>
 8006134:	1c06      	adds	r6, r0, #0
 8006136:	1c01      	adds	r1, r0, #0
 8006138:	9802      	ldr	r0, [sp, #8]
 800613a:	f7fa fadd 	bl	80006f8 <__aeabi_fadd>
 800613e:	9902      	ldr	r1, [sp, #8]
 8006140:	1c04      	adds	r4, r0, #0
 8006142:	f7fa ff87 	bl	8001054 <__aeabi_fsub>
 8006146:	1c01      	adds	r1, r0, #0
 8006148:	1c30      	adds	r0, r6, #0
 800614a:	f7fa ff83 	bl	8001054 <__aeabi_fsub>
 800614e:	1c21      	adds	r1, r4, #0
 8006150:	9001      	str	r0, [sp, #4]
 8006152:	1c20      	adds	r0, r4, #0
 8006154:	f7fa fe40 	bl	8000dd8 <__aeabi_fmul>
 8006158:	493e      	ldr	r1, [pc, #248]	@ (8006254 <__ieee754_powf+0x6a4>)
 800615a:	1c06      	adds	r6, r0, #0
 800615c:	f7fa fe3c 	bl	8000dd8 <__aeabi_fmul>
 8006160:	493d      	ldr	r1, [pc, #244]	@ (8006258 <__ieee754_powf+0x6a8>)
 8006162:	f7fa ff77 	bl	8001054 <__aeabi_fsub>
 8006166:	1c31      	adds	r1, r6, #0
 8006168:	f7fa fe36 	bl	8000dd8 <__aeabi_fmul>
 800616c:	493b      	ldr	r1, [pc, #236]	@ (800625c <__ieee754_powf+0x6ac>)
 800616e:	f7fa fac3 	bl	80006f8 <__aeabi_fadd>
 8006172:	1c31      	adds	r1, r6, #0
 8006174:	f7fa fe30 	bl	8000dd8 <__aeabi_fmul>
 8006178:	4939      	ldr	r1, [pc, #228]	@ (8006260 <__ieee754_powf+0x6b0>)
 800617a:	f7fa ff6b 	bl	8001054 <__aeabi_fsub>
 800617e:	1c31      	adds	r1, r6, #0
 8006180:	f7fa fe2a 	bl	8000dd8 <__aeabi_fmul>
 8006184:	4937      	ldr	r1, [pc, #220]	@ (8006264 <__ieee754_powf+0x6b4>)
 8006186:	f7fa fab7 	bl	80006f8 <__aeabi_fadd>
 800618a:	1c31      	adds	r1, r6, #0
 800618c:	f7fa fe24 	bl	8000dd8 <__aeabi_fmul>
 8006190:	1c01      	adds	r1, r0, #0
 8006192:	1c20      	adds	r0, r4, #0
 8006194:	f7fa ff5e 	bl	8001054 <__aeabi_fsub>
 8006198:	1c06      	adds	r6, r0, #0
 800619a:	1c01      	adds	r1, r0, #0
 800619c:	1c20      	adds	r0, r4, #0
 800619e:	f7fa fe1b 	bl	8000dd8 <__aeabi_fmul>
 80061a2:	2180      	movs	r1, #128	@ 0x80
 80061a4:	9002      	str	r0, [sp, #8]
 80061a6:	05c9      	lsls	r1, r1, #23
 80061a8:	1c30      	adds	r0, r6, #0
 80061aa:	f7fa ff53 	bl	8001054 <__aeabi_fsub>
 80061ae:	1c01      	adds	r1, r0, #0
 80061b0:	9802      	ldr	r0, [sp, #8]
 80061b2:	f7fa fc2b 	bl	8000a0c <__aeabi_fdiv>
 80061b6:	9901      	ldr	r1, [sp, #4]
 80061b8:	1c06      	adds	r6, r0, #0
 80061ba:	1c20      	adds	r0, r4, #0
 80061bc:	f7fa fe0c 	bl	8000dd8 <__aeabi_fmul>
 80061c0:	9901      	ldr	r1, [sp, #4]
 80061c2:	f7fa fa99 	bl	80006f8 <__aeabi_fadd>
 80061c6:	1c01      	adds	r1, r0, #0
 80061c8:	1c30      	adds	r0, r6, #0
 80061ca:	f7fa ff43 	bl	8001054 <__aeabi_fsub>
 80061ce:	1c21      	adds	r1, r4, #0
 80061d0:	f7fa ff40 	bl	8001054 <__aeabi_fsub>
 80061d4:	1c01      	adds	r1, r0, #0
 80061d6:	20fe      	movs	r0, #254	@ 0xfe
 80061d8:	0580      	lsls	r0, r0, #22
 80061da:	f7fa ff3b 	bl	8001054 <__aeabi_fsub>
 80061de:	05eb      	lsls	r3, r5, #23
 80061e0:	181b      	adds	r3, r3, r0
 80061e2:	15da      	asrs	r2, r3, #23
 80061e4:	2a00      	cmp	r2, #0
 80061e6:	dc04      	bgt.n	80061f2 <__ieee754_powf+0x642>
 80061e8:	0029      	movs	r1, r5
 80061ea:	f000 f841 	bl	8006270 <scalbnf>
 80061ee:	1c39      	adds	r1, r7, #0
 80061f0:	e54a      	b.n	8005c88 <__ieee754_powf+0xd8>
 80061f2:	1c18      	adds	r0, r3, #0
 80061f4:	e7fb      	b.n	80061ee <__ieee754_powf+0x63e>
 80061f6:	20fe      	movs	r0, #254	@ 0xfe
 80061f8:	0580      	lsls	r0, r0, #22
 80061fa:	e4ef      	b.n	8005bdc <__ieee754_powf+0x2c>
 80061fc:	001cc471 	.word	0x001cc471
 8006200:	005db3d6 	.word	0x005db3d6
 8006204:	ff800000 	.word	0xff800000
 8006208:	080065cc 	.word	0x080065cc
 800620c:	3e53f142 	.word	0x3e53f142
 8006210:	3e6c3255 	.word	0x3e6c3255
 8006214:	3e8ba305 	.word	0x3e8ba305
 8006218:	3eaaaaab 	.word	0x3eaaaaab
 800621c:	3edb6db7 	.word	0x3edb6db7
 8006220:	3f19999a 	.word	0x3f19999a
 8006224:	40400000 	.word	0x40400000
 8006228:	3f763800 	.word	0x3f763800
 800622c:	3f76384f 	.word	0x3f76384f
 8006230:	369dc3a0 	.word	0x369dc3a0
 8006234:	080065bc 	.word	0x080065bc
 8006238:	080065c4 	.word	0x080065c4
 800623c:	bf800000 	.word	0xbf800000
 8006240:	3338aa3c 	.word	0x3338aa3c
 8006244:	43160000 	.word	0x43160000
 8006248:	3f317200 	.word	0x3f317200
 800624c:	3f317218 	.word	0x3f317218
 8006250:	35bfbe8c 	.word	0x35bfbe8c
 8006254:	3331bb4c 	.word	0x3331bb4c
 8006258:	35ddea0e 	.word	0x35ddea0e
 800625c:	388ab355 	.word	0x388ab355
 8006260:	3b360b61 	.word	0x3b360b61
 8006264:	3e2aaaab 	.word	0x3e2aaaab

08006268 <fabsf>:
 8006268:	0040      	lsls	r0, r0, #1
 800626a:	0840      	lsrs	r0, r0, #1
 800626c:	4770      	bx	lr
	...

08006270 <scalbnf>:
 8006270:	0043      	lsls	r3, r0, #1
 8006272:	b570      	push	{r4, r5, r6, lr}
 8006274:	0002      	movs	r2, r0
 8006276:	000c      	movs	r4, r1
 8006278:	085d      	lsrs	r5, r3, #1
 800627a:	2b00      	cmp	r3, #0
 800627c:	d006      	beq.n	800628c <scalbnf+0x1c>
 800627e:	21ff      	movs	r1, #255	@ 0xff
 8006280:	05c9      	lsls	r1, r1, #23
 8006282:	428d      	cmp	r5, r1
 8006284:	d303      	bcc.n	800628e <scalbnf+0x1e>
 8006286:	1c01      	adds	r1, r0, #0
 8006288:	f7fa fa36 	bl	80006f8 <__aeabi_fadd>
 800628c:	bd70      	pop	{r4, r5, r6, pc}
 800628e:	4208      	tst	r0, r1
 8006290:	d118      	bne.n	80062c4 <scalbnf+0x54>
 8006292:	2198      	movs	r1, #152	@ 0x98
 8006294:	05c9      	lsls	r1, r1, #23
 8006296:	f7fa fd9f 	bl	8000dd8 <__aeabi_fmul>
 800629a:	4b19      	ldr	r3, [pc, #100]	@ (8006300 <scalbnf+0x90>)
 800629c:	429c      	cmp	r4, r3
 800629e:	db0d      	blt.n	80062bc <scalbnf+0x4c>
 80062a0:	0002      	movs	r2, r0
 80062a2:	15c3      	asrs	r3, r0, #23
 80062a4:	b2db      	uxtb	r3, r3
 80062a6:	3b19      	subs	r3, #25
 80062a8:	4916      	ldr	r1, [pc, #88]	@ (8006304 <scalbnf+0x94>)
 80062aa:	428c      	cmp	r4, r1
 80062ac:	dd0c      	ble.n	80062c8 <scalbnf+0x58>
 80062ae:	4b16      	ldr	r3, [pc, #88]	@ (8006308 <scalbnf+0x98>)
 80062b0:	2800      	cmp	r0, #0
 80062b2:	da00      	bge.n	80062b6 <scalbnf+0x46>
 80062b4:	4b15      	ldr	r3, [pc, #84]	@ (800630c <scalbnf+0x9c>)
 80062b6:	4914      	ldr	r1, [pc, #80]	@ (8006308 <scalbnf+0x98>)
 80062b8:	1c18      	adds	r0, r3, #0
 80062ba:	e000      	b.n	80062be <scalbnf+0x4e>
 80062bc:	4914      	ldr	r1, [pc, #80]	@ (8006310 <scalbnf+0xa0>)
 80062be:	f7fa fd8b 	bl	8000dd8 <__aeabi_fmul>
 80062c2:	e7e3      	b.n	800628c <scalbnf+0x1c>
 80062c4:	0e1b      	lsrs	r3, r3, #24
 80062c6:	e7ef      	b.n	80062a8 <scalbnf+0x38>
 80062c8:	1919      	adds	r1, r3, r4
 80062ca:	29fe      	cmp	r1, #254	@ 0xfe
 80062cc:	dcef      	bgt.n	80062ae <scalbnf+0x3e>
 80062ce:	2900      	cmp	r1, #0
 80062d0:	dd04      	ble.n	80062dc <scalbnf+0x6c>
 80062d2:	4810      	ldr	r0, [pc, #64]	@ (8006314 <scalbnf+0xa4>)
 80062d4:	05c9      	lsls	r1, r1, #23
 80062d6:	4010      	ands	r0, r2
 80062d8:	4308      	orrs	r0, r1
 80062da:	e7d7      	b.n	800628c <scalbnf+0x1c>
 80062dc:	000b      	movs	r3, r1
 80062de:	3316      	adds	r3, #22
 80062e0:	da05      	bge.n	80062ee <scalbnf+0x7e>
 80062e2:	4b0b      	ldr	r3, [pc, #44]	@ (8006310 <scalbnf+0xa0>)
 80062e4:	2800      	cmp	r0, #0
 80062e6:	da00      	bge.n	80062ea <scalbnf+0x7a>
 80062e8:	4b0b      	ldr	r3, [pc, #44]	@ (8006318 <scalbnf+0xa8>)
 80062ea:	4909      	ldr	r1, [pc, #36]	@ (8006310 <scalbnf+0xa0>)
 80062ec:	e7e4      	b.n	80062b8 <scalbnf+0x48>
 80062ee:	3119      	adds	r1, #25
 80062f0:	05c8      	lsls	r0, r1, #23
 80062f2:	21cc      	movs	r1, #204	@ 0xcc
 80062f4:	4b07      	ldr	r3, [pc, #28]	@ (8006314 <scalbnf+0xa4>)
 80062f6:	0589      	lsls	r1, r1, #22
 80062f8:	401a      	ands	r2, r3
 80062fa:	4310      	orrs	r0, r2
 80062fc:	e7df      	b.n	80062be <scalbnf+0x4e>
 80062fe:	46c0      	nop			@ (mov r8, r8)
 8006300:	ffff3cb0 	.word	0xffff3cb0
 8006304:	0000c350 	.word	0x0000c350
 8006308:	7149f2ca 	.word	0x7149f2ca
 800630c:	f149f2ca 	.word	0xf149f2ca
 8006310:	0da24260 	.word	0x0da24260
 8006314:	807fffff 	.word	0x807fffff
 8006318:	8da24260 	.word	0x8da24260

0800631c <with_errnof>:
 800631c:	b570      	push	{r4, r5, r6, lr}
 800631e:	000d      	movs	r5, r1
 8006320:	1c04      	adds	r4, r0, #0
 8006322:	f7ff fbb5 	bl	8005a90 <__errno>
 8006326:	6005      	str	r5, [r0, #0]
 8006328:	1c20      	adds	r0, r4, #0
 800632a:	bd70      	pop	{r4, r5, r6, pc}

0800632c <xflowf>:
 800632c:	b510      	push	{r4, lr}
 800632e:	1c0b      	adds	r3, r1, #0
 8006330:	2800      	cmp	r0, #0
 8006332:	d002      	beq.n	800633a <xflowf+0xe>
 8006334:	2380      	movs	r3, #128	@ 0x80
 8006336:	061b      	lsls	r3, r3, #24
 8006338:	18cb      	adds	r3, r1, r3
 800633a:	1c18      	adds	r0, r3, #0
 800633c:	f7fa fd4c 	bl	8000dd8 <__aeabi_fmul>
 8006340:	2122      	movs	r1, #34	@ 0x22
 8006342:	f7ff ffeb 	bl	800631c <with_errnof>
 8006346:	bd10      	pop	{r4, pc}

08006348 <__math_uflowf>:
 8006348:	2180      	movs	r1, #128	@ 0x80
 800634a:	b510      	push	{r4, lr}
 800634c:	0549      	lsls	r1, r1, #21
 800634e:	f7ff ffed 	bl	800632c <xflowf>
 8006352:	bd10      	pop	{r4, pc}

08006354 <__math_oflowf>:
 8006354:	21e0      	movs	r1, #224	@ 0xe0
 8006356:	b510      	push	{r4, lr}
 8006358:	05c9      	lsls	r1, r1, #23
 800635a:	f7ff ffe7 	bl	800632c <xflowf>
 800635e:	bd10      	pop	{r4, pc}

08006360 <__ieee754_sqrtf>:
 8006360:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006362:	0003      	movs	r3, r0
 8006364:	0042      	lsls	r2, r0, #1
 8006366:	1c04      	adds	r4, r0, #0
 8006368:	20ff      	movs	r0, #255	@ 0xff
 800636a:	0852      	lsrs	r2, r2, #1
 800636c:	05c0      	lsls	r0, r0, #23
 800636e:	4282      	cmp	r2, r0
 8006370:	d30a      	bcc.n	8006388 <__ieee754_sqrtf+0x28>
 8006372:	1c21      	adds	r1, r4, #0
 8006374:	1c20      	adds	r0, r4, #0
 8006376:	f7fa fd2f 	bl	8000dd8 <__aeabi_fmul>
 800637a:	1c01      	adds	r1, r0, #0
 800637c:	1c20      	adds	r0, r4, #0
 800637e:	f7fa f9bb 	bl	80006f8 <__aeabi_fadd>
 8006382:	1c04      	adds	r4, r0, #0
 8006384:	1c20      	adds	r0, r4, #0
 8006386:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006388:	2a00      	cmp	r2, #0
 800638a:	d0fb      	beq.n	8006384 <__ieee754_sqrtf+0x24>
 800638c:	2c00      	cmp	r4, #0
 800638e:	da07      	bge.n	80063a0 <__ieee754_sqrtf+0x40>
 8006390:	1c21      	adds	r1, r4, #0
 8006392:	1c20      	adds	r0, r4, #0
 8006394:	f7fa fe5e 	bl	8001054 <__aeabi_fsub>
 8006398:	1c01      	adds	r1, r0, #0
 800639a:	f7fa fb37 	bl	8000a0c <__aeabi_fdiv>
 800639e:	e7f0      	b.n	8006382 <__ieee754_sqrtf+0x22>
 80063a0:	0022      	movs	r2, r4
 80063a2:	15e1      	asrs	r1, r4, #23
 80063a4:	4002      	ands	r2, r0
 80063a6:	4204      	tst	r4, r0
 80063a8:	d046      	beq.n	8006438 <__ieee754_sqrtf+0xd8>
 80063aa:	2280      	movs	r2, #128	@ 0x80
 80063ac:	000f      	movs	r7, r1
 80063ae:	025b      	lsls	r3, r3, #9
 80063b0:	0a5b      	lsrs	r3, r3, #9
 80063b2:	0412      	lsls	r2, r2, #16
 80063b4:	3f7f      	subs	r7, #127	@ 0x7f
 80063b6:	4313      	orrs	r3, r2
 80063b8:	07c9      	lsls	r1, r1, #31
 80063ba:	d400      	bmi.n	80063be <__ieee754_sqrtf+0x5e>
 80063bc:	005b      	lsls	r3, r3, #1
 80063be:	2400      	movs	r4, #0
 80063c0:	2180      	movs	r1, #128	@ 0x80
 80063c2:	2019      	movs	r0, #25
 80063c4:	0026      	movs	r6, r4
 80063c6:	107f      	asrs	r7, r7, #1
 80063c8:	005b      	lsls	r3, r3, #1
 80063ca:	0449      	lsls	r1, r1, #17
 80063cc:	1875      	adds	r5, r6, r1
 80063ce:	001a      	movs	r2, r3
 80063d0:	429d      	cmp	r5, r3
 80063d2:	dc02      	bgt.n	80063da <__ieee754_sqrtf+0x7a>
 80063d4:	186e      	adds	r6, r5, r1
 80063d6:	1b5a      	subs	r2, r3, r5
 80063d8:	1864      	adds	r4, r4, r1
 80063da:	3801      	subs	r0, #1
 80063dc:	0053      	lsls	r3, r2, #1
 80063de:	0849      	lsrs	r1, r1, #1
 80063e0:	2800      	cmp	r0, #0
 80063e2:	d1f3      	bne.n	80063cc <__ieee754_sqrtf+0x6c>
 80063e4:	2a00      	cmp	r2, #0
 80063e6:	d019      	beq.n	800641c <__ieee754_sqrtf+0xbc>
 80063e8:	4d17      	ldr	r5, [pc, #92]	@ (8006448 <__ieee754_sqrtf+0xe8>)
 80063ea:	4e18      	ldr	r6, [pc, #96]	@ (800644c <__ieee754_sqrtf+0xec>)
 80063ec:	6828      	ldr	r0, [r5, #0]
 80063ee:	6831      	ldr	r1, [r6, #0]
 80063f0:	682b      	ldr	r3, [r5, #0]
 80063f2:	9301      	str	r3, [sp, #4]
 80063f4:	f7fa fe2e 	bl	8001054 <__aeabi_fsub>
 80063f8:	1c01      	adds	r1, r0, #0
 80063fa:	9801      	ldr	r0, [sp, #4]
 80063fc:	f7fa f82c 	bl	8000458 <__aeabi_fcmple>
 8006400:	2800      	cmp	r0, #0
 8006402:	d00b      	beq.n	800641c <__ieee754_sqrtf+0xbc>
 8006404:	6828      	ldr	r0, [r5, #0]
 8006406:	6831      	ldr	r1, [r6, #0]
 8006408:	f7fa f976 	bl	80006f8 <__aeabi_fadd>
 800640c:	682d      	ldr	r5, [r5, #0]
 800640e:	1c01      	adds	r1, r0, #0
 8006410:	1c28      	adds	r0, r5, #0
 8006412:	f7fa f817 	bl	8000444 <__aeabi_fcmplt>
 8006416:	2800      	cmp	r0, #0
 8006418:	d011      	beq.n	800643e <__ieee754_sqrtf+0xde>
 800641a:	3402      	adds	r4, #2
 800641c:	23fc      	movs	r3, #252	@ 0xfc
 800641e:	1064      	asrs	r4, r4, #1
 8006420:	059b      	lsls	r3, r3, #22
 8006422:	18e3      	adds	r3, r4, r3
 8006424:	05fc      	lsls	r4, r7, #23
 8006426:	18e4      	adds	r4, r4, r3
 8006428:	e7ac      	b.n	8006384 <__ieee754_sqrtf+0x24>
 800642a:	005b      	lsls	r3, r3, #1
 800642c:	3201      	adds	r2, #1
 800642e:	4203      	tst	r3, r0
 8006430:	d0fb      	beq.n	800642a <__ieee754_sqrtf+0xca>
 8006432:	3a01      	subs	r2, #1
 8006434:	1a89      	subs	r1, r1, r2
 8006436:	e7b8      	b.n	80063aa <__ieee754_sqrtf+0x4a>
 8006438:	2080      	movs	r0, #128	@ 0x80
 800643a:	0400      	lsls	r0, r0, #16
 800643c:	e7f7      	b.n	800642e <__ieee754_sqrtf+0xce>
 800643e:	2301      	movs	r3, #1
 8006440:	3401      	adds	r4, #1
 8006442:	439c      	bics	r4, r3
 8006444:	e7ea      	b.n	800641c <__ieee754_sqrtf+0xbc>
 8006446:	46c0      	nop			@ (mov r8, r8)
 8006448:	200008b4 	.word	0x200008b4
 800644c:	200008b0 	.word	0x200008b0

08006450 <_init>:
 8006450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006452:	46c0      	nop			@ (mov r8, r8)
 8006454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006456:	bc08      	pop	{r3}
 8006458:	469e      	mov	lr, r3
 800645a:	4770      	bx	lr

0800645c <_fini>:
 800645c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800645e:	46c0      	nop			@ (mov r8, r8)
 8006460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006462:	bc08      	pop	{r3}
 8006464:	469e      	mov	lr, r3
 8006466:	4770      	bx	lr
